nfo

97-05-01  t-caroln     Validation DLL now will allow the DefaultDir column
		       of the Directory table to contain environment
		       variables.  In validation, this means that for the roots, a
		       %identifier is valid as well as an identifer.  For
		       non-roots, the column is validated as a filename/folder
		       name column.

97-05-01  t-caroln     Msialter.exe now correctly dumps an Icon resource to
		       a .ico file when using the -f option.

97-05-01  malcolmh     Modified MSIEXEC. Long filenames are now supported.
		       Additionally, dashes and slashes are now valid
		       characters in arguments, as long as their not the leading
		       character. That is, "msiexecd /Z 1-2-3" will be
		       interpreted as one switch (Z) with an argument (1-2-3), but
		       "msiexecd /Z -2-3" will be treated as three switched
		       (Z, 2, and 3). Msiexec no longer supports feature
		       installation. Beyond its registration and
		       debugging/testing features, the only supported options are /X for
		       remove-all and /C for configure product (i.e. go into
		       maintenance mode). Remove-all will be used by SMS
		       and Configure-product will be used by the Add/Remove
		       control panel. Use MSIEXEC(d) /? for a list of valid
		       options.
		       

97-05-01  bench        The text displayed in the UI during rollback and
		       rollback cleanup is now passed to the server in the
		       script, which is retrieved from the ActionText table of
		       the database.  The two "actions" are Rollback and
		       RollbackCleanup.  The new ixoRollbackInfo operation is
		       used to pass this information in the script.  Updated
		       the ActionText table in testdb to reflect this.

97-05-01  t-caroln     Fixed in the Validation DLL the validation of a
		       Registry Path.  Registry paths can allow any character,
		       so had to change validation to allow that.

97-05-01  t-caroln     Changed two entries in the _Validation table.  The
		       IniFile.Value columns and the RemoveIniFile.Value
		       columns are now validated as Formatted instead of
		       Idenitifer.  Also update the template database with these
		       changes.

97-05-01  bench        Added TOOLS\template.msi to the drop.  This file
		       needs to be released.

97-05-01  mattwe       Makefile:  added templatedb and repackdb options to
		       build.  Builds the template.msi, and the repack
		       wizard template database (repack.msi).    No sentinel file
		       for these yet, will add if needed.
		       

97-05-01  mattwe       Util:  fixed update/assigns

97-05-01  mattwe       Repack:  updated repkinst.bat to use repack.msi from
		       build.

97-05-01  mattwe       MsiGen:  Added RemoveIniFile population.  Added
		       RewriteString() to escape special characters that are
		       special to FormatText.  Fixed bugs related to
		       Update/Insert fixes in database.

97-05-01  mattwe       Repack:  Added IDTs for the SourceFile and
		       SourceDirectory tables to src/tools/repack/support.  These are
		       imported into the new template DB to form the
		       repack.msi template for the Repackaging Wizard.  Still
		       needs validation tables.

97-05-01  mattwe       Template:  created darwin\data\template with a
		       template DB based on testdb.  It should be a minimum DB
		       for starting new authoring, or a baseline for
		       autormated authoring tools (Repackaging Wizard.)  All new
		       schema changes need to be added here as well as in
		       testdb.

97-04-30  johndelo     MsiView.Update and MsiCursor.Update are now more
		       strict: Only fetched rows can be updated, and primary
		       key data cannot be changed (was leaving orphaned
		       records and tromping on duplicate keys and killing joins).
		       Coming soon is a new function, Replace, which will
		       delete the exising row and insert a new one as
		       necessary. Update is the only function that will allow
		       updating through a join. Old code that dependent upon
		       Update to incdiscriminantly  insert new data should
		       probably call Assign instead. More doc is forthcoming.

97-04-30  chetanp      the CustomAction table format has changed. Please
		       see help

97-04-30  bench        Changed the name of the DOC\msierror.h file to
		       msierror.mc to correspond to NT's winerror.mc.  Also
		       changed the format of this file to match winerror.mc. 
		       This change needs to be reflected in the release.

97-04-30  ivanw        Made some changes to the Browse dialog to coincide
		       with the bump in the database version. The
		       PathTailEdit control type has been renamed to PathEdit to be
		       more truthfull. Added two new control styles: SplitPath
		       and ExistingOnly. To get the same functionality as
		       before, one must add the SplitPath bit to the PathEdit,
		       DirectoryCombo and DirectoryList controls on the
		       browse dialog. These two bits are not fully implemented
		       yet, but to keep your browse dialogs running you have
		       to add the SplitPath bit now. Testdb has been
		       modified to reflect these changes.

97-04-30  chetanp      Changed the RedirectComponent table to eliminate the
		       Language column. 
		       Changed the PublishComponent table to change the
		       Language column to the Index column.
		       See help on these tables for more info.

97-04-30  bench        Completed rollback for the RegisterFonts and
		       UnregisterFonts actions.  All that remains are the
		       Register/UnregisterTypeLib actions.

97-04-30  bench        Made a few changes to font registration.  The C
		       interface to MsiServices.RegisterFont now accepts an
		       IMsiPath* rather than an IMsiPath&.  If the pointer is
		       null, the file is assumed to be located in the default
		       system font folder.  The automation interface has
		       been changed to accept either an empty argument or no
		       argument for the path, with either indicating the file
		       is in the font folder.  Finally, if the path passed
		       to RegisterFont is either empty or is equivalent to
		       the system font folder, we only register the font file
		       name, rather than the full path of the font file.

97-04-29  tracyf       The ReserveCost table is now available.  This is an
		       optional table that allows authors to reserve extra
		       disk cost in any specified directory, attributed to a
		       component.  See the help file for details.  Note that
		       I've added this table to the TestDB, and authored it
		       to reserve some extra cost under the "Month_Mar" and
		       "Tools" components.

97-04-29  bench        Made a few changes to rollback reg keys and backup
		       file locations, in accordance with the Rollback spec. 
		       The reg value to enable or disable rollback is now
		       "Enable" under HKLM\Software\Installer\Rollback.  (It
		       used to be "Mode")  Note that the interpretation of
		       this value is scheduled to change, but hasn't yet. 
		       Rollback scripts are now registered under the key
		       HKLM\Software\Installer\Rollback\Scripts.  Rollback
		       scripts are by default created in the Config.Msi folder at
		       the root of the volume containing the Windows folder.
			Backup files are now created in the Config.Msi
		       folder at the root of whatever volume the original file
		       was located on.  Finally, the location for backup
		       files and rollback scripts can be configured by setting
		       the "BackupPath" value under
		       HKLM\Software\Installer\Rollback.

97-04-29  t-caroln     MSIDBVAL -- fix for parsing properties to allow for
		       [\[] and [\}] types; fix to allow for multiple error
		       report; fix for CustomSource category used by the
		       Custom Action table.

-----------------------------
     Release 0.10.00.2829
-----------------------------

97-04-28  johndelo     Custom action support is implemented. See help for
		       details. EXE and DLL custom actions are supported,
		       script files are not supported yet. Custom actions are
		       called by putting the custom action name in the
		       sequence table, usually with a conditional expression. The
		       custom action info is in the CustomAction table, and
		       the code can be in the database or a separate file.
		       TestDb.Msi has examples of custom actions (must define
		       property: TESTACTION in order to enable the custom
		       actions).

97-04-28  ivanw        To simplify support for different scripts we
		       eliminated the support for multiple fonts within the same
		       string. We can still use the same syntax to define a
		       text style for a given string or a default one for the
		       control, but the style label can appear only at the
		       beinning of the string. Changed testdb accoringly. Old
		       databases that have style specification in the
		       middle of the string won't brake, but the style labels
		       will show up as part of the string.

97-04-28  tracyf       The RemoveFiles action has been modified slightly -
		       it now attempts its file removal action if the gating
		       component is set to any action state (iisLocal,
		       iisSource, or iisAbsent).  Before, it attempted removal
		       only for the iisLocal or iisSource states.  This was
		       changed because testing identified a real-world
		       scenario in which enabling removal during the iisAbsent
		       action state would solve an Office authoring problem.

97-04-28  tracyf       When using properties on the command line to
		       configure features (i.e. ADDLOCAL, ADDSOURCE, REMOVE, OR
		       REINSTALL), the Selection Manager now properly sets only
		       the specified feature(s) for action - all other
		       features, including children of the specified feature(s),
		       are set to the NULL (no action) state.  As a side
		       effect of this, the ProcessPropertyFeatureRequests
		       method had to be removed from the public
		       IMsiSelectionManager interface (also from automation).

97-04-28  bench        Added the file repkinst.bat to the \\united\darwin
		       drop in Tools.  This file installs the repackaging
		       wizard to the local machine.  This file needs to be
		       released.

97-04-28  mattwe       Repack:  created repackaging wizard reference
		       machine installer.  darwin\src\tools\repack\repkinst.bat. 
		       Should be run on reference machine.  Copies files
		       down, and registers darwin.

97-04-28  t-caroln     Msialter.exe -- The tool now limits one to only one
		       database file resource per launcher.  By design, all
		       file resources are neutral.  Also, the database
		       property is always neutral.  Only one database property
		       can be listed in a property file.  Will be changing the
		       install.rc file so that the Database property is
		       made neutral.

97-04-28  johndelo     MsiEngine.EvaluateCondition now takes a variety of
		       symbols besides property names: enviroment vairables
		       (% prefix), component installed state(? prefix),
		       component action state($ prefix), feature installed
		       state(! prefix), feature action state(& prefix). More info
		       in help.

97-04-28  johndelo     MsiEngine.Property, IMsiEngine::Get/SetProperty now
		       accepts environment variables if prefixed by a
		       percent sign (%). The envir.variable code was consolidated
		       here from other places (FormatText,
		       EvaluateCondition) to provide a more general behavior. Environment
		       variable get/set is only for the current process.

97-04-25  tracyf       The SetFeature member has been removed from
		       IMsiSelectionManager, since the existing ConfigureFeature
		       member already provides identical functionality.  Also,
		       ConfigureFeature has been modified to use the same
		       iisEnum constants as other SelectionManager functions.

97-04-25  t-caroln     Added checkdb as target for make win debug.  This
		       target creates a sentinel file -- checkdb.snt if
		       testdb.msi is a valid database.  Else, it outputs errors in
		       testdb.msi to standard out.  Beware!!

97-04-25  t-caroln     Added two new categories for _Validation -->
		       Property and CustomSource.  The CustomSource category will
		       be used by the CustomAction table Source column.  This
		       will occur when the CustomAction table data is
		       checked in.  The Property category is for Property strings
		       that are valid identifiers but can represent an
		       environment variable, so a percent sign is allowed.

-----------------------------
     Release 0.10.00.2825
-----------------------------

97-04-24  johndelo     InstMsi.exe (and the debug version InstMsiD.exe now
		       install the combined Msi kernel DLL, Msi(D).dll,
		       instead of MsiEng.dll+MsiSrv.dll. It will not remove or
		       unregister to old dlls (as it knows nothing about
		       them). RegMsi.exe now registeres/unregisters the combined
		       DLL if no modules are specified, but can still act
		       on the old DLLs with the options S and E.

97-04-24  tracyf       Fixed a problem involving cabinet files in which
		       more than one file is split from one disk to the next. 
		       As a side-effect of the fix, it turns out that we no
		       longer need the 'split' bit set for any files in the
		       File table (I guess you could say that Darwin's
		       "intelligence" has grown such that it no longer needs to
		       be told which files are split.  Yippee!).  If that bit
		       is set, it will now just be passively ignored, and
		       I'll eventually remove reference to it from the  docs.

97-04-24  bench        Added the Repackaging Wizard files not already dropped to the
		       \\united\darwin drop.  Each of these files needs to be released:

			 TOOLS\version.h
			 TOOLS\msidefs.h
			 TOOLS\install.h
			 TOOLS\launchrc.h
			 TOOLS\install.ico
			 TOOLS\SHIP\install.obj
			 TOOLS\DEBUG\install.obj
			 TOOLS\rungen.exe
			 TOOLS\repack.msi
			 TOOLS\REPACK\cvtres.err
			 TOOLS\REPACK\cvtres.exe
			 TOOLS\REPACK\gdi32.lib
			 TOOLS\REPACK\kernel32.lib
			 TOOLS\REPACK\launchrc.h
			 TOOLS\REPACK\libc.lib
			 TOOLS\REPACK\link.exe
			 TOOLS\REPACK\lz32.lib
			 TOOLS\REPACK\ole32.lib
			 TOOLS\REPACK\rc.exe
			 TOOLS\REPACK\rcdll.dll
			 TOOLS\REPACK\user32.lib
			 TOOLS\REPACK\winver.h
			 TOOLS\REPACK\msipdb41.dll
			 TOOLS\REPACK\diamond.exe
			 TOOLS\REPACK\vb40032.dll

97-04-24  mattwe       MsiGen: bug fixes (will include bug #'s in future,)
		       did a bunch of code cleanup in GenerateTables (some
		       very wobbly conditionals from original code,) and
		       typelib feature work.

97-04-24  mattwe       repack:  added command line support to
		       src\tools\repack\support\tempdb.exe, so it can be used from within
		       the build process.

97-04-24  bench        We now build and drop the ship versions of the tools
		       msiutil, msipat, msigen, msival and msiloc.  The
		       .dll, .map and .pdb files need to be added to the
		       release, under the tools folder.

97-04-24  mattwe       Addfiled MakeCab.exe to src\tools.  Diamond is not
		       redistributable (internal technology only because of
		       the Quantum compression.)  MakeCab is safe to release
		       with the repackager.

97-04-23  bench        We now use the default UI to handle rollback or
		       rollback cleanup after an install.  Previously, there was
		       no notification that such things were going on.

97-04-22  ivanw        To keep the naming shceme consistent I changed the
		       name of the second column in the ControlCondition
		       table from Control to Control_. Since the Darwin code
		       does not use  SQL queries on this table this change
		       should cause no breaks. If some tool accesses this table
		       through a query, the text of the query must be
		       modified.

97-04-22  ivanw        Enhanced the FormatSize funtion in the Handler. The
		       words for bytes, KB, MB, GB can be localized. These
		       strings live in the UIText table. Also added a new
		       property called LeftUnit. If this property is set in the
		       Property table, the name of the unit goes to the
		       left of the number instead of the right.

97-04-22  malcolmh     ** msi.lib needs to be released to Ship and ShipSym.
		       msid.lib needs to be released to Debug. msil.lib 
		       needs to be released to Lego **

97-04-22  mattwe       TestDb:  added progress indicator for WriteIniValues

97-04-22  mattwe       Repack:  Modified rungen.exe UI to be side by side,
		       instead of single long pane.  Old one wouldn't fit on low-res
		       monitors.

97-04-22  malcolmh     A number of changes to the API have been made:
		       
		       MsiIsProductLauncher has been replaced by
		       MsiVerifyProductLauncher. 
		       
		       The following API's have been added:
		       
		       MsiGetFeatureInfo
		       MsiInstallMissingComponent
		       MsiInstallMissingFile
		       
		       The following API's have had their return code
		       changed from BOOL to UINT:
		       
		       MsiGetProductInfoFromScript
		       MsiGetProductCode
		       MsiGetProductProperty
		       MsiCloseProduct

97-04-22  malcolmh     Conman::RegisterProduct has been updated to take a
		       cached database path, a launcher commandline, and a
		       launcher path. 

97-04-22  malcolmh     msi.h is the new API header. It replaces msinst.h.
		       msi.h uses more consistent error return types and
		       contains a revised set of ERROR_* error codes. ** msi.h
		       should be released to Ship, Debug, Logo, and ShipSym
		       **

97-04-22  malcolmh     The API help now has its own helpfile, msi.hlp. API
		       help has been removed from msiauto.hlp. ** Two new
		       files need to be dropped: doc\msi.hlp and doc\msi.cnt
		       **

-----------------------------
     Release 0.10.00.2822
-----------------------------

97-04-21  johndelo     RegMsi tool now recognizes K option for Msi kernel
		       (Msi.DLL, MsiD.DLL), but does not register the new DLL
		       by default, YET.

97-04-21  mattwe       MsiGen:  removed date writing for file version
		       column

97-04-21  bench        Added rollback for the WriteIniValues and
		       RemoveIniValues actions.

97-04-21  bench        Added a new file to the release, called MSIERROR.H,
		       in the tradition of WINERROR.H.  Created a perl
		       script, genmsier.prl, to %darwin%\tools, which creates
		       this file from msinst.h.  MSIERROR.H is copied to the
		       DOC folder on the release point.

97-04-21  t-caroln     Updated msialter.exe to display the resources in an
		       executable.  The -f option will also output file
		       resources to a file in the current directory.  Added a -r
		       option to remove all resources in the launcher and
		       then add the new resources in the property file.

97-04-21  t-caroln     Added new API GetErrorMessage to Validation object
		       to return the message that maps to the error enum
		       value.  "" is returned for an invalid enum.

97-04-21  t-caroln     Removed -d option from msidbval.exe.  Now to
		       validate a database, use msidbval {database}.  Also changed
		       msidbval to output an error message instead of the
		       integer value.

97-04-21  tracyf       The AddFixedCost method of the SelectionManager is
		       obsolete and has been removed from IMsiSelectionManager, 
		       and from the automation interface.  I don't think anyone
		       was ever using this, but I'm noting it here just in case.

97-04-21  chetanp      Added Create Table and Alter Table query support.
		       See help on MsiDatabase::OpenView function for more
		       info.

97-04-21  tracyf       The new Darwin spec covering the rules for
		       overwriting versioned and unversioned files has been
		       implemented.  You can find the "official" spec at
		       http://officeweb/specs, but the new rules are summarized under
		       the help topic for the CheckFileVersion function (part
		       of IMsiPath).  To this end, the CheckFileVersion
		       function itself has changed - it now requires an
		       additional string parameter specifying language, and the
		       icfvEnum declarations have changed.

97-04-21  tracyf       In accordance with the new Darwin versioning spec,
		       the Version column of the File table no longer accepts
		       # directives (#ALWAYS, #NEVER, etc) or dates.  This
		       column now must be either a valid version string, blank
		       (i.e. the file is unversioned), or a companion file reference.
		       The validation table in TestDB has been updated to reflect these
		       new restrictions.  

97-04-20  johndelo     The launcher now looks for the new combined Darwin
		       DLL, Msi(D).dll, and not finding that, it temporarily
		       looks for MsiEng(d).dll to maintain compatibility for
		       a while. Both DLLs should run equivalently, however
		       custom actions bind only to the new one.

97-04-18  johndelo     Moved relnotes through 1996 to relnot96.txt, to
		       shorten file, because it gets mailed and heavily
		       duplicated.

-----------------------------
     Release 0.10.00.2818
-----------------------------

97-04-17  johndelo     Error code names have changed for the external API,
		       in msinst.h, to use system errors and our new system
		       error codes. The old codes are temporarily mapped to
		       the new ones for a few builds. ERROR_SUCCESS, 0, has
		       not changed.

97-04-17  johndelo     The combined engine+services DLL, Msi.DLL (MsiD.DLL)
		       is now made as part of the normal build, along with
		       the import library Msi..lib. The separate DLLs will
		       still be released for a while, and the lauchers in
		       this release, and the Darwin installer,  still use the
		       old DLLs.

97-04-17  t-caroln     Aimdbval.exe is now msidbval.exe.  Help file has
		       been changed to show this.

97-04-17  t-caroln     Loadprop.exe has changed to msialter.exe.  I have
		       also updated the help file for this.  MsiAlter.exe
		       loads both properties and resources into the launcher. 
		       It still does not work on Win95 yet.  See help file
		       for details on property file format.

97-04-17  chetanp      Exposed _Tables and _Columns through the query
		       interface.  The catalog tables are now being created with
		       named columns and hence can be queried for their
		       content. Added help on the same.

97-04-16  johndelo     The Darwin installer name has changed from
		       AimInst.EXE to InstMsi.EXE. The external database and custom
		       access header is now MsiQuery.h. The combined
		       engine+services is Msi.DLL (not built by default yet - target
		       name: msidll). Error codes for external API are
		       changing - in msinst.h.

97-04-16  ivanw        Made some internal modifications to the controls on
		       the Browse dialog in order to minimize the number of
		       (costly) calls to SetTargetPath. To accomplish this I
		       had to add the DoNotCallManager stylebit to the
		       DirectoryCombo control type. This stylebit applied before
		       only to PathTailEdit and DirectoryList controls.

97-04-16  ivanw        Implemented the MsiCollectUserInfo API and action.
		       Removed PID validtation from the InstallValidate
		       action. Modified RegisterUserInfo so it registers the user
		       only if there is a valid PID. Added the needed
		       dialogs to testdb (starting with FirstRun).

97-04-16  chetanp      The query engine now recognises the catalog tables -
		       "_Tables and "_Columns". However all the columns for
		       these tables are unnamed as yet hence only SELECT *
		       will work for now. Columns that need to be exposed
		       externally will be named and documented soon.

-----------------------------
     Release 0.10.00.2815
-----------------------------

97-04-14  tracyf       The following new actions are now supported:
		       MoveFiles, DuplicateFiles, and RemoveDuplicateFiles.  See
		       the helpfile and TestDB.msi for more info (and note the
		       required sequencing for these actions).

97-04-14  tracyf       The Component_Parent column has been removed from
		       the definition of the Component table.  The _Validation
		       table has been updated to flag an error in the
		       aimdbval.exe tool if the Component table still has this
		       column.  In addition, a runtime "invalid table" error
		       will occur if the installer is run with this column
		       defined.

97-04-14  bench        We now rollback automatically after an error or
		       cancellation.  The rollback or cleanup of rollback files
		       is invoked by Engine.Terminate.  The user is not yet
		       given the option of not rolling back or resuming the
		       installation later.

97-04-14  bench        Defined a new reg value that sets the level of
		       rollback.  This value is "Mode" under
		       HKLM\Software\Installer\Rollback.  If this value is set to "", no backup
		       files or rollback scripts are created.  If the value
		       is a number > 0, rollback files are created and not
		       removed after the install.  In all other cases, the
		       default behaviour occurs, which is to allow for
		       rollback during an install but remove rollback files after
		       the install is successfully completed.

97-04-14  bench        Added an argument to Engine.Terminate.  This arg is
		       an iesEnum that is passed to the server for use in
		       rollback handling.  This behaviour (along with all
		       things rollback) will be documented shortly.  This
		       argument is currently not required in automation to
		       allow testing to update its tests, but will be made
		       required for the 2822 release.

97-04-14  bench        Completed rollback for product/feature/component
		       registration and advertisement (except for type
		       libraries).

97-04-11  chetanp      Added authoring (and testing) help for Advertisement
		       and Darwin Components. Please refer to help under
		       Authoring in the Darwin help file.

97-04-11  mattwe       Repack wiz:
		       Lots of tweaks to improve reliability for relocation,
		       and recovery from "invalid" OEM images.  (some files 
		       not installed locally, et cetera)
		       
		       Cleaned out MSCREATE.DIR from file table.
		       Removed sub-components entirely, in preparation for
		       Tracy's check-in.

		       Added mechanism to initialize a cache of enums->column 
		       names->real columns in cursors to fix dependencies on
		       column orders
		       
		       Begun typelib table population

97-04-11  t-caroln     Added a new target to the makefile.  Typing make win
		       debug checkdb will automatically build the
		       validation DLL, aimdbval.exe, and testdb.msi and validate it. 
		       If the database is valid, it will create a sentinel
		       file checkdb.snt.  This will be added to the
		       automatic build process once testdb.msi is valid.

97-04-11  t-caroln     Edited aimdbval and validation tools so that they
		       don't require that darwin DLLs be registered.  They now
		       instead use LoadLibrary instead of the OLE calls.
		       

-----------------------------
     Release 0.10.00.2811
-----------------------------

97-04-10  johndelo     Engine now loads services DLL directly, and server
		       loads engine DLL directly, instead of using OLE.
		       Handler still uses OLE, will be fixed in next build. Use
		       UI=B to avoid the need to register DLLs.

97-04-10  johndelo     Custom action and authoring tools API checked into
		       DARWIN\INC as AimQuery.w.  Would appreciate any review
		       comments before implementation and release. No help
		       yet.

97-04-10  malcolmh     Added MsiIsProductLauncher API. See helpfile for
		       details.

97-04-10  malcolmh     Added server/conman.Rollback method. See the
		       helpfile for more details.

97-04-10  malcolmh     Removed configuration manager methods that were
		       obsoleted by the Installer API. These include:
		       
		       UserInfo
		       Products
		       ConfigureComponent
		       Components
		       ComponentClients
		       ConfigureFeature
		       QueryFeature
		       

97-04-10  chetanp      Bumped up the database version due to change in
		       advertise strategy.

97-04-10  t-caroln     Added the aimdbval.exe tool to the release process. 
		       Also added a help topic for it under the Tools
		       section [where MsiTable and LoadProp.exe] reside.  Set up
		       the validation tool module to catch missing data in
		       the _Validation table even if the table does not
		       contain data.

97-04-09  chetanp      added seuperseded components info to be passed in to
		       unregistercomponent. This will enable to
		       imsiconfigurationmanager::unregistercomponent function to remove
		       the redirection to itself from the superseded
		       components.

97-04-09  t-caroln     Created an AIM database validation console app.  It
		       resides in the %DARWIN%\x86 directory.  This tool
		       will validate a database using the Validation DLL.  To
		       run, be sure to have the Darwin DLL's registered,
		       including the Validation DLL (msival*.DLL) and type
		       aimdbval -d {database}.  This will display the results on
		       the screen.

97-04-09  t-caroln     Added a new string category for the validation tool.
			It's the RegPath category and it's for validating
		       registry paths.  This is used in the Registry,
		       RemoveRegistry,  and RegLocator tables.

97-04-09  chetanp      changed advertisement to fit final strategy.
		       added publishcomponent table and publishcomponent
		       handling to handle cross-product component
		       advertisement.
		       added handling for "treat As"ed components

97-04-08  malcolmh     The "Launcher" property is now set in
		       CMsiEngine::CreateProductInfoRec if it wasn't already set. Also, if
		       the property wasn't set initially then the instance
		       handle given to Engine::Initialize is used to
		       determine the module path. Previously NULL was passed to
		       GetModuleFileName to determine this path.

-----------------------------
     Release 0.10.00.2808
-----------------------------

97-04-05  bench        Added automation support for the MsiExecute object.
		       See help for more info.

97-04-05  bench        Made some changes to Engine.Sequence.  Previously,
		       each call of Sequence would attempt to call
		       ExecuteFinalize (to execute an install script) if it handn't
		       been called yet and display the final dialog.  Now,
		       only the first (or outermost) call of Sequence does
		       this.  This way, if we actually call Sequence from within
		       Sequence (by placing a top-level action in the
		       sequence table, for example), we only call ExecuteFinalize
		       and display the final dialog at the end of the install, as
		       is the correct behaviour.  With this change and
		       others, there are no restrictions to the ordering of
		       actions in the sequence table as there were before,
		       execpt those inherent in the actions (such as having to call
		       InstallFiles after DirectoryInitialize).

97-04-05  bench        Made changes to the way the SCRIPTFILE property is
		       used. Previously, if this property wasn't set, we
		       would execute directly if in standalone mode and with a
		       script if in client-server mode. If this property was
		       set, we would create the script but execute it only
		       in client-server mode.  Also, if an install actually
		       used more than one script, only the second was saved. 
		       Now, our mode of execution is governed completely by
		       the EXECUTEMODE property. We use the SCRIPTFILE
		       property to write a script that is saved after the
		       install and contains all operations used in the install,
		       not just those in the last script.  See help for more
		       info.

97-04-05  bench        Added the EXECUTEMODE property, which can have
		       values NONE,DIRECT or SCRIPT.  This defines if and how we
		       execute operations to update the system.  See help
		       for more info.

97-04-04  malcolmh     Added 3 conman methods to support rollback script
		       registration: RegisterRollbackScript,
		       UnregisterRollbackScript, and RollbackScripts. See the help file for
		       complete details.

97-04-04  t-caroln     Validation tool now records errors found in the
		       _Validation table in the _Invalid table that it creates. 
		       These errors include finding a column that is not
		       listed in the table, having the value of the MaxValue
		       col less than the MinValue col, having a category
		       string that is not allowed for the particular data or is
		       not listed, and for having a KeyTable link to a table
		       that could not be loaded.  This last error could be
		       because the table is not in the database.

-----------------------------
     Release 0.10.00.2804
-----------------------------

97-04-03  t-caroln     Fixed localization tool to work with rtf syntax and
		       to correctly update dialog and control attributes.

97-04-03  t-caroln     Validation tool now validates tables and databases. 
		       Also has an updated help file.
		       Added RedirectComponent table to _Validation table.

97-04-03  chetanp      removed the extra ProductKey from several ixo
		       operations beacuse of it being passed in the ixoProductInfo
		       operation.

97-04-03  chetanp      Added RedirectComponent table to Darwin
		       

97-04-01  johndelo     The launcher may have a property "INSTALLER" which
		       specifies either a relative or absolute path to a
		       Darwin installer, i.e. AimInst.exe. This will be called
		       if the launcher can't find the Darwin API DLL or if
		       Darwin indicates that a newer version is needed. You
		       can call the Darwin installer, AimInst(D).exe,
		       directly, which will simply blast its files into your system
		       directory.

97-04-01  johndelo     The Darwin installation code is now contained in
		       IExpress packages, names AimInst.exe, AimInstD.exe, and
		       AimInstL.exe.  These are self-extracting executables
		       that install Darwin components into the system
		       directory. Currently they install automation and help;
		       these will later be moved to a separate tool installer.
		       To build these installers, specify aiminst as the
		       target, i.e. "make win debug aiminst". The ALPHA IExpress
		       files are checked in, but untested. The prompt
		       dialogs will be probably be removed in the future. Files
		       that are replaced are unregistered first.

-----------------------------
     Release 0.10.00.2801
-----------------------------

97-03-31  t-caroln     Fixed validation tool to correctly validate the
		       fields.  It should now validate all fields and foreign
		       keys correctly.

97-03-31  t-caroln     Fixed the localization tool to work with the new
		       Control and Dialog attributes format.
		       The tool now updates the control and dialog tables,
		       including tab order. However, it 
		       incorrectly updates the radiobutton table and tab
		       order.  Am working on a fix for that.

97-03-31  ivanw        Implemented default text style for the text control.
		       {&style} at the start of the text string sets a
		       default style for the control. For more help see the page
		       on text controls. Modified testdb such that the text
		       controls on the Error and Selection dialogs use this
		       feature.

97-03-31  johndelo     The DATABASE property cannot be set on the launcher
		       command line, as all the APIs assume that it is a
		       launcher property. This will be fixed when we store the
		       command line as part of the product state.

97-03-31  johndelo     The launcher, INSTALL(D).EXE, no longer depends on
		       Darwin headers; rather, it calls through an added API:
		       MsiInstallProduct. A Unicode launcher can be built
		       by specifying the target "instalw" to make.

97-03-28  ivanw        Removed the Help column from the Dialog table. Also
		       removed the Help attribute of the Dialog object. As a
		       result the new build will work with both new and old
		       databases but old builds of the Handler.dll won't
		       work with the new database.

-----------------------------
     Release 0.10.00.2728
-----------------------------

97-03-27  bench        Rollback of the InstallFiles and RemoveFiles actions
		       is implemented. Note that the Configuration Manager
		       rollback is not yet implemented, so after a rollback,
		       the state of the Config Manager may not correspond
		       to the files on the system.

97-03-27  t-caroln     The validation tool is now a part of the release
		       process.  This tool is for validation 
		       of a database.  It can validate a field, row, table,
		       or database.  This tool is similar
		       to the localization tool in that it has its own help
		       file.  The tool also requires that
		       the database contain the _Validation table.  The tool
		       compiles, but has not 
		       been tested very well.  An error table -- _Invalid
		       table is created during validation 
		       of a table or database.  In validation of a field or
		       row, the errors are stored in an 
		       array that can be accessed with one of the tool's
		       member functions.  The tool 
		       should help eliminate authoring errors.

97-03-27  johndelo     Product properties that must be authored into the
		       Propery table have been defined in engine.h and
		       documented in Property help. Note that many of them are now
		       REQUIRED. Unused definitions and code has been
		       removed to avoid confusion.

97-03-27  chetanp      Changed ADVT and UNADVT actions to ADVERTISE and
		       UNADVERTISE actions resp
		       Added DefInprocHandler column to Class table.
		       Sequenced ADVERTISE and UNADVERTISE action through
		       InstallSequence table

97-03-25  mattwe       MsiGen: fixed the Class contexts per Chetan's Friday
		       design.  
		       (Context column a primary key.)  Haven't switched to
		       his current
		       design that the Context column is now a string.  (He
		       hasn't checked
		       it in yet.)  
		       
Populated part of Verb, and most of Extensions. 
		       Shortcuts in progress.
		       Wouldn't normally check-in, but this is to release
		       partial work to
		       testing.

97-03-25  tracyf       The IMsiVolume FreeSpaceK and TotalSpaceK functions
		       have been changed to FreeSpace and TotalSpace,
		       respectively.  These functions now return 512 byte
		       multiples, instead of 1024 byte multiples as before.

97-03-25  ivanw        Added a new dialog style bit: TrackDiskSpace. If
		       this bit is set, the dialog periodically calls the
		       SelectionManager to check if we are out of disk space.
		       This way we can catch if the user switched to an other
		       application and changed the available disk space while
		       Darwin is running.

97-03-25  chetanp      implemented "permanant" components. If a component
		       is installed locally, and its key file has the
		       "permanant" bit on in the Attributes column of the File
		       table, then we make the system a client of the component,
		       thereby preventing its uninstall.

97-03-25  t-caroln     Added a new column to the _Validation table.  It is
		       the KeyColumn column and is used
		       in conjunction with the KeyTable column.  The
		       KeyColumn column tells which column the
		       data is a foreign key to in the KeyTable column.

-----------------------------
     Release 0.10.00.2725
-----------------------------

97-03-24  johndelo     Help and automation is now available for
		       Storage::Class property. The CLSID associated with the storage
		       is used to identify the contents of a storage object.

97-03-21  tracyf       Two new actions are now supported: MoveFiles and
		       UnmoveFiles, complete with lots o' documentation in the
		       help file.  I also checked in changes in TestDB to
		       make use of these new actions, but you won't see much
		       difference unless you place a few appropriate files to
		       be moved into particular source directories on your
		       local machine.  I leave it as an exercise for the
		       reader to figure out what files to put where, in case
		       you want to see file movement in action.

97-03-21  ivanw        Checked in the new control and dialog style bits.
		       Modified testdb to reflect the new changes. Also added
		       the new values to the help pages of the individual
		       control styles.

-----------------------------
     Release 0.10.00.2721
-----------------------------

97-03-20  chetanp      Added support for sharing Darwin components.

97-03-20  ivanw        Checked in a VB script under
		       darwin\tools\stylecon.xls that can convert the control and dialog stylebits
		       of an existing database to the new values. The new
		       stylebits will take effect with the 3/25 build.

97-03-19  davidmck     Checked in build 600 of the diamond decompression
		       libraries. These support LZX decompression.

97-03-19  ivanw        Per Paul's request the automation wrapper for
		       Dialog.WindowShow has been renamed to Dialog.Visible. It is
		       a write only property.

97-03-19  malcolmh     Removed GenerateProductKey from conman API and fixed
		       all references to it. The product code is now
		       authored in the property table.
		       
		       Updated transform validation to use new product
		       code.

97-03-19  mattwe       MsiGen:  populated MIME table from registry keys
		       MsiGen:  populated most of Class table from registry keys
			    waiting on ChetanP to finalize design

97-03-18  johndelo     The Darwin-private properties have been removed from
		       the SummaryInformation stream (by request of
		       Office). Most of these were not being used anymore, as the
		       user info is now accessed via the MSI API functions.

97-03-18  johndelo     Some Darwin GUIDs have been changed to remove
		       collisions, mostly automation GUIDS. To avoid orphaned reg
		       entires, you need to unregister all current Darwin
		       components before building or installing the new ones.

97-03-18  ivanw        Removed the ValidateUserInfo action. Part of it
		       became obsolete because of the ValidateProductID method,
		       the rest has been moved into the RegisterUserInfo
		       action.

97-03-18  bench        The behavior of MsiPath.Remove has changed slightly.
			Now, if the directory is empty but still cannot be
		       deleted for any reason, an error is generated. 
		       Previously, no error was generated for read-only
		       directories or sharing violations.

-----------------------------
     Release 0.10.00.2718
-----------------------------

97-03-17  ivanw        Implemented the MaskedEdit control type. Created a
		       ValidatePID controlevent. Added a ValidatePID method
		       to the Engine. Added a dialog to testdb to demonstrate
		       all the above.

-----------------------------
     Release 0.10.00.2714
-----------------------------

97-03-13  t-caroln     Checked in the _Validation table to the
		       darwin\data\testdb.  This is a new table that will not be
		       shipped.
		       It is for authoring purposes and will be used by the
		       Validation API.  Help on this table has been added to
		       
		       the database tables help topic.  Look under database
		       tables and then Validation to get to the help file
		       page.  This table will have to be updated as not all
		       data is correct, but it is a workable schema for now.

97-03-13  johndelo     New APIs have been added to the end of MSINST.H.
		       These will support functionality required by
		       applications and system, but are not implemented as yet.

97-03-13  johndelo     Access97 can now be used to edit Darwin databases,
		       and can handle large text fields. MsiTable can now create
		       new Access databases as well as Msi databases, using the
		       -c option. MsiTable /? for its help screen.
		       
		       There are two mechanism for dealing with large text fields:
		       1. Text fields can be specified with widths from 1 to
		       255 (S1 to S255 in the .idt header). Any text field
		       written to an Access table that overflows this limit
		       will be written to the _Overflow table, indexed by a
		       numeric key. In its place will be place the index
		       number preceeded by two plus signs. On access of the
		       text data, the indirection will be performed and the
		       long data will be returned. This will catch any text
		       data that overflows the column specifications. The
		       overflow table entries will not be removed if the related
		       data value is deleted or changed, but of course will
		       go away when importing to a created database.
		       2. The above should not normally happen. Text widths
		       should be carefully chosen to limit the text where
		       that is appropriate. For columns that are >255,
		       essentially unbounded, use S0 for the column specifications,
		       and a Memo field will be created which appears
		       within Access just like a normal text field. There is very
		       little overhead in doing this, the only
		       disadvantages being the inablility to sort by or search in these
		       fields. I have changed the Control.Text column to be
		       S0, and Import, Export, and Install all work fine
		       from and .MDB database.
		       
		       The ODBC support now only works with the current Office97 or
		       Access97 Jet drivers. It no longer works with Access95.
		       
		       Access fails to return the nullable state of a
		       column and no workaround can be found. For now, when
		       exporting from Access, primary key columns are set
		       non-nullable, and all other are set to what Access reports
		       (which is always nullable). The new _Validation table
		       contains the correct nullable state.
		       
97-03-13  malcolmh     MsiEnumComponents, MsiEnumFeatures, and
		       MsiEnumClients are implemented. See the help file for details.

97-03-13  tracyf       Feature management in the SelectionManager has been
		       fixed up, in concert with the changes made by Ivan in
		       the UI.  The major change is that when a feature,
		       whose parent is turned off, is turned on, the
		       SelectionManager now turns on all parents up the tree. 
		       Special care is taken to ensure that only the selected
		       child feature is activated when the parent(s) are turned
		       on. 

97-03-13  malcolmh     Added basic Installer Services API tests to
		       %DARWIN%\test\apitest. Use MAKE ANSI or MAKE UNICODE in that
		       directory to build either APITESTA or APITESTW. Use
		       /? on either of these EXEs for help. Note that by
		       default C:\darwin\build\x86\msiengd.dll is tested. This
		       can be overridden in the makefile or on the
		       command-line to APITEST?.

97-03-13  mattwe       MsiGen: major check-in.  The database is now
		       relocatible, (properties are substituted for 
		       hard coded paths, this also involved making 
		       all primary keys for directory entries 
		       lower-case)  and I've started playing catch
		       up to all the new advertisement tables (MIME,
		       Extension, et cetera) and the new columns in 
		       the old.    
		       
		       Also fixed bugs in AlanR's code, including an
		       extraneous cursor->Next() in MakeDirPathTab, 
		       also gave this temporary table an optional 
		       persistent flag for debugging purposes.
		       
		       Updated the hungarian in several places, making 
		       the variable naming more consistent, and added 
		       comments to several functions.
		       
		       Per our spec, MsiGen now only really works for
		       sysdiff conversion on a machine that nearly 
		       matches the "reference" machine on which
		       the $OEM$ image was created.  See me if you 
		       want to learn about Win32 remote debugging.

97-03-11  ivanw        Changed several aspects of the behaviour of the
		       SelectionTree control. When a parent is deselected, the
		       children are not hidden. Changed the icons. When a
		       child of an unselected parent is turned on, the parents
		       are repainted. We know distinguish between CD and
		       network installs. To do this I had to change the set of
		       strings in the UIText table used by the control.

97-03-11  ivanw        Added a new controlevent: SelectionPathOn. Using
		       this we can hide the text on the selection dialog, when
		       there is no user configurable path. See testdb for an
		       example of the use of this event.

97-03-11  bench        Updated the ixoFileCopy, ixoFileRemove,
		       ixoShortcutCreate, ixoShortcutRemove and ixoIniWriteRemoveValue
		       operations to register created folders when writing to
		       a folder.  Also, these operations now attempt to
		       remove any registered folders when removing files.  We
		       should no longer be leaving any folders around that we
		       created after we uninstall.  See help for more info.

97-03-11  bench        Added the CreateFolders and RemoveFolders actions
		       and the CreateFolder table.  See the help for more
		       info.

97-03-11  bench        MsiPath.EnsureExists now returns the number of
		       folders it actually created.  See help for more info.

97-03-11  bench        The MsiFileCopy.CopyTo and MsiServices.WriteIniFile
		       methods now fail if the target directory they are
		       writing to does not exist.

-----------------------------
     Release 0.10.00.2711
-----------------------------

97-03-10  malcolmh     Changed Conman::RegisterFolder interface. Added
		       Conman::IsFolderRemovable. See help file for details.

-----------------------------
     Release 0.10.00.2710
-----------------------------


97-03-07  bench        Added the ValueExists method to the MsiRegKey
		       object.  See help for more info.

-----------------------------
     Release 0.10.00.2707
-----------------------------

97-03-06  chetanp      added data to the advertise tables. TO DO - add a
		       real OLE server for test purposes

97-03-06  chetanp      Added unadvertise stuff. Currently punted to
		       unadvertise after a remove all.

97-03-06  ivanw        Checked in the new version of the profiler (IceCAP
		       3.5). Added some files needed and  modified the
		       makefile to build the profiler build correctly. Also
		       checked in the documentation for the new IceCAP under
		       darwin\doc\icecap.

97-03-06  tracyf       Reinstall checksum verification has been
		       implemented, which involves a new IMsiPath function
		       (GetFileChecksum, which is broken up into two automation
		       interfaces - ComputeFileChecksum, and
		       GetFileOriginalChecksum).  Also, files in the File Table have a new
		       'ValidChecksum' attribute bit.  See the relevant new help
		       topics for more info. 

97-03-05  bench        Added the Seek method to the MsiStream object.  See
		       help for more info.

97-03-04  tracyf       A new "coding conventions and code review
		       guidelines" topic has been checked into the helpfile.  You'll
		       find it under the "Development Topics" section in the
		       contents.  

97-03-04  bench        Added the ixoProductInfo operation, which should
		       always be the second operation in a script file. 
		       Removed the ProductKey argument of ixoProductRegister and
		       all arguments of ixoAdvertiseProduct.

97-03-04  chetanp      ProcessComponents is now a mandatory action required
		       for the 
		       registration of components with the configuration
		       manager. Help
		       needs to be put in.

-----------------------------
     Release 0.10.00.2704
-----------------------------

97-03-04  chetanp      Bumped up engine version because of new tables and
		       Component table change.
		       Need to fix databases and bump up their versions to
		       .15

97-03-04  chetanp      Changed tables Component, Typelib - see help file
		       Added tables Class, Icon, Extension, Verb, MIME, AdvtSequence for
		       advertisement

97-02-28  johndelo     Slight changes to script format to accomodate larger
		       number of arguments. The encoding of integers and
		       strings are unchanged. See help file for details.

97-02-28  ivanw        Added a new, optional table: the CheckBox table. This
		       table defines the value the property is set to if the
		       checkbox is turned on. Added a ReinstallMode dialog to
		       the maintanence mode wizard sequence to demonstrate
		       the use of these new features.

97-02-28  ivanw        From now on the argument of a control event in the ControlEvent
		       table can be any expression that can be evaluated by
		       Engine::FormatText. To facilitate this change a
		       number of methods in the Event class were changed, they take
		       IMsiString& as an argument instead of an MsiStringId.
		       Also the ArgumentInt and ArgumentString dialog
		       attributes are replaced by the Argument attribute, that
		       returns the string representation of the argument  for
		       the action that terminates the dialog.

97-02-28  bench        A rollback script is created each time a script is
		       run, which occurs during an install in client-server
		       mode.  The rollback scripts are put in the MSI
		       directory and are named RBS*.tmp.  The rollback scripts may
		       be run with msiexecd /i.  Currently, the
		       WriteRegistryValues and RemoveRegistryValues actions can be
		       rolled back (with the exception of deleting entire reg
		       keys).

97-02-28  bench        Removed the ixoRegOpenRootKey operation.  Now, the
		       parameters to ixoRegOpenKey specify both the root and
		       the key to open.  Removed the arguments to
		       ixoRegCreateKey and ixoRegRemoveKey.  These ops act on the key
		       set by ixoRegOpenKey.

97-02-28  chetanp      The maintenance mode database is now not created. We
		       now store the 
		       product installation info in the registry.
		       
Also the first cut of the advertisement info that
		       Darwin provides is in.
		       

-----------------------------
     Release 0.10.00.2628
-----------------------------

97-02-26  malcolmh     The MsiQueryFeatureState is now implemented. It's
		       part of the Installer Service API.

-----------------------------
     Release 0.10.00.2626
-----------------------------

97-02-25  ivanw        The Scrollable Text control has been completed, so
		       it reads the text to be displayed from the text field
		       of the Control table, instead of using a hard coded
		       license agreement text. The text must be in RTF.

-----------------------------
     Release 0.10.00.2625
-----------------------------

97-02-21  malcolmh     MsiQueryProductInfo and MsiGetUserInfo are now
		       implemented. These are both part of the Installer Service
		       API. To use this, or any other of the API functions,
		       #include <msinst.h> and link to msinst.lib.
		       Msieng(d).dll contains the implementation of the API.

-----------------------------
     Release 0.10.00.2621
-----------------------------


97-02-19  tracyf       The InstallFiles action (and ixoFileCopy execution
		       action) has been modified so that verification of file
		       versions is performed again at actual script
		       execution time (it's still also done up front for costing
		       purposes).  This involves a lot of internal changes in
		       the InstallFiles action, especially in conjunction
		       with CompanionFile functionality (a new
		       ixoSetCompanionParent execution action has been created), so this is
		       a heads-up to testing.

97-02-19  tracyf       Feature Reinstall is now implemented.  This involves
		       two new properties, "REINSTALL"  and
		       "REINSTALLMODE", as well as new SelectionManager methods:
		       ConfigureFeature, SetReinstallMode, and
		       ProcessPropertyFeatureRequests.   These new properties and methods are
		       documented in the help file, and I've also added a new
		       authoring topic: "Reinstalling and Removing Features",
		       which you'll find under the main "Authoring" topic in
		       the Contents.  The only caveat: all of the reinstall
		       modes listed in the "REINSTALLMODE" property topic
		       are implemented, except for "c" (checksum
		       verification).  I'll get that one done soon.

97-02-19  tracyf       For consistency, the USESOURCE and ADD property
		       names have been changed to ADDSOURCE and ADDLOCAL,
		       respectively.

97-02-18  ivanw        Added ReinstallMode control event, that calls the
		       SetReinstallMode method of the SelectionManager.

-----------------------------
     Release 0.10.00.2614
-----------------------------

97-02-12  t-caroln     Fixed GenerateTransform and SetTransform to comply
		       with the current database implementation.  If the
		       naming
		       of binary stream should ever change again, it must
		       also
		       change in the CompareRows function of the database
		       where the transform computes the stream name.  

97-02-11  t-caroln     GenerateTransform now handles the possibility of
		       null streams.  Stream data
		       is written out differently to the transform file as
		       well.  A zero is recorded if
		       the stream is NULL while a one is recorded if the
		       stream is not null.  The actual
		       stream exists elsewhere in the transform stream
		       storage.  

-----------------------------
     Release 0.10.00.2611
-----------------------------

97-02-10  chetanp      added type library registration functionality look
		       for the help on the 
		       RegisterTypeLibraries and UnregisterTypeLibraries
		       actions and
		       the TypeLib table.

97-02-10  davidmck     Moved the debug log file from the root of the c
		       drive into the \windows\msi directory and had its name
		       created using GetTempFilename() so that multiple
		       instances can create their own files.
		       

97-02-07  ivanw        The Value and Text fields of the RadioButton,
		       Listbox, Combobox and ListView tables may now contain any
		       expression that FormatText can handle. For example, on
		       selecting a radiobutton we can set a property to an
		       expression that depends on the current value of some
		       other property. The same change was made to the
		       argument of the [Property]  control event in the
		       ControlEvent table. Added a couple of dialogs to testdb to
		       demonstrate this new feature.

-----------------------------
     Release 0.10.00.2607
-----------------------------

97-02-06  ivanw        Added four new control events: AddLocal, AddSource,
		       Remove and Reinstall. Also added a reinstall option
		       and a new dialog to testdb.

97-02-06  bench        The following folder properties are no longer being set by
		       MsiServices.SetPlatformProperties:

			   CommonDesktopFolder
			   CommonProgramMenuFolder
			   CommonStartMenuFolder
			   CommonStartupFolder

		       Instead, the DesktopFolder, ProgramMenuFolder, StartMenuFolder
		       and StartupFolder properties are set to folders in the "All Users"
		       profile if such a profile exists and the ALLUSERS property is set.
		       Otherwise, these properties are set to folders in the user's
		       personal profile.

		       MsiServices.SetPlatformProperties accepts a boolean argument: True
		       to set the above properties to the "All Users" folders, false to do
		       otherwise.

97-02-04  t-caroln     The MergeDatabase method has been implemented.  It
		       is a method of the
		       database object.  The help file has also been updated
		       with this 
		       information, including required arguments.

-----------------------------
     Release 0.10.00.2604
-----------------------------

97-02-03  t-caroln     Changed naming of streams.  Stream names now follow format
		       table.key1.key2 etc.  Any old database tables must be
		       rebuilt to account for the name changes. 

97-02-03  chetanp      Added support for SELECT * queries.

97-02-03  chetanp      Any Delete* actions in the installs.idt table should
		       now be renamed to 
		       Remove*. Contrary to previous comment, we are NOT
		       bumping the 
		       engine version since this is a database content
		       change and NOT a 
		       structure change.

97-02-03  ivanw        Removed the Install control event. The selection
		       manager sets a property called OutOfDiskSpace if some
		       volume is out of disk space. The UI can branch
		       depending on this property. See testdb for an example how to
		       use this new mechanism.

97-02-03  tracyf       The SelectionManager now maintains an
		       "OutOfDiskSpace" property, which has a value of TRUE if at any time
		       any volume has insufficient disk space for the
		       features currently selected.  Authors can now use this
		       property to decide whether to allow transitions between
		       dialogs if a disk space problem exists.  The TestDB
		       will be modified to demonstate this usage.

97-02-03  chetanp      changed all Delete* action names to Remove* for
		       consistency. However
		       we decided to let the complementary actions have any
		       one of the forms -
		       Install*, Add* or Create* 
		       to indicate the exact nature of interaction with the
		       user m/c.
		       NOTE: This change makes services and engine incompaible
		       with previous databases. But another change has already
		       caused this to happen for the next build. So am not
		       bumping up the ref count.

97-01-31  tracyf       A 'Vital' attribute bit has been added for files in
		       the File Table.  This bit allows the author to
		       specify whether an error preventing the file from being
		       installed can be ignored or not.  See the File Table
		       help topic for more info.

97-01-31  bench        Exposed the ExecuteRecord method of the Engine. 
		       This can be used to execute the server operations. 
		       Also, the opcodes have been exposed in the typelib.  The
		       operations are documented in the help under
		       "Operation as an Install Server."  Unless otherwise noted, all
		       operations should be fully testable.

-----------------------------
     Release 0.10.00.2530
-----------------------------

97-01-29  tracyf       The concept of allowing a child Feature to follow
		       the RunFromSource status of its parent has been
		       restored (this capability was unintentionally lost when the
		       transition from Selections to Features/Components was
		       implemented.  See the Feature Database Table topic
		       in the helpfile for more info.

97-01-29  johndelo     Sequence table alert: The desciption column for the
		       sequence tables has been removed, replaced by the
		       ActionText table, which includes Description and
		       Template columns.
		       For several releases the old format will be supported
		       until the doc and existing databases have been
		       updated.

-----------------------------
     Release 0.10.00.2529
-----------------------------

97-01-28  bench        MsiPatch:  GenerateAcmePatchInformation method
		       added. See help for more info.

97-01-28  ivanw        Modified the selection tree control, to use the
		       GetFeatureValidState. Only the valid choices show up in
		       the popup menues.

-----------------------------
     Release 0.10.00.2528
-----------------------------

97-01-27  ivanw        Added a new dialog attribute and style bit:
		       KeepModeless. If this is set, the existing modeless dialogs
		       are not destroyed when the new dialog is created. A
		       typical use of this bit would be for the FilesInUse
		       dialog.

97-01-27  johndelo     The value of the ACTION property is now
		       case-insensitive. This is the top-level action performed by the
		       engine when the launcher calls DoAction(0). Only
		       actions with upper-cased names can specified by the
		       launcher. Currently this means INSTALL, ADMIN, and PATCH,
		       but more will be added.

97-01-27  tracyf       Added a new "GetFeatureValidStates" API to the
		       Selection Manager.  See the helpfile for more info.

97-01-27  ivanw        Changed the TextStyle table, such that the color is
		       described with an integer (RGB) instead of a word.
		       Also added some code to check if the authored text
		       color is too close to the dialog background. If it is,
		       the default text color is used.

97-01-24  johndelo     ---Changes to Darwin Launcher---
		       Most of the guts have been removed from the launcher to make it less dependent.
		       When installing a new product on demand the launcher is not executed,
		       therefore the engine must get the properties out of the resource.
		       The following changes have been made:
		       1. The launcher startup window is gone, and nearly all of the error handling is gone.
		       2. The engine puts its default modeless dialog up at the start (UI needs some cleanup).
		       3. The temp property file passed to the engine is gone; the command line is passed instead.
		       4. The engine now pulls properties from the command line and launcher resources.
		       5. The engine processes error messages during initialization, using strings in the launcher.
		       6. The launcher error message strings now have MsiRecord markers, i.e. [2].
		       7. The launcher has a required property, MESSAGEBASE, supplying the offset into the string table.
		       8. The property INSTALLERFILES is used by the launcher as the list of files to install.
		       9. The launcher will selfreg installed DLLs, and pass -RegServer to EXEs.
		       10. MsiEngine.Initialize now takes a command line instead of a property file.
		       11. The MAC code is no longer in the launcher. It is archived in LDWINMAC.CPP.
		       12. A single string is now invoked for command-line help: /? or -?, not a set of resources.
		       13. The debug command option "??" no longer functions. Another mechanism will be implemented.

		       The next step will be to remove the Darwin installation code from the launcher and  
		       put it with the components in a separate package that can be downloaded from the internet
		       or be placed on the CD. The INSTALLER property will specify the path to this package.
		       Until this happens, the ability to force install of Darwin using '@' is not available.

-----------------------------
     Release 0.10.00.2524
-----------------------------

97-01-23  chetanp      Added BindImage stuff to automation.
		       BindImage passed preliminary testing as regards a
		       simple file with links
		       only into user32.dll. Bind worked fine on both Win 95
		       and Win NT. The
		       bound file worked well in both cases on both
		       platforms.


97-01-23  alanr        MsiGen: Added Feature and FeatureLevel properties.

97-01-23  bench        MsiPatch: Patch creation has changed dramatically. 
		       See the help file for more info.  Also, the help file
		       should be completely up to date.  If it's in the
		       help file, it should work.  There is not yet patch
		       application support for these patches.

97-01-22  chetanp      added BindImage table.

97-01-22  chetanp      Added BindImage function to services.
		       Fixed conflicts with imagehlp files

97-01-21  malcolmh     The behavior of the /regserver and /regservice flags
		       for msiexec(d) have changed.
		       
1) /regservice is no longer a valid option
		       2) /regserver now does what /regservice used to do,
		       i.e. attempt registration as a service but fall back
		       to a server if that fails
		       3) /regnoservice registers the install server as a
		       server regardless of whether registration as a service
		       is possible
		       
This change makes our launcher consistent in that
		       it can DllRegisterServer all DLLs and /regserver all
		       EXEs without specific knowledge of the particular DLL
		       or EXE.
		       

-----------------------------
     Release 0.10.00.2521
-----------------------------

97-01-20  chetanp      Added registry support for REG_EXPAND_SZ
		       Added support for creation and deletion of registry
		       keys.
		       Added ixoRegCreateKey, ixoRegDeleteKey opcodes in
		       executor


97-01-20  alanr        MsiGen: Replaced ROOTDRIVE references with TARGETDIR.

97-01-17  malcolmh     Added messages to the actions that occur while the
		       PreAction dialog is displayed. Remember that all
		       actions that don't call ExecuteRecord must send either
		       ActionData or Progress messages to the UI to keep it
		       awake.

-----------------------------
     Release 0.10.00.2517
-----------------------------

97-01-16  chetanp      added Proxy table help.

97-01-16  alanr        Added Cursor.DateData automation read/write support
		       for long integer value columns (previously only
		       supported string values).

97-01-16  mattwe       MsiUtil:  Fixed typo in ODL  
		       MsiUtil.BuildCompletProject ->
		       MsiUtil.BuildCompleteProject
		       Darwin Bug #734

97-01-16  davidmck     Added code in engine to allow for reference
		       tracking. Involved moving function name code into module.h so
		       all could share.

97-01-15  ivanw        Added the ability to change fonts, style, font size
		       and font color in text controls. To see this in
		       action run testdb with UITEST=1. For information how to
		       use it, see the help pages for the TextStyle table and
		       the Text control type.

-----------------------------
     Release 0.10.00.2513
-----------------------------

97-01-09  johndelo     MsiDatabase.Export will now export summary
		       information stream to an .idt file as if it were a table.
		       Import has always accepted this table which contains
		       pairs of integer PID with string|integer|datetime
		       data.
		       MsiTable.EXE has also been updated to show the table
		       in the list box and to copy it with the '*' wildcard.

-----------------------------
     Release 0.10.00.2509
-----------------------------

97-01-08  ivanw        When a control is activated it can set a property to
		       the present value of an other property (with
		       arbitrary number of indirections). Untill now controls could
		       set a property only to a constant value. If anybody
		       needs more complex cases (like setting a property to
		       some expression) let me know.

97-01-08  ivanw        Added an admin install wizard sequence to testdb and
		       the template database.

-----------------------------
     Release 0.10.00.2508
-----------------------------

97-01-07  alanr        Added new Cursor.DateData automation routine for reading
		       date fields from tables.

97-01-07  bench        Changed AdminInstallFinalize action to only copy the
		       necessary Msi files (not Msi*.*).  The copied files
		       are the same that would be installed with "install
		       ACTION=@".  The ship launcher will copy the ship
		       components and the debug launcher will copy the debug
		       components.  Currently no error occurs when a file is
		       missing.

97-01-07  bench        Added the AdminInstallFinalize action, which copies the
		       launcher, database and Msi* components to the location
		       defined by TARGETDIR.

		       Launcher: always copied directly to TARGETDIR
		       Database: if the DATABASE property is not defined in the
				 launcher, an error will occur. Use loadprop.exe
				 to add this property to the launcher.
				 If DATABASE is defined and is a full path,
				 the database is not copied to the admin point.
				 If DATABASE is defined and is a relative path,
				 the database is copied to the relative path below
				 TARGETDIR. Note, setting DATABASE on the command
				 line to the launcher has no effect on this logic,
				 as that only sets the property in the database and
				 not in the launcher's resource.
		       Msi* components: If the INSTALLER property is defined in
				 the launcher and is a full path, no components are
				 copied. If the INSTALLER property is not defined, the
				 components are assumed to be located in the same
				 directory as the launcher. If the INSTALLER property is
				 defined and is a relative path, the components are
				 assumed to be in that directory beneath the launcher
				 and are copied to that directory beneath the admin point.
				 Currently, all MSI* files are copied from the appropriate
				 directory.

		       I have also added this action and ExecuteFinalize to the
		       AdminSequence table of the testdb.

-----------------------------
     Release 0.10.00.2507
-----------------------------

97-01-06  chetanp      Changed Shortcut and ProgMan tables and related
		       actions to allow for shortcuts/progman items to files AND
		       folders not installed by the current product. See
		       help on the tables and MsiEngine::FormatText function
		       for more help.

97-01-06  chetanp      enhanced FormatText functionality to allow for File
		       table and Component table keys. See
		       MsiEngine::FormatText help for more info. 

97-01-06  tracyf       InstallFiles action now performs a separate query
		       for Admin mode, thus copying all files in this mode.

97-01-06  bench        The DirectoryManager has been updated in the
		       following ways. When in Admin mode, SetTargetPaths only uses
		       property values for the roots and not for non-root
		       directories.  Also, SetTargetPaths does not set
		       properties when in Admin mode.  When not in Admin mode, the
		       value of the ROOTDRIVE property is used to resolve
		       any undefined roots. In Admin mode an error still
		       occurs if a root is undefined.

97-01-06  bench        The Directory table in the testdb has been updated to reflect the
		       change in philosophy regarding the root directory
		       names.  In short this philosophy is to not use ROOTDRIVE
		       as a directory name and to use TARGETDIR as a
		       directory name.

-----------------------------
     Release 0.10.00.2503
-----------------------------

97-01-02  chetanp      Added support to FormatText (that expands property
		       strings) to handle 
		       1. #File where File stands for a key in the File
		       table. The property is expanded to a full file path.
		       2. $Component where Component stands for a key in the
		       Component table. The property is expanded to a
		       Directory of the Component (taking into consideration
		       whether the Component is selected to be installed to run
		       from source or local).

97-01-02  chetanp      Added Feature support to the Configuration Manager

97-01-02  chetanp      Added registry compatibility to the configuration
		       manager

97-01-02  chetanp      Added functionality to Darwin to manage Features
		       from Properties

97-01-02  chetanp      Added functionality to msiexec so as to be able to
		       configure features/ uninstall product from command
		       line. Type msiexec /? for more.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\doc\relnot00.txt ===
Darwin Setup Development Notes for Testing Releases


00-12-29  eugend       Bug 261198: On Win64, Darwin now removes keys in the 32-bit hive.

00-12-18  eugend       Bug 152754: When installing 32-bit packages on Win64 we fix up hardcoded directory names
                       that would land files belonging to 32-bit components into 64-bit binary directories.

00-12-18  eugend       Bug 214525: On Win64, Intel property is set to the same ProcessorLevel value that
                       GetSystemInfo API returns when called from a 32-bit process (currently 5,
                       i.e. Pentium processor).

00-12-18  chetanp      bug 146464: support rollback of assemblies across reboots.

00-12-18  mattwe       Bug 261050: Migrate10CachedPackage API is now stubbed in to allow Office 10 setup
                       on Whistler.

00-12-18  cnapier      Bug 259080: fix assert in DebugDumpIxo

00-12-17  chetanp      bug 217058: Added new DisableUserInstalls machine policy that will cause the following -
                       1> All our APIs currently search for product "visibility" in the order - 
                       per user managed, then per user non-managed, then per machine - Setting this policy will 
                       cause the APIs to ignore the per user managed and per user non-managed registration and 
                       only use the per machine information.
                       2> During an install, at the time of script execution, if the installation is being attempted 
                       as per user, then we will pop up an error message and abort the installation. This will be at 
                       the same place as where we currently we check that the current user is an admin if the install 
                       being attempted os for all users (So this will allow ample opportunity for a CA or such to muck 
                       with the ALLUSERS property).
                       We will recommend that on TerminalServer in AppServer mode this policy be set.

00-12-16  bench        Bug 253820: fix a compat problem with existing but poorly authored packages.
                       We now tolerate invalid DefaultDir values in root rows of the Directory table.
                       These errors were tolerated in 1.1, and many packages have these errors, so we continue
                       to tolerate these errors for packages that don't require 1.5 Windows Installer.

00-12-16  bench        Bugs 258778, 259265: fixed a couple of BVT/Setup/Boot breaks caused by the
                       multiple user api changes.

00-12-16  mattwe       Bug 146230: ODBC configuration for non-elevated installs now occurs in the
                       impersonated custom action server, similarly to 32 bit configuration on 64 
                       bit machines.

00-12-16  mattwe       Bug 188786: Our Inprocserver32 entries are now marked explicitly with the 
                       apartment threading model.
                       
00-12-16  chetanp      bug 198377: COM+ Fusion: WI prematurely uninstalls assembly shared across products if 
                       componentid is not same. We now enumerate through all the published descriptors for 
                       the assembly to check if any point to a installed component (no matter what the component id)
                       before unpinning the assembly

00-12-16  cgouge       Bug 239108: Impersonated custom action servers now grant interactive users COM
                       execute rights.

00-12-16  cgouge       Bug 227396: Install-mode check now works on Windows 2000.

00-12-15  cgouge       Bug 212570: Orca installer now registeres new MergeMod CLSIDs.

00-12-15  cnapier      Bug 169494: Adjust shortcut paths to user profile shell folders when ALLUSERS is
                       changed in the UI sequence.

00-12-15  cgouge       Bug 212570: Orca installer now registeres new MergeMod CLSIDs.

00-12-14  cnapier      Checked in build 223 of msi.chm and msi.chi

00-12-14  mattwe       Bug 146292: Internet downloads of cabinets are now also cleared from the
                       cache when no longer needed

00-12-14  mattwe       Bug 215380: We now put copies of InstMsi (unicode and ansi) in %_NTPOSTBLD%.  
                       They're named InstMsiA.exe and InstMsiW.exe

00-12-14  eugend       Bugs 221770, 248662, 248663 & 248664: MsiGetComponentPath, MsiGetProductCode,
                       MsiQueryProductState & MsiLocateComponent APIs had been modified as to handle
                       products installed by other users.

00-12-14  cnapier      Bug 256337: SAFER assert was firing on Win9X. The assert was disabled for non-Whistler platforms
                       since SAFER isn't applicable to those platforms.  The assert is still present on Whistler.

00-12-13  cgouge       Bug 192809: UISequence custom actions now receive tokens with the same privileges sets as 
                       the client. Impersonated execute sequence actions still only receive tokens with 
                       privileges that were pre-enabled in the client.

00-12-13  mattwe       Bug 214189: InstMsi now puts its temp files again in the windows\Installer sub-dir.
                       Engine now only asserts if resolving source in exactly windows\installer, not subdirs.

00-12-13  chetanp      Bug 213093: COM+ Fusion: Rollback on global assembly works inaccuratly in Multi-user scenario

00-12-12  cgouge       Bug 199268: When installing from media, the actual media relative path is used even
                       if the media contains an admin image with a path in the AdminProperties stream.
                       (We register the path we know you have).

00-12-12  bench        Bug 163146:  we now handle a mismatch between the registered package code and the package
                                    code in the cached database.  this mismatch can occur when installing one package
                                    then advertising another.

00-12-12  bench        Bug 252656:  move some calls to SAFER around to avoid allocating too many SAFER tokens at one
                                    time in multi-threaded scenarios.

00-12-12  mattwe       Bug 252440:  Crash in msi.dll after calling SRSetRestorePoint

00-12-11  chetanp      Bug 146429: Isolated file with condition=false is still installed

00-12-11  cnapier      Bug 238762: get msidb to work on downlevel platforms in GUI mode

00-12-11  cnapier      Bug 180824: msizap shouldn't leave Installer keys in bad state when acl'ing for admin.
                       Now msizap adds admin full control and ownership, but leaves permissions for system
                       and everyone alone.

00-12-11  cnapier      Bug 238789: move msimsp.exe to Patching folder in WI SDK

00-12-11  cnapier      Bug 213286: Change product and package codes for orca, msival2, and SDK msi's.

00-12-11  cgouge       Bug 219616: Source resolution dialog was not generating disk prompt correctly for
                       media sources.

00-12-08  cnapier      Checked in build 222 of msi.chm and msi.chi

00-12-07  cgouge       Bug 146223: Reworked ICE30 to use parameter queries so that directory names with 
                       apostrophe's will not cause invalid query strings during validation.

00-12-07  cgouge       Bug 240029: Prefix bug in msiregmv.

00-12-07  cgouge       Bug 146516: Fixed problem with self-unreg of mergemod when the reg keys were
                       already missing.

00-12-06  chetanp      Bug 232103: remove cleanup code of class registration since its not needed for 
                       new per user component mgmt logic.

00-12-06  cgouge       Bug 146515: Configuration of long strings in a CMSM would cause AV writing to log file
                       during merge process.

00-12-06  cgouge       Bug 227396: Detect per-user installs on TS when in install mode and block with new
                       ship error 1730.

00-12-03  chetanp      Bug 146375: Rename MsiURTAssemblySupport MsiNetAssemblySupport 

00-12-03  mattwe       Bug 146292: Flat files downloaded from URL sources are now deleted from
                       the URL cache as soon as they're in place.  (WININET::DeleteUrlCacheEntry)

00-12-02  cnapier      Bug 238750: added version and copyright info to msimig.dll and msimig.exe

00-12-02  cnapier      Bug 238802: moved copyright info to first line in msizap

00-12-02  cnapier      Bug 192765: web bootstrap no longer uses private header

00-12-02  cnapier      Bug 31791: Add mirroring support for BiDi dialogs on Win2K and greater

00-12-01  mattwe       Bug 151680: Only enable SE_RESTORE_NAME and SE_TAKE_OWNERSHIP_NAME token
                       privileges during restoration of failed installs (rollback.)  This prevents
                       gratuitous use of unnecessary privilege.  (And associated auditing if
                       turned on.)

00-12-01  chetanp      Bug 168798: pvt Win32 assemblies support in WI. See text file attached to bug 
                       for details of the changes.

00-12-01  mattwe       Bug 146390:  System Restore on Whistler now uses nested checkpoints for 
                       installs.

00-12-01  mattwe       Bug 245366:  Cabinet files are now extracted from threads which correctly
                       impersonate.  Prevents files from being created with LocalSystem privileges.

00-12-01  cgouge       Bug 218473: msidbCustomActionTypeHideTarget hides CustomActionData script field as
                       well from log files (in addition to Target field)

00-12-01  cgouge       Bug 222706. Orca now handles an invalid string in an integer column by showing an
                       error messoge instead of silently corrupting the data.

00-12-01  cgouge       Bug 148579, 185298. Fixed stall in custom action launch caused by service threading 
                       model. Simultaneously fixed CA server shutdown issue when the apartment is kept
                       alive across install sessions.

00-12-01  cnapier      Bug 245583: fixed SelfReg when ALLUSERS != 1. Problem was caused by the SAFER
                       implementation.

00-12-01  rahulth      Bug 210402: MsiProcessAdvertiseScript[A/W] are now public functions.
                       Also, MsiProcessAdvertiseScript[A/W], MsiAdvertiseProduct[A/W], 
                       MsiAdvertiseScript[A/W], MsiGetProductInfoFromScript[A/W] and
                       MsiIsProductElevated[A/W] will now only run on Win2K and higher platforms.
                       For lower platforms, they return ERROR_CALL_NOT_IMPLEMENTED.

00-11-30  cgouge       Bug 210919: Client-side DLL custom actions now use the exact environment
                       block used by the client. The block is passed to the service and used during
                       process creation. Multiple client contexts with different users now gives
                       each server the correct block.

00-11-30  bench        Bug 241687: as part of allowing non-admins to run the 2nd phase of ForceReboot installs,
                       we are now prepending our RunOnce value names with "MSI_".  the shell will run these commands
                       even when the user is a non-admin.

00-11-30  bench        Bug 244739: added MSICHECKCRCS and FASTOEM to the list of properties that can be passed to the service
                       even when the EnableUserControl policy is not set.

00-11-29  mattwe       Bug 146390: System Restore check-pointing is now enabled on Whistler, with
                       the same feature set as our support on Millennium.  No, your install has
                       not hung, the check-pointing is slow.  Restore team is working on perf,
                       and on builds prior to 2407, you'll see a second blank-checkpoint 
                       created for the end of the install.

00-11-29  cgouge       Bug 228782: Prefix bug in mergemod directory table merge.

00-11-29  chetanp      Bug 244331: Fix Assembly code to honour File_Mainfest column, when non-null (as opposed
                       to always treating the key path of the component as the manifest file for the assembly.

00-11-29  chetanp      Bug 146375: Define 2 new properties - MsiURTAssemblySupport and MsiWin32AssemblySupport
                       set to the file versions of the underlying infrastructure files fusion.dll and sxs.dll resp. 
                       On m/cs that do not have the corr. support these properties will remain unset.

00-11-29  cnapier      Bug 224383: PSDK sample scrub of wireadme.txt

00-11-29  bench        Bug 162066: don't set DISABLEMEDIA during admin install in some cases.

00-11-27  cnapier      Checked in build 221 of msi.chm, msi.chi

00-11-27  cnapier      Bug 143544: Improve Basic UI cancel button. If the cancel button is clicked,
                       the button is disabled (grayed-out) and the banner text "Canceling..." is
                       displayed.

00-11-27  mattwe       Bug 206040: Installer auto-retries when downloading a file from URL fails.
                       Bug 146391: Installer now sends "keep alive" messages during database
                          caching from a URL, and downloading individual files.

00-11-27  bench        Bug 146227: added support for patching fusion assemblies.

00-11-22  cnapier      Bug 146566: Fixed costing of MsiSetFeatureState with Feature="ALL"

00-11-22  chetanp      Bug 184661: AD: Once a failure to install an applicaiton is fixed, the icon is always incorrect.

00-11-22  cnapier      Bug 163155: Implement Msi / Safer interaction. Windows Installer will call
                       SAFER to determine if a package, patch, or transform is fully trusted. Only
                       fully trusted ("unrestricted") objects can be installed.

00-11-20  chetanp      Bug 198439: Fixed shared component/Shared dll logic for Win9x

00-11-15  eugend       Bug 233716: Darwin client reports mem. leaks when closed via ExitProcess.

00-11-15  cnapier      Checked in build 220 of msi.chm, msi.chi

00-11-15  cnapier      bug 146479 - MsiFiler fails when related package is on system.

00-11-15  cnapier      bug 217744 - MsiOpenPackageEx API

00-11-15  cnapier      bug 146201 - do not reboot if creating an advertise script

00-11-15  cnapier      bugs 228805, 228806 - fixed Prefix issues in setup.exe web bootstrap tool

00-11-14  cnapier      bug 225495 - fixed misspellings in License Agreement dialog in UISample and MSI SDK

00-11-14  cgouge       Bug 222748: MergeMod backwards compatibility of Merge function during 
                       merge of table with a merge conflict.

00-11-14  eugend       Bug 217795 & 220325: No more assertions if Control table is missing and
                       VirtualMemory property is set correctly on Win64 machines.

00-11-14  mattwe       We now build the SDK automatically in the builds.  The post build
                       must be run to finish.
                       Bug 191120: MsiSpy has been removed from normal builds.

00-11-14  eugend       Bug 203377: ship Darwin stopped reporting info message 2898 as
                       "internal error 2898" in the log file.

00-11-14  cgouge       Bug 172261: Added MSM 1.5 constants to mergemod.h

00-11-14  cgouge       Bug 175567: At EXE CA that AVs does not trigger any Windows error dialogs.

00-11-13  eugend       Bug 185528: Cabinet extraction doesn't fail anymore when a CD drive returns
                       invalid data, but retries the operation.

00-11-13  eugend       Bug 146363: Full UI scales now when larger/smaller monitor fonts are in use.

00-11-09  mattwe       Bug 146541, 213456, 211779:  The current fix is to simply use the same 
                       environment block for both elevated and impersonated custom actions.
                       The block will start as the system's.  To this, everything from the 
                       user's environment will be added EXCEPT the path.  This ultimately 
                       results that the temp will always be the user's, and the path will 
                       always be the machine's.

00-11-09  mattwe       Bug 181120:  Fixed the console window that appeared running InstMsi in
                       yet another new and exciting way.  This appears to have finally 
                       given us the "old" behavior.

00-11-09  cnapier      Checked in build 219 of msi.chm, msi.chi

00-11-08  cgouge       Bug 146564: implemented detection of custom action stack corruption
                       in ship builds. A message is sent to debug output when a problem is
                       detected.

00-11-08  mattwe       Bug 220353: InstMsi now correctly builds incrementally.  You should
                       be able to nmake /f %_NTPOSTBLD%\instmsi\[ansi | unicode]\instmsi.mak
                       directly without running msi.cmd

00-11-08  mattwe       Bug 204570: MsiExec /regserver now creates description for service
                       on Windows 2000 and later versions of NT

00-11-06  cgouge       Bug 129548: implemented non-secure transform migration during Win9X upgrades
                       for non-profile scenarios where apps move from per-machine to per-user.

00-11-06  bench        Bug 146334: fix intermittent crash during ForceReboot with /L*V!.

00-11-06  cgouge       Bug 146484: Orca would get confused with read-only files and the MRU list.

00-11-02  cnapier      Checked in build 218 of msi.chm, msi.chi

00-11-02  cnapier      Checked in build 217 of msi.chm, msi.chi

00-10-31  cgouge       Bug 205994: MsiRegMv creates the SharedDll key if one does not exist.

00-10-31  chetanp      bug 198439 - revert back cfg. data layout on Win9x to 1.1/1.2 format

00-10-31  mattwe       Bug 181120: Fixed InstMsi console window that appeared

00-10-31  cnapier      Bug 146397: MsiAdvertiseProductEx API for architecture simulation during
                       advertise script creation

00-10-31  cnapier      Removed PatchWiz Src from SDK.  Added MSI 1.5 Beta 1 SDK batch file
                       to %_NTTREE%\admin\darwin\src\sdk

00-10-31  bench        Bug 211736: fix problem applying overlapping patches to an admin image.

00-10-28  cgouge       Bug 146649: MSI CA manager now ensures appropriate process ACLs before launching CA server
                       for both client and service actions.

00-10-27  cgouge       Bug 205551: Fixed big memory leak in Orca and tweaked column-width code to support new
                       storage format.

00-10-27  cgouge       Bug 199772: Immediate custom actions are back to being denied elevation rights.

00-10-27  mattwe       Bug 146330:  InstMsi now places its temporary files in a subdirectory from the temp folder,
                       and secures it with the same DACL as the windows\installer folder.  InstMsi should now
                       be ready for test consumption on all platforms.

00-10-26  cgouge       Bug 205563: Win9X upgrade migration now handles the case where a user name is the same as
                       the machine name when profiles are turned on.

00-10-25  cnapier      MsiSpy no longer includes pdb files.

00-10-25  mattwe       Bug 146330:  InstMsi will now prompt for a reboot on Windows 2000 appropriately, 
                       Removed static linking to setupapi.dll

00-10-25  cnapier      Bug 207156: fix msizap to actually zap the product from the Uninstall key
                       (if no one else has the product installed)

00-10-24  cnapier      Checked in build 216 of msi.chm, msi.chi -- this how now been declared the
                       Windows Installer 1.5 Beta 1 build due to some technical content that needed
                       to be changed prior to release

00-10-24  eugend       Bug 146325: Darwin does not display drives that are hidden via system policy.

00-10-23  cnapier      Checked in build 215 of msi.chm, msi.chi -- first Beta 2 build

00-10-23  cnapier      Bug 195470: Better error message for case where registered product language differs from
                       package language (happens in recache case)

00-10-23  cgouge       Bug 146624: Client CAs now call AllowSetForegroundWindow to pass foreground rights to 
                       the CA server before invoking the CA.

00-10-23  cnapier      Bug 210375: Setup.Exe internet download bootstrap now takes advantage of the instmsi
                       delay reboot option (instmsi /c:"msiinst /delayreboot") and loads msi.dll from the
                       registered Windows Installer folder now written to HKLM\SW\MS\Windows\CV\Installer
                         InstallerLocation: REG_SZ 

00-10-23  cnapier      Bug 146616: Automated MsiGetFileSignatureInformation API (it's now the FileSignatureInfo
                       method of the Installer object)

00-10-20  eugend       Bug 138538: I've uncommented the 2 FailAssertMsg calls in IMEMORY.CPP.

00-10-20  cgouge       Bug 198943, 192292. Prefix fixes in migration.

00-10-19  cnapier      Bug 157550: Support for Null DestFolder in DuplicateFiles table

00-10-19  chetanp      Bug 175378: We now do not uninstall the files in a COM+ or URT assembly ourselves
                       Instead we rely on the fusion interface to do this for us.

00-10-19  chetanp      Bug 186912: we have stopped using the logo3 guid for darwinized shortcuts

00-10-19  chetanp      Bug 208456: Darwin generates fatal error if attempting to repair broken assembly

00-10-19  chetanp      Bug 146169: Prevent multiple closing of registry handles in RegKey object.

00-10-19  chetanp      Bug 206805: Allow further enumerating of products via MSiEnumProducts even if 
                       we encountered a corrupt product code entry.

00-10-19  cgouge       Bug 146500: trigger immediate TS reg propogation to current user after closing the
                       registry window during an install. This prevents endless repair of shortcuts that
                       verify HKCU keypaths until the next logon.

00-10-19  bench        Bug 206811: fix multi-threaded access to global IMsiServices pointer.

00-10-19  eugend       Bug 146153 again: Darwin is displaying the right message if it comes across a
                       corrupt cabinet.

00-10-18  cgouge       Bug 146477: Reboot call from the client to the service now authenticates using the
                       correct COM impersonation token.

00-10-17  bench        Bug 146311: the AFTERREBOOT property is now set from the In-Progress information
                       rather than the RunOnce key.

00-10-17  bench        Bug 146329: in our event log entry for failed component detection, we now include
                       the actual resource (file, folder, regkey or regvalue) that we couldn't find.

00-10-16  cnapier      Checked in build 214 of msi.chm, msi.chi.  This is the Windows Installer 1.5 Beta
                       1 SDK release build.

00-10-16  cgouge       200235 - orca shadow table pane is now cleared when closing the database while a 
                       shadow table is active.

00-10-16  eugend       Bug 194081: debug Darwin loads symbols only if it has a memory leak to report.

00-10-16  cnapier      Checked in build 213 of msi.chm, msi.chi

00-10-13  mattwe       Bug 146330: InstMsi will now install its main bits via an Exception INF on Windows 2000
                       InstMsi will not run on Whistler

00-10-13  eugend       Bug 185588 again: fixed an AV in ship builds and modified the process to build
                       a .LIB file instead of a .DLL.

00-10-13  cnapier      Checked in build 212 of msi.chm, msi.chi

00-10-11  cgouge       Bug 202286: Orca data corruption on add of new row in localizable column. 

00-10-11  cgouge       Bug 199778: The MsiBreak environment variable is ignored for non-admin users (since they
                       don't have permissions to debug a CA anyway.)

00-10-11  cgouge       Bug 146179: Commit custom actions now elevate based on the isaElevate flag in the script,
                       which is itself set based on the original scripts m_fRunScriptElevated member.

00-10-11  mattwe       Bug 146330 (partial fix)  Changes to InstMsi builds to create
                       catalog and exception INF.

00-10-11  cgouge       Bug 198942: Prefix: returning pointer to freed memory in CSIDPointer

00-10-11  cgouge       Bug 197267: Better logging for execution scheduling options.

00-10-10  eugend       Bug 185588: I've provided a workaround for the broken MsiGetShortcutTarget API in
                       ANSI builds < 1.20.1710

00-10-10  cgouge       Bug 192293. Prefix: leaked memory in writecfg.cpp.

00-10-10  cgouge       Bug 194454. Fixed endless loop in source resolution no UI mode when media source is invalid.

00-10-09  cnapier      Checked in build 211 of msi.chm, msi.chi

00-10-09  cgouge       Bug 171016: Prefix: using uninitialized memory in migsecur.cpp

00-10-06  cnapier      Checked in build 210 of msi.chm, msi.chi

00-10-06  eugend       Bugs 181468: Listbox controls in Darwin UI can display horizontal scrollbars now.

00-10-04  cnapier      Fixed building of msispy in order to properly create the type library.

00-10-03  cnapier      Checked in build 209 of msi.chm, msi.chi

00-10-02  cnapier      Bug 146647: add ICE76 to source depot

00-10-02  eugend       Bugs 166442: SelectionTree control displays now icons when the control is authored 
                       to be displayed on a dialog run in reinstall mode.

00-10-02  cnapier      Bugs 191416, 194810: fix ICE03 regression (194810) and fix ICE03 so as to not error on
                       type 37 and 38 custom actions where the formatted Target column is treated as literal
                       script text rather than formatted text

00-10-02  bench        Bug 194988: MsiFiler now dynamically binds to MsiGetFileHash, so the tool will still work on
                       Win2000 (with 1.1 Darwin).  also the MsiFileHash table is not populated at all (even if the
                       table exists) unless the -h option is supplied.

00-10-02  cgouge       Bug 187505: Leaked Handle message is not posted when the CA is called from a dialog control
                       event to prevent deadlocks in the message handler. The handles themselves are still closed.

00-10-02  cgouge       Bug 146509: MsiRegMv no longer creates a backup hive during upgrade migration unless in a debug
                       build with the -backup flag specified.

00-09-30  chetanp      Bug 146127: Fixed registry limitation for inprogress key on Win9x, got psdk installation going.

00-09-30  chetanp      Bug 164462: Changed multi-user component management rules to remove component if installed to
                       the same location.

00-09-29  cnapier      Bug 146149: update msicert for use with SDK -- new command line options for populating the MsiDigitalSignature
                       and MsiDigitalCertificate tables.  msicert -d {database} -m {media entry diskId} -c {digitally signed cabinet} [-H]

00-09-29  cnapier      Bug 193877: fix uisample.msi to properly handle selection of Repair option in MMode

00-09-28  eugend       Bug 146342 & 146607: two fairly minor full UI issues.

00-09-27  bench        Bug 146105: added the MsiNTProductType, MsiNTSuiteBackOffice, MsiNTSuiteDataCenter,
                                   MsiNTSuiteEnterprise, MsiNTSuiteSmallBusiness, MsiNTSuiteSmallBusinessRestricted,
                                   and MsiNTSuitePersonal properties.

00-09-27  eugend       Bug 146247: IOD (actually, the network connection) dialog has the correct
                       text when browsing is disabled.

00-09-27  bench        Bug 146589: MsiFiler will now optionally create the MsiFileHash table if it
                       doesn't already exist.

                       Also changed the command-line for msifiler so that every argument has its own switch

00-09-27  cnapier      Update schema.log file in %sdxroot%\admin\darwin\data\schema.idt.  This is the log of schema changes between
                       Windows Installer versions that ships with the SDK

00-09-27  eugend       Bug 146205: I've removed Wx86 code branches from the code.

00-09-26  cnapier      All SDK files are now available in the darwin source tree.  The SDK Msi package is built at the same time as
                       all other packages (although some tweaks are still needed for postbuild).

00-09-22  bench        Bug 182375: on Win2K and above, we call the GlobalMemoryStatusEx api, which gives
                       more accurate information for the PhysicalMemory and VirtualMemory properties.

00-09-22  bench        Bug 182386: we no longer set the following undocumented properties:
			MemoryBytes, TotalPageFile, TotalVirtualMB, TlsIndex, AvailablePageFile,
                        AvailablePhysical, AvailableVirtual, TotalPhysical, TotalVirtual

00-09-21  cnapier      Bug 185272: Fix setting of Intel property to include IA64 (backwards compat) and fix setting
                       of Intel64 property to be dependent upon g_fWinNT64 rather than compilation as 64-bit

00-09-21  cnapier      Bug 146632: Fix MsiSip problems on Win98 Gold due to bad version of ole32.dll (4.71)

00-09-20  bench        Bug 146246: fix internal error when patch applied to sfc-protected or acl'ed file

00-09-20  bench        Bug 146307: fix internal error when installing file to innaccessible folder

00-09-20  bench        Bug 183364: we now properly handle a missing companion file when patching

00-09-20  cnapier      Bug 146306: Fix AV in SetInstallLevel when package contains 0 components

00-09-19  cnapier      Bug 146155: Allow for FILE_FLAG_DELETE_ON_CLOSE when using MsiRecordSetStream (requires specifying
                       FILE_SHARE_DELETE whenever we attempt to open the file)

00-09-18  chetanp      Bug 146139: Calling MsiProvideComponent with INSTALLMODE_NOSOURCERESOLUTION flag 
                       on local broken component incorrectly returns ERROR_INSTALL_FAILURE. Fixed to now 
                       behave similar to INSTALLMODE_NODETECTION and return ERROR_SUCCESS.

00-09-18  weiruc       Bug 146365: ICEM12 added to validate module sequence tables. All custom actions
                       and dialogs must have BaseAction and After values, all standard actions must
                       have sequence numbers.
                       Bug 146378: ICEM07 added error message to distinguish a non-existent file in the
                       cab file from a badly sequence numbered one.
                       Bug 146396 ICE23 uses MsiOpenDatabase which can not be remoted which causes the
                       ice itself not being remoted. Instead of using a temporary database, instead use
                       the existing one, but generate a random name for the temp table to avoid name
                       collision. Also uses retry when the random number didn't work out.
                       Bug 164784: ICE78 added to validate the AdvtUISequence table is either empty or
                       does not exist.

00-09-18  cnapier      Bug 176137: unchecking all features in UI still installs on NT 

00-09-18  chetanp      Bug 146167: msiexec /ju was not setting ALLUSERS property on command line

00-09-15  mattwe       Bug 184285: mspatcha.dll is now on our SFC bypass exception list for Windows 2000

00-09-14  cnapier      Bug 146198: Inaccurate error message when accessing '.Features' property of Windows Installer object

00-09-14  bench        Bug 181813: we now correctly impersonate when determining if the user is an admin.
                       This bug was exposed when source resolution was delayed until the point where the 
                       service elevates to perform a managed install.

00-09-14  cnapier      Bug 181324: Install RFS shared component during reinstall if at least one feature is requesting a reinstall local
                       or is explicitly going local

00-09-14  bench        Bug 146580: when patching an admin image where the .msi is read-only, we take the read-only
                       attribute off (along with hidden and system) temporarily while update the .msi and put the
                       original attributes back when finished.

00-09-13  cnapier      Bug 146316: A component is not disabled if the keypath is an unversioned file whose existing file on the system
                       is modified (though file install versioning rules will still come into play)

00-09-13  cnapier      Bug 172334: OutOfRbDiskSpace message updated.  The cost in KB is now formatted according to CurrentUserLocale
                       (i.e. instead of 1460000 KB, you'll get 1,460,000 KB on US or 1.460.000 KB on Italian systems)

00-09-13  mattwe       Bug 146137: We no longer attempt to load SFC.DLL on NT4 (caused problems when another
                       app installed a file by this name.)

00-09-13  chetanp      Bug 177454: use ManagedLocalPackage instead of LocalPackage to register cached msi
                       for user assigned apps.

00-09-12  bench        Bug 182050: new error for general SfcInstallProtectedFiles failure that isn't for a
                       particular file.

00-09-12  bench        Bug 146486: we no longer complain about failing to remove a product during an upgrade
                       if the error table happens to have 2 rows for the same existing product.

00-09-12  cgouge       Bug 157268: MSI now filters return codes from custom action DLLs and scripts. Anything that is
                       not an approved return code is mapped to failure instead of triggering some random result.

00-09-11  bench        Bug 146122: the "installation completed successfully (or failed)" event log entry is
                       now more specific about the type of install that happened.  we have different entries for
                       install, uninstall, advertise and configure.

00-09-11  bench        Bug 30867: when an install is invoked as an uninstall (so that the installer knows its an
                       uninstall at the beginning) the basic UI dialog says "Preparing to remove..." instead of
                       "Preparing to install..."

00-09-11  bench        Bug 166964: changed "failed to create temp file" error from debug to ship.

00-09-11  bench        Bug 181624: we don't ignore failure to write extension registry goop any longer.

00-09-11  bench        Bug 169413: some global const strings were not defined as const, causing some perf issues.

00-09-11  cnapier      Bug 179330: Report user cancelled setup if user selects cancel during instmsi upgrade with internet
                       download bootstrapper.  Note that this is still blocked by bug 146117 where msiexec is returning
                       ERROR_SUCCESS instead of ERROR_INSTALL_USEREXIT.

00-09-11  cgouge       Bug 181309: Win9X failure in MergeMod MergeEx call due to wrong string API.

00-09-10  cgouge       Bug 171012: Fix prefix bug, uninitialized memory in mergemod RegisterServer call.

00-09-10  cnapier      Bug 146126: Fix crash in CMsiEngine::GetFileInstalledLocation if Component table is not loaded.

00-09-09  cgouge       Bug 166969. Non-admin users could not use secure cached transforms because we were not elevating
                       inside ixfSecureTransformCache when generating the temp filename in the \Installer directory.

00-09-09  cgouge       Bug 171013, 171015, 171017, 171018: various PREFIX problems in migration security code.

00-09-09  cgouge       Bug 171007: PREFIX memory leak in custom action server.

00-09-07  cnapier      Bug 171498: MsiCreateAndVerifyInstallerDirectory works properly on Win9X. (No security verification
                       is performed, but an attempt is made to create the directory.  An already existing directory is
                       still considered a success as well.)

00-09-01  mattwe       Bug 176427: MsiInst in InstMsi.exe now re-sizes its process token
                       buffers to correctly detect Admins.

00-09-01  cgouge       Bug 167102: Fixed problem with new packagecode-only disk 1 verification where packages not at
                       the root of the disk were not being validated correctly.

00-09-01  bench        Bug 167847: fix bug in handing a missing cached patch, which prevented some roaming-user
                       scenarios from working.

00-09-01  bench        Bug 168364: use the proper package name when deploying a package while it is also installed
                       on the local machine (using a different package name).

00-09-01  cnapier      Bug 170063: Added functionality for executing instmsi when a Windows Installer upgrade is needed during the
                       internet download setup exe execution.

00-08-31  cnapier      Bug 146151: Ability to add new components to existing features during minor patches and upgrades.

00-08-31  cgouge       Bug 146291: Don't use crypto DLL to generate CA connection to avoid holding the DLLs in use.
                       This resulted in endless reboots when running Outlook after 9x->NT upgrades

00-08-31  cgouge       Bug 154275: Preliminary MSI 9x to Whistler migration DLL to unblock home user.

00-08-31  mattwe       Bug 159861: InstMsi on NT now calls MsiRegMv.exe to migrate data

00-08-31  eugend       Bug 146153: Former debug errors 2351 & 2355 are ship 1334 & 1335 now.

00-08-31  mattwe       146199: Unicode InstMsi is now build with an MSI.DLL that doesn't use /robust IDL.
                       This version of the msi.dll is binplaced to _NTTREE\instmsi\unicode.

00-08-31  eugend       Bug 146312: latebind's DLL unbindings are in try-except statements.

00-08-31  eugend       Bug 146494: Darwin writes now eventlog messages that have distinct IDs.

00-08-31  eugend       Bug 174543: Bitmaps display with the correct colors now.
                       
00-08-30  eugend       Bug 146428: Clicking on the last item (partially) displayed in the SelectionTree
                       control doesn't affect anymore the state of the item just below it.

00-08-30  eugend       Bug 173668: Darwin doesn't log hidden properties anymore on the "MSI (c) (nn:nn): Switching to server:" line.

00-08-29  eugend       Bug 148574: Automation doesn't hang anymore if the product key (in the registry) 
                       is longer than 38 characters, but returns ERROR_BAD_CONFIGURATION.

00-08-25  eugend       Bug 146461: Comboboxes in full UI got vertical scrollbars now.

00-08-22  bench        Bug 165354 - bumped the default timeout value for chk builds from 1 minute to 10 minutes.
                       The timeout has been seen several times on the latest whistler builds, and 1 minute
                       is just too short.

00-08-21  mattwe       Bug 146330 - InstMsi will now run on Whistler/Windows 2000.  Note that
                       the regular build process no longer competely builds instmsi.  In addition,
                       you will have to run a post build step.  (see later check-in notes.)
                       This requires that the core msi files have been signed with a valid certificate
                       accepted by SFC.

00-08-21  cgouge       Bug 165275. Fix Orca crash when running a search with no selected table.

00-08-16  cnapier      Bug 163152.  Remove WinVerifyTrust call for digital signature policy.  In Beta2, we will be using SAFER.  The infrastructure
                       remains in place; however, no policy decisions are ever made w.r.t. digital signatures.  External cabinet digital signature checks
                       are STILL performed.

00-08-15  eugend       Bug 163009: CMsiBitmap::DoUnpackBitmap was passing an unaligned pointer
                       to GDI32!CreateDIBitmap.

00-08-15  cgouge       Bug 146549. The Custom Action Manager now detects leaked handles and posts an info 
                       message saying that handles have been leaked. The leaked handles are then closed.

00-08-14  cnapier      Bug 100163, 146450, 146397, 153738. 64-bit package must be marked with schema 150.  Mixed platfrom packages (Intel & Intel64)
                       are explicitly not supported.  Advt scripts for 64-bit packages fail when run on a 32-bit OS.  Temp copy of Msi
                       is deleted if MSI digital signature check fails. 

00-08-11  cgouge       Bug 157952. Dropped OpenThread API for Win9X/NT4 support, instead using a list of active custom actions and
                       their associated suspended threads. 

00-08-11  bench        Bug 146404: fixed AV when writing to 0-byte wininit.ini file (Win9X only)

00-08-10  bench        Bug 146614: added the Install.FileHash automation for the MsiFileHash api.

00-08-09  bench        Bug 33731: properly fail when writing to a script file with no available disk space and no UI.

00-08-08  cgouge       Bug 146578. Added pcp files to Orca file dialog filters. Added "Edit with Orca" verb to .pcp extension in Orca.Msi. 

00-08-08  cgouge       Bug 146298. InstMsi/CopyMsi will now fail on NT4 before SP3 with a launch condition error. 

00-08-08  cgouge       Bug 146103. Primary checkin for Orca transform viewing functionality. 

00-08-07  cgouge       Bug 146517. In CMSMs, the target of a configurable key item was being deleted if not prompted uses of the item
                       existed, regardless of the attribute. The row is now marked for deletion only after the first prompted item with the
                       no-orphan attribute is encountered. Later items may still flip the row back to not be deleted.

00-08-07  cgouge       Bug 153857 (again), 148731, 146547 (again). Errors 2737, 2740, 2742, 2743 have now been dropped and new 
                       pure-ship errors 1720, 1721, 1722, and 1723 added. 1723 is now propogated correctly for remoted custom
                       DLL custom actions.

00-08-05  cgouge       Bug 146458, Explorer was caching source paths indefinitely for shortcut targets, resulting
                       in invalid paths when RFS source validity changed. We now ignore the global cache for all
                       descriptor based source resolutions. This is also a 1.1 QFE (WINSE 8803/8857)

00-08-04  cgouge       Bug 148731, idbgCustomActionLoadLibrary prameters were backwards in the log file.

00-08-03  chetanp      bug 146433 - Fixed MsiGetPatchInfo API

00-08-03  cgouge       Bugs 153857, 146547: Debug Errors 2740, 2742, and 2743 "turned ship" and are now in error.enu
                       these strings will need to be localized in the next LOC pass.

00-08-02  cnapier      Fixed building of instmsi to properly import ActionText and Error tables.  Added building of
                       enumsi.res for localization drops.

00-08-01  chetanp      bug 150107 - Fixed uninstall of an app does not remove HKCU registry keys if the app is installed for another user

00-08-01  cnapier      Bug 152548: MsiApplyPatch Regression fix.

00-08-01  cnapier      Bug 152897: Authoring errors for digital signatures for cabinets now reference proper table in which
                       error occurs (idbgBadForeignKey).

00-07-31  eugend       Bug 152813: Regression to fix for 10030.

00-07-26  eugend       Bug 146218: I've removed the restriction of 1024 characters on the length
                       of properties entered on the command line.

00-07-26  chetanp      bug 146278 - COM <-> COM+ interop support work: Added support for IOD of COM 
                       assemblies when invoked by COM classic clients. Check specs for more info

00-07-26  bench        Bug 146426: detect and resolve conflicts between patches that use the same DiskID and Sequence
                                   values.  This fix is huge and greatly impacts the way patches and standalone transforms
                                   are applied.

00-07-25  cnapier      Bug 146645: Send imtError instead of imtUser for LaunchCondition and CustomAction type 19 errors.

00-07-25  cnapier      Bug 146652: Multiple digital signature eventlog messages with verbose information were
                       added instead of relying on one.  An admin can now pinpoint the reason why the failure
                       occurred (invalid hash, rejected cert, etc.)

00-07-25  mattwe       Bug NT 146100:  After a suspended install, when a different user 
                       logs in and starts a new install, we now attempt to rollback the
                       partial install for the other user.  Previous behavior simply 
                       discarded all rollback info and continued.

00-07-24  eugend       Bug 146114: hitting Esc during rollback has no effect now.

00-07-24  eugend       Bug 146431: MsiZap supports now the new per-user registry data format.

00-07-24  dkays        More prefix fixes.

00-07-21  mattwe       Bug NT 146541: Custom Actions that are elevated will now only receive
                       the system environment block, rather than the user's block.

00-07-20  cgouge       Re-enable compiler warning 4701 - uninitialized local variable.

00-07-18  eugend       Bug 11227: AV in handler when two successive dialogs have the TrackDiskSpace
                       attribute set.

00-07-14  cgouge       Bug 11070: Before launching a custom action server for a non-admin, we ensure that
                       INTERACTIVE_RID group has SYNCHRONIZE access on the service process. Otherwise the CA
                       server thinks the process is gone and shuts itself down.

00-07-11  chetanp      Bug 10516: Added support for IOD for pvt and global COM+ assemblies. Check specs for more info

00-07-10  cgouge       Bug 10714: When passed a package path on the command line (if the path can't be gleaned
                       from registration) we convert the path to LFN during engine initialization to ensure 
                       the SourceList registration contains a path that can be used on sources where the SFN
                       representations of the package are not the same.

00-07-10  eugend       Bug 10030: We've stopped writing private properties into the log file,
                       as well as all passwords from ServiceInstall table and the Target
                       column for some custom actions.

00-07-10  eugend       Bug 10511: AppSearch and CCPSearch actions have been modified
                       as to be able to look for 64-bit apps in the registry.

00-07-10  cnapier      Bug 10884: Digital Signatures.  Redistribution of msisip.dll and msipol.dll via instmsi.  Note that msipol.dll
                       is conditioned for VersionNT >= 500 since it will only be distributed on Win2K.  However, currently instmsi
                       has a launch condition to block installs on Win2K.  The Client-Side-Extension registry entries were added to
                       the Registry table for instmis for the policy provider DLL.  Additionally, there are two new in-script,
                       non-impersonated custom actions for registering the Sip and Policy provider DLLs with crypto.  The Sip registration
                       custom action also removes the old structured storage Sip registration if present.

00-07-09  cnapier      Bugs 11104, 11105, 11169, 11172: Digital Signatures.  Reduced WinVerifyTrust calls on open of package to only
                       occur when at least one of the following three conditions are true:
                                  1.  Product is unknown (not installed or advertised)
                                  2.  Local cached Msi is missing
                                  3.  Explicit recache specified (REINSTALLMODE option)
                       Additionally, a WVT check will be performed when accessing the source Msi to extract an embedded cabinet (although
                       no check is performing when validating the source)

00-07-08  chetanp      Bug 11200: Added support for privatized win32 components

00-07-08  eugend       Bug 9242: MsiEnumComponentCosts is a new API for getting the
                       costs incurred per disk drives by the installation of a component.

00-07-07  cnapier      Bug 11179: New API for creating and verifying the Installer directory -- MsiCreateAndVerifyInstallerDirectory.
                       This is a private API that is used by the service when it verifies ACLs on the %systemroot%\Installer directory
                       and by msipol if the directory is not present when the group policy client-side extension runs during winlogon.
                       The OpenMsiCertStore API also makes use of this API call.  MsiCreateAndVerifyInstallerDirectory requires that
                       the callee be an admin or local system.

00-07-07  cnapier      Bug 11178: New API for extracting the signer certificate and hash from a signed Msi, Mst, Msp, or Cab.
                       MsiGetFileSignatureInformation.  The hash extraction is optional.  Provided for Admin policy UI in GPE
                       and for tools like VSE, InstallShield to use in authoring the MsiDigitalSignature and MsiDigitalCertificate
                       tables.

00-07-07  chetanp      Bug 11071: Fixed code to prevent removal of any entity (like registry entries, self reg, ...)
                       during uninstall of GUIDless components. This behaviour is now consistent with what is 
                       documented.

00-07-07  chetanp      Bug 11199: Added code to redirect loading of fusion.dll via the shimming dll (mscoree.dll).
                       We no longer need fusion.dll to be in the system folder any more. 

00-07-06  t-shanj      Bug 10785: Added ICE77. Verifies that the in-script CAs are scheduled between 
                       InstallInitialize and InstallFInalize in InstallExecuteSequence table and 
                       AdminExecuteSequence table. 

00-07-06  cgouge       Bug 11052: Switched to a 2-phase DLL custom action launch procedure. Phase 1 sets up the action in
                       a suspended state, whereas phase 2 runs the action and retrieves the result. In between the phases
                       the thread information is passed to the CA manager so the message context can correctly filter
                       synchronous custom action messages to avoid deadlock.
          
00-06-30  cgouge       Bug 10837: Fixed ICE46 crash on non-matched left bracket in property.

00-06-29  cnapier      Bug 11139: Not calling WVT on all patches.

00-06-29  cnapier      Bug 11171: Package signed with expired certificate still installed if InstallKnownPackages policy was 1.
                       Fixed Msi_FinalPolicy to call Authenticode's final policy function so that the certificates in the chain
                       are evaluated against the HKCU WVT registry policies dealing with expired and revoked certificates.

00-06-28  cgouge       Bug 11079: Folded IMsmGetFiles into IMsmMerge2, since there is no longer a reason to maintain
                       a seperate interface. the CLSID_MsmMerge object still implements IMsmGetFiles for backwards
                       compatibility.

00-06-28  cgouge       Bug 10874: All new CMSM errors now cause MergeEx to return E_FAIL, not S_FALSE. This is because
                       these errors result in partial merges (unlike the other S_FALSE error cases). An error object is
                       still added to the error enumerator.

00-06-28  cgouge       Bug 11075: A leaked handle in mergemod was keeping the module in use during a CMSM merge. The
                       handle is now closed.

00-06-27  cgouge       Bug 10685: we now use only the package to validate Disk1 (the volume label is ignored) in
                       both engine and execute resolution. We use the "same volume label" check that was earlier used
                       for the special-case label registration to determine what media table entries constitute 
                       "physical disk 1".

00-06-27  bench        Bug 11066: we now perform a FileHash check on companion files when the version check
                       on the parent file tells us to install the companion file.

00-06-27  dkays        Switch msiexec to use new comctl32 v6 controls for new shell UI look.

00-06-26  mattwe       Bug 6500:  During rollback, we now simply log errors and continue on.  All error and
                       warning dialogs are suppressed, and just sent to the log.  The rollback will continue
                       on, for better or worse.

00-06-23  bench        Fixed Whistler bug 130132: crash when rolling back after ODBC failure

00-06-23  dkays        Split msi.h into public and private header.  Msi.w, msiquery.w, and msidefs.h can now
                       be found in admin\published\msi.  This is where these files should be modified and built 
                       from to update public\sdk\inc.  Msi.w is split into public\sdk\inc\msi.h and 
                       public\internal\admin\inc\msip.h.

00-06-21  cnapier      Bugs 11138: Digital Signature error now properly returned in the case of a file split across two cabinets. 

00-06-20  cnapier      Bugs 11100, 11102, 11103: Digital Signatures.  Changed interpretation of MsiDigitalSignature table.
                       The DigitalCertificate_ column is now non-nullable.  When patching an admin image, the digital signature
                       is removed from the MSI at the admin install point.  New error messages for policy rejection of 
                       transforms (ERROR_INSTALL_TRANSFORM_REJECTED) and patches (ERROR_PATCH_PACKAGE_REJECTED).  Additionally,
                       two new event log templates were added with their own message Id's (EVENTLOG_TEMPLATE_WINVERIFYTRUST_UNAVAILABLE
                       and EVENTLOG_TEMPLATE_DIGITAL_SIGNATURE).

00-06-20  mattwe       Bug 10665: Only non-password protected screen savers are now disabled during long
                       installs.

00-06-19  cgouge       Bug 11044, orca command line processing was openining the merge module before determining the
                       language and then complaining that the language was not known. Language detection was moved
                       back before database open. (where it was before UI integration.)

00-06-19  cgouge       Bug 11130, a CMSM temporary column was type INT, which limited bitfield masks to 16 bits. The
                       column is now LONG (32 bits).

00-06-19  cgouge       Bug 11070, incorrect parsing of escaped characters in Orca CMSM UI.

00-06-19  cgouge       Bug 11058 part 2, fix button to be correctly enabled after the browse dialog returns.

00-06-18  bench        Bug 10776: checked in version 1.97 of mspatcha.dll and mspatchc.dll.  1.97 contains
                       a small backward compatibility fix over 1.96.  namely in 1.97 the PATCH_OPTIONS_USE_BEST
                       flag behaves the same way as it did in 1.94, where is behaved differently in 1.96.

00-06-18  bench        Bugs 10950,11110: more patchwiz fixes from Office MOSE team.

00-06-18  bench        Bugs 10817,11109,11111: integrated patchwiz fixes from Office MOSE team.

                       10817 deserves special note: you can now specify in the .pcp file to create smaller patches
                       for large files, with the caveat that the patches won't work with 1.94 mspatch (which
                       shipped with 1.1 MSI).  see the bug for more info.

00-06-16  cgouge       Fixed bug 11124. Removed ShellNew commands from _BadRegData table in CUB file.

00-06-16  cgouge       Fixed bug 11125. Changed Shortcut.ShowCmd validation to 1;3;7

00-06-15  cnapier      Bug 10963: MsiFiler fails if the call to MsiGetSourcePath fails.

00-06-14  cnapier      Bug 11097: MsiOpenPackage now properly terminates the initialized message context if it fails to
                       create an engine.

00-06-13  bench        Bug 10996: in FindRelatedProducts, fix version comparison so that a version number with
                       major version = 128 doesn't look negative.

00-06-13  cgouge       Bug 10547: fix regression where the DisableMedia policy was being checked per-machine. It
                       is actually a per-user policy. 

00-06-13  cnapier      Bugs 11073, 11089: fixed regression in error message for File Not Found.  Fixed problem
                       with msifiler and validation not being able to create an engine via MsiOpenPackage.  The
                       problem was due to a WinVerifyTrust call on the package (for security) and it failing because
                       the SIP requires opening the storage for reading while denying write access and the package
                       had been opened for writing.  The fix was to short-circuit the WinVerifyTrust call such that
                       an unsigned package opened for writing with the DWORD policy allowing unsigned packages can
                       create an engine object. 

00-06-12  cgouge       Bug 11058: fix crash in orca when no path is specified for the module path path in the merge 
                       module dialog box 
         
-----------------------------
  RI to VBL04 for 1.50.2240
-----------------------------

00-06-05  bench        Bug 10384: file hashes for unversioned files can be stored in the MsiFileHash column
                       and used during version checking to save unecessary file copies.

00-06-05  cnapier      Bug 9920: Implemented digital signature infrastructure for verifying digital signatures on
                       MSIs, MSTs, and MSPs during installation actions.  Trust is determined by a set of policies
                       that are evaluated by the MSI policy trust provider (identified via GUID in the WinVerifyTrust
                       call).

00-06-02  dkays        Integrate from vbl04 to private branch.

00-06-02  dkays        Prefix bug fixes.

00-06-02  cgouge       Bug 10547: fixed source validation on engine start to correctly respect Media and
                       Browse policies for both initial installs and maint installs.

00-06-01  dkays        Instmsi and various build changes.  Remove uses of UMABSENTRY in sources.

00-06-01  eugend       Bug 9953: Darwin checks now the corectness of CRC checksums of files that
                       are marked as having a checksum.
                       Bug 10299: Windows File Protection error 1931 is displayed only once, all
                       subsequent occurences are recorded in the eventlog and in the log file.

00-06-01  cnapier      Bug 9925: Enable digital signatures for cabinets via authoring of the MsiDigitalSignature
                       and MsiDigitalCertificate tables.

00-05-30  cnapier      Bug 10834: The custom action samples for the SDK (tutorial.dll, process.dll, remove.dll,
                       and create.dll) now build in Source Depot.  Additionally, the call to the rollback custom
                       action was changed so that it proceeds the call to the deferred custom action (process.cpp)
                       so as to be in agreement with the docs.

00-05-25  cgouge       Bug 10945: we now create a Products\<pcode>\Usage key with read/write ACLs during
                       product registration.

00-05-25  cgouge       Bug 10895: Service no longer creates Products\Secure key on start.

00-05-24  chetanp      Bug 10814: fixed COM+ assemblies installation support break.

00-05-24  cnapier      Bug 9925: MsiCert.Exe tool to aid in testing of digital signatures for cabinets.
                       The tool will populate the MsiDigitalCertificate and MsiDigitalSignature tables
                       of an MSI package with information extracted from a signed cabinet.

00-05-22  cgouge       Bug 10939: Fixed hang in msival2 caused by a buffer overrun inside the MSI cursor
                       when a possible property reference in a formatted string was not terminated within
                       260 characters. The buffer is now resized appropriately.

00-05-19  eugend       Touched bug 10507 again: I've fixed up the APIs called in the 32-bit process
                       as to return %systemroot%\syswow64 instead of %systemroot%\system32.

00-05-19  eugend       Bug 10806: the refcounting mechanism got extended as to handle 64 and 32-bit
                       components.  On Win64, for 32-bit components we update info in the 32-bit
                       SharedDLLs key and for 64-bit, in the regular SharedDLLs key.  On Win32, the
                       behaviour is unaltered.

00-05-19  cgouge       Bug 10972: Made ContextData, DefaultValue, DisplayName columns in ModuleConfiguration
                       table localizable.

00-05-19  cgouge       Bug 10879: Dropped MMI/MPI support from Orca.

00-05-18  cgouge       Bug 10600: Added support for the Intel64 summary property to Orca.

00-05-18  cgouge       Bug 10980: Fixed Multi-User Migration tool (msiregmv) to correctly migrate secure-full-path
                       transforms. The transforms are registered in the mapping key under their full-paths to avoid
                       potential name collisions.

00-05-17  cnapier      Bug 10826: fixed the tools so that they have version resources and map to the build.
                       Copyrights for the /? option and Help->About have been updated to include 2000.
                       Added msimsp and msiloc to the build process and fixed the msispy builds to handle
                       version resources.

00-05-17  bench        Bug 10953: fixed patchwiz.dll to propertly compare 2 product versions.  There
                       should be no more bogus warnings about mismatched product versions when creating
                       a patch.

00-05-17  cgouge       Bug 10380: Fixed LastUsedSource checks to resolution to actually check only the 
                       last used source.

00-05-12  bench        Bug 10954: Fixed source resolution code to work for msifiler.exe.

00-05-10  bench        Bug 9321: second and final piece to this bug.  Fixed RegisterProduct action to not
                       resolve the source during a QFE patch.  Fixed ixfFileCopy to skip source resolution
                       when not copying or moving a file.

00-05-10  chetanp      fixed bug 10898 - MsiGetShortcutTarget was failing
                       (in ANSI builds) because of lack of null termination
                       in read buffer.

00-05-09  cgouge       Bug 10889: Multi-User migration now deletes old cached transforms on migration. 
                       It also tries to delete the SecureTransforms directory and the product GUID 
                       directory, but doesn't if other files exist there (such as cached icons).

00-05-09  cnapier      Bug 10907: Fixed incorrect grammar in ICE61 error message.

00-05-09  cnapier      Bug 10628: Fix crash in CMsiDatabase destructor with corrupted database

00-05-09  cgouge       Bug 10823: Updated ICE45 _ReservedBits table to allow 64bit attribute in Component table.

00-05-09  cnapier      Bug 10254: Refit of static text with dynamic properties upon repaint. 

00-05-09  cnapier      Bug 10296: SecureCustomProperties fixed to only allow the specific list.  (Inccrrectly allowed
                       all properties if value contained two semi-colons in a row or ended with a semi-colon) 

00-05-08  cnapier      Bug 10698: Fix for ICEs 35, 39, 45, 66, 73 -- cannot use NULL for output parameters for MSI
                       API (MsiSummaryInfoGetProperty in particular).  This was originally fixed but was not migrated to
                       Source Depot.

00-05-08  cgouge       Bug 10487: Updated ICE45 _ReservedBits table to allow Sunken and Enabled for all controls.

00-05-08  cgouge       Bug 10745: Added new ICEM11 to verify that Configurable Merge Modules have 
                       ModuleConfiguration and ModuleSubstitution in the ModuleIgnoreTable table.

00-05-08  bench        Bug 9876: if the ScheduleReboot or ForceReboot actions were run prior to the install
                       failing or being cancelled, reboot would still happen.  This has been fixed by
                       clearing the appropriate flags upon an unsuccessful end to the install. 

00-05-08  bench        Bug 10871: applying a major-upgrade patch with REINSTALL=ALL used to register only
                       the patch without registering the rest of the product, leaving the product is an
                       unusable state.  this is now fixed.

00-05-08  cgouge       Bug 10897: Custom Action Server COM connection is now ACLed differently based on
                       whether the client or server is the owning process.

00-05-07  bench        Bug 10693: files that are patched but not pre-copied are now correctly bound by
                       the BindImage action.

00-05-07  bench        Bug 10649: fixed misleading log message when patching a file that doesn't
                       need to be copied beforehand.  We now describe whether the file will be patched
                       or not in addition to whether it will be copied or not.

00-05-07  bench        Bug 8340: it is no longer necessary to set SHORTFILENAMES manually when patching
                       an admin image with short names.  the installer does this for you.

00-05-05  cgouge       Bug 10890: Fixed typo in ICE47 warning message.

00-05-04  cgouge       Bug 10110: Added support to Orca for NULL data in nullable binary columns.

00-05-04  cgouge       Bug 7455: Removed invalid (and broken) StartImpersonating call from ValidateSource 
                       on RFS components.

00-05-04  bench        Bug 10910: we no longer prompt the user to close down an application holding a file
                       in use if the file is actually RFS and the component is being uninstalled.

00-05-04  bench        Bug 10831: RFS was improperly disallowed when running from an admin image just
                       because the File table has a file marked as compressed.  But in an admin image
                       all files are uncompressed and RFS should always be allowed.

00-05-04  bench        Bug 10472: fixed MsiApplyPatch api to close the patch storage when it is done
                       with it, before invoking the patch install, which was preventing reboots from
                       happening during a patch.

00-05-03  cgouge       Bug 10816. Fix remoted out buffers to revert to old behavior despite change
                       in underlying proxy code. We now use a temp output buffer when remoting.

00-05-03  cgouge       Fix Smoke failure in mergemod relating to directory creation on
                       systems with FAT drives.

00-05-03  cgouge       Added support for 64bit directory properties to MergeMod.

-----------------------------
  RI to VBL04 for 1.50.2228
-----------------------------

00-05-09  eugend       Fixed bugs# 10914 & 10629.  10629: RegCreateKeyExW API works now OK
                       on Win64 so that I've removed our own MsiRegCreateKeyEx workaround.
                       10914: 64-bit Windows' Wow6432KeyValue special registry value was
                       causing us not to remove product publishing information.

00-04-29  chetanp      Bug fixes for Multi-user changes. (10891, 10893)

00-04-30  cgouge       Tweaks to 1.5 Migration Tool. Removed debug spooge, turned off transform deletion,
                       fixed owners of keys (bug 10887), switched cached patch and product registration
                       to full path, make backup of hive in Windows folder. 

00-04-29  chetanp      Multi-user changes. See http://dartools/dardev/specs/multi user(design).htm for 
                       schema and functionality changes. There are a few pieces of functionality
                       that is missing for this check in
                       1> The secure transforms as stil not cached per user. We still work the way
                       we did before.
                       2> The "Usage" key is not being ACLed to allow everyone read write (though 
                       it is being migrated this way, so if it already exists or if the user is
                       an admin, you will see the feature usage counts being updated)
                       3> The component management code works off the particular user's view for
                       component management instead of the global view (see shared component logic 
                       section in specs). What this means is that an uninstallation will still remove
                       the file and machine data for a shared component installation even if there are
                       other users that are clients of the installation. However, if users install to
                       different locations, it works.
                       4> The external API MsiGetPatchInfo is broken because of the multiuser changes. 
                       However, internally all patching has been rewired for the change. So all patch
                       stuff should work.
                       5> We still register the product information under the Uninstall key as well. While
                       this would be needed for legacy OSes, we will get ARP to go through us for all MSI
                       apps, so that we dont do this registration on Whistler.

00-04-29  bench        Bug 9321: first set of changes to delay source resolution as far as possible.  This
                       will benefit patch application by not requiring the original source to apply a patch
                       if the source is truly not required.
        
00-04-29  cgouge       Main checkin for Multi-User Migration tool. (MsiRegMv.exe)

00-04-29  eugend       InstallODBC and RemoveODBC actions had been modified to handle
                       64-bit components.  Bug # 10508 tracks this.

00-04-28  cnapier      Bug 9921: Implemented MSI SIP plug in.  MSIs, MSMs, MSTs, and MSPs
                       can now be signed.
		
00-04-28  eugend       RegisterTypelib and SetODBCFolders actions had been modified to handle
                       64-bit components.  Bugs # 10506 & 10507 track this.  I've fixed bug# 10614:
                       on 64-bit machines, 32-bit 'Program Files' and 'Common Files' folders are
                       now retrieved correctly.

                       For debugging API calls that are remotely executed in the custom action server,
                       I've added the functionality that checks if 'J' character is set in _MSI_TEST
                       env. var. and if so, and the build is debug, the APIs are remoted.

00-04-28  dkays        Initial prefix bug fixes.

00-04-27  bench        Bug 10878: fixed misuse of the MsiEnumPatches api.  The bug
                       caused some patches using more than 1 set of transforms
                       (2 transforms in a set) to be ignored after first-application.
                       These patches were also ignored during uninstall and the patch
                       registration became orphaned, which prevented further installs
                       of that product (with a ERROR_INSTALL_PACKAGE_REJECTED error)
                   
00-04-22  dkays        Precompiled header for src\engine.  Currently used for the src\inc files.
                       Could be further enhanced to pull in engine header files.  Cuts about 2/3 
                       of the compile time off of the engine build.

00-04-20  chetanp      Added COM+ 2.0 support for installation/ reinstallation/ uninstallation of 
                       COM+ packages. Added indirection of key paths to COM+ components. 
                       Renamed assembly tables to MsiAssembly and MsiAssemblyName. Works with 
                       fusion.dll version 5.60.2208.0.

00-04-20  dkays        Changed version.h to pick up nt build number for minor version number.
                       Files msiver.h and vertmpl.txt removed, verdate.h is no longer generated.                    

00-04-20  eugend       Fixed bug 10502, 10503 & 10504: [Un]PublishComponent, [Un]PublishFeature
                       and PublishProduct actions have been modified as to handle 64-bit
                       components properly.

00-04-17  cgouge       Bug 10746,10747: Added Orca support for Configurable Merge Modules (both UI
                       and command line).

00-04-17  cgouge       Bug 10408: Main checkin for Configurable Merge Modules. See the dev spec
                       for details

00-04-14  cgouge       Bug 10300: reworked our impersonation/elevation system to solve several
                       problems mentioned in the bug. This includes problems with context switching
                       in client engines, mixed impersonation contexts when multiple users are
                       connected to the service simultaneously, and the addition of some additional
                       debug checks to track down mismatched impersonation calls. Note that
                       StartImpersonating and StopImpersonating are now deprecated. Use the
                       CImpersonate class instead for all new code.

00-04-13  bench        Bug 10813: fixed patching problem where a full-file patch would
                       not "take" after a binary patch was applied against the same file.
                       We now ignore patches that are older than the current full-file,
                       using the sequence numbers from the File and Patch tables to make
                       this determination.

00-04-13  bench        Bugs 10776, 10784: updated mspatcha.dll in the 1.2
                       redistributable to version 1.96. This new version can
                       accept new types of patches, so this build now accepts
                       .msps with engine type "2", which would be used to indicate
                       .msps that use the new patches.

00-04-11  eugend       Fixed bug 10500 & 10501: RegisterUser and RegisterProduct action have
                       been modified as to handle 64-bit components properly.

00-04-11  eugend       Fixed bug 10686: If the OS >= W2K, the OS' memory allocator is used
                       instead of Office's.

00-04-11  eugend       Fixed bug 10832: 64-bit Darwin is able now to handle cabinets stored as
                       streams in the package.

00-04-04  cnapier      Fixed bug 10819.  Removed build spooge from checked build.
                       If an install, uninstall, etc. is successful and no logging policy is set
                       and logging isn't enabled, then there should be no output to the debugger
                       or to debugmon.  The requisite policy setting is the DEBUG policy in HKLM.
                       Set to 1 to turn on.

00-04-03  bench        Fixed bug 9987: both 32-bit and 64-bit builds use the latest fdi.h, which
                       allows the 32-bit build to now handle file-uncompression on Win64 correctly.

-----------------------------
     Release 1.1.1529
-----------------------------

00-03-28  cnapier      Fixed bug 8801.  RFS features are now patched
                       correctly so that 2 uninstalls are not required.  RFS is
                       not available in the UI for a feature with patched or
                       compressed components.

00-03-28  cnapier      Fixed bug 10703.  Localization.  Checked in THA
                       Millennium localization drop.

00-03-28  cnapier      Fixed bug 10703.  Localization.  Checked in
                       Vietnamese drop of Millennium localization from Redmond.

00-03-27  mattwe       10598: updated autoexec.bat processing to accept 
                       lines beginning with @, and to concatenate 
                       appending/pre-pending variables with %variable%
                       to avoid clobbering existing values.

00-03-23  cnapier      Fixed bug 10703.  6 more Ireland languages checked
                       in. CAT, EUQ, HRV, ROM, SKY, SLV.
                       

00-03-23  eugend       I've modified the build process as to build
                       Profile[W] binaries that work with IceCAP 4.2  So far they
                       were built for IceCAP 3.6.  The affected files are:
                       - <darwin root>\Tools\Inc\ICECAP.H - new file 
                       - <darwin root>\Tools\Bin\X86\MSVCRT.DLL - replaced 
                       - <darwin root>\Tools\Lib\X86\MSVCRT.LIB - replaced 
                       - <darwin root>\Tools\Lib\X86\ICECAP.LIB - new file 
                       - <darwin root>\Src\MAKEFILE - modified 
                       - <darwin root>\Src\Inc\COMMON.H - modified
                       

00-03-22  cnapier      Fixed bug 10703.  Localization.  Checked in fix to
                       mislocalization of RegisterProgIdInfo in ESN
                       ActionText table.

00-03-22  eugend       Fixed bugs # 10496, 10497, 10498 and 10499:
                       RegisterClassInfo, RegisterExtensionInfo, RegisterProgIdInfo
                       and RegisterMIMEInfo actions had been modified as to
                       handle registrations for 64-bit components.

00-03-22  mattwe       Bug 10531: Moved IPROPNAME_CUSTOMACTIONDATA into msidefs.h
                       from msiquery.cpp and updated custom action 
                       samples in src\samples to use it.

-----------------------------
     Release 1.1.1522  
-----------------------------

00-03-21  cnapier      Fixed bug 10734.  Handler.  If in reduced or full UI
                       mode but no dialogs are up, the handler returns the
                       parent window as specified by the MsiSetInternalUI
                       call.  (Initially, the value is 0 for desktop).

00-03-21  cnapier      Fixed bug 10703.  Localization.  Millennium
                       localization drop of 16 Ireland languages (CSY, DAN, ELL,
                       ESN, FIN, FRA, HUN, ITA, NLD, NOR, PLK, PTB, PTG, RUS,
                       SVE, TRK) 

00-03-21  bench        Fixed bug 10661: we no longer require a reboot to clean up
                       our files (.msi, .mst, .msp, icons) after an uninstall.
                       Our sequence of steps was juggled to attempt the deletion
                       of these files after we have let them go.  This was a problem
                       on Millennium because the System Restore feature doesn't work
                       when there are pending delete/rename-after-reboot operations.

00-03-17  cnapier      Fixed bug 10256 (forgot to check in to Whistler). 
                       Fixed the formatting issues in the
                                              sample source code and made
                       the MSI API calls use
                                              explicit W versions.

-----------------------------
     Release 1.1.1515
-----------------------------

00-03-14  eugend       Fixed bug # 10505: BindImage action had been
                       modified for 64-bit NT.

00-03-13  cnapier      Fixed bugs 10254, 10713.  Handler.  Static text
                       controls with dynamic properties as their text are always
                       re-fitted on paint.  No more FormatText calls on
                       errors filterd by the handler's message handler.  These
                       errors have already been formatted prior to sending
                       them to the handler.

00-03-13  cnapier      Fixed bug 10256.  Fixed the formatting issues in the
                       sample source code and made the MSI API calls use
                       explicit W versions.

00-03-10  cnapier      Fixed bug 10698 (again.) This time, the problem was
                       in the ICE cub files.  Output buffers cannot be NULL.
                       Affected function call was MsiSummaryInfoGetProperty
                       used by ICEs 35, 39, 45, 66, and 73.

00-03-10  cnapier      Fixed bug 10717.  Changed BugBug comment in
                       CActionThreadData::RunThread() to plain comment (must support
                       backward compatibility).

00-03-10  cnapier      Fixed bug 10698.  MsiDatabaseIsTablePersistent idl
                       definition fixed to be [in, unique, string]
                       (originally was [in]).  Additionally, all [in, string]
                       references were changed to be [in, unique, string].  Now
                       MsiDatabaseIsTablePersistent is remoted correctly.
                       

00-03-09  bench        Fixed bug 10574 (again): new fix addresses some
                       security problems experienced by non-admin users, and
                       handles multiple patches to the same file.

00-03-09  eugend       Fixed bug # 10664: MsiRegCreateKeyEx function now
                       creates the right key, so that RegOpenKeyEx will be
                       able to open it.

-----------------------------
     Release 1.1.1508
-----------------------------

00-03-07  cnapier      Localization.  First drop of Millennium localization
                       pass checked in.  Redmond-based languages -- ARA,
                       CHS, CHT, DEU, HEB, JPN, and KOR. This includes updates
                       to current strings plus InstallSFPCatalog,
                       RegisterProgIdInfo, SR error messages (Installed, Configured,
                       Removed).

00-03-06  cnapier      Fixed bug 10640.  Removed fDBCS = fFalse as default
                       argument for AllocateString.  Fixed all instances of
                       function calls to AllocateString.  If in doubt, we
                       default to using fDBCS=fTrue to guarantee that we
                       handle DBCS characters appropriately.  This means we have
                       a perf hit on ANSI (separate bug opened on this).  On
                       UNICODE, the fDBCS argument is ignored.

-----------------------------
     Release 1.1.1501
-----------------------------

00-02-29  eugend       Fixed bug # 10663: On Millenium Darwin is no longer
                       recording the restore points if it is running in
                       FASTOEM mode.

00-02-29  eugend       Fixed bug # 10416: WriteRegistryValues and
                       RemoveRegistryValues actions had been modified as to work
                       properly on 64-bit OS-es.

00-02-28  cnapier      Fixed bug 10667.  Validation.  ICE76 -- new ICE to
                       validate that files with SFP catalogs are not listed
                       in the BindImage table.  This ICE is in the full and
                       merge module validation suites.
                       

00-02-25  eugend       Fixed bug # 10652: from now on, whenever a product
                       changes state from advertised into installed, the
                       string "Configured XYZ" will be recorded in PCHealth's
                       UI, instead of "Installed XZY".

00-02-24  cnapier      Fixed bug 9843.  It is now possible to query the
                       _Streams and _Storages tables multiple times (and across
                       threads).  Originally if you wanted to views on the
                       _Streams table, you had to open view, close view,
                       open view, close view.  It's now possible to open view,
                       open view, close view, close view.


00-02-23  bench        Fixed bug 10574: to handle SFP protected files, when
                       copying a file then patching it, we now copy that
                       file to an intermediate location, then patch the file
                       and copy it back to the original location.  This
                       ensures that the first and only time the original file is
                       overwritten, it is done so with a fully updated file,
                       and not an intermediate, unpatched file.

-----------------------------
     Release 1.1.1423
-----------------------------

00-02-22  bench        Fixed bug 10618: swapped the order of the PatchFiles
                       and DuplicateFiles actions in the recommended
                       sequence in our SDK .msi files.  PatchFiles should come
                       first, but wasn't in the previous recommended sequence.

00-02-21  mattwe       bug 10241. The CSIDPointer class needed its default
                       copy protected, and a new constructor for SID* to
                       avoid temporary object creation that might over-free
                       a contained SID.

00-02-18  cnapier      Fixed bug 10397.  An immediate custom action can now
                       call MsiDoAction or DoAction on a custom action that
                       is in the same binary stream as it is.

00-02-18  cnapier      Fixed bug 10437.  Evalcom.msm and Mergemod.msm now
                       pass the Merge Module validation suite as best they
                       can.  Remaining problem is due to bug #10626 scheduled
                       to be fixed later.

00-02-18  cnapier      Fixed bug 10252.  Updated msitool.hlp to include
                       msizap in the overview and remove the Spy Automation
                       interface link from the overview.

00-02-17  cnapier      Fixed bug 10389.  Added new SFPCatalog Cost Adjuster
                       for costing SFPCatalogs.  This cost adjuster creates
                       a "dummy" shared component to represent all catalog
                       file cost.

00-02-16  cgouge       Bug 10612. Memory allocator was very confused
                       because the page size on Win64 is 8K and it was expecting
                       standard 4K x86 pages.

00-02-16  cgouge       Bug 10566. Fixed a problem in source resolution
                       where the service was caching volume labels across calls
                       to the source dialog in the client. This resulted in
                       the service incorrectly registering the last used
                       source disk id and thus rejecting the disk even if it is
                       correct.

00-02-15  eugend       Fixed bug # 10415: The new System64Folder,
                       ProgramFiles64Folder, CommonFiles64Folder and WindowsNT64
                       properties get created when Darwin is running on 64-bit
                       NT and on that platform System16Folder does not exist
                       anymore.

00-02-11  eugend       Fixed bug # 10558: CBasicUI::CheckDialog will not
                       use now random values for iDialogLeft, iDialogTop,
                       iDialogWidth & iDialogHeight.

00-02-10  cgouge       Bug 10236 - added support for LFN extraction to
                       mergemod. By requesting the MsmMerge2 interface you can
                       call ExtractFilesEx and request short or long
                       filenames. This is the first part of the new mergemod
                       interface and required stubbing out the other new functions
                       in an attempt to avoid multiple changes to the
                       inteface.

00-02-10  cnapier      Fixed bug 10068.  When a bogus path is provided to a
                       transform, we now return
                       ERROR_INSTALL_TRANSFORM_FAILURE instead of ERROR_FILE_NOT_FOUND.  The transform
                       failure message includes directions to verify the
                       path to the transform.

00-02-10  cgouge       Bug 9808 - The limit of 83 media entries in an
                       install has been eliminated via the addition of a new
                       opcode (ixoSourceListAppend) that tacks additional
                       sources (of any type) on to the end of the existing source
                       list. The opcode can be used for either packages or
                       patches

00-02-10  cgouge       Bug 10537 (again). Feature reference in new Assembly
                       table also incleased to length 38.

00-02-10  cnapier      Bug 10163.  ICE75 -- verfies that Custom Actions
                       referencing the File table are sequenced after
                       CostFinalize.

00-02-10  cnapier      Fixed bugs 10198 and 10184.  Reports to the debugger
                       (in the service) are only sent if the debug policy
                       is set.  Fixed the problem in SetInstallerACLs when
                       deleting a key caused the service to not start.

00-02-09  bench        Fixed bug 10596: MsiMsp issues: 1) fixed bug with
                       quoted paths passed to the exe, 2) improved failure
                       message to be a little more friendly, 3) remove the -c
                       option, which was required for success in most cases,
                       with the -k option, which as the opposite effect.

00-02-09  eugend       Fixed bug # 10599: Millenium's System Restore
                       strings got more concise now.

00-02-09  cgouge       Bug 10537 - updated Feature.Feature and all Feature_
                       columns to 38 characters.

00-02-09  mattwe       Bug 10528 - InstallSFPCatalogFile action now only
                       can run on Win9X systems beginning with Millennium (4.90)

00-02-08  mattwe       Bug 10441: Fixed assert when installing invalid catalog
                       files

00-02-07  eugend       Fixed bug # 10545: Ship builds of Darwin record now
                       PCHealth strings correctly.

-----------------------------
     Release 1.1.1406
-----------------------------

00-02-04  cnapier      Fixed bug 10436.  ORCA.  Made the combo boxes on the
                       Validation dialogs have the CBS_AUTOHSCROLL
                       attribute to allow entering of text longer than combobox
                       boundary.

00-02-04  cnapier      Fixed bug 10256.  SDK.  Created custom action
                       samples for the SDK (Sample 1 is launching an installed
                       file at the end of the install.  Sample 2 is creating
                       user accounts on the local machine using a Custom table
                       and deferred and rollback custom actions).  Source
                       files are provided in the SDK under Samples. 
                       Documentation will be added to msi.chm explaining use and
                       authoring.  Relevant files are tutorial.cpp,
                       process.cpp, remove.cpp, and create.cpp in %DARWIN%\src\samples.

00-02-03  chetanp      bug 10514 - preliminary COM+ support added in darwin
                       1.5  The build supports installation of fusion
                       assemblies to the assembly cache via the new fusion apis.
                       A sample package containing a multimod assembly is
                       now built and released (Asm.msi) The table schema that
                       is supported is in the dev specs in
                       http://dartools/dardev/specs/complusasm.doc . Note that in this
                       release we dont make use of the AssemblyName table, which
                       can be omitted.This release does not have support for
                       install on demand/ reinstall/ uninstall of COM+
                       components.You will run into a quaint debug error if you
                       attempt to run a COM+ package w/o the COM+ URT
                       installed in your system directory (go to http://URT).I have
                       tested installation of uncabbed single mod
                       assemblies, uncabbed multi mod assemblies and cabbed single
                       mod assemblies. The fusion dll against which the code
                       is compiled and works is 5.50.4026.2200
                       

00-02-03  eugend       Fixed bug 9985: Fixed platfrom validation as to
                       handle the 64 bit processors as well and relaxed
                       validation on Alpha.

00-02-01  eugend       Fixed bug # 10527: more information about
                       SRSetRestorePoint API gets written into the log now.

00-01-31  cgouge       Bug 10124,10204,etc. This is the first checkin for
                       the 64bit custom action support in Darwin 1.5. This
                       initial checkin consits of most of the core
                       infrastructure code necessary to support multiple custom action
                       servers and servers that run client-side actions.

                       Specifically:                       
                       - Implementation of the CustomActionManager class
                         which creates, manages, and destroys up to 4 custom
                         action servers and their associated interfaces. This
                         object lives in the engine of the client and the config
                         manager of the service.
                       - Modification to the IMsiServer interface to
                         support client side requests for a custom action
                         server.
                       - Modifications to the registration system to provide
                         enhanced robustness and security when registering
                         multiple custom action servers.
                       - Providing a back up array-based system for
                         Thread-Id impersonation when running on the client side with
                         no available TLS slots
                       - Additional context information for RemoteAPI calls
                         to enable security checking when sharing an API
                         handler across multiple servers.
                       - Servers now watch for their clients to die, even
                         while idle (no active actions). Thus client processes
                         can die without leaving behind copies of msiexec.
                       - Client, Server and Service now use the GIT for
                         interface management. We now require NT4 SP3+ for
                         unicode builds.
                       - Code to take an arbitrary PE format file and
                         determine if it is 64 or 32 bit.
                       - Explicit registration of msiexec paths at
                         /regserver time so 32bit processes can find the secure copy of
                         the 64bit msiexec and vice-versa
                       - Addition of the msidbCustomAction64BitScript
                         attribute.
                       
                       Still to come:
                       - Security work for multiple simultaneous client
                         calls (waiting on 10300)
                       - full 64-bit functionality for DLLs and CAs (waiting
                         on the OS)
                       - perf optimizations (waiting on some spare time)
                       - Moving COM impersonation to the interface level
                         (waiting to see if needed)
                       
                       New client DLLs will NOT work with the new service.
                       The new service should work with old client DLLs.
                       The service must be registered for client custom
                       actions to run.

00-01-28  eugend       Fixed bug # 10530: The call to System Restore API
                       now happens before we lock the server (write the
                       InProgress) key.

00-01-27  cnapier      Fixed bug 10319.  Makefile.  Added dependencies for
                       orca and msival2 cabinets so they could be built. 
                       Note, we should probably build these in a post build
                       process since they have dependencies on files built in
                       different flavors.

00-01-24  chetanp      bug 10347 - fixed infinite recursion caused when
                       installing fonts with badly formed version string

00-01-24  cnapier      Fixed bug #10448.  ActionText.Description,
                       ActionText.Template, and Error.Message columns are now of
                       length 0 (infinite) to make localization easier (since
                       many languages have much longer strings than their
                       english counterparts).

00-01-24  bench        Fixed bug 10432: the DuplicateFile.DestFolder column
                       was the incorrect size for an identifier column.

00-01-21  chetanp      fixed bug 10444. Prevent the IsolateComponents
                       action from running twice (once from the InstallUISequence
                       and once from the InstallExecuteSequence) in the
                       same engine (on Win9x).
                       

00-01-20  cnapier      Fixed bug 10400.  SDK.  Made it possible for
                       uisample.msi, schema.msi, and sequence.msi to be merged
                       together without merge conflicts.  Removed reference to
                       dialogs from sequence.msi (other than the typical
                       dialogs denoted by negative sequence numbers).
                       

00-01-19  mattwe       Bug 10398: Added validator for InstallSFPCatalogFile
                       to ICE26 and ICE27

00-01-19  bench        Fixed bug 10394: fixed case statement that didn't
                       handle the imsAbort return from Message() correctly,
                       causing the installer to behave as if the install
                       failed rather than being cancelled.

00-01-19  bench        Fixed bug 10423: added INSTALLPROPERTY_PACKAGENAME
                       which was mysteriously absent although fully supported
                       as an argument to MsiGetProductInfo.

00-01-19  eugend       Fixed bug # 10402: in addition to reporting the
                       facename and charset of the fonts it creates, Darwin now
                       also reports the height.  It does this also in
                       CMsiServices::SetPlatformProperties when it determines the
                       size of the dialog unit.

00-01-18  cnapier      Fixed bug 9670.  Removed the unsupported nested
                       install custom actions (type 151 and 55) from Testdb.

00-01-18  cnapier      Fixed bug 9292.  Property dump messages are now also
                       sent to the External UI handler if present and
                       filtering for the Info messages.

00-01-18  eugend       Fixed bug # 10282: from now on the presence of
                       checkboxes on dialogs will not draw the focus to get set
                       to them.

00-01-18  cgouge       Bug 10350. Added additional logging to source
                       resolution to assist in detecting source problems.

00-01-18  cgouge       Bug 9970. Added null terminator to command line
                       argument array to avoid potential crash in msiexec when
                       given an invalid argument.

00-01-18  bench        Fixed bug 10196: under certain conditions when
                       creating a randomly-named log file, the installer would
                       enter a very long loop creating a ton of 0-byte log
                       files.  This was caused by a bug in the code that
                       generates the temporary log file names.

00-01-17  cnapier      Fixed bug 10252.  Updated msitool.hlp for all tools
                       (made it current).

00-01-17  cnapier      Fixed bug 10377.  Validation. Created a new class
                       CManageTable for ICEs to use for managing hold counts
                       on tables.  Guarantees that if an ICE were to fail,
                       the HOLD counts that the class is responsible for are
                       FREED for that table.

00-01-17  cnapier      Fixed bug 10319.  Validation.  New ICE74.  Ensures
                       that the FASTOEM property is not authored in the
                       Property table.

00-01-17  cnapier      Fixed bug 10368.  Validation.  Fixed ICE12 to not
                       incorrectly error on Type 39 custom actions.

00-01-17  cgouge       Bug 10352. ICE61 did not handle the InclusiveMin and
                       InclusiveMax attributes correctly when validating
                       the upgrade table. 

00-01-17  cgouge       Bug 10346. Downgraded ICE61 "only older version"
                       error to a warning. This supports products replacing
                       newer versions of themselves.

00-01-17  bench        Fixed bug 10414: better verbose logging for code
                       that increments and decrements the counter signifying
                       whether Darwin will reject system shutdown requests or
                       not.

00-01-17  cgouge       Bug 10373 - typo in ICE34 error location string

00-01-17  bench        Fixed bug 10374: the MsiApplyPatch api was limiting
                       the szCommandLine argument to 1024 characters as it
                       was passing the string through a wsprintf call.  We
                       are now avoiding wsprintf, allowing to string to be of
                       unlimited length.

00-01-17  bench        Fixed bug 10287: when scheduled custom action exes
                       failed in a certain way, Darwin would attempt to
                       reboot the system.  The problem was overloaded return
                       values that weren't getting remapped correctly.  This has
                       been fixed.

00-01-14  bench        Bug 10206: created a new tool for the sdk:
                       MsiMsp.Exe.  This is a command-line tool that wraps
                       PatchWiz.Dll and is used to create patch packages (.msp files).
                        See MsiTool.Hlp for usage and other info.

00-01-14  eugend       Fixed bugs # 10317, 10318, 10320 & 10381.  All of
                       these were OEM issues.  The changes do not allow a
                       FASTOEM installation to occur in upgrade, patch,
                       maintenance and advertise mode installs, but only on first
                       runs.  UI or UI preview are not permitted either in
                       FASTOEM scenarios.  On NT only per machine installations
                       are allowed in FASTOEM mode.

00-01-14  eugend       Fixed bug # 10199: As per instructions for GHeino,
                       I've upgraded RICHED20.DLL to ver. 5.30.23.1200 and
                       USP10.DLL to ver. 1.325.2180.1.


00-01-14  bench        Fixed bug 10310: fixed a few calls to IStrCopy that
                       could have passed a null pointer.  Doing so causes a
                       crash when running under a debugger.

00-01-13  cnapier      Fixed bug 10381.  Updated MsiVal2's packagecode,
                       productcode, and productversion due to changes in
                       msival2.exe.  These changes are preparatory for the next
                       SDK (probably 1.2).

00-01-13  cnapier      Fixed bug 10395.  SDK and MsiSpy now install to
                       ProgramFilesFolder by default.
                       

00-01-13  bench        Fixed bug 10039: MsiSetPropertyW was not calling the
                       correct thread-safe routine for setting properties. 
                       Now it is.

00-01-12  cgouge       Bug 10365. Fixed a mismatched
                       Start/StopImpersonating call on a BindImage failure case that was found by
                       code audit.

00-01-12  cgouge       Bug 10349. Fixed some mismatched
                       Start/StopImpersonating calls that were causing failures in
                       GetFileChecksum. This problem would result in the impersonation
                       count becoming corrupted and further impersonation
                       calls failing.

00-01-12  eugend       Fixed bug # 10361: if rollback is disabled,
                       CMsiOpExecute::InitializeWindowsEnvironmentFiles() doesn't
                       back up AUTOEXEC.BAT anymore.

-----------------------------
     Release 1.1.1311  
-----------------------------

00-01-11  cnapier      Fixed bugs 10192 and 10253.  SDK.  Our SDK is now
                       ready for the Millennium (or next release).  All 110
                       related files have been archived.  The SDK now makes
                       use of the uisample UI.  In preparation for the next
                       SDK, the product, package, and product versions have
                       all been updated so that they will be correct when we
                       build the next SDK.  Pullsdk.bat was updated to create
                       the additional 110 directories beneath Database (for
                       schema.msi and sequence.msi) and Tools (for the 1.1
                       logo, darice, and mergemod cube files).  Furthermore,
                       the SDK has been somewhat reorganized to have a
                       separate Archive feature which then has the 100 and 110
                       subfeatures and whose installstate is initially set to
                       absent.

00-01-11  chetanp      fixed bug 10263 - we were not releasing source file
                       handle upon a file copy initialization error.

00-01-11  cnapier      Fixed bug 10281.  Removed msival2's dependency on a
                       hard-wired product code.  Instead, MsiVal2 determines
                       its product code at runtime (via MsiGetProductCode)
                       using the component code of its main exe component. 
                       This component code will typically not change whereas
                       the productcode typically changes from one SDK
                       release to the next.  The only potential gotcha that is
                       handled in the code is that the main exe component is
                       conditionalized on the OS platform (Win9X or WinNT).

00-01-11  cnapier      Fixed bug 10309.  All localized ActionText and Error
                       tables will now pass validation when imported into
                       an already valid database.  Also created the
                       validt.bat batch file in %DARWIN%\src\tools to be run PRIOR to
                       check-in of the localized files.

00-01-11  bench        Fixed bug 10366: fixed logic that caused an error
                       when applying a product-code-changing patch to a
                       product with an embedded cabinet.  The error was caused
                       when we thought the cached msi we are running from
                       should have contained the cabinet, which cached msis do
                       not.

00-01-10  mattwe       Fixed bug 9928:  SFP catalogs can now be installed
                       on Millennium platforms.
                       Added tables: SFPCatalog and FileSFPCatalog
                       Added action: InstallSFPCatalog
                       spec: http://dartools/dardev/specs/SFP-Millennium.htm

00-01-07  cnapier      Fixed bug 10191.  Incorrect cost calculation during
                       Maintenance Mode when toggling the install state of
                       an already local feature in the Selection Tree.  Also
                       added new controls to testdb's SelectionDialog to aid
                       in testing of this bug fix.  During the toggling of
                       a feature's state, three controls keep track of the
                       PrimaryVolume* properties.

00-01-07  cnapier      Fixed bug 10298.  Removed the easter egg from
                       MsiSpy.

00-01-07  eugend       I've checked in the code that implements Darwin's
                       interactions with Windows Millenium's PC Health
                       feature.  Bug # 9929 was tracking this.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\doc\relnot01.txt ===
Darwin Setup Development Notes for Testing Releases

01-09-14  cnapier      WinSE Bug 21522 (Bug 397957): Wireless QFE. Run from a temp copy of a patch to handle
                       media/network issues

01-09-14  cnapier      WinSE Bug 21523 (Bug 452314): Wireless QFE. Run from a temp copy of a transform to handle
                       network issues

01-08-09  rahulth      Bug 453276: Windows Installer crashes when applying an Office patch.
                       msiregmv.exe strips the last null terminator from REG_MULTI_SZ values during
                       migration. To fix this, msi was made more robust by padding any read REG_MULTI_SZ
                       values with 2 terminating nulls to be safe.

01-08-08  chetanp      Bug 452635: MsiProvideAssembly sometimes returns ERROR_MORE_DATA even if no buffer is passed in

01-08-08  cgouge       Bug 452101: Eliminate random failure in action APIs where generated action cookie has 0
                       in the first byte.

01-07-31  chetanp      Bug 447897: MsiCollectUserInfo broken on Win9x

01-08-01  cgouge       Bug 437248: MSI will no longer implicitly clean up the HKLM\RunOnce key if a component 
                       removes the last value.

01-07-27  cnapier      Bug 446200: MsiAdvertiseScript fails on Win2K ADE due to RunningAsLocalSystem check.
		       RunningAsLocalSystem check is not performed when a registry handle is provided to
                       perform the fake advertise.

01-07-27  rahulth      Bug 442681 : Instmsi fails on system with Intel 82815 Graphics controller.
                       This was caused by igfxtray.exe and hkcmd.exe holding on to handles to the MSI
                       service. Solution was to nuke these processes.

01-07-24  cnapier      Build 250 of msi.chm, msi.chi

01-07-24  cnapier      Bug 441847 - Allow use of /L+, /L!, /L+!, /L!+ option for logging from command line.
                       This was supported in 1.0/1.1 Darwin.

01-07-20  weiruc       Bug 440303 - Validation: AdvtExecuteSequence table must contain PublishFeatures
		       and PublishProduct actions
01-07-20  cgouge       Bugs 438366, 438408, 438723. Remove memory leak, crash, UI issue from Orca.

01-07-20  cnapier      Bug 440505: MsiZap doesn't clean up HKCU advertise info on Win9X

01-07-19  rahulth      Fixed the following bugs:
                       Bug 433271 : setup.exe and msistuff.exe source should be published to PSDK.
                       Bug 438445 : New file schema.log should be listed in Readme.txt file.
                       Also made the following SDK changes:
                       - Removed Beta/RC1/RC2 references.
                       - Updated product and package codes for various released MSIs for the SDK RTM release.

01-07-18  cnapier      Bug 436419 - fix Patch management code to handle cases where transforms have updates
                       for missing rows (like BizTalk SP1 patch when applied to standard edition)

01-07-18  chetanp      Bug 438764 - MsiGetComponentPAthA fns failing on assembly components

01-07-17  weiruc       Fixed bug 437312 - validation should warn about missing UpgradeCode.
01-07-17  rahulth      Fixed the following issues in the internet download sample setup.exe.
                       Bug 217629 : Handle minor upgrades and patches.
                       Bug 402643 : Check signature on Instmsi.exe after it is downloaded.
                       Bug 185987 : Add the ability to perform admin install using downloaded setup.exe

01-07-16  chetanp      Bug 435087 - add verbose logging to indicate exact assembly installation error

01-07-13  rahulth      Bug 432407 : 32-bit clients on IA64 looked for files in the wrong
                       folder during costfinalize because the translation of paths was not
                       being done, i.e. system32 was not getting translated to syswow64
                       in certain code paths.

01-07-11  cgouge       Bug 431025: Transitive components added by a patch but conditionalized out now have
                       request states of local with action states NULL to ensure that they are registered
                       for the product (to prevent later ops from dropping the feature to advertise).

01-07-06  cgouge       146505 - add row dialog in orca now supports larger number of columns in the table.

01-07-06  cgouge       422160 Orca validation pane support

01-07-05  cgouge       54019 - added manifest and SXS support to mergemod

01-07-05  cgouge       427458 added scroll bar to cell error dialog description field.

01-07-05  cgouge       431025 minor header file tweak to mergemod.h

01-07-05  rahulth      416074 : Prevent explorer AV while running instmsi.exe on Win2K with buggy IE5.5 mshtml.dll
                       424877 : Prevent windows installer hangs in SHChangeNotify.

01-07-03  cgouge       419705 - external UI can now resolve source in quiet mode by using the new 
                       INSTALLUILEVEL_SOURCERESONLY flag in MsiSetInternalUI

01-07-02  eugend       Bug 332443 - revisited: on 64bit machines, MsiZap lowers SharedDll counts
                       when info about a specific product is removed.
                       Bug 287593: MsiZap deletes now cached databases, patches & transforms
                       that are orphaned = not referenced in the registry.

01-06-30  mattwe       Bug 146598: sdk command line tools don't fail when run from directories
                       containing hyphens

01-06-27  cnapier      Bug 399793. Added wilogutl.exe (from nmanis in PSS) to MSI SDK. This
                       is a logfile viewer utility to help "decrypt" WI logfiles.

01-06-26  cnapier      Bug 341831, 355521, 355522, 355530. Various PatchWiz bug fixes.

01-06-22  cgouge       Bug 413579, 413598. Two stress failures in WBEM stress, optimized CApiConvertString usage.

01-06-22  cnapier      Bug 417993. Fix localization problem in JPN language (msijpn.res)

01-06-22  cnapier      Bug 418074. Do not clear InstallSource property when applying a patch.

01-06-14  weiruc       new ICE94 and ICE95 to fix bugs 146359 and 194100. Updated ICE68 to fix bug 199901

01-06-06  chetanp      Bug 409400 - User can view and delete folders on the system without logging on

01-06-15  cnapier      Bug 302199. Unfriendly error message from web download bootstrap when MsiInstallProduct
                       returns failure -- fix to use error message in msi.dll

01-06-15  cnapier      Bug 417540. Instmsi.msi is not stamped with all of the languages that it supports in the
                       template summary information stream. Fixed by adding msiinfo.exe to %sdxroot%\tools\x86.

01-06-14  weiruc       bug 146530, 257560, 258284, 276240

01-05-30  chetanp      Bug 415414 MSI 2.0 fails on Win9X - fix use of lstrcmpw on Win9x

01-06-14  mattwe       Bug 414174: Network installs from cabinets get clobbered when 
                       overwriting files on NTFS drives

01-06-12  eugend       Bug 412195: Maintenance mode runs now properly with full UI for
                       Localization Studio.

01-06-12  cgouge       Bug 413105: Crash in MsiProvideComponentW when passing NULL as lpPathBuf and pcchPathBuf.

01-06-12  mattwe       Bug 393428: Prevent custom actions from allocating gobs of memory when passing NULL as buffer
                       but large size value.

01-06-09  cnapier      Bug 410205: ApplyAppcompatTransforms handles product key changes (from either multi-language transform
                       or major update patch) for the ApplyPoint=2 call.

01-06-07  weiruc       bug 146293, 146367, 146385 checked in.	

01-06-07  cgouge       Bug 407990: reduce CAPIConvertString default buffer size to reduce stack usage in
                       common APIs which were causing faults. 

01-06-07  cnapier      Bugs 404595, 404597. Complete the patchwiz.dll error list and make sure that patchwiz errors
                       are written to the log file.

01-06-05  eugend       Bug 332443 revisited: I've fixed the Win64 problem where 32-bit MsiZap.exe was not
                       able to remove redirected 64-bit registry keys.

01-05-30  chetanp      Bug 399165: enable installations via ui custom action

01-06-01  cnapier      Bug 406294: Quiet mode always used when making AppHelp calls in the service.

01-06-01  cgouge       Bug 405016. Enabled appcompat shimming of self-reg.

01-05-31  cnapier      Bug 404892: AppHelp message shown twice when running install with full or reduced UI. AppHelp message
                       is now only shown once (and on the client)

01-05-30  chetanp      Bug 389384: mscoree.dll issue during .net bootstrapping

01-05-30  cgouge       Bug 410505. MsiViewModify with VALIDATE flags now sets error character array based on column in
                       view, not column in table. This prevents MsiViewGetError from trying to dereference column 
                       names with indexes beyond the view size, which crashed.

01-05-30  cgouge       Bug: 403099 - transform display issues in orca 

01-05-30  cnapier      Build 244 of msi.chm, msi.chi

01-05-30  cnapier      Bug 404910: PatchWiz no longer uses MessageBox in CHK builds to enable automation.  Instead
                       it uses OutputDebugString

01-05-30  cnapier      Bug 404599: PatchWiz + msimsp.exe can concatenate log files.

01-05-30  cnapier      Bug 153689: PatchWiz, DiskId, FileSequenceStart, and MediaSrcProp are no longer required in
                       the ImageFamilies table (i.e. can be NULL) when creating a patch that targets Installer 2.0
                       or greater

01-05-25  eugend       Bug 332443: MsiZap is now Win64 aware, i.e. all builds work properly on Win64
                       and lowers SharedDLL refcounts in both 64 and 32-bit hives.

01-05-24  rahulth      Changed the name of the .pdb for the downlevel msi.dll from msi.pdb to msi_l.pdb. This
                       allows the postbuild script for debuggers to pick up the pdb for indexing and have a signature
                       that is different from that of the symbol file for the whistler version of msi.dll (see 
                       change 57919 in the root depot for the postbuild change for picking up the downlevel pdb
                       for indexing the symbols).

01-05-24  rahulth      Bug 300071: Prevent Shared dll ref. count from getting decremented twice on x86.

01-05-24  chetanp      Bug 400332: Handle various cases of the "Name" valuename for Assembly names in MsiAssemblyName table

01-05-23  cnapier      Build 243 of msi.chm, msi.chi

01-05-23  cnapier      Bug 340023: PatchWiz returns ERROR_PCW_TARGET_IMAGE_NAME_TOO_LONG instead of ERROR_PCW_BAD_TARGET_IMAGE_NAME
                       when the TargetImages.Target column value exceeds the maximum allowed length.

01-05-23  cgouge       Bug: 146373 - mergemod now has support for merging modules into databases where the schemas
                       are compatible but not exactly the same. 

01-05-22  cnapier      Integrate Lab04 into MsiDev private branch.

01-05-17  mattwe       Bug 396116: Fixed token privilege leak when creating folders with lockpermissions

01-05-17  cgouge       Bug 385954. Orca can now view 2.0 patches by creating the correct patch
                       table schema if it doesn't already exist.

01-05-17  cnapier      Bug 268351: Increase subfolder buffer in PatchWiz to prevent stack corruption

01-05-17  cnapier      Bug 165265: Improved compressed image error in PatchWiz

01-05-17  cnapier      Bug 204707: Improved patchwiz performance by using a patch cache

01-05-17  cnapier      Bug 159892: WiFilVer.vbs supports MsiFileHash functionality.

01-05-17  cnapier      Bug 313094: MsiZap removes cached patches and cleans up patch data

01-05-17  cnapier      Bug 355848: MsiZap misses some things if package is installed by non-admin user

01-05-17  cnapier      Bug 396491: 2330 debug error when uninstalling with a folder (created by CreateFolder table)
                       help open in cmd prompt or explorer

01-05-16  cgouge       Bug 396511: remove crash when logging that cached database can't be deleted.

01-05-16  eugend       Bug 395227: Fixed cabinet extraction code as not to fail when it extracts
                       assemblies on Win64 machines.

01-05-15  cnapier      Bug 150879. Fixed Simple.msi's DiskPrompt property.

01-05-15  cnapier      Bug 169843: Fixed Testdb.msi's VBScript custom action (incorrectly referenced Application when it should
                       have referenced Installer)

01-05-14  cgouge       Bug 389812. problems with extra columns in orca when a transform is being edited.

01-05-14  mattwe       Bug 393692: Fixed memcmp after memory freed - really old bug in LookupSid for LockPermissions

01-05-13  cgouge       Bug 357608. orca now HOLDs tables in memory to prevent OLE failures on repeated row adds.

01-05-11  cnapier      Bug 316651: Web download bootstrap asks user if they want to upgrade the Installer version prior to
                       running instmsi

01-05-11  cnapier      Bug 323663: Fixed failure to create patch with patchwiz when .PCP file was read-only

01-05-11  cnapier      Bug 381067: Fixed MsiFiler to update file hash for unversioned files with companion file versions.

01-05-11  cnapier      Bug 388207: Updated CHT error strings.

01-05-11  cnapier      Bug 388944: On the fly new schema patch table only created when a patch will be applied (instead of
                       all of the time)

01-05-11  cnapier      Bug 389496: Updated CAT action text and error strings.

01-05-11  cnapier      Bug 390641: We now handle bogus minor update multi-target patches without product version validation

01-05-11  cnapier      Bug 390984: We output the HRESULT from the failed IComAdminCatalog::InstallApplication call in
                       RegisterComPlus action to the log file via an info message.

01-05-11  cnapier      Bug 391096: Removed private and unused properties from wilstprd.vbs

01-05-11  cnapier      Bug 392192: Fixed msizap to not delete files and folders when adjusting ACLs

01-05-08  eugend       Bug 386114: Calling MsiAdvertiseScript from a 32-bit service on 64-bit machine doesn't fail anymore.

01-05-11  chetanp      Bug 385303: APPCOMPAT bug regarding winway.fon and crash in version.dll

01-05-07  cgouge       Bug 387418. timing issue with non-admin deferred elevated custom action servers being 
                       denied access to the synchronization event.

01-05-04  mattwe       Bug 356798. Security descriptors from existing files are now correctly applied when overwritten from cabinets.

01-05-04  chetanp      Bug 370483: remove attempt to fix start menu mess up on WINME korean when running darwin packages

01-05-04  cgouge       Bug 385955. Watch log dialog in Orca truncates text at a certain length.

01-05-04  cgouge       Bug 385601. Fixed Orca hang when extracting from mergemod CABs that span a CAB set.

01-05-04  cnapier      Bug 381320: Fixed patchwiz to create patches and fixed the Installer to handle old schema and new schema
                       Patch tables.  Because of the FTK fix, the change in the nullability of the Header column causes problems
                       when applying a transform if the old schema (where the column can't be null) is used first.  This is because
                       a patch with the FTK limit issue has this column as null and uses the StreamRef_ column to reference the
                       MsiPatchHeaders table.  To fix this, the Patch table is dropped and created automatically with the new
                       schema before application of any patches or transforms.  This guarantees that the new schema always wins which
                       is compatible with old and new patches.

01-05-04  cnapier      Bug 155046: Remaining languages -- EUQ, SLV, SKY, HRV, ROM, and CAT.  Note that CAT's Error table is not
                       completely localized.

01-05-04  rahulth      Bug 376181 : Grabbed a new version (5.0.2147.1) of cabinet.dll for downlevel platforms
                       (NT4 and Win9X). This not only ensures version parity for cabinet.dll with newer platforms
                       like Win2K but also fixes installation problems caused by the old cabinet.dll's inability
                       to handle varying sizes in the reserved fields of the cabs.

01-05-04  rahulth      Bug 383958 : Instmsi no longer pops up any message boxes if it is invoked in quiet mode.
                       (caveat: unicode instmsi on Win95 Gold will cause the system to pop up a message box
                                about setupapi.dll missing.)

01-05-02  chetanp      Bug 338432: Fixed feature caching logic to dump stale caching across installations

01-05-01  cnapier      Bug 363989: AppCompat fix for minor update multi-target patches with bogus validation flags (product version
		       check is specified but no corresponding comparison flag is specified).  The fix is similar to our fix for small
                       update patches -- we'll apply the first set of transforms  and then skip remaining transforms. Also fixed patchwiz
                       to no longer create patches that specify these bogus validation flags.

01-05-01  chetanp      Bug 370483: Fix start menu mess up on WINME korean when running darwin packages

01-05-01  cnapier      Bug 155046. Drop of 29 (of 35) localized languages for Windows XP. Includes updated ActionText, Error, resource
                       files and instXXXX.msi files (for instmsi.exe language transforms).  Updated languages are: ARA, CHS, CHT, DEU,
                       HEB, JPN, KOR, THA, VIT, CSY, ELL, ITA, PTB, RUS, PTG, DAN, ESN, FIN, ENU, FRA, HUN, NLD, PLK, SVE, TRK, NOR. New
                       languages are: ETI (estonian), LTH (lithuanian), LVI (latvian).

01-05-01  cnapier      Bug 356192. Fix msi assert msiutil.cpp -- unable to delete file due to sharing violation.  Added
                       retry loop with sleep.

01-05-01  cnapier      Bug 373864. Can now import CHT, JPN, CHS, and KOR IDT files (IDT files with DBCS char).

01-05-01  cnapier      Bug 349328. Remove obsolete ApiPatchingOption flags from template.pcp

01-05-01  cnapier      Bug 373304. Fix confirmation message in msizap to be more polite.

01-05-01  cnapier      Bug 381702. Fix buffer overrun in PatchIDToSourceProp

01-05-01  cnapier      Bug 372166: Preserve ERROR_MORE_DATA return by a custom action

01-05-01  cnapier      Bug 373210: Preserve icon specification in MsiProcessMessage, defaults only used when icon
                       is not specified

01-05-01  cnapier      Bug 373009: User cancelled install actually cancels.

01-05-01  cnapier      Build 240 of msi.chm, msi.chi

01-04-30  rahulth      Picked up a newer version of rich edit(5.30.23.1205).

01-04-30  mattwe       Bug 370215: Client side caching of database running as LocalSystem no longer
                       receives security descriptors - this matches behavior of any other user.

01-04-30  cgouge       Bug 323874: initial checkin for appcompat hook support in MSI custom actions. 

01-04-29  chetanp      Bug 368867: Help files are uninstalled with the SAPI SDK after upgrade from downlevel OS

01-04-29  chetanp      Bug 367320: On WIN9x, avoid call to IsImpersonating function

01-04-29  chetanp      Bug 343336: Buffer overflow in OpenAdvertizedSubkeyPacked

01-04-29  chetanp      Bug 367755: send message to shell to refresh when we create and delete admin tolls folder

01-04-27  mattwe       Bug 370485: Environment variables in the service are refreshed with each new install
                       _MSI_TEST test flags are also requeried.

01-04-27  cgouge       Bug 370482: deferred elevated custom action server would not launch when
                       client is on a non-console session on Win2K. 

01-04-27  chetanp      Bug 375995: Add Codebase hint for private assembly COM classic interop

01-04-27  weiruc       Validation bugs checked in in change list 29739: 146438, 289920, 290601, 304111, 320934, 353603.

01-04-27  cgouge       Bug 367251: Remove Orca text limit in editing cell.

01-04-27  cgouge       Bug 377568: remove hang when pasting row with null binary data.

01-04-27  eugend       Bug 356767: I've fixed up instances in the code where due to an incorrect value
                       returned by GetLastError() we took either incorrect decisions or we've returned
                       wrong values.

01-04-25  mattwe       Fixed RI blocker in instmsi.mak.  Make files should use "CD" not "CD /D"

01-04-24  rahulth      Fix for bug 376037 : Assert in oleaut32 about freeing unallocated memory.

01-04-18  rahulth      Fixed the following bugs:
                       360257 : Instmsi should pick up real appcompat binaries.
                       369896 : DllCache is not being updated when instmsi runs on Win2K.
                       346279 : Instmsi should run msiregmv.exe deferred but elevated.

01-04-18  mattwe       Bug 366273: Long DBCS product names on Windows Me cause crash after setting system
                       restore checkpoint.


01-04-18  eugend       Bug 357718: If we cannot retrieve CRC checksums for a file, we display now the ship
                       error that fits in that context.  Beforehand we've displayed a silly internal error.

01-04-18  cgouge       Bug 370673: No crash on multiple search dialogs in Orca

01-04-18  cnapier      Bug 349328: Removed ApiPatchingOption flags from Properties table of example.pcp file included
                       with the SDK.  This is an obsolete property.

01-04-18  cnapier      Bug 180824: Fixed msizap to include admin full control when adjusting ACLs for files and folders.
                       Formerly it would replace all ACLs with admin full control, thus ACLing out Local_System, etc.

01-04-18  cnapier      Bug 301218: Fixed msifiler.exe and wifilver.vbs to properly handle companion files. Formerly it
                       would overwrite the companion file information in the Version column of the File table.

01-04-18  cnapier      Checked in build #238 of msi.chm, msi.chi

01-04-18  cgouge       Bug 313836: Orca can now view integer columns in Hex

01-04-13  chetanp      Bug 342421: we now honour clients across assignment types (user + machine installations)
                       To do this correctly, we need to clean up HKCR information on platforms Win2k and above
                       in the scenarios where the last client for that component in a particular context is being
                       removed (last per user client going away, should take away the HKCU\S\C info, since the per machine
                       client would have written to HKLM\S\C. Hence needed to introduce 2 new iisEnum action states -
                       iisHKCRAbsent= 11 (only HKCR data to be removed), iisHKCRFileAbsent = 12 (HKCR + Files to be removed)

01-04-13  chetanp      Bug 357314: fix assert when extracting empty custom action from binary table

01-04-12  mattwe       Bug 356798: Files installed from cabinets now get permissions set with LockPermissions

01-04-12  mattwe       Bug 355997: Fixed last error clobber in lock permissions code.  Fixes error
                       message reporting when failing to look up user.

01-04-12  cnapier      Bug 367212: fixed AV in IsolateComponents action.

01-04-12  mattwe       Removed assert when System Restore is frozen - BVT fix.

01-04-12  bench        Bug 365593: fixed assert in Engine.Initialize when passed in an invalid command-line

01-04-12  bench        Bug 366732: we now use the public shimdb.h instead of a private version.

01-04-10  cnapier      Bug 268360: Patches can now be created when the file table key is long, causing
                       us to hit the OLE stream name limitation.  Patchwiz and Msi now handle this by
                       using a MsiPatchHeaders table that maps a row in the Patch table to the patch
                       header stream.  A patch containing a populated MsiPatchHeaders table can only
                       be applied with Windows Installer version 2.0 or greater. Patchwiz only creates
                       this table if it has to.

01-04-10  cnapier      Checked in build #236 of msi.chm, msi.chi

01-04-09  weiruc       Fix bug 300071, LowerSharedDLLRefCount now handles 64 and
                       32 bit paths correctly.

01-04-09  eugend       Bug 357718: CRC checking displays now errors also for files whose checksums
                       it cannot get.

01-04-09  eugend       Bug 359082: ScrollableText control displays now text that's over the 32K characters limit.

01-04-09  cgouge       Bug 359886: Watch Merge Log option unsupported on 9x.

01-04-09  cgouge       Bug 355665: Orca validation error when no CUB file selected.

01-04-09  cgouge       Bug 359879: temp CAB file is now deleted by mergemod on Win9X.

01-04-06  bench        Bug 345536: changed the text for error 2735.

01-04-06  bench        Bug 356951: fixed assert during major upgrade patch.  The assert was pointing out that we
                       were orphaning cached .msi files.

01-04-06  bench        Bug 359878: fixed AV when installing a patch that updated some files which were also duplicated
                       in the DuplicateFiles action.

01-04-05  rahulth      Bug 263973: fixed the TLS slot leak. We used to allocate the TLS slot g_dwImpersonationSlot
                       only once in msi.dll and then hold on to it as long as the dll was loaded. However we had
                       forgotten to free the slot when the dll is unloaded. Therefore, any process that loaded and
                       unloaded msi.dll would leak a TLS slot per load-unload.

01-04-03  eugend       Bug 357028: fixed AV caused in the client by missing Directory table.

01-03-29  bench        Bug 292811: added support for disallowing installs that have application compatibility
                       issues on Whistler (assuming that's ok with the user).

01-03-29  chetanp      Bug 180771: converted debug assembly errors to ship

01-03-29  rahulth      Bug: 341111. Fixed the problem where we were getting a "The specified service
                       has been marked for deletion" popup after running instmsi on Win2K.
                       Bug: 284005. Fixed icon registration for msi files in the 32-bit hive on IA64 machines.

01-03-29  rahulth      Bug: 339688. Fixed the custom action failures for non-admin users on NT4.
                       The cause of the problem was that advapi32!GetSecurityInfo does not like
                       pseudo handles on NT4.0. This was causing the custom action server to fail
                       when it tried to set the synchronize rights for non-admin users. The fix involves
                       passing in a real handle to the process rather than a pseudo handle.

01-03-29  cnapier      Bug 353248: Return ERROR_DISK_FULL when out of disk space while attempting to cache
                       the msi package temporarily.  If running with the UI, we give the user the option
                       to retry or cancel.

01-03-29  mattwe       Bug 347901:  We now ref-count our use of the Security token privilege (SE_SECURITY_NAME).
                       This allows us to set/unset the privilege in winlogon for reading file security off 
                       existing shortcuts and re-apply it without being in the service.

01-03-29  mattwe       Bug 316661:  orca.msi and msival2.msi in the flat file tree for the SDK now have their cabs.

01-03-29  bench        Bug 339781: allow multi-target, small update patches to apply with 1.5

01-03-28  cnapier      Build 233 of msi.chm and msi.chi is available

01-03-28  cnapier      Bug 279840: enforce running as local_system for calls to MsiAdvertiseScript

01-03-28  chetanp      Bug 350947: appcompat fix for speech package on Whistler

01-03-28  chetanp      Bug 351640: backprop WIN2K SP bug 13441

01-03-28  eugend       Bug 302675 revisited: we swap now only the C:\Windows\Syswow64 into C:\Windows\System32
                       (on Win64, when we write data into the 32-bit SharedDll - this is for 32-bit components).

01-03-28  bench        Bug 148734: when a debug error occurs, the log will contain the full-text of the debug error, rather
                       than just the generic string with the error parameters.  As part of this fix, we now store all of our
                       debug error strings in the ship msi.dll (as global strings in the code).

01-03-27  chetanp      Bug 282068: Fix uninstall key cleanup

01-03-27  chetanp      Bug 350743: Fix admin install involving assemblies

01-03-26  eugend       Bug 331291: Assert will not fire now when source resolution encounters a drive that
                       does not support long file names.

01-03-23  mattwe       Bug 335467: Msi.Dll in InstMsi redist is rebased to Windows 2000 location.

01-03-23  mattwe       Bug 346820: Updating autoexec.bat with brand new path variable adds garbaged

01-03-22  cnapier      Bug 343570: Msi is now version 2.0! (formerly 1.5)

01-03-22  cnapier      Bug 346569: Script custom actions from DoAction control events were never executed if no
                       other custom actions had run in the InstallUISequence.  This is now fixed.

01-03-22  cnapier      Bug 207348: Fixed Internal Validation to special case scrollable text controls in the Control
                       table.  These are no longer validated as formatted text as they have their own format to
                       follow (RTF).

01-03-22  cnapier      Bug 343671: FilesInUse dialog did not appear when uninstalling Office XP with WinWord.exe running.

01-03-21  bench        Bug 347830: fixed AV in appcompat code caused by incorrect header file.

01-03-20  chetanp      Bug 288515: fix bug that looks for SPF key files only in the system32 folder. We now check for
                       SFP for all locatoins.

01-03-21  bench        Bugs 347762, 347773: fix logging for appcompat matching, and fixed bug when appcompat XML
                       contains no optional data.

01-03-20  eugend       Bug 218473: HideTarget custom action option flag doesn't trash anymore the
                       Target and CustomActionData script fields.

01-03-20  chetanp      Bug 343749: fix code bug that prevented removal of feature registration for disabled features

01-03-19  eugend       Bug 311545: For files in use I've eliminated redundant data the service was
                       sending to the client and this will prevent the service from reaching the
                       limit of 255 fields in a record that could cause nowadays the client to display
                       empty listboxes in FilesInUse dialog.

01-03-19  eugend       Bug 302641: Darwin doesn't hang anymore when it sends ignore commands to FDIServer
                       and keeps getting back the same response.

01-03-19  chetanp      Bug 343342: fixed extra null termination when creating inprogress strings

01-03-16  bench        Bug 207675: validation no longer requires Media.Cabinet to contain an SFN name.

01-03-16  bench        Bug 158817: fix appcompat problem with Streets & Trips and MapPoint 2001.

01-03-16  chetanp      Bug 317061: fixed writing registry entries for never overwrite reg component

01-03-15  cgouge       Bug 344675: fix validation errors in mergemod.msm

01-03-15  cnapier      Bug 343881: fixed duplicate accelerator keys on UISample's MaintenanceTypeDlg dialog.

01-03-15  cgouge       Bug 343278: leaked handle in mergemod on bad configurable MSM.

01-03-15  cgouge       Bug 343854: Fixed image extraction command line in orca.

01-03-14  cgouge       Bug 146405: Fixed problem with mergemod extraction on 9X when using "-x .".

01-03-14  bench        Bugs 283833, 303917, 303923: MSI+AppCompat:

                         added more package matching support, more flexible application options, and added
                         downlevel client support.

01-03-13  rahulth      Bug 146318: InstMsi now creates a MIF file if the SMS client
                       is installed on the system.

01-03-13  cnapier      Bug 146277: Added COM+ costing. Private assemblies are costed the same way as files.
                       Cost of global assemblies is attributed to the Windows folder volume (location of GAC).

01-03-13  rahulth      Bug 337684 : SDB Api dlls are now placed in the system folder
                       rather than the apppatch folder.

01-03-13  cgouge       Bug 146514: mergemod CAs are not generated for orphaned directory table rows.

01-03-13  cgouge       Bug 339371: Fixed problem with file extraction from mergemod on Win9X.

01-03-12  rahulth      Bug 325070: Ensure we don't overwrite a newer sdb with instmsi.

01-03-12  bench        Bug 189654: appcompat fix for package with null source root property name.

01-03-11  chetanp      Bug 318317: allow bootstrapping of URT assembly installations. We now allow for the core
                       assembly installation files to be placed (by a CA) in a temp but secure location (URTTemp
                       under system32). We fall back to looking for the core URT dlls in that location if not found 
                       in the "regular" location

01-03-08  RahulTh      Added new msi.chi and msi.chm files.
                       Also fixed the following bugs:
                         179330 : InstMsi always returns ERROR_SUCCESS_REBOOT_REQUIRED on NT systems.
                         272003 : Handle migration of WinXP Installer Binaries on upgrades from NT4 to Win2K
                         337684 : InstMsi.exe should contain sdbapi.dll and msimain.sdb
                         179206 : Add the UI level property msiUILevelHideCancel for the installer automation
                                  object. Had missed this in previous checkin for the fix for 179206

01-03-08  eugend       Bug 335918: On Win64, 32-bit msiexec.exe registers now the automation handler
                       in the 32-bit registry hive.

01-03-08  eugend       Bugs 317008 & 317009: On Win64, for 32-bit packages, AppSearch will operate on the proper
                       32-bit paths & shortcuts' WkDir will get corrected on the fly to 32-bit paths.

01-03-08  cgouge       Bug 331309: Orca: if a merge module is not configurable, we don't throw up an empty
                       configuration dialog.

01-03-08  eugend       Bug 331618: Fixed alignment faults in TRANSFRM.CPP

01-03-07  mattwe       Bug 151680:  Token privileges for Restore and Take Ownership are now enabled as necessary
                       via the CRefCountedTokenPrivileges privs(itkpSD_WRITE) automatic variable addition.  
                       This is necessary before applying security that includes owner information.

01-03-07  mattwe       Bug 337688:  Updating security on shortcuts needed elevation
                       
01-03-07  cgouge       Bug 292429: missing else clause of condition in QI call of ConfigurableItem implemenation 
                       was causing collection query for each item to return E_UNEXPECTED when marshaling item
                       interface to remote machine.

01-03-06  cgouge       Bug 146423: mergemod now correctly fixes up file sequence numbers when passed a database
                       by handle.

01-03-05  chetanp      Bug 330733: fix sxs assembly sharing

01-03-05  chetanp      Bug 332434: fix sxs assembly installations

01-03-02  bench        Bug 326524: we now perform the necessary 64-bit to 32-bit folder mapping for 32-bit packages
                       in SetTargetPath (type 35 CAs).

01-03-02  cnapier      Bug 318875.  Updated fix in registry cost adjuster to include times when component is also
                       installed RFS.

01-03-01  cnapier      Bugs 182012, 318875.  Various ARP estimated size fixes.

01-03-01  cnapier      Bug 313359: disable messages from script custom actions in the UI thread (DoAction control event
                       invocation)

01-03-01  cgouge       Bug 318991: 64bit MSM story.

01-03-01  cgouge       Bug 331307: Orca could not set NULL into a nullable integer column, it would convert to 0.

01-03-01  eugend       Bug 146389: On Win64, for components that install into the 64-bit c:\windows\system32
                       folder we now refcount the keyfile when the component does not have the
                       msidbComponentAttributesSharedDllRefCount bit set in its Attributes field.
01-02-28  eugend       Bug 268610: MsiEnumComponentCosts skips disabled components now.

01-02-28  cgouge       Bug 287024: non-admins can no longer uninstall a per-machine managed app unless it is 
                       during an upgrade to another managed per-machine application.

01-02-28  eugend       Bug 299218: I've corrected the functionality of MsiGetComponentPath on Win9x
                       so that the assert doesn't fire anymore.

01-02-28  bench        Bug 320839: we now retain the acl's on shortcuts that we overwrite

01-02-28  eugend       Bug 302675: On Win64 we write now 64-bit like paths into the 32-bit SharedDLLs key,
                       just as any 32-bit legacy installer would do.

01-02-27  bench        Bug 282294: prevent basic UI dialog during upgrade install

01-02-27  chetanp      Bug 324175 - Absent Features not registered in multi-user scenario

01-02-26  bench        Bug 152180: to workaround a change in behaviour in Whistler where RunOnce values
                       are not run by default as a non-admin, we now prepend our RunOnce values with a '!'
                       on Whistler only, which causes the shell to revert to Win2K behaviour.

01-02-26  bench        Bug 260091: made a change to prevent INVALID_COMMAND_LINE error when passing properties
                       to service.

01-02-26  bench        Bug 262580: we use the proper event id when logging an internal error in the event log.

01-02-26  bench        Bug 263670: we now set the QFEUpgrade property whenever the "recache package" reinstallmode
                       is used, even if the PackageCode isn't changing.  this enables minor upgrades in cases where
                       we can't tell the PackageCode is changing, as in Intellimirror deployments.

01-02-26  bench        Bug 278200: re-worded ambiguous internal error for CRC checking.

01-02-26  bench        Bug 304429: when performing a major upgrade patch, we check the per-user vs. per-machine
                       state of the product being upgraded and ensure that the new install follows the same state.

01-02-26  bench        Bug 304472: fixed problem when patching an admin image as a non-user.  we weren't elevating when
                       creating temp files in %windir%\installer.

01-02-26  cnapier      Bugs 282835, 295342. Improved error messages for transforms and patches rejected by SAFER and
                       for attempting to install a package while running in SAFE mode on Whistler (our service doesn't
                       run in SAFE mode).

01-02-26  chetanp      Bug 312906 - installing same assembly via 2 packages fails during second install.

01-02-26  chetanp      Bug 295229 - Win32assembly installation failure on IA64

01-02-26  chetanp      Bug 281738 - Allow fault in of Win32 assemblies via MsiProvideAssembly API

01-02-26  chetanp      Bug 279284 - reboot action failure with assembly installation

01-02-26  chetanp      Bug 232662 - design issues with fusion and minor upgrades. The resolution is to mandate that
                       the darwin component id remains the same for assemblies that have been patched for minor upgrades.
                       We will not uninstall the published assembly information and remove the old assembly, if the assembly
                       has changed.

01-02-22  eugend       Bug 146251: Selected radio button controls have now their focus right after the user
                       jumps there from checkboxes disabled via ControlCondition table.

01-02-20  weiruc       Fix bug 179620, 180518, 181671. Ship error code 1609 added.

01-02-19  mattwe       Bug 315791:  We now create system restore points for deployed/advertised apps.

01-02-19  mattwe       Bug 188786:  inprocserver entries for msi.dll are marked apartment threading model.

01-02-19  eugend       Bugs 291277 & 231021: MsiAdvertiseProductEx sets Intel property correctly & MSICHECKCRCS
                       works correctly with source files that are split across several cabinets.

01-02-16  cgouge       Bug 310484, added additional shutdown code to config manager to handle advertise script
                       CA Manager leak.

01-02-16  rahulth      Integrate from VBL04. Also added admin\published\msi to the
                       private branch.

01-02-15  cnapier      Build 230 of msi.chm, msi.chi is now available.

01-02-12  cnapier      Bugs 207142, 249814: MsiZap requires admin privileges to run. MsiZap doesn't look like it is
                       rezapping entries when run twice in a row for the same product (UI improvement).

01-02-10  nadima       Bug 302805 (related to 215380): removed instmsia.exe and instmsiw.exe.  Terminal Server Client
                       needs them gone after all.  CR by mattwe

01-02-10  cgouge       Bug 305678. Eliminated potential crash if there is no previous record when unserializing 
                       a NULL record.

01-02-08  mattwe       Bug 215380: removed instmsia.exe and instmsiw.exe.  Terminal Server Client
                       needs them gone after all.  Will be checked in by NadimA.

01-02-08  cnapier      Build 229 of msi.chm, msi.chi is now available. This is the first post-Beta 2 build.

01-02-08  cnapier      Bug 284098: Product and package codes need to change for SDK packages (orca, msival2,
                       and msisdk) for RC1 SDK release

01-02-07  eugend       Bug # 292411: We can rest assured now that 32-bit MSI.DLL looks for
                       Darwin's config data in the 64-bit registry hive, when run on Win64.

01-02-07  cnapier      Bug 303015: LocalOnly component is not patched when its feature is RFS

01-02-07  cgouge       Bug 254349: Second fix for more scenarios where the UI menu options were incorrectly enabled.

01-02-07  cgouge       Bug 146377: Mergemod couldn't handle duplicate Directory CAs caused by multi-language modules.

01-02-06  cnapier      Bug 304760: MsiOpenPackage[Ex] returns wrong error code when file is not found

01-02-06  cgouge       Bug 275224: Orca no longer creates a no-name table on validation errors, and ICE03 now provides
                       a table name when complaining about missing _Validation entries.

01-02-05  cgouge       Bug 167515: Orca extract CAB from mergemod now has ".cab" as the default extension.

01-02-05  cnapier      Build 228 of msi.chm, msi.chi is now available. This is the official Beta 2 build of the docs.

01-02-05  cnapier      Bug 303027: new feature is installed during minor upgrade if attributes include
                       DisallowUIAbsent and FollowParent

01-02-04  cgouge       Bug 293622: Fixed problem with Orca where a new database would not save until after
                       the user visited the SummaryInfo dialog.

01-02-02  cnapier      Bug 302971: Remove dead code in CMsiInifileCost::GetDynamicCost.  No costing is done
                       on IniFiles (never has been done, even since Darwin 1.0).  Code was simply commented
                       out in case we decide to perform inifile costing in the future.

01-02-02  cnapier      Bug 288000, 288032. Orca and MsiVal2 no longer prompt for CD-Key during setup.
                       MsiVal2 now has license agreement text.

01-02-02  cgouge       Bug 285411: added assembly information for Orca to use new common controls.

01-02-02  cgouge       Bug 199842: persist "show info" option in Orca validation dialog.

01-02-02  rahulth      Bug # 303966 : Fix AV in CSecurityDescription constructor when
                       invoked from CSharedCount::Initialize.

01-02-02  cgouge       Bug 146364, 146366: Fix mergemod sequence merging issues when attempting to resequence an
                       action to a sequence number less than 0. 

01-02-02  cgouge       Bug 146364, 146366: Fix mergemod sequence merging issues when attempting to resequence an
                       action to a sequence number less than 0. 

01-02-02  cnapier      Bug 275805: Reading order of Hebrew and Arabic is wrong on mirrored dialogs (Windows 2000
                       and Whistler only).  On a mirrored dialog, WS_EX_RTLREADING style does not need to be
                       applied since the mirroring performs this automatically.

01-02-02  cnapier      Build 227 of msi.chm, msi.chi is now available.

01-02-01  rahulth      Bug 179330 : Fix instmsi so that it does not always return
                       ERROR_SUCCESS_REBOOT_REQUIRED on NT platforms. Note: The fix
                       to the darwin sources uses a new option in the sed file which
                       won't start working until IExpress is modified to handle the
                       new option.

01-02-01  cnapier      Bug 301070: Remove dead code for Digital Signature stuff

01-02-01  chetanp      Bug 295229 Win32 Assembly installation were failing on ia64 machine. Cause - non IMsiData derived 
                       interface pointerbeing stored in a table column

01-02-01  cgouge       Bug 271080: HKCU remap not working during after reboot. We now reinitialize the key remap
                       state after loading the inprogress information.

01-02-01  cgouge       Bug 271085: HKCU remap on TS machines not working during rollback. The TS-remap 
                       attribute is now stored in the script header and changed if necessary when the header opcode
                       is read. This may involve restarting the elevated CA servers if the key-remap state changes.

01-01-31  cgouge       Bug 288482: deferred custom action now correctly fails on 0 byte DLL from binary table. The failure 
                       is ignorable if the icaContinue bit is used.

01-01-31  cgouge       Bug 270225: installing from DBCS URL causes problems in volume object and source resolution.

01-01-31  cgouge       Bug 299247:  Fixed regression. CA writing to HKCU on TS machines now writes to .Default again.

01-01-31  rahulth      Bugs: 126069, 179206, 276317
                       126069 : named shared section for feature cache created with incorrect ACLs.
                       179206 : Disable Cancel on InstMsi
                       276317 : Non-admin. users cannot install 32-bit apps. on IA64

01-01-31  cnapier      Bug 273764:  MsiAdvertiseProduct[Ex] only returns ERROR_CALL_NOT_IMPLEMENTED on Win9x and NT4
                       when trying to create a script.  Per-machine and Per-user advertisements succeed.

01-01-29  bench        Bug 239223: fixed appcompat problem with Corel Draw 10.  this app was conditionalizing
                       out the InstallValidate action during uninstall.  the fix was to move some code that was
                       added in 1.5 to InstallInitialize, which will never be conditioned.

01-01-29  bench        Bugs 158817, 195574: checked in initial appcompat-transform integration infrastructure.

01-01-29  eugend       Bug 208157: I've reduced the number of registry API calls from
                       MsiProvideComponent[FromDescriptor] APIs.

01-01-29  cnapier      Bug 298516: MsiSip should not ignore digital signature streams of embedded substorages.  Only
                       the digital signature stream of the base storage file should be ignored.

01-01-29  rahulth      Bug 294166: Fix instmsi install on NT4 and hang during rollback of installations.

01-01-29  cnapier      Bug 258218: Cabinet downloads from the web ignore suminfo compression marking and instead,
                       makes an assumption as to the source type.

01-01-29  cgouge       Bug 292313: removed double critsec exit on failure in RemoteAPI thread. This was causing a hang in
                       the service while waiting on the critsec even though it wasn't owned by any threads.

01-01-25  weiruc       Fixed bug 184647 and 146314. Added resource strings for
                       MUI shell friendly display name and shell verbs. Added
                       ICE80 that verifies that packages containing 64 bit
                       components and scripts have "Intel64" in their template
                       summary information stream and that their page count
                       is greater than or equal to 150.

01-01-25  rahulth      Bug 285469 and bug 282032: Make NT4 SP6 the min. requirement and make instmsi
                       prompt for reboots on Win2K.

01-01-25  mattwe       Bug 252300: Suspended installs now get correct system restore checkpoints.  

01-01-25  bench        Bug 292525: checked in a new private fusion.h to correspond to some changes being made
                       in fusion.dll.

01-01-25  mattwe       Bug 252903: LimitSystemRestoreCheckpointing machine policy set to 1 disables calls to 
                       system restore.

01-01-25  eugend       Bug 291476: On Win64 MsiSourceListClearAll called from a 32-bit process looks now for
                       configuration data in the right spot in the registry (in the 64-bit hive).

01-01-25  cgouge       Bug 271067: client with restricted token rights was failing to create CA due to a request
                       for too many access rights on the token while detecting enabled token privileges.

01-01-24  mattwe       Bug 268319: System restore checkpoints will not be created when install is run with no UI.
                       This prevents checkpoints from being created during logon/logoff deployment.

01-01-24  mattwe       Bug 249859: System restore checkpoints will not be created during admin installs (msiexec /a)
                   
01-01-24  cnapier      Bug 254547: Logitech Wingman 3.62 software no longer installs (due to
                       ComputeAccessTokenFromCodeAuthzLevel failing to return a primary token when supplied
                       an impersonated token marked inert)

01-01-24  bench        Bug 281076: fix to enable having 3 binary patches applied to a single file at the same time.

01-01-24  bench        Bug 285290: hashing now works properly with 0-byte files.  previously a 0-byte file would always
                       mismatch with the hash in the .msi.

01-01-24  bench        Bug 285313: when applying a patch containing a full-file, we would still resolve the original source
                       path, which may prompt for CD or network, even though the file is in a .msp file which isn't at that
                       source.  this has been fixed.

01-01-24  cgouge       Bug 278238: IA64, failure when registering typelib from 32bit CA server for RFS component. The
                       elevated CA servers can now impersonate the user using standard CImpersonate, etc.

01-01-24  eugend       Bug 275768: Fixed an error in ...\src\msiexec\server.rc file.

01-01-24  cgouge       Bug 275093: Improperly registering DBCS RFS path with some Kanji characters.

01-01-24  cgouge       Bug 271872: MSI service now shuts down 10 minutes after the last connection to it is
                       destroyed.

01-01-18  cnapier      Bug 287807: Non-admins could not install office 2002 

01-01-19  cgouge       Bug 283920: Mergemod not merging directory tables due to bad conditional statement.

01-01-19  mattwe       Bug 254685:  MSI+SR bug where we reported failure to create restore point when
                       system restore was simply disabled.  See also 287584 for System restore return
                       code bug.

01-01-15  cnapier      RI-Blocker bug 280623, bugs 280605, 280693, 280716, 280779. Problems with Safer -- Installer
                       interaction with app deployment. Basic gist was invocation of advertised product install via
                       product code was not properly applying Safer policy to the package (which wasn't cached at the
                       time)

01-01-12  bench        Bug 258432: our check for writable drives has changed to creating a temp folder at the root
                       of the drive rather than a temp file.  this was prompted by changes to the default ACLs on drives
                       in Whistler.

01-01-12  mattwe       Bug 249859: System Restore integration with MSI now only writes checkpoints
                       for installing and uninstalling a product.

01-01-12  eugend       Reverted previous changes:
                       Bug 221770: I've fixed MsiGetcomponentPath as not to look for components installed
                                   by other users.
                       Bug 248662: I've reverted MsiGetProductCode to the way it was before my 00-12-14 checkin.

01-01-12  eugend       Bug 269922:  On Win64, 32-bit Darwin is able now to locate files in the
                       64-bit %windir%\System32 directory.

01-01-12  rahulth      Bugs 254703, 272083: Fix theming problems which prevented
                       certain dialogs from showing up on Whistler. Make instmsi and
                       darwin 1.5 custom actions work on NT 4.0.

01-01-12  mattwe       Bug 275994:  Off by one error in setting restore point names crashed.

01-01-12  cgouge       Bug 249790: changed error string for error 2762.

01-01-12  mattwe       Bug 267121:  instmsi.sed is re-generated when a full postbuild is re-run.
                       This fixes problems with localization builds.

01-01-11  cnapier      bugs 277515, 277885: Msi files can now be digitally signed and include timestamps.
                       MsiGetFileSignatureInformation can now handle timestamped files.
 
01-01-11  cnapier      bugs 172263, 224218, 224335: SDK bug fixes.  MergeMod.cub now has all correct entries in
                       its _Validation table.  DbReadme.txt and PReadme.txt are now installed in the DATABASE and
                       PATCHING folders to describe the contents (part of PSDK sample scrub).

01-01-11  cnapier      bug 253489: Changed string for internal error (id 5 in Error table)

01-01-11  cnapier      bug 146132: Support for transforms at URL sources.

01-01-11  cnapier      bug 193684: ODBC DSNs are registered incorrectly on Win64.  Elevated custom action servers
                       now remap HKCU. On Win2K and above for terminal server per-machine installs, HKCU is not 
                       remapped and instead, remains HKCU\.Default

01-01-11  bench        Bug 202751: fixed appcompat issue with embedded nested installs using compressed files.
                       Specifically this affected Commerce Server 2000.

01-01-11  cgouge       Bug 151868: Mergemod extract files fails for second file on UNC path.

01-01-11  cgouge       Bug 146587: Mergemod file extraction from CAB needed to convert file date/time to UTC
                       before setting time on disk.

01-01-11  cgouge       Bug 254329: Disable patch UI when no document loaded in Orca.

01-01-11  cgouge       Bug 254325: UI change for editing transforms in Orca.

01-01-11  cgouge       Bug 247819: Scripts that create installer objects via CreateObject now have the creation
                       process hooked and passed to the service. This is primarily an appcompat fix for apps
                       that assume the script is running in-proc with the engine and thus objects can be
                       freely passed between the two.

01-01-10  cgouge       Bug 195877: Added force commit option to orca command line.

01-01-10  cgouge       Bug 225867: Invalid CA source on IA64 caused reboot due to error translation problem.

01-01-10  cgouge       Bug 122597: AppCompat fix for packages with first DiskId not 1. 

01-01-10  cgouge       Bug 273472: Orca sometimes does not show rows after viewing a patch or transform.

00-01-10  cgouge       Bug 273853: Remove blocking message in TS per-user install mode.

01-01-08  rahulth      bug 272260: make instmsi exit more gracefully in case of errors.
                       Especially if it fails to register successfully from the temp.
                       store or if setupapi fails to install the files on Win2K.

01-01-03  chetanp      bug 172602: fix when to remove product registration in legacy location in multi-user scenario

01-01-03  chetanp      bug 175007: remove thread-unsafe global regkey in APIs

01-01-03  cnapier      bug 266869: uninstall of Office10 from ARP now works (problem was missing initialized
                       SAFER level)

01-01-03  rahulth      Bug 214325, 253110: Register installer from the system folder
                       right after installation on NT systems. NT allows rename and replace
                       and therefore at the end of the installation, all the right binaries
                       are already in the system folder.
                       Bug 256849: Use MsiCreateAndVerifyInstallerDirectory() in msiinst to 
                       create the installer folder with the right security.

01-01-03  chetanp      bug 269368: change msi to use new URT/ Win32 interfaces

01-01-03  chetanp      bug 146207: pass HOMESHARE across from client on NT < Whistler

01-01-03  eugend       Bug 254703: Darwin's UI supports theming now.

01-01-02  mattwe       Bug 261363: reverted 151680 that broke token privileges needed
                       to restore ownership on files being overwritten by a user.

01-01-02  mattwe       bug 257423: Establish DACL for global mutex objects.

01-01-02  chetanp      bug 239042: managed apps enumerated twice via MsiEnumProducts

01-01-02  chetanp      bug 265042: alignment fault when using jpegs in UI
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\doc\relnotes.txt ===
Darwin Setup Development Notes for Testing Releases

02-08-24  cnapier      Bug 690542 - XP SP1: Reboot from winlogon process (machine-deployed with reboot req.)
                       results in hung machine on shutdown due to winlogon assumption that reboot requests
                       in winlogon are redirected requests from csrss across FUS\TS session that requires
                       waiting on the session to exit before the reboot can happen.

02-08-07  cnapier      Bug 682141 - XP SP1: Component with unversioned file keypath using companion file
                       version is disabled when patch is applied (due to MsiFileHash entry).

02-07-18  eugend       Bug 663503 - MSI removing Run key on uninstall

02-07-15  eugend       Bug 661548 - XPSP1: MSI dialogs not responding to ESC, Alt + F4, or clicking close (x).

02-07-15  cnapier      Bug 651910 - XP SP1: Windows Installer tries to install transitive component SFP file when
                       component becomes disabled (due to re-evaluation of condition)
02-07-15  renukam       Bug 660796 - XPSP1 migration dll fixed for migrating per m/c install info 
02-06-24  eugend       Bug 632270 - MSI 2.0 QFE: Windows Installer ignores UI processing in some cases
                       Bug 646802 - XP SP1:Clicking a radio button may cause error 2836 if there are over
                       0xFFFF strings in the .MSI database


02-06-24  cnapier      Bug 626070 - update version checking algm to handle NE based format files (eg. 16-bit). Allows
                       repackaged applications (like winzip and adobe) that reference ctl3dv2.dll to be installed.

02-06-24  rahulth      Bug 622828 : Infinite loop in action.cpp - CustomExeThread()

02-05-10  chetanp      Bug 615098 : Installer is removing GAC'd files when it should not.

02-05-09  rahulth      Bug 609454: XP SP1: MSI should install succeessfully if DCOM default 
                       impersonation level on the machine is Anonymous. We now set the impersonation
                       level explicitly via proxy blankets wherever necessary.

02-05-09  cnapier      Bug 614930: XPSP1: Handle weird, but valid, version resources when calculating
                       languages contained within the DLL.  Uses EnumResourceNames(RT_VERSION) and
                       then EnumResourceLanguages to look at all of the version resources in the file
                       to build language list.  Now allows language neutral to be used in a set of
                       languages.

02-05-09  cnapier      Bug 614932: XPSP1: Crash in service when referencing patch that doesn't exist
                       using PATCH={path to nonexistent patch} on command line.

02-04-25  rahulth      Bug 603127: MSI: FUS/TS - Reboot warning put up in session 0 even if the user 
                       performing the install is logged on to another session.

02-04-19  eugend       Bug 591187: XPSP1: Disable IME for password edit boxes in built-in Installer UI

02-04-18  chetanp      Bug 587626: MSI shares component registration for per-user managed and non-managed 
                       installations of an application
                       Bug 590250: MSI should only look in the context its working under

02-04-15  cnapier      XPSP1 DCR: 577780. Backport multiple instance support to XPSP1.

02-04-03  chetanp      Bug 589651: Assembly registration removed during uninstall for Shared component
                       prematurely.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\engine\_engine.h.txt ===
//+-------------------------------------------------------------------------
//
//  Microsoft Windows
//
//  Copyright (C) Microsoft Corporation, 1996 - 1999
//
//  File:       _engine.h
//
//--------------------------------------------------------------------------

/* _engine.h - private definitions for CMsiEngine, CMsiConfigurationManager

 Included by object implementations, NOT by action implementations.
____________________________________________________________________________*/
#ifndef ___ENGINE
#define ___ENGINE
#include "engine.h"
#include "msi.h"
#include "icust.h"
#include "remapi.h"

#include "_diagnos.h"

#define ENG  // ENG:: for readability, scoping globals within engine module
#define SRV  // SRV:: for readability, scoping services globals to engine module
#define MSI  // MSI:: for readability, namespace for MSI API

#if defined(_ALPHA_) && !defined(_WIN64)
#if !defined(WX86)
#define WX86
#include <wx86ofl.h>
#endif
#endif

//__________________________________________________________________________
//
// Command-line options that are used within MSI
//__________________________________________________________________________

// Lower-case options are executed as they are seen.
// Upper-case options are executed last. There can only be 1 upper-case option specified on the command-line.

// The option can be specified in either upper or lower case on
// the command-line. 'a' and 'A' are the same option. They are
// just types of options.

#define NETWORK_PACKAGE_OPTION          'A'
#define REG_SHELL_DATA_OPTION           'D'
#define EMBEDDING_OPTION                'E'  // cannot change -- used by OLE
#define REPAIR_PACKAGE_OPTION           'F'
#define LANGUAGE_OPTION                 'g'
#define HELP_1_OPTION                   'H'
#define INSTALL_PACKAGE_OPTION          'I'
#define ADVERTISE_PACKAGE_OPTION        'J'
#define LOG_OPTION                      'l'
#define SMS_MIF_OPTION                  'm'
#define PROPERTIES_OPTION               'o'
#define APPLY_PATCH_OPTION              'P'
#define QUIET_OPTION                    'q'
#define REG_SERVER_OPTION               'R'
#define TRANSFORMS_OPTION               't'
#define UNREG_SERVER_OPTION             'U'
#define SERVICE_OPTION                  'V'
#define UNINSTALL_PACKAGE_OPTION        'X'
#define SELF_REG_OPTION                 'Y'
#define SELF_UNREG_OPTION               'Z'
#define HELP_2_OPTION                   '?'

#define CHECKRUNONCE_OPTION             '@' // special option only allowed in RunOnce command-line
														  // so its not a part of the szCmdLineOptions array 

//__________________________________________________________________________
//
// Global variables in engine module
//__________________________________________________________________________

extern int g_cInstances; // defined by module.h within engine.cpp
extern scEnum g_scServerContext;
extern bool g_fWin9X;   // true if Windows 95 or 98, else false
extern bool g_fWinNT64; // true if 64-bit Windows NT, else false
extern int g_fSmartShell; // true if on shell that supports DD shortcuts
extern int g_iMajorVersion;
extern int g_iMinorVersion;
extern int g_iWindowsBuild;
extern HINSTANCE g_hInstance;

// ShellFolder structures used in coreactn.cpp and execute.cpp for shell folders determination
// defined in services.cpp
extern const ShellFolder rgShellFolders[];
extern const ShellFolder rgAllUsersProfileShellFolders[];
extern const ShellFolder rgPersonalProfileShellFolders[];

// Reinstall mode flag chars
// WARNING: These characters must track the REINSTALLMODE bit flags in
//          msi.h. REINSTALLMODE 0x1 must correspond to the first reinstall 
//          mode specified here, 0x2 to the second, 0x4 to the third, etc...
//
//          Also, these modes must all be lower-case letters!

const ICHAR szReinstallMode[] ={'r',  // Reserved - unused
								'p',  // Reinstall only if file not present
								'o',  // Overwrite Older versioned files
								'e',  // Overwrite Equal versioned files
								'd',  // Overwrite files of Differing version (either older or newer)
								'c',  // Overwrite Corrupted exes and dlls
								'a',  // Overwrite All files, regardless of version
								'm',  // write required machine reg entries
								'u',  // write required user reg entries
								's',  // Install shortcuts, overwrite any existing
								'v',  // Re-install source install package
								0};


// Log file definitions
// WARNING: These characters must track the INSTALLLOGMODE bit flags in
//          msi.h. INSTALLLOGMODE 0x1 must correspond to the first log
//          mode specified here, 0x2 to the second, 0x4 to the third, etc...


const ICHAR szLogChars[] = {'m', // imtOutOfMemory
							'e', // imtError
							'w', // imtWarning
							'u', // imtUser
							'i', // imtInfo
							'f', // OBSOLETE: imtFilesInUse - only used as placeholder for this array
								  //           since INSTALLMESSAGE_FILESINUSE is in this place in the
								  //           INSTALLMESSAGE enum
							's', // imtResolveSource
							'o', // imtOutOfDiskSpace
							'a', // imtActionStart
							'r', // imtActionData (record)
							'p', // iLogPropertyDump
							'c', // imtCommonData
							'v', // verbose
								 // Place new true log modes here.
								 // See comment below on how these characters must track with lmaEnum
							'!', 
							 0};

#ifdef DEBUG
const ICHAR g_szNoSFCMessage[] = TEXT("Windows File Protection handle has not been initialized!");
#endif // DEBUG

// This should be the number of characters before the '!' character
const int cchLogModeCharsMax = 13;

enum lmaEnum	// Log Mode Attribute Enum
                // These should track the characters at the end of szLogChars
{
	lmaFlushEachLine = 0,
};


// Byte equivalents for each action
const int ibeRemoveFiles	       = 175000;
const int ibeRegisterFonts        = 1800000;
const int ibeUnregisterFonts      = 1800000;
const int ibeWriteRegistryValues  = 13200;
const int ibeRemoveRegistryValues = 13200;
const int ibeWriteIniValues       = 13200;
const int ibeRemoveIniValues      = 13200;
const int ibeSelfRegModules       = 1300000;
const int ibeSelfUnregModules     = 1300000;
const int ibeBindImage            = 800000;
const int ibeRegisterComponents   = 24000;
const int ibeUnregisterComponents = 24000;
const int ibeServiceControl       = 1300000;


const int iesReboot    = -1;     // private return Terminate: propogate reboot requirement to caller
const int iesRebootNow = -2;     // private return Terminate: propogate reboot requirement to caller
const int iesCallerReboot = -3;  // private return Terminate: expect caller to invoke reboot
const int iesRebootRejected = -4;// private return Terminate: reboot required but rejected by user

const int iesNotDoneYet = -1;     // private return from FindAndRunAction and RunThread
const int iesActionNotFound = -2; // private return from FindAndRunAction
const int iesExeLoadFailed  = -3; // private return from RunThread

const int iesUnsupportedScriptVersion = -10; // private return from CMsiExecute::RunScript

const int iesErrorIgnored   = -11; // private return from ixo* operations - indicates error occurred
											  // but was ignored so script processing should continue

const int msidbSumInfoSourceTypeURL = 0x8000; // private return from GetSourceType

const int iuiNoModalDialogs   = 0x4000;
const int iuiDefault          = 0x2000;
const int iuiHideBasicUI      = 0x1000;

// Bit flags for the RuntimeFlags column of the component table
const int bfComponentCostMarker        = 0x01;
const int bfComponentCompressed        = 0x02;
const int bfComponentPatchable         = 0x04;
const int bfComponentDisabled          = 0x08;
const int bfComponentCostInitialized   = 0x10;
const int bfComponentNeverOverwrite    = 0x20;

// Bit flags for the RuntimeFlags column of the Feature table
const int bfFeatureMark      = 0x01;
const int bfFeaturePatchable = 0x02;

// MAINTAIN: compatibility with versions used to create script files
const int iScriptCurrentMinorVersion =  4; // bump when any change made to script format
const int iScriptCurrentMajorVersion = 21; // bump when non-backward-compatible change made to script format (SHOULD NEVER HAPPEN)

const int iScriptVersionMinimum = 18; // TEMP - should be set to iScriptCurrentMajorVersion when that is bumped to 21
const int iScriptVersionMaximum = iScriptCurrentMajorVersion;

// internal script flag that is set so that we honour the Assignment option in the script
// the MsiAdvertiseScript call ignores the Assignment option in the script so that the 
// user vs machine assignment is controlled by the flag in the MsiAdvertiseScript fn.
#define SCRIPTFLAGS_MACHINEASSIGN_SCRIPTSETTINGS 0x80000000L

// internal script flag that is set to force the reversal of the script operations 
// when unadvertising from MsiAdvertiseScript
#define SCRIPTFLAGS_REVERSE_SCRIPT 0x40000000L

// internal script flag to indicate we have been called via MsiAdvertiseScript
#define SCRIPTFLAGS_INPROC_ADVERTISEMENT 0x20000000L

// older SCRIPTFLAGS defines used for backward compatibility
const int SCRIPTFLAGS_REGDATA_OLD = 0x00000002L;
const int SCRIPTFLAGS_REGDATA_APPINFO_OLD = 0x00000010L;

enum ipiEnum  // GetInProgressInstallInfo record fields
{
	ipiProductKey = 1,
	ipiProductName,
	ipiLogonUser,
	ipiSelections,
	ipiFolders,
	ipiProperties,
	ipiDatabasePath,
	ipiDiskPrompt,
	ipiDiskSerial,
	ipiRunning,
	ipiSRSequence,   // System Restore Sequence # - Millenium only
	ipiEnumNext,
	ipiEnumCount = ipiEnumNext-1
};

enum ircSharedDllFlags
{
	ircenumRefCountDll        = 0x1,
	ircenumLegacyFileExisted  = 0x2,
};

enum tsEnum // TransformsSecure
{
	tsUnknown,   // Transforms are secure but we're not 
					 // sure yet whether they're relative or absolute
	tsNo,        // Transforms are not secure
	tsRelative,  // Transforms are secure and relatively pathed (i.e at-source)
	tsAbsolute   // Transforms are secure and absolutely pathed
};

// assignment types
enum iaaAppAssignment{
	iaaUserAssign = 0,
	iaaBegin = iaaUserAssign,
	iaaUserAssignNonManaged,
	iaaMachineAssign,
	iaaEnd = iaaMachineAssign,
};

//__________________________________________________________________________
//
// Global factory functions in engine module
//__________________________________________________________________________

class CMsiEngine;

IMsiServices*  LoadServices();   // managed pointer, DO NOT RELEASE()
int            FreeServices();   // must be called for each LoadServices

IMsiServices*  CreateServices(); // should be removed from here and made private

IUnknown*    CreateEngine();
IMsiEngine*  CreateEngine(IMsiServer& riConfigManager);
IMsiEngine*  CreateEngine(IMsiDatabase& riDatabase);
IMsiEngine*  CreateEngine(IMsiStorage* piStorage, IMsiDatabase* piDatabase, CMsiEngine* piParentEngine, bool fMustAccessInstKey);

IUnknown* CreateMessageHandler();
IMsiMessage* CreateMessageHandler(HWND hwndParent);

IUnknown* CreateExecutor();
IMsiExecute* CreateExecutor(IMsiConfigurationManager& riConfigurationManager,
									 IMsiMessage& riMessage, Bool fRollbackEnabled,
									 unsigned int fFlags = SCRIPTFLAGS_MACHINEASSIGN_SCRIPTSETTINGS | SCRIPTFLAGS_REGDATA | SCRIPTFLAGS_CACHEINFO | SCRIPTFLAGS_SHORTCUTS, HKEY* phKey = 0);
IMsiRecord*  CreateScriptEnumerator(const ICHAR* szScriptFile, IMsiServices& riServices,
												IEnumMsiRecord*& rpiEnum);

IMsiConfigurationManager* CreateConfigurationManager();
IMsiConfigurationManager* CreateConfigManagerAsServer();

IMsiCustomAction* CreateCustomAction();

IMsiServer* CreateMsiServerProxyFromRemote(IMsiServer& riDispatch);
IMsiRemoteAPI*    CreateMsiRemoteAPI();

const IMsiString& GetMsiDirectory();
const IMsiString& GetTempDirectory();

const ICHAR szLocalSystemSID[] = TEXT("S-1-5-18");
bool IsLocalSystemToken(HANDLE hToken);

void GetHomeEnvironmentVariables(const IMsiString*& rpiProperties);

void EnsureSharedDllsKey(IMsiServices& riServices);
extern IMsiRegKey* g_piSharedDllsRegKey;

//IMsiConfigurationManager* CreateConfigurationManager(IMsiServices& riServices);

IDispatch* CreateAutoEngine(MSIHANDLE hEngine);  // in autoapi.cpp

class CCoUninitialize
{
public:
	CCoUninitialize(bool fCoUninitialize) : m_fCoUninitialize(fCoUninitialize) {}
	~CCoUninitialize() {if (m_fCoUninitialize) OLE32::CoUninitialize();}
protected:
	bool m_fCoUninitialize;
};


//__________________________________________________________________________
//
// global string objects exposed without implementation
// dummy implementation of IMsiString to allow external global string object refs
//__________________________________________________________________________

class CMsiStringExternal : public IMsiString
{
 public:
	HRESULT       __stdcall QueryInterface(const IID& riid, void** ppvObj);
	unsigned long __stdcall AddRef();
	unsigned long __stdcall Release();
	const IMsiString&   __stdcall GetMsiStringValue() const;
	const ICHAR*  __stdcall GetString() const;
#ifdef USE_OBJECT_POOL
	unsigned int  __stdcall GetUniqueId() const;
	void          __stdcall SetUniqueId(unsigned int id);
#endif //USE_OBJECT_POOL
	int           __stdcall CopyToBuf(ICHAR* rgch, unsigned int cchMax) const;
	void          __stdcall SetString(const ICHAR* sz, const IMsiString*& rpi) const;
	int           __stdcall GetIntegerValue() const;
	int           __stdcall TextSize() const;
	int           __stdcall CharacterCount() const;
	Bool          __stdcall IsDBCS() const;
	void          __stdcall RefString(const ICHAR* sz, const IMsiString*& rpi) const;
	void          __stdcall RemoveRef(const IMsiString*& rpi) const;
	void          __stdcall SetChar  (ICHAR ch, const IMsiString*& rpi) const;
	void          __stdcall SetInteger(int i,   const IMsiString*& rpi) const;
	void          __stdcall SetBinary(const unsigned char* rgb, unsigned int cb, const IMsiString*& rpi) const;
	void          __stdcall AppendString(const ICHAR* sz, const IMsiString*& rpi) const;
	void          __stdcall AppendMsiString(const IMsiString& pi, const IMsiString*& rpi) const;
	const IMsiString&   __stdcall AddString(const ICHAR* sz) const;
	const IMsiString&   __stdcall AddMsiString(const IMsiString& ri) const;
	const IMsiString&   __stdcall Extract(iseEnum ase, unsigned int iLimit) const;
	Bool          __stdcall Remove(iseEnum ase, unsigned int iLimit, const IMsiString*& rpi) const;
	int           __stdcall Compare(iscEnum asc, const ICHAR* sz) const;
	void          __stdcall UpperCase(const IMsiString*& rpi) const;
	void          __stdcall LowerCase(const IMsiString*& rpi) const;
	ICHAR*        __stdcall AllocateString(unsigned int cb, Bool fDBCS, const IMsiString*& rpi) const;
};
class CMsiStringNull : public CMsiStringExternal {};
class CMsiStringLive : public CMsiStringExternal {};
extern const CMsiStringNull g_MsiStringNull;     // THE only static null string object
extern const CMsiStringLive g_MsiStringDate;     // dynamic global date string object
extern const CMsiStringLive g_MsiStringTime;     // dynamic global time string object

//__________________________________________________________________________
//
// Global factory functions from services, available only in engine+services DLL
//__________________________________________________________________________

inline const IMsiString&  CreateString() {return g_MsiStringNull;};  //!! obsolete
IMsiRecord&  CreateRecord(unsigned int cParam);
ICHAR*       AllocateString(unsigned int cbSize, Bool fDBCS, const IMsiString*& rpiStr);
IMsiRecord*  CreateFileStream(const ICHAR* szFile, Bool fWrite, IMsiStream*& rpiStream);

//__________________________________________________________________________
//
// General utility functions
//__________________________________________________________________________

const IMsiString& GetInstallerMessage(UINT iError);
UINT              MapInitializeReturnToUINT(ieiEnum iei);
IMsiRecord*       GetServerPath(IMsiServices& riServices, bool fUNC, bool f64Bit,
										  const IMsiString*& rpistrServerPath);

void              CreateCabinetStreamList(IMsiEngine& riEngine, const IMsiString*& rpistrStreamList);

Bool              GetProductInfo(const ICHAR* szProductKey, const ICHAR* szProperty, CTempBufferRef<ICHAR>& rgchInfo);
Bool              GetPatchInfo(const ICHAR* szPatchCode, const ICHAR* szProperty, CTempBufferRef<ICHAR>& rgchInfo);
Bool              GetExpandedProductInfo(const ICHAR* szProductCode, const ICHAR* szProperty, 
                     CTempBufferRef<ICHAR>& rgchExpandedInfo, bool fPatch=false);
IMsiRecord*       GenerateSD(IMsiEngine& riEngine, IMsiView& riviewLockList, IMsiRecord* piExecute, IMsiStream*& rpiSD);
IMsiRecord*       GetSourcedir(IMsiDirectoryManager& riDirManager, const IMsiString*& rpiValue);
IMsiRecord*       GetSourcedir(IMsiDirectoryManager& riDirManager, IMsiPath*& rpiPath);
Bool              IsCachedPackage(IMsiEngine& riEngine, const IMsiString& riPackage, Bool fPatch = fFalse, const ICHAR* szPatchCode = 0);
Bool              FFeaturesInstalled(IMsiEngine& riEngine, Bool fAllClients = fTrue);
IMsiRecord*       GetProductClients(IMsiServices& riServices, const ICHAR* szProduct, const IMsiString*& rpistrClients);
void              ExpandEnvironmentStrings(const ICHAR* szString, const IMsiString*& rpiExpandedString);
IMsiRecord*       GetComponentPath(IMsiServices& riServices, const IMsiString& riProductKey, 
											  const IMsiString& riComponentCode, 
											  IMsiRecord *& rpiRec);
Bool              ProcessCommandLine(const ICHAR* szCommandLine,
											  const IMsiString** ppistrLanguage, const IMsiString** ppistrTransforms,
											  const IMsiString** ppistrPatch, const IMsiString** ppistrAction,
											  const IMsiString** ppistrDatabase,
											  const IMsiString* pistrOtherProp, const IMsiString** ppistrOtherPropValue,
											  Bool fUpperCasePropNames, const IMsiString** ppistrErrorInfo,
											  IMsiEngine* piEngine, bool fRejectDisallowedProperties=false);
int               ProductVersionStringToInt(const ICHAR* szVersion);
HANDLE            GetUserToken();

bool              __stdcall TestAndSet(int* pi);
extern "C" void   MsiInvalidateFeatureCache();
IMsiRecord* ExpandShellFolderTransformPath(const IMsiString& riOriginalPath, const IMsiString*& riExpandedPath, IMsiServices& riServices);

#ifdef DEBUG
void              DisplayAccountName(const ICHAR* szMessage, PISID pSid=0);
bool              GetAccountNameFromToken(HANDLE hToken, ICHAR* szAccount);
#define           DISPLAYACCOUNTNAMEFROMSID(m, s) DisplayAccountName(m, s)
#define           DISPLAYACCOUNTNAME(m)           DisplayAccountName(m)
#define           GETACCOUNTNAMEFROMTOKEN(t, a)   GetAccountNameFromToken(t,a);
#else
#define           DISPLAYACCOUNTNAMEFROMSID(m, s)
#define           DISPLAYACCOUNTNAME(m)
#define           GETACCOUNTNAMEFROMTOKEN(t, a)
#endif

//__________________________________________________________________________
//
// SID manipulation functions
//__________________________________________________________________________

void  GetStringSID(PISID pSID, ICHAR* szSID);
DWORD GetUserSID(HANDLE hToken, char* rgchSID);
//DWORD GetUserStringSID(HANDLE hToken, ICHAR* szSID);
DWORD GetCurrentUserSID(char* rgchSID);
DWORD GetCurrentUserStringSID(const IMsiString*& rpistrSid);
DWORD GetCurrentUserStringSID(ICHAR* szSID);
DWORD GetCurrentUserToken(HANDLE& hToken, bool& fCloseHandle);

struct ImpersonateCount
{
	unsigned int m_cImpersonate;
	DWORD        m_dwThreadId;
};

struct ThreadIdImpersonate
{
	DWORD        m_dwThreadId;
	DWORD        m_dwClientThreadId;
};

// return values from PathType
enum iptEnum
{
	iptInvalid = 1,
	iptRelative,
	iptFull,
};
iptEnum      PathType(const ICHAR* szPath);


enum ielEnum
{
	ielNoAction = 0,
	ielLogFatalError,
	ielFatalErrorLogged,
	ielNextEnum
};

//____________________________________________________________________________
//
// Script record format definitions
//   all data is 16-bit aligned, except within non-Unicode strings
//____________________________________________________________________________


const int iScriptSignature     = 0x534f5849L; // signature to valid script file type

//____________________________________________________________________________
//
// User registraion and PID 2.0 definitions
//____________________________________________________________________________

// ProductId definitions
const int cchPidRpc    = 5;  // product code, followed by '-'
const int cchPidSite   = 3;  // site code, followed by '-'
const int cchPidSerial = 7;  // serial number with check digit, followed by '-'
const int cchPidUnique = 5;  // randomized per install, or part of OEM COA serial
const int cchPidTotal = cchPidRpc + 1 + cchPidSite + 1 + cchPidSerial + 1 + cchPidUnique;
const int cchPidCdKey = cchPidSite + 1 + cchPidSerial;
const ICHAR chPidSeparator = '-'; // dashes used to separate PID fields

// Next location to query for User/Company info, ACME installs, HKEY_CURRENT_USER,
// if MsiGetUserInfo fails to get the information
const ICHAR szUserInfoKey[] = TEXT("Software\\Microsoft\\MS Setup (ACME)\\User Info");
const ICHAR szDefName[]     = TEXT("DefName");
const ICHAR szDefOrg[]      = TEXT("DefCompany");
// Final location to query for User/Company info, OS installation, HKEY_LOCAL_MACHINE
const ICHAR szSysUserKey[]  = TEXT("Software\\Microsoft\\Windows\\CurrentVersion");
const ICHAR szSysUserKeyNT[]  = TEXT("Software\\Microsoft\\Windows NT\\CurrentVersion");
const ICHAR szSysUserName[] = TEXT("RegisteredOwner");
const ICHAR szSysOrgName[]  = TEXT("RegisteredOrganization"); 

const int cchUserNameOrgMax = 62;

//____________________________________________________________________________
//
// Miscellaneous shared constants
//____________________________________________________________________________

const ICHAR szDefaultAction[] = TEXT("INSTALL");

const ICHAR szRunOnceKey[] = TEXT("Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce");
const int cbMaxSID                   = sizeof(SID) + SID_MAX_SUB_AUTHORITIES*sizeof(DWORD);
const ICHAR szBlankVolumeLabelToken[] = TEXT("?");

// string representing self as client, for parent installs
const ICHAR szSelfClientToken[] = TEXT(":");


const ICHAR szUserEnvironmentSubKey[]    = TEXT("Environment");
const ICHAR szMachineEnvironmentSubKey[] = TEXT("System\\CurrentControlSet\\Control\\Session Manager\\Environment");

const ICHAR szNonEmptyPath[] = TEXT("TOKEN"); // token string to cause removal of the filename registration

//____________________________________________________________________________
//
// Miscellaneous queries used by several actions
//____________________________________________________________________________
const ICHAR sqlLockPermissions[] = TEXT("SELECT `Domain`,`User`,`Permission` FROM `LockPermissions` WHERE `Table`=? AND `LockObject`=? ORDER BY `Permission`");

//____________________________________________________________________________
//
// CMsiBindStatusCallback class - progress handler for internet download
//____________________________________________________________________________

DWORD DownloadUrlFile(const ICHAR* szPotentialURL, const IMsiString*& rpistrDownload, Bool& fURL, int cTicks = 0);

class CMsiBindStatusCallback : public IBindStatusCallback
{
 public: // IUnknown implemented virtual functions
	HRESULT         __stdcall QueryInterface(const IID& riid, void** ppvObj);
	unsigned long   __stdcall AddRef();
	unsigned long   __stdcall Release();
 public: // IBindStatusCallback implemented virtual functions

	/*----------------------------------------------------------------------------
	cTicks is the number of ticks we're allotted in the progress bar. If cTicks
	is 0 then we'll assume that we own the progress bar and use however many
	ticks we want, resetting the progress bar when we start and when we're done.
	If cTicks is set, however, we won't reset the progress bar. 
  -----------------------------------------------------------------------------*/
	CMsiBindStatusCallback(unsigned int cTicks = 0);

	HRESULT __stdcall OnStartBinding(DWORD, IBinding*) {return S_OK;}
	HRESULT __stdcall GetPriority(LONG*) {return S_OK;}
	HRESULT __stdcall OnLowResource(DWORD ) {return S_OK;}
	HRESULT __stdcall OnProgress(ULONG ulProgress, ULONG ulProgressMax, ULONG ulStatusCode, LPCWSTR szStatusText);
	HRESULT __stdcall OnStopBinding(HRESULT, LPCWSTR ) {return S_OK;}
	HRESULT __stdcall GetBindInfo(DWORD*, BINDINFO*) {return S_OK;}
	HRESULT __stdcall OnDataAvailable(DWORD, DWORD, FORMATETC*, STGMEDIUM*) {return S_OK;}
	HRESULT __stdcall OnObjectAvailable(REFIID, IUnknown*) {return S_OK;}
 private:
	int          m_iRefCnt;
	PMsiRecord   m_pProgress;
	unsigned int m_cTicksSoFar;
	unsigned int m_cTotalTicks;
	Bool         m_fResetProgress;
};

//____________________________________________________________________________
//
// External handle management
//____________________________________________________________________________

typedef unsigned long MSIHANDLE;     // abstract generic handle, 0 == no handle
MSIHANDLE CreateMsiHandle(IUnknown* pi, int iid); // no AddRef called
MSIHANDLE CreateMsiProductHandle(IMsiEngine* pi); // no AddRef called

IMsiEngine* GetEngineFromHandle(MSIHANDLE h);
IUnknown* FindMsiHandle(MSIHANDLE h, int iid);

class CActionThreadData;
iesEnum ScheduledCustomAction(IMsiRecord& riParams, const IMsiString& ristrProductCode, 
                                        LANGID langid, IMsiMessage& riMessage, bool fRunScriptElevated);
MSIHANDLE CreateCustomActionContext(int icaFlags, const IMsiString& ristrCustomActionData,
					const IMsiString& ristrProductCode, LANGID langid, IMsiMessage& riMessage);
void WaitForCustomActionThreads(IMsiEngine* piEngine, Bool fTerminate, IMsiMessage& riMessage);

//____________________________________________________________________________
//
// Exception handling functions
//____________________________________________________________________________

extern void GenerateExceptionReport(LPEXCEPTION_POINTERS pExceptionInfo);
extern void GenerateExceptionReport(EXCEPTION_RECORD* pExceptionRecord, CONTEXT* pCtx);
extern int HandleException(LPEXCEPTION_POINTERS pExceptionInfo);

//____________________________________________________________________________
//
// String handling utilities
//____________________________________________________________________________

UINT FillBufferW(const ICHAR* psz, unsigned int cch, LPWSTR szBuf, DWORD* pcchBuf);
UINT FillBufferA(const ICHAR* psz, unsigned int cch, LPSTR szBuf, DWORD* pcchBuf);

inline UINT FillBufferA(const IMsiString* pistr, LPSTR szBuf, DWORD* pcchBuf)
{
	return FillBufferA((pistr ? pistr->GetString() : 0), (pistr ? pistr->TextSize() : 0), szBuf, pcchBuf);
}

inline UINT FillBufferW(const IMsiString* pistr, LPWSTR szBuf, DWORD* pcchBuf)
{
	return FillBufferW((pistr ? pistr->GetString() : 0), (pistr ? pistr->TextSize() : 0), szBuf, pcchBuf);
}

const IMsiString& GetMsiStringW(LPCWSTR sz);

// special chars in string

const ICHAR DELIMITER_BEGIN('[');
const ICHAR DELIMITER_END(']');
const ICHAR PATH_TOKEN('%');
const ICHAR FILE_TOKEN('#');
const ICHAR STORAGE_TOKEN(':');  // transform
const ICHAR PATCHONLY_TOKEN('#');  // transform containing patch information only
const ICHAR SHELLFOLDER_TOKEN('*');  // transform
const ICHAR SECURE_RELATIVE_TOKEN('@'); // transform
const ICHAR SECURE_ABSOLUTE_TOKEN('|'); // transform

//____________________________________________________________________________
//
// CMsiClientMessage definition - COM object to wrapper g_MessageContext.Invoke
//____________________________________________________________________________

class CMsiClientMessage: public IMsiMessage
{
 public: // IMsiMessage implemented virtual functions
	HRESULT         __stdcall QueryInterface(const IID& riid, void** ppvObj);
	unsigned long   __stdcall AddRef();
	unsigned long   __stdcall Release();
	imsEnum         __stdcall Message(imtEnum imt, IMsiRecord& riRecord);
	imsEnum         __stdcall MessageNoRecord(imtEnum imt);
 public: // constructor/destructor
	void *operator new(size_t cb) { return AllocSpc(cb); }
	void operator delete(void * pv) { FreeSpc(pv); }
	CMsiClientMessage() : m_iRefCnt(1) {g_cInstances++;}
 private:
	int                m_iRefCnt;
	bool               m_fMessageContextInitialized;
	friend IUnknown*   CreateMessageHandler();
};

//____________________________________________________________________________
//
// MsiUIMessageContext - Message dispatching definitions
//____________________________________________________________________________

#define imtInvalid  imtEnum(0x80000000)  // to detect invalid event triggers
#define imsInvalid  imsEnum(0x80000000)  // to detect invalid event triggers
#define imsBusy     imsEnum(0x80000001)  // in UI processing thread

class CBasicUI;
class CMsiConfigurationManager;

struct CMainThreadData  // temp arguments to CreateAndRunEngine passed to new thread
{
	CMainThreadData(ireEnum ireProductSpec) : m_ireProductSpec(ireProductSpec) {}
	ireEnum m_ireProductSpec;     // type of product specification
};

struct CEngineMainThreadData : public CMainThreadData
{
	CEngineMainThreadData(ireEnum ireProductSpec, const ICHAR* szProduct, const ICHAR* szAction, const ICHAR* szCmdLine, iioEnum iioOptions) : 
								CMainThreadData(ireProductSpec), 
								m_szProduct(szProduct), 
								m_szAction(szAction), 
								m_szCmdLine(szCmdLine),
								m_iioOptions(iioOptions) {}

	const ICHAR* m_szProduct;  // product specification
	const ICHAR* m_szAction;   // optional, engine defaults to "INSTALL"
	const ICHAR* m_szCmdLine;  // optional property list
	iioEnum      m_iioOptions; // install options
};

struct CInstallFinalizeMainThreadData : public CMainThreadData
{
	CInstallFinalizeMainThreadData(ireEnum ireProductSpec, iesEnum iesState, CMsiConfigurationManager* piConman) : 
							CMainThreadData(ireProductSpec), 
							m_iesState(iesState), 
							m_piConman(piConman) {}

	iesEnum                   m_iesState;
	CMsiConfigurationManager* m_piConman;
};

// Use this #define to enable use of the undocumented RtlSetCurrentEnvironment
//!! Need to decide whether we should define this or not

//#define FAST_BUT_UNDOCUMENTED

struct MsiUIMessageContext
{
 public: // data dynamically set by message handling before Invoke
	IMsiEngine*           m_piEngine;     // temp. for LoadHandler, not ref counted
	const ICHAR*          m_szAction;     // temp. for ShowDialog, not allocated
	CRITICAL_SECTION      m_csDispatch;   // serialization of UI message requests
	ICHAR                 m_rgchExceptionInfo[1024]; // stores exception message when we crash
 private:
	IMsiRecord*           m_pirecMessage; // current message
	imtEnum               m_imtMessage;   // type of current message or function request
 private:  // data set during creation of main thread, or by a function dispatch
	HANDLE  /* / [0] \ */ m_hUIRequest;   // UI request event, must preceed m_hMainThread
	HANDLE  /* \ [1] / */ m_hMainThread;  // main engine thread, must follow m_hUIRequest
	HANDLE  /* / [0] \ */ m_hUIReturn;    // event to unblock UI request thread, preceeds m_hUIThread
	HANDLE  /* \ [1] / */ m_hUIThread;    // UI thread if UI in child thread, must follow m_hUIReturn
	DWORD                 m_tidUIHandler; // thread ID used to identify call from UI thread
	DWORD                 m_tidMainThread; // thread ID used to identify call from MainEngineThread
	DWORD                 m_tidInitialize; // thread ID used to initialize this object
	DWORD                 m_tidDisableMessages; // disable messages for this thread; used for custom actions in the UI thread
	HINSTANCE             m_hinstHandler;  // DLL instance handle if UI handler used
	int                   m_iLogMode;      // mask of message types to log
	IMsiRecord*           m_pirecNoData;   // empty record used internally, access only via GetNoDataRecord()
	imsEnum               m_imsReturn;     // return status passed back to requestor
	bool                  m_fCancelPending; // UI cancel status, cached response to progress messages 
	bool                  m_fInitialized;  // message context initialized
#ifdef DEBUG
	bool                  m_fCancelReturned;// UI cancel status returned from progress message, save for assert
#endif
	HANDLE                m_hUserToken;    // user impersonation token
	int                   m_iBusyLock;     // 1 when message context busy (initialized), 0 when not
	HANDLE                m_hExternalMutex;// named mutex for testing by external processes, such as autorun
	IMsiHandler*          m_piHandlerSave; // in case handler disabled
//	IServerSecurity*      m_piServerSecurity;// call context to allow impersonation
	IMsiMessage*          m_piClientMessage; // message object from the client side
	HANDLE                m_hLogFile;        // handle to log file if open, else 0
	bool                  m_fLoggingFromPolicy; // policy has triggered logging  //TODO: rename to m_fTemporaryLog
	iuiEnum               m_iuiLevel;        // UI level
	int                   m_cTimeoutDisable; // for custom actions to disable timeout UI
	int                   m_cTimeoutSuppress;// for actions to suppress timeout when no messages being sent
	int                   m_iTimeoutRetry;   // current retry counter
	LPTOP_LEVEL_EXCEPTION_FILTER m_tlefOld;  // old exception fileter
	bool                  m_fHideBasicUI; // set to prevent basic UI from being initialized
	HWND                  m_hwndHidden;      // Hidden window
	bool                  m_fServicesAndCritSecInitialized;
	IMsiServices*         m_piServices;
	LANGID                m_iLangId;         // language of package, used to select resource strings
	unsigned int          m_iCodepage;       // codepage of package, used to select font charset
	bool                  m_fNoModalDialogs;
	HWND                  m_hwndDebugLog;
	bool                  m_fOEMInstall;
#ifdef FAST_BUT_UNDOCUMENTED
	WCHAR*                m_pchEnvironment;   // process environment block before it's filled with user data
#endif
 public: //!! only until GetHandler() fixed or better removed
	IMsiHandler*          m_piHandler;    // full UI handler, only if in use
	HANDLE m_hSfcHandle;   //  handle to Windows 2000 system file protection service
 public:
	UINT    Initialize(bool fCreateUIThread, iuiEnum iuiLevel); // false if UI in main thread, true if UI in child thread
	bool    Terminate(bool fFatalExit);       // false for normal termination, true if main thread dead

	UINT    RunInstall(CMainThreadData& riThreadData,
							 iuiEnum iuiLevel,
							 IMsiMessage* piClientMessage);// optional client message handler
	imsEnum Invoke(imtEnum imt, IMsiRecord* piRecord);
	HWND    GetCurrentWindow();
	const ICHAR* GetWindowCaption();
	bool    IsHandlerLoaded()        { return m_piHandler   != 0; }
	bool    IsInitialized()          { return m_fInitialized; }
//	bool    MainEngineThreadExists() { return m_hMainThread != 0; }
	bool    ChildUIThreadExists()    { return m_hUIThread   != 0; }
	bool    ChildUIThreadRunning()   { DWORD extCode; 
											if (ChildUIThreadExists())
												return !GetExitCodeThread(m_hUIThread, &extCode);
											return fFalse;
									   };
	bool    IsUIThread()             { return WIN::GetCurrentThreadId() == m_tidUIHandler; }
	bool    IsMainEngineThread()     { return WIN::GetCurrentThreadId() == m_tidMainThread; }
	int     GetLogMode()             { return m_iLogMode; }
	LANGID  GetCurrentUILanguage();
//	IServerSecurity* GetServerSecurity() { return m_piServerSecurity;}
	HANDLE           GetUserToken()  { return m_hUserToken;}
	IMsiRecord* GetNoDataRecord();
	void    DisableTimeout()         { m_cTimeoutDisable++; }
	void    EnableTimeout()          { if (m_cTimeoutDisable) m_cTimeoutDisable--; }
	void    SuppressTimeout()        { m_cTimeoutSuppress++; }
	//!! the following should be imt operations or put in CriticalSection!
	void    DisableHandler()         { if (!m_piHandlerSave) m_piHandlerSave=m_piHandler, m_piHandler=0;}
	void    RestoreHandler()         { if (m_piHandlerSave)  m_piHandler=m_piHandlerSave, m_piHandlerSave=0;}
	UINT    SetUserToken(bool fReset=false);
	void    DisableCurrentThreadMessages() { Assert(m_tidDisableMessages == 0); m_tidDisableMessages = WIN::GetCurrentThreadId();}
	void    EnableMessages() { Assert(m_tidDisableMessages != 0); m_tidDisableMessages = 0;}
#ifdef DEBUG
	bool    WasCancelReturned() {if (m_fCancelReturned){ m_fCancelReturned = false; return true; } return false;}
#endif
	iuiEnum GetUILevel() { return m_iuiLevel; } // For use *ONLY* to set the CLIENTUILEVEL property
	void    LogDebugMessage(const ICHAR* szMessage);
	inline bool IsOEMInstall() { return m_fOEMInstall; }
	inline void SetOEMInstall(bool fArg) { m_fOEMInstall = fArg; }
 private:
	static DWORD WINAPI MsiUIMessageContext::ChildUIThread(MsiUIMessageContext* This);
	static DWORD WINAPI MsiUIMessageContext::MainEngineThread(LPVOID);
	static LONG  WINAPI MsiUIMessageContext::ExceptionHandler(EXCEPTION_POINTERS* ExceptionInfo);
	bool FCreateHiddenWindow();
	void KillHiddenWindow();
	imsEnum ProcessMessage(imtEnum imt, IMsiRecord* piRecord); // UI thread message processor
	bool    InitializeEnvironmentVariables();
	bool    RestoreEnvironmentVariables();
	bool    InitializeLog(bool fDynamicLog = false);

 public:  // static constructor
	MsiUIMessageContext()  // static constructor optimized to init static data
	: m_hUIRequest(0), m_hUIReturn(0), m_hMainThread(0), m_hUIThread(0), m_hExternalMutex(0)
	, m_piEngine(0), m_piHandler(0), m_hinstHandler(0), m_piHandlerSave(0)
//	, m_piServerSecurity(0)
	, m_pirecMessage(0), m_pirecNoData(0)
	, m_hLogFile(0), m_cTimeoutDisable(0), m_cTimeoutSuppress(0), m_hUserToken(0), m_iTimeoutRetry(0)
	, m_imtMessage(imtInvalid), m_imsReturn(imsInvalid), m_fCancelPending(false), m_iuiLevel((iuiEnum)iuiDefault)
	, m_fHideBasicUI(false), m_fInitialized(false), m_fLoggingFromPolicy(false)
	, m_iBusyLock(0), m_tidUIHandler(0), m_tidMainThread(0), m_tidDisableMessages(0), m_hwndHidden(0)
	, m_piServices(0), m_iLangId(0), m_iCodepage(0)
	, m_hSfcHandle(0), m_fOEMInstall(false)
#ifdef FAST_BUT_UNDOCUMENTED
	, m_pchEnvironment(0), m_hwndDebugLog(0)
#endif
#ifdef DEBUG
	, m_fCancelReturned(false) 
#endif
#if defined(WX86)
	, m_fWx86Install(fFalse)
#endif
	{
		m_csDispatch.OwningThread = INVALID_HANDLE_VALUE;
	}
 friend bool CreateLog(const ICHAR* szFile, bool fAppend);
 friend bool LoggingEnabled();
 friend bool WriteLog(const ICHAR* szText);

 //Wx86
#if defined(WX86)
    Bool        __stdcall IsWx86Install();
	void        __stdcall SetWx86Install(Bool fWx86Install);
 protected:
   	Bool			m_fWx86Install;    //if x86 install on alpha
#endif
};

extern MsiUIMessageContext g_MessageContext;  // only one per process


//____________________________________________________________________________
//
// CMsiEngine definitions   
//____________________________________________________________________________

enum scmEnum // m_scmScriptMode
{
	scmIdleScript, // not writing or running script
	scmWriteScript, // writing script
	scmRunScript, // running script
};

enum ippEnum // types of in-progress property strings
{
	ippSelection,
	ippFolder,
	ippProperty,
};

enum issEnum   // install sequence state/segment
{
	issNotSequenced = 0,     // no sequence running, actions called directly
	issPreExecution,         // before InstallInitialize (before script generation)
	issScriptGeneration,     // after InstallInitialize, before InstallFinalize
	issPostExecution,        // after InstallFinalize (after script execution)
};

enum ilktEnum // arg to LockInstallServer
{
	ilktResumeInProgress,
	ilktExecutionLock,
	ilktUnlock,
};

enum ipitEnum // bit-flags: return from InProgressInstallType
{
	ipitSameConfig    = 0x00,
	ipitDiffUser      = 0x01,
	ipitDiffProduct   = 0x02,
	ipitDiffConfig    = 0x04,
};

enum ieftEnum // Index into the array of ints that gives us column numbers to the file table
{
	ieftKey,
	ieftComponent,
	ieftAttributes,
	ieftName,
	ieftMax,
};

class CActionThreadData;  // custom action thread data, defined in action.cpp

// token class used by engine
struct CClientEnumToken{
	CClientEnumToken():m_dwProductIndex(0), m_pCursor(0){}
	void Reset(){m_dwProductIndex = 0;m_pCursor = 0;}
	int m_dwProductIndex;
	PMsiCursor m_pCursor;
};

class CMsiEngine : public IMsiEngine,
						 public IMsiSelectionManager,
						 public IMsiDirectoryManager
#ifdef DEBUG
						, public IMsiDebug
#endif //DEBUG
{
 public: // IMsiEngine implemented virtual functions
	HRESULT         __stdcall QueryInterface(const IID& riid, void** ppvObj);
	unsigned long   __stdcall AddRef();
	unsigned long   __stdcall Release();
	ieiEnum         __stdcall Initialize(const ICHAR* szDatabase,
													 iuiEnum iuiLevel,
													 const ICHAR* szCommandLine,
													 const ICHAR* szProductCode,
													 iioEnum iioOptions);
	iesEnum         __stdcall Terminate(iesEnum iesState);
	IMsiServices*   __stdcall GetServices();
	IMsiHandler*    __stdcall GetHandler();
	IMsiDatabase*   __stdcall GetDatabase();
	IMsiServer&     __stdcall GetConfigurationServer();
	LANGID          __stdcall GetLanguage();
	int             __stdcall GetMode();
	void            __stdcall SetMode(int iefMode, Bool fState);
	iesEnum         __stdcall DoAction(const ICHAR* szAction);
	iesEnum         __stdcall Sequence(const ICHAR* szColumn);
	iesEnum         __stdcall ExecuteRecord(ixoEnum ixoOpCode, IMsiRecord& riParams);
	imsEnum         __stdcall Message(imtEnum imt, IMsiRecord& riRecord);
	imsEnum         __stdcall MessageNoRecord(imtEnum imt);
	int             __stdcall SelectLanguage(const ICHAR* szLangList, const ICHAR* szCaption);
	IMsiRecord*     __stdcall OpenView(const ICHAR* szName, ivcEnum ivcIntent,
												  IMsiView*& rpiView);
	const IMsiString&     __stdcall FormatText(const IMsiString& riTextString);
	iecEnum         __stdcall EvaluateCondition(const ICHAR* szCondition);
	Bool            __stdcall SetProperty(const IMsiString& riPropertyString,const IMsiString& rData);
	Bool            __stdcall SetPropertyInt(const IMsiString& riPropertyString, int iData);
	const IMsiString&     __stdcall GetProperty(const IMsiString& riPropertyString);
	const IMsiString&     __stdcall GetPropertyFromSz(const ICHAR* szPropertyString);
	const IMsiString&     __stdcall GetEnvironmentVariable(const ICHAR* szEnvVar);
	int             __stdcall GetPropertyInt(const IMsiString& riPropertyString);
	int             __stdcall GetPropertyLen(const IMsiString& riPropertyString);
	Bool            __stdcall ResolveFolderProperty(const IMsiString& riPropertyString);
	iesEnum         __stdcall FatalError(IMsiRecord& riRecord);
	iesEnum         __stdcall RegisterProduct();
	iesEnum         __stdcall UnregisterProduct();
	iesEnum         __stdcall UnpublishProduct();
	iesEnum         __stdcall RegisterUser(bool fDirect);
	const IMsiString& __stdcall GetProductKey();
	iesEnum         __stdcall CreateProductInfoRec(IMsiRecord*& rpiRec);
	Bool            __stdcall ValidateProductID(bool fForce);
	imsEnum         __stdcall ActionProgress();
	IMsiRecord*     __stdcall ComposeDescriptor(const IMsiString& riFeature, const IMsiString& riComponent,
												 IMsiRecord& riRecord, unsigned int iField);
	iesEnum         __stdcall RunExecutionPhase(const ICHAR* szActionOrSequence,
															  bool fSequence);
	iesEnum         __stdcall RunNestedInstall(const IMsiString& ristrProduct,
															 Bool fProductCode, // else package path
															 const ICHAR* szAction,
															 const IMsiString& ristrCommandLine,
															 iioEnum iioOptions,
															 bool fIgnoreFailure);
	bool              __stdcall SafeSetProperty(const IMsiString& ristrProperty, const IMsiString& rData);
	const IMsiString& __stdcall SafeGetProperty(const IMsiString& ristrProperty);
	iesEnum         __stdcall BeginTransaction();
	iesEnum         __stdcall RunScript(bool fForceIfMergedChild);
	iesEnum         __stdcall EndTransaction(iesEnum iesStatus);
	CMsiFile*       __stdcall GetSharedCMsiFile();
	void            __stdcall ReleaseSharedCMsiFile();
	IMsiRecord*     __stdcall CreateTempActionTable(ttblEnum iTable);
	const IMsiString& __stdcall GetErrorTableString(int iError);
	UINT            __stdcall ShutdownCustomActionServer();
	CMsiCustomActionManager* __stdcall GetCustomActionManager();

 public: // IMsiDirectoryManager implemented virtual functions
	IMsiRecord*    __stdcall LoadDirectoryTable(const ICHAR* szTableName);
	IMsiTable*     __stdcall GetDirectoryTable();
	void           __stdcall FreeDirectoryTable();
	IMsiRecord*    __stdcall CreateTargetPaths();
	IMsiRecord*    __stdcall CreateSourcePaths();
	IMsiRecord*    __stdcall GetTargetPath(const IMsiString& piDest,IMsiPath*& rpiPath);
	IMsiRecord*    __stdcall SetTargetPath(const IMsiString& piDest, const ICHAR* szPath, Bool fWriteCheck);
	IMsiRecord*    __stdcall GetSourcePath(const IMsiString& riDirKey,IMsiPath*& rpiPath); 
 public: // IMsiSelectionManager implemented virtual functions
	IMsiRecord*    __stdcall LoadSelectionTables();
	IMsiTable*     __stdcall GetComponentTable();
	IMsiTable*     __stdcall GetFeatureTable();
	IMsiTable*     __stdcall GetVolumeCostTable();
	IMsiRecord*	   __stdcall SetReinstallMode(const IMsiString& riModeString);
	IMsiRecord*    __stdcall ConfigureFeature(const IMsiString& riFeatureString,iisEnum iisActionRequest);
	IMsiRecord*    __stdcall ProcessConditionTable();
	Bool           __stdcall FreeSelectionTables();
	Bool           __stdcall SetFeatureHandle(const IMsiString& riFeature, INT_PTR iHandle);
	IMsiRecord*    __stdcall GetDescendentFeatureCost(const IMsiString& riFeatureString, iisEnum iisAction, int& iCost);
	IMsiRecord*    __stdcall GetFeatureCost(const IMsiString& riFeatureString, iisEnum iisAction, int& iCost);
	IMsiRecord*    __stdcall SetComponentSz(const ICHAR* szComponentString, iisEnum iRequestedSelectState);
	IMsiRecord*    __stdcall SetComponent(const MsiStringId idComponentString, iisEnum iRequestedSelectState);
	IMsiRecord*    __stdcall SetInstallLevel(int iInstallLevel);
	IMsiRecord*    __stdcall SetAllFeaturesLocal();
	IMsiRecord*    __stdcall InitializeComponents();
	IMsiRecord*    __stdcall InitializeDynamicCost(bool fReinitialize);
	IMsiRecord*    __stdcall RegisterCostAdjuster(IMsiCostAdjuster& riCostAdjuster);
	IMsiRecord*    __stdcall RecostDirectory(const IMsiString& riDestString, IMsiPath& riOldPath);
	IMsiRecord*    __stdcall GetFeatureValidStates(MsiStringId idFeatureName,int& iValidStates);
	IMsiRecord*    __stdcall GetFeatureValidStatesSz(const ICHAR *szFeatureName,int& iValidStates);
	Bool           __stdcall DetermineOutOfDiskSpace(Bool* pfOutOfNoRbDiskSpace, Bool* pfUserCancelled);
	IMsiRecord*    __stdcall DetermineEngineCostOODS();
	IMsiRecord*    __stdcall RegisterFeatureCostLinkedComponent(const IMsiString& riFeatureString, const IMsiString& riComponentString);
	IMsiRecord*    __stdcall RegisterCostLinkedComponent(const IMsiString& riComponentString, const IMsiString& riRecostComponentString);
	IMsiRecord*    __stdcall RegisterComponentDirectory(const IMsiString& riComponentString, const IMsiString& riDirectoryString);
	IMsiRecord*    __stdcall RegisterComponentDirectoryId(const MsiStringId idComponentString, const MsiStringId idDirectoryString);
	Bool           __stdcall GetFeatureInfo(const IMsiString& riFeature, const IMsiString*& rpiTitle, const IMsiString*& rpiHelp, int& iAttributes);
	IMsiRecord*    __stdcall GetFeatureStates(const IMsiString& riFeatureString,iisEnum* iisInstalled, iisEnum* iisAction);
	IMsiRecord*    __stdcall GetFeatureStates(const MsiStringId idFeatureString,iisEnum* iisInstalled, iisEnum* iisAction);
	IMsiRecord*    __stdcall GetComponentStates(const IMsiString& riComponentString,iisEnum* iisInstalled, iisEnum* iisAction);
	IMsiRecord*    __stdcall GetAncestryFeatureCost(const IMsiString& riFeatureString, iisEnum iisAction, int& iCost);
	IMsiRecord*    __stdcall GetFeatureConfigurableDirectory(const IMsiString& riFeatureString, const IMsiString*& rpiDirKey);
	IMsiRecord*    __stdcall CostOneComponent(const IMsiString& riComponentString);
	bool           __stdcall IsCostingComplete();
	IMsiRecord*    __stdcall RecostAllComponents(Bool& fCancel);
	bool           __stdcall FConnectedToServer() { return (m_piConfigManager == 0); }
	virtual void   __stdcall EnableRollback(Bool fEnable);
	IMsiRecord*    __stdcall IsPathWritable(IMsiPath& riPath, Bool& fIsWritable);
	IMsiRecord*    __stdcall CheckFeatureTreeGrayState(const IMsiString& riFeatureString, bool& rfIsGray);
	IMsiTable*     __stdcall GetFeatureComponentsTable();
	bool           __stdcall IsBackgroundCostingEnabled();
	IMsiRecord*    __stdcall SetFeatureAttributes(const IMsiString& ristrFeature, int iAttributes);
	bool           __stdcall FChildInstall() { return m_fChildInstall; }

    //Wx86
#if defined(WX86)
    virtual Bool   __stdcall IsWx86Install();
	virtual void   __stdcall SetWx86Install(Bool fWx86Install);
   	Bool			m_fWx86Install;    //if x86 install on alpha
#endif

	IMsiRecord*    __stdcall GetSourceType(int& iSourceType);
	ieiEnum        __stdcall LoadUpgradeUninstallMessageHeaders(IMsiDatabase* piDatabase, bool fUninstallHeaders);

#ifdef DEBUG
 public: // IMsiDebug
	void           __stdcall SetAssertFlag(Bool fShowAsserts);
	void           __stdcall SetDBCSSimulation(char chLeadByte);
	Bool		   __stdcall WriteLog(const ICHAR* szText);
	void		   __stdcall AssertNoObjects(void);
	void  		   __stdcall SetRefTracking(long iid, Bool fTrack);

#endif //DEBUG
 public:  // constructor/destructor
	void *operator new(size_t cb) { return AllocSpc(cb); }
	void operator delete(void * pv) { FreeSpc(pv); }
	CMsiEngine(IMsiServices& riServices, IMsiServer& riServer, 
				  IMsiStorage* piStorage, IMsiDatabase* piDatabase, CMsiEngine* piParentEngine);
 protected:
  ~CMsiEngine();  // protected to prevent construction on stack
	iesEnum FindAndRunAction(const ICHAR* szAction);
	Bool GetActionText(const ICHAR* szAction,
							 const IMsiString*& rpistrDescription,
							 const IMsiString*& rpistrTemplate);
	IMsiRecord*  FetchSingleRow(const ICHAR* szQuery, const ICHAR* szValue);
	HRESULT      SetLanguage(LANGID iLangId);
#ifdef DIGITAL_SIGNATURE_SUPPORT
	Bool         ShouldAuthenticateDatabase ();
	iauthEnum    AuthenticateDatabase(const ICHAR* szDatabase, iuiEnum iuiLevel);
#endif
	ieiEnum      DoInitialize(const ICHAR* szDatabase,
									  iuiEnum iuiLevel,
									  const ICHAR* szCommandLine,
									  const ICHAR* szProductCode,
									  iioEnum iioOptions);
	void         InitializeUserInfo(const IMsiString& ristrProductKey);
	ieiEnum      InitializeUI(iuiEnum iuiLevel);
	void         InitializeExtendedSystemFeatures();
	ieiEnum      ApplyLanguageTransform(int iLanguage, IMsiDatabase& riDatabase);
	Bool         CreatePropertyTable(IMsiDatabase& riDatabase, const ICHAR* szSourceTable,
												Bool fLoadPersistent);
	void         ClearEngineData();  // called from Initialize and Terminate
	void         ReleaseHandler();   // called from Initialize and Terminate
	void         FormatLog(IMsiRecord& riRecord);
#ifdef OBSOLETE
	Bool         ProcessPropertyFile(const ICHAR* szFile);
#endif // OBSOLETE
	int          ChecksumUserInfo();
	ieiEnum      InitializeTransforms(IMsiDatabase& riDatabase, IMsiStorage* piStorage,
												  const IMsiString& riTransforms,
												  Bool fValidateAll, const IMsiString** ppistrValidTransforms,
												  int *pcTranformsProcessed=0,
												  const ICHAR* szSourceDir=0,
												  const ICHAR* szCurrentDirectory=0,
												  const IMsiString** ppistrRecacheTransforms=0,
												  tsEnum *ptsTransformsSecure=0,
												  const IMsiString** ppistrNewTransformsList=0);
	Bool         ValidateTransform(IMsiStorage& riStorage, const ICHAR* szProductKey,
											 const ICHAR* szProductVersion, const ICHAR* szUpgradeCode,
											 int& iTransErrors);
	IMsiRecord*  LoadComponentTable();
	IMsiRecord*  LoadFeatureTable();
	IMsiRecord*  ProcessPropertyFeatureRequests(int* iRequestCountParam, Bool fCountOnly);
	IMsiRecord*  ConfigureAllFeatures(iisEnum iisActionRequest);
	IMsiRecord*  ConfigureFile(const IMsiString& riFileString,iisEnum iisActionRequest);
	IMsiRecord*  ConfigureComponent(const IMsiString& riComponentString,iisEnum iisActionRequest);
	IMsiRecord*  ConfigureThisFeature(const IMsiString& riFeatureString,iisEnum iisActionRequest, Bool fThisOnly);
	IMsiRecord*  SetThisFeature(const IMsiString& riFeatureString, iisEnum iisRequestedState, Bool fSettingAll);
	IMsiRecord*  SetFeature(const IMsiString& riFeature, iisEnum iRequestedSelectState);
	iisEnum      GetFeatureComponentsInstalledState(const MsiStringId idFeatureString);
	IMsiRecord*  DetermineFeatureInstalledStates();
	IMsiRecord*  GetFeatureCompositeInstalledState(const IMsiString& riFeatureString, iisEnum& riisInstalled);
	IMsiRecord*  CalculateFeatureInstalledStates();
	IMsiRecord*  DetermineComponentInstalledStates();
	IMsiRecord*  SetFeatureComponents(const MsiStringId idFeatureString);
	IMsiRecord*  UpdateFeatureActionState(const IMsiString* piFeatureString,Bool fTrackParent, IMsiCursor* piFeatureComponentCursor = 0, IMsiCursor* piFeatureCursor = 0);
	IMsiRecord*  UpdateThisFeatureActionState(IMsiCursor* piCursor);
	IMsiRecord*  UpdateComponentActionStates(const MsiStringId idComponent, iisEnum iRequestedActionState, iisEnum iActionRequestState, bool fComponentEnabled);
	IMsiRecord*  UpdateFeatureComponents(const IMsiString* piFeatureString);
	IMsiRecord*  GetComponentCost(IMsiCursor* piCursor, int& iTotalCost, int& iNoRbTotalCost);
	IMsiRecord*  GetComponentActionCost(IMsiCursor* piCursor, iisEnum iisAction, int& iActionCost, int& iNoRbTotalCost);
	IMsiRecord*  GetTotalSubComponentActionCost(const IMsiString& riComponentString, iisEnum iisAction, int& iTotalCost, int& iNoRbTotalCost);
	IMsiRecord*  AddCostToVolumeTable(IMsiPath* piDestPath, int iCost, int iNoRbCost);
	IMsiRecord*  RecostComponentDirectoryChange(IMsiCursor* piCursor, IMsiPath* piOldPath, bool fCostLinked);
	IMsiRecord*  RecostComponentActionChange(IMsiCursor* piCursor, iisEnum iisOldAction);
	IMsiRecord*  RecostComponent(const MsiStringId idComponentString, bool fCostLinked);
	void         ResetComponentCostMarkers();
	IMsiRecord*  ValidateFeatureSelectState(const IMsiString& riFeatureString,iisEnum iisRequestedState,
												   iisEnum& iisValidState);
	IMsiRecord*  GetFeatureParent(const IMsiString& riFeatureString,const IMsiString*& rpiParentString);
	int          GetComponentColumnIndex(const ICHAR* szColumnName);
	int          GetFeatureColumnIndex(const ICHAR* szColumnName);
	int          GetFeatureComponentsColumnIndex(const ICHAR* szColumnName);
	IMsiRecord*  MarkOrResetFeatureTree(const IMsiString& riFeatureString, Bool fMark);
	IMsiRecord*  RecostLinkedComponents(const IMsiString& riComponentString);
	IMsiRecord*  RecostFeatureLinkedComponents(const IMsiString& riFeatureString);
	ieiEnum      PostInitializeError(IMsiRecord* piError, const IMsiString& ristrErrorInfo, ieiEnum ieiError);
	IMsiRecord*  CreatePathObject(const IMsiString& riPathString,IMsiPath*& rpiPath);
	const IMsiString&  ValidatePIDSegment(const IMsiString& ristrSegment, Bool fUser);
	Bool         PIDCheckSum(const IMsiString& ristrDigits);
	int          ProductVersion();
	IMsiRecord* GetCurrentSelectState(const IMsiString*& rpistrSelections,
												 const IMsiString*& rpistrProperties,
											    const IMsiString** ppistrFolders,
												 Bool fReturnPresetSelections);
	Bool CheckInProgressProperties(const IMsiString& ristrInProgressProperties, ippEnum ippType);
	IMsiRecord*  SetDirectoryNonConfigurable(const IMsiString& ristrDirKey);
	ieiEnum      ProcessInProgressInstall();
	ieiEnum      InitializePatch(IMsiDatabase& riDatabase, const IMsiString& ristrPatchPackage,
										  const ICHAR* szProductKey, Bool fApplyExisting, const ICHAR* szCurrentDirectory,
										  iuiEnum iuiLevel);
	ieiEnum      InitializeLogging();
	ieiEnum      ProcessPreselectedAndResumeInfo();
	void         GetSummaryInfoProperties(IMsiSummaryInfo& riSummary, const IMsiString *&rpiTemplate, int &iSourceType);
	imsEnum      LoadHandler();
	ieiEnum      ProcessLanguage(const IMsiString& riAvailableLanguages, const IMsiString& riLanguage, unsigned short& iBaseLangId, Bool fNoUI, bool fIgnoreCurrentMachineLanguage);
	ieiEnum      ProcessPlatform(const IMsiString& riAvailablePlatforms, WORD& wChosenPlatform);
	ieiEnum      LoadMessageHeaders(IMsiDatabase* piDatabase);
	void         ResetEngineCosts();
	IMsiRecord*  EnumEngineCosts(int iIndex, Bool fRecalc, Bool fExact, Bool& fValidEnum, IMsiPath*& rpiPath, int& iCost, int& iNoRbCost, Bool* pfUserCancelled);
	IMsiRecord*  DetermineEngineCost(int* piNetCost, int* piNetNoRbCost);
	bool         AdjustForScriptGuess(int& iVolCost, int &iNoRbVolCost, int iVolSpace, Bool* pfUserCancelled);
	IMsiRecord*  ComponentIDToComponent(const IMsiString& riIDString, const IMsiString*& rpiComponentString);
	static int __stdcall FormatTextCallback(const ICHAR* pch, int cch, CTempBufferRef<ICHAR>&, 
															  Bool& fPropMissing,
															  Bool& fUnresolvedProp,
															  Bool& fSFN,
															  IUnknown* piContext);
	static int __stdcall FormatTextCallbackEx(const ICHAR* pch, int cch, CTempBufferRef<ICHAR>&, 
															  Bool& fPropMissing,
															  Bool& fUnresolvedProp,
															  Bool& fSFN,
															  IUnknown* piContext);
	static int __stdcall FormatTextCallbackCore(const ICHAR* pch, int cch, CTempBufferRef<ICHAR>&, 
															  Bool& fPropMissing,
															  Bool& fUnresolvedProp,
															  Bool& fSFN,
															  IUnknown* piContext,
															  bool fUseRequestedComponentState);
	IMsiRecord* DoStateTransitionForSharedUninstalls(iisEnum& riisAction, const IMsiRecord& riComponentPathRec);
	IMsiRecord* DoStateTransitionForSharedInstalls(const MsiStringId idComponentString, iisEnum& riisAction);
	IMsiRecord* CheckNeverOverwriteForRegKeypath(const MsiStringId idComponentString, iisEnum& riisAction);

	IMsiRecord* CheckLegacyAppsForSharedUninstalls(iisEnum& riisAction, const IMsiRecord& riComponentPathRec);
	IMsiRecord* GetProductClientState(const ICHAR* szProductCode, const ICHAR* szComponentCode, INSTALLSTATE& riState, const IMsiString*& rpistrLocalPath);
	IMsiRecord* CachePatchInfo(IMsiDatabase& riDatabase, const IMsiString& ristrPatchCode,
										const IMsiString& ristrPackageName, const IMsiString& ristrSourceList,
										const IMsiString& ristrTransformList, const IMsiString& ristrLocalPackagePath,
										const IMsiString& ristrSourcePath, Bool fExisting, Bool fUnregister,
										int iSequence);
	Bool        SetPatchSourceProperties();
	IMsiRecord* ResolveSource(const ICHAR* szProductKey=0, bool fPatchKey = false, const ICHAR* szOriginalDatabasePath=0, iuiEnum iuiLevel=(iuiEnum)-1, Bool fMaintenanceMode=(Bool)-1, const IMsiString** ppiSourceDir=0, const IMsiString** ppiSourceDirProduct=0);
	Bool        InTransaction();
	const IMsiString& GetRootParentProductKey();
	IMsiRecord* SetFileComponentStates(IMsiCursor* pComponentCursor, IMsiCursor* pFileCursor, IMsiCursor* pPatchCursor);
	iesEnum     CacheDatabaseIfNecessary();
	const IMsiString& GetProperty(IMsiCursor& riPropCursor, const IMsiString& riProperty);
	iesEnum     RunNestedInstallCustomAction(const IMsiString& ristrProduct,
														  const IMsiString& ristrCommandLine,
														  const ICHAR* szAction,
														  int icaFlags,
														  iioEnum iioOptions);
	void		ReportToEventLog(WORD wEventType,IMsiRecord& riRecord);
	INSTALLSTATE GetProductState(const ICHAR* szProductKey, Bool& rfRegistered, Bool& rfAdvertised);
	const IMsiString& GetDefaultDir(const IMsiString& ristrValue, bool fSource);
	IMsiRecord* LockInstallServer(IMsiRecord* piSetInProgressInfo,
											IMsiRecord*& rpiCurrentInProgressInfo);
	Bool        UnlockInstallServer(Bool fSuspend);
	bool        GetInProgressInfo(IMsiRecord*& rpiInProgressInfo);
	iesEnum     RollbackSuspendedInstall(IMsiRecord& riInProgressParams, Bool fPrompt,
													 Bool& fRollbackAttempted);
	ipitEnum    InProgressInstallType(IMsiRecord& riInProgressInfo);
	IMsiRecord* CreatePaths(bool fSource, const IMsiString* piDirKey);
	void        SetProductAlienClientsFlag();
	void        SetCostingComplete(bool fCostingComplete);
	IMsiRecord* GetInProgressInstallInfo(IMsiRecord*& rpiRec);
	IMsiRecord*	LoadFileTable(int cAddColumns, IMsiTable*& pFileTable);
	IMsiRecord* GetScriptCost(int* piScriptCost, int* piScriptEvents, Bool fExact, Bool* pfUserCancelled);
	bool        PostScriptWriteError();
	bool        WriteScriptRecord(CScriptGenerate* pScript, ixoEnum ixoOpCode, IMsiRecord& riParams);
	bool        WriteExecuteScriptRecord(ixoEnum ixoOpCode, IMsiRecord& riParams);
	bool        WriteSaveScriptRecord(ixoEnum ixoOpCode, IMsiRecord& riParams);
	IMsiRecord* SetFeatureChildren(const IMsiString& riFeatureString, iisEnum iisRequestedState);
	IMsiRecord* SetComponentState(IMsiCursor *piCursor, int colFeature, const MsiStringId idComponent, iisEnum iisComponentInstalled);
	IMsiRecord* CreateComponentFeatureTable(IMsiTable*& rpiCompFeatureTable);
	IMsiRecord* GetFileInstalledLocation(const IMsiString& ristrFile, const IMsiString*& rpistrFilePath, bool fUseRequestedComponentState = false, bool *pfSourceResolutionAttempted=0);	
	IMsiRecord* GetFeatureValidStates(MsiStringId idFeatureName,int& iValidStates, IMsiCursor* piFeatureComponentsCursor, IMsiCursor* piComponentCursor);
	bool        TerminalServerInstallsAreAllowed(bool fAdminUser);
	int         GetTotalCostAcrossVolumes(bool fRollbackCost);
	const IMsiString& GetEstimatedInstallSize();
	Bool        m_fAlienClients;
	bool        OpenHydraRegistryWindow();
	bool        CloseHydraRegistryWindow(bool Commit);
	void        BeginSystemChange();
	void        EndSystemChange(bool fCommitChange, INT64 iSequenceNo);
	void        EndSystemChange(bool fCommitChange, const ICHAR *szSequenceNo);

 protected: //  state data
	int           m_iRefCnt;
	LANGID        m_iLangId;
	int           m_fMode;
	Bool          m_fLogAction; // logging for current action - false when LOGACTION set but not for action
	MsiString     m_istrLogActions;
	iuiEnum       m_iuiLevel;   // UI level, initialized to 0 == iuiFull
	ixmEnum       m_ixmExecuteMode;  // execution mode, initialized to 0 == ixmScript
	Bool          m_fInitialized;
	Bool          m_fRegistered;  // registered with config mgr, output to maint.db.
	Bool          m_fAdvertised;  // the product had been previously advertised
	Bool          m_fInParentTransaction; // nested install inside main engine's transaction
	Bool          m_fMergingScriptWithParent; // in parent transaction and merging script operations
	Bool          m_fCustomActionTable; // custom action table present in database
	Bool          m_fServerLocked;
	Bool          m_fJustGotBackFromServer;
	CScriptGenerate* m_pExecuteScript;
	CScriptGenerate* m_pSaveScript;
	Bool          m_fConfigDatabaseOpen;
	IMsiServices& m_riServices;
	IMsiServer&   m_riServer;
	IMsiConfigurationManager* m_piConfigManager;
	IMsiDatabase* m_piDatabase;
	IMsiStorage*  m_piExternalStorage;
	IMsiDatabase* m_piExternalDatabase;
	CMsiEngine*   m_piParentEngine;
	IMsiCursor*   m_piPropertyCursor;
	IMsiCursor*   m_piActionTextCursor;
	const IMsiString*   m_rgpiMessageHeader[cCachedHeaders];
	const IMsiString*   m_piActionDataFormat;
	const IMsiString*   m_piActionDataLogFormat;
	bool          m_fProgressByData;
	Bool          m_fSummaryInfo;
	const IMsiString*   m_pistrSummaryComments;
	const IMsiString*   m_pistrSummaryKeywords;
	const IMsiString*   m_pistrSummaryTitle;
	const IMsiString*   m_pistrSummaryProduct;
	const IMsiString*   m_pistrSummaryPackageCode;
	MsiDate       m_idSummaryCreateDateTime;
	MsiDate       m_idSummaryInstallDateTime;
	MsiDate       m_idSummaryModifyDateTime;
	int           m_iCodePage;
	const IMsiString*   m_piProductKey;
	const IMsiString*   m_pistrPlatform;
	const IMsiString*   m_pistrExecuteScript; // script executed by server
	const IMsiString*   m_pistrSaveScript;  // script containing all operations for this install
	const IMsiString*   m_piErrorInfo;  // used only to return strings from DoInitialize to Initialize
	int           m_iDatabaseVersion;
	PMsiRecord    m_pCachedActionStart; // held for use by ExecuteRecord and Message
	PMsiRecord    m_pActionStartLogRec; // record for imsgActionStarted and imsgActionEnded - for log use only
	scmEnum       m_scmScriptMode;  // script mode: write, run, idle
	issEnum       m_issSegment;     // current sequence window
	Bool          m_fInExecuteRecord; // true when making recursive call to ExecuteRecord
	Bool          m_fDispatchedActionStart; // true when Message dispatched ActionStart for current action
	Bool          m_fExecutedActionStart; // true when ExecuteRecord executed ixoActionStart
	int           m_cSequenceLevels; // count of levels of recursion to Sequence, used to determine outermost call
	int           m_cExecutionPhaseSequenceLevel; // sequence level count when execution phase was begun
	Bool          m_fDisabledRollbackInScript; // disabled rollback in the middle of script generation
	MsiString     m_strPackagePath; // path to package we are running from
	MsiString     m_strPackageName;
	int           m_iProgressTotal;
	PMsiRecord    m_pActionProgressRec;
	PMsiRecord    m_pScriptProgressRec;
	bool          m_fBeingUpgraded;
	bool          m_fChildInstall;
	bool          m_fEndDialog;
	bool          m_fRunScriptElevated;
	iioEnum       m_iioOptions;
	bool          m_fSourceResolutionAttempted;
	int           m_iSourceType;   // source type suminfo property from SOURCE package - set by GetSourceType
	WORD          m_wPackagePlatform; // platform chosen by ProcessPlatform()

	// cached patch information
	PMsiTable     m_pPatchCacheTable;
	PMsiCursor    m_pPatchCacheCursor;
	int           m_colPatchCachePatchId;
	int           m_colPatchCachePackageName;
	int           m_colPatchCacheSourceList;
	int           m_colPatchCacheTransformList;
	int           m_colPatchCacheTempCopy;
	int           m_colPatchCacheSourcePath;
	int           m_colPatchCacheExisting;
	int           m_colPatchCacheUnregister;
	int           m_colPatchCacheSequence;

	// custom action information
	CRITICAL_SECTION         m_csCreateProxy;
	CMsiCustomActionManager* m_pCustomActionManager;
	
	// IMsiSelectionManager data
	IMsiTable*  m_piFeatureTable;
	IMsiCursor* m_piFeatureCursor;
	IMsiTable*  m_piFeatureComponentsTable;
	IMsiCursor* m_piFeatureComponentsCursor;
	IMsiTable*  m_piComponentTable;
	IMsiCursor* m_piComponentCursor;
	IMsiTable*  m_piCostAdjusterTable;
	int         m_colCostAdjuster;
	IMsiTable*  m_piVolumeCostTable;
	IMsiTable*  m_piCostLinkTable;
	IMsiTable*  m_piFeatureCostLinkTable;
	int         m_colVolumeObject;
	int         m_colVolumeCost;
	int         m_colNoRbVolumeCost;
	int         m_colCostLinkComponent;
	int         m_colCostLinkRecostComponent;
	int         m_colFeatureCostLinkFeature;
	int         m_colFeatureCostLinkComponent;
	bool        m_fCostingComplete;
	bool        m_fSelManInitComplete;
	Bool        m_fExclusiveComponentCost;
	Bool        m_fForceRequestedState;
	int         m_colFeatureKey;
	int         m_colFeatureParent;
	int         m_colFeatureLevel;
	int         m_colFeatureAuthoredLevel;
	int         m_colFeatureHandle;
	int         m_colFeatureSelect;
	int         m_colFeatureAction;
	int         m_colFeatureActionRequested;
	int         m_colFeatureInstalled;
	int         m_colFeatureAttributes;
	int         m_colFeatureAuthoredAttributes;
	int         m_colFeatureComponentsFeature;
	int         m_colFeatureComponentsComponent;
	int         m_colFeatureRuntimeFlags;
	int         m_colFeatureTitle;
	int         m_colFeatureConfigurableDir;
	int         m_colFeatureDescription;
	int         m_colFeatureDefaultSelect;
	int         m_colFeatureDisplay;
	int         m_colComponentKey;
	int         m_colComponentParent;
	int         m_colComponentDir;
	int         m_colComponentAttributes;
	int         m_colComponentInstalled;
	int         m_colComponentCondition;
	int         m_colComponentAction;
	int         m_colComponentActionRequest;
	int         m_colComponentLocalCost;
	int         m_colComponentNoRbLocalCost;
	int         m_colComponentSourceCost;
	int         m_colComponentNoRbSourceCost;
	int         m_colComponentRemoveCost;
	int         m_colComponentNoRbRemoveCost;
	int         m_colComponentRuntimeFlags;
	int			m_colComponentID;
	int			m_colComponentKeyPath;
	int			m_colComponentForceLocalFiles;
	int			m_colComponentLegacyFileExisted;
	int         m_colComponentTrueInstallState;
	int         m_fForegroundCostingInProgress;

	// IMsiDirectoryManager data
	bool        m_fDirectoryManagerInitialized;
	IMsiTable*  m_piDirTable;
	int         m_colDirKey;
	int         m_colDirParent;
	int         m_colDirSubPath;
	int         m_colDirTarget;
	int         m_colDirSource;
	int         m_colDirNonConfigurable;
	int         m_colDirPreconfigured;
	PMsiCursor  m_pCostingCursor;
	bool        m_fReinitializeComponentCost;
	bool        m_fSourceResolved;

	// File table information
	int			m_mpeftCol[ieftMax];

	// Patch table information
	int			m_colPatchKey;
	int			m_colPatchAttributes;
	
	// Internal Engine costing
	int			m_iDatabaseCost;
	int         m_iScriptCost;
	int         m_iScriptCostGuess;
	int         m_iRollbackScriptCost;
	int         m_iRollbackScriptCostGuess;
	int         m_iPatchPackagesCost;

	INT64       m_i64PCHEalthSequenceNo;   //  Windows Millenium System Restore sequence number

	bool		m_fResultEventLogged;
	
	CMsiFile*	m_pcmsiFile;
	int         m_fcmsiFileInUse;

	IMsiTable*  m_piRegistryActionTable;
	IMsiTable*  m_piFileActionTable;
	int         m_iScriptEvents;
	DWORD       m_lTickNextProgress;
	friend const IMsiString& FormatTextEx(const IMsiString& riTextString, IMsiEngine& riEngine, bool fUseRequestedComponentState);
	friend const IMsiString& FormatTextSFN(const IMsiString& riTextString, IMsiEngine& riEngine, int rgiSFNPos[][2], int& riSFNPos, bool fUseRequestedComponentState);
};

extern CActionThreadData* g_pActionThreadHead;  // linked list of custom action threads
void InsertInCustomActionList(CActionThreadData* pData);
void RemoveFromCustomActionList(CActionThreadData* pData);
bool FIsCustomActionThread(DWORD dwThreadId);

class CMsiFileBase
{
public:

	// Enums for accessing file record fields
	enum ifqEnum
	{
		ifqFileName = 1,
		ifqVersion,
		ifqState,
		ifqAttributes,
		ifqTempAttributes,
		ifqFileKey,
		ifqFileSize,
		ifqLanguage,
		ifqSequence,
		ifqDirectory,
		ifqInstalled,
		ifqAction,
		ifqComponent,
		ifqForceLocalFiles,
		ifqComponentId,
		ifqNextEnum
	};
public:
	CMsiFileBase::CMsiFileBase(IMsiEngine& riEngine);
	virtual ~CMsiFileBase();
	IMsiRecord* GetFileRecord( void );
	IMsiRecord* GetPath(Bool fSource, IMsiPath*& rpiDestPath);
	IMsiRecord* GetExtractedFileName(IMsiPath& riPath,Bool fSource,const IMsiString*& rpistrFileName);
protected:
	IMsiEngine& m_riEngine;
	IMsiServices& m_riServices;
	PMsiRecord  m_pFileRec;
};

class CMsiFile : public CMsiFileBase
/*------------------------------------------
Simple internal class for managing queries
into the File Table
-------------------------------------------*/
{

public:
	CMsiFile::CMsiFile(IMsiEngine& riEngine);
	virtual ~CMsiFile();
	IMsiRecord* FetchFile(const IMsiString& riFileKeyString);
private:
	IMsiRecord* ExecuteView(const IMsiString& riFileKeyString);
protected:
	PMsiView    m_pFileView;
};

//
// Resets the shared CMsiFile cursor when we are done with it
//
class PMsiFile 
{
	public:
		inline PMsiFile(IMsiEngine& riEngine, CMsiFile*& pcmsiFileRet) :
			m_riEngine(riEngine)
		{
			pcmsiFileRet = m_riEngine.GetSharedCMsiFile();
		}
		inline ~PMsiFile()
		{
			m_riEngine.ReleaseSharedCMsiFile();
		}
	public:
		IMsiEngine&  m_riEngine;
};


#define GetSharedEngineCMsiFile(var, engine)		CMsiFile* var; PMsiFile CSharedMsiFile(engine, var)

// function to determine whether a file is to be installed to the system
IMsiRecord* GetFileInstallState(IMsiEngine& riEngine,IMsiRecord& riFileRec, Bool fCompanionParent,
									   unsigned int* puiExistingClusteredSize, Bool* pfInUse,
									   ifsEnum* pifsState, bool fIgnoreCompanionParentAction);


class CMsiFileInstall : public CMsiFileBase
{
public:
	CMsiFileInstall::CMsiFileInstall(IMsiEngine& riEngine);
	virtual ~CMsiFileInstall();
	IMsiRecord* TotalBytesToCopy(unsigned int& uiTotalBytesToCopy);
	IMsiRecord* FetchFile();
private:
	IMsiRecord* Initialize();
	IMsiView*		m_piView;
	bool    m_fInitialized;
};

class CMsiFileRemove
{
public:
	enum ifqrEnum
	{
		ifqrFileName = 1,
		ifqrDirectory,
		ifqrNextEnum,
	};
	
	CMsiFileRemove::CMsiFileRemove(IMsiEngine& riEngine);
	virtual ~CMsiFileRemove();
	IMsiRecord* TotalFilesToDelete(unsigned int& uiTotalFileCount);
	IMsiRecord* FetchFile(IMsiRecord*&);
	IMsiRecord* GetExtractedFileName(IMsiPath& riPath,Bool fSource,const IMsiString*& rpistrFileName);
private:
	IMsiRecord* Initialize();
	bool    m_fInitialized;
	bool    m_fEmpty;
	int		m_colFileName;
	int		m_colFileActionDir;
	int     m_colFileKey;
	int     m_colFileActKey;
	int		m_colFileActAction;
	int 	m_colFileActInstalled;
	IMsiCursor*		m_piCursor;
	IMsiCursor*		m_piCursorFile;
	IMsiEngine& m_riEngine;
	IMsiServices& m_riServices;
	PMsiRecord  m_pFileRec;
};

struct TTBD		// Temp TaBle Definition
{
	int icd;
	const ICHAR *szColName;
};


// 
// Enumeration object for MsiEnumX
//

class EnumClients	{	// Our internal class to enumerate clients
public:
	EnumClients();
	~EnumClients();
	UINT Initialize(const ICHAR* szComponent);
	UINT GetProductCode(ICHAR *lpProductBuf);
private:
	HKEY  m_hKey;
	DWORD m_iIndex;
};

UINT InternalEnumClients(ICHAR* lpProductBuf, HKEY HComponentKey, DWORD& cValues, DWORD& iRegValueOffset, DWORD iProductIndex);
UINT __stdcall CheckAllHandlesClosed(bool fClose, DWORD dwThreadId);

// flags for Darwin Descriptor optimization
const int ofSingleComponent = 0x1;
const int ofSingleFeature   = 0x2;

void SetNoPowerdown();
void ClearNoPowerdown();

// additional define for registry root types to do HKLM or HKCU based on ALLUSERS
const int rrkUserOrMachineRoot = -1;

// special format texts used by WriteRegistryValues for using the special callback fn AND SFN handling
const IMsiString& FormatTextEx(const IMsiString& riTextString, IMsiEngine& riEngine, bool fUseRequestedComponentState);
const IMsiString& FormatTextSFN(const IMsiString& riTextString, IMsiEngine& riEngine, int rgiSFNPos[][2], int& riSFNPos, bool fUseRequestedComponentState);

typedef iesEnum (__stdcall *PCustomActionEntry)(MSIHANDLE);
DWORD CallCustomDllEntrypoint(PCustomActionEntry pfEntry, bool fDebugBreak, MSIHANDLE hInstall, const ICHAR* szAction);

// GUID that represents the product key of the system
const ICHAR szSystemProductKey[] = TEXT("{00000000-0000-0000-0000-000000000000}");

//____________________________________________________________________________
//
// CMsiRemoteAPI - Stub for remoted MSI API
//____________________________________________________________________________

class CMsiRemoteAPI : public IMsiRemoteAPI
{
 public:
	HRESULT         __stdcall QueryInterface(const IID& riid, void** ppvObj);
	unsigned long   __stdcall AddRef();
	unsigned long   __stdcall Release();
	HRESULT         __stdcall GetProperty(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hInstall, const ICHAR* szName, ICHAR* szValue,unsigned long* pcch);
	HRESULT         __stdcall CreateRecord(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned int cParams,unsigned long* pHandle);
//	HRESULT         __stdcall CloseAllHandles(const int icacContext, const unsigned long //dwThreadId, const unsigned char* rgchCookie, const int cbCookie);
	HRESULT         __stdcall CloseHandle(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hAny);
	HRESULT         __stdcall DatabaseOpenView(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hDatabase, const ichar* szQuery,unsigned long* phView);
	HRESULT         __stdcall ViewGetError(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hView, ichar* szColumnNameBuffer,unsigned long* pcchBuf, int *pMsidbError);
	HRESULT         __stdcall ViewExecute(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hView, unsigned long hRecord);
	HRESULT         __stdcall ViewFetch(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hView,unsigned long*  phRecord);
	HRESULT         __stdcall ViewModify(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hView, long eUpdateMode, unsigned long hRecord);
	HRESULT         __stdcall ViewClose(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hView);
	HRESULT         __stdcall OpenDatabase(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, const ichar* szDatabasePath, const ichar* szPersist,unsigned long *phDatabase);
	HRESULT         __stdcall DatabaseCommit(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hDatabase);
	HRESULT         __stdcall DatabaseGetPrimaryKeys(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hDatabase, const ichar * szTableName,unsigned long *phRecord);
	HRESULT         __stdcall RecordIsNull(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hRecord, unsigned int iField, boolean *pfIsNull);
	HRESULT         __stdcall RecordDataSize(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hRecord, unsigned int iField,unsigned int* puiSize);
	HRESULT         __stdcall RecordSetInteger(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hRecord, unsigned int iField, int iValue);
	HRESULT         __stdcall RecordSetString(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hRecord,	unsigned int iField, const ichar* szValue);
	HRESULT         __stdcall RecordGetInteger(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hRecord, unsigned int iField, int *piValue);
	HRESULT         __stdcall RecordGetString(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hRecord, unsigned int iField, ichar* szValueBuf,unsigned long *pcchValueBuf);
	HRESULT         __stdcall RecordGetFieldCount(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hRecord,unsigned int* piCount);
	HRESULT         __stdcall RecordSetStream(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hRecord, unsigned int iField, const ichar* szFilePath);
	HRESULT         __stdcall RecordReadStream(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hRecord, unsigned int iField, boolean fBufferIsNull, char *szDataBuf,unsigned long *pcbDataBuf);
	HRESULT         __stdcall RecordClearData(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hRecord);
	HRESULT         __stdcall GetSummaryInformation(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hDatabase, const ichar*  szDatabasePath, unsigned int    uiUpdateCount, unsigned long *phSummaryInfo);
	HRESULT         __stdcall SummaryInfoGetPropertyCount(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hSummaryInfo,	unsigned int *puiPropertyCount);
	HRESULT         __stdcall SummaryInfoSetProperty(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hSummaryInfo,unsigned intuiProperty, unsigned intuiDataType, int iValue, FILETIME *pftValue, const ichar* szValue); 
	HRESULT         __stdcall SummaryInfoGetProperty(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hSummaryInfo,unsigned intuiProperty,unsigned int *puiDataType, int *piValue, FILETIME *pftValue, ichar*  szValueBuf,unsigned long *pcchValueBuf);
	HRESULT         __stdcall SummaryInfoPersist(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hSummaryInfo);
	HRESULT         __stdcall GetActiveDatabase(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hInstall,unsigned long* phDatabase);
	HRESULT         __stdcall SetProperty(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hInstall, const ichar* szName, const ichar* szValue);
	HRESULT         __stdcall GetLanguage(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hInstall,unsigned short* pLangId);
	HRESULT         __stdcall GetMode(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hInstall, long eRunMode, boolean* pfSet); 
	HRESULT         __stdcall SetMode(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hInstall, long eRunMode, boolean fState);
	HRESULT         __stdcall FormatRecord(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hInstall, unsigned long hRecord, ichar* szResultBuf,unsigned long *pcchResultBuf);
	HRESULT         __stdcall DoAction(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hInstall, const ichar* szAction);    
	HRESULT         __stdcall Sequence(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hInstall, const ichar* szTable, int iSequenceMode);   
	HRESULT         __stdcall ProcessMessage(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hInstall, long eMessageType, unsigned long hRecord, int* piRes);
	HRESULT         __stdcall EvaluateCondition(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hInstall, const ichar* szCondition, int *piCondition);
	HRESULT         __stdcall GetFeatureState(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hInstall, const ichar* szFeature, long *piInstalled, long *piAction);
	HRESULT         __stdcall SetFeatureState(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hInstall, const ichar* szFeature, long iState);
	HRESULT         __stdcall GetComponentState(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hInstall, const ichar* szComponent, long *piInstalled, long *piAction);
	HRESULT         __stdcall SetComponentState(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hInstall, const ichar*     szComponent, long iState);
	HRESULT         __stdcall GetFeatureCost(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hInstall, const ichar* szFeature, int iCostTree, long iState, int *piCost);
	HRESULT         __stdcall SetInstallLevel(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hInstall, int iInstallLevel);
	HRESULT         __stdcall GetFeatureValidStates(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hInstall, const ichar* szFeature,unsigned long *dwInstallStates);
	HRESULT         __stdcall DatabaseIsTablePersistent(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hDatabase, const ichar* szTableName, int *piCondition);
	HRESULT         __stdcall ViewGetColumnInfo(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hView, long eColumnInfo,unsigned long *phRecord);
	HRESULT         __stdcall GetLastErrorRecord(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long *phRecord);
	HRESULT         __stdcall GetSourcePath(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hInstall, const ichar* szFolder, ichar* szPathBuf, unsigned long *pcchPathBuf);
	HRESULT         __stdcall GetTargetPath(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hInstall, const ichar* szFolder, ichar* szPathBuf, unsigned long *pcchPathBuf); 
	HRESULT         __stdcall SetTargetPath(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hInstall, const ichar* szFolder, const ichar* szFolderPath);
	HRESULT         __stdcall VerifyDiskSpace(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie, unsigned long hInstall);
	HRESULT         __stdcall SetFeatureAttributes(const int icacContext, const unsigned long dwThreadId, const unsigned char* rgchCookie, const int cbCookie,  unsigned long hInstall,  const ichar* szFeature,  long iAttributes);

 public:  // constructor
 	void *operator new(size_t cb) { return AllocSpc(cb); }
	void operator delete(void * pv) { FreeSpc(pv); }
	CMsiRemoteAPI();
	void SetCookie(const int icacContext, const unsigned char *rgchCookie, const int cbCookie);
	HRESULT BeginAction(const int icacContext);
	HRESULT EndAction(const int icacContext);

 protected:
	~CMsiRemoteAPI();  // protected to prevent creation on stack
 private:
 	long           m_rgiActionCount[icacNext];
 	unsigned char *m_rgchCookie[icacNext];
 	int            m_cbCookie;
 	DWORD          m_dwRemoteAPIThread;
 	bool ValidateCookie(const int icacContext, const unsigned char *rgchCookie, const int cbCookie) const;
 	
	long  m_iRefCnt;
};

#endif // ___ENGINE
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\help\conman.rtf ===
{\rtf1\ansi {\fonttbl{\f0\fswiss Helv;}{\f1\fmodern Courier New;}} {\colortbl;} \fs20 #{\footnote MsiConfigurationManager_Object} ${\footnote MsiConfigurationManager Object} K{\footnote MsiConfigurationManager} +{\footnote Class:MsiConfigurationManager} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiConfigurationManager Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The MsiConfigurationManager object provides the MsiEngine access to configuraion data. The Configuration Manager performs the follows tasks:\par \line 1. Manages product information and databases. \line 2. Manages registry backward compatibility. \line 3. Manages shared components and their clients. \line 4. Provides a facility for locating a file that supports a particular  component. \line 5. Manages volumes. \par\li0{\b Properties}\par\li180 {\uldb Services}{\v MsiConfigurationManager_Services}\line \par\li0{\b Methods}\par\li180 {\uldb RunScript}{\v MsiConfigurationManager_RunScript}\line \line {\uldb RegisterRollbackScript}{\v MsiConfigurationManager_RegisterRollbackScript}\line {\uldb UnregisterRollbackScript}{\v MsiConfigurationManager_UnregisterRollbackScript}\line {\uldb RollbackScripts}{\v MsiConfigurationManager_RollbackScripts}\line \line {\uldb RegisterProduct}{\v MsiConfigurationManager_RegisterProduct}\line {\uldb RegisterUser}{\v MsiConfigurationManager_RegisterUser}\line {\uldb UnregisterProduct}{\v MsiConfigurationManager_UnregisterProduct}\line \line {\uldb RegisterComponent}{\v MsiConfigurationManager_RegisterComponent}\line {\uldb UnregisterComponent}{\v MsiConfigurationManager_UnregisterComponent}\line \line {\uldb RegisterFolder}{\v MsiConfigurationManager_RegisterFolder}\line {\uldb IsFolderRemovable}{\v MsiConfigurationManager_IsFolderRemovable}\line {\uldb UnregisterFolder}{\v MsiConfigurationManager_UnregisterFolder}\line \line {\uldb DoInstall}{\v MsiConfigurationManager_DoInstall}\line \line {\uldb LockServer}{\v MsiConfigurationManager_LockServer}\line {\uldb UnlockServer}{\v MsiConfigurationManager_UnlockServer}\line {\uldb InstallFinalize}{\v MsiConfigurationManager_InstallFinalize}\line {\uldb SetLastUsedSource}{\v MsiConfigurationManager_SetLastUsedSource}\line \line \page #{\footnote MsiConfigurationManager_Services} ${\footnote MsiConfigurationManager.Services} +{\footnote MsiConfigurationManager:Services} K{\footnote SERVICES} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Services Property \line\tx360\tab\fs18\b0{\uldb MsiConfigurationManager Object}{\v MsiConfigurationManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The MsiServices object used by the Configuration Manager. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Services} \par{\i object}\line Required. The MsiConfigurationManager object. \page #{\footnote MsiConfigurationManager_ProductDatabasePath} ${\footnote MsiConfigurationManager.ProductDatabasePath} +{\footnote MsiConfigurationManager:ProductDatabasePath} K{\footnote ProductDatabasePath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b} This method is undocumented. \page #{\footnote MsiConfigurationManager_RunScript} ${\footnote MsiConfigurationManager.RunScript} +{\footnote MsiConfigurationManager:RunScript} K{\footnote RunScript} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RunScript Method \line\tx360\tab\fs18\b0{\uldb MsiConfigurationManager Object}{\v MsiConfigurationManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Runs an installation script. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RunScript({\i scriptFile, userToken, message})} \par{\i object}\line Required. The MsiConfigurationManager object. \par{\i\b scriptfile}\line Required. The full path (string) to an installation script file. \par{\i\b userToken}\line Required. Handle to the user to impersonate while executing the script. Pass 0 for no user impersonation. \par{\i\b message}\line Required. Any object supporting the {\uldb MsiMessage}{\v MsiMessage_Object}  interface. Installation progress will be reported via this object. \par\fi0\li0{\b Remarks}\par\li180 {\uldb Scriptfile format}{\v Server_ScriptFormat} \page #{\footnote MsiConfigurationManager_InstallFinalize} ${\footnote MsiConfigurationManager.InstallFinalize} +{\footnote MsiConfigurationManager:InstallFinalize} K{\footnote InstallFinalize} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b InstallFinalize Method \line\tx360\tab\fs18\b0{\uldb MsiConfigurationManager Object}{\v MsiConfigurationManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Rolls back the system to the given date, or purges the system of  backup files created before the given date. See   {\uldb MsiExecute.RollbackFinalize}{\MsiExecute_RollbackFinalize} for more info. Also removes in-progress information for the install if the install was successful or if the install  was rolled back. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .InstallFinalize({\i state, rollback, userToken, message})} \par{\i object}\line Required. The MsiConfigurationManager object. \par{\i\b state}\line Required. The return status of the last executed action. This value is used to determine  whether to roll back the system or to purge backup files. This value is an enumeration  iesEnum, as described in the {\uldb DoAction}{\v MsiEngine_DoAction} method.   \par{\i\b rollback}\line Required. True to rollback the install if {\i\b state} indicates failure or cancellation. \par{\i\b userToken}\line Required. Handle to the user to impersonate while rolling back. Pass 0 for no user impersonation. \par{\i\b message}\line Required. Any object supporting the {\uldb MsiMessage}{\v MsiMessage_Object}  interface. Rollback progress will be reported via this object. \page #{\footnote MsiConfigurationManager_LockServer} ${\footnote MsiConfigurationManager.LockServer} +{\footnote MsiConfigurationManager:LockServer} K{\footnote LockServer} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b LockServer Method \line\tx360\tab\fs18\b0{\uldb MsiConfigurationManager Object}{\v MsiConfigurationManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .LockServer({\i})} \par{\i object}\line Required. The MsiConfigurationManager object. \page #{\footnote MsiConfigurationManager_UnlockServer} ${\footnote MsiConfigurationManager.UnlockServer} +{\footnote MsiConfigurationManager:UnlockServer} K{\footnote UnlockServer} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b UnlockServer Method \line\tx360\tab\fs18\b0{\uldb MsiConfigurationManager Object}{\v MsiConfigurationManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .UnlockServer({\i})} \par{\i object}\line Required. The MsiConfigurationManager object. \page #{\footnote MsiConfigurationManager_SetLastUsedSource} ${\footnote MsiConfigurationManager.SetLastUsedSource} +{\footnote MsiConfigurationManager:SetLastUsedSource} K{\footnote SetLastUsedSource} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SetLastUsedSource Method \line\tx360\tab\fs18\b0{\uldb MsiConfigurationManager Object}{\v MsiConfigurationManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Sets the last used source for a product, optionally adding it to the product's source list. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SetLastUsedSource({\i strProductCode, strSource, fAddToList})} \par{\i object}\line Required. The MsiConfigurationManager object. \par{\i\b strProductCode}\line Required. The product code for the product whose source is being updated. \par{\i\b strPath}\line Required. The source to be added, in the form of a path (e.g. D:\\X\\Y, \\\\foo\\bar\\x\\y) (string) \par{\i\b fAddToList}\line Required. If true then the source is added to the list if it's not already there. (see Remarks for restrictions) \par\fi0\li0{\b Remarks}\par\li180 SetLastUsedSource only adds new sources if the following criteria are met:\line 1) The user is either an Admin or has the EnableBrowse policy value set to 1\line 2) The source is of a type allowed by the SearchOrder policy\line \page #{\footnote MsiConfigurationManager_RegisterRollbackScript} ${\footnote MsiConfigurationManager.RegisterRollbackScript} +{\footnote MsiConfigurationManager:RegisterRollbackScript} K{\footnote RegisterRollbackScript} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RegisterRollbackScript Method \line\tx360\tab\fs18\b0{\uldb MsiConfigurationManager Object}{\v MsiConfigurationManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Registers a rollback script with the configuration manager. The date and   time of the registration is saved along with the script file path. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RegisterRollbackScript({\i scriptFile})} \par{\i object}\line Required. The MsiConfigurationManager object. \par{\i\b scriptfile}\line Required. The full path (string) to a rollback script file. \par\fi0\li0{\b Remarks}\par\li180 Registration of a scriptfile that is already registered will overwrite the old  registration. \page #{\footnote MsiConfigurationManager_UnregisterRollbackScript} ${\footnote MsiConfigurationManager.UnregisterRollbackScript} +{\footnote MsiConfigurationManager:UnregisterRollbackScript} K{\footnote UnregisterRollbackScript} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b UnregisterRollbackScript Method \line\tx360\tab\fs18\b0{\uldb MsiConfigurationManager Object}{\v MsiConfigurationManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Unregisters a rollback script with the configuration manager. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .UnregisterRollbackScript({\i scriptFile})} \par{\i object}\line Required. The MsiConfigurationManager object. \par{\i\b scriptfile}\line Required. The full path (string) to a rollback script file. \par\fi0\li0{\b Remarks}\par\li180 Unregistration of a scriptfile that is not already registered will cause  no action to be taken. \page #{\footnote MsiConfigurationManager_RollbackScripts} ${\footnote MsiConfigurationManager.RollbackScripts} +{\footnote MsiConfigurationManager:RollbackScripts} K{\footnote RollbackScripts} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RollbackScripts Method \line\tx360\tab\fs18\b0{\uldb MsiConfigurationManager Object}{\v MsiConfigurationManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns an collection of strings that each contain the date that the rollback  script was generated and the name of the rollback script. The collection is restricted to the set of scripts that meet the specifed date restriction. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RollbackScripts({\i date, after})} \par{\i object}\line Required. The MsiConfigurationManager object. \par{\i\b date}\line Required. The date that, along with {\b after}, specifies  which rollback scripts should be in the collection. \par{\i\b after}\line Required. If {\b after} is true then the collection will contain all rollback   scripts registered on or after {\b date}. If {\b after} is false then the  collection will contain all rollback scripts registered on or before {\b date}. \par\fi0\li0{\b Remarks}\par\li180 The strings in the collection are of the following form:\line \tab MsiDate#scriptfilePath, e.g. "3043#C:\\windows\\aim\\rb5365.scr" \page #{\footnote MsiConfigurationManager_RegisterProduct} ${\footnote MsiConfigurationManager.RegisterProduct} +{\footnote MsiConfigurationManager:RegisterProduct} K{\footnote RegisterProduct} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RegisterProduct Method \line\tx360\tab\fs18\b0{\uldb MsiConfigurationManager Object}{\v MsiConfigurationManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Registers a product with the Configuration Manager. This supplements the product  information that was advertised. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RegisterProduct({\i productInfo})} \par{\i object}\line Required. The MsiConfigurationManager object. \par{\i\b productInfo}\line Required. A record containing the product information. See the Remarks section  for the record's details. \par\fi0\li0{\b Remarks}\par\li180 The record returned contains the following fields:\par \tab {\f1\i Field Number        }  {\i Field Contents}\line \tab {\f1 icmrpfProductKey         -} product code\line \tab {\f1 icmrpfDisplayName        -} ProductName property\line \tab {\f1 icmrpfVersionString      -} ProductVersion property\line \tab {\f1 icmrpfVersionMajorString -} From ProductVersion property\line \tab {\f1 icmrpfVersionMinorString -} From ProductVersion property\line \tab {\f1 icmrpfHelpLink           -} From SupportURL property\line \tab {\f1 icmrpfHelpTelephone      -} From SupportPhone property\line \tab {\f1 icmrpfInstallLocation    -} TBD -- Currently TARGETDIR property\line \tab {\f1 icmrpfInstallSource      -} TBD -- Currently SOURCEDIR property\line \tab {\f1 icmrpfInstallDate        -} String form of install date\line \tab {\f1 icmrpfPublisher          -} Manufacturer property\line \tab {\f1 icmrpfLocalPackage       -} cached database location\line \tab {\f1 icmrpfURLInfoAbout       -} SupportURL property\line \tab {\f1 icmrpfURLUpdateInfo      -} TBD\line \tab {\f1 icmrpfUninstallString    -} TBD\line \tab {\f1 icmrpfModifyString       -} msiexec /c {ProductCode} /qf\line \tab {\f1 icmrpfUninstallPath      -} msiexec /t {ProductCode} /qb\line \page #{\footnote MsiConfigurationManager_RegisterUser} ${\footnote MsiConfigurationManager.RegisterUser} +{\footnote MsiConfigurationManager:RegisterUser} K{\footnote RegisterUser} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RegisterUser Method \line\tx360\tab\fs18\b0{\uldb MsiConfigurationManager Object}{\v MsiConfigurationManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Registers user information for a registered product. This is separate from  RegisterProduct to allow the collection of user information to be deferred  until first-run, if desired. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RegisterUser({\i productKey, userInfo})} \par{\i object}\line Required. The MsiConfigurationManager object. \par{\i\b productKey}\line Required. The productKey for the product with which the user info is to be  associated \par{\i\b userInfo}\line Required. A record containing the user information. See the Remarks section  for the record's details. \par\fi0\li0{\b Remarks}\par\li180 The record returned contains the following fields:\par \tab {\f1\i Field Number    }  {\i Field Contents}\line \tab {\f1 icmrufOwner      -}  User name from UI or registry\line \tab {\f1 icmrufCompany    -}  Organization name from UI or registry\line \tab {\f1 icmrufProductId  -}  Generated PID, 23 characters including 3 dashes\line \page #{\footnote MsiConfigurationManager_RegisterComponent} ${\footnote MsiConfigurationManager.RegisterComponent} +{\footnote MsiConfigurationManager:RegisterComponent} K{\footnote RegisterComponent} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RegisterComponent Method \line\tx360\tab\fs18\b0{\uldb MsiConfigurationManager Object}{\v MsiConfigurationManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Registers an component.  \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RegisterComponent({\i componentCode, keyPath,  supersededComponents})} \par{\i object}\line Required. The MsiConfigurationManager object. \par{\i\b componentCode}\line Required. The GUID that represents the component. \par{\i\b keyPath}\line The path to the key file, registry key, or folder for this component. \par{\i\b supersededComponents}\line Optional. An MsiRecord containing the componentIds of components that are  superseded by this component. \page #{\footnote MsiConfigurationManager_UnregisterComponent} ${\footnote MsiConfigurationManager.UnregisterComponent} +{\footnote MsiConfigurationManager:UnregisterComponent} K{\footnote UnregisterComponent} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b UnregisterComponent Method \line\tx360\tab\fs18\b0{\uldb MsiConfigurationManager Object}{\v MsiConfigurationManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Unregisters a component. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .UnregisterComponent({\i productKey, componentCode})} \par{\i object}\line Required. The MsiConfigurationManager object. \par{\i\b componentCode}\line Required. The GUID that represents the component. \page #{\footnote MsiComponentManager_Object} ${\footnote MsiComponentManager Object} K{\footnote MsiComponentManager} +{\footnote Class:MsiComponentManager} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiComponentManager Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The Component Manager performs the follows tasks:\par \line 1. Supports run-time run-time installation and uninstallation of components \line 2. Allows an application's components to be dynamically located at run-time,  based on currently available components. \page #{\footnote MsiConfigurationManager_RegisterFolder} ${\footnote MsiConfigurationManager.RegisterFolder} +{\footnote MsiConfigurationManager:RegisterFolder} K{\footnote RegisterFolder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RegisterFolder Method \line\tx360\tab\fs18\b0{\uldb MsiConfigurationManager Object}{\v MsiConfigurationManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Registers a folder with the Configuration Manager. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RegisterFolder({\i path, fExplicitCreation})} \par{\i object}\line Required. The MsiConfigurationManager object. \par{\i\b path}\line Required. A path object pointing to the folder to be registered. \par{\i\b component}\line Required. A bool indicating whether the component was explicitly created. \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiConfigurationManager_IsFolderRemovable} ${\footnote MsiConfigurationManager.IsFolderRemovable} +{\footnote MsiConfigurationManager:IsFolderRemovable} K{\footnote IsFolderRemovable} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b IsFolderRemovable Method \line\tx360\tab\fs18\b0{\uldb MsiConfigurationManager Object}{\v MsiConfigurationManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Registers a folder with the Configuration Manager. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .IsFolderRemovable({\i path, fExplicit})} \par{\i object}\line Required. The MsiConfigurationManager object. \par{\i\b path}\line Required. A path object pointing to the folder to be registered. \par{\i\b amComponent}\line Required. Required. A bool indicating whether the component was explicitly created. \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiConfigurationManager_UnregisterFolder} ${\footnote MsiConfigurationManager.UnregisterFolder} +{\footnote MsiConfigurationManager:UnregisterFolder} K{\footnote UnregisterFolder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b UnregisterFolder Method \line\tx360\tab\fs18\b0{\uldb MsiConfigurationManager Object}{\v MsiConfigurationManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Unregisters a folder with the Configuration Manager. Nothing is done if  the folder wasn't registered. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .UnregisterFolder({\i path})} \par{\i object}\line Required. The MsiConfigurationManager object. \par{\i\b path}\line Required. A path object pointing to the folder to be unregistered. \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiConfigurationManager_UnregisterProduct} ${\footnote MsiConfigurationManager.UnregisterProduct} +{\footnote MsiConfigurationManager:UnregisterProduct} K{\footnote UnregisterProduct} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b UnregisterProduct Method \line\tx360\tab\fs18\b0{\uldb MsiConfigurationManager Object}{\v MsiConfigurationManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Unregisters a product with the Configuration Manager. Removes all references  to the product from the Configuration Database, but only if no client products remain.  Returns a boolean indicating whether any additional clients remain. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .UnregisterProduct({\i productKey, parentKey})} \par{\i object}\line Required. The MsiConfigurationManager object. \par{\i\b productKey}\line Required. The product key identifying the product to be unregistered. \par{\i\b parentKey}\line Optional. Only if a nested install: the product key of parent product. \par\fi0\li0{\b Remarks}\par\li180 A non-nested install is considered as having the user as a client, such that when  a parent product installs it again as a child, it will be held by two clients,  and not released until both the parent and the standalone (via Add/Remove or API) goes away. \page #{\footnote MsiConfigurationManager_DoInstall} ${\footnote MsiConfigurationManager.DoInstall} +{\footnote MsiConfigurationManager:DoInstall} K{\footnote DoInstall} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DoInstall Method \line\tx360\tab\fs18\b0{\uldb MsiConfigurationManager Object}{\v MsiConfigurationManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Runs an install. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .DoInstall()} \par{\i object}\line Required. The MsiConfigurationManager object. \par{\i product}\line Required. Product code or path to database . \par{\i action}\line Optional. The action to run \par{\i object}\line Optional. Property=Value string. \par{\i object}\line Required. Message object for UI callback. \par\fi0\li0{\b Remarks}\par\li180 \page
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\help\handler.rtf ===
{\rtf1\ansi {\fonttbl{\f0\fswiss Helv;}{\f1\fmodern Courier New;}} {\colortbl;} \fs20 #{\footnote Dialog_Overview} ${\footnote Dialog Overview} K{\footnote Dialog} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Dialog Overview \line\fs18\b0\tx2400\tab{\uldb Msi Objects}{\v Msi_Objects} \tx4500\tx6600\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par} The following dialog types are defined by the Microsoft Installer.\line \par\li0{\b Dialog Types}\par\li180 {\uldb Browse}{\v DialogType_Browse}\line {\uldb Standard}{\v DialogType_Standard}\line \line Some special purpose dialogs require some communication among the controls of the dialog or some other special handling. The following list contains some of the more common cases. These pages may be used to author these dialogs as well as hints how to compose some more complicated dialogs. \par\li0{\b Special Dialogs}\par\li180 {\uldb Browse Dialog}{\v SpecialDialog_Browse}\line {\uldb Cancel Dialog}{\v SpecialDialog_Cancel}\line {\uldb DiskCost Dialog}{\v SpecialDialog_DiskCost}\line {\uldb Error Dialog}{\v SpecialDialog_Error}\line {\uldb Exit Dialog}{\v SpecialDialog_Exit}\line {\uldb FatalError Dialog}{\v SpecialDialog_FatalError}\line {\uldb FilesInUse Dialog}{\v SpecialDialog_FilesInUse}\line {\uldb LicenseAgreement Dialog}{\v SpecialDialog_LicenseAgreement}\line {\uldb Selection Dialog}{\v SpecialDialog_Selection}\line {\uldb UserExit Dialog}{\v SpecialDialog_UserExit}\line \line Different attributes of a dialog can be read or set using the {\uldb Attribute}{\v MsiDialog_Attribute} method. \par\li0{\b Dialog Attributes}\par\li180 {\uldb AddingControls}{\v DialogAttribute_AddingControls}\line {\uldb Argument}{\v DialogAttribute_Argument}\line {\uldb ClientRect}{\v DialogAttribute_ClientRect}\line {\uldb ControlsCount}{\v DialogAttribute_ControlsCount}\line {\uldb ControlsKeyInt}{\v DialogAttribute_ControlsKeyInt}\line {\uldb ControlsKeyString}{\v DialogAttribute_ControlsKeyString}\line {\uldb ControlsNext}{\v DialogAttribute_ControlsNext}\line {\uldb ControlsPrev}{\v DialogAttribute_ControlsPrev}\line {\uldb ControlsProperty}{\v DialogAttribute_ControlsProperty}\line {\uldb CurrentControl}{\v DialogAttribute_CurrentControl}\line {\uldb DefaultButton}{\v DialogAttribute_DefaultButton}\line {\uldb Error}{\v DialogAttribute_Error}\line {\uldb EventInt}{\v DialogAttribute_EventInt}\line {\uldb EventString}{\v DialogAttribute_EventString}\line {\uldb FullSize}{\v DialogAttribute_FullSize}\line {\uldb HasControls}{\v DialogAttribute_HasControls}\line {\uldb Height}{\v DialogAttribute_Height}\line {\uldb InPlace}{\v DialogAttribute_InPlace}\line {\uldb KeepModeless}{\v DialogAttribute_KeepModeless}\line {\uldb KeyInt}{\v DialogAttribute_KeyInt}\line {\uldb KeyString}{\v DialogAttribute_KeyString}\line {\uldb Locked}{\v DialogAttribute_Locked}\line {\uldb Modal}{\v DialogAttribute_Modal}\line {\uldb Palette}{\v DialogAttribute_Palette}\line {\uldb Position}{\v DialogAttribute_Position}\line {\uldb Preview}{\v DialogAttribute_Preview}\line {\uldb RefCount}{\v DialogAttribute_RefCount}\line {\uldb Running}{\v DialogAttribute_Running}\line {\uldb Showing}{\v DialogAttribute_Showing}\line {\uldb Text}{\v DialogAttribute_Text}\line {\uldb ToolTip}{\v DialogAttribute_ToolTip}\line {\uldb UseCustomPalette}{\v DialogAttribute_UseCustomPalette}\line {\uldb Width}{\v DialogAttribute_Width}\line {\uldb WindowHandle}{\v DialogAttribute_WindowHandle}\line {\uldb X}{\v DialogAttribute_X}\line {\uldb Y}{\v DialogAttribute_Y}\line \line At the time of the creation of a dialog several attributes can be selected by setting certain Style bits. \par\li0{\b Dialog Style Bits}\par\li180 {\uldb Browse}{\v DialogStyle_Browse} = 131072 (0x0002000)\line {\uldb Error}{\v DialogStyle_Error} = 65536 (0x00010000)\line {\uldb KeepModeless}{\v DialogStyle_KeepModeless} = 16 (0x00000010)\line {\uldb Minimize}{\v DialogStyle_Minimize} = 4 (0x00000004)\line {\uldb Modal}{\v DialogStyle_Modal} = 2 (0x00000002)\line {\uldb TrackDiskSpace}{\v DialogStyle_TrackDiskSpace} = 32 (0x00000020)\line {\uldb UseCustomPalette}{\v DialogStyle_UseCustomPalette} = 64 (0x000040)\line {\uldb Visible}{\v DialogStyle_Visible} = 1 (0x00000001)\line \page #{\footnote Control_Overview} ${\footnote Control Overview} K{\footnote Control; Active Control; Inert Control} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Control Overview \line\fs18\b0\tx2400\tab{\uldb Msi Objects}{\v Msi_Objects} \tx4500\tx6600\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par} The following control types are defined by the Microsoft Installer.  The controls are divided into two major groups. The {\b Active Controls} are linked to some property. These controls are authored with some property. When the control is created it shows the initial value of the property. The user can change the value of the property by interacting with the control.  The {\b Inert Controls} are not linked to a property, they change no property value. \par\li0{\b Inert Controls}\par\li180 {\uldb Billboard}{\v ControlType_Billboard}\line {\uldb Bitmap}{\v ControlType_Bitmap}\line {\uldb GroupBox}{\v ControlType_GroupBox}\line {\uldb Icon}{\v ControlType_Icon}\line {\uldb ProgressBar}{\v ControlType_ProgressBar}\line {\uldb PushButton}{\v ControlType_PushButton}\line {\uldb ScrollableText}{\v ControlType_ScrollableText}\line {\uldb Text}{\v ControlType_Text}\line {\uldb VolumeCostList}{\v ControlType_VolumeCostList}\line \par\li0{\b Active Controls}\par\li180 {\uldb CheckBox}{\v ControlType_CheckBox}\line {\uldb ComboBox}{\v ControlType_ComboBox}\line {\uldb DirectoryCombo}{\v ControlType_DirectoryCombo}\line {\uldb DirectoryList}{\v ControlType_DirectoryList}\line {\uldb Edit}{\v ControlType_Edit}\line {\uldb ListBox}{\v ControlType_ListBox}\line {\uldb ListView}{\v ControlType_ListView}\line {\uldb MaskedEdit}{\v ControlType_MaskedEdit}\line {\uldb PathEdit}{\v ControlType_PathEdit}\line {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup}\line {\uldb SelectionTree}{\v ControlType_SelectionTree}\line {\uldb VolumeSelectCombo}{\v ControlType_VolumeSelectCombo}\line \line Different attributes of a control can be read or set using the {\uldb Attribute}{\v MsiControl_Attribute} method. \par\li0{\b Control Attributes}\par\li180 {\uldb BillboardName}{\v ControlAttribute_Billboardname}\line {\uldb Bitmap}{\v ControlAttribute_Bitmap}\line {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line {\uldb Default}{\v ControlAttribute_Default}\line {\uldb Enabled}{\v ControlAttribute_Enabled}\line {\uldb HasBorder}{\v ControlAttribute_HasBorder}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb Help}{\v ControlAttribute_Help}\line {\uldb Icon}{\v ControlAttribute_Icon}\line {\uldb Image}{\v ControlAttribute_Image}\line {\uldb ImageHandle}{\v ControlAttribute_ImageHandle}\line {\uldb Indirect}{\v ControlAttribute_Indirect}\line {\uldb IndirectPropertyName}{\v ControlAttribute_IndirectPropertyName}\line {\uldb Integer}{\v ControlAttribute_Integer}\line {\uldb ItemsCount}{\v ControlAttribute_ItemsCount}\line {\uldb ItemsHandle}{\v ControlAttribute_ItemsHandle}\line {\uldb ItemsHeight}{\v ControlAttribute_ItemsHeight}\line {\uldb ItemsText}{\v ControlAttribute_ItemsText}\line {\uldb ItemsValue}{\v ControlAttribute_ItemsValue}\line {\uldb ItemsWidth}{\v ControlAttribute_ItemsWidth}\line {\uldb ItemsX}{\v ControlAttribute_ItemsX}\line {\uldb ItemsY}{\v ControlAttribute_ItemsY}\line {\uldb KeyInt}{\v ControlAttribute_KeyInt}\line {\uldb KeyString}{\v ControlAttribute_KeyString}\line {\uldb Limit}{\v ControlAttribute_Limit}\line {\uldb OriginalValue}{\v ControlAttribute_OriginalValue}\line {\uldb Position}{\v ControlAttribute_Position}\line {\uldb Progress}{\v ControlAttribute_Progress}\line {\uldb PropertyName}{\v ControlAttribute_PropertyName}\line {\uldb PropertyValue}{\v ControlAttribute_PropertyValue}\line {\uldb PushLike}{\v ControlAttribute_PushLike}\line {\uldb RefCount}{\v ControlAttribute_RefCount}\line {\uldb Sunken}{\v ControlAttribute_Sunken}\line {\uldb Text}{\v ControlAttribute_Text}\line {\uldb Transparent}{\v ControlAttribute_Transparent}\line {\uldb Visible}{\v ControlAttribute_Visible}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb WindowHandle}{\v ControlAttribute_WindowHandle}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line \line At the time of the creation of a control several attributes can be selected by setting certain Style bits. \par\li0{\b Control Style Bits}\par\li180 {\uldb Bitmap}{\v ControlStyle_Bitmap} = 262144 (0x00040000)\line {\uldb CDROMVolume}{\v ControlStyle_CDROMVolume} = 524288 (0x00080000)\line {\uldb ComboList}{\v ControlStyle_ComboList} = 131072 (0x00020000)\line {\uldb Enabled}{\v ControlStyle_Enabled} = 2 (0x00000002)\line {\uldb FixedSize}{\v ControlStyle_FixedSize} = 1048576 (0x00100000)\line {\uldb FixedVolume}{\v ControlStyle_FixedVolume} = 131072 (0x00020000)\line {\uldb FloppyVolume}{\v ControlStyle_FloppyVolume} = 2097152 (0x00200000)\line {\uldb HasBorder}{\v ControlStyle_HasBorder} = 16777216 (0x01000000)\line {\uldb Icon}{\v ControlStyle_Icon} = 524288 (0x00080000)\line {\uldb IconSize}{\v ControlStyle_IconSize} 2097152 (0x00200000),  4194304 (0x00400000)\line {\uldb ImageHandle}{\v ControlStyle_ImageHandle} = 65536 (0x00010000)\line {\uldb Indirect}{\v ControlStyle_Indirect} = 8 (0x00000008)\line {\uldb Integer}{\v ControlStyle_Integer} = 16 (0x00000010)\line {\uldb Progress95}{\v ControlStyle_Progress95} = 65536 (0x00010000)\line {\uldb PushLike}{\v ControlStyle_PushLike} = 131072 (0x00020000)\line {\uldb RAMDiskVolume}{\v ControlStyle_RAMDiskVolume} = 1048576 (0x00100000)\line {\uldb RemoteVolume}{\v ControlStyle_RemoteVolume} = 262144 (0x00040000)\line {\uldb RemovableVolume}{\v ControlStyle_RemovableVolume} = 65536 (0x00010000)\line {\uldb Sorted}{\v ControlStyle_Sorted} = 65536 (0x00010000)\line {\uldb SplitPath}{\v ControlStyle_SplitPath} =  33554432 (0x02000000)\line {\uldb Sunken}{\v ControlStyle_Sunken} = 4 (0x00000004)\line {\uldb Transparent}{\v ControlStyle_Transparent} = 65536 (0x00010000)\line {\uldb Visible}{\v ControlStyle_Visible} = 1 (0x00000001)\line \page #{\footnote ControlEvent_Overview} ${\footnote ControlEvent Overview} K{\footnote ControlEvent} +{\footnote ControlEvent:Overview} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ControlEvent Overview \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Controls on the same dialog can communicate with each other by means of ControlEvents.\line Each ControlEvent has one publisher (a control or the Handler) and can have several subscribers. The kind of ControlEvents published by a control are determined by the type of the control. On the other hand theoreticaly any control can subscribe to any ControlEvent, although many combinations are not practical. \line A control can subscribe to a ControlEvent two ways.\line If a control is listed in the {\uldb EventMapping table}{\v _msi_EventMapping_Table@msi.hlp} with a ControlEvent, it describes that when the ControlEvent is published, which {\uldb attribute}{\v Control_Overview} of the control has to be changed.\line If a control is listed in the {\uldb ControlEvent table}{\v _msi_ControlEvent_Table@msi.hlp} with a ControlEvent, it means that activating the control (pushing the button) will trigger a ControlEvent with the described argument.\line A custom control can publish its own ControlEvents and other controls (custom or regular) can subscribe to them.\line  The publisher of a ControlEvent can hide/show or enable/disable its subscribers when its state requires it.\line It is perfectly reasonable to have a control on a dialog that publishes some ControlEvent but have no subscribers to it. On the other hand if a control subscribes to a ControlEvent that is not published by the Handler and no publishing control is present on the same dialog, it may result in an error (especially if the control tries to trigger that event). \par\li0{\b The Following ControlEvents Are Currently Supported}\par\li180 {\uldb ActionData}{\v ControlEvent_ActionData}\line {\uldb ActionProgress}{\v ControlEvent_ActionProgress}\line {\uldb ActionText}{\v ControlEvent_ActionText}\line {\uldb AddLocal}{\v ControlEvent_AddLocal}\line {\uldb AddSource}{\v ControlEvent_AddSource}\line {\uldb CheckExistingPath}{\v ControlEvent_CheckExistingPath}\line {\uldb CheckExistingTargetPath}{\v ControlEvent_CheckExistingTargetPath}\line {\uldb CheckPath}{\v ControlEvent_CheckPath}\line {\uldb CheckTargetPath}{\v ControlEvent_CheckTargetPath}\line {\uldb DirectoryComboPath}{\v ControlEvent_DirectoryComboPath}\line {\uldb DirectoryListNew}{\v ControlEvent_DirectoryListNew}\line {\uldb DirectoryListPath}{\v ControlEvent_DirectoryListPath}\line {\uldb DirectoryListUp}{\v ControlEvent_DirectoryListUp}\line {\uldb EndDialog}{\v ControlEvent_EndDialog}\line {\uldb NewDialog}{\v ControlEvent_NewDialog}\line {\uldb Reinstall}{\v ControlEvent_Reinstall}\line {\uldb ReinstallMode}{\v ControlEvent_ReinstallMode}\line {\uldb Remove}{\v ControlEvent_Remove}\line {\uldb Reset}{\v ControlEvent_Reset}\line {\uldb SelectionAction}{\v ControlEvent_SelectionAction}\line {\uldb SelectionBrowse}{\v ControlEvent_SelectionBrowse}\line {\uldb SelectionDescription}{\v ControlEvent_SelectionDescription}\line {\uldb SelectionIcon}{\v ControlEvent_SelectionIcon}\line {\uldb SelectionPath}{\v ControlEvent_SelectionPath}\line {\uldb SelectionPathOn}{\v ControlEvent_SelectionPathOn}\line {\uldb SelectionSize}{\v ControlEvent_SelectionSize}\line {\uldb SetInstallLevel}{\v ControlEvent_SetInstallLevel}\line {\uldb SetPath}{\v ControlEvent_SetPath}\line {\uldb SetTargetPath}{\v ControlEvent_SetTargetPath}\line {\uldb SetProperty}{\v ControlEvent_SetProperty}\line {\uldb SpawnDialog}{\v ControlEvent_SpawnDialog}\line {\uldb ValidateProductID}{\v ControlEvent_ValidateProductID}\line \page #{\footnote ControlType_Billboard} ${\footnote ControlType Billboard} K{\footnote Billboard} +{\footnote ControlType:Billboard} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Billboard Control \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This control plays the billboards based on progress messages. The billboards are composed of individual controls that are added and later removed from the dialog. \par\li0{\b Property}\par\li180 There can be no property associated with this control. \par\li0{\b Valid Style Bits}\par\li180 None. \par\li0{\b Valid Control Attributes}\par\li180 {\uldb BillboardName}{\v ControlAttribute_BillboardName}\line {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb Help}{\v ControlAttribute_Help}\line {\uldb KeyInt}{\v ControlAttribute_KeyInt}\line {\uldb KeyString}{\v ControlAttribute_KeyString}\line {\uldb Position}{\v ControlAttribute_Position}\line {\uldb RefCount}{\v ControlAttribute_RefCount}\line {\uldb Text}{\v ControlAttribute_Text}\line {\uldb Visible}{\v ControlAttribute_Visible}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb WindowHandle}{\v ControlAttribute_WindowHandle}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line \par\li0{\b Control Events Published}\par\li180 \par\li0{\b Can Take Focus}\par\li180 \line \par\li0{\b Windows Implementation}\par\li180 This control has no window of its own. \page #{\footnote ControlType_CheckBox} ${\footnote ControlType CheckBox} K{\footnote CheckBox} +{\footnote ControlType:CheckBox} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CheckBox Control \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This control is a simple two state check box. If the {\uldb CheckBox table}{\v _msi_CheckBox_Table@msi.hlp}  exists and specifies a value for the property associated with the checkbox, the property is set to this value when the checkbox is on, to null otherwise. If there is no such table, or it does not specify a value for this property, but the associated property has an initial value, the control remembers it and initaly drawn as selected.  When the control is unchecked, the property is set to NULL. If the check box is rechecked, it returns to its original value. If the property does not have an  original value, it is set to "1" when the control is checked. \par\li0{\b Property}\par\li180 The property associated with this control can be integer or string valued. \par\li0{\b Valid Style Bits}\par\li180 {\uldb Bitmap}{\v ControlStyle_Bitmap}\line {\uldb Enabled}{\v ControlStyle_Enabled}\line {\uldb FixedSize}{\v ControlStyle_FixedSize}\line {\uldb Icon}{\v ControlStyle_Icon}\line {\uldb IconSize}{\v ControlStyle_IconSize}\line {\uldb ImageHandle}{\v ControlStyle_ImageHandle}\line {\uldb Indirect}{\v ControlStyle_Indirect}\line {\uldb Integer}{\v ControlStyle_Integer}\line {\uldb PushLike}{\v ControlStyle_PushLike}\line {\uldb Sunken}{\v ControlStyle_Sunken}\line {\uldb Visible}{\v ControlStyle_Visible}\line \par\li0{\b Valid Control Attributes}\par\li180 {\uldb Bitmap}{\v ControlAttribute_Bitmap}\line {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line {\uldb Default}{\v ControlAttribute_Default}\line {\uldb Enabled}{\v ControlAttribute_Enabled}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb Help}{\v ControlAttribute_Help}\line {\uldb Icon}{\v ControlAttribute_Icon}\line {\uldb Indirect}{\v ControlAttribute_Indirect}\line {\uldb IndirectPropertyName}{\v ControlAttribute_IndirectPropertyName}\line {\uldb Integer}{\v ControlAttribute_Integer}\line {\uldb KeyInt}{\v ControlAttribute_KeyInt}\line {\uldb KeyString}{\v ControlAttribute_KeyString}\line {\uldb OriginalValue}{\v ControlAttribute_OriginalValue}\line {\uldb Position}{\v ControlAttribute_Position}\line {\uldb PropertyName}{\v ControlAttribute_PropertyName}\line {\uldb PropertyValue}{\v ControlAttribute_PropertyValue}\line {\uldb PushLike}{\v ControlAttribute_PushLike}\line {\uldb RefCount}{\v ControlAttribute_RefCount}\line {\uldb Sunken}{\v ControlAttribute_Sunken}\line {\uldb Text}{\v ControlAttribute_Text}\line {\uldb Visible}{\v ControlAttribute_Visible}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb WindowHandle}{\v ControlAttribute_WindowHandle}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line \par\li0{\b Control Events Published}\par\li180 \par\li0{\b Can Take Focus}\par\li180 Yes\line \par\li0{\b Windows Implementation}\par\li180 The control is created with the "BUTTON" class.\line It has the BS_CHECKBOX, WS_TABSTOP, WS_GROUP, WS_CHILD and BS_MULTILINE styles.\line If the {\uldb PushLike}{\v ControlStyle_PushLike} style is set it has the BS_PUSHLIKE style.\line If the {\uldb Bitmap}{\v ControlStyle_Bitmap} style is set it has the BS_BITMAP style.\line If the {\uldb Icon}{\v ControlStyle_Icon} style is set it has the BS_ICON style.\line \page #{\footnote ControlType_ComboBox} ${\footnote ControlType ComboBox} K{\footnote ComboBox} +{\footnote ControlType:ComboBox} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ComboBox Control \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This control is a dop down combo box with an edit field. It makes possible to list a predefined list of values and also allows for the user to enter some new value.  It reads the possible values from the {\uldb ComboBox Table}{\v _ini_ComboBox_Table@msi.hlp}. If the sorted style is set, the items are displayed according the {\b Ordering} column of the table.  If the style is not set, that column is ignored and the items are displayed in alphabetical order.\line The length of the text that can be entered can be limited by putting a number from 0 to 2147483646 in curly braces at the beginning of the Text field in the {\uldb Control Table}{\v _msi_Control_Table@msi.hlp}.  For example if the text field starts with \{80\}, the length of the string is limited at 80 characters. If no such limit is supplied in the table, or if 0 is specified, the length is set to the maximum possible (2147483646 characters). A negative or non-numerical value will generate an error.\par\li0{\b Property}\par\li180 The property associated with this control can be integer or string valued. \par\li0{\b Valid Style Bits}\par\li180 {\uldb ComboList}{\v ControlStyle_ComboList}\line {\uldb Enabled}{\v ControlStyle_Enabled}\line {\uldb Indirect}{\v ControlStyle_Indirect}\line {\uldb Integer}{\v ControlStyle_Integer}\line {\uldb Sorted}{\v ControlStyle_Sorted}\line {\uldb Sunken}{\v ControlStyle_Sunken}\line {\uldb Visible}{\v ControlStyle_Visible}\line \par\li0{\b Valid Control Attributes}\par\li180 {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line {\uldb Default}{\v ControlAttribute_Default}\line {\uldb Enabled}{\v ControlAttribute_Enabled}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb Help}{\v ControlAttribute_Help}\line {\uldb Indirect}{\v ControlAttribute_Indirect}\line {\uldb IndirectPropertyName}{\v ControlAttribute_IndirectPropertyName}\line {\uldb Integer}{\v ControlAttribute_Integer}\line {\uldb ItemsCount}{\v ControlAttribute_ItemsCount}\line {\uldb ItemsText}{\v ControlAttribute_ItemsText}\line {\uldb ItemsValue}{\v ControlAttribute_ItemsValue}\line {\uldb KeyInt}{\v ControlAttribute_KeyInt}\line {\uldb KeyString}{\v ControlAttribute_KeyString}\line {\uldb Limit}{\v ControlAttribute_Limit}\line {\uldb OriginalValue}{\v ControlAttribute_OriginalValue}\line {\uldb Position}{\v ControlAttribute_Position}\line {\uldb PropertyName}{\v ControlAttribute_PropertyName}\line {\uldb PropertyValue}{\v ControlAttribute_PropertyValue}\line {\uldb RefCount}{\v ControlAttribute_RefCount}\line {\uldb Sunken}{\v ControlAttribute_Sunken}\line {\uldb Text}{\v ControlAttribute_Text}\line {\uldb Visible}{\v ControlAttribute_Visible}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb WindowHandle}{\v ControlAttribute_WindowHandle}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line \par\li0{\b Control Events Published}\par\li180 \par\li0{\b Can Take Focus}\par\li180 Windows: Yes\line \par\li0{\b Windows Implementation}\par\li180 The control is created with the "COMBOBOX" class with the CBS_AUTOHSCROLL, WS_TABSTOP, WS_GROUP, WS_CHILD styles. If the {\uldb ComboList}{\v ControlStyle_ComboList} style bit is on, it also has the CBS_DROPDOWNLIST style, otherwise it has the CBS_DROPDOWN style.\line If the {\uldb Sorted}{\v ControlStyle_Sorted} style is set, it also has the CBS_SORT style. \page #{\footnote ControlType_DirectoryCombo} ${\footnote ControlType DirectoryCombo} K{\footnote DirectoryCombo} +{\footnote ControlType:DirectoryCombo} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DirectoryCombo Control \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This is a special control designed for use on a browse dialog.  It is designed to be used with a {\uldb PathEdit}{\v ControlType_PathEdit} and {\uldb DirectoryList}{\v ControlType_DirectoryList} control on the same dialog.  It lets the user select the main part of a path (everything except the last segment). It displays the available volumes in an alphabetical order and the steps of the currently  displayed path in a hierarchical way. If the main part of the currently selected path contains any folders that are not existant at present time, those are displayed with a different icon.  The property associated with this control has to have an initial value, and this value has to contain at least two steps (a volume and at least one level below).  The selection of the initial style bits determines what kind of volumes are listed. \par\li0{\b Property}\par\li180 The property associated with this control can be only string valued.  \par\li0{\b Valid Style Bits}\par\li180 {\uldb CDROMVolume}{\v ControlStyle_CDROMVolume}\line {\uldb Enabled}{\v ControlStyle_Enabled}\line {\uldb FixedVolume}{\v ControlStyle_FixedVolume}\line {\uldb FloppyVolume}{\v ControlStyle_FloppyVolume}\line {\uldb Indirect}{\v ControlStyle_Indirect}\line {\uldb RAMDiskVolume}{\v ControlStyle_RAMDiskVolume}\line {\uldb RemoteVolume}{\v ControlStyle_RemoteVolume}\line {\uldb RemovableVolume}{\v ControlStyle_RemovableVolume}\line {\uldb SplitPath}{\v ControlStyle_SplitPath}\line {\uldb Sunken}{\v ControlStyle_Sunken}\line {\uldb Visible}{\v ControlStyle_Visible}\line \par\li0{\b Valid Control Attributes}\par\li180 {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line {\uldb Default}{\v ControlAttribute_Default}\line {\uldb Enabled}{\v ControlAttribute_Enabled}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb Help}{\v ControlAttribute_Help}\line {\uldb Indirect}{\v ControlAttribute_Indirect}\line {\uldb IndirectPropertyName}{\v ControlAttribute_IndirectPropertyName}\line {\uldb KeyInt}{\v ControlAttribute_KeyInt}\line {\uldb KeyString}{\v ControlAttribute_KeyString}\line {\uldb OriginalValue}{\v ControlAttribute_OriginalValue}\line {\uldb Position}{\v ControlAttribute_Position}\line {\uldb PropertyName}{\v ControlAttribute_PropertyName}\line {\uldb PropertyValue}{\v ControlAttribute_PropertyValue}\line {\uldb RefCount}{\v ControlAttribute_RefCount}\line {\uldb Sunken}{\v ControlAttribute_Sunken}\line {\uldb Text}{\v ControlAttribute_Text}\line {\uldb Visible}{\v ControlAttribute_Visible}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb WindowHandle}{\v ControlAttribute_WindowHandle}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line \par\li0{\b Control Events Published}\par\li180 {\uldb DirectoryComboPath}{\v ControlEvent_DirectoryComboPath} \par\li0{\b Can Take Focus}\par\li180 Windows: Yes\line \par\li0{\b Windows Implementation}\par\li180 The control is created with the "COMBOBOX" class with the CBS_DROPDOWNLIST, CBS_OWNERDRAWFIXED, CBS_HASSTRINGS, WS_CHILD, WS_GROUP, WS_TABSTOP and WS_VSCROLL styles.\line \page #{\footnote ControlType_DirectoryList} ${\footnote ControlType DirectoryList} K{\footnote DirectoryList} +{\footnote ControlType:DirectoryList} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DirectoryList Control \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This is a special control designed for use on a browse dialog.  It is designed to be used with a {\uldb PathEdit}{\v ControlType_PathEdit} and {\uldb DirectoryCombo}{\v ControlType_DirectoryCombo} control on the same dialog.  It shows the user the folders below the main part of a path (everything except the last segment). It displays the folders below the main part of the currently selected path. If the list contains  any folders that are not existant at present time, those are displayed with a different icon.  The property associated with this control has to have an initial value, and this value has to contain at least two steps (a volume and at least one level below).   The primary goal of this control is to let the user select a subfolder of the current selection. With some additional buttons it also lets the user select a new phantom folder in current selection or step up one step  in the path. If the user hits the create new folder button in folder where there is a phantom folder already, this folder is selected for editing instead of creating a second phantom folder.  \par\li0{\b Property}\par\li180 The property associated with this control can be only string valued. \par\li0{\b Valid Style Bits}\par\li180 {\uldb Enabled}{\v ControlStyle_Enabled}\line {\uldb Indirect}{\v ControlStyle_Indirect}\line {\uldb SplitPath}{\v ControlStyle_SplitPath}\line {\uldb Sunken}{\v ControlStyle_Sunken}\line {\uldb Visible}{\v ControlStyle_Visible}\line \par\li0{\b Valid Control Attributes}\par\li180 {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line {\uldb Default}{\v ControlAttribute_Default}\line {\uldb Enabled}{\v ControlAttribute_Enabled}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb Help}{\v ControlAttribute_Help}\line {\uldb Indirect}{\v ControlAttribute_Indirect}\line {\uldb IndirectPropertyName}{\v ControlAttribute_IndirectPropertyName}\line {\uldb KeyInt}{\v ControlAttribute_KeyInt}\line {\uldb KeyString}{\v ControlAttribute_KeyString}\line {\uldb OriginalValue}{\v ControlAttribute_OriginalValue}\line {\uldb Position}{\v ControlAttribute_Position}\line {\uldb PropertyName}{\v ControlAttribute_PropertyName}\line {\uldb PropertyValue}{\v ControlAttribute_PropertyValue}\line {\uldb RefCount}{\v ControlAttribute_RefCount}\line {\uldb Sunken}{\v ControlAttribute_Sunken}\line {\uldb Text}{\v ControlAttribute_Text}\line {\uldb Visible}{\v ControlAttribute_Visible}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb WindowHandle}{\v ControlAttribute_WindowHandle}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line \par\li0{\b Control Events Published}\par\li180 {\uldb DirectoryListNew}{\v ControlEvent_DirectoryListNew}\line {\uldb DirectoryListPath}{\v ControlEvent_DirectoryListPath}\line {\uldb DirectoryListUp}{\v ControlEvent_DirectoryListUp}\line \par\li0{\b Can Take Focus}\par\li180 Windows: Yes\line \par\li0{\b Related Strings in the {\uldb UIText Table}{\v _msi_UIText_Table@msi.hlp}}\par\li180 {\b NewFolder} The default name of a newly created folder. \par\li0{\b Windows Implementation}\par\li180 The control is crated with the WC_LISTVIEW class with the LVS_LIST, LVS_EDITLABELS, WS_VSCROLL, LVS_SHAREIMAGELISTS, LVS_AUTOARRANGE, LVS_SINGLESEL, WS_BORDER, LVS_SORTASCENDING, WS_CHILD, WS_GROUP, WS_TABSTOP styles.\line \page #{\footnote ControlType_Edit} ${\footnote ControlType Edit} K{\footnote Edit} +{\footnote ControlType:Edit} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Edit Control \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This is a regular edit field. The user can enter any string or integer. If the associated property is integer valued it accepts only integer entries (not yet implemented).  The length of the text that can be entered can be limited by putting a number from 0 to 2147483646 in curly braces at the beginning of the Text field in the {\uldb Control Table}{\v _msi_Control_Table@msi.hlp}.  For example if the text field starts with \{80\}, the length of the string is limited at 80 characters. If no such limit is supplied in the table, or if 0 is specified, the length is set to the maximum possible (2147483646 characters). A negative or non-numerical value will generate an error. \par\li0{\b Property}\par\li180 The property associated with this control can be string or integer valued. \par\li0{\b Valid Style Bits}\par\li180 {\uldb Enabled}{\v ControlStyle_Enabled}\line {\uldb Indirect}{\v ControlStyle_Indirect}\line {\uldb Integer}{\v ControlStyle_Integer}\line {\uldb Sunken}{\v ControlStyle_Sunken}\line {\uldb Visible}{\v ControlStyle_Visible}\line \par\li0{\b Valid Control Attributes}\par\li180 {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line {\uldb Default}{\v ControlAttribute_Default}\line {\uldb Enabled}{\v ControlAttribute_Enabled}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb Help}{\v ControlAttribute_Help}\line {\uldb Indirect}{\v ControlAttribute_Indirect}\line {\uldb IndirectPropertyName}{\v ControlAttribute_IndirectPropertyName}\line {\uldb Integer}{\v ControlAttribute_Integer}\line {\uldb KeyInt}{\v ControlAttribute_KeyInt}\line {\uldb KeyString}{\v ControlAttribute_KeyString}\line {\uldb Limit}{\v ControlAttribute_Limit}\line {\uldb OriginalValue}{\v ControlAttribute_OriginalValue}\line {\uldb Position}{\v ControlAttribute_Position}\line {\uldb PropertyName}{\v ControlAttribute_PropertyName}\line {\uldb PropertyValue}{\v ControlAttribute_PropertyValue}\line {\uldb RefCount}{\v ControlAttribute_RefCount}\line {\uldb Sunken}{\v ControlAttribute_Sunken}\line {\uldb Text}{\v ControlAttribute_Text}\line {\uldb Visible}{\v ControlAttribute_Visible}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb WindowHandle}{\v ControlAttribute_WindowHandle}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line \par\li0{\b Control Events Published}\par\li180 None. \par\li0{\b Can Take Focus}\par\li180 Yes\line \par\li0{\b Windows Implementation}\par\li180 The control is created with the "EDIT" class with the WS_BORDER, WS_CHILD, WS_TABSTOP, WS_GROUP styles.\line \page #{\footnote ControlType_MaskedEdit} ${\footnote ControlType MaskedEdit} K{\footnote MaskedEdit} +{\footnote ControlType:MaskedEdit} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MaskedEdit Control \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This is a masked edit field control. The mask is contained in the text field of the control.  The syntax of the mask is the following:\line {\b #}  digit that is not part of the checksum\line {\b %}  digit that is part of the checksum\line {\b @} randomized digit, should not appear in the visible part of the template\line {\b =} digit, that is displayed in the UI as a digit followed by a dash, in the property returned by the UI it is replaced by the but will be replaced by a dash during validation. There can be only one such character in the template and it must follow a  # or a %.\line {\b ^} letter that is forced to upper case during validation\line {\b &} letter, can be upper or lower case\line {\b ?} alpha-numeric character\line {\b <} left end of the visible segment of the template. This character and everything to its left is hidden in the UI. The character is replaced by a dash during validation. There should be at most one of this character in the template.\line {\b >} right end of the visible segment of the template. The character and everything to its right is hidden in the UI. The character is replaced by a dash during validation. There should be at most one of this character in the template.\line Any other character is treated as a literal constant.\line For the characters that can be edited the control creats separate edit windows. (one window for each block of contiguous characters of the same kind.)  \par\li0{\b Property}\par\li180 The property associated with this control can be only string valued. \par\li0{\b Valid Style Bits}\par\li180 {\uldb Enabled}{\v ControlStyle_Enabled}\line {\uldb Indirect}{\v ControlStyle_Indirect}\line {\uldb Sunken}{\v ControlStyle_Sunken}\line {\uldb Visible}{\v ControlStyle_Visible}\line \par\li0{\b Valid Control Attributes}\par\li180 {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line {\uldb Default}{\v ControlAttribute_Default}\line {\uldb Enabled}{\v ControlAttribute_Enabled}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb Help}{\v ControlAttribute_Help}\line {\uldb Indirect}{\v ControlAttribute_Indirect}\line {\uldb IndirectPropertyName}{\v ControlAttribute_IndirectPropertyName}\line {\uldb KeyInt}{\v ControlAttribute_KeyInt}\line {\uldb KeyString}{\v ControlAttribute_KeyString}\line {\uldb OriginalValue}{\v ControlAttribute_OriginalValue}\line {\uldb Position}{\v ControlAttribute_Position}\line {\uldb PropertyName}{\v ControlAttribute_PropertyName}\line {\uldb PropertyValue}{\v ControlAttribute_PropertyValue}\line {\uldb RefCount}{\v ControlAttribute_RefCount}\line {\uldb Sunken}{\v ControlAttribute_Sunken}\line {\uldb Text}{\v ControlAttribute_Text}\line {\uldb Visible}{\v ControlAttribute_Visible}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb WindowHandle}{\v ControlAttribute_WindowHandle}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line \par\li0{\b Control Events Published}\par\li180 None. \par\li0{\b Can Take Focus}\par\li180 Yes\line \par\li0{\b Windows Implementation}\par\li180 The control creates one parent window of the "BUTTON" class with the BS_OWNERDRAW and WS_EX_CONTROLPARENT styles. It creates several child windows to this window:  for the constant text parts it creates "STATIC" windows with the SS_LEFT and WS_CHILD styles. For the editable fields it creates an "EDIT" window with the WS_CHILD, WS_BORDER and WS_TABSTOP styles. In case of a numeric field the window also has the ES_NUMBER style.\line \page #{\footnote ControlType_ListBox} ${\footnote ControlType LisBox} K{\footnote ListBox} +{\footnote ControlType:ListBox} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ListBox Control \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This is a regular listbox control. It enables the user to select a value of a property from a pre-authored list of choices. This control supports only single select listboxes.  The possible values are read from the {\uldb Listbox Table}{\v _msi_Listbox_Table@msi.hlp}. Note that the string displayed is not necessarily the same as the value that the user is choosing.  If the control is created with the {\uldb Sorted}{\v ControlStyle_Sorted}, the items are listed according to the {\b Ordering} column of the table. If the style bit is not set,  the column is ignored. \par\li0{\b Property}\par\li180 The property associated with this control can be string or integer valued. \par\li0{\b Valid Style Bits}\par\li180 {\uldb Enabled}{\v ControlStyle_Enabled}\line {\uldb Indirect}{\v ControlStyle_Indirect}\line {\uldb Integer}{\v ControlStyle_Integer}\line {\uldb Sorted}{\v ControlStyle_Sorted}\line {\uldb Sunken}{\v ControlStyle_Sunken}\line {\uldb Visible}{\v ControlStyle_Visible}\line \par\li0{\b Valid Control Attributes}\par\li180 {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line {\uldb Default}{\v ControlAttribute_Default}\line {\uldb Enabled}{\v ControlAttribute_Enabled}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb Help}{\v ControlAttribute_Help}\line {\uldb Icon}{\v ControlAttribute_Icon}\line {\uldb Indirect}{\v ControlAttribute_Indirect}\line {\uldb IndirectPropertyName}{\v ControlAttribute_IndirectPropertyName}\line {\uldb Integer}{\v ControlAttribute_Integer}\line {\uldb ItemsCount}{\v ControlAttribute_ItemsCount}\line {\uldb ItemsText}{\v ControlAttribute_ItemsText}\line {\uldb ItemsValue}{\v ControlAttribute_ItemsValue}\line {\uldb KeyInt}{\v ControlAttribute_KeyInt}\line {\uldb KeyString}{\v ControlAttribute_KeyString}\line {\uldb OriginalValue}{\v ControlAttribute_OriginalValue}\line {\uldb Position}{\v ControlAttribute_Position}\line {\uldb PropertyName}{\v ControlAttribute_PropertyName}\line {\uldb PropertyValue}{\v ControlAttribute_PropertyValue}\line {\uldb RefCount}{\v ControlAttribute_RefCount}\line {\uldb Sunken}{\v ControlAttribute_Sunken}\line {\uldb Text}{\v ControlAttribute_Text}\line {\uldb Visible}{\v ControlAttribute_Visible}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb WindowHandle}{\v ControlAttribute_WindowHandle}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line \par\li0{\b Control Events Published}\par\li180 None. \par\li0{\b Can Take Focus}\par\li180 Yes\line \par\li0{\b Windows Implementation}\par\li180 The control is created with the "LISTBOX" class.\line If the {\uldb Sorted}{\v ControlStyle_Sorted} style bit is on, the control is created with the LBS_NOTIFY, WS_VSCROLL, WS_BORDER styles, otherwise with the LBS_STANDARD style. It also has the WS_TABSTOP, WS_GROUP, WS_CHILD styles. \page #{\footnote ControlType_ListView} ${\footnote ControlType LisView} K{\footnote ListView} +{\footnote ControlType:ListView} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ListView Control \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This is a listview control displaying a single column of values with an icon next to each item. It enables the user to select a value of a property from a pre-authored list of choices. This control supports single select listviews only.  The possible values are read from the {\uldb ListView Table}{\v _msi_ListView_Table@msi.hlp}. Note that the string displayed is not necessarily the same as the value that the user is choosing.  If the control is created with the {\uldb Sorted}{\v ControlStyle_Sorted}, the items are listed according to the {\b Ordering} column of the table. If the style bit is not set,  the column is ignored. \par\li0{\b Property}\par\li180 The property associated with this control can be string or integer valued. \par\li0{\b Valid Style Bits}\par\li180 {\uldb Enabled}{\v ControlStyle_Enabled}\line {\uldb FixedSize}{\v ControlStyle_FixedSize}\line {\uldb IconSize}{\v ControlStyle_IconSize}\line {\uldb ImageHandle}{\v ControlStyle_ImageHandle}\line {\uldb Indirect}{\v ControlStyle_Indirect}\line {\uldb Integer}{\v ControlStyle_Integer}\line {\uldb Sorted}{\v ControlStyle_Sorted}\line {\uldb Sunken}{\v ControlStyle_Sunken}\line {\uldb Visible}{\v ControlStyle_Visible}\line \par\li0{\b Valid Control Attributes}\par\li180 {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line {\uldb Enabled}{\v ControlAttribute_Enabled}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb Help}{\v ControlAttribute_Help}\line {\uldb Indirect}{\v ControlAttribute_Indirect}\line {\uldb IndirectPropertyName}{\v ControlAttribute_IndirectPropertyName}\line {\uldb Integer}{\v ControlAttribute_Integer}\line {\uldb ItemsCount}{\v ControlAttribute_ItemsCount}\line {\uldb ItemsText}{\v ControlAttribute_ItemsText}\line {\uldb ItemsValue}{\v ControlAttribute_ItemsValue}\line {\uldb KeyInt}{\v ControlAttribute_KeyInt}\line {\uldb KeyString}{\v ControlAttribute_KeyString}\line {\uldb OriginalValue}{\v ControlAttribute_OriginalValue}\line {\uldb Position}{\v ControlAttribute_Position}\line {\uldb PropertyName}{\v ControlAttribute_PropertyName}\line {\uldb PropertyValue}{\v ControlAttribute_PropertyValue}\line {\uldb RefCount}{\v ControlAttribute_RefCount}\line {\uldb Sunken}{\v ControlAttribute_Sunken}\line {\uldb Text}{\v ControlAttribute_Text}\line {\uldb Visible}{\v ControlAttribute_Visible}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb WindowHandle}{\v ControlAttribute_WindowHandle}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line \par\li0{\b Control Events Published}\par\li180 None. \par\li0{\b Can Take Focus}\par\li180 Windows: Yes\line \par\li0{\b Windows Implementation}\par\li180 The control is created with the WC_LISTVIEW class with the LVS_REPORT, LVS_NOCOLUMNHEADER, WS_VSCROLL, WS_HSCROLL, LVS_SHAREIMAGELISTS, LVS_SINGLESEL, LVS_SHOWSELALWAYS, WS_BORDER, WS_TABSTOP styles.\line If the {\uldb Sorted}{\v ControlStyle_Sorted} style bit is not on, the control also has the LVS_SORTASCENDING style. \page #{\footnote ControlType_PathEdit} ${\footnote ControlType PathEdit} K{\footnote PathEdit} +{\footnote ControlType:PathEdit} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b PathEdit Control \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This is a special control designed for use on a browse dialog.  It is designed to be used with a {\uldb DirectoryCombo}{\v ControlType_DirectoryCombo} and {\uldb DirectoryList}{\v ControlType_DirectoryList} control on the same dialog.  It lets the user select the path or the tail part of a path (the last segment of the path) depending on if the SplitPath style is set or not. It displays the currently selected folder name or the entire path in an edit field.  The property associated with this control has to have an initial value, and if the SplitPath style is on this value has to contain at least two steps (a volume and at least one level below).  This control also supports entering a full path in both modes. It first checks if the string enters is a valid path. If it is, it interprets the string as such. If it is not a valid path and the SplitPath style is on, it interprets it as the name of the folder to be selected.  One can also enter a UNC path to a drive that has no drive letter associated with it. This control does not let the focus leave if the selection is not valid. \par\li0{\b Property}\par\li180 The property associated with this control can be only string valued.  \par\li0{\b Valid Style Bits}\par\li180 {\uldb Enabled}{\v ControlStyle_Enabled}\line {\uldb Indirect}{\v ControlStyle_Indirect}\line {\uldb SplitPath}{\v ControlStyle_SplitPath}\line {\uldb Sunken}{\v ControlStyle_Sunken}\line {\uldb Visible}{\v ControlStyle_Visible}\line \par\li0{\b Valid Control Attributes}\par\li180 {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line {\uldb Default}{\v ControlAttribute_Default}\line {\uldb Enabled}{\v ControlAttribute_Enabled}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb Help}{\v ControlAttribute_Help}\line {\uldb Indirect}{\v ControlAttribute_Indirect}\line {\uldb IndirectPropertyName}{\v ControlAttribute_IndirectPropertyName}\line {\uldb KeyInt}{\v ControlAttribute_KeyInt}\line {\uldb KeyString}{\v ControlAttribute_KeyString}\line {\uldb OriginalValue}{\v ControlAttribute_OriginalValue}\line {\uldb Position}{\v ControlAttribute_Position}\line {\uldb PropertyName}{\v ControlAttribute_PropertyName}\line {\uldb PropertyValue}{\v ControlAttribute_PropertyValue}\line {\uldb RefCount}{\v ControlAttribute_RefCount}\line {\uldb Sunken}{\v ControlAttribute_Sunken}\line {\uldb Text}{\v ControlAttribute_Text}\line {\uldb Visible}{\v ControlAttribute_Visible}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb WindowHandle}{\v ControlAttribute_WindowHandle}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line \par\li0{\b Control Events Published}\par\li180 None. \par\li0{\b Can Take Focus}\par\li180 Windows: Yes\line \par\li0{\b Windows Implementation}\par\li180 The control is derived from the {\uldb Edit}{\v ControlType_Edit} control.\line \page #{\footnote ControlType_RadioButtonGroup} ${\footnote ControlType RadioButtonGroup} K{\footnote RadioButtonGroup} +{\footnote ControlType:RadioButtonGroup} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RadioButtonGroup Control \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This control is a group of radio buttons. It enables the user to select a value of a property from a pre-authored list of choices.   The possible values are read from the {\uldb RadioButton Table}{\v _msi_RadioButton_Table@msi.hlp}. Note that the string displayed is not necessarily the same as the value that the user is choosing.  The implementation treats the whole group as one control, therefore it is not possible to hide or disable individual buttons within the group. Similarly all the buttons have to be of the same style, i.e. either all of them have text or all of them have bitmaps, etc.  The position of the buttons is authored relative to the group. This way the entire group can be moved by changeing only the coordinates of the group without changeing the individual buttons.  At creation the control verifies that the individual buttons do not extend beyond the boundaries of the group.\line If the {\uldb Bitmap}{\v ControlStyle_Bitmap} or the {\uldb Icon}{\v ControlStyle_Icon} style bit is set, the corresponding text entry in the {\ulbd RadioButton Table}{\v _msi_RadioButton_Table@msi.hlp} is taken as a foreign key to the {\ulbd Binary Table}{\v _msi_Binary_Table@msi.hlp} that specifies the binary data needed to create the picture on the individual buttons.\line This means that the buttons can not have both a picture and a text.\line Because of the way Windows draws the frame, there is a gap between the top of the control's window and the visible frame, even when there is no caption. \par\li0{\b Property}\par\li180 The property associated with this control can be string or integer valued. \par\li0{\b Valid Style Bits}\par\li180 {\uldb Bitmap}{\v ControlStyle_Bitmap}\line {\uldb Enabled}{\v ControlStyle_Enabled}\line {\uldb FixedSize}{\v ControlStyle_FixedSize}\line {\uldb HasBorder}{\v ControlStyle_HasBorder}\line {\uldb Icon}{\v ControlStyle_Icon}\line {\uldb IconSize}{\v ControlStyle_IconSize}\line {\uldb ImageHandle}{\v ControlStyle_ImageHandle}\line {\uldb Indirect}{\v ControlStyle_Indirect}\line {\uldb Integer}{\v ControlStyle_Integer}\line {\uldb PushLike}{\v ControlStyle_PushLike}\line {\uldb Sunken}{\v ControlStyle_Sunken}\line {\uldb Visible}{\v ControlStyle_Visible}\line \par\li0{\b Valid Control Attributes}\par\li180 {\uldb Bitmap}{\v ControlAttribute_Bitmap}\line {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line {\uldb Default}{\v ControlAttribute_Default}\line {\uldb Enabled}{\v ControlAttribute_Enabled}\line {\uldb HasBorder}{\v ControlAttribute_HasBorder}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb Help}{\v ControlAttribute_Help}\line {\uldb Icon}{\v ControlAttribute_Icon}\line {\uldb Indirect}{\v ControlAttribute_Indirect}\line {\uldb IndirectPropertyName}{\v ControlAttribute_IndirectPropertyName}\line {\uldb Integer}{\v ControlAttribute_Integer}\line {\uldb ItemsCount}{\v ControlAttribute_ItemsCount}\line {\uldb ItemsHandle}{\v ControlAttribute_ItemsHandle}\line {\uldb ItemsHeight}{\v ControlAttribute_ItemsHeight}\line {\uldb ItemsText}{\v ControlAttribute_ItemsText}\line {\uldb ItemsValue}{\v ControlAttribute_ItemsValue}\line {\uldb ItemsWidth}{\v ControlAttribute_ItemsWidth}\line {\uldb ItemsX}{\v ControlAttribute_ItemsX}\line {\uldb ItemsY}{\v ControlAttribute_ItemsY}\line {\uldb KeyInt}{\v ControlAttribute_KeyInt}\line {\uldb KeyString}{\v ControlAttribute_KeyString}\line {\uldb OriginalValue}{\v ControlAttribute_OriginalValue}\line {\uldb Position}{\v ControlAttribute_Position}\line {\uldb PropertyName}{\v ControlAttribute_PropertyName}\line {\uldb PropertyValue}{\v ControlAttribute_PropertyValue}\line {\uldb PushLike}{\v ControlAttribute_PushLike}\line {\uldb RefCount}{\v ControlAttribute_RefCount}\line {\uldb Sunken}{\v ControlAttribute_Sunken}\line {\uldb Text}{\v ControlAttribute_Text}\line {\uldb Visible}{\v ControlAttribute_Visible}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb WindowHandle}{\v ControlAttribute_WindowHandle}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line \par\li0{\b Control Events Published}\par\li180 None. \par\li0{\b Can Take Focus}\par\li180 Yes\line \par\li0{\b Windows Implementation}\par\li180 The group is created using the "BUTTON" class. If the {\uldb HasBorder}{\v ControlStyle_HasBorder} style is set, it has the BS_GROUPBOX style, otherwise it has the BS_OWNERDRAW style. \line The individual buttons are created with the "BUTTON" class.\line It has the BS_RADIOBUTTON, WS_CHILD, WS_GROUP, WS_TABSTOP, WS_EX_CONTROLPARENT and BS_MULTILINE styles.\line If the {\uldb PushLike}{\v ControlStyle_PushLike} style is set they have the BS_PUSHLIKE style.\line If the {\uldb Bitmap}{\v ControlStyle_Bitmap} style is set they have the BS_BITMAP style.\line If the {\uldb Icon}{\v ControlStyle_Icon} style is set they have the BS_ICON style.\line \page #{\footnote ControlType_VolumeSelectCombo} ${\footnote ControlType VolumeSelectCombo} K{\footnote VolumeSelectCombo} +{\footnote ControlType:VolumeSelectCombo} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b VolumeSelectCombo Control \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This is a special control designed to a volume from a list of volumes. It lists the volumes in alphabetical order. The types of controls displayed is determined by the style bits of the control.  \par\li0{\b Property}\par\li180 The property associated with this control can be only string valued.  \par\li0{\b Valid Style Bits}\par\li180 {\uldb CDROMVolume}{\v ControlStyle_CDROMVolume}\line {\uldb Enabled}{\v ControlStyle_Enabled}\line {\uldb FixedVolume}{\v ControlStyle_FixedVolume}\line {\uldb FloppyVolume}{\v ControlStyle_FloppyVolume}\line {\uldb Indirect}{\v ControlStyle_Indirect}\line {\uldb RAMDiskVolume}{\v ControlStyle_RAMDiskVolume}\line {\uldb RemoteVolume}{\v ControlStyle_RemoteVolume}\line {\uldb RemovableVolume}{\v ControlStyle_RemovableVolume}\line {\uldb Sunken}{\v ControlStyle_Sunken}\line {\uldb Visible}{\v ControlStyle_Visible}\line \par\li0{\b Valid Control Attributes}\par\li180 {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line {\uldb Default}{\v ControlAttribute_Default}\line {\uldb Enabled}{\v ControlAttribute_Enabled}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb Help}{\v ControlAttribute_Help}\line {\uldb Indirect}{\v ControlAttribute_Indirect}\line {\uldb IndirectPropertyName}{\v ControlAttribute_IndirectPropertyName}\line {\uldb KeyInt}{\v ControlAttribute_KeyInt}\line {\uldb KeyString}{\v ControlAttribute_KeyString}\line {\uldb OriginalValue}{\v ControlAttribute_OriginalValue}\line {\uldb Position}{\v ControlAttribute_Position}\line {\uldb PropertyName}{\v ControlAttribute_PropertyName}\line {\uldb PropertyValue}{\v ControlAttribute_PropertyValue}\line {\uldb RefCount}{\v ControlAttribute_RefCount}\line {\uldb Sunken}{\v ControlAttribute_Sunken}\line {\uldb Text}{\v ControlAttribute_Text}\line {\uldb Visible}{\v ControlAttribute_Visible}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb WindowHandle}{\v ControlAttribute_WindowHandle}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line \par\li0{\b Control Events Published}\par\li180 None. \par\li0{\b Can Take Focus}\par\li180 Windows: Yes\line \par\li0{\b Windows Implementation}\par\li180 The control is created as a"COMBOBOX" with the CBS_DROPDOWNLIST, CBS_OWNERDRAWFIXED, CBS_HASSTRINGS, WS_VSCROLL, WS_CHILD, WS_GROUP, WS_TABSTOP and CBS_SORT styles.\line \page #{\footnote ControlType_Bitmap} ${\footnote ControlType Bitmap} K{\footnote Bitmap} +{\footnote ControlType:Bitmap} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Bitmap Control \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This control simply displays a static picture of a bitmap. \par\li0{\b Property}\par\li180 There can be no property associated with this control.  \par\li0{\b Valid Style Bits}\par\li180 {\uldb FixedSize}{\v ControlStyle_FixedSize}\line {\uldb ImageHandle}{\v ControlStyle_ImageHandle}\line {\uldb Visible}{\v ControlStyle_Visible}\line \par\li0{\b Valid Control Attributes}\par\li180 {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line {\uldb Default}{\v ControlAttribute_Default}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb Help}{\v ControlAttribute_Help}\line {\uldb Image}{\v ControlAttribute_Image}\line {\uldb ImageHandle}{\v ControlAttribute_ImageHandle}\line {\uldb KeyInt}{\v ControlAttribute_KeyInt}\line {\uldb KeyString}{\v ControlAttribute_KeyString}\line {\uldb Position}{\v ControlAttribute_Position}\line {\uldb RefCount}{\v ControlAttribute_RefCount}\line {\uldb Sunken}{\v ControlAttribute_Sunken}\line {\uldb Text}{\v ControlAttribute_Text}\line {\uldb Visible}{\v ControlAttribute_Visible}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb WindowHandle}{\v ControlAttribute_WindowHandle}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line \par\li0{\b Control Events Published}\par\li180 None. \par\li0{\b Can Take Focus}\par\li180 Windows: No\line Maciontosh: No \par\li0{\b Windows Implementation}\par\li180 On NT3.51 the control is created as a "BUTTON" with the BS_OWNERDRAW style, on Win95 and NT4 it is created as a "STATIC" with the SS_BITMAP and SS_CENTERIMAGE styles. In both cases it also has the WS_CHILD and WS_GROUP styles.\line \page #{\footnote ControlType_Icon} ${\footnote ControlType Icon} K{\footnote Icon} +{\footnote ControlType:Icon} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Icon Control \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This control simply displays a static picture of an icon. The background of the image is transparent.\line An icon file can contain different size images of the same icon. If the {\uldb IconSize}{\v ControlStyle_Icon} bits are set, the first image of the specified size is loaded. If no size is specified, the first image is loaded.\line If the {\uldb IconSize}{\v ControlStyle_Icon} bits are not set the {\uldb FixedSize}{\v ControlStyle_FixedSize} bit is ignored and the image is stretched to fit the control rectangle.\line If both the IconSize bits and the FixedSize bit are set and the control is larger than the icon, the image is centered in the control. If the image is larger than the control it is not chopped (unlike in the {\uldb Bitmap}{\v ControlType_Bitmap} control) but shrunk to fit the control. \par\li0{\b Property}\par\li180 There can be no property associated with this control.  \par\li0{\b Valid Style Bits}\par\li180 {\uldb FixedSize}{\v ControlStyle_FixedSize}\line {\uldb IconSize}{\v ControlStyle_IconSize}\line {\uldb ImageHandle}{\v ControlStyle_ImageHandle}\line {\uldb Visible}{\v ControlStyle_Visible}\line \par\li0{\b Valid Control Attributes}\par\li180 {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line {\uldb Default}{\v ControlAttribute_Default}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb Help}{\v ControlAttribute_Help}\line {\uldb Image}{\v ControlAttribute_Image}\line {\uldb ImageHandle}{\v ControlAttribute_ImageHandle}\line {\uldb KeyInt}{\v ControlAttribute_KeyInt}\line {\uldb KeyString}{\v ControlAttribute_KeyString}\line {\uldb Position}{\v ControlAttribute_Position}\line {\uldb RefCount}{\v ControlAttribute_RefCount}\line {\uldb Sunken}{\v ControlAttribute_Sunken}\line {\uldb Text}{\v ControlAttribute_Text}\line {\uldb Visible}{\v ControlAttribute_Visible}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb WindowHandle}{\v ControlAttribute_WindowHandle}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line \par\li0{\b Control Events Published}\par\li180 None. \par\li0{\b Can Take Focus}\par\li180 Windows: No\line Maciontosh: No \par\li0{\b Windows Implementation}\par\li180 On NT3.51 the control is created as a "BUTTON" with the BS_OWNERDRAW style, on Win95 and NT4 it is created as a "STATIC" with the SS_ICON and SS_CENTERIMAGE styles. In both cases it also has the WS_CHILD and WS_GROUP styles.\line \page #{\footnote ControlType_GroupBox} ${\footnote ControlType GroupBox} K{\footnote GroupBox} +{\footnote ControlType:GroupBox} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GroupBox Control \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This control displays a rectangle, possibly with some caption. It only serves as a visual element on the dialog to group other controls together.\line Because of the way Windows draws this control, there is a gap between the top of the control's window and the visible frame, even when there is no caption. \par\li0{\b Property}\par\li180 There can be no property associated with this control.  \par\li0{\b Valid Style Bits}\par\li180 {\uldb Visible}{\v ControlStyle_Visible}\line \par\li0{\b Valid Control Attributes}\par\li180 {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line {\uldb Default}{\v ControlAttribute_Default}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb Help}{\v ControlAttribute_Help}\line {\uldb KeyInt}{\v ControlAttribute_KeyInt}\line {\uldb KeyString}{\v ControlAttribute_KeyString}\line {\uldb Position}{\v ControlAttribute_Position}\line {\uldb RefCount}{\v ControlAttribute_RefCount}\line {\uldb Sunken}{\v ControlAttribute_Sunken}\line {\uldb Text}{\v ControlAttribute_Text}\line {\uldb Visible}{\v ControlAttribute_Visible}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb WindowHandle}{\v ControlAttribute_WindowHandle}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line \par\li0{\b Control Events Published}\par\li180 None. \par\li0{\b Can Take Focus}\par\li180 Windows: No\line Maciontosh: No \par\li0{\b Windows Implementation}\par\li180 The control is created as a "BUTTON" with the BS_GROUPBOX, WS_CHILD, WS_GROUP styles.\line \page #{\footnote ControlType_ProgressBar} ${\footnote ControlType ProgressBar} K{\footnote ProgressBar} +{\footnote ControlType:ProgressBar} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ProgressBar Control \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This control displays a rectangle filling up as it receives progress messages. Typically should subscribe to the {\uldb ActionProgress}{\v ControlEvent_ActionProgress} control event or a control event whose name matches the name of the action whose progress is gauged.  \par\li0{\b Property}\par\li180 There can be no property associated with this control.  \par\li0{\b Valid Style Bits}\par\li180 {\uldb Progress95}{\v ControlStyle_Progress95}\line {\uldb Sunken}{\v ControlStyle_Sunken}\line {\uldb Visible}{\v ControlStyle_Visible}\line \par\li0{\b Valid Control Attributes}\par\li180 {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line {\uldb Default}{\v ControlAttribute_Default}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb Help}{\v ControlAttribute_Help}\line {\uldb KeyInt}{\v ControlAttribute_KeyInt}\line {\uldb KeyString}{\v ControlAttribute_KeyString}\line {\uldb Position}{\v ControlAttribute_Position}\line {\uldb Progress}{\v ControlAttribute_Progress}\line {\uldb RefCount}{\v ControlAttribute_RefCount}\line {\uldb Sunken}{\v ControlAttribute_Sunken}\line {\uldb Text}{\v ControlAttribute_Text}\line {\uldb Visible}{\v ControlAttribute_Visible}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb WindowHandle}{\v ControlAttribute_WindowHandle}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line \par\li0{\b Control Events Published}\par\li180 None. \par\li0{\b Can Take Focus}\par\li180 Windows: No\line Maciontosh: No \par\li0{\b Windows Implementation}\par\li180 The control is created as a PROGRESS_CLASS. It also has the WS_CHILD and WS_GROUP styles.  \page #{\footnote ControlType_PushButton} ${\footnote ControlType PushButton} K{\footnote PushButton} +{\footnote ControlType:PushButton} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b PushButton Control \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This control displays a basic push button.\line If the {\uldb Bitmap}{\v ControlStyle_Bitmap} or the {\uldb Icon}{\v ControlStyle_Icon} style bit is set, the corresponding text entry in the {\ulbd Control Table}{\v _msi_Control_Table@msi.hlp} is taken as a foreign key to the {\ulbd Binary Table}{\v _msi_Binary_Table@msi.hlp} that specifies the binary data needed to create the picture.\line This means that the button can not have both a picture and a text. \par\li0{\b Property}\par\li180 There can be no property associated with this control.  \par\li0{\b Valid Style Bits}\par\li180 {\uldb Bitmap}{\v ControlStyle_Bitmap}\line {\uldb Enabled}{\v ControlStyle_Enabled}\line {\uldb FixedSize}{\v ControlStyle_FixedSize}\line {\uldb Icon}{\v ControlStyle_Icon}\line {\uldb IconSize}{\v ControlStyle_IconSize}\line {\uldb ImageHandle}{\v ControlStyle_ImageHandle}\line {\uldb Sunken}{\v ControlStyle_Sunken}\line {\uldb Visible}{\v ControlStyle_Visible}\line \par\li0{\b Valid Control Attributes}\par\li180 {\uldb Bitmap}{\v ControlAttribute_Bitmap}\line {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line {\uldb Default}{\v ControlAttribute_Default}\line {\uldb Enabled}{\v ControlAttribute_Enabled}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb Help}{\v ControlAttribute_Help}\line {\uldb Icon}{\v ControlAttribute_Icon}\line {\uldb KeyInt}{\v ControlAttribute_KeyInt}\line {\uldb KeyString}{\v ControlAttribute_KeyString}\line {\uldb Position}{\v ControlAttribute_Position}\line {\uldb RefCount}{\v ControlAttribute_RefCount}\line {\uldb Sunken}{\v ControlAttribute_Sunken}\line {\uldb Text}{\v ControlAttribute_Text}\line {\uldb Visible}{\v ControlAttribute_Visible}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb WindowHandle}{\v ControlAttribute_WindowHandle}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line \par\li0{\b Control Events Published}\par\li180 None. \par\li0{\b Can Take Focus}\par\li180 Windows: Yes\line Maciontosh: No \par\li0{\b Windows Implementation}\par\li180 The control is created with the "BUTTON" class.\line It has the BS_MULTILINE, WS_CHILD, WS_TABSTOP, WS_GROUP styles.\line If the {\uldb Bitmap}{\v ControlStyle_Bitmap} style is set it has the BS_BITMAP style.\line If the {\uldb Icon}{\v ControlStyle_Icon} style is set it has the BS_ICON style.\line \page #{\footnote ControlType_Text} ${\footnote ControlType Text} K{\footnote Text} +{\footnote ControlType:Text} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Text Control \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This control displays a static text. The text may use a predefined style. This is done by putting the name of the style in the form \{\\style\} at the start of the string, where style is one of the keys in the {\uldb TextStyle Table}{\v _msi_TextStyle_Table@msi.hlp}. A base text style can be assigned to the control by supplying \{&style\} at the very begining of a the text string. This style is used whenever no other style is defined by the string.\line \par\li0{\b Property}\par\li180 There can be no property associated with this control.  \par\li0{\b Valid Style Bits}\par\li180 {\uldb Sunken}{\v ControlStyle_Sunken}\line {\uldb Transparent}{\v ControlStyle_Transparent}\line {\uldb Visible}{\v ControlStyle_Visible}\line \par\li0{\b Valid Control Attributes}\par\li180 {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line {\uldb Default}{\v ControlAttribute_Default}\line {\uldb Enabled}{\v ControlAttribute_Enabled}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb Help}{\v ControlAttribute_Help}\line {\uldb KeyInt}{\v ControlAttribute_KeyInt}\line {\uldb KeyString}{\v ControlAttribute_KeyString}\line {\uldb Position}{\v ControlAttribute_Position}\line {\uldb RefCount}{\v ControlAttribute_RefCount}\line {\uldb Sunken}{\v ControlAttribute_Sunken}\line {\uldb Text}{\v ControlAttribute_Text}\line {\uldb Transparent}{\v ControlAttribute_Transparent}\line {\uldb Visible}{\v ControlAttribute_Visible}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb WindowHandle}{\v ControlAttribute_WindowHandle}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line \par\li0{\b Control Events Published}\par\li180 None. \par\li0{\b Can Take Focus}\par\li180 Windows: No\line Maciontosh: No \par\li0{\b Windows Implementation}\par\li180 The control is created with the "STATIC" class and with the SS_LEFT, WS_CHILD, WS_GROUP styles.\line If the {\uldb Transparent}{\v ControlStyle_Transparent} style is set the control also has the WS_EX_TRANSPARENT style. \page #{\footnote ControlType_ScrollableText} ${\footnote ControlType ScrollableText} K{\footnote ScrollableText} +{\footnote ControlType:ScrollableText} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ScrollableText Control \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This control displays a long text that can not fit on a page normally. A typical application for this control is displaying the license agreement.\line \par\li0{\b Property}\par\li180 There can be no property associated with this control.  \par\li0{\b Valid Style Bits}\par\li180 {\uldb Enabled}{\v ControlStyle_Enabled}\line {\uldb Sunken}{\v ControlStyle_Sunken}\line {\uldb Visible}{\v ControlStyle_Visible}\line \par\li0{\b Valid Control Attributes}\par\li180 {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line {\uldb Enabled}{\v ControlAttribute_Enabled}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb Help}{\v ControlAttribute_Help}\line {\uldb KeyInt}{\v ControlAttribute_KeyInt}\line {\uldb KeyString}{\v ControlAttribute_KeyString}\line {\uldb Position}{\v ControlAttribute_Position}\line {\uldb RefCount}{\v ControlAttribute_RefCount}\line {\uldb Sunken}{\v ControlAttribute_Sunken}\line {\uldb Text}{\v ControlAttribute_Text}\line {\uldb Visible}{\v ControlAttribute_Visible}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb WindowHandle}{\v ControlAttribute_WindowHandle}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line \par\li0{\b Control Events Published}\par\li180 None. \par\li0{\b Can Take Focus}\par\li180 Windows: No\line Maciontosh: No \par\li0{\b Windows Implementation}\par\li180 The control is created using the "RICHEDIT" class with the ES_MULTILINE, WS_HSCROLL, WS_VSCROLL, ES_READONLY,  WS_TABSTOP, ES_AUTOHSCROLL, ES_AUTOVSCROLL, WS_CHILD and WS_GROUP styles. \line \page #{\footnote ControlType_SelectionTree} ${\footnote ControlType SelectionTree} K{\footnote SelectionTree} +{\footnote ControlType:SelectionTree} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SelectionTree Control \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This special control is designed to present some of the information in the {\uldb Feature Table}{\v _msi_Feature_Table@msi.hlp} to the user and allow the user to change the selection state of some items.\line \par\li0{\b Property}\par\li180 String valued, the name of the directory property that will be set by the browse dialog.  \par\li0{\b Valid Style Bits}\par\li180 {\uldb Enabled}{\v ControlStyle_Enabled}\line {\uldb Indirect}{\v ControlStyle_Indirect}\line {\uldb Sunken}{\v ControlStyle_Sunken}\line {\uldb Visible}{\v ControlStyle_Visible}\line \par\li0{\b Valid Control Attributes}\par\li180 {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line {\uldb Enabled}{\v ControlAttribute_Enabled}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb Help}{\v ControlAttribute_Help}\line {\uldb Indirect}{\v ControlAttribute_Indirect}\line {\uldb IndirectPropertyName}{\v ControlAttribute_IndirectPropertyName}\line {\uldb KeyInt}{\v ControlAttribute_KeyInt}\line {\uldb KeyString}{\v ControlAttribute_KeyString}\line {\uldb OriginalValue}{\v ControlAttribute_OriginalValue}\line {\uldb Position}{\v ControlAttribute_Position}\line {\uldb PropertyName}{\v ControlAttribute_PropertyName}\line {\uldb PropertyValue}{\v ControlAttribute_PropertyValue}\line {\uldb RefCount}{\v ControlAttribute_RefCount}\line {\uldb Sunken}{\v ControlAttribute_Sunken}\line {\uldb Text}{\v ControlAttribute_Text}\line {\uldb Visible}{\v ControlAttribute_Visible}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb WindowHandle}{\v ControlAttribute_WindowHandle}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line \line \par\li0{\b Control Events Published}\par\li180 {\uldb SelectionAction}{\v ControlEvent_SelectionAction}\line {\uldb SelectionBrowse}{\v ControlEvent_SelectionBrowse}\line {\uldb SelectionDescription}{\v ControlEvent_SelectionDescription}\line {\uldb SelectionIcon}{\v ControlEvent_SelectionIcon}\line {\uldb SelectionPath}{\v ControlEvent_SelectionPath}\line {\uldb SelectionPathOn}{\v ControlEvent_SelectionPathOn}\line {\uldb SelectionSize}{\v ControlEvent_SelectionSize}\line \par\li0{\b Can Take Focus}\par\li180 Windows: Yes\line Maciontosh: No \par\li0{\b Related Strings in the {\uldb UIText Table}{\v _msi_UIText_Table@msi.hlp}}\par\li180 {\b AbsentPath} The path displayed for an item in the absent state.   \line The following six strings are used to display the number of children selected and the size associated with the highlighted item.\line {\b SelChildCostPos}\line {\b SelChildCostNeg}\line {\b SelParentCostPosPos}\line {\b SelParentCostPosNeg}\line {\b SelParentCostNegPos}\line {\b SelParentCostNegNeg}\line The following strings are used to display the available selection options for an item in a popup menu.\line {\b MenuAbsent}\line {\b MenuLocal}\line {\b MenuCD}\line {\b MenuNetwork}\line The following strings are used to explain the present selection in the {\uldb SelectionDescription}{\v ControlEvent_SelectionDescription} control event.\line {\b SelAbsentAbsent}\line {\b SelAbsentLocal}\line {\b SelAbsentCD}\line {\b SelAbsentNetwork}\line {\b SelLocalAbsent}\line {\b SelLocalLocal}\line {\b SelLocalCD}\line {\b SelLocalNetwork}\line {\b SelCDAbsent}\line {\b SelNetworkAbsent}\line {\b SelCDLocal}\line {\b SelNetworkLocal}\line {\b SelCDCD}\line {\b SelNetworkNetwork}\line The following four localized strings are used in formatting the size of a file.\line {\b Bytes}\line {\b KB}\line {\b MB}\line {\b GB}\line \par\li0{\b Windows Implementation}\par\li180 This control is created with the WC_TREEVIEW class and the WS_BORDER, TVS_HASLINES, TVS_HASBUTTONS, TVS_LINESATROOT, TVS_DISABLEDRAGDROP, TVS_SHOWSELALWAYS, WS_CHILD, WS_TABSTOP, WS_GROUP styles. \par\li0{\b Note}\par\li180 The selection tree gets populated only if the DirectoryInitialize, CostInitialize and CostFinalize actions were all previously called. \line \page #{\footnote ControlType_VolumeCostList} ${\footnote ControlType VolumeCostList} K{\footnote VolumeCostList} +{\footnote ControlType:VolumeCostList} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b VolumeCostList Control \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This special control is designed to present some information to the user about the cost associated with  the selection on the different volumes. The control shows all the volumes in the  {\uldb VolumeCost}{\v MsiSelectionManager_GetVolumeCostTable} table, plus all volumes that are of the  types specified in the attribute bits. If the required disk space exceeds the available amount on some  drive, the volume is highlighted in the table. Clicking on a column header sorts the volumes according  to the chosen column.\line \par\li0{\b Property}\par\li180 There can be no property associated with this control.  \par\li0{\b Valid Style Bits}\par\li180 {\uldb CDROMVolume}{\v ControlStyle_CDROMVolume}\line {\uldb Enabled}{\v ControlStyle_Enabled}\line {\uldb FixedVolume}{\v ControlStyle_FixedVolume}\line {\uldb FloppyVolume}{\v ControlStyle_FloppyVolume}\line {\uldb RAMDiskVolume}{\v ControlStyle_RAMDiskVolume}\line {\uldb RemoteVolume}{\v ControlStyle_RemoteVolume}\line {\uldb RemovableVolume}{\v ControlStyle_RemovableVolume}\line {\uldb Sunken}{\v ControlStyle_Sunken}\line {\uldb Visible}{\v ControlStyle_Visible}\line \par\li0{\b Valid Control Attributes}\par\li180 {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line {\uldb Enabled}{\v ControlAttribute_Enabled}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb Help}{\v ControlAttribute_Help}\line {\uldb KeyInt}{\v ControlAttribute_KeyInt}\line {\uldb KeyString}{\v ControlAttribute_KeyString}\line {\uldb Position}{\v ControlAttribute_Position}\line {\uldb RefCount}{\v ControlAttribute_RefCount}\line {\uldb Sunken}{\v ControlAttribute_Sunken}\line {\uldb Text}{\v ControlAttribute_Text}\line {\uldb Visible}{\v ControlAttribute_Visible}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb WindowHandle}{\v ControlAttribute_WindowHandle}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line \par\li0{\b Control Events Published}\par\li180 None.\line \par\li0{\b Can Take Focus}\par\li180 Windows: No\line Maciontosh: No \par\li0{\b Related Strings in the {\uldb UIText Table}{\v _msi_UIText_Table@msi.hlp}}\par\li180 The strings for the column headings in the table:\line {\b VolumeCostAvailable}\line {\b VolumeCostDifference}\line {\b VolumeCostRequired}\line {\b VolumeCostSize}\line {\b VolumeCostVolume}\line The following four localized strings are used in formatting the size of a file.\line {\b Bytes}\line {\b KB}\line {\b MB}\line {\b GB}\line \par\li0{\b Windows Implementation}\par\li180 This control is created with the WC_LISTVIEW class and the LVS_REPORT, WS_VSCROLL, WS_HSCROLL, LVS_SHAREIMAGELISTS, LVS_AUTOARRANGE, LVS_SINGLESEL, WS_BORDER, WS_CHILD, WS_TABSTOP, WS_GROUP styles. \line \page #{\footnote ControlStyle_Bitmap} ${\footnote ControlStyle Bitmap} K{\footnote Bitmap} +{\footnote ControlStyle:Bitmap} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Bitmap Control Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set the controls text is replaced by a bitmap. The text entry in the database that normally would specify the text of the control is used as a foreign key to the {\uldb Binary Table}{\v _msi_Binary_Table@msi.hlp} to point to the binary data needed for the picture. Therefore such a control has no text associated with it, only the picture. This style bit should not be set at the same time as the {\uldb Icon}{\v ControlStyle_Icon}! \par\li0{\b Control Types That Can Have This Style}\par\li180 {\uldb CheckBox}{\v ControlType_CheckBox}\line {\uldb PushButton}{\v ControlType_PushButton}\line {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup} \par\li0{\b Associated Control Attribute}\par\li180 {\uldb Bitmap}{\v ControlAttribute_Bitmap}\line \par\li0{\b Numeric Value}\par\li180 0x00040000 = 262144\line \page #{\footnote ControlStyle_Icon} ${\footnote ControlStyle Icon} K{\footnote Icon} +{\footnote ControlStyle:Icon} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Icon Control Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set the controls text is replaced by a icon. The text entry in the database that normally would specify the text of the control is used as a foreign key to the {\uldb Binary Table}{\v _msi_Binary_Table@msi.hlp} to point to the binary data needed for the picture. Therefore such a control has no text associated with it, only the picture. This style bit should not be set at the same time as the {\uldb Bitmap}{\v ControlStyle_Bitmap}! \par\li0{\b Control Types That Can Have This Style}\par\li180 {\uldb CheckBox}{\v ControlType_CheckBox}\line {\uldb PushButton}{\v ControlType_PushButton}\line {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup} \par\li0{\b Associated Control Attribute}\par\li180 {\uldb Icon}{\v ControlAttribute_Icon}\line \par\li0{\b Numeric Value}\par\li180 0x00080000 = 524288\line \page #{\footnote ControlStyle_IconSize} ${\footnote ControlStyle IconSize} K{\footnote IconSize} +{\footnote ControlStyle:IconSize} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b IconSize Control Stylebits \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 An icon file can hold several different size images of the same icon. These two bits determine which size image of the icon is loaded. If neither bit is set, the first image is loaded. If only the lower bit is set, the first 16x16 image is loaded. If only the higher bit is set, the firts 32x32 image is loaded. If both bits are set, the first 48x48 image is loaded.\line If the {\uldb FixedSize}{\v ControlStyle_FixedSize} bit is set, these bits determine the size of the image displayed. \par\li0{\b Control Types That Can Have This Style}\par\li180 {\uldb CheckBox}{\v ControlType_CheckBox}\line {\uldb Icon}{\v ControlType_Icon}\line {\uldb PushButton}{\v ControlType_PushButton}\line {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup} \par\li0{\b Associated Control Attribute}\par\li180 None\line \par\li0{\b Numeric Value}\par\li180 0x00200000 = 2097152\line 0x00400000 = 4194304\line \page #{\footnote ControlStyle_ImageHandle} ${\footnote ControlStyle ImageHandle} K{\footnote ImageHandle} +{\footnote ControlStyle:ImageHandle} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ImageHandle Control Stylebits \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Controls that require an image normaly specify the name of the binary information in the text field and the binary data is looked up from the Binary table using this key. If this style bit is set, it means that the binary information is NOT comming from the Binary table, but instead the text field represents the handle to a bitmap or icon (in a string format) and this already loaded icon or bitmap must be used by the control.  Obviously these handles can not be authored previously, the actual value of the handle in the table has to be set by some action that is performed prior to creating the control.  A possible use is to have an action to find all the running applications and put their names and icons into the {\uldb ListView Table}{\v _msi_ListView_Table@msi.hlp}, and the control can display these names and icons,  Even if this bit is on, other stylebits governing the size and stretching of the image are still observed. I.e. if an action puts a handle of an image in the table, but other stylebits describe a different size, the image will be still stretched.  \par\li0{\b Control Types That Can Have This Style}\par\li180 {\uldb Bitmap}{\v ControlType_Bitmap}\line {\uldb CheckBox}{\v ControlType_CheckBox}\line {\uldb Icon}{\v ControlType_Icon}\line {\uldb ListView}{\v ControlType_ListView}\line {\uldb PushButton}{\v ControlType_PushButton}\line {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup} \par\li0{\b Associated Control Attribute}\par\li180 None\line \par\li0{\b Numeric Value}\par\li180 0x00010000 = 65536\line \page #{\footnote ControlStyle_CDROMVolume} ${\footnote ControlStyle CDROMVolume} K{\footnote CDROMVolume} +{\footnote ControlStyle:CDROMVolume} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CDROMVolume Control Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set the control lists CDROM volumes in its list of volumes. \par\li0{\b Control Types That Can Have This Style}\par\li180 {\uldb DirectoryCombo}{\v ControlType_DirectoryCombo}\line {\uldb VolumeCostList}{\v ControlType_VolumeCostList}\line {\uldb VolumeSelectCombo}{\v ControlType_VolumeSelectCombo}\line \par\li0{\b Associated Control Attribute}\par\li180 None\line \par\li0{\b Related Control Stylebits}\par\li180 {\uldb FixedVolume}{\v ControlStyle_FixedVolume}\line {\uldb FloppyVolume}{\v ControlStyle_FloppyVolume}\line {\uldb RAMDiskVolume}{\v ControlStyle_RAMDiskVolume}\line {\uldb RemoteVolume}{\v ControlStyle_RemoteVolume}\line {\uldb RemovableVolume}{\v ControlStyle_RemovableVolume}\line \par\li0{\b Numeric Value}\par\li180 0x00080000 = 524288\line \page #{\footnote ControlStyle_FixedVolume} ${\footnote ControlStyle FixedVolume} K{\footnote FixedVolume} +{\footnote ControlStyle:FixedVolume} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FixedVolume Control Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set the control lists fixed internal harddrives in its list of volumes. \par\li0{\b Control Types That Can Have This Style}\par\li180 {\uldb DirectoryCombo}{\v ControlType_DirectoryCombo}\line {\uldb VolumeCostList}{\v ControlType_VolumeCostList}\line {\uldb VolumeSelectCombo}{\v ControlType_VolumeSelectCombo}\line \par\li0{\b Associated Control Attribute}\par\li180 None\line \par\li0{\b Related Control Stylebits}\par\li180 {\uldb CDROMVolume}{\v ControlStyle_CDROMVolume}\line {\uldb FloppyVolume}{\v ControlStyle_FloppyVolume}\line {\uldb RAMDiskVolume}{\v ControlStyle_RAMDiskVolume}\line {\uldb RemoteVolume}{\v ControlStyle_RemoteVolume}\line {\uldb RemovableVolume}{\v ControlStyle_RemovableVolume}\line \par\li0{\b Numeric Value}\par\li180 0x00020000 = 131072\line \page #{\footnote ControlStyle_FloppyVolume} ${\footnote ControlStyle FloppyVolume} K{\footnote FloppyVolume} +{\footnote ControlStyle:FloppyVolume} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FloppyVolume Control Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set the control lists floppy drives in its list of volumes. \par\li0{\b Control Types That Can Have This Style}\par\li180 {\uldb DirectoryCombo}{\v ControlType_DirectoryCombo}\line {\uldb VolumeCostList}{\v ControlType_VolumeCostList}\line {\uldb VolumeSelectCombo}{\v ControlType_VolumeSelectCombo}\line \par\li0{\b Associated Control Attribute}\par\li180 None\line \par\li0{\b Related Control Stylebits}\par\li180 {\uldb CDROMVolume}{\v ControlStyle_CDROMVolume}\line {\uldb FixedVolume}{\v ControlStyle_FixedVolume}\line {\uldb RAMDiskVolume}{\v ControlStyle_RAMDiskVolume}\line {\uldb RemoteVolume}{\v ControlStyle_RemoteVolume}\line {\uldb RemovableVolume}{\v ControlStyle_RemovableVolume}\line \par\li0{\b Numeric Value}\par\li180 0x00200000 = 2097152\line \page #{\footnote ControlStyle_RAMDiskVolume} ${\footnote ControlStyle RAMDiskVolume} K{\footnote RAMDiskVolume} +{\footnote ControlStyle:RAMDiskVolume} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RAMDiskVolume Control Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set the control lists RAM disks in its list of volumes. \par\li0{\b Control Types That Can Have This Style}\par\li180 {\uldb DirectoryCombo}{\v ControlType_DirectoryCombo}\line {\uldb VolumeCostList}{\v ControlType_VolumeCostList}\line {\uldb VolumeSelectCombo}{\v ControlType_VolumeSelectCombo}\line \par\li0{\b Associated Control Attribute}\par\li180 None\line \par\li0{\b Related Control Stylebits}\par\li180 {\uldb CDROMVolume}{\v ControlStyle_CDROMVolume}\line {\uldb FixedVolume}{\v ControlStyle_FixedVolume}\line {\uldb FloppyVolume}{\v ControlStyle_FloppyVolume}\line {\uldb RemoteVolume}{\v ControlStyle_RemoteVolume}\line {\uldb RemovableVolume}{\v ControlStyle_RemovableVolume}\line \par\li0{\b Numeric Value}\par\li180 0x00100000 = 1048567\line \page #{\footnote ControlStyle_RemoteVolume} ${\footnote ControlStyle RemoteVolume} K{\footnote RemoteVolume} +{\footnote ControlStyle:RemoteVolume} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RemoteVolume Control Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set the control lists remote volumes in its list of volumes. \par\li0{\b Control Types That Can Have This Style}\par\li180 {\uldb DirectoryCombo}{\v ControlType_DirectoryCombo}\line {\uldb VolumeCostList}{\v ControlType_VolumeCostList}\line {\uldb VolumeSelectCombo}{\v ControlType_VolumeSelectCombo}\line \par\li0{\b Associated Control Attribute}\par\li180 None\line \par\li0{\b Related Control Stylebits}\par\li180 {\uldb CDROMVolume}{\v ControlStyle_CDROMVolume}\line {\uldb FixedVolume}{\v ControlStyle_FixedVolume}\line {\uldb FloppyVolume}{\v ControlStyle_FloppyVolume}\line {\uldb RAMDiskVolume}{\v ControlStyle_RAMDiskVolume}\line {\uldb RemovableVolume}{\v ControlStyle_RemovableVolume}\line \par\li0{\b Numeric Value}\par\li180 0x00040000 = 262144\line \page #{\footnote ControlStyle_RemovableVolume} ${\footnote ControlStyle RemovableVolume} K{\footnote RemovableVolume} +{\footnote ControlStyle:RemovableVolume} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RemovableVolume Control Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set the control lists removable drives in its list of volumes. \par\li0{\b Control Types That Can Have This Style}\par\li180 {\uldb DirectoryCombo}{\v ControlType_DirectoryCombo}\line {\uldb VolumeCostList}{\v ControlType_VolumeCostList}\line {\uldb VolumeSelectCombo}{\v ControlType_VolumeSelectCombo}\line \par\li0{\b Associated Control Attribute}\par\li180 None\line \par\li0{\b Related Control Stylebits}\par\li180 {\uldb CDROMVolume}{\v ControlStyle_CDROMVolume}\line {\uldb FixedVolume}{\v ControlStyle_FixedVolume}\line {\uldb FloppyVolume}{\v ControlStyle_FloppyVolume}\line {\uldb RAMDiskVolume}{\v ControlStyle_RAMDiskVolume}\line {\uldb RemoteVolume}{\v ControlStyle_RemoteVolume}\line \par\li0{\b Numeric Value}\par\li180 0x00010000 = 65536\line \page #{\footnote ControlStyle_Enabled} ${\footnote ControlStyle Enabled} K{\footnote Enabled} +{\footnote ControlStyle:Enabled} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Enabled Control Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set the control control is created enabled, otherwise disabled. The enabled/disabled state of the control can be changed later through the associated attribute or by the publisher of some event that the given control subscribes to.  \par\li0{\b Control Types That Can Have This Style}\par\li180 All controls. On some controls (like Bitmaps and Icons) this bit makes no visible difference. \par\li0{\b Associated Control Attribute}\par\li180 {\uldb Enabled}{\v ControlAttribute_Enabled}\line \par\li0{\b Numeric Value}\par\li180 0x00000002 = 2\line \page #{\footnote ControlStyle_FixedSize} ${\footnote ControlStyle FixedSize} K{\footnote FixedSize} +{\footnote ControlStyle:FixedSize} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FixedSize Control Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set the picture on the button or a bitmap or an icon control is displayed in its "natural size". If the picture is smaller than the control, it is centered, if the picture is larger, it is chopped in case of bitmaps but it is shrunk in case of icons. If the bit is not set, the picture is stretched to fit the button or control rectangle. \line On CheckBoxes, PushButtons and RadioButtonGroups this bit has any effect only if the {\uldb Bitmap}{\v ControlStyle_Bitmap} or the {\uldb Icon}{\v ControlStyle_Icon} is set.\line On Icon controls and buttons associated with icons this bit is ignored if the {\uldb IconSize}{\v ControlStyle_IconSize} bits are not set! \par\li0{\b Control Types That Can Have This Style}\par\li180 {\uldb Bitmap}{\v ControlType_Bitmap}\line {\uldb CheckBox}{\v ControlType_CheckBox}\line {\uldb Icon}{\v ControlType_Icon}\line {\uldb PushButton}{\v ControlType_PushButton}\line {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup} \par\li0{\b Associated Control Attribute}\par\li180 None.\line \par\li0{\b Numeric Value}\par\li180 0x00100000 = 1048576\line \page #{\footnote ControlStyle_HasBorder} ${\footnote ControlStyle HasBorder} K{\footnote HasBorder} +{\footnote ControlStyle:HasBorder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b HasBorder Control Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set the {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup} has a border displayed around it. If the style bit is not set, the border is not displayed and no text is displayed on the group either! \par\li0{\b Control Types That Can Have This Style}\par\li180 {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup}\line \par\li0{\b Associated Control Attribute}\par\li180 {\uldb HasBorder}{\v ControlAttribute_HasBorder}.\line \par\li0{\b Numeric Value}\par\li180 0x01000000 = 16777216\line \page #{\footnote ControlStyle_Indirect} ${\footnote ControlStyle Indirect} K{\footnote Indirect} +{\footnote ControlStyle:Indirect} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Indirect Control Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set on an active control, it means that the control changes the value of the property whose name is the value of the named property. Otherwise the named property is changed. \par\li0{\b Control Types That Can Have This Style}\par\li180 All active controls\line \par\li0{\b Associated Control Attribute}\par\li180 {\uldb Indirect}{\v ControlAttribute_Indirect}.\line \par\li0{\b Numeric Value}\par\li180 0x00000008 = 8\line \page #{\footnote ControlStyle_SplitPath} ${\footnote ControlStyle SplitPath} K{\footnote SplitPath} +{\footnote ControlStyle:SplitPath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SplitPath Control Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set the control splits the path into tail and body. The PathEdit displays only the tail of the path, the DirectoryCombo and DirectoryList controls show only the body of the path. If the bit is not set, the controls work on the entire path. \par\li0 {\b Control Types That Can Have This Style}\par\li180 {\uldb DirectoryCombo}{\v ControlType_DirectoryCombo}\line {\uldb DirectoryList}{\v ControlType_DirectoryList}\line {\uldb PathEdit}{\v ControlType_PathEdit}\line \par\li0{\b Associated Control Attribute}\par\li180 None\line \par\li0{\b Numeric Value}\par\li180 0x02000000 = 33554432\line \page #{\footnote ControlStyle_Integer} ${\footnote ControlStyle Integer} K{\footnote Integer} +{\footnote ControlStyle:Integer} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Integer Control Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set on an active control, the associated property is integer valued. Otherwise the property is string valued. \par\li0{\b Control Types That Can Have This Style}\par\li180 {\uldb CheckBox}{\v ControlType_CheckBox}\line {\uldb ComboBox}{\v ControlType_ComboBox}\line {\uldb Edit}{\v ControlType_Edit}\line {\uldb ListBox}{\v ControlType_ListBox}\line {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup}\line \par\li0{\b Associated Control Attribute}\par\li180 {\uldb Integer}{\v ControlAttribute_Integer}.\line \par\li0{\b Numeric Value}\par\li180 0x00000010 = 16\line \page #{\footnote ControlStyle_Progress95} ${\footnote ControlStyle Progress95} K{\footnote Progress95} +{\footnote ControlStyle:Progress95} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Progress95 Control Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set on a progress bar, it is drawn with small disjoint rectangles in Windows 95 style. Otherwise the bar is drawn continuously. \par\li0{\b Control Types That Can Have This Style}\par\li180 {\uldb ProgressBar}{\v ControlType_ProgressBar}\line \par\li0{\b Associated Control Attribute}\par\li180 None.\line \par\li0{\b Numeric Value}\par\li180 0x00010000 = 65536\line \page #{\footnote ControlStyle_ComboList} ${\footnote ControlStyle ComboList} K{\footnote ComboList} +{\footnote ControlStyle:ComboList} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ComboList Control Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set on a combobox, the edit field is replaced by a static text field, therefore the user can not enter a new value, can choose only one of the predefined values. Otherwise the combobox is drawn with an edit field. \par\li0{\b Control Types That Can Have This Style}\par\li180 {\uldb ComboBox}{\v ControlType_ComboBox}\line \par\li0{\b Associated Control Attribute}\par\li180 None.\line \par\li0{\b Numeric Value}\par\li180 0x00020000 = 131072\line \page #{\footnote ControlStyle_PushLike} ${\footnote ControlStyle PushLike} K{\footnote PushLike} +{\footnote ControlStyle:PushLike} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b PushLike Control Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set on a checkbox or a radiobuttongroup the button is drawn with the visual appearance of a push button, but it's logic stays the same. If the bit is not set the controls are drawn in their usual visual style. \par\li0{\b Control Types That Can Have This Style}\par\li180 {\uldb CheckBox}{\v ControlType_CheckBox}\line {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup}\line \par\li0{\b Associated Control Attribute}\par\li180 {\uldb PushLike}{\v ControlAttribute_PushLike}.\line \par\li0{\b Numeric Value}\par\li180 0x00020000 = 131072\line \page #{\footnote ControlStyle_Sorted} ${\footnote ControlStyle Sorted} K{\footnote Sorted} +{\footnote ControlStyle:Sorted} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Sorted Control Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set on a listbox or combobox, the items in the list are displayed in the order defined by the {\b Ordering} column of the corresponding table. If the bit is not set, the items are displayed in alphabetical order. \par\li0{\b Control Types That Can Have This Style}\par\li180 {\uldb ComboBox}{\v ControlType_ComboBox}\line {\uldb ListBox}{\v ControlType_ListBox}\line {\uldb ListView}{\v ControlType_ListView}\line \par\li0{\b Associated Control Attribute}\par\li180 None.\line \par\li0{\b Numeric Value}\par\li180 0x00010000 = 65536\line \page #{\footnote ControlStyle_Sunken} ${\footnote ControlStyle Sunken} K{\footnote Sunken} +{\footnote ControlStyle:Sunken} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Sunken Control Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set on a control, it is displayed with a sunken, 3D look, if that is available on the system. Otherwise the control is displayed in its default visual style. The effect of this style bit is different on different versions of Windows. On most controls it has no visible effect. \par\li0{\b Control Types That Can Have This Style}\par\li180 All controls \par\li0{\b Associated Control Attribute}\par\li180 {\uldb Sunken}{\v ControlAttribute_Sunken}.\line \par\li0{\b Numeric Value}\par\li180 0x00000004 = 4\line \page #{\footnote ControlStyle_Transparent} ${\footnote ControlStyle Transparent} K{\footnote Transparent} +{\footnote ControlStyle:Transparent} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Transparent Control Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set on a text control, it is displayed transparently, the background shows through the control where there are no characters. Otherwise the background is opaque. \par\li0{\b Control Types That Can Have This Style}\par\li180 {\uldb Text}{\v ControlType_Text} \par\li0{\b Associated Control Attribute}\par\li180 {\uldb Transparent}{\v ControlAttribute_Transparent}.\line \par\li0{\b Numeric Value}\par\li180 0x00010000 = 65536\line \page #{\footnote ControlStyle_Visible} ${\footnote ControlStyle Visible} K{\footnote Visible} +{\footnote ControlStyle:Visible} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Visible Control Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set on a control, it is visible on the dialog. Otherwise it is hidden. The visible/hidden state of the control can be changed later through the associated attribute or by the publisher of some event that the given control subscribes to.  \par\li0{\b Control Types That Can Have This Style}\par\li180 All controls \par\li0{\b Associated Control Attribute}\par\li180 {\uldb Visible}{\v ControlAttribute_Visible}.\line \par\li0{\b Numeric Value}\par\li180 0x00000001 = 1\line \page #{\footnote ControlAttribute_Bitmap} ${\footnote ControlAttribute Bitmap} K{\footnote Bitmap} +{\footnote ControlAttribute:Bitmap} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Bitmap Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute tells if the text on the buttons is replaced by a bitmap. \par\li0{\b Type}\par\li180 Boolean. \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1 field. \par\li0{\b Control Types That Have This Attribute}\par\li180 {\uldb CheckBox}{\v ControlType_CheckBox}\line {\uldb PushButton}{\v ControlType_PushButton}\line {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup} \par\li0{\b Associated Control Stylebit}\par\li180 {\uldb Bitmap}{\v ControlStyle_Bitmap}. \par\li0{\b Related Control Attribute}\par\li180 {\uldb Icon}{\v ControlAttribute_Icon}\line \page #{\footnote ControlAttribute_Icon} ${\footnote ControlAttribute Icon} K{\footnote Icon} +{\footnote ControlAttribute:Icon} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Icon Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute tells if the text on the buttons is replaced by an icon. \par\li0{\b Type}\par\li180 Boolean. \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1 field. \par\li0{\b Control Types That Have This Attribute}\par\li180 {\uldb CheckBox}{\v ControlType_CheckBox}\line {\uldb PushButton}{\v ControlType_PushButton}\line {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup} \par\li0{\b Associated Control Stylebit}\par\li180 {\uldb Icon}{\v ControlStyle_Icon}. \par\li0{\b Related Control Attribute}\par\li180 {\uldb Bitmap}{\v ControlAttribute_Bitmap}\line \par\li0{\b Numeric Value}\par\li180 0x00080000 = 524288\line \page #{\footnote ControlAttribute_ClientRect} ${\footnote ControlAttribute ClientRect} K{\footnote ClientRect} +{\footnote ControlAttribute:ClientRect} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ClientRect Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute retrieves the coordinates of a window's client area. The client coordinates specify the upper-left and lower-right corners of the client area. The coordinates are relative to the upper left corner of the control's window. The four values are returned in the following order: left, top, right, bottom.   \par\li0{\b Type}\par\li180 Integer. \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 4 fields. \par\li0{\b Control Types That Have This Attribute}\par\li180 All controls. \par\li0{\b Associated Control Stylebit}\par\li180 None. \par\li0{\b Related Control Attributes}\par\li180 {\uldb Position}{\v ControlAttribute_Position}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line \page #{\footnote ControlAttribute_Default} ${\footnote ControlAttribute Default} K{\footnote Default} +{\footnote ControlAttribute:Default} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Default Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute describes if the given control is defined as the default control on the dialog. If it is the default, then hitting the Return key automaticaly activates this control. \par\li0{\b Type}\par\li180 Boolean. \par\li0{\b Access}\par\li180 Read and Write. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1 field. \par\li0{\b Control Types That Have This Attribute}\par\li180 All controls. \line Although this attribute is defined for every control, it is only practical for controls that have a button-like behaviour. \par\li0{\b Associated Control Stylebit}\par\li180 None. \page #{\footnote ControlAttribute_Enabled} ${\footnote ControlAttribute Enabled} K{\footnote Enabled} +{\footnote ControlAttribute:Enabled} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Enabled Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute describes if the given control is enabled or disabled. Most controls have a gray disabled look. For some inert controls changeing this attribute results in no visible change. \par\li0{\b Type}\par\li180 Boolean. \par\li0{\b Access}\par\li180 Read and Write. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1 field. \par\li0{\b Control Types That Have This Attribute}\par\li180 All controls. \line \par\li0{\b Associated Control Stylebit}\par\li180 {\uldb Enabled}{\v ControlStyle_Enabled}. \page #{\footnote ControlAttribute_HasBorder} ${\footnote ControlAttribute HasBorder} K{\footnote HasBorder} +{\footnote ControlAttribute:HasBorder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b HasBorder Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute describes if the radiobutton group has a border around it. If there is no border, then no text is shown on the top of the group, even if there is some text defined. \par\li0{\b Type}\par\li180 Boolean. \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1 field. \par\li0{\b Control Types That Have This Attribute}\par\li180 {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup} \line \par\li0{\b Associated Control Stylebit}\par\li180 {\uldb HasBorder}{\v ControlStyle_HasBorder}. \page #{\footnote ControlAttribute_Height} ${\footnote ControlAttribute Height} K{\footnote Height} +{\footnote ControlAttribute:Height} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Height Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns the height of the control in pixels. \par\li0{\b Type}\par\li180 Integer. \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1 field. \par\li0{\b Control Types That Have This Attribute}\par\li180 Every control. \par\li0{\b Associated Control Stylebit}\par\li180 None. \par\li0{\b Related Control Attributes}\par\li180 {\uldb Position}{\v ControlAttribute_Position}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line \page #{\footnote ControlAttribute_Width} ${\footnote ControlAttribute Width} K{\footnote Width} +{\footnote ControlAttribute:Width} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Width Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns the width of the control in pixels. \par\li0{\b Type}\par\li180 Integer. \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1 field. \par\li0{\b Control Types That Have This Attribute}\par\li180 Every control. \par\li0{\b Associated Control Stylebit}\par\li180 None. \par\li0{\b Related Control Attributes}\par\li180 {\uldb Position}{\v ControlAttribute_Position}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line \page #{\footnote ControlAttribute_X} ${\footnote ControlAttribute X} K{\footnote X} +{\footnote ControlAttribute:X} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b X Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns the the x coordinate of the upper left corner of the control in pixels. \par\li0{\b Type}\par\li180 Integer. \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1 field. \par\li0{\b Control Types That Have This Attribute}\par\li180 Every control. \par\li0{\b Associated Control Stylebit}\par\li180 None. \par\li0{\b Related Control Attributes}\par\li180 {\uldb Position}{\v ControlAttribute_Position}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb Y}{\v ControlAttribute_Y}\line {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line \page #{\footnote ControlAttribute_Y} ${\footnote ControlAttribute Y} K{\footnote Y} +{\footnote ControlAttribute:Y} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Y Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns the the y coordinate of the upper left corner of the control in pixels. \par\li0{\b Type}\par\li180 Integer. \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1 field. \par\li0{\b Control Types That Have This Attribute}\par\li180 Every control. \par\li0{\b Associated Control Stylebit}\par\li180 None. \par\li0{\b Related Control Attributes}\par\li180 {\uldb Position}{\v ControlAttribute_Position}\line {\uldb Width}{\v ControlAttribute_Width}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line \page #{\footnote ControlAttribute_Help} ${\footnote ControlAttribute Help} K{\footnote Help} +{\footnote ControlAttribute:Help} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Help Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute is the help string used with the control for the context sensitive help. \par\li0{\b Type}\par\li180 String. \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1 field. \par\li0{\b Control Types That Have This Attribute}\par\li180 Every control. \par\li0{\b Associated Control Stylebit}\par\li180 None. \page #{\footnote ControlAttribute_BillboardName} ${\footnote ControlAttribute BillboardName} K{\footnote BillboardName} +{\footnote ControlAttribute:BillboardName} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b BillboardName Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns the name of the currently running billboard, or sets and displays a billboard by name. This attibute is used in preview mode. \par\li0{\b Type}\par\li180 String. \par\li0{\b Access}\par\li180 Read and Write. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1 field. \par\li0{\b Control Types That Have This Attribute}\par\li180 {\uldb Billboard}{\v ControlType_Billboard}. \par\li0{\b Associated Control Stylebit}\par\li180 None. \page #{\footnote ControlAttribute_Text} ${\footnote ControlAttribute Text} K{\footnote Text} +{\footnote ControlAttribute:Text} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Text Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute is the text string used displayed in the control. On setting, if the field 0 of the record is not null, the record is formatted using FormatText. If the field 0 is null, the first field of the record defines the text. On getting the value is always returned in the first field. For some controls this text may not be visible. On Windows the accelerator key for a control is defined by placing a "&" in front of the desired character in this string. \par\li0{\b Type}\par\li180 String. \par\li0{\b Access}\par\li180 Read and Write. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1 field. \par\li0{\b Control Types That Have This Attribute}\par\li180 Every control. \par\li0{\b Associated Control Stylebit}\par\li180 None. \page #{\footnote ControlAttribute_Indirect} ${\footnote ControlAttribute Indirect} K{\footnote Indirect} +{\footnote ControlAttribute:Indirect} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Indirect Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute determines for some active controls if the associated property is referenced indirectly. \par\li0{\b Type}\par\li180 Boolean. \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1 field. \par\li0{\b Control Types That Have This Attribute}\par\li180 All active controls. \par\li0{\b Associated Control Stylebit}\par\li180 {\uldb Indirect}{\v ControlStyle_Indirect}. \page #{\footnote ControlAttribute_Integer} ${\footnote ControlAttribute Integer} K{\footnote Integer} +{\footnote ControlAttribute:Integer} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Integer Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute determines for some active controls if the associated property is integer valued. \par\li0{\b Type}\par\li180 Boolean. \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1 field. \par\li0{\b Control Types That Have This Attribute}\par\li180 {\uldb CheckBox}{\v ControlType_CheckBox}\line {\uldb ComboBox}{\v ControlType_ComboBox}\line {\uldb Edit}{\v ControlType_Edit}\line {\uldb ListBox}{\v ControlType_ListBox}\line {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup}\line \par\li0{\b Associated Control Stylebit}\par\li180 {\uldb Integer}{\v ControlStyle_Integer}. \page #{\footnote ControlAttribute_ItemsCount} ${\footnote ControlAttribute ItemsCount} K{\footnote ItemsCount} +{\footnote ControlAttribute:ItemsCount} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ItemsCount Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns the number of items in the control. These items represent the possible property values that the user can choose from. \par\li0{\b Type}\par\li180 Integer. \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1 field. \par\li0{\b Control Types That Have This Attribute}\par\li180 {\uldb ComboBox}{\v ControlType_ComboBox}\line {\uldb ListBox}{\v ControlType_ListBox}\line {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup}\line \par\li0{\b Associated Control Stylebit}\par\li180 None. \par\li0{\b Related Control Attributes}\par\li180 {\uldb ItemsHandle}{\v ControlAttribute_ItemsHandle}\line {\uldb ItemsHeight}{\v ControlAttribute_ItemsHeight}\line {\uldb ItemsText}{\v ControlAttribute_ItemsText}\line {\uldb ItemsValue}{\v ControlAttribute_ItemsValue}\line {\uldb ItemsWidth}{\v ControlAttribute_ItemsWidth}\line {\uldb ItemsX}{\v ControlAttribute_ItemsX}\line {\uldb ItemsY}{\v ControlAttribute_ItemsY}\line \page #{\footnote ControlAttribute_ItemsHandle} ${\footnote ControlAttribute ItemsHandle} K{\footnote ItemsHandle} +{\footnote ControlAttribute:ItemsHandle} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ItemsHandle Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns a list of the window handles to the individual buttons in a radiobuttongroup. This attribute is supported on Windows only. \par\li0{\b Type}\par\li180 Integer. \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least the number of items. To ensure that the record is created with sufficient number of fields, one can call the {\uldb ItemsCount}{\v ControlAttribute_ItemsCount} control attribute first. The items are listed in a random order, but all Items* attributes will use the same order of items. \par\li0{\b Control Types That Have This Attribute}\par\li180 {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup} Windows only!\line \par\li0{\b Associated Control Stylebit}\par\li180 None. \par\li0{\b Related Control Attributes}\par\li180 {\uldb ItemsCount}{\v ControlAttribute_ItemsCount}\line {\uldb ItemsHeight}{\v ControlAttribute_ItemsHeight}\line {\uldb ItemsText}{\v ControlAttribute_ItemsText}\line {\uldb ItemsValue}{\v ControlAttribute_ItemsValue}\line {\uldb ItemsWidth}{\v ControlAttribute_ItemsWidth}\line {\uldb ItemsX}{\v ControlAttribute_ItemsX}\line {\uldb ItemsY}{\v ControlAttribute_ItemsY}\line \page #{\footnote ControlAttribute_ItemsHeight} ${\footnote ControlAttribute ItemsHeight} K{\footnote ItemsHeight} +{\footnote ControlAttribute:ItemsHandle} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ItemsHeight Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns a list of the height in pixels of the windows for the individual buttons in a radiobuttongroup. \par\li0{\b Type}\par\li180 Integer. \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least the number of items. To ensure that the record is created with sufficient number of field, one can call the {\uldb ItemsCount}{\v ControlAttribute_ItemsCount} control attribute first. The items are listed in a random order, but all Items* attributes will use the same order of items. \par\li0{\b Control Types That Have This Attribute}\par\li180 {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup}\line \par\li0{\b Associated Control Stylebit}\par\li180 None. \par\li0{\b Related Control Attributes}\par\li180 {\uldb ItemsCount}{\v ControlAttribute_ItemsCount}\line {\uldb ItemsHandle}{\v ControlAttribute_ItemsHandle}\line {\uldb ItemsText}{\v ControlAttribute_ItemsText}\line {\uldb ItemsValue}{\v ControlAttribute_ItemsValue}\line {\uldb ItemsWidth}{\v ControlAttribute_ItemsWidth}\line {\uldb ItemsX}{\v ControlAttribute_ItemsX}\line {\uldb ItemsY}{\v ControlAttribute_ItemsY}\line \page #{\footnote ControlAttribute_ItemsWidth} ${\footnote ControlAttribute ItemsWidth} K{\footnote ItemsWidth} +{\footnote ControlAttribute:ItemsWidth} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ItemsWidth Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns a list of the width in pixels of the windows for the individual buttons in a radiobuttongroup. \par\li0{\b Type}\par\li180 Integer. \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least the number of items. To ensure that the record is created with sufficient number of fields, one can call the {\uldb ItemsCount}{\v ControlAttribute_ItemsCount} control attribute first. The items are listed in a random order, but all Items* attributes will use the same order of items. \par\li0{\b Control Types That Have This Attribute}\par\li180 {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup}\line \par\li0{\b Associated Control Stylebit}\par\li180 None. \par\li0{\b Related Control Attributes}\par\li180 {\uldb ItemsCount}{\v ControlAttribute_ItemsCount}\line {\uldb ItemsHandle}{\v ControlAttribute_ItemsHandle}\line {\uldb ItemsHeight}{\v ControlAttribute_ItemsHeight}\line {\uldb ItemsText}{\v ControlAttribute_ItemsText}\line {\uldb ItemsValue}{\v ControlAttribute_ItemsValue}\line {\uldb ItemsX}{\v ControlAttribute_ItemsX}\line {\uldb ItemsY}{\v ControlAttribute_ItemsY}\line \page #{\footnote ControlAttribute_ItemsX} ${\footnote ControlAttribute ItemsX} K{\footnote ItemsX} +{\footnote ControlAttribute:ItemsX} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ItemsX Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns a list of the x coordinates in pixels for the upper left corner of the windows for the individual buttons in a radiobuttongroup. \par\li0{\b Type}\par\li180 Integer. \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least the number of items. To ensure that the record is created with sufficient number of fields, one can call the {\uldb ItemsCount}{\v ControlAttribute_ItemsCount} control attribute first. The items are listed in a random order, but all Items* attributes will use the same order of items. \par\li0{\b Control Types That Have This Attribute}\par\li180 {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup}\line \par\li0{\b Associated Control Stylebit}\par\li180 None. \par\li0{\b Related Control Attributes}\par\li180 {\uldb ItemsCount}{\v ControlAttribute_ItemsCount}\line {\uldb ItemsHandle}{\v ControlAttribute_ItemsHandle}\line {\uldb ItemsHeight}{\v ControlAttribute_ItemsHeight}\line {\uldb ItemsText}{\v ControlAttribute_ItemsText}\line {\uldb ItemsValue}{\v ControlAttribute_ItemsValue}\line {\uldb ItemsWidth}{\v ControlAttribute_ItemsWidth}\line {\uldb ItemsY}{\v ControlAttribute_ItemsY}\line \page #{\footnote ControlAttribute_ItemsY} ${\footnote ControlAttribute ItemsY} K{\footnote ItemsY} +{\footnote ControlAttribute:ItemsY} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ItemsY Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns a list of the y coordinates in pixels for the upper left corner of the windows for the individual buttons in a radiobuttongroup. \par\li0{\b Type}\par\li180 Integer. \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least the number of items. To ensure that the record is created with sufficient number of fields, one can call the {\uldb ItemsCount}{\v ControlAttribute_ItemsCount} control attribute first. The items are listed in a random order, but all Items* attributes will use the same order of items. \par\li0{\b Control Types That Have This Attribute}\par\li180 {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup}\line \par\li0{\b Associated Control Stylebit}\par\li180 None. \par\li0{\b Related Control Attributes}\par\li180 {\uldb ItemsCount}{\v ControlAttribute_ItemsCount}\line {\uldb ItemsHandle}{\v ControlAttribute_ItemsHandle}\line {\uldb ItemsHeight}{\v ControlAttribute_ItemsHeight}\line {\uldb ItemsText}{\v ControlAttribute_ItemsText}\line {\uldb ItemsValue}{\v ControlAttribute_ItemsValue}\line {\uldb ItemsWidth}{\v ControlAttribute_ItemsWidth}\line {\uldb ItemsX}{\v ControlAttribute_ItemsX}\line \page #{\footnote ControlAttribute_ItemsText} ${\footnote ControlAttribute ItemsText} K{\footnote ItemsText} +{\footnote ControlAttribute:ItemsText} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ItemsText Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns a list of the visible text strings associated with the items in the control. \par\li0{\b Type}\par\li180 String. \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least the number of items. To ensure that the record is created with sufficient number of fields, one can call the {\uldb ItemsCount}{\v ControlAttribute_ItemsCount} control attribute first. The items are listed in a random order, but all Items* attributes will use the same order of items. \par\li0{\b Control Types That Have This Attribute}\par\li180 {\uldb ComboBox}{\v ControlType_ComboBox}\line {\uldb ListBox}{\v ControlType_ListBox}\line {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup}\line \par\li0{\b Associated Control Stylebit}\par\li180 None. \par\li0{\b Related Control Attributes}\par\li180 {\uldb ItemsCount}{\v ControlAttribute_ItemsCount}\line {\uldb ItemsHandle}{\v ControlAttribute_ItemsHandle}\line {\uldb ItemsHeight}{\v ControlAttribute_ItemsHeight}\line {\uldb ItemsValue}{\v ControlAttribute_ItemsValue}\line {\uldb ItemsWidth}{\v ControlAttribute_ItemsWidth}\line {\uldb ItemsX}{\v ControlAttribute_ItemsX}\line {\uldb ItemsY}{\v ControlAttribute_ItemsY}\line \page #{\footnote ControlAttribute_ItemsValue} ${\footnote ControlAttribute ItemsValue} K{\footnote ItemsValue} +{\footnote ControlAttribute:ItemsValue} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ItemsValue Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns a list of the property values associated with the items in the control. \par\li0{\b Type}\par\li180 String or Integer depending on the {\uldb Integer}{\v ControlStyle_Integer} stylebit of the control. \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least the number of items. To ensure that the record is created with sufficient number of fields, one can call the {\uldb ItemsCount}{\v ControlAttribute_ItemsCount} control attribute first. The items are listed in a random order, but all Items* attributes will use the same order of items. \par\li0{\b Control Types That Have This Attribute}\par\li180 {\uldb ComboBox}{\v ControlType_ComboBox}\line {\uldb ListBox}{\v ControlType_ListBox}\line {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup}\line \par\li0{\b Associated Control Stylebit}\par\li180 None. \par\li0{\b Related Control Attributes}\par\li180 {\uldb ItemsCount}{\v ControlAttribute_ItemsCount}\line {\uldb ItemsHandle}{\v ControlAttribute_ItemsHandle}\line {\uldb ItemsHeight}{\v ControlAttribute_ItemsHeight}\line {\uldb ItemsText}{\v ControlAttribute_ItemsText}\line {\uldb ItemsWidth}{\v ControlAttribute_ItemsWidth}\line {\uldb ItemsX}{\v ControlAttribute_ItemsX}\line {\uldb ItemsY}{\v ControlAttribute_ItemsY}\line \page #{\footnote ControlAttribute_KeyInt} ${\footnote ControlAttribute KeyInt} K{\footnote KeyInt} +{\footnote ControlAttribute:KeyInt} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b KeyInt Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns the integer representation of the name of the control. The same information is available through the {\uldb IntegerValue}{\v MsiControl_IntegerValue} property of the Control object. \par\li0{\b Type}\par\li180 Integer \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \par\li0{\b Control Types That Have This Attribute}\par\li180 Every control. \par\li0{\b Associated Control Stylebit}\par\li180 None. \par\li0{\b Related Control Attribute}\par\li180 {\uldb KeyString}{\v ControlAttribute_KeyString}\line \page #{\footnote ControlAttribute_KeyString} ${\footnote ControlAttribute KeyString} K{\footnote KeyString} +{\footnote ControlAttribute:KeyString} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b KeyString Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns the string representation of the name of the control. The same information is available through the {\uldb StringValue}{\v MsiControl_StringValue} property of the Control object. \par\li0{\b Type}\par\li180 String \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \par\li0{\b Control Types That Have This Attribute}\par\li180 Every control. \par\li0{\b Associated Control Stylebit}\par\li180 None. \par\li0{\b Related Control Attribute}\par\li180 {\uldb KeyInt}{\v ControlAttribute_KeyInt}\line \page #{\footnote ControlAttribute_Limit} ${\footnote ControlAttribute Limit} K{\footnote Limit} +{\footnote ControlAttribute:Limit} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Limit Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute determines the maximum number of characters the user can enter in the edit field. \par\li0{\b Type}\par\li180 Integer \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \par\li0{\b Control Types That Have This Attribute}\par\li180 {\uldb ComboBox}{\v ControlType_ComboBox}\line {\uldb Edit}{\v ControlType_Edit} \par\li0{\b Associated Control Stylebit}\par\li180 None. \page #{\footnote ControlAttribute_Image} ${\footnote ControlAttribute Image} K{\footnote Image} +{\footnote ControlAttribute:Image} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Image Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute is the name of the image in the {\uldb Binary Table}{\v _msi_Binary_Table@msi.hlp}. If the image is set by the {\uldb ImageHandle}{\v ControlAttribute_ImageHandle} attribute, this attribute does not reflect the correct name anymore. \par\li0{\b Type}\par\li180 String \par\li0{\b Access}\par\li180 Read and Write. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \par\li0{\b Control Types That Have This Attribute}\par\li180 {\uldb Bitmap}{\v ControlType_Bitmap}\line {\uldb Icon}{\v ControlType_Icon} \par\li0{\b Associated Control Stylebit}\par\li180 None. \par\li0{\b Related Control Attribute}\par\li180 {\uldb ImageHandle}{\v ControlAttribute_ImageHandle}\line \page #{\footnote ControlAttribute_ImageHandle} ${\footnote ControlAttribute ImageHandle} K{\footnote ImageHandle} +{\footnote ControlAttribute:ImageHandle} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ImageHandle Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute is the handle to the bitmap or icon displayed in the control. If the image is set by this attribute, the name of the image is not correct anymore and the {\uldb Image}{\v ControlAttribute_Image} attribute will return an incorrect value. \par\li0{\b Type}\par\li180 String \par\li0{\b Access}\par\li180 Read and Write. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \par\li0{\b Control Types That Have This Attribute}\par\li180 {\uldb Bitmap}{\v ControlType_Bitmap}\line {\uldb Icon}{\v ControlType_Icon} \par\li0{\b Associated Control Stylebit}\par\li180 None. \par\li0{\b Related Control Attribute}\par\li180 {\uldb Image}{\v ControlAttribute_Image}\line \page #{\footnote ControlAttribute_OriginalValue} ${\footnote ControlAttribute OriginalValue} K{\footnote OriginalValue} +{\footnote ControlAttribute:OriginalValue} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b OriginalValue Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute is normaly the value of the associated property at the moment of the control's creation. If the {\uldb Undo}{\v MsiControl_Undo} method is called on the control, it puts this value back to the property. \par\li0{\b Type}\par\li180 String or Integer depending on the {\uldb Integer}{\v ControlStyle_Integer} style of the control. \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \par\li0{\b Control Types That Have This Attribute}\par\li180 Every active control. \par\li0{\b Associated Control Stylebit}\par\li180 None. \par\li0{\b Related Control Attributes}\par\li180 {\uldb IndirectPropertyName}{\v ControlAttribute_IndirectPropertyName}\line {\uldb PropertyName}{\v ControlAttribute_PropertyName}\line {\uldb PropertyValue}{\v ControlAttribute_PropertyValue}\line \page #{\footnote ControlAttribute_PropertyValue} ${\footnote ControlAttribute PropertyValue} K{\footnote PropertyValue} +{\footnote ControlAttribute:PropertyValue} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b PropertyValue Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute is the present value of the associated property. If this attribute is changed, the control updates to show the new state. \par\li0{\b Type}\par\li180 String or Integer depending on the {\uldb Integer}{\v ControlStyle_Integer} style of the control. \par\li0{\b Access}\par\li180 Read and Write. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \par\li0{\b Control Types That Have This Attribute}\par\li180 Every active control. \par\li0{\b Associated Control Stylebit}\par\li180 None. \par\li0{\b Related Control Attributes}\par\li180 {\uldb IndirectPropertyName}{\v ControlAttribute_IndirectPropertyName}\line {\uldb OriginalValue}{\v ControlAttribute_OriginalValue}\line {\uldb PropertyName}{\v ControlAttribute_PropertyName}\line \page #{\footnote ControlAttribute_PropertyName} ${\footnote ControlAttribute PropertyName} K{\footnote PropertyName} +{\footnote ControlAttribute:PropertyName} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b PropertyName Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 In case of an active control this attribute is the name of the associated property. For inert controls this attribute returns Null.  \par\li0{\b Type}\par\li180 String \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \par\li0{\b Control Types That Have This Attribute}\par\li180 Every control. \par\li0{\b Associated Control Stylebit}\par\li180 None. \par\li0{\b Related Control Attributes}\par\li180 {\uldb IndirectPropertyName}{\v ControlAttribute_IndirectPropertyName}\line {\uldb OriginalValue}{\v ControlAttribute_OriginalValue}\line {\uldb PropertyValue}{\v ControlAttribute_PropertyValue}\line \page #{\footnote ControlAttribute_IndirectPropertyName} ${\footnote ControlAttribute IndirectPropertyName} K{\footnote IndirectPropertyName} +{\footnote ControlAttribute:IndirectPropertyName} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b IndirectPropertyName Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 In case of an active control this attribute is the name of the associated indirect property. For inert controls this attribute returns Null. \line An indirect property names an other property, and the control displays/changes the value of this second property.  \par\li0{\b Type}\par\li180 String \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \par\li0{\b Control Types That Have This Attribute}\par\li180 Every control. \par\li0{\b Associated Control Stylebit}\par\li180 None. \par\li0{\b Related Control Attributes}\par\li180 {\uldb OriginalValue}{\v ControlAttribute_OriginalValue}\line {\uldb PropertyName}{\v ControlAttribute_PropertyName}\line {\uldb PropertyValue}{\v ControlAttribute_PropertyValue}\line \page #{\footnote ControlAttribute_Position} ${\footnote ControlAttribute Position} K{\footnote Position} +{\footnote ControlAttribute:Position} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Position Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute determines the position of the control on the dialog. The four fields are: left, top, width and height. The coordinates are in pixels and relative to the upper left corner of the dialog. \par\li0{\b Type}\par\li180 Integer \par\li0{\b Access}\par\li180 Read and Write. \par\li0{\b Minimum Size of the Record}\par\li180 At least 4. \par\li0{\b Control Types That Have This Attribute}\par\li180 Every control. \par\li0{\b Associated Control Stylebit}\par\li180 None. \par\li0{\b Related Control Attributes}\par\li180 {\uldb Width}{\v ControlAttribute_Width}\line {\uldb Height}{\v ControlAttribute_Height}\line {\uldb X}{\v ControlAttribute_X}\line {\uldb Y}{\v ControlAttribute_Y}\line {\uldb ClientRect}{\v ControlAttribute_ClientRect}\line \page #{\footnote ControlAttribute_Progress} ${\footnote ControlAttribute Progress} K{\footnote Progress} +{\footnote ControlAttribute:Progress} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Progress Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute measures how far the progress bar is filled up. The record contains two integers and a string. The first number is the progress, the second number is the range (the maximal possible number for the progress).\line On setting, the integers can be entered as integer fields or strings containing the integers.\line If the second number is missing it is assumed to be the default (1024). If the progress is larger than the range then it is changed to be the range. The third field is a string, the name of the action whose progress is displayed. \par\li0{\b Type}\par\li180 Integer \par\li0{\b Access}\par\li180 Read and Write. \par\li0{\b Minimum Size of the Record}\par\li180 At least 3. \par\li0{\b Control Types That Have This Attribute}\par\li180 {\uldb ProgressBar}{\v ControlType_ProgressBar} \par\li0{\b Associated Control Stylebit}\par\li180 None. \page #{\footnote ControlAttribute_PushLike} ${\footnote ControlAttribute PushLike} K{\footnote PushLike} +{\footnote ControlAttribute:PushLike} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b PushLike Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this attribute is set on a checkbox or a radiobuttongroup the button is drawn with the visual appearance of a push button, but it's logic stays the same. If the bit is not set the controls are drawn in their usual visual style. \par\li0{\b Type}\par\li180 Boolean \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \par\li0{\b Control Types That Have This Attribute}\par\li180 {\uldb CheckBox}{\v ControlType_CheckBox}\line {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup} \par\li0{\b Associated Control Stylebit}\par\li180 {\uldb PushLike}{\v ControlStyle_PushLike} \page #{\footnote ControlAttribute_RefCount} ${\footnote ControlAttribute RefCount} K{\footnote RefCount} +{\footnote ControlAttribute:RefCount} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RefCount Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute gives the current reference count to the control. \par\li0{\b Type}\par\li180 Integer \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \par\li0{\b Control Types That Have This Attribute}\par\li180 Every control \par\li0{\b Associated Control Stylebit}\par\li180 None. \page #{\footnote ControlAttribute_Sunken} ${\footnote ControlAttribute Sunken} K{\footnote Sunken} +{\footnote ControlAttribute:Sunken} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Sunken Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this attribute is set on a control, it is displayed with a sunken, 3D look, if that is available on the system. Otherwise the control is displayed in its default visual style. The effect of this attribute is different on different versions of Windows. On most controls it has no visible effect. \par\li0{\b Type}\par\li180 Boolean \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \par\li0{\b Control Types That Have This Attribute}\par\li180 Every control \par\li0{\b Associated Control Stylebit}\par\li180 {\uldb Sunken}{\v ControlStyle_Sunken} \page #{\footnote ControlAttribute_Transparent} ${\footnote ControlAttribute Transparent} K{\footnote Transparent} +{\footnote ControlAttribute:Transparent} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Transparent Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this attribute is set on a text control, it is displayed transparently, the background shows through the control where there are no characters. Otherwise the background is opaque. \par\li0{\b Type}\par\li180 Boolean \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \par\li0{\b Control Types That Have This Attribute}\par\li180 {\uldb Text}{\v ControlType_Text} \par\li0{\b Associated Control Stylebit}\par\li180 {\uldb Transparent}{\v ControlStyle_Transparent} \page #{\footnote ControlAttribute_Visible} ${\footnote ControlAttribute Visible} K{\footnote Visible} +{\footnote ControlAttribute:Visible} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Visible Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this attribute is set the control is visible, otherwise hidden. \par\li0{\b Type}\par\li180 Boolean \par\li0{\b Access}\par\li180 Read and Write. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \par\li0{\b Control Types That Have This Attribute}\par\li180 Every control \par\li0{\b Associated Control Stylebit}\par\li180 {\uldb Visible}{\v ControlStyle_Visible} \page #{\footnote ControlAttribute_WindowHandle} ${\footnote ControlAttribute WindowHandle} K{\footnote WindowHandle} +{\footnote ControlAttribute:WindowHandle} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b WindowHandle Control Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns the window handle to the control's window. Supported on Windows only. \par\li0{\b Type}\par\li180 Integer \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \par\li0{\b Control Types That Have This Attribute}\par\li180 Every control. Windows only! \par\li0{\b Associated Control Stylebit}\par\li180 {\uldb Visible}{\v ControlStyle_Visible} \page #{\footnote DialogStyle_Browse} ${\footnote DialogStyle Browse} K{\footnote Browse} +{\footnote DialogStyle:Browse} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Browse Dialog Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Some description goes here!!! \par\li0{\b Associated Dialog Attribute}\par\li180 None\line \par\li0{\b Numeric Value}\par\li180 0x00020000 = 131072\line \page #{\footnote DialogStyle_Minimize} ${\footnote DialogStyle Minimize} K{\footnote Minimize} +{\footnote DialogStyle:Minimize} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Minimize Dialog Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set the dialog can be minimized. On Windows the dialog's minimize button is enabled and the minimize item is enabled in the system menue. This bit is ignored for modeless dialogs, that can not be ever minimized. \par\li0{\b Associated Dialog Attribute}\par\li180 None\line \par\li0{\b Numeric Value}\par\li180 0x00000004 = 4\line \page #{\footnote DialogStyle_Modal} ${\footnote DialogStyle Modal} K{\footnote Modal} +{\footnote DialogStyle:Modal} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Modal Dialog Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set the dialog is modal, other dialogs of the same application can not be put on top of it, and the dialog keeps the control while it is running. If this bit is not set, the dialog is modeless, other dialogs of the same application may be moved on top of it. After a modeless dialog is created and displayed, the Handler returns control to the Engine. The Engine calls the Handler through the {\uldb Message}{\v MsiHandler_Message} method periodiacly to update the dialog and to give the Handler a chance to process the messages. As soon as this is done, the control is returned to the Engine.  Note that there should be no modeless dialogs in a wizard sequence, since this will return control to the engine, ending the wizard sequence prematurely. \par\li0{\b Associated Dialog Attribute}\par\li180 {\uldb Modal}{\v DialogAttribute_Modal}\line \par\li0{\b Numeric Value}\par\li180 0x00000002 = 2\line \page #{\footnote DialogStyle_KeepModeless} ${\footnote DialogStyle KeepModeless} K{\footnote KeepModeless} +{\footnote DialogStyle:KeepModeless} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b KeepModeless Dialog Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Normally (when this bit is not set), when a dialog is created through DoAction, all other (typically modeless) dialogs are destroyed. If this bit is set, the other dialogs stay alive when this dialog is created. \par\li0{\b Associated Dialog Attribute}\par\li180 {\uldb KeepModeless}{\v DialogAttribute_KeepModeless}\line \par\li0{\b Numeric Value}\par\li180 0x00000010 = 16\line \page #{\footnote DialogStyle_TrackDiskSpace} ${\footnote DialogStyle TrackDiskSpace} K{\footnote TrackDiskSpace} +{\footnote DialogStyle:TrackDiskSpace} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b TrackDiskSpace Dialog Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set, the dialog periodically calls SelectionManager::DetermineOutOfDiskSpace. If the property changes, it notifies the controls on the dialog. This style can be used if there is an control on the dialog indicating if we are out of disk space. If the user switches to an other application and adds/removes files or otherwise modifies the available disk space, we can still quickly catch the change using this style.\line \par\li0{\b Associated Dialog Attribute}\par\li180 None.\line \par\li0{\b Numeric Value}\par\li180 0x00000020 = 32\line \page #{\footnote DialogStyle_UseCustomPalette} ${\footnote DialogStyle UseCustomPalette} K{\footnote UseCustomPalette} +{\footnote DialogStyle:UseCustomPalette} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b UseCustomPalette Dialog Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set the pictures on the dialog will be created with the custom palette (one per dialog received from the first control created). If the bit is not set, the pictures are rendered using a default palette.\line Typically one would set this bit if the dialog contains a picture with a special palette, or several pictures sharing a custom palette. The bit should be unset if the dialog contains several pictures with different palettes. In this case the default will be most likely to give a satisfactory result for all pictures. \par\li0{\b Associated Dialog Attribute}\par\li180 {\uldb UseCustomPalette}{\v DialogAttribute_UseCustomPalette}\line \par\li0{\b Numeric Value}\par\li180 0x00000040 = 64\line \page #{\footnote DialogStyle_Visible} ${\footnote DialogStyle Visible} K{\footnote Visible} +{\footnote DialogStyle:Visible} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Visible Dialog Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set the dialog is originaly created as visible, otherwise it is hidden. \par\li0{\b Associated Dialog Attribute}\par\li180 None\line \par\li0{\b Numeric Value}\par\li180 0x00000001 = 1\line \page #{\footnote DialogStyle_Error} ${\footnote DialogStyle Error} K{\footnote Error} +{\footnote DialogStyle:Error} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Error Dialog Stylebit \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this bit is set the dialog is an error dialog.\line There can be more than one dialog with this style. The ErrorDialog property determines which dialog is used as an error dialog. The selected dialog can be only one of those that have this style bit set.  The error dialog must have a static text control named ErrorText. This control receives the text of the error message. The dialog should also have the seven push buttons corresponding to the possible return values.  The error message determines which of these buttons are actualy displayed. The displayed buttons are rearranged so they are evenly distributed on the dialog. This rearrangement changes the X coordinate of the buttons, but not the other three coordinates.  Therefore it is advisable that no other control should be authored in the same horizontal region of the dialog as the buttons. If the error message specifies no button, the OK button is displayed.  The Default button, First active control and Cancel button values are ignored for an error dialog. The default button defined in the error message will be assigned to all three values. The effect of pushing these buttons have to be defined in the {\uldb ControlEvent Table}{\v _msi_ControlEvent_Table@msi.hlp} just like for all other buttons.  The title of the dialog is authored like for any other dialog. It can get overwritten by the error message if it specifies a header text after the button list.  \par\li0{\b Associated Dialog Attribute}\par\li180 {\uldb Error}{\v DialogAttribute_Error}\line \par\li0{\b Numeric Value}\par\li180 0x00010000 = 65536\line \page #{\footnote DialogAttribute_AddingControls} ${\footnote DialogAttribute AddingControls} K{\footnote AddingControls} +{\footnote DialogAttribute:AddingControls} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b AddingControls Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute shows if the dialog is in the process of adding controls. As long as the dialog is in this phase most methods on the dialog are not available. This attribute is changed to False when {\uldb AddControl}{\v MsiDialog_AddControl} is called with Null signaling that all the controls are added. \par\li0{\b Type}\par\li180 Boolean \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \page #{\footnote DialogAttribute_Argument} ${\footnote DialogAttribute Argument} K{\footnote Argument} +{\footnote DialogAttribute:Argument} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Argument Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 When the user dismisses a modal dialog in some way, the dialog internaly stores the name of the event and its argument that should take place next. This attribute returns the string representation of the event argument. \par\li0{\b Type}\par\li180 String \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \par\li0{\b Related Dialog Attributes}\par\li180 {\uldb EventInt}{\v DialogAttribute_EventInt}\line {\uldb EventString}{\v DialogAttribute_EventString}\line \page #{\footnote DialogAttribute_EventInt} ${\footnote DialogAttribute EventInt} K{\footnote EventInt} +{\footnote DialogAttribute:EventInt} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b EventInt Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 When the user dismisses a modal dialog in some way, the dialog internaly stores the name of the event and its argument that should take place next. This attribute returns the integer representation of the event name. \par\li0{\b Type}\par\li180 Integer \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \par\li0{\b Related Dialog Attributes}\par\li180 {\uldb ArgumentInt}{\v DialogAttribute_Argument}\line {\uldb EventString}{\v DialogAttribute_EventString}\line \page #{\footnote DialogAttribute_EventString} ${\footnote DialogAttribute EventString} K{\footnote EventString} +{\footnote DialogAttribute:EventString} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b EventString Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 When the user dismisses a modal dialog in some way, the dialog internaly stores the name of the event and its argument that should take place next. This attribute returns the string representation of the event name. \par\li0{\b Type}\par\li180 String \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \par\li0{\b Related Dialog Attributes}\par\li180 {\uldb ArgumentInt}{\v DialogAttribute_Argument}\line {\uldb EventInt}{\v DialogAttribute_EventInt}\line \page #{\footnote DialogAttribute_ClientRect} ${\footnote DialogAttribute ClientRect} K{\footnote ClientRect} +{\footnote DialogAttribute:ClientRect} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ClientRect Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute retrieves the coordinates of the window's client area. The client coordinates specify the upper-left and lower-right corners of the client area. The coordinates are relative to the upper left corner of the dialog's window. The four values are returned in the following order: left, top, right, bottom.   \par\li0{\b Type}\par\li180 Integer \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 4. \par\li0{\b Related Dialog Attributes}\par\li180 {\uldb Position}{\v DialogAttribute_Position}\line {\uldb Width}{\v DialogAttribute_Width}\line {\uldb Height}{\v DialogAttribute_Height}\line {\uldb X}{\v DialogAttribute_X}\line {\uldb Y}{\v DialogAttribute_Y}\line {\uldb FullSize}{\v DialogAttribute_FullSize}\line \page #{\footnote DialogAttribute_Position} ${\footnote DialogAttribute Position} K{\footnote Position} +{\footnote DialogAttribute:Position} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Position Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute determines the position of the dialog on the screen. The four fields are: left, top, width and height. The coordinates are in pixels and relative to the upper left corner of the screen. \par\li0{\b Type}\par\li180 Integer \par\li0{\b Access}\par\li180 Read and Write. \par\li0{\b Minimum Size of the Record}\par\li180 At least 4. \par\li0{\b Related Dialog Attributes}\par\li180 {\uldb Width}{\v DialogAttribute_Width}\line {\uldb Height}{\v DialogAttribute_Height}\line {\uldb X}{\v DialogAttribute_X}\line {\uldb Y}{\v DialogAttribute_Y}\line {\uldb ClientRect}{\v DialogAttribute_ClientRect}\line {\uldb FullSize}{\v DialogAttribute_FullSize}\line \page #{\footnote DialogAttribute_FullSize} ${\footnote DialogAttribute FullSize} K{\footnote FullSize} +{\footnote DialogAttribute:FullSize} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FullSize Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute describes the full size of the dialog in pixels. This is the limit for the control placement. If the dialog is larger than the screen, this size describes the entire dialog, and it is larger than the size of the window visible on the screen. \par\li0{\b Type}\par\li180 Integer \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 2. \par\li0{\b Related Dialog Attributes}\par\li180 {\uldb Width}{\v DialogAttribute_Width}\line {\uldb Height}{\v DialogAttribute_Height}\line {\uldb Position}{\v DialogAttribute_Position}\line {\uldb X}{\v DialogAttribute_X}\line {\uldb Y}{\v DialogAttribute_Y}\line {\uldb ClientRect}{\v DialogAttribute_ClientRect}\line \page #{\footnote DialogAttribute_Width} ${\footnote DialogAttribute Width} K{\footnote Width} +{\footnote DialogAttribute:Width} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Width Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns the width of the dialog in pixels. \par\li0{\b Type}\par\li180 Integer \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \par\li0{\b Related Dialog Attributes}\par\li180 {\uldb Position}{\v DialogAttribute_Position}\line {\uldb Height}{\v DialogAttribute_Height}\line {\uldb X}{\v DialogAttribute_X}\line {\uldb Y}{\v DialogAttribute_Y}\line {\uldb ClientRect}{\v DialogAttribute_ClientRect}\line {\uldb FullSize}{\v DialogAttribute_FullSize}\line \page #{\footnote DialogAttribute_Height} ${\footnote DialogAttribute Height} K{\footnote Height} +{\footnote DialogAttribute:Height} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Height Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns the height of the dialog in pixels. \par\li0{\b Type}\par\li180 Integer \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \par\li0{\b Related Dialog Attributes}\par\li180 {\uldb Position}{\v DialogAttribute_Position}\line {\uldb Width}{\v DialogAttribute_Width}\line {\uldb X}{\v DialogAttribute_X}\line {\uldb Y}{\v DialogAttribute_Y}\line {\uldb ClientRect}{\v DialogAttribute_ClientRect}\line {\uldb FullSize}{\v DialogAttribute_FullSize}\line \page #{\footnote DialogAttribute_X} ${\footnote DialogAttribute X} K{\footnote X} +{\footnote DialogAttribute:X} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b X Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns the x coordinate of the upper left corner of the dialog in pixels. \par\li0{\b Type}\par\li180 Integer \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \par\li0{\b Related Dialog Attributes}\par\li180 {\uldb Position}{\v DialogAttribute_Position}\line {\uldb Width}{\v DialogAttribute_Width}\line {\uldb Height}{\v DialogAttribute_Height}\line {\uldb Y}{\v DialogAttribute_Y}\line {\uldb ClientRect}{\v DialogAttribute_ClientRect}\line {\uldb FullSize}{\v DialogAttribute_FullSize}\line \page #{\footnote DialogAttribute_Y} ${\footnote DialogAttribute Y} K{\footnote Y} +{\footnote DialogAttribute:Y} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Y Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns the y coordinate of the upper left corner of the dialog in pixels. \par\li0{\b Type}\par\li180 Integer \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \par\li0{\b Related Dialog Attributes}\par\li180 {\uldb Position}{\v DialogAttribute_Position}\line {\uldb Width}{\v DialogAttribute_Width}\line {\uldb Height}{\v DialogAttribute_Height}\line {\uldb X}{\v DialogAttribute_X}\line {\uldb ClientRect}{\v DialogAttribute_ClientRect}\line {\uldb FullSize}{\v DialogAttribute_FullSize}\line \page #{\footnote DialogAttribute_ControlsCount} ${\footnote DialogAttribute ControlsCount} K{\footnote ControlsCount} +{\footnote DialogAttribute:ControlsCount} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ControlsCount Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns the number of controls existing on the dialog. \par\li0{\b Type}\par\li180 Integer \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \par\li0{\b Related Dialog Attributes}\par\li180 {\uldb ControlsKeyInt}{\v DialogAttribute_ControlsKeyInt}\line {\uldb ControlsKeyString}{\v DialogAttribute_ControlsKeyString}\line {\uldb ControlsNext}{\v DialogAttribute_ControlsNext}\line {\uldb ControlsPrev}{\v DialogAttribute_ControlsPrev}\line {\uldb ControlsProperty}{\v DialogAttribute_ControlsProperty}\line \page #{\footnote DialogAttribute_ControlsKeyInt} ${\footnote DialogAttribute ControlsKeyInt} K{\footnote ControlsKeyInt} +{\footnote DialogAttribute:ControlsKeyInt} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ControlsKeyInt Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns the list of integer representation of the names of the controls existing on the dialog. The controls are listed in a random order, but all Controls* attributes list them in the same order. \par\li0{\b Type}\par\li180 Integer \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least the number of controls on the dialog. To ensure that the record is created with a sufficient number of field, one may call the {\uldb ControlsCount}{\v DialogAttribute_ControlsCount} attribute first. \par\li0{\b Related Dialog Attributes}\par\li180 {\uldb ControlsCount}{\v DialogAttribute_ControlsCount}\line {\uldb ControlsKeyString}{\v DialogAttribute_ControlsKeyString}\line {\uldb ControlsNext}{\v DialogAttribute_ControlsNext}\line {\uldb ControlsPrev}{\v DialogAttribute_ControlsPrev}\line {\uldb ControlsProperty}{\v DialogAttribute_ControlsProperty}\line \page #{\footnote DialogAttribute_ControlsKeyString} ${\footnote DialogAttribute ControlsKeyString} K{\footnote ControlsKeyString} +{\footnote DialogAttribute:ControlsKeyString} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ControlsKeyString Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns the list of string representation of the names of the controls existing on the dialog. The controls are listed in a random order, but all Controls* attributes list them in the same order. \par\li0{\b Type}\par\li180 String \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least the number of controls on the dialog. To ensure that the record is created with a sufficient number of field, one may call the {\uldb ControlsCount}{\v DialogAttribute_ControlsCount} attribute first. \par\li0{\b Related Dialog Attributes}\par\li180 {\uldb ControlsCount}{\v DialogAttribute_ControlsCount}\line {\uldb ControlsKeyInt}{\v DialogAttribute_ControlsKeyInt}\line {\uldb ControlsNext}{\v DialogAttribute_ControlsNext}\line {\uldb ControlsPrev}{\v DialogAttribute_ControlsPrev}\line {\uldb ControlsProperty}{\v DialogAttribute_ControlsProperty}\line \page #{\footnote DialogAttribute_ControlsNext} ${\footnote DialogAttribute ControlsNext} K{\footnote ControlsNext} +{\footnote DialogAttribute:ControlsNext} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ControlsNext Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns the list of the names of the controls next in tab order. The controls are listed in a random order, but all Controls* attributes list them in the same order. \par\li0{\b Type}\par\li180 String \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least the number of controls on the dialog. To ensure that the record is created with a sufficient number of field, one may call the {\uldb ControlsCount}{\v DialogAttribute_ControlsCount} attribute first. \par\li0{\b Related Dialog Attributes}\par\li180 {\uldb ControlsCount}{\v DialogAttribute_ControlsCount}\line {\uldb ControlsKeyInt}{\v DialogAttribute_ControlsKeyInt}\line {\uldb ControlsKeyString}{\v DialogAttribute_ControlsKeyString}\line {\uldb ControlsPrev}{\v DialogAttribute_ControlsPrev}\line {\uldb ControlsProperty}{\v DialogAttribute_ControlsProperty}\line \page #{\footnote DialogAttribute_ControlsPrev} ${\footnote DialogAttribute ControlsPrev} K{\footnote ControlsPrev} +{\footnote DialogAttribute:ControlsPrev} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ControlsPrev Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns the list of the names of the controls previous in tab order. The controls are listed in a random order, but all Controls* attributes list them in the same order. \par\li0{\b Type}\par\li180 String \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least the number of controls on the dialog. To ensure that the record is created with a sufficient number of field, one may call the {\uldb ControlsCount}{\v DialogAttribute_ControlsCount} attribute first. \par\li0{\b Related Dialog Attributes}\par\li180 {\uldb ControlsCount}{\v DialogAttribute_ControlsCount}\line {\uldb ControlsKeyInt}{\v DialogAttribute_ControlsKeyInt}\line {\uldb ControlsKeyString}{\v DialogAttribute_ControlsKeyString}\line {\uldb ControlsNext}{\v DialogAttribute_ControlsNext}\line {\uldb ControlsProperty}{\v DialogAttribute_ControlsProperty}\line \page #{\footnote DialogAttribute_ControlsProperty} ${\footnote DialogAttribute ControlsProperty} K{\footnote ControlsProperty} +{\footnote DialogAttribute:ControlsProperty} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ControlsProperty Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This attribute returns the list of properties associated with the controls. The controls are listed in a random order, but all Controls* attributes list them in the same order. \par\li0{\b Type}\par\li180 String \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least the number of controls on the dialog. To ensure that the record is created with a sufficient number of field, one may call the {\uldb ControlsCount}{\v DialogAttribute_ControlsCount} attribute first. \par\li0{\b Related Dialog Attributes}\par\li180 {\uldb ControlsCount}{\v DialogAttribute_ControlsCount}\line {\uldb ControlsKeyInt}{\v DialogAttribute_ControlsKeyInt}\line {\uldb ControlsKeyString}{\v DialogAttribute_ControlsKeyString}\line {\uldb ControlsNext}{\v DialogAttribute_ControlsNext}\line {\uldb ControlsPrev}{\v DialogAttribute_ControlsPrev}\line \page #{\footnote DialogAttribute_CurrentControl} ${\footnote DialogAttribute CurrentControl} K{\footnote CurrentControl} +{\footnote DialogAttribute:CurrentControl} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CurrentControl Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The name of the control currently having the focus. \par\li0{\b Type}\par\li180 String \par\li0{\b Access}\par\li180 Read and Write. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \page #{\footnote DialogAttribute_DefaultButton} ${\footnote DialogAttribute DefaultButton} K{\footnote DefaultButton} +{\footnote DialogAttribute:DefaultButton} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DefaultButton Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The name of the default control (typically a button). If there is no default control, it returns an empty string. \par\li0{\b Type}\par\li180 String \par\li0{\b Access}\par\li180 Read and Write. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \page #{\footnote DialogAttribute_Preview} ${\footnote DialogAttribute Preview} K{\footnote Preview} +{\footnote DialogAttribute:Preview} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Preview Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A boolean value showing if the handler is in preview mode. \par\li0{\b Type}\par\li180 Boolean \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \page #{\footnote DialogAttribute_Locked} ${\footnote DialogAttribute Locked} K{\footnote Locked} +{\footnote DialogAttribute:Locked} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Locked Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 An integer showing the ID of the control that locked the dialog from closing, because the control has an invalid value. 0 if the dialog is not locked. \par\li0{\b Type}\par\li180 Integer \par\li0{\b Access}\par\li180 Read and Write. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \page #{\footnote DialogAttribute_InPlace} ${\footnote DialogAttribute InPlace} K{\footnote InPlace} +{\footnote DialogAttribute:InPlace} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b InPlace Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A Boolean value showing if the dialog has been moved by the Handler to its final position. \par\li0{\b Type}\par\li180 Boolean \par\li0{\b Access}\par\li180 Read and Write. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \page #{\footnote DialogAttribute_HasControls} ${\footnote DialogAttribute HasControls} K{\footnote HasControls} +{\footnote DialogAttribute:HasControls} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b HasControls Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A boolean value showing if the dialog has controls. It is turned on only when all the controls are added. \par\li0{\b Type}\par\li180 Boolean \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \page #{\footnote DialogAttribute_Text} ${\footnote DialogAttribute Text} K{\footnote Text} +{\footnote DialogAttribute:Text} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Text Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The caption of the dialog. On setting if the field 0 of the record is not null, the record is formatted using FormatString; if the field 0 is null, the first field is the string to be set. On getting the text is always returned in field 1. \par\li0{\b Type}\par\li180 String \par\li0{\b Access}\par\li180 Read and Write. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1. \page #{\footnote DialogAttribute_KeyInt} ${\footnote DialogAttribute KeyInt} K{\footnote KeyInt} +{\footnote DialogAttribute:KeyInt} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b KeyInt Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The integer representation of the name of the dialog. This information is also available through the {\uldb IntegerValue}{\v MsiDialog_IntegerValue} property of the dialog. \par\li0{\b Type}\par\li180 Integer \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1.  \par\li0{\b Related Dialog Attribute}\par\li180 {\uldb KeyString}{\v DialogAttribute_KeyString}\line \page #{\footnote DialogAttribute_KeyString} ${\footnote DialogAttribute KeyString} K{\footnote KeyString} +{\footnote DialogAttribute:KeyString} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b KeyString Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The string representation of the name of the dialog. This information is also available through the {\uldb StringValue}{\v MsiDialog_StringValue} property of the dialog. \par\li0{\b Type}\par\li180 String \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1.  \par\li0{\b Related Dialog Attribute}\par\li180 {\uldb KeyInt}{\v DialogAttribute_KeyInt}\line \page #{\footnote DialogAttribute_Modal} ${\footnote DialogAttribute Modal} K{\footnote Modal} +{\footnote DialogAttribute:Modal} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Modal Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A boolean value showing whether the dialog is modal or modeless. Originaly set by the {\uldb Modal}{\v DialogStyle_Modal} style bit. \par\li0{\b Type}\par\li180 Boolean \par\li0{\b Access}\par\li180 Read and Write. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1.  \page #{\footnote DialogAttribute_KeepModeless} ${\footnote DialogAttribute KeepModeless} K{\footnote KeepModeless} +{\footnote DialogAttribute:KeepModeless} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b KeepModeless Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A boolean value showing whether the dialog takes down the other (typically modeless) dialogs when created. Originaly set by the {\uldb KeepModeless}{\v DialogStyle_KeepModeless} style bit. \par\li0{\b Type}\par\li180 Boolean \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1.  \page #{\footnote DialogAttribute_RefCount} ${\footnote DialogAttribute RefCount} K{\footnote RefCount} +{\footnote DialogAttribute:RefCount} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RefCount Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The reference count of the dialog object. \par\li0{\b Type}\par\li180 Integer \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1.  \page #{\footnote DialogAttribute_Running} ${\footnote DialogAttribute Running} K{\footnote Running} +{\footnote DialogAttribute:Running} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Running Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A boolean value showing if the dialog is currently running (in the message loop) or about to run. \par\li0{\b Type}\par\li180 Boolean \par\li0{\b Access}\par\li180 Read and Write. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1.  \page #{\footnote DialogAttribute_Showing} ${\footnote DialogAttribute Showing} K{\footnote Showing} +{\footnote DialogAttribute:Showing} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Showing Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A boolean value whther the dialog is currently showing. \par\li0{\b Type}\par\li180 Boolean \par\li0{\b Access}\par\li180 Read and Write. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1.  \page #{\footnote DialogAttribute_Error} ${\footnote DialogAttribute Error} K{\footnote Error} +{\footnote DialogAttribute:Error} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Error Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A boolean value whther the dialog is an error dialog. \par\li0{\b Type}\par\li180 Boolean \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1.  \page #{\footnote DialogAttribute_WindowHandle} ${\footnote DialogAttribute WindowHandle} K{\footnote WindowHandle} +{\footnote DialogAttribute:WindowHandle} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b WindowHandle Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The window handle of the dialog's window. \par\li0{\b Type}\par\li180 Integer \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1.  \page #{\footnote DialogAttribute_Palette} ${\footnote DialogAttribute Palette} K{\footnote Palette} +{\footnote DialogAttribute:Palette} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Palette Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The handle of the palette used by the controls on the dialog. \par\li0{\b Type}\par\li180 Integer \par\li0{\b Access}\par\li180 Read and Write. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1.  \page #{\footnote DialogAttribute_UseCustomPalette} ${\footnote DialogAttribute UseCustomPalette} K{\footnote UseCustomPalette} +{\footnote DialogAttribute:UseCustomPalette} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b UseCustomPalette Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A flag showing if a custom palette is used to render the images on the dialog. \par\li0{\b Type}\par\li180 Boolean \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1.  \par\li0{\b Related Dialog Style}\par\li180 {\uldb UseCustomPalette}{\v DialogStyle_UseCustomPalette}\line \page #{\footnote DialogAttribute_ToolTip} ${\footnote DialogAttribute ToolTip} K{\footnote ToolTip} +{\footnote DialogAttribute:ToolTip} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ToolTip Dialog Atribute \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The window handle of the tool tip control. \par\li0{\b Type}\par\li180 Integer \par\li0{\b Access}\par\li180 Read only. \par\li0{\b Minimum Size of the Record}\par\li180 At least 1.  \page #{\footnote ControlEvent_SetProperty} ${\footnote ControlEvent SetProperty} K{\footnote SetProperty} +{\footnote ControlEvent:SetProperty} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SetProperty ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The syntax for this event is different than for other controlevents! In place of the name of the event one puts the property in square brackets: [property_name]. The argument is the new value of the property. To unset the property, the argument must be \{\}. This is necessary, because the argument is a primary key in the table, so it can not be null. The argument will be formatted using the {\uldb FormatText}{\v MsiEngine_FormatText} method, therefor it can contain any expression that the method can handle. The property values are evaluated at the moment of the control event. \par\li0{\b Published By}\par\li180 {\uldb Handler}{\v MsiHandler_Object} \par\li0{\b Argument}\par\li180 The new value of the property. \{\} for null. \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 None. \par\li0{\b Typical Use}\par\li180 A {\uldb PushButton}{\v ControlType_PushButton} control on a dialog linked to this event so it changes a property when the button is pushed.  \page #{\footnote ControlEvent_ActionData} ${\footnote ControlEvent ActionData} K{\footnote ActionData} +{\footnote ControlEvent:ActionData} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ActionData ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The Handler uses this event to broadcast the latest action data. \par\li0{\b Published By}\par\li180 {\uldb Handler}{\v MsiHandler_Object} \par\li0{\b Argument}\par\li180 None. \par\li0{\b Action on Subscribers}\par\li180 The subscribers are hidden when a new action starts and they are shown when a new action data arrives from the engine. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 None. \par\li0{\b Typical Use}\par\li180 A {\uldb Text}{\v ControlType_Text} control on a modeless dialog subscribes to this event using the {\uldb text}{\v ControlAttribute_Text} attribute to receive the latest data on the current action. (For example the names of the files copied during file copy).  \page #{\footnote ControlEvent_ActionProgress} ${\footnote ControlEvent ActionProgress} K{\footnote ActionProgress} +{\footnote ControlEvent:ActionProgress} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ActionProgress ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The Handler uses this event to broadcast the progress information. The name is the actual name of the action not ActionProgress! In other words the control has to subscribe to the event by naming the Action whose progress is being indicated.  \par\li0{\b Published By}\par\li180 {\uldb Handler}{\v MsiHandler_Object} \par\li0{\b Argument}\par\li180 None. \par\li0{\b Action on Subscribers}\par\li180 The subscribers are hidden when a new action starts or and they are shown when a new progress data arrives from the engine. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 None. \par\li0{\b Typical Use}\par\li180 A {\uldb ProgressBar}{\v ControlType_ProgressBar} control on a modeless dialog subscribes to this event using the {\uldb Progress}{\v ControlAttribute_Progress} attribute to receive the progress information.  \page #{\footnote ControlEvent_ActionText} ${\footnote ControlEvent ActionText} K{\footnote ActionText} +{\footnote ControlEvent:ActionText} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ActionText ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The Handler uses this event to broadcast the name of the present action. \par\li0{\b Published By}\par\li180 {\uldb Handler}{\v MsiHandler_Object} \par\li0{\b Argument}\par\li180 None. \par\li0{\b Action on Subscribers}\par\li180 The subscribers are shown when a new progress data arrives from the engine. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 None. \par\li0{\b Typical Use}\par\li180 A {\uldb Text}{\v ControlType_Text} control on a modeless dialog subscribes to this event using the {\uldb text}{\v ControlAttribute_Text} attribute to receive the name of the current action. \page #{\footnote ControlEvent_DirectoryComboPath} ${\footnote ControlEvent DirectoryComboPath} K{\footnote DirectoryComboPath} +{\footnote ControlEvent:DirectoryComboPath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DirectoryComboPath ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The DirectoryCombo control uses this event to broadcast the currently selected path. \par\li0{\b Published By}\par\li180 {\uldb DirectoryCombo}{\v ControlType_DirectoryCombo} \par\li0{\b Argument}\par\li180 None. \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 None. \par\li0{\b Typical Use}\par\li180 A {\uldb Text}{\v ControlType_Text} control on the same modal dialog as the DirectoryCombo subscribes to this event to show the path currently selected by the DirectoryCombo. \page #{\footnote ControlEvent_DirectoryListPath} ${\footnote ControlEvent DirectoryListPath} K{\footnote DirectoryListPath} +{\footnote ControlEvent:DirectoryListPath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DirectoryListPath ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The DirectoryList control uses this event to broadcast the currently selected path. \par\li0{\b Published By}\par\li180 {\uldb DirectoryList}{\v ControlType_DirectoryList} \par\li0{\b Argument}\par\li180 None. \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 None. \par\li0{\b Typical Use}\par\li180 A {\uldb Text}{\v ControlType_Text} control on the same modal dialog as the DirectoryList subscribes to this event to show the path currently selected by the DirectoryList. \page #{\footnote ControlEvent_DirectoryListNew} ${\footnote ControlEvent DirectoryListNew} K{\footnote DirectoryListNew} +{\footnote ControlEvent:DirectoryListNew} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DirectoryListNew ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The DirectoryList control is notified through this event when a new folder must be created. \par\li0{\b Published By}\par\li180 {\uldb DirectoryList}{\v ControlType_DirectoryList} \par\li0{\b Argument}\par\li180 None. \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 Creates a new (ghost) folder and selects its name field for editing. If a ghost folder already exists in the current folder, that that folder is selected and its name is opened for editing. \par\li0{\b Typical Use}\par\li180 A {\uldb PushButton}{\v ControlType_PushButton} control on the same modal dialog as the DirectoryList subscribes to this event to trigger the creation of a new folder. \page #{\footnote ControlEvent_DirectoryListUp} ${\footnote ControlEvent DirectoryListUp} K{\footnote DirectoryListUp} +{\footnote ControlEvent:DirectoryListUp} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DirectoryListUp ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The DirectoryList control is notified through this event when the user wants to select the parent of the present directory. \par\li0{\b Published By}\par\li180 {\uldb DirectoryList}{\v ControlType_DirectoryList} \par\li0{\b Argument}\par\li180 None. \par\li0{\b Action on Subscribers}\par\li180 The subscribers are disabled if the current directory has no parent (it is a volume), otherwise they are enabled. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 Changes the selection to the parent of the current directory. \par\li0{\b Typical Use}\par\li180 A {\uldb PushButton}{\v ControlType_PushButton} control on the same modal dialog as the DirectoryList subscribes to this event to trigger stepping up in the path. \page #{\footnote ControlEvent_DirectoryListOpen} ${\footnote ControlEvent DirectoryListOpen} K{\footnote DirectoryListOpen} +{\footnote ControlEvent:DirectoryListOpen} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DirectoryListOpen ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The DirectoryList control is notified through this event when the user wants to open the selected directory. \par\li0{\b Published By}\par\li180 {\uldb DirectoryList}{\v ControlType_DirectoryList} \par\li0{\b Argument}\par\li180 None. \par\li0{\b Action on Subscribers}\par\li180 The subscribers are disabled if there is no folder selected currently. Otherwise they are enabled. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 Changes the selection to the highlighted directory. \par\li0{\b Typical Use}\par\li180 A {\uldb PushButton}{\v ControlType_PushButton} control on the same modal dialog as the DirectoryList subscribes to this event to trigger stepping down in the path. \page #{\footnote ControlEvent_SelectionAction} ${\footnote ControlEvent SelectionAction} K{\footnote SelectionAction} +{\footnote ControlEvent:SelectionAction} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SelectionAction ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The SelectionTree control publishes this event that contains a string describing the action selected for the highlighted item. The string is one of the "Sel*" strings from the {\uldb UIText Table}{\v _msi_UIText_Table@msi.hlp}. \par\li0{\b Published By}\par\li180 {\uldb SelectionTree}{\v ControlType_SelectionTree} \par\li0{\b Argument}\par\li180 None. \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 None. \par\li0{\b Typical Use}\par\li180 A {\uldb Text}{\v ControlType_Text} control on the same modal dialog as the SelectionTree subscribes to this event to display the explanation of the currently selected action. \page #{\footnote ControlEvent_SelectionDescription} ${\footnote ControlEvent SelectionDescription} K{\footnote SelectionDescription} +{\footnote ControlEvent:SelectionDescription} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SelectionDescription ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The SelectionTree control publishes this event that contains the describtion for the highlighted item. This string is the {\b Description} field of the {\uldb Feature Table}{\v _msi_Feature_Table@msi.hlp}. \par\li0{\b Published By}\par\li180 {\uldb SelectionTree}{\v ControlType_SelectionTree} \par\li0{\b Argument}\par\li180 None. \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 None. \par\li0{\b Typical Use}\par\li180 A {\uldb Text}{\v ControlType_Text} control on the same modal dialog as the SelectionTree subscribes to this event to display the description of the highlighted item. \page #{\footnote ControlEvent_SelectionSize} ${\footnote ControlEvent SelectionSize} K{\footnote SelectionSize} +{\footnote ControlEvent:SelectionSize} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SelectionSize ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The SelectionTree control publishes this event that contains the size for the highlighted item. If it is a parent item, it also contains the number of children selected. The string is one of the {\b SelChildCostPos},  {\b SelChildCostNeg}, {\b SelParentCostPosPos}, {\b SelParentCostPosNeg}, {\b SelParentCostNegPos} or {\b SelParentCostNegNeg} strings from the {\uldb UIText Table}{\v UIText_Table@msi.hlp}. \par\li0{\b Published By}\par\li180 {\uldb SelectionTree}{\v ControlType_SelectionTree} \par\li0{\b Argument}\par\li180 None. \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 None. \par\li0{\b Typical Use}\par\li180 A {\uldb Text}{\v ControlType_Text} control on the same modal dialog as the SelectionTree subscribes to this event to display the size of the highlighted item. \page #{\footnote ControlEvent_SelectionPath} ${\footnote ControlEvent SelectionPath} K{\footnote SelectionPath} +{\footnote ControlEvent:SelectionPath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SelectionPath ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The SelectionTree control publishes this event that contains the path for the highlighted item. If the item is selected to run from source, this is the path of the source. If the item is selected to be absent, the string is the {\b AbsentPath} string from the {\uldb UIText Table}{\v UIText_Table@msi.hlp}. \par\li0{\b Published By}\par\li180 {\uldb SelectionTree}{\v ControlType_SelectionTree} \par\li0{\b Argument}\par\li180 None. \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 None. \par\li0{\b Typical Use}\par\li180 A {\uldb Text}{\v ControlType_Text} control on the same modal dialog as the SelectionTree subscribes to this event to display the path of the highlighted item. \page #{\footnote ControlEvent_SelectionPathOn} ${\footnote ControlEvent SelectionPathOn} K{\footnote SelectionPathOn} +{\footnote ControlEvent:SelectionPathOn} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SelectionPathOn ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The SelectionTree control publishes this event that is a boolean value whether there is a selection path associated with the currently selected feature. \par\li0{\b Published By}\par\li180 {\uldb SelectionTree}{\v ControlType_SelectionTree} \par\li0{\b Argument}\par\li180 None. \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 None. \par\li0{\b Typical Use}\par\li180 A {\uldb Text}{\v ControlType_Text} control on the same modal dialog as the SelectionTree subscribes to this event as the caption of the selection path. This text control is turned visible or hidden depending on this event. \page #{\footnote ControlEvent_SelectionIcon} ${\footnote ControlEvent SelectionIcon} K{\footnote SelectionIcon} +{\footnote ControlEvent:SelectionIcon} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SelectionIcon ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The SelectionTree control publishes this event that contains the handle to the icon indicating the selected action on the highlighted item.  \par\li0{\b Published By}\par\li180 {\uldb SelectionTree}{\v ControlType_SelectionTree} \par\li0{\b Argument}\par\li180 None. \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 None. \par\li0{\b Typical Use}\par\li180 An {\uldb Icon}{\v ControlType_Icon} control on the same modal dialog as the SelectionTree subscribes to this event to display the icon corresponding to the highlighted item. \page #{\footnote ControlEvent_SelectionBrowse} ${\footnote ControlEvent SelectionBrowse} K{\footnote SelectionBrowse} +{\footnote ControlEvent:SelectionBrowse} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SelectionBrowse ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The SelectionTree control publishes this event that makes possible for an other control (typicaly a button) to trigger the browse dialog for the currently highlighted item.  \par\li0{\b Published By}\par\li180 {\uldb SelectionTree}{\v ControlType_SelectionTree} \par\li0{\b Argument}\par\li180 The name of the dialog to be spawned. \par\li0{\b Action on Subscribers}\par\li180 The subscribers are disabled or enabled depending on if the path of the currently selected item can be modified by the user. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 Spawns a browse dialog to modify the path. \par\li0{\b Typical Use}\par\li180 A {\uldb PushButton}{\v ControlType_PushButton} control on the same modal dialog as the SelectionTree subscribes to this event to trigger the browse dialog. \page #{\footnote ControlEvent_EndDialog} ${\footnote ControlEvent EndDialog} K{\footnote EndDialog} +{\footnote ControlEvent:EndDialog} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b EndDialog ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The Handler is notified through this event when a modal dialog has to be removed. \par\li0{\b Published By}\par\li180 {\uldb Handler}{\v MsiHandler_Object} \par\li0{\b Argument}\par\li180 On regular dialogs: "Return", "Exit", "Retry" or "Ignore".\line On error dialogs" "ErrorOk", "ErrorCancel", "ErrorAbort", "ErrorRetry", "ErrorIgnore", "ErrorYes" or "ErrorNo". \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 In all cases the Handler removes the present dialog.\line If the argument is "Exit", the wizard sequence is closed, the control returns to the Engine with the UserExit value.\line If the argument is "Retry", the wizard sequence is closed, the control returns to the Engine with the Suspend value.\line If the argument is "Ignore", the wizard sequence is closed, the control returns to the Engine with the Finished value.\line The above three arguments can be used only on dialogs that are not children of some other dialog.\line If the argument is "Return", the control returns to the parent of the present dialog, if there is a parent. If there is no parent, the control returns to the Engine with the Success value.\line For buttons on an error dialog the possible values correspond to the return codes to the Engine. \par\li0{\b Typical Use}\par\li180 A {\uldb PushButton}{\v ControlType_PushButton} control on a modal dialog is tied to this event in the {\uldb ControlEvent}{\v ControlEvent_Table@msi.hlp} table to dismiss a dialog. \page #{\footnote ControlEvent_NewDialog} ${\footnote ControlEvent NewDialog} K{\footnote NewDialog} +{\footnote ControlEvent:NewDialog} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b NewDialog ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The Handler is notified through this event when a modal dialog transitions to an other one. \par\li0{\b Published By}\par\li180 {\uldb Handler}{\v MsiHandler_Object} \par\li0{\b Argument}\par\li180 A string, the name of the new dialog. \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 The Handler removes the present dialog and creates the new one with the name indicated in the argument. \par\li0{\b Typical Use}\par\li180 A {\uldb PushButton}{\v ControlType_PushButton} control on a modal dialog is tied to this event in the {\uldb ControlEvent}{\v ControlEvent_Table@msi.hlp} table to signal a transition to the next or previous dialog of the same wizard sequence. \page #{\footnote ControlEvent_SpawnDialog} ${\footnote ControlEvent SpawnDialog} K{\footnote SpawnDialog} +{\footnote ControlEvent:SpawnDialog} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SpawnDialog ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The Handler is notified through this event when a modal dialog wants to create a child. \par\li0{\b Published By}\par\li180 {\uldb Handler}{\v MsiHandler_Object} \par\li0{\b Argument}\par\li180 A string, the name of the new dialog. \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 The Handler keeps the present dialog and creates the new one with the name indicated in the argument, placeing it on top of the old one. \par\li0{\b Typical Use}\par\li180 A {\uldb PushButton}{\v ControlType_PushButton} control on a modal dialog is tied to this event in the {\uldb ControlEvent}{\v ControlEvent_Table@msi.hlp} table to creat a child dialog, like a "Are you sure you want to cancel" dialog. \page #{\footnote ControlEvent_AddLocal} ${\footnote ControlEvent AddLocal} K{\footnote AddLocal} +{\footnote ControlEvent:AddLocal} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b AddLocal ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The SelectionManager is notified through this event when a feature or all features have to be selected as local. \par\li0{\b Published By}\par\li180 {\uldb Handler}{\v MsiHandler_Object} \par\li0{\b Argument}\par\li180 A string, either the name of the feature or "ALL" (this second option is case insensitive). \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 The Handler keeps the present dialog running and calls the {\uldb ConfigureFeature}{\v MsiSelectionManager_ConfigureFeature} method of the Selection Manager. \par\li0{\b Typical Use}\par\li180 A {\uldb PushButton}{\v ControlType_PushButton} control on a modal dialog is tied to this event. \page #{\footnote ControlEvent_AddSource} ${\footnote ControlEvent AddSource} K{\footnote AddSource} +{\footnote ControlEvent:AddSource} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b AddSource ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The SelectionManager is notified through this event when a feature or all features have to be selected as source. \par\li0{\b Published By}\par\li180 {\uldb Handler}{\v MsiHandler_Object} \par\li0{\b Argument}\par\li180 A string, either the name of the feature or "ALL" (this second option is case insensitive). \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 The Handler keeps the present dialog running and calls the {\uldb ConfigureFeature}{\v MsiSelectionManager_ConfigureFeature} method of the Selection Manager. \par\li0{\b Typical Use}\par\li180 A {\uldb PushButton}{\v ControlType_PushButton} control on a modal dialog is tied to this event. \page #{\footnote ControlEvent_Remove} ${\footnote ControlEvent Remove} K{\footnote Remove} +{\footnote ControlEvent:Remove} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Remove ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The SelectionManager is notified through this event when a feature or all features have to be selected for removal. \par\li0{\b Published By}\par\li180 {\uldb Handler}{\v MsiHandler_Object} \par\li0{\b Argument}\par\li180 A string, either the name of the feature or "ALL" (this second option is case insensitive). \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 The Handler keeps the present dialog running and calls the {\uldb ConfigureFeature}{\v MsiSelectionManager_ConfigureFeature} method of the Selection Manager. \par\li0{\b Typical Use}\par\li180 A {\uldb PushButton}{\v ControlType_PushButton} control on a modal dialog is tied to this event. \page #{\footnote ControlEvent_Reinstall} ${\footnote ControlEvent Reinstall} K{\footnote Reinstall ControlEvent} +{\footnote ControlEvent:Reinstall} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Reinstall ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This ControlEvent allows the author to initiate a reinstall of some or all features, typically with the push  of a {\uldb PushButton}{\v ControlType_PushButton} control. \par\li0{\b Published By}\par\li180 {\uldb Handler}{\v MsiHandler_Object} \par\li0{\b Argument}\par\li180 A string, either the name of the feature or "ALL" (this second option is case insensitive). \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 The Handler keeps the present dialog running and calls the  {\uldb ConfigureFeature}{\v MsiSelectionManager_ConfigureFeature} method of the Selection Manager. \par\li0{\b Typical Use}\par\li180 A {\uldb PushButton}{\v ControlType_PushButton} control on a modal dialog is tied to this event. Typically the same button  is also tied to a {\uldb ReinstallMode}{\v ControlEvent_ReinstallMode} control event immediately preceeding this one. \page #{\footnote ControlEvent_ReinstallMode} ${\footnote ControlEvent ReinstallMode} K{\footnote ReinstallMode ControlEvent} +{\footnote ControlEvent:ReinstallMode} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ReinstallMode ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This ControlEvent allows the author to specify the validation mode(s) to be used during a reinstall. \par\li0{\b Published By}\par\li180 {\uldb Handler}{\v MsiHandler_Object} \par\li0{\b Argument}\par\li180 A string. For the list of possible values, see the   {\uldb SetReinstallMode}{\v MsiSelectionManager_SetReinstallMode} method. \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 The Handler keeps the present dialog running and calls the   {\uldb SetReinstallMode}{\v MsiSelectionManager_SetReinstallMode} method of the Selection Manager. \par\li0{\b Typical Use}\par\li180 A {\uldb PushButton}{\v ControlType_PushButton} control on a modal dialog is tied to this event. Typically the  same button is also tied to a {\uldb Reinstall}{\v ControlEvent_Reinstall} control event immediately following this one. \page #{\footnote ControlEvent_CheckExistingPath} ${\footnote ControlEvent CheckExistingPath} K{\footnote CheckExistingPath} +{\footnote ControlEvent:CheckExistingPath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CheckExistingPath ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The Handler is notified through this event when the browse dialog has to be removed and it has to be verified that the selected path is writable.  If the path is writable, the event behaves like the EndDialog, Return event.  If the path is not writable, it displays an error dialog and returns control to the browse dialog. \par\li0{\b Published By}\par\li180 {\uldb Handler}{\v MsiHandler_Object} \par\li0{\b Argument}\par\li180 The name of the property containing the path. If the property is indirected, the property name is enclosed in square brackets. \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 The Handler removes the present dialog and returns to the calling dialog if the path is writable, otherwise it stays on the present dialog. \par\li0{\b Typical Use}\par\li180 A {\uldb PushButton}{\v ControlType_PushButton} control on a browse dialog is tied to this event  in the {\uldb ControlEvent}{\v ControlEvent_Table@msi.hlp} table to check the selected path before returning to the selection dialog. \page #{\footnote ControlEvent_CheckExistingTargetPath} ${\footnote ControlEvent CheckExistingTargetPath} K{\footnote CheckExistingTargetPath} +{\footnote ControlEvent:CheckExistingTargetPath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CheckExistingTargetPath ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The Handler is notified through this event when it has to be verified that the selected path is writable.  If the path is not writable, it blocks further control events associated with the same control. \par\li0{\b Published By}\par\li180 {\uldb Handler}{\v MsiHandler_Object} \par\li0{\b Argument}\par\li180 The name of the property containing the path. If the property is indirected, the property name is enclosed in square brackets. \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 The path is checked. \par\li0{\b Typical Use}\par\li180 A {\uldb PushButton}{\v ControlType_PushButton} control on a browse dialog is tied to this event  in the {\uldb ControlEvent}{\v ControlEvent_Table@msi.hlp} table to check the selected path before returning to the selection dialog. \page #{\footnote ControlEvent_CheckPath} ${\footnote ControlEvent CheckPath} K{\footnote CheckPath} +{\footnote ControlEvent:CheckPath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CheckPath ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The Handler is notified through this event when the browse dialog has to be removed and it has to be verified that the selected path is valid.  If the path is valid, the event behaves like the EndDialog, Return event.  If the path is not valid, it displays an error dialog and returns control to the browse dialog. \par\li0{\b Published By}\par\li180 {\uldb Handler}{\v MsiHandler_Object} \par\li0{\b Argument}\par\li180 The name of the property containing the path. If the property is indirected, the property name is enclosed in square brackets. \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 The Handler removes the present dialog and returns to the calling dialog if the path is writable, otherwise it stays on the present dialog. \par\li0{\b Typical Use}\par\li180 A {\uldb PushButton}{\v ControlType_PushButton} control on a browse dialog is tied to this event  in the {\uldb ControlEvent}{\v ControlEvent_Table@msi.hlp} table to check the selected path before returning to the selection dialog. \page #{\footnote ControlEvent_CheckTargetPath} ${\footnote ControlEvent CheckTargetPath} K{\footnote CheckTargetPath} +{\footnote ControlEvent:CheckTargetPath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CheckTargetPath ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The Handler is notified through this event when it has to be verified that the selected path is valid.  If the path is not valid, it blocks further control events associated with the same control. \par\li0{\b Published By}\par\li180 {\uldb Handler}{\v MsiHandler_Object} \par\li0{\b Argument}\par\li180 The name of the property containing the path. If the property is indirected, the property name is enclosed in square brackets. \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 The path is checked. \par\li0{\b Typical Use}\par\li180 A {\uldb PushButton}{\v ControlType_PushButton} control on a browse dialog is tied to this event  in the {\uldb ControlEvent}{\v ControlEvent_Table@msi.hlp} table to check the selected path before returning to the selection dialog. \page #{\footnote ControlEvent_SetPath} ${\footnote ControlEvent SetPath} K{\footnote SetPath} +{\footnote ControlEvent:SetPath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SetPath ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The Handler is notified through this event when the browse dialog has to be removed and it has to be verified that the selected path is valid and writeable. It also calls the DirectoryManager to set the target path.  If the path is valid, the event behaves like the EndDialog, Return event.  If the path is not valid, it displays an error dialog and returns control to the browse dialog. \par\li0{\b Published By}\par\li180 {\uldb Handler}{\v MsiHandler_Object} \par\li0{\b Argument}\par\li180 The name of the property containing the path. If the property is indirected, the property name is enclosed in square brackets. \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 The Handler removes the present dialog and returns to the calling dialog if the path is writable, otherwise it stays on the present dialog. \par\li0{\b Typical Use}\par\li180 A {\uldb PushButton}{\v ControlType_PushButton} control on a browse dialog is tied to this event  in the {\uldb ControlEvent}{\v ControlEvent_Table@msi.hlp} table to check the selected path before returning to the selection dialog. \page #{\footnote ControlEvent_SetTargetPath} ${\footnote ControlEvent SetTargetPath} K{\footnote SetTargetPath} +{\footnote ControlEvent:SetTargetPath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SetTargetPath ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The Handler is notified through this event when it has to be verified that the selected path is valid and writeable. It also calls the DirectoryManager to set the target path.  If the path is not valid, it blocks further control events associated with the same control. \par\li0{\b Published By}\par\li180 {\uldb Handler}{\v MsiHandler_Object} \par\li0{\b Argument}\par\li180 The name of the property containing the path. If the property is indirected, the property name is enclosed in square brackets. \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 The path is checked and set. \par\li0{\b Typical Use}\par\li180 A {\uldb PushButton}{\v ControlType_PushButton} control on a browse dialog is tied to this event  in the {\uldb ControlEvent}{\v ControlEvent_Table@msi.hlp} table to check the selected path before returning to the selection dialog. \page #{\footnote ControlEvent_SetInstallLevel} ${\footnote ControlEvent SetInstallLevel} K{\footnote SetInstallLevel} +{\footnote ControlEvent:SetInstallLevel} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SetInstallLevel ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The handler calls the engine to set the installation level to the value specified in the argument \par\li0{\b Published By}\par\li180 {\uldb Handler}{\v MsiHandler_Object} \par\li0{\b Argument}\par\li180 An integer. The new value of the installation level. \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 The handler calls the engine to change the installation level. \par\li0{\b Typical Use}\par\li180 A {\uldb PushButton}{\v ControlType_PushButton} control on a modal dialog is tied to this event in the {\uldb ControlEvent}{\v ControlEvent_Table@msi.hlp} table to change the installation level. \page #{\footnote ControlEvent_Reset} ${\footnote ControlEvent Reset} K{\footnote Reset} +{\footnote ControlEvent:Reset} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Reset ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The dialog is reset. In other words all the controls on the dialog are called to undo the property changes they have performed. It should reset all the property values to what they were when the dialog was created. \line There is one case that is not handled properly. If there are at least two controls on the same dialog linked indirectly to the same property and at least one of them started with some other property originaly, this property value is sometimes reset to its second value. Since this case is very esoteric, it is not worth the special code to handle it. \par\li0{\b Published By}\par\li180 {\uldb Handler}{\v MsiHandler_Object} \par\li0{\b Argument}\par\li180 None. \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 All the controls on the dialog are called to restore the original values of their properties. \par\li0{\b Typical Use}\par\li180 A {\uldb PushButton}{\v ControlType_PushButton} control on a modal dialog is tied to this event to allow reseting all the values on the dialog, canceling all the changes performed on the page. \page #{\footnote ControlEvent_ValidateProductID} ${\footnote ControlEvent ValidateProductID} K{\footnote ValidateProductID} +{\footnote ControlEvent:ValidateProductID} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ValidateProductID ControlEvent \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This event calls the Engine to validate the Product ID. If the validation succeeds, the PIDTemplate property is removed. Otherwise this event puts up an error message. \par\li0{\b Published By}\par\li180 {\uldb Handler}{\v MsiHandler_Object} \par\li0{\b Argument}\par\li180 None. \par\li0{\b Action on Subscribers}\par\li180 None. \par\li0{\b Action by Publisher When Subscriber Activated}\par\li180 Calls the engine to validate the Product ID. \par\li0{\b Typical Use}\par\li180 A {\uldb PushButton}{\v ControlType_PushButton} control on a modal dialog is tied to this event to allow checking the user entry for the PID and move on to the next dialog if the entry is valid. \page #{\footnote DialogType_Standard} ${\footnote DialogType Standard} K{\footnote Standard} +{\footnote DialogType:Standard} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Standard Dialog Type \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 As the name suggests, this is the regular dialog type, used as modal dialogs in wizard sequences and modeless dialogs. \par\li0{\b Creation}\par\li180 Through the {\uldb DialogCreate}{\v MsiDialogHandler_DialogCreate} and {\uldb AddDialog}{\v MsiDialogHandler_AddDialog} methods of the Handler. \par\li0{\b Destruction}\par\li180 Through the {\uldb RemoveDialog}{\v MsiDialogHandler_RemoveDialog} method of the Handler. \page #{\footnote DialogType_Browse} ${\footnote DialogType Browse} K{\footnote Browse} +{\footnote DialogType:Browse} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Browse Dialog Type \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 MAC ONLY!\line Add info here!!! \par\li0{\b Creation}\par\li180 Info here!!! \par\li0{\b Destruction}\par\li180 Info here!!! \page #{\footnote SpecialDialog_FilesInUse} ${\footnote SpecialDialog FilesInUse} K{\footnote FilesInUse} +{\footnote SpecialDialog:FilesInUse} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FilesInUse Dialog \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This is a dialog that can be authored to inform the user of any processes that are using files that need to be  overwritten or deleted.  This would give the user the opportunity to shut down the offending processes, thus  avoiding the necessity of rebooting the machine in order to complete the replacement or deletion of the "in-use"  file(s). \par\li0{\b Creation}\par\li180 This dialog is created as required by the {\uldb InstallValidate}{\v _msi_Action_InstallValidate@msi.hlp} action.  See that  topic for complete details. \par\li0{\b Destruction}\par\li180 Through the {\uldb RemoveDialog}{\v MsiDialogHandler_RemoveDialog} method of the Handler. \page #{\footnote SpecialDialog_Browse} ${\footnote SpecialDialog Browse} K{\footnote Browse} +{\footnote SpecialDialog:Browse} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Browse Dialog \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This dialog is used to select a directory. The directory does not have to exist. \line The dialog typicaly contains the following controls:\line A {\uldb PathEdit control}{\v ControlType_PathEdit} to select the tail section of the path. This control can not loose focus if the entered tail is not valid on the present volume.\line A {\uldb DirectoryCombo control}{\v ControlType_DirectoryCombo} to show the presently selected path, except the last segment, that is displayed by the PathEdit control.\line A {\uldb DirectoryList control}{\v ControlType_DirectoryList} to show the folders below the directory currently displayed by the DirectoryCombo. This may also show a "phantom folder", a folder not yet created.\line The above three controls are tied to the same property (possibly indirectly). The property is the path being selected.\line The DirectoryCombo control specifies through its stylebits what volumetypes are displayed. On a typical Browse dialog probably all types should be turned on.\line The dialog typically also contains three {\uldb PushButton controls}{\v ControlType_PushButton}, that serve as DirectoryUp, NewFolder and Open buttons. The buttons subscribe to the {\uldb DirectoryListUp}{\v ControlEvent_DirectoryListUp}, {\uldb DirectoryListNew}{\v ControlEvent_DirectoryListNew} and {\uldb DirectoryListOpen}{\v ControlEvent_DirectoryListOpen} control events, respectively using the {\uldb ControlEvent Table}{\v ControlEvent_Table@msi.hlp}.\line If the dialog is designed to search for existing folders only, the NewFolder button may be omitted.\line The above buttons usually authored as picture buttons on Win95 and NT4. Since we do not support picture buttons on NT3.51, the author has to provide alternative buttons for the NT3.51 environment.\line When this dialog is authored, the "NewFolder" string must be defined in the {\uldb UIText Table}{\v UIText_Table@msi.hlp}.\line When this dialog is used to select a location for files to be written, the OK button should be linked to the {\uldb CheckPath controlevent}{\v ControlEvent_CheckPath} instead of the {\uldb EndDialog controlevent}{\v ControlEvent_EndDialog} with a Return argument. The argument of the CheckPath event is the name of the property, or if it indirected than the name of the property in square brackets. This control event first checks if the selected path is writable. If it is, the event behaves like EndDialog with the Return argument. Otherwise it puts up an error dialog and returns focus to the Browse dialog.\line \page #{\footnote SpecialDialog_Cancel} ${\footnote SpecialDialog Cancel} K{\footnote Cancel} +{\footnote SpecialDialog:Cancel} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Cancel Dialog \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This is a modal dialog to confirm that the user indeed wants to terminate the installation. Typically contains a {\uldb Text control}{\v ControlType_Text} and two {\uldb PushButtons}{\v ControlType_PushButton}.  The two buttons give the choices to the user the change his/her mind and return to the last dialog or confirm the termination of the install. The two buttons in the {\uldb ControlEvent Table}{\v ControlEvent_Table@msi.hlp} are linked to the {\uldb EndDialog}{\v ControlEvent_EndDialog} controlevent with the Return and Exit arguments. The Return causes the Cancel dialog to be destroyed and the focus returns to the previous dialog. The Exit causes the Handler to return control to the Engine with the appropriate code indicating that the user wants to abort. The Engine on receiving this code shuts down and puts up the {\uldb UserExit Dialog}{\v SpecialDialog_UserExit}. \page #{\footnote SpecialDialog_DiskCost} ${\footnote SpecialDialog DiskCost} K{\footnote DiskCost} +{\footnote SpecialDialog:DiskCost} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DiskCost Dialog \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This dialog is typically spawned when the OutOfDiskSpace property is set indicating that there is not enough disk space for the currently selected installation.\line This dialog or a variation of it may be also activated from the {\uldb Selection Dialog}{\v SpecialDialog_Selection}, to give the user an overview of the diskspace needed on the different volumes.\line The dialog is a modal dialog and normally contains a {\uldb VolumeCostList control}{\v ControlType_VolumeCostList} and a {\uldb PushButton}{\v ControlType_PushButton} that returns the user to the previous dialog. It can ofcourse, contain other controls like static text or pictures.\line \page #{\footnote SpecialDialog_Error} ${\footnote SpecialDialog Error} K{\footnote Error} +{\footnote SpecialDialog:Error} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Error Dialog \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This modal dialog is used to display an error message. More than one error dialog is possible in one installation. The ErrorDialog property specifies which dialog is used as an error dialog. If this property is not set or does not point to a valid error dialog, the error messages will not be displayed, only logged, along with a warning about the missing error dialog.\line This dialog must have the {\uldb ErrorDialog}{\v DialogStyle_Error} style bit set. The dialog must have a {\uldb Text control}{\v ControlType_Text} named ErrorText. This control will display the text of the error message.\line The dialog is also authored with seven {\uldb PushButtons}{\v ControlType_PushButton}. These buttons must specify the {\uldb EndDialog}{\v ControlEvent_EndDialog} control event in the {\uldb ControlEvent Table}{\v ControlEvent_Table@msi.hlp} with the following arguments: ErrorAbort, ErrorCancel, ErrorIgnore, ErrorNo, ErrorOk, ErrorRetry, ErrorYes.\line The buttons should be authored approximately at the same position. When the dialog is created only a subset of these buttons will be created, depending on the message, and the X coordinate of the buttons will be modified so the displayed buttons are evenly spaced. The other three coordinates of the buttons are not changed. Since the buttons are rearranged, the author should make sure, that no other control is placed in the same horizontal reagon of the dialog as the buttons.\line The error message can consist of three segments. The first segment is the text of the error message. This part is required. The second part is a list of letters specifying what buttons must be created. The list is enclosed in curly braces. The letter codes are the first letters of the words abort, cancel, ignore, no, Ok, retry, yes. All the letter codes must be lower case except one, that designates the default button. If this list of codes is missing or empty, it is assumed to be \{O\}, i.e. putting up the OK button.\line The third part of the error message is optional. If it is present this string is used as the title for the dialog overwriting the title entered in the {\uldb Dialog Table}{\v _msi_Dialog_Table@msi.hlp}. If this part is present the second part must be present, too, to separate the part. (remember, the second part can be an empty list \{\}).\line In case of the error dialog the FirstControl, DefaultControl and CancelControl entries in the Dialog Table are ignored, and the default button specified by the message plays all three roles.\line \page #{\footnote SpecialDialog_Exit} ${\footnote SpecialDialog Exit} K{\footnote Exit} +{\footnote SpecialDialog:Exit} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Exit Dialog \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This is a modal dialog that is displayed at the end of a successfull install. Typically contains only some text and an OK button. What is special about this dialog, that its name has to appear in the {\uldb AdminSequence Table}{\v _msi_AdminSequence_Table@msi.hlp} and {\uldb InstallSequence Table}{\v InstallSequence_Table@msi.hlp} with -1 as the sequence number. \page #{\footnote SpecialDialog_FatalError} ${\footnote SpecialDialog FatalError} K{\footnote FatalError} +{\footnote SpecialDialog:FatalError} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FatalError Dialog \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This is a modal dialog that is displayed at the end of an install, if it terminated because of a fatal error. Typically contains only some text and an OK button. What is special about this dialog, that its name has to appear in the {\uldb AdminSequence Table}{\v _msi_AdminSequence_Table@msi.hlp} and {\uldb InstallSequence Table}{\v _msi_InstallSequence_Table@msi.hlp} with -3 as the sequence number. \page #{\footnote SpecialDialog_LicenseAgreement} ${\footnote SpecialDialog LicenseAgreement} K{\footnote LicenseAgreement} +{\footnote SpecialDialog:LicenseAgreement} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b LicenseAgreement Dialog \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This is a modal dialog that is used to display the license agreement to the user. Typically the text of the agreement is displayed in a {\uldb ScrollableText control}{\v ControlType_ScrollableText}. When the database can handle arbitrary length strings, the text (in RTF format) will be read from the text field of the control. For the time being the text is hardwired in the control.\line The dialog typically also contains a pair of radiobuttons that let the user accept or reject the agreement. For legal reasons it is advisable that neither of the buttons is selected initally, forcing the user to make an active choice. This can be achieved by not having an inital value for the property linked to the {\uldb RadioButtonGroup}{\v ControlType_RadioButtonGroup}. The author may also want to disable/enable the next button on this dialog, depending on the choice made. An other possible situation is, when the next button takes the user to different dialogs depending on the choice.\line \page #{\footnote SpecialDialog_Selection} ${\footnote SpecialDialog Selection} K{\footnote Selection} +{\footnote SpecialDialog:Selection} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Selection Dialog \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This is modal dialog letting the user select individual selection items. The dialog contains a {\uldb SelectionTree control}{\v ControlType_SelectionTree} that displays the main information. This controls publishes several events that change the display on other controls of the dialog. Typically there are four {\uldb Text controls}{\v ControlType_Text} subscribing to the {\uldb SelectionAction}{\v ControlEvent_SelectionAction}, {\uldb SelectionDescription}{\v ControlEvent_SelectionDescription}, {\uldb SelectionSize}{\v ControlEvent_SelectionSize} and {\uldb SelectionPath}{\v ControlEvent_SelectionPath} events using the {\uldb Text controlattribute}{\v ControlAttribute_Text}.  There is also an {\uldb Icon control}{\v ControlType_Icon} that subscribes to the {\uldb SelectionIcon}{\v ControlEvent_SelectionIcon} event through the {\uldb ImageHandle attribute}{\v ControlAttribute_ImageHandle}. The above controls use the {\uldb EventMapping Table}{\v _msi_EventMapping_Table@msi.hlp} to specify these subscriptions.  There is also a {\uldb PushButton}{\v ControlType_PushButton} that subscribes to the {\uldb SelectionBrowse}{\v ControlEvent_SelectionBrowse} event using the {\uldb ControlEvent Table}{\v ControlEvent_Table@msi.hlp} and giving the name of the {\uldb Browse dialog}{\v SpecialDialog_Browse} as the argument.  When a SelectionTree control is authored, the AbsentPath, SelAbsentAbsent, SelAbsentLocal, SelAbsentCD, SelAbsentNetwork, SelLocalAbsent, SelLocalLocal, SelLocalCD, SelLocalNetwork, SelCDAbsent, SelNetworkAbsent, SelCDLocal, SelNetworkLocal, SelCDCD, SelNetworkNetwork, SelChildCostPos, SelChildCostNeg, SelParentCostPosPos, SelParentCostPosNeg, SelParentCostNegPos, SelParentCostNegNeg, MenuAbsent, MenuLocal, MenuCD, MenuNetwork strings must be specified in the {\uldb UIText table}{\v UIText_Table@msi.hlp}.  The selection tree gets populated only if the DirectoryInitialize, CostInitialize and CostFinalize actions were all previously called. \page #{\footnote SpecialDialog_UserExit} ${\footnote SpecialDialog UserExit} K{\footnote UserExit} +{\footnote SpecialDialog:UserExit} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b UserExit Dialog \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This is a modal dialog that is displayed at the end of an install, that was aborted by the user. Typically contains only some text and an OK button. What is special about this dialog, that its name has to appear in the {\uldb AdminSequence Table}{\v _msi_AdminSequence_Table@msi.hlp} and {\uldb InstallSequence Table}{\v _msi_InstallSequence_Table@msi.hlp} with -2 as the sequence number. \page
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\help\author.rtf ===
{\rtf1\ansi {\fonttbl{\f0\fswiss Arial;}{\f1\fmodern Courier New;}} {\colortbl;} \fs20 #{\footnote Authoring_TargetDirValidation} ${\footnote TargetDirValidation} +{\footnote TargetDirValidation} K{\footnote Validation of Target Directories;_BrowseProperty;BrowseDialog} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Validation of Target Directories \par}\li180 As a part of the {\uldb CostFinalize}{\v _msi_Action_CostFinalize@msi.hlp} action, all target directories (as authored in  the {\uldb Directory}{\v _msi_Directory_Table@msi.hlp} table) are validated to ensure that each represents a writable  location. If there is any target directory for which the Installer does not have write-access, a  substitute location must be selected by the user if the install is to continue.  If the author wishes to  accommodate this (highly recommended), do the following:  \par 1) Author a {\uldb Browse}{\v SpecialDialog_Browse} dialog (a special dialog type that allows the user  to specify a directory location).  The name of this dialog must be "{\b BrowseDialog}" (i.e. this name must be  specified in the "Dialog" column of the {\uldb Dialog}{\v _msi_Dialog_Table@msi.hlp} table). 2) The name of the directory property that is to be modified by this Browse dialog must be  "{\b _BrowseProperty}" (see the {\uldb Browse}{\v SpecialDialog_Browse} dialog topic to determine how to  author this property name). If an unwritable target directory is located during the above-mentioned validation, AND a Browse dialog  as specified above is available, the {\uldb CostFinalize}{\v _msi_Action_CostFinalize@msi.hlp} action will display  that dialog, prompting the user to select an alternate location for the directory.  However, also note  that only those directories that are authored as "configurable" (i.e. that directory's property name  is specified in the "Directory_" column of any row in the {\uldb Feature}{\v _msi_Feature_Table@msi.hlp}  table) can result in a Browse dialog.  If any unwritable directory is non-configurable, an error will  eventually result if and when the Installer attempts to write a file to that directory. \page #{\footnote Authoring_FeatureConfiguration} ${\footnote FeatureConfiguration} +{\footnote FeatureConfiguration} K{\footnote Reinstalling features;Removing Features} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Reinstalling and Removing Installed Features \par}\li180 There are several ways of reinstalling and removing features once they have been installed.  A reinstall  might be required if any files or registry entries associated with any feature have become corrupted or  are missing for any reason.  And of course at any time, the user might want or need to remove a particular  feature, or the whole product.\line \par\fi0\li0{\b Reinstalling Features}\par\li180 Once an installation for a particular product has been performed once (with some or all of the  product's features installed), one way to perform a reinstallation is to specify the  {\uldb REINSTALL}{\v Property_REINSTALL} and {\uldb REINSTALLMODE}{\v Property_REINSTALLMODE} properties  on the command line.  These properties allow the user to reinstall any or all of the product's features.  In  addition, the 'type' of reinstallation can be specified; for instance, you could specify that only those files  that are totally missing should be reinstalled, or that only corrupted files (i.e. any executable file whose  checksum doesn't match the actual file contents) be replaced.  Alternatively, you could specify that the  fitness of the current install be only verified, without actually repairing any broken or missing files/registry  entries.  In this case, for all installed features, the Installer would report (typically in a log file) the  results of any verification that you specify, such as whether there are any missing or corrupt files,   any files of the wrong version, or any missing or incorrect registry entries.  At any later time, you could then  run the install again to repair any or all of the detected problems.  \par  A reinstall can also authored to be performed via the Installer user interface, at the click of a button.  To add  a "Reinstall" button to any dialog, follow these steps:\line  \line 1) Add a pushbutton to the desired dialog by adding an entry to the {\uldb Control}{\v _msi_Control_Table@msi.hlp} table.\line 2) Add a "ReinstallMode" event to the ControlEvent table, with the "Dialog_" and "Control_" fields referencing  the pushbutton control you created in step 1.  In the "Argument" field, enter a string containing the letters  corresponding to the reinstall mode(s) you want (the acceptable values for this field are identical to those  accepted for the {\uldb REINSTALLMODE}{\v Property_REINSTALLMODE} property).  The value in the "Ordering" column  for this event should be "1".\line 3) Add a "Reinstall" event to the ControlEvent table, again referencing the same pushbutton control.  The   "Argument" field for this event will normally be "ALL", to force the reinstall of all features, but you  could place the name of a specific feature here.  The value in the "Ordering" column for this event should be  "2".\line 4) Finally, add one more event tied to the same pushbutton control, to actually initiate the reinstallation.  This could be an "EndDialog" dialog event (with an argument of "Return"), but more typically a "NewDialog"  event would be used here, to jump to an "Are you sure you want to reinstall?" confirmation dialog.  The value  in the "Ordering" column for this event should be "3".\line \line If desired, several "Reinstall" buttons can be provided on one dialog, to give the user the option of selecting  the type of reinstall to perform.  In this case, each button would be authored as outlined in the above steps, with  only the argument provided for the "ReinstallMode" control event being different for each button. \par\fi0\li0{\b Removing Features}\par\li180 To remove any or all features, you can specify the {\uldb REMOVE}{\v Property_REMOVE} property on the command line.  Alternatively, as with a reinstall, a removal of the entire product can be authored to be performed via the Installer  user interface, with one button.  To add a "Remove All" button to any dialog, follow these steps:\line \line 1) Add a pushbutton to the desired dialog by adding an entry to the {\uldb Control}{\v _msi_Control_Table@msi.hlp} table.\line 2) Add a "Remove" event to the ControlEvent table, with the "Dialog_" and "Control_" fields referencing  the pushbutton control you created in step 1.  The "Argument" field for this event will normally be "ALL", to force  the removal of all features, although could place the name of a specific feature here.  The value in the "Ordering"  column for this event should be "1".\line 4) Add another event tied to the same pushbutton control, to actually initiate the removal.  This could be an "EndDialog" dialog event (with an argument of "Return"), but more typically a "NewDialog"  event would be used here, to jump to an "Are you sure you want to remove the entire product?" confirmation dialog.   The value in the "Ordering" column for this event should be "2".\line \page #{\footnote Authoring_Advertisement} ${\footnote Advertisement} +{\footnote Authoring:Advertisement} K{\footnote Advertisement} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Darwin Advertisement \par}\li180 Advertisement is the mechanism in Darwin whereby information about the product and discretely installable features of  the product are provided to the system, without actually installing the features. Advertisement in Darwin is initiated by the  {\uldb ADVERTISE}{\v _msi_Action_ADVERTISE@msi.hlp} action. \par  The information regarding the feature is provided by specifying a {\b Darwin Descriptor}. The Darwin Descriptor holds  product, feature and the {\b Key Component} information that is used for installing the components that are required.  The key component is the component of the feature whose {\b KeyPath} (see {\uldb Component}{\v _msi_Component_Table@msi.hlp} )  is the entry into using the feature. The following information is advertised by Darwin: 1. The feature to components mapping.\line This is the information that enumerates the individual  components of a feature of a product. Whenever a feature is requested to be made available by the application or the system using    the Installer API, the system ensures that all the components composing the feature are installed.\line Registry structure for the information -\line Tables queried - {\uldb FeatureComponents}{\v _msi_FeatureComponents_Table@msi.hlp} 2. Any component that needs to be available for use across processes via the MsiProvideComponentIndirect API.\line Tables queried - {\uldb PublishComponent}{\v _msi_PublishComponent_table@msi.hlp} 3. COM Servers.\line This is the information regarding COM servers. The system faults in a COM server on request using the darwin descriptor that represents the  COM server.\line\line Registry structure for the information -\line HKCR\\CLSID\\<Class.Context> default=<Class.Description> (created if Class.Description not null)\line HKCR\\CLSID\\<Class.Context> <Class.Context>=<darwindescriptor for Class.Feature_, Class.Component_>\line HKCR\\CLSID\\<Class.Context>\\ProgID default=<Class.ProgId> (created if Class.ProgId not null)\line HKCR\\<Class.ProgId> default=<Class.Description> (created if Class.ProgId not null)\line  HKCR\\CLSID\\<Class.Context>\\Insertable default="" (created if Class.Insertable not null)\line HKCR\\CLSID\\<Class.Context>\\InprocHandler32 default=<server-name> (depends on Class.DefInprocHandler).\line HKCR\\CLSID\\<Class.Context>\\DefaultIcon default=<full path to Class.Icon > (created if Class.Icon_ not null).\line HKCR\\FileType\\<Class.Context>\\1 default=type mask 1\line HKCR\\FileType\\<Class.Context>\\2 default=type mask 2\line HKCR\\FileType\\<Class.Context>\\3 default=type mask 2\line ...\line ...\line ...\line when Class.FileTypeMask is a non null ";" delimited list of type masks.\line Tables queried - {\uldb Class}{\v _msi_Class_Table@msi.hlp}\ 4. COM Type Libraries.\line This is the information regarding COM type libraries. This is used by the system to allow the user to browse  installable type libraries. The system faults in a COM type library on request using the darwin descriptor  that represents the COM type library.\line Registry structure for the information -\line HKCR\\TypeLib\\<TypeLib.LibID>\\<TypeLib.Version> default=TypeLib.Description\line HKCR\\TypeLib\\<TypeLib.LibID>\\<TypeLib.Version>\\<Locale ID from TypeLib.Language>\\win32 win32=<darwindescriptor for TypeLib.Feature_, TypeLib.Component_>\line Tables queried - {\uldb TypeLib}{\v _msi_TypeLib_Table@msi.hlp} 5. Extension servers.\line This is the information regarding extension servers. This is used by the system to default in servers using the darwin descriptor  for opening/editing/printing documents by file extension.\line Registry structure for the information -\line HKCR\\<Extension.Extension>\\<Extension.ProgId> default = ""\line HKCR\\<Extension.Extension>\\<Extension.ProgId>\\ShellNew <Extension.ShellNew>=<Extension.ShellNewValue>\line HKCR\\<Extension.ProgId>\\shell\\<Verb.Verb> default=<Verb.Command>\line HKCR\\<Extension.ProgId>\\shell\\<Verb.Verb>\\command command=<darwindescriptor for Extension.Feature_, Extension.Component_> <Verb.Arguments>\line when Extension.ProgId not null - else\line HKCR\\<Extension.Extension> default = ""\line HKCR\\<Extension.Extension>\\ShellNew <Extension.ShellNew>=<Extension.ShellNewValue>\line HKCR\\<Extension.Extension>\\shell\\<Verb.Verb> default=<Verb.Command>\line HKCR\\<Extension.Extension>\\shell\\<Verb.Verb>\\command command=<darwindescriptor for Extension.Feature_, Extension.Component_> <Verb.Arguments>\line Tables queried - {\uldb Extension}{\v _msi_Extension_Table@msi.hlp}, {\uldb Verb}{\v _msi_Verb_Table@msi.hlp} 6. MIME information.\line This is the MIME information placed in the registry.\line Registry structure for the information -\line HKCR\\MIME\\Database\\Content Type\\<MIME.ContentType> default=""\line HKCR\\MIME\\Database\\Content Type\\<MIME.ContentType> Extension=<MIME.Extension>\line HKCR\\MIME\\Database\\Content Type\\<MIME.ContentType> CLSID=<MIME.CLSID> (if MIME.CLSID is not null)\line HKCR\\Extension Content Type=<MIME.ContentType>\line Tables queried - {\uldb MIME}{\v _msi_MIME_Table@msi.hlp} 7. Shortcuts under Shell Folders.\line Darwin creates shortcuts under Shell Folders, containing the darwin descriptor that represents the application.  The system installs the application referred to by the darwin descriptor when the user clicks on the shortcut. Tables queried - {\uldb Shortcut}{\v _msi_Shortcut_Table@msi.hlp}\line NOTE: This is the only advertisement entity that needs to be created only if there is GPT support on the system. (Else we do not advertise  and use the filename in place of the Darwin Descriptor at installation time).Currently we determine "GPTSupport" by detecting the presence of  the HKCR\\GPTSupport key. 8. Icons under the {\b <userprofile directory>\Applications} folder for the shortcuts and the COM servers that are advertised.\line Tables queried - {\uldb Icon}{\v _msi_Icon_Table@msi.hlp}\line Explicit advertisement occurs on a system when - \line 1. The installer is activated with the ACTION property set to ADVERTISE.\line 2. Through the MsiAdvertiseProduct API with the scriptfile argument set to null.\line 3. Through the MsiAdvertiseScript or the MsiProcessAdvertiseScript API with the scriptfile argument set to to script file generated by  the MsiAdvertiseProduct API. NOTE:Since these APIs return the key file of the component referred to in the Darwin Descriptor, any file that  is  pointed to by a shortcut, or is a COM server, an extension server, or a type library is to be the key file  of a component. In other words no two such files can share the same component. Darwin removes any advertised information for a feature during the uninstall of the feature. This implies that the  feature then cannot be faulted in by the system. However on a ZAW enabled client this is pushed back onto the  client via the advertise script.\line \page #{\footnote Authoring_Components} ${\footnote Components} +{\footnote Authoring:Components} K{\footnote Components} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Darwin Components \par}\li180 A Darwin component is a set of files, shorcuts, .ini entries, registry entries and other installable entities  and associated Darwin actions to be performed on the installation/ uninstallation of the set. A Darwin  component has a globally unique id, Component.ComponentId (see {\uldb Component}{\v _msi_Component_Table@msi.hlp} table).  Two components (from two different products) may have the same ComponentId only if they have the same set of files  and other installable entities with the same set of associated Darwin actions to be performed on the  installation/ uninstallation of the set. Using the same ComponentId implies that the products share the component  as regards installation, uninstallation and application usage. The objective here is to use a single install that  is shared by more than one product. The abovementioned restrictions ensure that a component installed by one product  can be shared by another product and uninstalled, if it is the last client of that component. The file versions  between different installs of the same product may be different. In this case the file copy logic will kick in when  installing a component over an existing installation. Also a component is associated with one and only one  directory. i.e. all the files of a component go to the same folder. Each component has a {\b KeyPath} (see {\uldb Component}{\v _msi_Component_Table@msi.hlp} table) associated with it. This is the  file or folder that represents the component. The KeyPath serves two purposes. First, it is used to determine the  presence of the component in the MSI APIs. If it is a folder it is also used as the key file for the component.  This is what is passed back to the user in the MsiLocateComponent, MsiLocateLanguageComponent, MsiProvideComponent,  MsiProvideComponentFromDescriptor, and MsiProvideComponentIndirect MSI APIs. {\b Management of Components } \line Here are the set of rules that govern the management of components by Darwin:\line 1. Each installed component has a key path registered with it. The component is in the installed state if it  is registered with the configuration manager and its key path exists (the configuration manager physically checks  for the existence of the file/ folder that is the key path). \line 2. Each installed component has a set of clients registered with it. These are the products that wished the  component to be installed. Additionally we associate the state (local/ source) that the client wished the state  to the component to be.\line 3. A component can be installed only at one location on the system. This restriction is because products today  register hard coded path references to the component in the registry, shortcuts, etc.\line 4. If a product is not as yet a client of the component and wishes to install the component locally we always  install (there is no existing install, there is an existing source install, there is an existing local install).  If there is a local install we set the directory of install to be the same as the existing local install.\line 5. If a product is not as yet a client of the component and wishes to install the component as run from source  we install only if there is no valid local install. In this case we always install (there is no existing  install, there is an existing source install, there is an existing local install). If there is a local install  we set the directory of install to be the same as the existing local install.\line 6. A local installation is uninstalled when the last local client wishes it to be uninstalled. This will leave  the component in an invalid state for any clients that wished the component as run from source.\line 7. If a product is a client of the component and the installation is not valid we (silently) reinstall the  component in the desired state when Darwin runs (either explicitely during maintenance or implicitely through  the APIs) in the context of that product. {\b Component Redirection} \line Components can register that the configuration manager redirect requests for one or more other component to  them. This is done by use of the {\uldb RedirectComponent}{\v _msi_RedirectComponent_Table@msi.hlp} table. All requests  for the older component(s) through the MSI API will be redirected to the newer component. However the clients  of the older components cannot prevent the newer component from going away when its last client uninstalls it.   When this happens the older redirected component appear "broken" and are reinstalled as per rule 7. above. {\b Component Publishing and Qualified Components} \line Products can publish "component factories" by advertising the Darwin Descriptors for installing components.  This is done by using the {\uldb PublishComponent}{\v _msi_PublishComponent_table@msi.hlp} table  (see {\uldb Advertisement}{\v Authoring_Advertisement}). Products can use the MsiProvideComponentIndirect  API to get these components. Also there may be another level of heirarchy (further qualification) between the GUID and the Darwin Descriptor. This is the {\bQualifier} to be used with a generic GUID to get a specific Darwin Descriptors. \page #{\footnote Authoring_ProofingTools} ${\footnote ProofingTools} +{\footnote Authoring:ProofingTools} K{\footnote ProofingTools} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Managing proofing tools using Darwin \par}\li180 Proofing tools is a term applied to a set of tools such as the speller and the thesaurus which can be characterised  as having a pair of files that serve the task. The first file is the {\b lex} file. It is the data file for the tool.  The second file is the {\b engine} file which provides the tool function and is driven by the lex file. Proofing tools  are catagorised by their function, sub-type and language (example - a dictionary of the sub-type medical and language english).\line Darwin manages proofing tools by use of the Qualified Components mechanism (see {\uldb Darwin Components}{\v Authoring_Components}).  Each (type of) proofing tool is associated with a universally recognised GUID. So Spelling will have its own GUID separate from  the thesaurus. All the speller lex files will hang off this GUID. The proofing tools subtype and language will form the {\b Qualifier}.  Thus the Qualifier may be - "1033-Medical". The Darwin Descriptor associated with the Qualifier will be the feature that denotes the proofing tool (lex + engine components).  The component passed back by the Darwin Descriptor will be the lex component.\line Similarly each (type of) proofing tool engine is associated with a universally recognised GUID. So Spelling will have its own GUID separate from  the thesaurus. All the speller engine files will hang off this GUID. The proofing tools subtype and language will form the {\b Qualifier}.  Thus the Qualifier may be - "1033-Medical". The Darwin Descriptor associated with the Qualifier will be the feature that denotes the proofing tool (lex + engine components).  The component passed back by the Darwin Descriptor will be the engine component.\line When an application wants a particular proofing tool it will ask Darwin to provide the lex file and the engine for the proofing tools by calling MsiProvideComponentIndirect  for both the engine and the corresponding lex file. \page
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\help\path.rtf ===
{\rtf1\ansi {\fonttbl{\f0\fswiss Helv;}{\f1\fmodern Courier New;}} {\colortbl;} \fs20 #{\footnote MsiVolume_Object} ${\footnote MsiVolume Object} K{\footnote MsiVolume} +{\footnote Class:MsiVolume} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiVolume Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The MsiVolume object represents a disk drive or server share.  It is not normally created independently by the installer, but as  needed by the MsiPath objects during resolution of the volume information  from the remainder of their path. To avoid duplication, a pool of Msi volume  objects is maintained by the services object, such that the  {\uldb CreateVolume}{\v MsiServices_CreateVolume} function will return the  existing MsiVolume object if present. \par\li0{\b Properties}\par\li180 {\uldb ClusterSize}{\v MsiVolume_ClusterSize}\line {\uldb DiskNotInDrive}{\v MsiVolume_DiskNotInDrive}\line {\uldb DriveType}{\v MsiVolume_DriveType}\line {\uldb FileSystem}{\v MsiVolume_FileSystem}\line {\uldb FileSystemFlags}{\v MsiVolume_FileSystemFlags}\line {\uldb FreeSpace}{\v MsiVolume_FreeSpace}\line {\uldb Path}{\v MsiVolume_Path}\line {\uldb SerialNum}{\v MsiVolume_SerialNum}\line {\uldb SupportsLFN}{\v MsiVolume_SupportsLFN}\line {\uldb TotalSpace}{\v MsiVolume_TotalSpace}\line {\uldb UNCServer}{\v MsiVolume_UNCServer}\line {\uldb VolumeID}{\v MsiVolume_VolumeID}\line {\uldb VolumeLabel}{\v MsiVolume_VolumeLabel}\line \page #{\footnote MsiVolume_Path} ${\footnote MsiVolume.Path} +{\footnote MsiVolume:Path} K{\footnote Path} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Path Property \line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 String representing the path to the volume. In cases where both a drive letter  and an UNC path are obtainable, the form preferred by the network type is used  (currently only Novell NetWare servers prefer drive letter mapping).  Default property, read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Path} \par{\i object}\line Required. The MsiVolume object. \page #{\footnote MsiVolume_VolumeID} ${\footnote MsiVolume.VolumeID} +{\footnote MsiVolume:VolumeID} K{\footnote VolumeID} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b VolumeID Property \line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Integer representing the volume. For Windows this maps to the driver letter,  from A=1 to Z=26, with 0 used to indicate that the volume is not mapped to  a drive letter. For Mac, this ID is the volume reference number (vRefNum)  of the mounted volume. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .VolumeID} \par{\i object}\line Required. The MsiVolume object. \page #{\footnote MsiVolume_DriveType} ${\footnote MsiVolume.DriveType} +{\footnote MsiVolume:DriveType} K{\footnote DriveType} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DriveType Property \line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Integer enumeration describing the physical type of the volume. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .DriveType} \par{\i object}\line Required. The MsiVolume object. \par\fi0\li0{\b Drive Type Enumeration}\par\li180 {\f1 idtUnknown   = 0   } Drive type cannot be determined\line {\f1 idtAllDrives = 1   } Never returned, used for enumerating drives\line {\f1 idtRemovable = 2   } Drive contains removable media\line {\f1 idtFixed     = 3   } Hard disk drive\line {\f1 idtRemote    = 4   } Network server share\line {\f1 idtCDROM     = 5   } CD_ROM drive\line {\f1 idtRAMDisk   = 6   } RAM disk\line {\f1 idtFloppy    = 2   } Eventually, floppies should be distinguished from other removables \page #{\footnote MsiVolume_SupportsLFN} ${\footnote MsiVolume.SupportsLFN} +{\footnote MsiVolume:SupportsLFN} K{\footnote SupportsLFN} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SupportsLFN Property \line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Boolean indicating whether the volume supports long file names.  If False is returned, only 8.3 file names may be used. The value  is always False for the Mac. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SupportsLFN} \par{\i object}\line Required. The MsiVolume object. \page #{\footnote MsiVolume_FreeSpace} ${\footnote MsiVolume.FreeSpace} +{\footnote MsiVolume:FreeSpace} K{\footnote FreeSpace} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FreeSpace Property \line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The amount of free space on the volume in units of 512 bytes.  For a compressed drive, this is the expected uncompressed size. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .FreeSpace} \par{\i object}\line Required. The MsiVolume object. \page #{\footnote MsiVolume_TotalSpace} ${\footnote MsiVolume.TotalSpace} +{\footnote MsiVolume:TotalSpace} K{\footnote TotalSpace} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b TotalSpace Property \line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The total capacity of the volume, in units of 512 bytes. For a compressed  drive, this is the expected uncompressed size. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .TotalSpace} \par{\i object}\line Required. The MsiVolume object. \page #{\footnote MsiVolume_ClusterSize} ${\footnote MsiVolume.ClusterSize} +{\footnote MsiVolume:ClusterSize} K{\footnote ClusterSize} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ClusterSize Property \line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The number of bytes in a cluster, the basic unit of allocation for the volume.  This is a physical parameter and may not be appropriate to use for compressed  volumes or directories. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ClusterSize} \par{\i object}\line Required. The MsiVolume object. \page #{\footnote MsiVolume_FileSystem} ${\footnote MsiVolume.FileSystem} +{\footnote MsiVolume:FileSystem} K{\footnote FileSystem} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FileSystem Property \line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns a string designating the type of file system used on the volume. On the  Mac, an empty string is always returned. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .FileSystem} \par{\i object}\line Required. The MsiVolume object. \par\fi0\li0{\b Returned File System Types}\par\li180 {\f1 FAT}\line {\f1 NTFS}\line {\f1 HPFS}\line \page #{\footnote MsiVolume_FileSystemFlags} ${\footnote MsiVolume.FileSystemFlags} +{\footnote MsiVolume:FileSystemFlags} K{\footnote FileSystemFlags} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FileSystemFlags Property \line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns an bitfield integer value with various flags about the filesystem.    Read Only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .FileSystemFlags} \par{\i object}\line Required. The MsiVolume object. \par\fi0\li0{\b Returned File System Flags}\par\li180 {\f1 0x00000001: Volume uses case sensitive filenames}\line {\f1 0x00000002: Volume preserves case on filenames}\line {\f1 0x00000004: Volume stores data as UNICODE}\line {\f1 0x00000008: Volume supports security}\line {\f1 0x00000010: Volume supports compression}\line {\f1 0x00008000: Volume is compressed}\line \page #{\footnote MsiVolume_VolumeLabel} ${\footnote MsiVolume.VolumeLabel} +{\footnote MsiVolume:VolumeLabel} K{\footnote VolumeLabel} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b VolumeLabel Property \line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns a string representing the disk label associated with the volume. On the  Mac, the volume name is always returned. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .VolumeLabel} \par{\i object}\line Required. The MsiVolume object. \page #{\footnote MsiVolume_UNCServer} ${\footnote MsiVolume.UNCServer} +{\footnote MsiVolume:UNCServer} K{\footnote UNCServer} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b UNCServer Property \line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 String representing the UNC path for the volume. For local drives and  networks that do not support UNC, an empty string will be returned. For  the Mac, an empty string is always returned. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .UNCServer} \par{\i object}\line Required. The MsiVolume object. \page #{\footnote MsiVolume_SerialNum} ${\footnote MsiVolume.SerialNum} +{\footnote MsiVolume:SerialNum} K{\footnote SerialNum} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SerialNum Property \line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A long integer representing the unique ID for the physical volume. For the Mac,  0 is always returned. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SerialNum} \par{\i object}\line Required. The MsiVolume object. \page #{\footnote MsiVolume_DiskNotInDrive} ${\footnote MsiVolume.DiskNotInDrive} +{\footnote MsiVolume:DiskNotInDrive} K{\footnote DiskNotInDrive} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DiskNotInDrive Property \line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 DiskNotInDrive returns True if the volume media is removable (CDROM, Floppy, removable HD), AND there is  no disk in the drive. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .DiskNotInDrive} \par{\i object}\line Required. The MsiVolume object. \page #{\footnote MsiPath_Object} ${\footnote MsiPath Object} K{\footnote MsiPath} +{\footnote Class:MsiPath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiPath Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The MsiPath object represents a full path to a directory on a disk volume.  Internally, MsiPath creates an MsiVolume object to represent the volume  associated with the full path.\line  \line {\b Windows Path and Filename Syntax}\line  For Windows, the path supplied when creating an MsiPath object must either   include a drive letter indicating the volume, or a UNC path.  For example,   the following are valid paths:\line \line     {\f1 C:\\MyDocs\\SubDocs}\line     {\f1 \\\\MyServer\\MyShare\\MyDocs}\line \line When specifying filenames to MsiPath methods such as {\uldb GetFullFilePath}{\v MsiPath_GetFullFilePath},  the following reserved characters are not allowed, and will generate an error if found anywhere in the  supplied name:\line  '\\' (backslash)\line  '/' (forward slash)\line  ':' (colon)\line  '"' (double-quote)\line  '|' (pipe)\line  '?' (question mark)\line  '*' (asterisk)\line  '<' (less-than sign)\line  '>' (greater-than sign)\line \line Multiple consecutive directory seperators are allowed in a path.  For example, the following are  valid paths:\line \line     {\f1 C:\\MyDocs\\\\SubDocs\\\\\\Personal}\line     {\f1 \\\\MyServer\\MyShare\\\\MyDocs}\line \line Note that multiple directory seperators may not follow a drive letter, though they may follow  a \\\\Server\\Share pair. \line \par\li0{\b Properties}\par\li180 {\uldb EndSubPath}{\v MsiPath_EndSubPath}\line {\uldb Exists}{\v MsiPath_Exists}\line {\uldb Path}{\v MsiPath_Path}\line {\uldb RelativePath}{\v MsiPath_RelativePath}\line {\uldb Volume}{\v MsiPath_Volume}\line {\uldb Writable}{\v MsiPath_Writable}\line \par\li0{\b Methods}\par\li180 {\uldb AppendPiece}{\v MsiPath_AppendPiece}\line {\uldb BindImage}{\v MsiPath_BindImage}\line {\uldb CheckFileVersion}{\v MsiPath_CheckFileVersion}\line {\uldb CheckLanguageIDs}{\v MsiPath_CheckLanguageIDs}\line {\uldb Child}{\v MsiPath_Child}\line {\uldb ChopPiece}{\v MsiPath_ChopPiece}\line {\uldb ClusteredFileSize}{\v MsiPath_ClusteredFileSize}\line {\uldb Compare}{\v MsiPath_Compare}\line {\uldb ComputeFileChecksum}{\v MsiPath_ComputeFileChecksum}\line {\uldb EnsureExists}{\v MsiPath_EnsureExists}\line {\uldb FileDate}{\v MsiPath_FileDate}\line {\uldb FileExists}{\v MsiPath_FileExists}\line {\uldb FileInUse}{\v MsiPath_FileInUse}\line {\uldb FileSize}{\v MsiPath_FileSize}\line {\uldb FileWritable}{\v MsiPath_FileWritable}\line {\uldb FindFile}{\v MsiPath_FindFile}\line {\uldb GetFileAttribute}{\v MsiPath_GetFileAttribute}\line {\uldb GetFileChecksum}{\v MsiPath_GetFileChecksum}\line {\uldb GetFileOriginalChecksum}{\v MsiPath_GetFileOriginalChecksum}\line {\uldb GetFileVersionString}{\v MsiPath_GetFileVersionString}\line {\uldb GetFullFilePath}{\v MsiPath_GetFullFilePath}\line {\uldb GetFullUNCFilePath}{\v MsiPath_GetFullUNCFilePath}\line {\uldb GetImportModulesEnum}{\v MsiPath_GetImportModulesEnum}\line {\uldb GetLangIDStringFromFile}{\v MsiPath_GetLangIDStringFromFile}\line {\uldb GetSelfRelativeSD}{\v MsiPath_GetSelfRelativeSD}\line {\uldb SubFolders}{\v MsiPath_SubFolders}\line {\uldb ReadResource}{\v MsiPath_ReadResource}\line {\uldb Remove}{\v MsiPath_Remove}\line {\uldb RemoveFile}{\v MsiPath_RemoveFile}\line {\uldb SetFileAttribute}{\v MsiPath_SetFileAttribute}\line {\uldb SetVolume}{\v MsiPath_SetVolume}\line {\uldb SupportsLFN}{\v MsiPath_SupportsLFN}\line {\uldb TempFileName}{\v MsiPath_TempFileName}\line {\uldb UpdateResource}{\v MsiPath_UpdateResource}\line {\uldb VerifyFileChecksum}{\v MsiPath_VerifyFileChecksum}\line \page #{\footnote MsiPath_Path} ${\footnote MsiPath.Path} +{\footnote MsiPath:Path} K{\footnote Path} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Path Property \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns a string representing the path. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Path} \par{\i object}\line Required. The MsiPath object. \par\fi0\li0{\b Remarks}\par\li180 The returned string contains the full path represented by the  path object, including the volume designation.  See the description  of the {\uldb MsiPath}{\v MsiPath_Object} object for a full description  of the path syntax. \page #{\footnote MsiPath_RelativePath} ${\footnote MsiPath.RelativePath} +{\footnote MsiPath:RelativePath} K{\footnote RelativePath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RelativePath Property \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns a string representing the path without the volume. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RelativePath} \par{\i object}\line Required. The MsiPath object. \par\fi0\li0{\b Remarks}\par\li180 The returned string contains the path represented by the  path object, without the volume designation.  See the description  of the {\uldb MsiPath}{\v MsiPath_Object} object for a full description  of the path syntax. \page #{\footnote MsiPath_Volume} ${\footnote MsiPath.Volume} +{\footnote MsiPath:Volume} K{\footnote Volume} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Volume Property \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the MsiVolume object representing the root of this path. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Volume} \par{\i object}\line Required. The MsiPath object. \page #{\footnote MsiPath_SetVolume} ${\footnote MsiPath.SetVolume} +{\footnote MsiPath:SetVolume} K{\footnote SetVolume} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SetVolume method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Assigns a new MsiVolume object to this MsiPath object. The path (as returned by the Path  property) will be updated to reflect the new root volume. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SetVolume(volume)} \par{\i object}\line Required. The MsiPath object. \par{\i volume}\line The MsiVolume object to be assigned to this MsiPath object.  \page #{\footnote MsiPath_Exists} ${\footnote MsiPath.Exists} +{\footnote MsiPath:Exists} K{\footnote Exists} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Exists Property \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Boolean indicating whether the directory tree associated with the path object  currently exists on the associated volume. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Exists} \par{\i object}\line Required. The MsiPath object. \par\fi0\li0{\b Remarks}\par\li180 None. \page #{\footnote MsiPath_Writable} ${\footnote MsiPath.Writable} +{\footnote MsiPath:Writable} K{\footnote Writable} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Writable Property \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Boolean indicating whether the directory represented by the path is writable (i.e.  file-creation privileges are available in this directory). Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Writable} \par{\i object}\line Required. The MsiPath object. \par\fi0\li0{\b Remarks}\par\li180 If the directory associated with the path does not exist, a run-time error will be generated. \page #{\footnote MsiPath_EndSubPath} ${\footnote MsiPath.EndSubPath} +{\footnote MsiPath:EndSubPath} K{\footnote EndSubPath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b EndSubPath Property \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns a string representing the last sub-path of the path. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .EndSubPath} \par{\i object}\line Required. The MsiPath object. \par\fi0\li0{\b Remarks}\par\li180 The returned string will not contain any directory separator characters, \page #{\footnote MsiPath_AppendPiece} ${\footnote MsiPath.AppendPiece} +{\footnote MsiPath:AppendPiece} K{\footnote AppendPiece} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b AppendPiece Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The AppendPiece methods appends the given string to the current path,  delimiting appropriately with directory separator characters. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .AppendPiece({\i subDir})} \par{\i object}\line Required. The MsiPath object. \par{\i\b subDir}\line Required. The name of the subdirectory to append. See the {\uldb MsiPath}{\v MsiPath_Object}  main topic for filename syntax. \par\fi0\li0{\b Remarks}\par\li180 AppendPiece allows multiple subdirectories to be appended at once.  Also, a leading  and/or trailing directory separator is optional.  Thus, the following examples are   all legal, and functionally identical:\line  \line services.AppendPiece("subdir1\\subdir2")\line services.AppendPiece("\\subdir1\\subdir2")\line services.AppendPiece("subdir1\\subdir2\\")\line services.AppendPiece("\\subdir1\\subdir2\\")\line \page #{\footnote MsiPath_ChopPiece} ${\footnote MsiPath.ChopPiece} +{\footnote MsiPath:ChopPiece} K{\footnote ChopPiece} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ChopPiece Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The ChopPiece method removes the last subdirectory segment from the  current path. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ChopPiece} \par{\i object}\line Required. The MsiPath object. \par\fi0\li0{\b Remarks}\par\li180 None. \page #{\footnote MsiPath_FileExists} ${\footnote MsiPath.FileExists} +{\footnote MsiPath:FileExists} K{\footnote FileExists} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FileExists Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The FileExists method returns True if a file of the specified name exists in the  directory associated with the path object. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .FileExists({\i file})} \par{\i object}\line Required. The MsiPath object. \par{\i\b file}\line Required. The name of the file to check for.  See the {\uldb MsiPath}{\v MsiPath_Object}  main topic for filename syntax. \par\fi0\li0{\b Remarks}\par\li180 None. \page #{\footnote MsiPath_GetFullFilePath} ${\footnote MsiPath.GetFullFilePath} +{\footnote MsiPath:GetFullFilePath} K{\footnote GetFullFilePath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetFullFilePath Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The GetFullFilePath method takes a file name as an argument, and  returns a string that represents the full path to that file,   incorporating the path associated with the path object and the given  file name. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFullFilePath({\i strFile})} \par{\i object}\line Required. The MsiPath object. \par{\i\b strFile}\line Required. The name of the file to append to the current path. See the {\uldb MsiPath}{\v MsiPath_Object}  main topic for filename syntax.  If an empty string is passed in strFile, just the path itself (terminated   with a backslash) will be returned. \par\fi0\li0{\b Remarks}\par\li180 None. \page #{\footnote MsiPath_GetFullUNCFilePath} ${\footnote MsiPath.GetFullUNCFilePath} +{\footnote MsiPath:GetFullUNCFilePath} K{\footnote GetFullUNCFilePath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetFullUNCFilePath Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The GetFullUNCFilePath method takes a file name as an argument, and returns a string that  represents the full path to that file, incorporating the path associated with the path  object and the given file name.  If the volume associated with the path object represents  a network connection, the UNC name of the volume will be used in the returned full path  (even if the path object was originally created using a mapped drive letter designation). \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFullUNCFilePath({\i strFile})} \par{\i object}\line Required. The MsiPath object. \par{\i\b strFile}\line Required. The name of the file to append to the current path. See the {\uldb MsiPath}{\v MsiPath_Object}  main topic for filename syntax.  If an empty string is passed in strFile, just the path itself (terminated   with a backslash) will be returned. \par\fi0\li0{\b Remarks}\par\li180 None. \page #{\footnote MsiPath_GetFileAttribute} ${\footnote MsiPath.GetFileAttribute} +{\footnote MsiPath:GetFileAttribute} K{\footnote GetFileAttribute} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetFileAttribute Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The GetFileAttribute method returns the Boolean state of a specified attribute  for a file or directory. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFileAttribute({\i file, attribute})} \par{\i object}\line Required. The MsiPath object. \par{\i\b file}\line Required. The name of the file or directory. See the {\uldb MsiPath}{\v MsiPath_Object}  main topic for filename syntax. If the file name is null, the attribute of the directory  will be used. \par{\i\b attribute}\line Required. An integer enumeration value specifying the attribute to queried.  See the remarks below for a list of acceptable values. \par\fi0\li0{\b Remarks}\par\li180 The following attributes can be queried by the GetFileAttribute method:\line\line {\f1 ifaArchive    = 0} \tab The file is an archive file (Windows only).\line {\f1 ifaDirectory  = 1} \tab The "file or directory" is an directory.\line {\f1 ifaHidden     = 2} \tab The file is hidden.  (Note: For Macintosh, this attribute\line \tab \tab is True if the 'fInvisible' Finder flag is set).\line {\f1 ifaNormal     = 3} \tab True only if no other attribute is set (Windows only).\line {\f1 ifaReadOnly   = 4} \tab The file is read-only. Applications can read the file but cannot\line  \tab \tab write to it or delete it.  (Note: For Macintosh, this attribute is True if the \line  \tab \tab file is locked).\line {\f1 ifaSystem     = 5} \tab The file is part of the operating system or is used exclusively\line  \tab \tab by it (Windows only).\line {\f1 ifaTemp       = 6} \tab The file is being used for temporary storage (Windows only).\line {\f1 ifaCompressed = 7} \tab The file or directory is compressed. For a file, this means that all\line  \tab \tab of the data in the file is compressed. For a directory, this means that\line  \tab \tab compression is the default for newly created files and subdirectories.\line  \tab \tab (Windows only).\line \line If any attribute enumeration value other than one of those listed is specified , a run-time error will  be generated. \line\line  See also:  {\uldb SetFileAttribute}{\v MsiPath_SetFileAttribute} \page #{\footnote MsiPath_SetFileAttribute} ${\footnote MsiPath.SetFileAttribute} +{\footnote MsiPath:SetFileAttribute} K{\footnote SetFileAttribute} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SetFileAttribute Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The SetFileAttribute method sets or clears a specified attribute for a file or directory. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SetFileAttribute({\i file, attribute, state})} \par{\i object}\line Required. The MsiPath object. \par{\i\b file}\line Required. The name of the file. See the {\uldb MsiPath}{\v MsiPath_Object}  main topic for filename syntax. If the file name is null, the attribute of the directory  will be set. \par{\i\b attribute}\line Required. An integer enumeration value specifying the attribute to be set or cleared.  See the remarks below for a list of acceptable values. \par{\i\b state}\line Required. Boolean indicating whether the attribute is to be set or cleared. \par\fi0\li0{\b Remarks}\par\li180 The following attributes can be set or cleared by the SetFileAttribute method:\line\line {\f1 ifaArchive    = 0} \tab The file is an archive file (Windows only).\line {\f1 ifaHidden     = 2} \tab The file is hidden.  (Note: For Macintosh, setting this attribute\line \tab \tab sets the 'fInvisible' Finder flag).\line {\f1 ifaReadOnly   = 4} \tab The file is read-only. Applications can read the file but cannot\line  \tab \tab write to it or delete it.  (Note: For Macintosh, setting or clearing this \line  \tab \tab attribute locks or unlocks the file).\line {\f1 ifaSystem     = 5} \tab The file is part of the operating system or is used exclusively\line  \tab \tab by it (Windows only).\line {\f1 ifaTemp       = 6} \tab The file is being used for temporary storage (Windows only).\line {\f1 ifaCompressed = 7} \tab This is a read-only attribute, and cannot be set by SetFileAttribute.\line \line If the specified file does not exist, or if any attribute enumeration value other than one  of those listed is specified, a run-time error will be generated. \line\line   See also:  {\uldb GetFileAttribute}{\v MsiPath_GetFileAttribute} \page #{\footnote MsiPath_FileSize} ${\footnote MsiPath.FileSize} +{\footnote MsiPath:FileSize} K{\footnote FileSize} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FileSize Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The FileSize method retrieves the size, in bytes, of the specified file. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .FileSize({\i file})} \par{\i object}\line Required. The MsiPath object. \par{\i\b file}\line Required. The name of the file. See the {\uldb MsiPath}{\v MsiPath_Object}  main topic for filename syntax. \par\fi0\li0{\b Remarks}\par\li180 The returned byte count represents the logical size of the file; it does not account for  the number of physical clusters (Mac: allocation blocks) allocated for the file. \page #{\footnote MsiPath_FileDate} ${\footnote MsiPath.FileDate} +{\footnote MsiPath:FileDate} K{\footnote FileDate} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FileDate Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Retrieves the date and time that the specified file was created (Mac) or last written to (Windows).  \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .FileDate({\i file})} \par{\i object}\line Required. The MsiPath object. \par{\i\b file}\line Required. The name of the file. See the {\uldb MsiPath}{\v MsiPath_Object}  main topic for filename syntax. \par\fi0\li0{\b Remarks}\par\li180 The value returned by the FileDate method is compatible with the VBA Date data type. \page #{\footnote MsiPath_RemoveFile} ${\footnote MsiPath.RemoveFile} +{\footnote MsiPath:RemoveFile} K{\footnote RemoveFile} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RemoveFile Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The RemoveFile method deletes a file existing in the directory associated with  the MsiPath object. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RemoveFile({\i file})} \par{\i object}\line Required. The MsiPath object. \par{\i\b file}\line Required. The name of the file to be deleted. See the {\uldb MsiPath}{\v MsiPath_Object}  main topic for filename syntax. \par\fi0\li0{\b Remarks}\par\li180 If the specified file does not exist, RemoveFile does nothing (no error is generated). \page #{\footnote MsiPath_EnsureExists} ${\footnote MsiPath.EnsureExists} +{\footnote MsiPath:EnsureExists} K{\footnote EnsureExists} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b EnsureExists Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The EnsureExists method attempts to create the full path associated  with the path object. Returns the number of folders actually created. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .EnsureExists} \par{\i object}\line Required. The MsiPath object. \par\fi0\li0{\b Remarks}\par\li180 EnsureExists attempts to create each subdirectory associated with the  path object, if it doesn't already exist. For example, if the path is   "c:\\dirA\\dirB\\dirC\\", the directory "dirA" will be created on the "c:"  drive, then "c:\\dirA\\dirB" will be created, and so on, until the entire   directory tree exists.  If any subdirectory cannot be created, a   run-time error will be generated. \page #{\footnote MsiPath_Remove} ${\footnote MsiPath.Remove} +{\footnote MsiPath:Remove} K{\footnote Remove} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Remove Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The Remove method attempts to delete the empty directory associated with the path object.  If  the directory is not empty, however, Remove does nothing. If the directory is empty but still  cannot be deleted, a run-time error occurs. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Remove} \par{\i object}\line Required. The MsiPath object. \par\fi0\li0{\b Remarks}\par\li180 Currently, Remove attempts to delete only the "outermost" directory; none of the parent  directories associated with the path are deleted.\line\line \page #{\footnote MsiPath_FileWritable} ${\footnote MsiPath.FileWritable} +{\footnote MsiPath:FileWritable} K{\footnote FileWritable} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FileWritable Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The FileWritable method returns True if the specified file exists, AND that file  can be opened for write-access. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .FileWritable({\i file})} \par{\i object}\line Required. The MsiPath object. \par{\i\b file}\line Required. The name of the file. See the {\uldb MsiPath}{\v MsiPath_Object}  main topic for filename syntax. \par\fi0\li0{\b Remarks}\par\li180 None. \page #{\footnote MsiPath_FileInUse} ${\footnote MsiPath.FileInUse} +{\footnote MsiPath:FileInUse} K{\footnote FileInUse} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FileInUse Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The FileInUse method returns True if a file with the given name  exists in the directory associated with the Path object,  AND that file is 'in use' by another process. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .FileInUse({\i file})} \par{\i object}\line Required. The MsiPath object. \par{\i\b file}\line Required. The name of the file. See the {\uldb MsiPath}{\v MsiPath_Object}  main topic for filename syntax. \par\fi0\li0{\b Remarks}\par\li180 Returns an error record if the specified file doesn't exist. \page #{\footnote MsiPath_GetFileChecksum} ${\footnote MsiPath.GetFileChecksum} +{\footnote MsiPath:GetFileChecksum} K{\footnote GetFileChecksum} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetFileChecksum Method (C++ interface) \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The GetFileChecksum method computes the checksum of the specified file, and also returns the original  checksum stored in the Portable Executable (PE) header of the file (if the file is of the PE format). \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFileChecksum({\i const ICHAR* szFileName,DWORD* pdwHeaderSum, DWORD* pdwComputedSum})} \par{\i object}\line Required. The IMsiPath object. \par{\i\b szFileName}\line Required. A string containing the name of the file. See the {\uldb MsiPath}{\v MsiPath_Object}  main topic for filename syntax. \par{\i\b pdwHeaderSum}\line Required. A pointer to the variable that receives the original checksum stored in the file header, or  zero if the file cannot be identified as an executable. \par{\i\b pdwComputedSum}\line Required. A pointer to the variable that receives the computed checksum. \par\fi0\li0{\b Remarks}\par\li180 Returns an error record only if an unexpected error occurs.  If the specified file does not have a PE  header section (i.e. is not a PE .exe or .dll file), zero will be returned in pdwHeaderSum, but no  error record will be returned. \page #{\footnote MsiPath_ComputeFileChecksum} ${\footnote MsiPath.ComputeFileChecksum} +{\footnote MsiPath:ComputeFileChecksum} K{\footnote ComputeFileChecksum} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ComputeFileChecksum Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The ComputeFileChecksum method computes and returns the checksum of the specified file. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ComputeFileChecksum({\i strFileName})} \par{\i object}\line Required. The IMsiPath object. \par{\i\b strFileName}\line Required. A string containing the name of the file. See the {\uldb MsiPath}{\v MsiPath_Object}  main topic for filename syntax. \par\fi0\li0{\b Returns}\par\li180 The computed checksum is returned as the function result. \page #{\footnote MsiPath_GetFileOriginalChecksum} ${\footnote MsiPath.GetFileOriginalChecksum} +{\footnote MsiPath:GetFileOriginalChecksum} K{\footnote GetFileOriginalChecksum} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetFileOriginalChecksum Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The GetFileOriginalChecksum method returns the original checksum stored in the Portable Executable (PE) header  of the specified file. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFileOriginalChecksum({\i strFileName})} \par{\i object}\line Required. The IMsiPath object. \par{\i\b strFileName}\line Required. A string containing the name of the file. See the {\uldb MsiPath}{\v MsiPath_Object}  main topic for filename syntax. \par\fi0\li0{\b Returns}\par\li180 The original checksum stored in the PE header of the file is returned as the function result.  If the  file is not an executable (i.e. has no PE header, or the header is corrupt), then zero is returned. \page #{\footnote MsiPath_VerifyFileChecksum} ${\footnote MsiPath.VerifyFileChecksum} +{\footnote MsiPath:VerifyFileChecksum} K{\footnote VerifyFileChecksum} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b VerifyFileChecksum Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The GetFileChecksum method computes the checksum of the specified file, and also returns the original  checksum stored in the Portable Executable (PE) header of the file (if the file is of the PE format). \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFileChecksum({\i const ICHAR* szFileName,DWORD* pdwHeaderSum, DWORD* pdwComputedSum})} \par{\i object}\line Required. The IMsiPath object. \par{\i\b szFileName}\line Required. A string containing the name of the file. See the {\uldb MsiPath}{\v MsiPath_Object}  main topic for filename syntax. \par{\i\b pdwHeaderSum}\line Required. A pointer to the variable that receives the original checksum stored in the file header, or  zero if the file cannot be identified as an executable. \par{\i\b pdwComputedSum}\line Required. A pointer to the variable that receives the computed checksum. \par\fi0\li0{\b Remarks}\par\li180 Returns an error record only if an unexpected error occurs.  If the specified file does not have a PE  header section (i.e. is not a PE .exe or .dll file), zero will be returned in pdwHeaderSum, but no  error record will be returned. \page #{\footnote MsiPath_UpdateResource} ${\footnote MsiPath.UpdateResource} +{\footnote MsiPath:UpdateResource} K{\footnote UpdateResource} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b UpdateResource Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The UpdateResource method enables the caller to modify an existing resource in a specified  file. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .UpdateResource({\i file, resType, resID, data})} \par{\i object}\line Required. The MsiPath object. \par{\i\b file}\line Required. The name of the file to be modified. See the {\uldb MsiPath}{\v MsiPath_Object}  main topic for filename syntax. \par{\i\b resType}\line Required. An integer value representing the resource type to be modified.  See the remarks  below for additional details. \par{\i\b resID}\line Required. An integer value representing the ID of the resource to be modified. \par{\i\b data}\line Required. A string containing the data to be written to the specified resource.  Note that  although this parameter is a string, resource data is not limited to printable characters;  any values that can fit in each byte of the string are permissible. \par\fi0\li0{\b Remarks}\par\li180 The integer representing the resource type can be any user-defined value desired; alternatively,  to update a "standard" resource type, the following enumeration values are available:\line  \line {\f1 RT_ACCELERATOR:}\tab Accelerator table\line {\f1 RT_BITMAP:}\tab Bitmap resource\line {\f1 RT_DIALOG:}\tab Dialog box\line {\f1 RT_FONT:}\tab Font resource\line {\f1 RT_FONTDIR:}\tab Font directory resource\line {\f1 RT_MENU:}\tab Menu resource\line {\f1 RT_RCDATA:}\tab Application-defined resource (raw data)\line {\f1 RT_STRING:}\tab String-table entry\line {\f1 RT_MESSAGETABLE:}\tab Message-table entry\line {\f1 RT_CURSOR:}\tab Hardware-dependent cursor resource\line {\f1 RT_GROUP_CURSOR:}\tab Hardware-independent cursor resource\line {\f1 RT_ICON:}\tab Hardware-dependent icon resource\line {\f1 RT_GROUP_ICON:}\tab Hardware-independent icon resource\line {\f1 RT_VERSION:}\tab Version resource\line \line UpdateResource cannot be used to create new resource entries within a file; it can only update  existing resources.  If a resource of the specified type and ID does not exist in the file, a  run-time error will be generated.\line  \line See also:  {\uldb ReadResource}{\v MsiPath_ReadResource} \page #{\footnote MsiPath_ReadResource} ${\footnote MsiPath.ReadResource} +{\footnote MsiPath:ReadResource} K{\footnote ReadResource} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ReadResource Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The ReadResource method enables the caller to read from a file the contents of a specified  resource.  The data from the resource is returned to the caller as a string. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ReadResource({\i file, resType, resID})} \par{\i object}\line Required. The MsiPath object. \par{\i\b file}\line Required. The name of the file to read. See the {\uldb MsiPath}{\v MsiPath_Object}  main topic for filename syntax. \par{\i\b resType}\line Required. An integer value representing the resource type to be read.  See the remarks  below for additional details. \par{\i\b resID}\line Required. An integer value representing the ID of the resource to be read. \par\fi0\li0{\b Remarks}\par\li180 The integer representing the resource type can be any user-defined value desired; alternatively,  to read a "standard" resource type, the following enumeration values are available:\line  \line {\f1 RT_ACCELERATOR:}\tab Accelerator table\line {\f1 RT_BITMAP:}\tab Bitmap resource\line {\f1 RT_DIALOG:}\tab Dialog box\line {\f1 RT_FONT:}\tab Font resource\line {\f1 RT_FONTDIR:}\tab Font directory resource\line {\f1 RT_MENU:}\tab Menu resource\line {\f1 RT_RCDATA:}\tab Application-defined resource (raw data)\line {\f1 RT_STRING:}\tab String-table entry\line {\f1 RT_MESSAGETABLE:}\tab Message-table entry\line {\f1 RT_CURSOR:}\tab Hardware-dependent cursor resource\line {\f1 RT_GROUP_CURSOR:}\tab Hardware-independent cursor resource\line {\f1 RT_ICON:}\tab Hardware-dependent icon resource\line {\f1 RT_GROUP_ICON:}\tab Hardware-independent icon resource\line {\f1 RT_VERSION:}\tab Version resource\line \line If a resource of the specified type and ID does not exist in the file, a  run-time error will be generated.\line \line See also:  {\uldb UpdateResource}{\v MsiPath_UpdateResource} \page #{\footnote MsiPath_ClusteredFileSize} ${\footnote MsiPath.ClusteredFileSize} +{\footnote MsiPath:ClusteredFileSize} K{\footnote ClusteredFileSize} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ClusteredFileSize Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Rounds a file size, in bytes, to a multiple of the volume cluster size,   to indicate the amount of disk space required. The returned value is expressed in  units of 512 bytes. (!!Compressed volumes??.!! \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ClusteredFileSize({\i size})} \par{\i object}\line Required. The MsiPath object. \par{\i\b size}\line Required. The size of the file in bytes. \par\fi0\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote MsiPath_GetFileVersionString} ${\footnote MsiPath.GetFileVersionString} +{\footnote MsiPath:GetFileVersionString} K{\footnote GetFileVersionString} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetFileVersionString Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns a string representation of a file's version. If a file with the given name  does not exist in the directory associated with the path object, or that file has  no version information, an empty string will be returned. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFileVersionString({\i file})} \par{\i object}\line Required. The MsiPath object. \par{\i\b file}\line Required. The name of the file. See the {\uldb MsiPath}{\v MsiPath_Object}  main topic for filename syntax. \par\fi0\li0{\b Remarks}\par\li180 The format of the returned version string depends on the platform:\line\line {\ul Windows:}\line The version string will be of the form "a.b.c.d", where each letter  represents the string equivalent of an integer ranging from 0 to 65535.\line\line {\ul Mac:}\line The version string will be of the form:\line  <majorRev>.<minorRev>.<bugFixRev>.<stage>.<nonRelRev>\line See the {\uldb CheckFileVersion}{\v MsiPath_CheckFileVersion} function for further  explanation of each version field. \page #{\footnote MsiPath_CheckFileVersion} ${\footnote MsiPath.CheckFileVersion} +{\footnote MsiPath:CheckFileVersion} K{\footnote CheckFileVersion;icfvExistNoVersion;icfvExistLower;icfvExistEqual} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CheckFileVersion Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Checks a file against supplied version and language strings and returns an enumeration  indicating whether the actual file's version is newer, older or the same as the  supplied version. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CheckFileVersion({\i strFilename, strVersion, strLanguage})} \par{\i object}\line Required. The MsiPath object. \par{\i\b strFilename}\line Required. The name of the file. CheckFileVersion will look for a file of this name in the directory  associated with the MsiPath object, and check that file's version against the string supplied in the  'version' parameter. See the {\uldb MsiPath}{\v MsiPath_Object} main topic for filename syntax. \par{\i\b strVersion}\line Required. Version string to compare against the existing file. This string must be of the form "a.b.c.d",   with each field containing a 16-bit numeric value. Omitted fields are assumed to be the least  significant (eg d then c then b then a) and are parsed as zeros. Thus, "2.1" is equivalent to "2.1.0.0".  If this string is empty, a version number of "0.0.0.0" (i.e. an unversioned file) is assumed. \par{\i\b strLanguage}\line Required.  A string containing containing identifiers as decimal numbers. If more than one language is supported,   the identifiers should be separated by commas.  See {\uldb GetLangIDStringFromFile}{\v MsiPath_GetLangIDStringFromFile}  for more information about the language string format. \par\fi0\li0{\b Return Types}\par\li180 {\f1 icfvNoExistingFile:}\tab No existing file with the specified name was found in the directory\line \tab \tab associated with the path object.\line {\f1 icfvExistingLower:}\tab The existing file's version is lower than the given version.\line {\f1 icfvExistingEqual:}\tab The existing file's version is equal to the given version.\line {\f1 icfvExistingHigher:}\tab The existing file's version is higher than the given version.\line {\f1 icfvVersStringError:}\tab A syntax error was found in the version string.\line \par\fi0\li0{\b Remarks}\par\li180 If the strVersion parameter is an empty string, and the existing file is versioned, icfvExistingHigher will  always be returned. If a valid string is supplied in strVersion, and the existing file is unversioned, icfvExistingLower will  always be returned. If a valid string is supplied in strVersion, and the existing file is of the same version, the languages specified in the  strLanguage parameter will be compared against the languages supported by the existing file.  If the existing file  supports the same set of languages as those specified in strLanguage (or if strLanguage is an empty string, and the  existing file has no language information either), icfvExistingEqual will be returned.  If strLanguage specifies  any languages that the existing file does not support, icfvExistingLower will be returned. If strVersion is an empty string, and the existing file is also unversioned, the 'LastModified' and 'Created' dates  of the existing file will be compared.  If they differ by more than two seconds (i.e. the file has been modified  since it was installed), icfvExistingHigher will be returned.  Otherwise, icfvExistingLower will be returned. \page #{\footnote MsiPath_GetImportModulesEnum} ${\footnote MsiPath.GetImportModulesEnum} +{\footnote MsiPath:GetImportModulesEnum} K{\footnote GetImportModulesEnum} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetImportModulesEnum Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method is undocumented. \page #{\footnote MsiPath_GetLangIDStringFromFile} ${\footnote MsiPath.GetLangIDStringFromFile} +{\footnote MsiPath:GetLangIDStringFromFile} K{\footnote GetLangIDStringFromFile} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetLangIDStringFromFile Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns a string containing a file's language identifiers as decimal numbers.  If more than one language is supported, the identifiers will be separated by commas. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetLangIDStringFromFile({\i file})} \par{\i object}\line Required. The MsiPath object. \par{\i\b file}\line Required. The name of the file.  GetLangIDStringFromFile will look for a file of this name in the  directory associated with the MsiPath object.  See the {\uldb MsiPath}{\v MsiPath_Object}  main topic for filename syntax. \par\fi0\li0{\b Remarks}\par\li180 On the Win32 platform, The language IDs returned by GetLangIDStringFromFile are 16-bit values, expressed as  a decimal number.  Each ID consists of the combination of a primary language ID in bits 0-9,  and a sublanguage ID in bits 10-15.  For example, the primary language ID for German is  0000000111 (binary), with a sublanguage ID of 000001 (binary). Thus, the full LANGID is:\line  \line \tab 000001 + 0000000111 = 0x0407, or 1031 decimal.\line \line Similarly, the LANGID for U.S. English works out to be 1033, so for a file that supports  U.S. English and German, GetLangIDStringFromFile will return "1033, 1031".\line \line On the Macintosh platform, the language ID returned by GetLangIDStringFromFile is the 'region code'  found in the version resource of the file. \page #{\footnote MsiPath_GetSelfRelativeSD} ${\footnote MsiPath.GetSelfRelativeSD} +{\footnote MsiPath:GetSelfRelativeSD} K{\footnote GetSelfRelativeSD} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetSelfRelativeSD Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method is undocumented. \page #{\footnote MsiPath_CheckLanguageIDs} ${\footnote MsiPath.CheckLanguageIDs} +{\footnote MsiPath:CheckLanguageIDs} K{\footnote CheckLanguageIDs} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CheckLanguageIDs Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Checks a file against a set of language IDs, and returns an enumeration indicating  the relationship between the file languages and the supplied languages. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CheckLanguageIDs({\i file, ids})} \par{\i object}\line Required. The MsiPath object. \par{\i\b file}\line Required. The name of the file. CheckLanguageIDs will look for a file of this name in the directory  associated with the MsiPath object, and check that file's supported languages against the languages  specified in the "ids" parameter.  See the {\uldb MsiPath}{\v MsiPath_Object}  main topic for filename syntax. \par{\i\b ids}\line Required. A string specifying the list of integer language IDs to check for. If more than one  ID is supplied, they must be separated by commas.  For example: "1031, 1033, 2057" \par\fi0\li0{\b Return Types}\par\li180 {\f1 iclExistNoFile:}\tab No existing file with the specified name in the directory\line \tab \tab associated with the path object.\line {\f1 iclExistNoLang:}\tab The existing file has no language information.\line {\f1 iclExistSubset:}\tab The specified language set encompasses every language\line \tab \tab supported in the existing file, plus additional languages\line \tab \tab not supported by the existing file.\line {\f1 iclExistEqual:}\tab The specified language set is identical to the language\line \tab \tab set supported by the existing file.\line {\f1 iclExistIntersect:}\tab The specified language set and the language set\line \tab \tab supported by the existing file have at least one language\line \tab \tab in common, and each set also encompasses at least one \line \tab \tab language not supported by the other.\line {\f1 iclExistSuperset:}\tab The existing file supports at least one language not\line \tab \tab encompassed by the specified language set.\line {\f1 iclExistNullSet:}\tab The specified language set and the language set supported\line \tab \tab by the existing file have no languages in common.\line {\f1 iclExistLangNeutral:}\tab The existing file returns a language-neutral LANGID, \line \tab \tab but the specified language set supports one or more \line \tab \tab specific languages.\line {\f1 iclNewLangNeutral:}\tab The specified language set contains a language-neutral\line \tab \tab LANGID, but the existing file supports one or more specific\line \tab \tab languages.\line {\f1 iclExistLangSetError:}\tab The existing file returns a language-neutral LANGID,\line \tab \tab but also contains one or more non-neutral IDs.\line {\f1 iclNewLangSetError:}\tab The specified language set contains a language-neutral\line \tab \tab LANGID, but also contains one or more non-neutral IDs.\line {\f1 iclLangStringError:}\tab The specified language set string contains a syntax \line \tab \tab error.  Possible errors include non-numeric characters,\line \tab \tab empty fields between comma separators, etc.\line \par\fi0\li0{\b Remarks}\par\li180 A LANGID value is "language-neutral" if the primary language ID (the lower 10 bits) portion  of the value is all zeros.  If either the existing file or the language set string passed  in the ids parameter contains a language-neutral LANGID, no other LANGIDs are allowable in  the set.\line \line If both the existing file and the given language set are "language-neutral", iclExistEqual  will be returned.\line \line If an empty string is passed in "ids", and the existing file supports at least one language,  iclExistNullSet will be returned.\line \page #{\footnote MsiPath_Compare} ${\footnote MsiPath.Compare} +{\footnote MsiPath:Compare} K{\footnote Compare} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Compare Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The Compare method compares the path associated with the object  passed as an argument to the path of the current object.  An enumeration describing the relationship between the two path objects  is returned. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Compare({\i path})} \par{\i object}\line Required. The MsiPath object. \par{\i\b path}\line Required. Another MsiPath object that will supply the path for comparison. \par\fi0\li0{\b Return Types}\par\li180 {\f1 ipcEqual:}\tab The paths of the two objects are equal.\line {\f1 ipcParent:}\tab The path of the object passed as an argument is a parent\line  \tab\tab directory of the current object's path.\line {\f1 ipcChild:}\tab The current object's path is a parent directory of the path of\line \tab\tab the object passed as an argument.\line {\f1 ipcNoRelation}\tab The paths of the two objects are unrelated (i.e. the root\line \tab\tab directory of each is different). \page #{\footnote MsiPath_Child} ${\footnote MsiPath.Child} +{\footnote MsiPath:Child} K{\footnote Child} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Child Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The Child method compares the path associated with the object passed as an argument  (the "parent" path) to the path of the current object, and returns a string that   contains the portion of the current object's path not encompassed by the parent path,   i.e. the "child" path. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Child({\i parent})} \par{\i object}\line Required. The MsiPath object. \par{\i\b parent}\line Required. An MsiPath object which represents a path that is a parent of the current  object's path. \par\fi0\li0{\b Remarks}\par\li180 The child path returned will always contain a trailing directory separator. For example, if the path of the current object is:\line "c:\\Windows\\System\\Drivers\\"\line \line and the path of the parent object is:\line "c:\\Windows\\"\line \line the string returned by the Child method will be:\line "System\\Drivers\\"\line \line If the paths of the two MsiPath objects are equal, an empty string will be returned.  If the  "parent object" represents a path that is not actually a parent of the current object's path,  a run-time error (1344: "Not a parent") will be thrown. \page #{\footnote MsiPath_TempFileName} ${\footnote MsiPath.TempFileName} +{\footnote MsiPath:TempFileName} K{\footnote TempFileName} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b TempFileName Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Creates a temporary file in this object's directory, and returns  the full path to the temporary file.  An optional prefix and/or extension may be supplied  for use when generating the file name.  The generated file name is of the 8.3 form where  the characters in the file name not used by the prefix are random hexidecimal numbers. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .TempFileName({\i prefix, extension, fileNameOnly})} \par{\i object}\line Required. The MsiPath object. \par{\i\b prefix}\line Optional. The prefix for the file name.  At most the first 8 characters of this string  are used.  If this argument is not supplied, no prefix is given to the file name (the  file name will consist entirely of random hexidecimal digits. \par{\i\b extension}\line Optional. The extension for the file name.  At most the first 3 characters of this string  are used.  If this argument is not supplied, the default extension "tmp" is used. \par{\i\b fileNameOnly}\line Optional. True to return the temporary file name only.  False to return the full path of the  temporary file. \par\fi0\li0{\b Remarks}\par\li180  None. \page #{\footnote MsiPath_FindFile} ${\footnote MsiPath.FindFile} +{\footnote MsiPath:FindFile} K{\footnote FindFile} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FindFile Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \tx7000\tab{\b Signature Table} \par}\li180 The FindFile method attempts to find a match for the file signature passed in,  and returns True if a file of the specified filter exists. If found, the  path is changed to the location of the file. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .FindFile({\i record, depth})} \par{\i object}\line Required. The MsiPath object. \par{\i\b record}\line Required. The file signature filter. Must be of the same form as a record from the  {\uldb Signature}{\v _msi_Signature_Table@msi.hlp} table MINUS the key {\i\b Signature} column. \par{\i\b depth}\line Optional. The depth to which the file signature is to be searched. \page #{\footnote MsiPath_SubFolders} ${\footnote MsiPath.SubFolders} +{\footnote MsiPath:SubFolders} K{\footnote SubFolders} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SubFolders Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns a collection of strings containing the names of all the sub-folders of the path. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SubFolders} \par{\i object}\line Required. The MsiPath object. \par\fi0\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote MsiPath_BindImage} ${\footnote MsiPath.BindImage} +{\footnote MsiPath:BindImage} K{\footnote BindImage} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b BindImage Method \line\tx360\tab\fs18\b0{\uldb MsiPath Object}{\v MsiPath_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Binds an executable import address table to the functions imported from DLLS.  \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .BindImage({\i file, dllPath})} \par{\i object}\line Required. The MsiPath object. \par{\i\b file}\line Required. the executable filename string. \par{\i\b dllPath}\line Optional. A string representing the set of {\b ; } separated paths where to get the import DLLS.  The function prefixes the {\b dllPath} string with the path of the executable and appends it  with the system path. \par\fi0\li0{\b Remarks}\par\li180 Applicable only on Windows systems. The service does nothing on Mac. \page #{\footnote MsiPath_SupportsLFN} ${\footnote MsiPath.SupportsLFN} +{\footnote MsiPath:SupportsLFN} K{\footnote SupportsLFN} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SupportsLFN Property \line\tx360\tab\fs18\b0{\uldb MsiVolume Object}{\v MsiVolume_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Boolean indicating whether the volume this path is on supports long file names.  If False is returned, only 8.3 file names may be used. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SupportsLFN} \par{\i object}\line Required. The MsiVolume object. \page #{\footnote MsiFileCopy_Object} ${\footnote MsiFileCopy Object} K{\footnote MsiFileCopy} +{\footnote Class:MsiFileCopy} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiFileCopy Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The MsiFileCopy object is used to copy files from a specified source directory to a specified  destination directory.  The MsiFileCopy object is created by calling the   {\uldb CreateCopier}{\v MsiServices_CreateCopier} function. \par\li0{\b Methods}\par\li180 {\uldb CopyTo}{\v MsiFileCopy_CopyTo}\line {\uldb ChangeMedia}{\v MsiFileCopy_ChangeMedia}\line \page #{\footnote MsiFileCopy_CopyTo} ${\footnote MsiFileCopy.CopyTo} +{\footnote MsiFileCopy:CopyTo} K{\footnote CopyTo} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CopyTo Method \line\tx360\tab\fs18\b0{\uldb MsiFileCopy Object}{\v MsiFileCopy_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Copies a file from a source path to a destination path. File parameters are  supplied as an MsiRecord object. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CopyTo({\i srcPath, destPath, paramRec})} \par{\i object}\line Required. The MsiFileCopy object. \par{\i\b srcPath}\line Required. The MsiPath object representing the source directory. \par{\i\b destPath}\line Required. The MsiPath object representing the destination directory. This directory must exist.  If it does not, a run-time error will be generated. \par{\i\b paramRec}\line Required. An MsiRecord object containing file parameters as follows:\line   Field 1: For compressed files, the Diamond cabinet identifier.  For uncompressed files,\line       the source file name.\line   Field 2: The destination file name.\line   Field 3: The file attributes to set - an integer containing bit flags:\line     Bit 0: Read Only\line     Bit 1: Hidden\line     Bit 2: System\line     (all other bits are ignored)\line   Field 4: Unclustered size of file, in bytes. \par\fi0\li0{\b Remarks}\par\li180 When uncompressing files from cabinets, note that the {\uldb ChangeMedia}{\v MsiFileCopy_ChangeMedia}  method must first be called to designate the proper source cabinet before calling CopyTo.\line  \line  (Windows Only)\line  New files created by the CopyTo function will always have the archive bit set, which is the standard   for new files created by any application.  Thus, there is no separate bit in field 3 of the record   passed to CopyTo for setting the archive bit. \page #{\footnote MsiFileCopy_ChangeMedia} ${\footnote MsiFileCopy.ChangeMedia} +{\footnote MsiFileCopy:ChangeMedia} K{\footnote ChangeMedia;Cabinet files,compressed} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ChangeMedia Method \line\tx360\tab\fs18\b0{\uldb MsiFileCopy Object}{\v MsiFileCopy_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The method is used to request a change in source media. For compressed files in particular, this method  signals that the source of compressed data (as used by the {\uldb CopyTo}{\v MsiFileCopy_CopyTo} method)  needs to change from one cabinet file to another. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ChangeMedia({\i srcPath, keyFileName})} \par{\i object}\line Required. The MsiFileCopy object. \par{\i\b srcPath}\line Required. The MsiPath object representing the media source directory. \par{\i\b keyFileName}\line Required. The name of a 'key' file on the source media. See the remarks below. \par\fi0\li0{\b Remarks}\par\li180 After a cabinet Copier object has been created (via the MsiServices  {\uldb CreateCopier}{\v MsiServices_CreateCopier} method), ChangeMedia must be  called to designate the source cabinet file before the {\uldb CopyTo}{\v MsiFileCopy_CopyTo}  method is called, and again each time a file compressed in a cabinet other than the  current cabinet is to be copied.  Also, note that for files that are split across cabinets,  the CopyTo method will return with an error record (imsgNeedNextCabinet, error number 1390)  when the file data contained in the current cabinet has finished copying.  In this case,  the ChangeMedia method should be called with the name of the next cabinet, and then CopyTo  should be called again with the same file, to allow the second part of the split file to  finish copying (this procedure should be repeated as necessary to complete copying of files  that may be split across more than two cabinets).\line \line When copying files from cabinets, the name supplied in the keyFileName parameter MUST be the name of the  cabinet file to be opened.  If a valid cabinet file with this name is not found in the directory specified  by the srcPath object, an error will be returned.  \par  If ChangeMedia is being called for a non-cabinet MsiFileCopy object, the keyFileName is ignored.  \par {\b Cabinets stored in a Database stream}\par  If the keyFileName name is preceded by a '#' character, this indicates that the source media is a a cabinet   that is stored in a stream within the .MSI database. In this case, ChangeMedia will attempt to open   and copy from a stream within the MsiStorage object that was passed to the CreateCopier method.  The   name of the stream is the value in keyFileName (without the leading '#'). {\b Cabinets stored in a Launcher resource}\par  If the keyFileName name is preceded by an '@'character, this indicates that the source media   is a cabinet stored within a resource of the launching executable file. In this case, ChangeMedia will   attempt to find and load the cabinet from a resource whose resource name is the same as the value in   keyFileName (without the leading '@'), and whose integral resource type is RT_INSTALL_DIMCAB (42).\line   \line  NOTE!  The functionality of copying files from cabinets within a module resource is not available via   automation.  This is because there is no standard way for an automation controller to initialize an   MsiFileCopier object with a valid module handle, which is required by ChangeMedia to be able to locate   module resources.  Thus, this functionality is only available when running the Installer via a   host launcher that has direct access to the Installer COM interfaces. \page #{\footnote MsiFilePatch_Object} ${\footnote MsiFilePatch Object} K{\footnote MsiFilePatch} +{\footnote Class:MsiFilePatch} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiFilePatch Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The MsiFilePatch object is used to patch existing files in place.  The MsiFilePatch object is created by calling the   {\uldb CreatePatcher}{\v MsiServices_CreatePatcher} function. \par\li0{\b Methods}\par\li180 {\uldb ApplyPatch}{\v MsiFilePatch_ApplyPatch}\line {\uldb ContinuePatch}{\v MsiFilePatch_ContinuePatch}\line {\uldb CancelPatch}{\v MsiFilePatch_CancelPatch}\line {\uldb CanPatchFile}{\v MsiFilePatch_CanPatchFile}\line \page #{\footnote MsiFilePatch_ApplyPatch} ${\footnote MsiFilePatch.ApplyPatch} +{\footnote MsiFilePatch:ApplyPatch} K{\footnote ApplyPatch} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ApplyPatch Method \line\tx360\tab\fs18\b0{\uldb MsiFilePatch Object}{\v MsiFilePatch_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method applies a patch to a target file, producing an output file. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ApplyPatch(targetPath,targetFile,outputPath,outputFile,patchPath,patchFile,perTick)} \par{\i object}\line Required. The MsiFilePatch object. \par{\i targetPath}\line Required. An MsiPath object specifying the location of the file to be patched. \par{\i targetName}\line Required. The name of the target file. \par{\i outputPath}\line Required. An MsiPath object specifying the location of the output file. \par{\i outputName}\line Required. The name of the output file. \par{\i patchPath}\line Required. An MsiPath object specifying the location of the patch file. \par{\i patchName}\line Required. The name of the patch file. \par{\i perTick}\line Optional. The number of bytes to patch. This method will return control to the caller  after these number of bytes have been patched, or the file is completely patched, whichever  occurs first.  Note that the actual patch application will continue in a seperate thread  after this method returns, if necessary.  This method may return after more than the given number of  bytes has been patched.  If this method completes before the file has been patched,  an error is thrown indicating  how many bytes have been patched. The caller should call {\uldb ContinuePatch}{\v MsiFilePatch_ContinuePatch}  to resume the patch application. If the file has been compeletely patched and no errors  have occured, no error is thrown. Ommitting or passing 0 for this value causes this method to patch the  entire file before returning. \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiFilePatch_ContinuePatch} ${\footnote MsiFilePatch.ContinuePatch} +{\footnote MsiFilePatch:ContinuePatch} K{\footnote ContinuePatch} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ContinuePatch Method \line\tx360\tab\fs18\b0{\uldb MsiFilePatch Object}{\v MsiFilePatch_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method continues a patch application initiated by {\uldb ApplyPatch}{\v MsiFilePatch_ApplyPatch}. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ContinuePatch()} \par{\i object}\line Required. The MsiFilePatch object. \par\fi0\li0{\b Remarks}\par\li180 This method will patch at least as many bytes as specified in the {\i perTick} parameter to  {\uldb ApplyPatch}{\v MsiFilePatch_ApplyPatch}, or the remainder of the file, whichever is less.  If the entire file is not patched and error is thrown indicating the number of bytes patched.  In  this case, this method should be called again to resume the patch application. \page #{\footnote MsiFilePatch_CancelPatch} ${\footnote MsiFilePatch.CancelPatch} +{\footnote MsiFilePatch:CancelPatch} K{\footnote CancelPatch} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CancelPatch Method \line\tx360\tab\fs18\b0{\uldb MsiFilePatch Object}{\v MsiFilePatch_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method cancels a patch application initiated by {\uldb ApplyPatch}{\v MsiFilePatch_ApplyPatch}. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CancelPatch()} \par{\i object}\line Required. The MsiFilePatch object. \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiFilePatch_CanPatchFile} ${\footnote MsiFilePatch.CanPatchFile} +{\footnote MsiFilePatch:CanPatchFile} K{\footnote CanPatchFile} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CanPatchFile Method \line\tx360\tab\fs18\b0{\uldb MsiFilePatch Object}{\v MsiFilePatch_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method determines if an existing file can be patched.   \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CanPatchFile(targetPath,targetName,patchPath,patchName)} \par{\i object}\line Required. The MsiFilePatch object. \par{\i targetPath}\line Required. An MsiPath object representing the location of the file being checked. \par{\i targetFile}\line Required. The name of the file being checked. \par{\i patchPath}\line Required. An MsiPath object representing the location of the patch file. \par{\i patchFile}\line Required. The name of the patch file. \par\fi0\li0{\b Return Types}\par\li180 {\f1 icpCanPatch:}\tab Can patch file to update.\line {\f1 icpCannotPatch:}\tab File cannot be patched.\line {\f1 icpUpToDate:}\tab File is already up-to-date. Patch is unecessary. \page
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\help\msitool.rtf ===
{\rtf1\ansi {\fonttbl{\f0\fswiss Arial;}{\f1\fmodern Courier New;}} {\colortbl;} \fs20 #{\footnote InstallerDevTools} ${\footnote Installer Tools} K{\footnote Tools} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Installer Development Tools \par}\li180 THESE TOOLS AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,  EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED  WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE. {\uldb MsiDb}{\v MsiDb_Tool} - database import, export, merge, transform\line {\uldb MsiMsp}{\v MsiMsp_Tool} - patch package creation\line {\uldb MsiInfo}{\v MsiInfo_Tool} - summary information property manager, string pool validation\line {\uldb MsiMerg}{\v MsiMerge_Tool} - merges one database into another\line {\uldb MsiTran}{\v MsiTran_Tool} - generates and applies transforms\line {\uldb Orca}{\v Orca_Tool} - package editing/creation tool\line {\uldb MsiVal2}{\v MsiVal2_Tool} - command line ICE validation tool.\line {\uldb Msispy}{\v Msispy_Tool}  - installer registration browser\line {\uldb MsiZap}{\v MsiZap_Tool}  - failure cleanup utility\line {\uldb Makefile}{\v MsiTool_Mak} - makefile used to build custom actions and tools\line \page #{\footnote MsiDb_Tool} ${\footnote MsiDb Tool} K{\footnote MsiDb} +{\footnote Tool:MsiDb} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MSIDB.EXE Tool To Modify A Database \par}\li180 The MSIDB.EXE tool uses the MSI database external API to import and export database tables and streams,  merge databases and apply transforms to databases.  It is essentially a UI and/or command line  processing layer on top of the MsiDatabaseImport and MsiDatabaseExport Windows Installer APIs.  If all required  parameters (mode, folder, database and table list) are specified on the command line,  the tool will not bring up any UI and will operate as silent command line-driven utility,  suitable for a build script. If the folder  containing the text archive files is not specified it will be prompted for; likewise the database will   be prompted for if not specified. Tables can be exported from a read only database. \par\fi-180\li180{\b Command Line Syntax} {\line\f1 MsiDb \{option\}...\{option\}... \{table\}...\{table\}} \line The following case-insensitive command line options are supported (slash delimiter may also be used). {\line\f1\b  -i   } Import text archive files from folder into specified database {\line\f1\b  -e   } Export selected tables into text archive files in specified folder {\line\f1\b  -c   } Creates a new database file (overwrites existing) and imports tables {\line\f1\b  -f   } Specifies the folder containing the text archive files for tables and streams {\line\f1\b  -d   } Fully-qualified path to the database {\line\f1\b  -m   } Fully-qualified path to the database to merge in {\line\f1\b  -t   } Fully-qualified path to the transform to apply {\line\f1\b  -j   } Name of storage to remove from the database. {\line\f1\b  -k   } Name of stream to remove from the database. {\line\f1\b  -x   } Name of stream to save to a disk file in the current directory. {\line\f1\b  -w   } Name of storage to save to a disk file in the current directory. {\line\f1\b  -a   } Name of file to add to the database (becomes a child stream). {\line\f1\b  -r   } Name of storage to add to the database (becomes a substorage). {\line\f1\b  -s   } Truncate table names to 8 chars on idt export. {\line\f1\b  -?   } Displays command line help dialog \line Table names for import are file names. Standard wild card specifications may be used. \line Table names for export are table names. Only the wildcard specification, "*", may be used. \line Multiple -m's, -a's, -r's, -t's, -j's, -k's, -w's, and -x's may be used (maximum of 10 each). \line The -m, -a, -r, -t, -j, -k, -w, and -x options are only available in silent command line mode. \par{\b Archive Table Naming} \line Only archive text files with the ".idt" extension may be imported. \line The table name is truncated to 8 characters if -s is used, and the extension ".idt" added. \line Tables names supplied by command for import are likewise converted. \line The name used for database table creation is maintained in the .idt file. \line Binary data streams are stored as separate files with extension ".ibd". \line Binary filename used is primary key data for the row containing the stream. \line\line Note:  When using long filenames with spaces, use quotes around them.  For example, for a  database that is in the 'My Documents' folder, specify it as "c:\\my documents". \page #{\footnote MsiMsp_Tool} ${\footnote MsiMsp Tool} K{\footnote MsiMsp} +{\footnote Tool:MsiMsp} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MSIMSP.EXE Tool To Create Patch Packages \par}\li180 The MSIMSP.EXE tool is a wrapper for PatchWiz.dll.  The tool may be used to create a patch package by passing  in the path to a "Patch Creation Properties" file or PCP file, and the path to the patch package to create.  Additional options include creating a log file, and specifying a non-default temporary folder in which  the transforms, cabinets and assorted files used to create the patch package are left behind.  See msi.chm for  more info on setting up a Patch Creation Properties file, as well as meanings of error codes from PatchWiz.dll  and MSIMSP.EXE. \par\fi-180\li180{\b Command Line Syntax} {\line\f1 MsiMsp \{option\}...\{option\}...} \line The following case-insensitive command line options are supported (slash delimiter may also be used). {\line\f1\b  -s   } Required.  Followed by path to Patch Creation Properties file. {\line\f1\b  -p   } Required.  Followed by path to patch package to create. {\line\f1\b  -f   } Optional.  Followed by path to temporary folder. {\line\f1\b  -k   } Optional.  Fail if temporary folder already exists. {\line\f1\b  -l   } Optional.  Followed by path to log file describing patch creation process and errors. {\line\f1\b  -d   } Optional.  Will display dialog if and when patch creation has completed successfully. {\line\f1\b  -?   } Displays command line help dialog \line\line Note:  When using long filenames with spaces, use quotes around them.  For example, for a  Patch Creation Project that is in the 'My Documents' folder, specify it as "c:\\My Documents". \page #{\footnote MsiInfo_Tool} ${\footnote MsiInfo Tool} K{\footnote MsiInfo} +{\footnote Tool:MsiInfo} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MSIINFO.EXE Tool To Modify A Database's Summary Properties \par}\li180 The MSIINFO.EXE tool uses the MSI database external API to edit or display the summary information of a  database. It is a command line tool. \par\fi-180\li180{\b Command Line Syntax} {\line\f1 MsiInfo \{database\} [[/B] /D]}\line Displays the Summary information of the database to the console\line \line The following case-insensitive command line options are supported (slash delimiter may also be used). {\line\f1\b  -B   }  Display information about every string in the string pool. {\line\f1\b  -D   }  Display information about the string pool. \line {\b Remarks}\line The -D option will examine the string pool for corruption and provide information about the codepage of the database.   Note that the codepage of the database is different from the codepage of the Summary Information stream (PID_CODEPAGE).  It will also check every string for characters that are invalid in the codepage of the database. The -B option is only  valid if -D is also used, and it must come before the -D option. \line {\line\f1 MsiInfo \{database\} \{option\} \{data\}.....}\line Sets the corresponding summary information property\line \line The following case-insensitive command line options are supported (slash delimiter may also be used). {\line\f1\b  -I   }  PID_DICTIONARY {\line\f1\b  -C   }  PID_CODEPAGE {\line\f1\b  -T   }  PID_TITLE {\line\f1\b  -J   }  PID_SUBJECT {\line\f1\b  -A   }  PID_AUTHOR {\line\f1\b  -K   }  PID_KEYWORDS {\line\f1\b  -O   }  PID_COMMENTS {\line\f1\b  -P   }  PID_TEMPLATE {\line\f1\b  -L   }  PID_LASTAUTHOR {\line\f1\b  -V   }  PID_REVNUMBER {\line\f1\b  -E   }  PID_EDITTIME {\line\f1\b  -S   }  PID_LASTPRINTED {\line\f1\b  -R   }  PID_CREATE_DTM {\line\f1\b  -Q   }  PID_LASTSAVE_DTM {\line\f1\b  -G   }  PID_PAGECOUNT {\line\f1\b  -W   }  PID_WORDCOUNT {\line\f1\b  -H   }  PID_CHARCOUNT {\line\f1\b       }  PID_THUMBNAIL     !! NOT SUPPORTED !! {\line\f1\b  -N   }  PID_APPNAME {\line\f1\b  -U   }  PID_SECURITY \line The data following the option is optional. If there is no data following the option, then the property is  removed. The database must not be a readOnly database.  The same properties can be specified again on the  command line, but only 20 switches can be used.  If the data for a particular option contains a space,  encapsulate it in quotes, such as /T "MY TITLE".  The quotation marks notify the command line parser to  ignore the space.  For the file time  properties, those being PID_EDITTIME, PID_LASTPRINTED, PID_CREATE_DTM,  and PID_LASTSAVE_DTM, use the following format "year/month/day hour:minute:second" which is required to  be "yyyy/mm/dd hh:mm:ss" (i.e. "1997/06/20 03:25:59). \page #{\footnote MsiTran_Tool} ${\footnote MsiTran Tool} K{\footnote MsiTran} +{\footnote Tool:MsiTran} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MSITRAN.EXE Tool to Generate or Apply a Transform file \par}\li180 The {\i\b MSITRAN.EXE} tool can generate or apply a transform file.  It is a command line tool layered on the  MsiDatabaseGenerateTransform, MsiCreateTransformSummaryInfo, and MsiDatabaseApplyTransform Windows Installer API.\par {\b Command Line Syntax:} \line {\line\f1 Transform Generation: msitran -g \{base db\} \{ref db\} \{transform file name\} [\{error conditions / validation conditions\}]}  {\line\f1 Transform Application: msitran -a \{transform\} \{database\} [\{error conditions\}]} \line\line {\b Error Conditions:}\line The following errors may be suppressed when applying a transform.  To suppress an error, include the appropriate character in  the \{error conditions\} argument. Conditions specified with -g are placed in  the summary information of the transform, but are not used when  applying a transform with -a.\line \line {\f1 'a': }Add existing row.\line {\f1 'b': }Delete non-existing row.\line {\f1 'c': }Add existing table.\line {\f1 'd': }Delete non-existing table.\line {\f1 'e': }Modify existing row.\line {\f1 'f': }Change codepage.\line \line\line {\b Validation Conditions:}\line The following validation conditions may be used to indicate when a transform may be applied to a package.  These conditions may be specified with -g, but not -a.\line \line {\f1 'g': }Check upgrade code.\line {\f1 'l': }Check language.\line {\f1 'p': }Check platform.\line {\f1 'r': }Check product.\line {\f1 's': }Check major version only.\line {\f1 't': }Check major and minor versions only.\line {\f1 'u': }Check major, minor, and upgrade versions.\line {\f1 'v': }Applied database version < Base database version.\line {\f1 'w': }Applied database version <= Base database version.\line {\f1 'x': }Applied database version = Base database version.\line {\f1 'y': }Applied database version >= Base database version.\line {\f1 'z': }Applied database version > Base database version.\line \line\line {\b Generate transform without Summary Information Stream:}\line The conditions are ignored.\line {\f1 '@': }Suppress summary information stream generation.\line \page #{\footnote Orca_Tool} ${\footnote Orca Tool} K{\footnote Orca} +{\footnote Tool:Orca} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ORCA.EXE Tool for package editing and creation \par}\li180 The {\i\b ORCA.EXE} tool can be used for creating and editing MSI packages and merge modules. The tool  also provides a graphical interface for validation, highlighting the particular entries where validation errors  and/or warnings occur.  \par {\b Command Line Syntax:} \line {\line\f1 orca [<options>] [<source file>]} \line \line The following are general command line options supported by ORCA {\line\f1\b -q} Quiet mode  {\line\f1\b -s <database>} Schema database ["orca.dat" - default] {\line\f1\b -?} Help dialog \line \line The following are Merge Module command line options {\line\f1\b -c} Commit merge to database if no errors. {\line\f1\b -m <module>} Merge Module to merge into database {\line\f1\b -f Feature[:Feature2]} Feature(s) to connect to Merge Module {\line\f1\b -r <directory id>} Directory entry for module root redirection {\line\f1\b -x <directory>} Extract files to source image under directory {\line\f1\b -g <language>} Language used to open module {\line\f1\b -l <log file>} File to use as log, append if already exists {\b Remarks:}\line If merging, -f, -m and <sourcefile> are all required. \line\line \page #{\footnote MsiVal2_Tool} ${\footnote MsiVal2 Tool} K{\footnote MsiVal2} +{\footnote Tool:MsiVal2} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MSIVAL2.EXE Command line tool to run ICE validation. \par}\li180 The {\i\b MSIVAL2.EXE} tool can run a suite of ICE validators or an individual ICE.\par {\b Command Line Syntax:} {\line\f1 msival2 \{database\} \{CUB file\} [-f] [-l \{logfile\}] [-i \{ICE Id\}[:\{ICE Id\}...]]} \line \line The following case-insensitive command line options are supported (slash delimiter may also be used). {\line\f1\b  -F   }  Filter out informational messages from the displayed results. {\line\f1\b  -I   }  Run only the selected ICE(s).  {\line\f1\b  -L   }  Write results to the specified file.  {\b Remarks:}\line If the {\b -I(i)} option is used, the tool will run only the listed ICE validators, in the order specified.  Each ICE should be specified as it is listed in the CustomAction table of the CUB file. If the {\b -I(i)} option  is omitted, the tool runs the default set of ICEs defined by the author of the CUB file. The {\b -F} option will not display or log any ICE INFO messages. All other types of messages will be displayed. The file specified with the {\b -L} must not exist. If it does, it will not be overwritten. The {\b -F} option  will filter messages sent to the log as well. The results will still be visible on the screen. \page #{\footnote MsiMerge_Tool} ${\footnote MsiMerg Tool} K{\footnote MsiMerge; MsiMerg} +{\footnote Tool:MsiMerge} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MSIMERG.EXE Tool to Merge a database into another \par}\li180 The {\i\b MSIMERG.EXE} tool can merge a database into another.  If MergeConflicts are reported, information  is placed in the _MergeErrors table.  Note, the _MergeErrors table may not always be created depending  on the error that occured (an error not related to the actual merge of the data).  It utilizes the external API,  in particular, MsiDatabaseMerge.  \par {\b Command Line Syntax} \line {\f1 msimerg \{base db\} \{ref db\}}\line \page #{\footnote MsiZap_Tool} ${\footnote MsiZap Tool} K{\footnote MsiZap} +{\footnote Tool:MsiZap} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MSIZAP.EXE Tool to clean up Windows Installer information if a failure has occurred. \par}\li180 The {\i\b MSIZAP.EXE} tool can clean up Windows Installer information for a product or all products installed  on a machine  \par {\b Command Line Syntax} \line {\f1 msizap T[A!] \{product code\} }\line {\f1 msizap T[A!] <msi package>} \line {\f1 msizap *[A!] ALLPRODUCTS} \line {\f1 msizap PSA?!} \line \line {\b Option explanations} \line {\f1\b *} remove all Windows Installer folders and regkeys; adjust shared DLL counts; stop Windows Installer service \line {\f1\b T} remove all info for given product code \line {\f1\b P} remove In-Progress key \line {\f1\b S} remove Rollback Information \line {\f1\b A} for any specified removal, just change ACLs to Admin Full Control \line {\f1\b ?} verbose help \line {\f1\b !} force 'yes' response to any prompt \line {\b Remarks:}\line When using the T option with the Product Code, include the curly braces around the Product Code.\line \line {\b CAUTION: Products installed by the Windows Installer may fail to function after using MsiZap.} \page #{\footnote MsiTool_Mak} ${\footnote MsiTool Mak} K{\footnote makefile} +{\footnote Tool:Makefile} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Makefile for Building Tools and Custom Actions \par}\li180 MSITOOL.MAK is a makefile that can be used to make tools and custom actions, using VC4.x or VC5.  See header of that file for documentation. It requires a set of values to be defined before  including this file. Typically we put those at the start of the CPP, ifdef'd to be skipped by the  C compiler. Likewise resources are added to the end of the CPP file. See samples for details.\line VCBIN may be defined to the directory where the VC tools are found, else the makefile uses MSVCDIR and MSDEVDIR,  and if those aren't defined, it does not specify a location, assuming the tools to be on the PATH.  A problem with the environment variables in VC5 is that if both are NOT on you path, the linker  can't find MSDIS100.DLL. If you copy that from MSDEVDIR to MSVCDIR, it works OK.  The other thing that you can do is to copy MSDIS100.DLL and RC.EXE and RCDLL.DLL to MSVCDIR, and set VCBIN to that. \page #{\footnote Msispy_Tool} ${\footnote Msispy User Interface} K{\footnote Msispy: } +{\footnote Tool:Msispy} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiSpy: A Tool to Display Component-Level View of A System \par}\li180 \line {\i\b MsiSpy} provides a component level view of the products and features installed on a system,  using either an MSI Package, or the registry information. Msispy also displays the status of  each, and allows you to partially or completely re-install missing or damaged items. You  can also  re-configure any product or feature, selecting the install level, and specifying whether to install  it locally or run it from a network server. Please select a topic you would like more information on:\par {\uldb Menu Options}{\v Msispy_MenuOptions}\par {\uldb Context Menus}{\v Msispy_ContextMenus}\par {\uldb Command Line Options}{\v Msispy_CommandLine}\par {\uldb Setting Preferences}{\v Msispy_Preferences}\par {\uldb Msispy Automation Interface}{\v MsispyAutoOverview}\line \page #{\footnote Msispy_MenuOptions} ${\footnote Msispy_MenuOptions} K{\footnote Msispy: Menu Options} +{\footnote Msispy_MenuOptions} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Menu Options \par}\li180 \par\li0{\b The File Menu}\par\li500\fi-320 {\b Open MSI Package} allows you to open an MSI package.\par {\b Open Local Database} uses the registry information to display information about all the  products installed on the computer.\par {\b Load Saved State} allows you to load a profile of the system previously saved by Msispy.\par {\b Save Current State} allows you to save a complete profile of the system onto a file. The  information is stored in an easy to read text format. This information should not be modified  directly.\par {\b Restore Saved State} (enabled only when a saved state is loaded) attempts to restore the system  to the configuration in the saved state. If more components have been added since the profile was  saved, they are left untouched. If some products or components have been damaged since the profile was  saved, Msispy attempts to restore them by attempting to re-install them from the original  source. If the source is not available, you are given the option to abort, retry or ignore.\par {\b Check Differences} (enabled only when a saved state is loaded) checks the differences between the  configuration in the saved state and the current system configuration. These differences are written  to a log file in a tab-separated table in simple text format. \par\li0\line{\b The View Menu}\par\li500\fi-320 {\b Refresh} refreshes the display by getting the displayed information again and redrawing it.\par {\b Prefences} allows you to change the Msispy mode and language. For more information, refer to  {\uldb Setting Preferences}{\v Msispy_Preferences}. \par\li0\line{\b The Help Menu}\par\li500\fi-320 {\b Overview} brings up the Msispy help file\par {\b About} brings up the product information box, with information about the registered user and the  version and product ID of the installed copy of Msispy. \line \par\li0\line {\uldb Context Menus}{\v Msispy_ContextMenus}\line {\uldb Command Line Options}{\v Msispy_CommandLine}\line \page #{\footnote Msispy_ContextMenus} ${\footnote Msispy ContextMenus} K{\footnote Msispy: Context Menus} +{\footnote Msispy_ContextMenus} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Context Menus \par}\li180 \line When a product, feature or component is selected, clicking on the right mouse-button brings up the   context menus that allow you to perform operations on the selected item. \par\li0\line{\b Properties}\par\li500\fi-320 All context menus have a {\i\b Properties} option, that brings up a property sheet containing information  about the selected item. In addition to the {\b General} tab that contains the information, the property  sheets also contain a {\b File List} tab, that contains information about all the files needed by the  selected item. The list of files contains information about the file including the component that uses it,  the file name and size when it was installed, the location of the file. In this tab, the {\b Verify Files}  button allows you to check the current status of the files. This button brings up a window with the current  file information, including current size, creation, last access and modification dates. If the file is not  found, or if the file size is different, the file is marked broken with an icon to the its left.\par {\b Important:} If a saved state is in use, the verify files brings up information about the files {\i when the  state was saved, not the current file information}. \par\li0\line Additional context-menu choices cary depending on the item selected: \par\li0\line{\b Components}\par\li500\fi-320 The menu comprises:\par {\b Re-install Component} (enabled only if the component is broken), which allows you to re-install  the component from it's original install source. \par\li0\line{\b Installed Products (and their Features)}\par\li500\fi-320 The menu comprises:\par {\b Re-install}, which allows you to use one of the available re-install modes, including  options to re-install just the damaged or missing files. Other options allow you to force all  the files to be re-installed, the registry entries to be verified, and so on.\par {\b Configure}, which allows you to install the feature on your local machine, or run it  from a remote source. Some features may have components that need to be installed on the local  machine. Attempting to install such features to run from a remote location will lead to a mix  of some components being on the local system and the rest at the remote location.\par {\b Un-install}, which allows you to un-install the product or feature. If a feature with  sub-features is un-installed, all of its sub-features will be un-installed as well. If the last  installed feature in a product is un-installed, the entire product will be un-installed. \par\li0\line{\b Other Products (and their Features)}\par\li500\fi-320 If an MSI package for a product not installed on the local system  is in use,  the context menu has the following options:\par {\b Install Product}, which will install the product on the local system using the default options.\par {\b Advertise Product}, which will advertise the product on to the local system. This will  set all the registry entries needed for the product, but will not actually install any files  on the local system. The files will be transferred in when the component they belong to is used. \par\li0\line{\b Products in Saved States (and their Features)}\par\li500\fi-320 If a saved state is loaded, the menu always comprises:\par {\b Restore Saved State}, which has the same functionality as {\b Restore Saved State} described under   {\uldb Menu Options}{\v Msispy_MenuOptions}. \line \par\li0\line {\uldb Menu Options}{\v Msispy_MenuOptions}\line {\uldb Command Line Options}{\v Msispy_CommandLine}\line \page #{\footnote Msispy_CommandLine} ${\footnote Msispy_CommandLine} K{\footnote Msispy: Command Line Options} +{\footnote Msispy_CommandLine} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Msispy Command Line Options \par}\li180 \par\li0\line{\b msispy [filename|/options filename(s)]}\par\li500\fi-320 \par\li180{\b /d\i<srcprof.msp> <destfile.log>}\par\li500\fi-320 Saves the differences between the current system configuration and the profile {\i <srcprof.msp>} into  {\i <destfile.log>} in a tab-separated table form. \par\li180{\b /s\i<destprof.msp>}\par\li500\fi-320 Saves the current system configuration to the profile {\i <destprof.msp>} \par\li180{\b /r\i<srcprof.msp>}\par\li500\fi-320 Restores the current system to the configuration in the profile {\i <srcprof.msp>} \par\li180{\b\i <srcprof.msp>}\par\li500\fi-320 Launches GUI version and loads the profile {\i <srcprof.msp>} \par\li180{\b\i without any command-line option}\par\li500\fi-320 Launches GUI version\line \par\li0\line {\uldb Menu Options}{\v Msispy_MenuOptions}\line {\uldb Context Menus}{\v Msispy_ContextMenus}\line \page #{\footnote Msispy_Preferences} ${\footnote Msispy Preferences} K{\footnote Msispy: Preferences, Setting} +{\footnote Msispy_Preferences} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Setting Preferences \par}\li180 \line Msispy can be used in different modes, and in different languages. You can set your preferences  by selecting "Preferences" under the View Menu. \par\li0{\b Modes}\par\li180 Msispy can be used in the following modes:\line {\b Normal}: This is the default Msispy mode. In this mode, Msispy determines the status of a  component solely on the basis of the component key-file. This makes Msispy much faster, and in  most cases will present an accurate picture of the component status. All the features of Msispy  are available in this mode.\line {\b Diagnostic}: In this mode, Msispy will perform a complete check of all files to determine  component status, instead of relying on component key files. This mode will give a more accurate  picture of the component status, but will make the program significantly slower.  Msispy should not normally be used in this mode, especially if it is being used on a slow machine.\line {\b Restricted}: In this mode, the functionality of Msispy is limited to the Local Database only.  You will not be able to access MSI Packages or Msispy Saved States. Leads to a slight performance  gain. This mode is recommended if you are on slow machines and do not wish to take advantage of  all the Msispy features.\par If Msispy is unable to load the system interface DLL (default name msispyu.dll), it will start up in  the restricted mode. You will not be able to switch to any other mode, since the other modes need  the system interface DLL to function. To restore Msispy to it's full functionality, you may need to  perform a re-install from the original install source.\line \par\li0{\b Languages}\par\li180 Msispy can be used in many languages if the Msispy language support components are installed. A list  of all supported languages appears in the "Language" tab of the preferences property sheet. To  select a different language, click on the new language, and select OK. Msispy will switch to the  new language automatically, if the language resources for the new language can be loaded. If the  new language cannot be loaded, Msispy will load the closest match if available. If there is no  similar language available, default language will be loaded.\par \page #{\footnote MsispyAutoOverview} ${\footnote Msispy Automation Overview} K{\footnote Msispy Automation: } \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Msispy Automation Interface \par}{\b Access to C++ Libraries}\par\li180 An {\uldb Msispy object}{\v HELPID_Msispy} must be initially created in order to load   the automation support that is required in order to access the {\uldb Msispy objects}{\v Msispy_Objects}  through OLE automation. This object provides wrappers to create the top level  objects and access their methods. These wrapper simply provide argument  translations to expose the Msispy functions in a manner consistent with BASIC  without changing the behavior of the methods. When possible, a pair of Get and  Set C++ methods will be exposed to BASIC as a single property. Where  appropriate, C++ methods taking an index argument will be exposed as an indexed  property. Many C++ methods return the result through an argument, as the return  value is used for the error return; however in BASIC errors are handled by  a separate mechanism, and the result is always passed in the return value. \par\fi0\li0{\b Creating the Msispy object}\par\li180 In order for OLE to access the automation, the DLL must be registered. This can  be done in one of two ways- (a) by installing Msispy on your system using MSI, or  (b) self-registering the DLL. The OLE ProgId used to create the Msispy object is  {\b Msispy.Automation}. \page #{\footnote Msispy_Objects} ${\footnote Msispy Objects} K{\footnote Msispy Automation:Objects} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Msispy Automation Objects \par}\li180 {\uldb Msispy object}{\v HELPID_Msispy}\line {\uldb MsispyDatabase object}{\v HELPID_MsispyDatabase}\line {\uldb MsispyProfile object}{\v HELPID_MsispyProfile}\line {\uldb MsispyRegistry object}{\v HELPID_MsispyRegistry}\line \page #{\footnote HELPID_Msispy} ${\footnote Msispy Object} K{\footnote Msispy Automation: Objects} +{\footnote Class:Msispy} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Msispy Object \par}\li180 An Msispy object must be initially created in order to load the automation  support that is required in order to access the Msispy automation functions through OLE automation. This object provides wrappers to create the top level  objects and access their methods. \par\li0{\b Methods}\par\li180 {\uldb CreateDatabase}{\v HELPID_Msispy_CreateDatabase}\line {\uldb CreateProfile}{\v HELPID_Msispy_CreateProfile}\line {\uldb CreateRegistry}{\v HELPID_Msispy_CreateRegistry}\line \page #{\footnote HELPID_Msispy_CreateDatabase} ${\footnote Msispy.CreateDatabase} +{\footnote Msispy:CreateDatabase} K{\footnote Msispy Automation: CreateDatabase} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateDatabase Method \line\tx360\tab\fs18\b0{\uldb Msispy Object}{\v HELPID_Msispy} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a new {\uldb MsispyDatabase object}{\v HELPID_MsispyDatabase}. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateDatabase()} \par{\i object}\line Required. The Msispy object. \page #{\footnote HELPID_Msispy_CreateProfile} ${\footnote Msispy.CreateProfile} +{\footnote Msispy:CreateProfile} K{\footnote Msispy Automation: CreateProfile} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateProfile Method \line\tx360\tab\fs18\b0{\uldb Msispy Object}{\v HELPID_Msispy} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a new {\uldb MsispyProfile object}{\v HELPID_MsispyProfile}. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateProfile()} \par{\i object}\line Required. The Msispy object. \page #{\footnote HELPID_Msispy_CreateRegistry} ${\footnote Msispy.CreateDatabase} +{\footnote Msispy:CreateDatabase} K{\footnote Msispy Automation: CreateRegistry} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateRegistry Method \line\tx360\tab\fs18\b0{\uldb Msispy Object}{\v HELPID_Msispy} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a new {\uldb MsispyRegistry object}{\v HELPID_MsispyRegistry}. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateRegistry()} \par{\i object}\line Required. The Msispy object. \page #{\footnote HELPID_MsispyDatabase} ${\footnote MsispyDatabase Object} K{\footnote Msispy Automation: MsispyDatabase Object} +{\footnote Class:MsispyDatabase} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsispyDatabase Object \line\fs18\b0\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 The database object accesses a Microsoft Installer database.\par Before the MsispyDatabase object is released (by going out of scope or by setting the  object variable to Nothing), the {\uldb Close}{\v HELPID_MsispyDatabase_Close} method  must be called to release all handles. \par\li0{\b Properties}\par\li180 {\uldb GetProduct}{\v HELPID_MsispyDatabase_GetProduct}\line {\uldb GetFeatureFromProduct}{\v HELPID_MsispyDatabase_GetFeatureFromProduct}\line {\uldb GetProduct}{\v HELPID_MsispyDatabase_GetProduct}\line {\uldb GetFeatureFromProduct}{\v HELPID_MsispyDatabase_GetFeatureFromProduct}\line {\uldb GetComponent}{\v HELPID_MsispyDatabase_GetComponent}\line {\uldb GetComponentFromProduct}{\v HELPID_MsispyDatabase_GetComponentFromProduct}\line {\uldb GetComponentFromFeature}{\v HELPID_MsispyDatabase_GetComponentFromFeature}\line {\uldb GetComponentName}{\v HELPID_MsispyDatabase_GetComponentName}\line {\uldb GetProductInfo}{\v HELPID_MsispyDatabase_GetProductInfo}\line {\uldb GetFeatureInfo}{\v HELPID_MsispyDatabase_GetFeatureInfo}\line {\uldb QueryProductState}{\v HELPID_MsispyDatabase_QueryProductState}\line {\uldb QueryFeatureState}{\v HELPID_MsispyDatabase_QueryFeatureState}\line {\uldb QueryComponentState}{\v HELPID_MsispyDatabase_QueryComponentState}\line {\uldb GetFeatureUsage}{\v HELPID_MsispyDatabase_GetFeatureUsage}\line {\uldb GetClientFromComponent}{\v HELPID_MsispyDatabase_GetClientFromComponent}\line {\uldb GetFileFromComponent}{\v HELPID_MsispyDatabase_GetFileFromComponent}\line {\uldb GetFileInfo}{\v HELPID_MsispyDatabase_GetFileInfo}\line {\uldb GetComponentLocation}{\v HELPID_MsispyDatabase_GetComponentLocation}\line {\uldb GetComponentPath}{\v HELPID_MsispyDatabase_GetComponentPath}\line \par\li0{\b Methods}\par\li180 {\uldb Open}{\v HELPID_MsispyDatabase_Open}\line {\uldb Close}{\v HELPID_MsispyDatabase_Close}\line \page #{\footnote HELPID_MsispyDatabase_Open} ${\footnote MsispyDatabase.Open} +{\footnote MsispyDatabase.Open} K{\footnote Msispy Automation: Open} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Open Method \line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Opens a database at the location specified. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Open({\i databasePath})} \par{\i object}\line Required. The MsispyDatabase object. \par{\i\b databasePath}\line Required. The location of the database. \page #{\footnote HELPID_MsispyDatabase_Close} ${\footnote MsispyDatabase.Close} +{\footnote MsispyDatabase.Close} K{\footnote Msispy Automation: Close} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Close Method \line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Closes a database, releasing the database handles. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Close()} \par{\i object}\line Required. The MsispyDatabase object. \page #{\footnote HELPID_MsispyDatabase_GetProduct} ${\footnote MsispyDatabase.GetProduct} +{\footnote MsispyDatabase:GetProduct} K{\footnote Msispy Automation: GetProduct} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetProduct Property \line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the product-code of a product in the database, or  a blank string if all the products in the database have been enumerated.  A 0-based index is used to enumerate the products one at a time. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetProduct({\i productIndex})} \par{\i object}\line Required. The MsispyDatabase object. \par{\i\b productIndex}\line Required. The 0-based index used for enumeration. \page #{\footnote HELPID_MsispyDatabase_GetFeatureFromProduct} ${\footnote MsispyDatabase.GetFeatureFromProduct} +{\footnote MsispyDatabase:GetFeatureFromProduct} K{\footnote Msispy Automation: GetFeatureFromProduct} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetFeatureFromProduct Property \line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the name of a feature of the product, or a blank string   if all the features of the product have been enumerated. A 0-based index is used  to enumerate the features one at a time. The product being used must be in the  database, otherwise no features are enumerated. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFeatureFromProduct({\i productCode, featureIndex})} \par{\i object}\line Required. The MsispyDatabase object. \par{\i\b productCode}\line Required. The product whose features are to be enumerated, must be in the database. \par{\i\b featureIndex}\line Required. The 0-based index used for enumeration. \page #{\footnote HELPID_MsispyDatabase_GetComponent} ${\footnote MsispyDatabase.GetComponent} +{\footnote MsispyDatabase:GetComponent} K{\footnote Msispy Automation: GetComponent} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetComponent Property \line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the GUID of a component in the database, or  a blank string if all the components in the database have been enumerated.  A 0-based index is used to enumerate the components one at a time. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetComponent({\i componentIndex})} \par{\i object}\line Required. The MsispyDatabase object. \par{\i\b componentIndex}\line Required. The 0-based index used for enumeration. \page #{\footnote HELPID_MsispyDatabase_GetComponentFromProduct} ${\footnote MsispyDatabase.GetComponentFromProduct} +{\footnote MsispyDatabase:GetComponentFromProduct} K{\footnote Msispy Automation: GetComponentFromProduct} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetComponentFromProduct Property \line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the GUID of a component of the product, or a blank string   if all the components of the product have been enumerated. A 0-based index is used  to enumerate the components one at a time. The product being used must be in the  database, otherwise no components are enumerated. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetComponentFromProduct({\i productCode, componentIndex})} \par{\i object}\line Required. The MsispyDatabase object. \par{\i\b productCode}\line Required. The product whose components are to be enumerated, must be in the database. \par{\i\b componentIndex}\line Required. The 0-based index used for enumeration. \page #{\footnote HELPID_MsispyDatabase_GetComponentFromFeature} ${\footnote MsispyDatabase.GetComponentFromFeature} +{\footnote MsispyDatabase:GetComponentFromFeature} K{\footnote Msispy Automation: GetComponentFromFeature} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetComponentFromFeature Property \line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the GUID of a component of the feature, or a blank string   if all the components of the feature have been enumerated. A 0-based index is used  to enumerate the components one at a time. The product in use must be in the  database, otherwise no components are enumerated. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetComponentFromFeature({\i productCode, featureName, componentIndex})} \par{\i object}\line Required. The MsispyDatabase object. \par{\i\b productCode}\line Required. The product in use, must be in the database. \par{\i\b featureName}\line Required. The feature whose components are to be enumerated. \par{\i\b componentIndex}\line Required. The 0-based index used for enumeration. \page #{\footnote HELPID_MsispyDatabase_GetComponentName} ${\footnote MsispyDatabase.GetComponentName} +{\footnote MsispyDatabase:GetComponentName} K{\footnote Msispy Automation: GetComponentName} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetComponentName Property \line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the name of a component whose GUID is passed in, or  a blank string if the required information could not be found. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetComponentName({\i componentGuid})} \par{\i object}\line Required. The MsispyDatabase object. \par{\i\b componentGuid}\line Required. The component whose name will be returned. \page #{\footnote HELPID_MsispyDatabase_GetProductInfo} ${\footnote MsispyDatabase.GetProductInfo} +{\footnote MsispyDatabase:GetProductInfo} K{\footnote Msispy Automation: GetProductInfo} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetProductInfo Property \line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing a specific property of a product, or  a blank string if the required information could not be found. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetProductInfo({\i productCode, productAttribute})} \par{\i object}\line Required. The MsispyDatabase object. \par{\i\b productCode}\line Required. The product about which information will be returned. \par{\i\b productAttribute}\line Required. The required property of the product (case-sensitive). Valid attributes are:\line \tab ProductName\line \tab ProductVersion\line \tab ProductCode\line \tab Manufacturer\line \tab SupportURL\line \tab SupportPhone\line \tab UserName\line \tab UserOrgName\line \tab ProductId\line \page #{\footnote HELPID_MsispyDatabase_GetFeatureInfo} ${\footnote MsispyDatabase.GetFeatureInfo} +{\footnote MsispyDatabase:GetFeatureInfo} K{\footnote Msispy Automation: GetFeatureInfo} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetFeatureInfo Property \line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing a specific property of a feature, or  a blank string if the required information could not be found. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFeatureInfo({\i productCode, featureName, featureAttribute})} \par{\i object}\line Required. The MsispyDatabase object. \par{\i\b productCode}\line Required. The product to which the feature belongs. \par{\i\b featureName}\line Required. The feature about which information will be returned. \par{\i\b featureAttribute}\line Required. The required property of the feature (case-sensitive). Valid attributes are:\line \tab Feature\line \tab Feature_Parent\line \tab Title\line \tab Description\line \tab Display\line \tab Level\line \tab Directory_Configurable\line \tab RunFromSource\line \page #{\footnote HELPID_MsispyDatabase_QueryProductState} ${\footnote MsispyDatabase.QueryProductState} +{\footnote MsispyDatabase:QueryProductState} K{\footnote Msispy Automation: QueryProductState} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b QueryProductState Property \line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a numeric value that represents the install-state of a product on the  local system. The value returned is one of the following:\line \tab -6: configuration data corrupt\line \tab -5: installation suspended or in progress\line \tab -4: run from source, source is unavailable\line \tab -3: return buffer overflow\line \tab -2: invalid function argument\line \tab -1: unrecognized product or feature\line \tab  0: broken\line \tab  1: advertised\line \tab  2: uninstalled\line \tab  3: installed on local drive\line \tab  4: run from source, CD or net\line \tab  5: use default, local or source\line \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .QueryProductState({\i productCode})} \par{\i object}\line Required. The MsispyDatabase object. \par{\i\b productCode}\line Required. The product about which information will be returned. \page #{\footnote HELPID_MsispyDatabase_QueryFeatureState} ${\footnote MsispyDatabase.QueryFeatureState} +{\footnote MsispyDatabase:QueryFeatureState} K{\footnote Msispy Automation: QueryFeatureState} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b QueryFeatureState Property \line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a numeric value that represents the install-state of a feature on the  local system. The value returned is one of the following:\line \tab -6: configuration data corrupt\line \tab -5: installation suspended or in progress\line \tab -4: run from source, source is unavailable\line \tab -3: return buffer overflow\line \tab -2: invalid function argument\line \tab -1: unrecognized product or feature\line \tab  0: broken\line \tab  1: advertised\line \tab  2: uninstalled\line \tab  3: installed on local drive\line \tab  4: run from source, CD or net\line \tab  5: use default, local or source\line \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .QueryFeatureState({\i productCode, featureName})} \par{\i object}\line Required. The MsispyDatabase object. \par{\i\b productCode}\line Required. The product to which the feature belongs. \par{\i\b featureName}\line Required. The feature about which information will be returned. \page #{\footnote HELPID_MsispyDatabase_QueryComponentState} ${\footnote MsispyDatabase.QueryComponentState} +{\footnote MsispyDatabase:QueryComponentState} K{\footnote Msispy Automation: QueryComponentState} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b QueryComponentState Property \line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a numeric value that represents the install-state of a component on the  local system. The value returned is one of the following:\line \tab -6: configuration data corrupt\line \tab -5: installation suspended or in progress\line \tab -4: run from source, source is unavailable\line \tab -3: return buffer overflow\line \tab -2: invalid function argument\line \tab -1: unrecognized product or feature\line \tab  0: broken\line \tab  1: advertised\line \tab  2: uninstalled\line \tab  3: installed on local drive\line \tab  4: run from source, CD or net\line \tab  5: use default, local or source\line \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .QueryComponentState({\i productCode, componentGuid})} \par{\i object}\line Required. The MsispyDatabase object. \par{\i\b productCode}\line Required. The product to which the component belongs. \par{\i\b componentGuid}\line Required. The component about which information will be returned. \page #{\footnote HELPID_MsispyDatabase_GetFeatureUsage} ${\footnote MsispyDatabase.GetFeatureUsage} +{\footnote MsispyDatabase:GetFeatureUsage} K{\footnote Msispy Automation: GetFeatureUsage} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetFeatureUsage Property \line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns the usage-count of a feature on the local system. Returns 0 if the  information could not be obtained. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFeatureUsage({\i productCode, featureName})} \par{\i object}\line Required. The MsispyDatabase object. \par{\i\b productCode}\line Required. The product to which the feature belongs. \par{\i\b featureName}\line Required. The feature about which information will be returned. \page #{\footnote HELPID_MsispyDatabase_GetClientFromComponent} ${\footnote MsispyDatabase.GetClientFromComponent} +{\footnote MsispyDatabase:GetClientFromComponent} K{\footnote Msispy Automation: GetClientFromComponent} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetClientFromComponent Property \line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing product-code of a client-product of the component, or a blank   string if all the clients of the component have been enumerated. A 0-based index is used  to enumerate the clients one at a time. The component being used must be in the  database, otherwise no clients are enumerated. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetClientFromComponent({\i componentGuid, clientIndex})} \par{\i object}\line Required. The MsispyDatabase object. \par{\i\b componentGuid}\line Required. The component whose clients are to be enumerated, must be in the database. \par{\i\b clientIndex}\line Required. The 0-based index used for enumeration. \page #{\footnote HELPID_MsispyDatabase_GetFileFromComponent} ${\footnote MsispyDatabase.GetFileFromComponent} +{\footnote MsispyDatabase:GetFileFromComponent} K{\footnote Msispy Automation: GetFileFromComponent} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetFileFromComponent Property \line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the name of a file used by the component, or a blank   string if all the files of the component have been enumerated. A 0-based index is used  to enumerate the files one at a time. The component being used must be in the  database, otherwise no files are enumerated. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFileFromComponent({\i componentGuid, fileIndex})} \par{\i object}\line Required. The MsispyDatabase object. \par{\i\b componentGuid}\line Required. The component whose files are to be enumerated, must be in the database. \par{\i\b fileIndex}\line Required. The 0-based index used for enumeration. \page #{\footnote HELPID_MsispyDatabase_GetFileInfo} ${\footnote MsispyDatabase.GetFileInfo} +{\footnote MsispyDatabase:GetFileInfo} K{\footnote Msispy Automation: GetFileInfo} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetFileInfo Property \line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing a specific property of a file, or  a blank string if the required information could not be found. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFileInfo({\i productCode, componentGuid, fileName, fileAttribute})} \par{\i object}\line Required. The MsispyDatabase object. \par{\i\b productCode}\line Required. The product to which the component belongs. \par{\i\b componentGuid}\line Required. The component to which the file belongs. \par{\i\b fileName}\line Required. The file about which information will be returned. \par{\i\b fileAttribute}\line Required. The required property of the file (case-sensitive). Valid attributes are:\line \tab FileTitle\line \tab FileSize\line \tab Version\line \tab Language\line \tab Attributes\line \tab Sequence\line \tab FileActualSize\line \tab FileCreated\line \tab FileModified\line \tab FileAccessed\line \tab FileStatus\line \page #{\footnote HELPID_MsispyDatabase_GetComponentLocation} ${\footnote MsispyDatabase.GetComponentLocation} +{\footnote MsispyDatabase:GetComponentLocation} K{\footnote Msispy Automation: GetComponentLocation} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetComponentLocation Property \line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the full path to the keyfile of a component. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetComponentLocation({\i componentGuid})} \par{\i object}\line Required. The MsispyDatabase object. \par{\i\b componentGuid}\line Required. The component about which information will be returned. \page #{\footnote HELPID_MsispyDatabase_GetComponentPath} ${\footnote MsispyDatabase.GetComponentPath} +{\footnote MsispyDatabase:GetComponentPath} K{\footnote Msispy Automation: GetComponentPath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetComponentPath Property \line\tx360\tab\fs18\b0{\uldb MsispyDatabase Object}{\v HELPID_MsispyDatabase} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the full path to the keyfile of a component. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetComponentPath({\i productCode, componentGuid})} \par{\i object}\line Required. The MsispyDatabase object. \par{\i\b productCode}\line Required. The product to which the component belongs. \par{\i\b componentGuid}\line Required. The component about which information will be returned. \page #{\footnote HELPID_MsispyProfile} ${\footnote MsispyProfile Object} K{\footnote Msispy Automation: MsispyProfile Object} +{\footnote Class:MsispyProfile} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsispyProfile Object \line\fs18\b0\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 The profile object accesses a Msispy profile.\par Before the MsispyProfile object is released (by going out of scope or by setting the  object variable to Nothing), the {\uldb Close}{\v HELPID_MsispyProfile_Close} method  must be called to release all handles. \par\li0{\b Properties}\par\li180 {\uldb GetProduct}{\v HELPID_MsispyProfile_GetProduct}\line {\uldb GetFeatureFromProduct}{\v HELPID_MsispyProfile_GetFeatureFromProduct}\line {\uldb GetProduct}{\v HELPID_MsispyProfile_GetProduct}\line {\uldb GetFeatureFromProduct}{\v HELPID_MsispyProfile_GetFeatureFromProduct}\line {\uldb GetComponent}{\v HELPID_MsispyProfile_GetComponent}\line {\uldb GetComponentFromProduct}{\v HELPID_MsispyProfile_GetComponentFromProduct}\line {\uldb GetComponentFromFeature}{\v HELPID_MsispyProfile_GetComponentFromFeature}\line {\uldb GetComponentName}{\v HELPID_MsispyProfile_GetComponentName}\line {\uldb GetProductInfo}{\v HELPID_MsispyProfile_GetProductInfo}\line {\uldb GetFeatureInfo}{\v HELPID_MsispyProfile_GetFeatureInfo}\line {\uldb QueryProductState}{\v HELPID_MsispyProfile_QueryProductState}\line {\uldb QueryFeatureState}{\v HELPID_MsispyProfile_QueryFeatureState}\line {\uldb QueryComponentState}{\v HELPID_MsispyProfile_QueryComponentState}\line {\uldb GetFeatureUsage}{\v HELPID_MsispyProfile_GetFeatureUsage}\line {\uldb GetClientFromComponent}{\v HELPID_MsispyProfile_GetClientFromComponent}\line {\uldb GetFileFromComponent}{\v HELPID_MsispyProfile_GetFileFromComponent}\line {\uldb GetFileInfo}{\v HELPID_MsispyProfile_GetFileInfo}\line {\uldb GetComponentLocation}{\v HELPID_MsispyProfile_GetComponentLocation}\line {\uldb GetComponentPath}{\v HELPID_MsispyProfile_GetComponentPath}\line \par\li0{\b Methods}\par\li180 {\uldb Open}{\v HELPID_MsispyProfile_Open}\line {\uldb Close}{\v HELPID_MsispyProfile_Close}\line \page #{\footnote HELPID_MsispyProfile_Open} ${\footnote MsispyProfile.Open} +{\footnote MsispyProfile.Open} K{\footnote Msispy Automation: Open} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Open Method \line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Opens a profile at the given location. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Open({\i profilePath})} \par{\i object}\line Required. The MsispyProfile object. \par{\i\b profilePath}\line Required. The location of the profile. \page #{\footnote HELPID_MsispyProfile_Close} ${\footnote MsispyProfile.Close} +{\footnote MsispyProfile.Close} K{\footnote Msispy Automation: Close} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Close Method \line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Closes an open profile. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Close()} \par{\i object}\line Required. The MsispyProfile object. \page #{\footnote HELPID_MsispyProfile_GetProduct} ${\footnote MsispyProfile.GetProduct} +{\footnote MsispyProfile:GetProduct} K{\footnote Msispy Automation: GetProduct} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetProduct Property \line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the product-code of a product in the profile, or  a blank string if all the products in the profile have been enumerated.  A 0-based index is used to enumerate the products one at a time. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetProduct({\i productIndex})} \par{\i object}\line Required. The MsispyProfile object. \par{\i\b productIndex}\line Required. The 0-based index used for enumeration. \page #{\footnote HELPID_MsispyProfile_GetFeatureFromProduct} ${\footnote MsispyProfile.GetFeatureFromProduct} +{\footnote MsispyProfile:GetFeatureFromProduct} K{\footnote Msispy Automation: GetFeatureFromProduct} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetFeatureFromProduct Property \line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the name of a feature of the product, or a blank string   if all the features of the product have been enumerated. A 0-based index is used  to enumerate the features one at a time. The product being used must be in the  profile, otherwise no features are enumerated. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFeatureFromProduct({\i productCode, featureIndex})} \par{\i object}\line Required. The MsispyProfile object. \par{\i\b productCode}\line Required. The product whose features are to be enumerated, must be in the profile. \par{\i\b featureIndex}\line Required. The 0-based index used for enumeration. \page #{\footnote HELPID_MsispyProfile_GetComponent} ${\footnote MsispyProfile.GetComponent} +{\footnote MsispyProfile:GetComponent} K{\footnote Msispy Automation: GetComponent} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetComponent Property \line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the GUID of a component in the profile, or  a blank string if all the components in the profile have been enumerated.  A 0-based index is used to enumerate the components one at a time. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetComponent({\i componentIndex})} \par{\i object}\line Required. The MsispyProfile object. \par{\i\b componentIndex}\line Required. The 0-based index used for enumeration. \page #{\footnote HELPID_MsispyProfile_GetComponentFromProduct} ${\footnote MsispyProfile.GetComponentFromProduct} +{\footnote MsispyProfile:GetComponentFromProduct} K{\footnote Msispy Automation: GetComponentFromProduct} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetComponentFromProduct Property \line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the GUID of a component of the product, or a blank string   if all the components of the product have been enumerated. A 0-based index is used  to enumerate the components one at a time. The product being used must be in the  profile, otherwise no components are enumerated. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetComponentFromProduct({\i productCode, componentIndex})} \par{\i object}\line Required. The MsispyProfile object. \par{\i\b productCode}\line Required. The product whose components are to be enumerated, must be in the profile. \par{\i\b componentIndex}\line Required. The 0-based index used for enumeration. \page #{\footnote HELPID_MsispyProfile_GetComponentFromFeature} ${\footnote MsispyProfile.GetComponentFromFeature} +{\footnote MsispyProfile:GetComponentFromFeature} K{\footnote Msispy Automation: GetComponentFromFeature} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetComponentFromFeature Property \line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the GUID of a component of the feature, or a blank string   if all the components of the feature have been enumerated. A 0-based index is used  to enumerate the components one at a time. The product in use must be in the  profile, otherwise no components are enumerated. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetComponentFromFeature({\i productCode, featureName, componentIndex})} \par{\i object}\line Required. The MsispyProfile object. \par{\i\b productCode}\line Required. The product in use, must be in the profile. \par{\i\b featureName}\line Required. The feature whose components are to be enumerated. \par{\i\b componentIndex}\line Required. The 0-based index used for enumeration. \page #{\footnote HELPID_MsispyProfile_GetComponentName} ${\footnote MsispyProfile.GetComponentName} +{\footnote MsispyProfile:GetComponentName} K{\footnote Msispy Automation: GetComponentName} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetComponentName Property \line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the name of a component whose GUID is passed in, or  a blank string if the required information could not be found. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetComponentName({\i componentGuid})} \par{\i object}\line Required. The MsispyProfile object. \par{\i\b componentGuid}\line Required. The component whose name will be returned. \page #{\footnote HELPID_MsispyProfile_GetProductInfo} ${\footnote MsispyProfile.GetProductInfo} +{\footnote MsispyProfile:GetProductInfo} K{\footnote Msispy Automation: GetProductInfo} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetProductInfo Property \line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing a specific property of a product, or  a blank string if the required information could not be found. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetProductInfo({\i productCode, productAttribute})} \par{\i object}\line Required. The MsispyProfile object. \par{\i\b productCode}\line Required. The product about which information will be returned. \par{\i\b productAttribute}\line Required. The required property of the product (case-sensitive). Valid attributes are:\line \tab ProductName\line \tab ProductVersion\line \tab ProductCode\line \tab Manufacturer\line \tab SupportURL\line \tab SupportPhone\line \tab UserName\line \tab UserOrgName\line \tab ProductId\line \page #{\footnote HELPID_MsispyProfile_GetFeatureInfo} ${\footnote MsispyProfile.GetFeatureInfo} +{\footnote MsispyProfile:GetFeatureInfo} K{\footnote Msispy Automation: GetFeatureInfo} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetFeatureInfo Property \line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing a specific property of a feature, or  a blank string if the required information could not be found. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFeatureInfo({\i productCode, featureName, featureAttribute})} \par{\i object}\line Required. The MsispyProfile object. \par{\i\b productCode}\line Required. The product to which the feature belongs. \par{\i\b featureName}\line Required. The feature about which information will be returned. \par{\i\b featureAttribute}\line Required. The required property of the feature (case-sensitive). Valid attributes are:\line \tab Feature\line \tab Feature_Parent\line \tab Title\line \tab Description\line \tab Display\line \tab Level\line \tab Directory_Configurable\line \tab RunFromSource\line \page #{\footnote HELPID_MsispyProfile_QueryProductState} ${\footnote MsispyProfile.QueryProductState} +{\footnote MsispyProfile:QueryProductState} K{\footnote Msispy Automation: QueryProductState} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b QueryProductState Property \line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a numeric value that represents the install-state of a product on the  local system. The value returned is one of the following:\line \tab -6: configuration data corrupt\line \tab -5: installation suspended or in progress\line \tab -4: run from source, source is unavailable\line \tab -3: return buffer overflow\line \tab -2: invalid function argument\line \tab -1: unrecognized product or feature\line \tab  0: broken\line \tab  1: advertised\line \tab  2: uninstalled\line \tab  3: installed on local drive\line \tab  4: run from source, CD or net\line \tab  5: use default, local or source\line \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .QueryProductState({\i productCode})} \par{\i object}\line Required. The MsispyProfile object. \par{\i\b productCode}\line Required. The product about which information will be returned. \page #{\footnote HELPID_MsispyProfile_QueryFeatureState} ${\footnote MsispyProfile.QueryFeatureState} +{\footnote MsispyProfile:QueryFeatureState} K{\footnote Msispy Automation: QueryFeatureState} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b QueryFeatureState Property \line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a numeric value that represents the install-state of a feature on the  local system. The value returned is one of the following:\line \tab -6: configuration data corrupt\line \tab -5: installation suspended or in progress\line \tab -4: run from source, source is unavailable\line \tab -3: return buffer overflow\line \tab -2: invalid function argument\line \tab -1: unrecognized product or feature\line \tab  0: broken\line \tab  1: advertised\line \tab  2: uninstalled\line \tab  3: installed on local drive\line \tab  4: run from source, CD or net\line \tab  5: use default, local or source\line \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .QueryFeatureState({\i productCode, featureName})} \par{\i object}\line Required. The MsispyProfile object. \par{\i\b productCode}\line Required. The product to which the feature belongs. \par{\i\b featureName}\line Required. The feature about which information will be returned. \page #{\footnote HELPID_MsispyProfile_QueryComponentState} ${\footnote MsispyProfile.QueryComponentState} +{\footnote MsispyProfile:QueryComponentState} K{\footnote Msispy Automation: QueryComponentState} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b QueryComponentState Property \line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a numeric value that represents the install-state of a component on the  local system. The value returned is one of the following:\line \tab -6: configuration data corrupt\line \tab -5: installation suspended or in progress\line \tab -4: run from source, source is unavailable\line \tab -3: return buffer overflow\line \tab -2: invalid function argument\line \tab -1: unrecognized product or feature\line \tab  0: broken\line \tab  1: advertised\line \tab  2: uninstalled\line \tab  3: installed on local drive\line \tab  4: run from source, CD or net\line \tab  5: use default, local or source\line \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .QueryComponentState({\i productCode, componentGuid})} \par{\i object}\line Required. The MsispyProfile object. \par{\i\b componentGuid}\line Required. The component about which information will be returned. \page #{\footnote HELPID_MsispyProfile_GetFeatureUsage} ${\footnote MsispyProfile.GetFeatureUsage} +{\footnote MsispyProfile:GetFeatureUsage} K{\footnote Msispy Automation: GetFeatureUsage} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetFeatureUsage Property \line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns the usage-count of a feature on the local system. Returns 0 if the  information could not be obtained. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFeatureUsage({\i productCode, featureName})} \par{\i object}\line Required. The MsispyProfile object. \par{\i\b productCode}\line Required. The product to which the feature belongs. \par{\i\b featureName}\line Required. The feature about which information will be returned. \page #{\footnote HELPID_MsispyProfile_GetClientFromComponent} ${\footnote MsispyProfile.GetClientFromComponent} +{\footnote MsispyProfile:GetClientFromComponent} K{\footnote Msispy Automation: GetClientFromComponent} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetClientFromComponent Property \line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing product-code of a client-product of the component, or a blank   string if all the clients of the component have been enumerated. A 0-based index is used  to enumerate the clients one at a time. The component being used must be in the  profile, otherwise no clients are enumerated. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetClientFromComponent({\i componentGuid, clientIndex})} \par{\i object}\line Required. The MsispyProfile object. \par{\i\b componentGuid}\line Required. The component whose clients are to be enumerated, must be in the profile. \par{\i\b clientIndex}\line Required. The 0-based index used for enumeration. \page #{\footnote HELPID_MsispyProfile_GetFileFromComponent} ${\footnote MsispyProfile.GetFileFromComponent} +{\footnote MsispyProfile:GetFileFromComponent} K{\footnote Msispy Automation: GetFileFromComponent} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetFileFromComponent Property \line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the name of a file used by the component, or a blank   string if all the files of the component have been enumerated. A 0-based index is used  to enumerate the files one at a time. The component being used must be in the  profile, otherwise no files are enumerated. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFileFromComponent({\i componentGuid, fileIndex})} \par{\i object}\line Required. The MsispyProfile object. \par{\i\b componentGuid}\line Required. The component whose files are to be enumerated, must be in the profile. \par{\i\b fileIndex}\line Required. The 0-based index used for enumeration. \page #{\footnote HELPID_MsispyProfile_GetFileInfo} ${\footnote MsispyProfile.GetFileInfo} +{\footnote MsispyProfile:GetFileInfo} K{\footnote Msispy Automation: GetFileInfo} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetFileInfo Property \line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing a specific property of a file, or  a blank string if the required information could not be found. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFileInfo({\i productCode, componentGuid, fileName, fileAttribute})} \par{\i object}\line Required. The MsispyProfile object. \par{\i\b productCode}\line Required. The product to which the component belongs. \par{\i\b componentGuid}\line Required. The component to which the file belongs. \par{\i\b fileName}\line Required. The file about which information will be returned. \par{\i\b fileAttribute}\line Required. The required property of the file (case-sensitive). Valid attributes are:\line \tab FileTitle\line \tab FileSize\line \tab Version\line \tab Language\line \tab Attributes\line \tab Sequence\line \tab FileActualSize\line \tab FileCreated\line \tab FileModified\line \tab FileAccessed\line \tab FileStatus\line \page #{\footnote HELPID_MsispyProfile_GetComponentLocation} ${\footnote MsispyProfile.GetComponentLocation} +{\footnote MsispyProfile:GetComponentLocation} K{\footnote Msispy Automation: GetComponentLocation} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetComponentLocation Property \line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the full path to the keyfile of a component. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetComponentLocation({\i componentGuid})} \par{\i object}\line Required. The MsispyProfile object. \par{\i\b componentGuid}\line Required. The component about which information will be returned. \page #{\footnote HELPID_MsispyProfile_GetComponentPath} ${\footnote MsispyProfile.GetComponentPath} +{\footnote MsispyProfile:GetComponentPath} K{\footnote Msispy Automation: GetComponentPath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetComponentPath Property \line\tx360\tab\fs18\b0{\uldb MsispyProfile Object}{\v HELPID_MsispyProfile} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the full path to the keyfile of a component. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetComponentPath({\i productCode, componentGuid})} \par{\i object}\line Required. The MsispyDatabase object. \par{\i\b productCode}\line Required. The product to which the component belongs. \par{\i\b componentGuid}\line Required. The component about which information will be returned. \page #{\footnote HELPID_MsispyRegistry} ${\footnote MsispyRegistry Object} K{\footnote Msispy Automation: MsispyRegistry Object} +{\footnote Class:MsispyRegistry} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsispyRegistry Object \line\fs18\b0\tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 The registry object accesses the local registry on a machine to obtain information  about products installed by MSI.\par Before the MsispyRegistry object is released (by going out of scope or by setting the  object variable to Nothing), the {\uldb Close}{\v HELPID_MsispyRegistry_Close} method  must be called to release all handles. \par\li0{\b Properties}\par\li180 {\uldb GetProduct}{\v HELPID_MsispyRegistry_GetProduct}\line {\uldb GetFeatureFromProduct}{\v HELPID_MsispyRegistry_GetFeatureFromProduct}\line {\uldb GetProduct}{\v HELPID_MsispyRegistry_GetProduct}\line {\uldb GetFeatureFromProduct}{\v HELPID_MsispyRegistry_GetFeatureFromProduct}\line {\uldb GetComponent}{\v HELPID_MsispyRegistry_GetComponent}\line {\uldb GetComponentFromProduct}{\v HELPID_MsispyRegistry_GetComponentFromProduct}\line {\uldb GetComponentFromFeature}{\v HELPID_MsispyRegistry_GetComponentFromFeature}\line {\uldb GetComponentName}{\v HELPID_MsispyRegistry_GetComponentName}\line {\uldb GetProductInfo}{\v HELPID_MsispyRegistry_GetProductInfo}\line {\uldb GetFeatureInfo}{\v HELPID_MsispyRegistry_GetFeatureInfo}\line {\uldb QueryProductState}{\v HELPID_MsispyRegistry_QueryProductState}\line {\uldb QueryFeatureState}{\v HELPID_MsispyRegistry_QueryFeatureState}\line {\uldb QueryComponentState}{\v HELPID_MsispyRegistry_QueryComponentState}\line {\uldb GetFeatureUsage}{\v HELPID_MsispyRegistry_GetFeatureUsage}\line {\uldb GetClientFromComponent}{\v HELPID_MsispyRegistry_GetClientFromComponent}\line {\uldb GetFileFromComponent}{\v HELPID_MsispyRegistry_GetFileFromComponent}\line {\uldb GetFileInfo}{\v HELPID_MsispyRegistry_GetFileInfo}\line {\uldb GetComponentLocation}{\v HELPID_MsispyRegistry_GetComponentLocation}\line {\uldb GetComponentPath}{\v HELPID_MsispyRegistry_GetComponentPath}\line \par\li0{\b Methods}\par\li180 {\uldb Open}{\v HELPID_MsispyRegistry_Open}\line {\uldb Close}{\v HELPID_MsispyRegistry_Close}\line \page #{\footnote HELPID_MsispyRegistry_Open} ${\footnote MsispyRegistry.Open} +{\footnote MsispyRegistry.Open} K{\footnote Msispy Automation: Open} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Open Method \line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Opens a registry object. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Open()} \par{\i object}\line Required. The MsispyRegistry object. \page #{\footnote HELPID_MsispyRegistry_Close} ${\footnote MsispyRegistry.Close} +{\footnote MsispyRegistry.Close} K{\footnote Msispy Automation: Close} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Close Method \line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Closes a registry object. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Close()} \par{\i object}\line Required. The MsispyRegistry object. \page #{\footnote HELPID_MsispyRegistry_GetProduct} ${\footnote MsispyRegistry.GetProduct} +{\footnote MsispyRegistry:GetProduct} K{\footnote Msispy Automation: GetProduct} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetProduct Property \line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the product-code of a product in the registry, or  a blank string if all the products in the registry have been enumerated.  A 0-based index is used to enumerate the products one at a time. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetProduct({\i productIndex})} \par{\i object}\line Required. The MsispyRegistry object. \par{\i\b productIndex}\line Required. The 0-based index used for enumeration. \page #{\footnote HELPID_MsispyRegistry_GetFeatureFromProduct} ${\footnote MsispyRegistry.GetFeatureFromProduct} +{\footnote MsispyRegistry:GetFeatureFromProduct} K{\footnote Msispy Automation: GetFeatureFromProduct} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetFeatureFromProduct Property \line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the name of a feature of the product, or a blank string   if all the features of the product have been enumerated. A 0-based index is used  to enumerate the features one at a time. The product being used must be in the  registry, otherwise no features are enumerated. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFeatureFromProduct({\i productCode, featureIndex})} \par{\i object}\line Required. The MsispyRegistry object. \par{\i\b productCode}\line Required. The product whose features are to be enumerated, must be in the registry. \par{\i\b featureIndex}\line Required. The 0-based index used for enumeration. \page #{\footnote HELPID_MsispyRegistry_GetComponent} ${\footnote MsispyRegistry.GetComponent} +{\footnote MsispyRegistry:GetComponent} K{\footnote Msispy Automation: GetComponent} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetComponent Property \line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the GUID of a component in the registry, or  a blank string if all the components in the registry have been enumerated.  A 0-based index is used to enumerate the components one at a time. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetComponent({\i componentIndex})} \par{\i object}\line Required. The MsispyRegistry object. \par{\i\b componentIndex}\line Required. The 0-based index used for enumeration. \page #{\footnote HELPID_MsispyRegistry_GetComponentFromProduct} ${\footnote MsispyRegistry.GetComponentFromProduct} +{\footnote MsispyRegistry:GetComponentFromProduct} K{\footnote Msispy Automation: GetComponentFromProduct} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetComponentFromProduct Property \line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the GUID of a component of the product, or a blank string   if all the components of the product have been enumerated. A 0-based index is used  to enumerate the components one at a time. The product being used must be in the  registry, otherwise no components are enumerated. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetComponentFromProduct({\i productCode, componentIndex})} \par{\i object}\line Required. The MsispyRegistry object. \par{\i\b productCode}\line Required. The product whose components are to be enumerated, must be in the registry. \par{\i\b componentIndex}\line Required. The 0-based index used for enumeration. \page #{\footnote HELPID_MsispyRegistry_GetComponentFromFeature} ${\footnote MsispyRegistry.GetComponentFromFeature} +{\footnote MsispyRegistry:GetComponentFromFeature} K{\footnote Msispy Automation: GetComponentFromFeature} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetComponentFromFeature Property \line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the GUID of a component of the feature, or a blank string   if all the components of the feature have been enumerated. A 0-based index is used  to enumerate the components one at a time. The product in use must be in the  registry, otherwise no components are enumerated. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetComponentFromFeature({\i productCode, featureName, componentIndex})} \par{\i object}\line Required. The MsispyRegistry object. \par{\i\b productCode}\line Required. The product in use, must be in the registry. \par{\i\b featureName}\line Required. The feature whose components are to be enumerated. \par{\i\b componentIndex}\line Required. The 0-based index used for enumeration. \page #{\footnote HELPID_MsispyRegistry_GetComponentName} ${\footnote MsispyRegistry.GetComponentName} +{\footnote MsispyRegistry:GetComponentName} K{\footnote Msispy Automation: GetComponentName} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetComponentName Property \line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the name of a component whose GUID is passed in, or  a blank string if the required information could not be found. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetComponentName({\i componentGuid})} \par{\i object}\line Required. The MsispyRegistry object. \par{\i\b componentGuid}\line Required. The component whose name will be returned. \page #{\footnote HELPID_MsispyRegistry_GetProductInfo} ${\footnote MsispyRegistry.GetProductInfo} +{\footnote MsispyRegistry:GetProductInfo} K{\footnote Msispy Automation: GetProductInfo} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetProductInfo Property \line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing a specific property of a product, or  a blank string if the required information could not be found. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetProductInfo({\i productCode, productAttribute})} \par{\i object}\line Required. The MsispyRegistry object. \par{\i\b productCode}\line Required. The product about which information will be returned. \par{\i\b productAttribute}\line Required. The required property of the product (case-sensitive). Valid attributes are:\line \tab ProductName\line \tab ProductVersion\line \tab ProductCode\line \tab Manufacturer\line \tab SupportURL\line \tab SupportPhone\line \tab UserName\line \tab UserOrgName\line \tab ProductId\line \page #{\footnote HELPID_MsispyRegistry_GetFeatureInfo} ${\footnote MsispyRegistry.GetFeatureInfo} +{\footnote MsispyRegistry:GetFeatureInfo} K{\footnote Msispy Automation: GetFeatureInfo} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetFeatureInfo Property \line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing a specific property of a feature, or  a blank string if the required information could not be found. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFeatureInfo({\i productCode, featureName, featureAttribute})} \par{\i object}\line Required. The MsispyRegistry object. \par{\i\b productCode}\line Required. The product to which the feature belongs. \par{\i\b featureName}\line Required. The feature about which information will be returned. \par{\i\b featureAttribute}\line Required. The required property of the feature (case-sensitive). Valid attributes are:\line \tab Feature\line \tab Feature_Parent\line \tab Title\line \tab Description\line \tab Display\line \tab Level\line \tab Directory_Configurable\line \tab RunFromSource\line \page #{\footnote HELPID_MsispyRegistry_QueryProductState} ${\footnote MsispyRegistry.QueryProductState} +{\footnote MsispyRegistry:QueryProductState} K{\footnote Msispy Automation: QueryProductState} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b QueryProductState Property \line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a numeric value that represents the install-state of a product on the  local system. The value returned is one of the following:\line \tab -6: configuration data corrupt\line \tab -5: installation suspended or in progress\line \tab -4: run from source, source is unavailable\line \tab -3: return buffer overflow\line \tab -2: invalid function argument\line \tab -1: unrecognized product or feature\line \tab  0: broken\line \tab  1: advertised\line \tab  2: uninstalled\line \tab  3: installed on local drive\line \tab  4: run from source, CD or net\line \tab  5: use default, local or source\line \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .QueryProductState({\i productCode})} \par{\i object}\line Required. The MsispyRegistry object. \par{\i\b productCode}\line Required. The product about which information will be returned. \page #{\footnote HELPID_MsispyRegistry_QueryFeatureState} ${\footnote MsispyRegistry.QueryFeatureState} +{\footnote MsispyRegistry:QueryFeatureState} K{\footnote Msispy Automation: QueryFeatureState} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b QueryFeatureState Property \line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a numeric value that represents the install-state of a feature on the  local system. The value returned is one of the following:\line \tab -6: configuration data corrupt\line \tab -5: installation suspended or in progress\line \tab -4: run from source, source is unavailable\line \tab -3: return buffer overflow\line \tab -2: invalid function argument\line \tab -1: unrecognized product or feature\line \tab  0: broken\line \tab  1: advertised\line \tab  2: uninstalled\line \tab  3: installed on local drive\line \tab  4: run from source, CD or net\line \tab  5: use default, local or source\line \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .QueryFeatureState({\i productCode, featureName})} \par{\i object}\line Required. The MsispyRegistry object. \par{\i\b productCode}\line Required. The product to which the feature belongs. \par{\i\b featureName}\line Required. The feature about which information will be returned. \page #{\footnote HELPID_MsispyRegistry_QueryComponentState} ${\footnote MsispyRegistry.QueryComponentState} +{\footnote MsispyRegistry:QueryComponentState} K{\footnote Msispy Automation: QueryComponentState} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b QueryComponentState Property \line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a numeric value that represents the install-state of a component on the  local system. The value returned is one of the following:\line \tab -6: configuration data corrupt\line \tab -5: installation suspended or in progress\line \tab -4: run from source, source is unavailable\line \tab -3: return buffer overflow\line \tab -2: invalid function argument\line \tab -1: unrecognized product or feature\line \tab  0: broken\line \tab  1: advertised\line \tab  2: uninstalled\line \tab  3: installed on local drive\line \tab  4: run from source, CD or net\line \tab  5: use default, local or source\line \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .QueryComponentState({\i productCode, componentGuid})} \par{\i object}\line Required. The MsispyRegistry object. \par{\i\b productCode}\line Required. The product to which the component belongs. \par{\i\b componentGuid}\line Required. The component about which information will be returned. \page #{\footnote HELPID_MsispyRegistry_GetFeatureUsage} ${\footnote MsispyRegistry.GetFeatureUsage} +{\footnote MsispyRegistry:GetFeatureUsage} K{\footnote Msispy Automation: GetFeatureUsage} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetFeatureUsage Property \line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns the usage-count of a feature on the local system. Returns 0 if the  information could not be obtained. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFeatureUsage({\i productCode, featureName})} \par{\i object}\line Required. The MsispyRegistry object. \par{\i\b productCode}\line Required. The product to which the feature belongs. \par{\i\b featureName}\line Required. The feature about which information will be returned. \page #{\footnote HELPID_MsispyRegistry_GetClientFromComponent} ${\footnote MsispyRegistry.GetClientFromComponent} +{\footnote MsispyRegistry:GetClientFromComponent} K{\footnote Msispy Automation: GetClientFromComponent} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetClientFromComponent Property \line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing product-code of a client-product of the component, or a blank   string if all the clients of the component have been enumerated. A 0-based index is used  to enumerate the clients one at a time. The component being used must be in the  registry, otherwise no clients are enumerated. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetClientFromComponent({\i componentGuid, clientIndex})} \par{\i object}\line Required. The MsispyRegistry object. \par{\i\b componentGuid}\line Required. The component whose clients are to be enumerated, must be in the registry. \par{\i\b clientIndex}\line Required. The 0-based index used for enumeration. \page #{\footnote HELPID_MsispyRegistry_GetFileFromComponent} ${\footnote MsispyRegistry.GetFileFromComponent} +{\footnote MsispyRegistry:GetFileFromComponent} K{\footnote Msispy Automation: GetFileFromComponent} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetFileFromComponent Property \line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the name of a file used by the component, or a blank   string if all the files of the component have been enumerated. A 0-based index is used  to enumerate the files one at a time. The component being used must be in the  registry, otherwise no files are enumerated. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFileFromComponent({\i componentGuid, fileIndex})} \par{\i object}\line Required. The MsispyRegistry object. \par{\i\b componentGuid}\line Required. The component whose files are to be enumerated, must be in the registry. \par{\i\b fileIndex}\line Required. The 0-based index used for enumeration. \page #{\footnote HELPID_MsispyRegistry_GetFileInfo} ${\footnote MsispyRegistry.GetFileInfo} +{\footnote MsispyRegistry:GetFileInfo} K{\footnote Msispy Automation: GetFileInfo} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetFileInfo Property \line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing a specific property of a file, or  a blank string if the required information could not be found. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFileInfo({\i productCode, componentGuid, fileName, fileAttribute})} \par{\i object}\line Required. The MsispyRegistry object. \par{\i\b productCode}\line Required. The product to which the component belongs. \par{\i\b componentGuid}\line Required. The component to which the file belongs. \par{\i\b fileName}\line Required. The file about which information will be returned. \par{\i\b fileAttribute}\line Required. The required property of the file (case-sensitive). Valid attributes are:\line \tab FileTitle\line \tab FileSize\line \tab Version\line \tab Language\line \tab Attributes\line \tab Sequence\line \tab FileActualSize\line \tab FileCreated\line \tab FileModified\line \tab FileAccessed\line \tab FileStatus\line \page #{\footnote HELPID_MsispyRegistry_GetComponentLocation} ${\footnote MsispyRegistry.GetComponentLocation} +{\footnote MsispyRegistry:GetComponentLocation} K{\footnote Msispy Automation: GetComponentLocation} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetComponentLocation Property \line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the full path to the keyfile of a component. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetComponentLocation({\i componentGuid})} \par{\i object}\line Required. The MsispyRegistry object. \par{\i\b componentGuid}\line Required. The component about which information will be returned. \page #{\footnote HELPID_MsispyRegistry_GetComponentPath} ${\footnote MsispyRegistry.GetComponentPath} +{\footnote MsispyRegistry:GetComponentPath} K{\footnote Msispy Automation: GetComponentPath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetComponentPath Property \line\tx360\tab\fs18\b0{\uldb MsispyRegistry Object}{\v HELPID_MsispyRegistry} \tx3000\tab{\uldb Msispy Objects}{\v Msispy_Objects} \par}\li180 Returns a string containing the full path to the keyfile of a component. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetComponentPath({\i productCode, componentGuid})} \par{\i object}\line Required. The MsispyDatabase object. \par{\i\b productCode}\line Required. The product to which the component belongs. \par{\i\b componentGuid}\line Required. The component about which information will be returned. \page
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\help\objects.rtf ===
{\rtf1\ansi {\fonttbl{\f0\fswiss Arial;}{\f1\fmodern Courier New;}} {\colortbl;} \fs20 #{\footnote Msi_Objects} ${\footnote Msi Objects} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Microsoft Installer Objects \par}\li180 {\uldb MsiAuto object}{\v MsiAuto_Object}\line {\uldb MsiConfigurationManager object}{\v MsiConfigurationManager_Object}\line {\uldb MsiControl object}{\v MsiControl_Object}\line {\uldb MsiCursor object}{\v MsiCursor_Object}\line {\uldb MsiData object}{\v MsiData_Object}\line {\uldb MsiDatabase object}{\v MsiDatabase_Object}\line {\uldb MsiDialog object}{\v MsiDialog_Object}\line {\uldb MsiDialogHandler object}{\v MsiDialogHandler_Object}\line {\uldb MsiDirectoryManager object}{\v MsiDirectoryManager_Object}\line {\uldb MsiEngine object}{\v MsiEngine_Object}\line {\uldb MsiEvent object}{\v MsiEvent_Object}\line {\uldb MsiFileCopy object}{\v MsiFileCopy_Object}\line {\uldb MsiFilePatch object}{\v MsiFilePatch_Object}\line {\uldb MsiHandler object}{\v MsiHandler_Object}\line {\uldb MsiMalloc object}{\v MsiMalloc_Object}\line {\uldb MsiMessage object}{\v MsiMessage_Object}\line {\uldb MsiPath object}{\v MsiPath_Object}\line {\uldb MsiRecord object}{\v MsiRecord_Object}\line {\uldb MsiRegKey object}{\v MsiRegKey_Object}\line {\uldb MsiSelectionManager object}{\v MsiSelectionManager_Object}\line {\uldb MsiServices object}{\v MsiServices_Object}\line {\uldb MsiServer object}{\v MsiServer_Object}\line {\uldb MsiStorage object}{\v MsiStorage_Object}\line {\uldb MsiStream object}{\v MsiStream_Object}\line {\uldb MsiString object}{\v MsiString_Object}\line {\uldb MsiSummaryInfo object}{\v MsiSummaryInfo_Object}\line {\uldb MsiTable object}{\v MsiTable_Object}\line {\uldb MsiView object}{\v MsiView_Object}\line {\uldb MsiVolume object}{\v MsiVolume_Object}\line {\uldb Methods common to all objects}{\v MsiBase_Object}\line \page #{\footnote Object_Hierarchy} ${\footnote Object Hierarchy} K{\footnote Hierarchy} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Microsoft Installer Object Hierarchy \par}\li180 All objects are derived ultimately from a common base class.  C++ objects are COM classes derived from the IUnknown interface.  Automation objects (except MsiAuto) are wrappers for C++ COM pointers, are derived from  an internal class, CAutoBase, and are exposed as IDispatch interfaces. Where multiple  interfaces are implemented by the same object, they are joined by a plus sign, "+".  Objects derived from a base class are shown as indented under that base object. \par\tx200\li240\fi-180 {\b Objects Created from Module Class Factories} {\line\uldb MsiAuto}{\v MsiAuto_Object} {\line\uldb MsiServices}{\v MsiServices_Object} {\line\uldb MsiMessage}{\v MsiMessage_Object} {\line\tab\uldb MsiHandler}{\v MsiHandler_Object} {\line\tab\uldb MsiEngine}{\v MsiEngine_Object}  + {\uldb MsiSelectionManager}{\v MsiSelectionManager_Object}  + {\uldb MsiDirectoryManager}{\v MsiDirectoryManager_Object} {\line\uldb MsiConfigurationManager}{\v MsiConfigurationManager_Object} {\line\uldb MsiServer object}{\v MsiServer_Object} \par\tx200\li240\fi-180 {\b Objects Created by Methods of Other Objects} \line{\uldb MsiData}{\v MsiData_Object} \line\tab{\uldb MsiString}{\v MsiString_Object} \line\tab {\uldb MsiTable}{\v MsiTable_Object} \line\tab{\uldb MsiStream}{\v MsiStream_Object} \line\tab{\uldb MsiDialog}{\v MsiDialog_Object}  + {\uldb MsiEvent}{\v MsiEvent_Object} \line\tab{\uldb MsiControl}{\v MsiControl_Object} \line{\uldb MsiMalloc}{\v MsiMalloc_Object} \line{\uldb MsiRecord}{\v MsiRecord_Object} \line{\uldb MsiVolume}{\v MsiVolume_Object} \line{\uldb MsiPath}{\v MsiPath_Object} \line{\uldb MsiFileCopy}{\v MsiFileCopy_Object} \line{\uldb MsiFilePatch}{\v MsiFilePatch_Object} \line{\uldb MsiRegKey}{\v MsiRegKey_Object} \line{\uldb MsiDatabase}{\v MsiDatabase_Object} \line{\uldb MsiView}{\v MsiView_Object} \line{\uldb MsiCursor}{\v MsiCursor_Object} \line{\uldb MsiStorage}{\v MsiStorage_Object} \line{\uldb MsiSummaryInfo}{\v MsiSummaryInfo_Object} \page #{\footnote MsiBase_Object} ${\footnote MsiBase Object} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Methods and Properties Common to all Objects \par}\li180 These methods are inherited into all automation classes, and are provided  to allow querying of the underlying COM interfaces associated with each object.  A common need is to be able to convert an {\uldb MsiData object}{\v MsiData_Object}  stored in a record or database to its derived object type. \par\li0{\b Properties}\par\li180 {\uldb HasInterface}{\v MsiBase_HasInterface}\line {\uldb RefCount}{\v MsiBase_RefCount} \par\li0{\b Methods}\par\li180 {\uldb GetInterface}{\v MsiBase_GetInterface} \par\fi0\li0{\b Remarks}\par\li180 These items don't apply to the MsiAuto object. \page #{\footnote MsiBase_HasInterface} ${\footnote MsiBase.HasInterface} +{\footnote MsiBase:HasInterface} K{\footnote HasInterface} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b HasInterface Property \line\tx360\tab\fs18\b0{\uldb MsiBase Object}{\v MsiBase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A boolean indicating whether the underlying COM object supports the indicated interface. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .HasInterface({\i iid})} \par{\i object}\line Required. The MsiBase object. \par{\i\b iid}\line Required. Integer representing the interface ID to be queried, {\f1 iidMsi???}.    Constants are defined in the type library for the Installer interfaces. \par\fi0\li0{\b Remarks}\par\li180 This property doesn't apply to the MsiAuto object. \page #{\footnote MsiBase_RefCount} ${\footnote MsiBase.RefCount} +{\footnote MsiBase:RefCount} K{\footnote RefCount} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RefCount Property \line\tx360\tab\fs18\b0{\uldb MsiBase Object}{\v MsiBase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The reference count of the underlying COM object. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RefCount} \par{\i object}\line Required. The MsiBase object. \par\fi0\li0{\b Remarks}\par\li180 This the reference count of the C++ implementation object,  not of the automation IDispatch wrapper object. The automation wrapper  will account for one reference count, unless the underlying object is null,  in which case the reference count will be zero. The preceeding happens  when an null MsiData object is accessed from a database cursor. \page #{\footnote MsiBase_GetInterface} ${\footnote MsiBase.GetInterface} +{\footnote MsiBase:GetInterface} K{\footnote GetInterface} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetInterface Method \line\tx360\tab\fs18\b0{\uldb MsiBase Object}{\v MsiBase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns a new object containing the requested interface,  by requesting the interface from the underlying COM object.  An error will be generated if the interface cannot be obtained. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetInterface({\i iid})} \par{\i object}\line Required. The MsiBase object. \par{\i\b iid}\line Required. Integer representing the interface ID to be queried, {\f1 iidMsi???}.    Constants are defined in the type library for the Installer interfaces. \par\fi0\li0{\b Remarks}\par\li180 This method doesn't apply to the MsiAuto object. \page #{\footnote MsiAuto_Object} ${\footnote MsiAuto Object} K{\footnote MsiAuto} +{\footnote Class:MsiAuto} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiAuto Object \par}\li180 An MsiAuto object must be initially created in order to load the automation  support that is required in order to access the Microsoft Installer components  through OLE automation. This object provides wrappers to create the top level  objects and access their methods. \par\li0{\b Methods}\par\li180 {\uldb CreateServices}{\v MsiAuto_CreateServices}\line {\uldb CreateEngine}{\v MsiAuto_CreateEngine}\line {\uldb CreateHandler}{\v MsiAuto_CreateHandler}\line {\uldb CreateMessageHandler}{\v MsiAuto_CreateMessageHandler}\line {\uldb CreateConfigurationManager}{\v MsiAuto_CreateConfigurationManager}\line {\uldb OpcodeName}{\v MsiAuto_OpcodeName}\line {\uldb ShowAsserts}{\v MsiAuto_ShowAsserts}\line {\uldb SetDBCSSimulation}{\v MsiAuto_SetDBCSSimulation}\line {\uldb AssertNoObjects}{\v MsiAuto_AssertNoObjects}\line {\uldb SetRefTracking}{\v MsiAuto_SetRefTracking}\line \page #{\footnote MsiAuto_CreateServices} ${\footnote MsiAuto.CreateServices} +{\footnote MsiAuto:CreateServices} K{\footnote CreateServices} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateServices Method \line\tx360\tab\fs18\b0{\uldb MsiAuto Object}{\v MsiAuto_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This methods loads the Msi (kernel) library and creates a MsiServices object. If  no parameter is supplied, the method attempts to load "Msi.DLL" from the  current directory. \page #{\footnote MsiAuto_CreateEngine} ${\footnote MsiAuto.CreateEngine} +{\footnote MsiAuto:CreateEngine} K{\footnote CreateEngine} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateEngine Method \line\tx360\tab\fs18\b0{\uldb MsiAuto Object}{\v MsiAuto_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This methods loads the Msi (kernel) library and creates a MsiEngine object.       If no engine parameter is supplied, the method   attempts to load "Msi.DLL" from the current directory. \page #{\footnote MsiAuto_CreateHandler} ${\footnote MsiAuto.CreateHandler} +{\footnote MsiAuto:CreateHandler} K{\footnote CreateHandler} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateHandler Method \line\tx360\tab\fs18\b0{\uldb MsiAuto Object}{\v MsiAuto_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This methods loads the message handler library and creates a MsiHandler  object. The kernel library (msi.dll) should be loaded first.  If no handler library parameter is supplied, the method attempts to load  "MsiHnd.DLL" from the current directory. \page #{\footnote MsiAuto_CreateMessageHandler} ${\footnote MsiAuto.CreateMessageHandler} +{\footnote MsiAuto:CreateMessageHandler} K{\footnote CreateMessageHandler} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateMessageHandler Method \line\tx360\tab\fs18\b0{\uldb MsiAuto Object}{\v MsiAuto_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This methods loads the given library and creates a MsiMessage  object. The kernel library (msi.dll) should be loaded first.  If no handler library parameter is supplied, the method uses the registered  kernel DLL. \page #{\footnote MsiAuto_CreateConfigurationManager} ${\footnote MsiAuto.CreateConfigurationManager} +{\footnote MsiAuto:CreateConfigurationManager} K{\footnote CreateConfigurationManager} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateConfigurationManager Method \line\tx360\tab\fs18\b0{\uldb MsiAuto Object}{\v MsiAuto_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This methods creates an MsiConfigurationManager object. Currently this is   stored in the kernel library. See {\uldb CreateEngine}{\v MsiAuto_CreateEngine}  for more information. \page #{\footnote MsiAuto_CreateExecutor} ${\footnote MsiAuto.CreateExecutor} +{\footnote MsiAuto:CreateExecutor} K{\footnote CreateExecutor} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateExecutor Method \line\tx360\tab\fs18\b0{\uldb MsiAuto Object}{\v MsiAuto_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This methods creates an {\uldb MsiExecute}{\v MsiExecute_Object} object.  Currently this is stored in the kernel library.  See {\uldb CreateEngine}{\v MsiAuto_CreateEngine} for more information. \page #{\footnote MsiAuto_OpcodeName} ${\footnote MsiAuto.OpcodeName} +{\footnote MsiAuto:OpcodeName} K{\footnote OpcodeName} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b OpcodeName Property \line\tx360\tab\fs18\b0{\uldb MsiAuto Object}{\v MsiAuto_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \par}\li180 The enumerated name for the numeric opcode value. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .OpcodeName({\i opcode})} \par{\i object}\line Required. The MsiAuto object. \par{\i\b opcode}\line Required. The numeric value of the opcode. \par\fi0\li0{\b Remarks}\par\li180 The enumeration is generated from the "opcodes.h" header file.  Undefined opcodes will cause an error to be generated. \page #{\footnote MsiAuto_ShowAsserts} ${\footnote MsiAuto.ShowAsserts} +{\footnote MsiAuto:ShowAsserts} K{\footnote ShowAsserts} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ShowAsserts Method \line\tx360\tab\fs18\b0{\uldb MsiAuto Object}{\v MsiAuto_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \par}\li180 \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ShowAsserts({\i Flag})} \par{\i object}\line Required. The MsiAuto object. \par{\i\b Flag}\line Required. Should be False to hide asserts and True to show asserts. \par\fi0\li0{\b Remarks}\par\li180 This method sets an internal flag in each of the standard Installer component DLLs  to control display of assert messages,  and will be functional only for component objects that have already been created.  NOTE: Only available in DEBUG components, which support the IMsiDebug interface. \page #{\footnote MsiAuto_SetDBCSSimulation} ${\footnote MsiAuto.SetDBCSSimulation} +{\footnote MsiAuto:SetDBCSSimulation} K{\footnote SetDBCSSimulation} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SetDBCSSimulation Method \line\tx360\tab\fs18\b0{\uldb MsiAuto Object}{\v MsiAuto_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \par}\li180 \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SetDBCSSimulation({\i leadByte})} \par{\i object}\line Required. The MsiAuto object. \par{\i\b leadByte}\line Required. The numeric value of a character that will be recognized by the  MsiString object implementation as the lead byte of a double-byte sequence. \par\fi0\li0{\b Remarks}\par\li180 This method is exposed to facilitate testing of the DBCS string handling  on a non-DBCS system.  NOTE: Only available in DEBUG components, which support the IMsiDebug interface \page #{\footnote MsiAuto_AssertNoObjects} ${\footnote MsiAuto.AssertNoObjects} +{\footnote MsiAuto:AssertNoObjects} K{\footnote AssertNoObjects} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b AssertNoObjects Method \line\tx360\tab\fs18\b0{\uldb MsiAuto Object}{\v MsiAuto_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \par}\li180 \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .AssertNoObjects} \par{\i object}\line Required. The MsiAuto object. \par\fi0\li0{\b Remarks}\par\li180 This asserts that none of the objects being reference tracked are still allocated.  It is for debugging purposes from VB in order to help track down reference counting problems.  See {\uldb Reference Tracking}{\v Coding_RefTracking}   for more information on reference tracking in Darwin.  NOTE: Only available in DEBUG components, which support the IMsiDebug interface \page #{\footnote MsiAuto_SetRefTracking} ${\footnote MsiAuto.SetRefTracking} +{\footnote MsiAuto:SetRefTracking} K{\footnote SetRefTracking} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SetRefTracking Method \line\tx360\tab\fs18\b0{\uldb MsiAuto Object}{\v MsiAuto_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \par}\li180 \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SetRefTracking({\i iid}, {\i fTrack})} \par{\i object}\line Required. The MsiAuto object. \par{\i\b iid}\line Required. The iid of the class you wish to turn reference tracking on or off. \par{\i\b fTrack}\line Required. True or false indicating whether to turn tracking on or off. \par\fi0\li0{\b Remarks}\par\li180 This allows you to turn reference tracking on or off for objects created after this point.   It does not affect objects already created when the call is made. See {\uldb Reference Tracking}{\v Coding_RefTracking}   for more information on reference tracking in Darwin.  NOTE: Only available in DEBUG components, which support the IMsiDebug interface \page #{\footnote MsiMessage_Object} ${\footnote MsiMessage Object} K{\footnote MsiMessage} +{\footnote Class:MsiMessage} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiMessage Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The MsiMessage object is an independent object that supports simple UI:  error handling and progress indications. It is a base class of MsiEngine  and MsiHandler, which support more extensive UI control. Objects supporting  this interface can be passed to the install server to receive notifications. \par\li0{\b Methods}\par\li180 {\uldb Message}{\v MsiMessage_Message}\line \page #{\footnote MsiMessage_Message} ${\footnote MsiMessage.Message} +{\footnote MsiMessage:Message} K{\footnote Message} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Message Method \line\tx360\tab\fs18\b0{\uldb MsiMessage Object}{\v MsiMessage_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Accepts a message type and parameters and returns a result code. This is  called by installer components to request UI handling and to provide progress notifications.  It is implemented by UI handlers, and also by MsiEngine which intercepts it to supply  formatting strings and logging services. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Message({\i kind, record})} \par{\i object}\line Required. The MsiMessage object, or a derived object such as MsiHandler or MsiEngine \par{\i\b kind}\line Required. The message type, one of imtEnum, described below, combined with button styles where appropriate \par{\i\b record}\line Required. An MsiRecord object containing message-specific field. \par\pard{\b Message Types}\par\li180 {\f1 imtOutOfMemory  } out of memory, may be called recursively\line {\f1 imtError        } error message,   (1) is imsg/idbg error code\line {\f1 imtWarning      } warning message, (1) is imsg/idbg code, not fatal\line {\f1 imtUser         } user request,    (1) is imsg/idbg code\line {\f1 imtInfo         } informative message for log, not to be displayed\line {\f1 imtDiagnostic   } debug notification, displayed only if no log\line {\f1 imtCommonData   } info for UI: (1)=message type (2,...) arguments\line       {\b imtCommonData message types:}\line {\f1 (1)=1     (2)=}language id\line {\f1 (1)=2     (2)=}dialog caption\line {\f1 (1)=3     (2)=}boolean, show/hide cancel button\line {\f1 imtActionStart  } start of action, (1) action name, (2) description\line {\f1 imtActionData   } data associated with individual action item\line {\f1 imtProgress     } progress gauge info, (1) units so far, (2) total {\f1 imtActionDone   } end of actions, dismiss modeless progress dialog\line \par\pard{\b MessageBox Button Styles} - identical to Win32 definitions\par\li180 {\f1 imtOk               }  MB_OK  (default)\line {\f1 imtOkCancel         }  MB_OKCANCEL\line {\f1 imtAbortRetryIgnore }  MB_ABORTRETRYIGNORE\line {\f1 imtYesNoCancel      }  MB_YESNOCANCEL\line {\f1 imtYesNo            }  MB_YESNO\line {\f1 imtRetryCancel      }  MB_RETRYCANCEL \par\pard{\b MessageBox Icon Type}- identical to Win32 definitions, default is none\par\li180 {\f1 imtIconError        }  MB_ICONERROR\line {\f1 imtIconQuestion     }  MB_ICONQUESTION\line {\f1 imtIconWarning      }  MB_ICONWARNING\line {\f1 imtIconInfo         }  MB_ICONINFORMATION \par\pard{\b Default Button} - identical to Win32 definitions, default is first\par\li180 {\f1 imtDefault1         }  MB_DEFBUTTON1\line {\f1 imtDefault2         }  MB_DEFBUTTON2\line {\f1 imtDefault3         }  MB_DEFBUTTON3 \par\pard{\b Return Codes} - mapped to Win32 button events\par\li180 {\f1 imsError  = -1  } error in message handler {\f1 imsNone   =  0  } no action taken\line {\f1 imsOk     =  1  } IDOK\line {\f1 imsCancel =  2  } IDCANCEL\line {\f1 imsAbort  =  3  } IDABORT\line {\f1 imsRetry  =  4  } IDRETRY\line {\f1 imsIgnore =  5  } IDIGNORE\line {\f1 imsYes    =  6  } IDYES\line {\f1 imsNo     =  7  } IDNO\line \page #{\footnote MsiEngine_Object} ${\footnote MsiEngine Object} K{\footnote MsiEngine} +{\footnote Class:MsiEngine} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiEngine Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The MsiEngine object controls the installation process.  It relies on an MsiServices object to perform all of the operating system functions.  It opens the install database, which contains the installation tables and data.  It defers all error handling and user interactions to the MsiHandler object.  The MsiEngine object is associated with a standard set of action functions,  each which performs particular operations on data from one or more tables.  Additional custom actions may be added for particular product installations.  The basic engine function is a sequencer which fetches sequential records from  a designated "sequence" table (such as {\uldb InstallSequence}{\v _msi_InstallSequence_Table@msi.hlp}),  evaluates any specified condition expression and executes the designated action. Actions not  recognized by the engine are deferred to the MsiHandler object for processing. \par\li0{\b Properties}\par\li180 {\uldb ConfigurationServer}{\v MsiEngine_ConfigurationServer}\line {\uldb Database}{\v MsiEngine_Database}\line {\uldb DirectoryManager}{\v MsiEngine_DirectoryManager}\line {\uldb Handler}{\v MsiEngine_Handler}\line {\uldb Property}{\v MsiEngine_Property}\line {\uldb SelectionManager}{\v MsiEngine_SelectionManager}\line {\uldb Services}{\v MsiEngine_Services}\line \par\li0{\b Methods}\par\li180 {\uldb DoAction}{\v MsiEngine_DoAction}\line {\uldb EvaluateCondition}{\v MsiEngine_EvaluateCondition}\line {\uldb FormatText}{\v MsiEngine_FormatText}\line {\uldb Initialize}{\v MsiEngine_Initialize}\line {\uldb Message}{\v MsiEngine_Message}\line {\uldb SelectLanguage}{\v MsiEngine_SelectLanguage}\line {\uldb OpenView}{\v MsiEngine_OpenView}\line {\uldb Terminate}{\v MsiEngine_Terminate}\line {\uldb ResolveFolderProperty}{\v MsiEngine_ResolveFolderProperty}\line {\uldb Sequence}{\v MsiEngine_Sequence}\line {\uldb ExecuteRecord}{\v MsiEngine_ExecuteRecord}\line {\uldb ValidateProductID}{\v MsiEngine_ValidateProductID}\line {\uldb GetMode}{\v MsiEngine_GetMode}\line {\uldb SetMode}{\v MsiEngine_SetMode}\line \par\fi0\li0{\b Engine Initialization Processing}\par\li500\fi-320 The following methods and properties are normally call by the loader: \line Initialize method - initializes components and database using values passed in arguments. \line DoAction method - commences installation by calling a top level action, typically "Install". \line Terminate method - releases all data and references held by the engine. \page #{\footnote MsiEngine_Services} ${\footnote MsiEngine.Services} +{\footnote MsiEngine:Services} K{\footnote SERVICES} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Services Property \line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The {\uldb MsiServices}{\v MsiServices_Object} object used by  the engine, obtained from the MsiServer object when the engine was created. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Services} \par{\i object}\line Required. The MsiEngine object. \page #{\footnote MsiEngine_ConfigurationServer} ${\footnote MsiEngine.ConfigurationServer} +{\footnote MsiEngine:ConfigurationServer} K{\footnote SERVICES} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ConfigurationServer Property \line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The MsiServer object used by the engine, created when the engine object  was created. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ConfigurationServer} \par{\i object}\line Required. The MsiEngine object. \page #{\footnote MsiEngine_Handler} ${\footnote MsiEngine.Handler} +{\footnote MsiEngine:Handler} K{\footnote HANDLER} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Handler Property \line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The MsiHandler object used by the engine. This is initially set by the  {\uldb Initialize}{\v MsiEngine_Initialize} method of MsiEngine, to  either the default handler in the engine, or the the external handler  component, depending upon the UI level supplied to Initialize. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Handler} \par{\i object}\line Required. The MsiEngine object. \page #{\footnote MsiEngine_Database} ${\footnote MsiEngine.Database} +{\footnote MsiEngine:Database} K{\footnote DATABASE} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Database Property \line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The name of the primary MsiDatabase object used by the engine.  This is set during the {\uldb Initialize}{\v MsiEngine_Initialize} method of MsiEngine. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Database} \par{\i object}\line Required. The MsiEngine object. \page #{\footnote MsiEngine_Property} ${\footnote MsiEngine.Property} +{\footnote MsiEngine:Property} K{\footnote Property} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Property Property \line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The string value of a named Installer property, as maintained by the MsiEngine  object in the in-memory Property table, or if prefixed with a percent sign ({\f1\b %}),  the value of a system environment variable for the current process.  Either string or integer values may be supplied.  A non-existent property or environment variable is equivalent to its value being null.  Read-write. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Property({\i name})} \par{\i object}\line Required. The MsiEngine object. \par{\i\b name}\line Required. The case-sensitive name of a property, or  a case-insensitive name of an environment variable prefixed by a percent sign. \par\fi0\li0{\b Remarks}\par\li180 For a list of common properties, see {\uldb Property Summary}{\v Property_Contents}. \page #{\footnote MsiEngine_SelectionManager} ${\footnote MsiEngine.SelectionManager} +{\footnote MsiEngine:SelectionManager} K{\footnote SelectionManager} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SelectionManager Property \line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The {\uldb MsiSelectionManager}{\v MsiSelectionManager_Object} object associated with the engine. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SelectionManager} \par{\i object}\line Required. The MsiEngine object. \page #{\footnote MsiEngine_DirectoryManager} ${\footnote MsiEngine.DirectoryManager} +{\footnote MsiEngine:DirectoryManager} K{\footnote DirectoryManager} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DirectoryManager Property \line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The {\uldb MsiDirectoryManager}{\v MsiDirectoryManager_Object} object associated with the engine. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .DirectoryManager} \par{\i object}\line Required. The MsiEngine object. \page #{\footnote MsiEngine_FormatText} ${\footnote MsiEngine.FormatText} +{\footnote MsiEngine:FormatText} K{\footnote FormatText} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FormatText Method \line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Takes a string and returns a string where the property names are resolved.\line If a substring of the form [propertyname] is encountered, it is replaced by the value of the property.\line The square brackets can be iterated, the property names are resolved from inside out.\line If a substring of the form [%environmentvariable] is found, the value of the environment variable is substituted. \line If a substring of the form [#filekey] is found, it is replaced by the full path of the file, with the value {\i filekey} used as a key into the {\b File} table. \line If a substring of the form [$componentkey] is found, it is replaced by the install directory of the component, with the value {\i componentkey} used as a key into the {\b Component} table taking into account the Component.Action column state. If the component is selected to be installed locally it is replaced by the target directory, if the component is selected for run from source it is replaced by the source directory, and if the component is not selected or missing it is replaced by a null string.\line If a substring of the form [\char] is found, it is replaced by the character without any further processing. Only the first character after the backslash is kept, everything else is removed.  If a part of the string is enclosed in \{ \}, and contains no square brackets, it is left unchanged, including the curly braces.\line If a part of the string is enclosed in \{ \}, and contains one or more property name; if all the properties are found, the text (with the resolved substitutions) is displayed without the curly braces. If any of the properties is not found, all the text in the braces, and the braces themselves are removed.\line \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .FormatText({\i text})} \par{\i object}\line Required. The MsiEngine object. \par{\i\b text}\line Required. The string to be formatted \par\fi0\li0{\b Remarks}\par\li180 If some square brackets or curly braces have no matching pair, they will be left in the text. \page #{\footnote MsiEngine_EvaluateCondition} ${\footnote MsiEngine.EvaluateCondition} +{\footnote MsiEngine:EvaluateCondition} K{\footnote EvaluateCondition} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b EvaluateCondition Method \line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Evaluates an logical expression containing symbols and values,  and returns an integer of the enumeration iecEnum, as described below. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .EvaluateCondition({\i condition})} \par{\i object}\line Required. The MsiEngine object. \par{\i\b condition}\line Required. A string containing the logical expression. \par\fi0\li0{\b Expression Syntax}\par\li180  value ::= symbol | literal | integer\line  comparison-operator ::= {\b <} | {\b >} | {\b <=} | {\b >=} | {\b =} | {\b <>}\line  term ::= value | value comparison-operator value | {\b (} expression {\b )}|\line  boolean-factor ::= term | {\b NOT} term\line  boolean-term ::= boolean-factor | boolean-factor {\b AND} term\line  expression ::= boolean-term | boolean-term {\b OR} expression\line  symbol ::= property | %environment-variable | $component-action | ?component-state  | &feature-action | !feature-state\line \par\fi0\li180 All symbol names and values are case-sensitive,  except that environment variable names are case-insensitive.\line Operators are case-insensitive.\line Literal text must be enclosed in double quotes.\line Floating point numeric values are not supported.\line Operators and precedence: same as BASIC and SQL languages.\line Arithmetic operators are not supported.\line Supported operators: Or And Not Xor Eqv Imp < <= = <> >= > () .\line Non-existent property values are treated as empty strings.\line Comparison of an integer with a string or property value that cannot be converted to an  integer is always iecFalse, except for the comparison operator '<>' which returns iecTrue.\line Parentheses may be used to override operator precedence.\line For string comparisons, a tilde '{\f1\b ~}' prefixed to the operator will  perform a case-insensitive compare. \par\fi0\li0{\b Symbol Types}\par\li180 \trowd\trgaph108\trleft200\cellx2400\cellx3600\cellx8000 \intbl{\ul Symbol Type\cell Prefix\cell Value\cell }\row \intbl Installer property\cell (none)\cell value of property (Property table)\cell\row \intbl Environment variable\cell {\f1\b %}\cell value of environment variable\cell\row \intbl Component table key\cell {\f1\b &}\cell action state of the component\cell\row \intbl Component table key\cell {\f1\b !}\cell installed state of the component\cell\row \intbl Feature table key\cell {\f1\b &}\cell action state of the feature\cell\row \intbl Feature table key\cell {\f1\b !}\cell installed state of the feature\cell\row \par\fi0\li0{\b Return Values}\par\li180 {\f1 iecFalse = 0 } - expression evaluates to False\line {\f1 iecTrue  = 1 } - expression evaluates to True\line {\f1 iecNone  = 2 } - expression not present, caller decides interpretation\line {\f1 iecError = 3 } - syntax error in expression, cannot be evaluated \par\fi0\li0{\b Logical Operators}, high to low precedence\par\li180 {\f1\b Not } - prefix unary operator, inverts state of following term\line {\f1\b And } - True if both terms True\line {\f1\b Or  } - True if either or both terms True\line {\f1\b Xor } - True if either but not both terms True\line {\f1\b Eqv } - True if both terms True or both False\line {\f1\b Imp } - True if left term False or right term True \par\fi0\li0{\b Comparison Operators}, can occur only between two values\par\li180 {\f1\b =   } - True if left value is equal to right value\line {\f1\b <>  } - True if left value is not equal to right value\line {\f1\b >   } - True if left value is greater than right value\line {\f1\b >=  } - True if left value is greater than or equal to right value\line {\f1\b <   } - True if left value is less than right value\line {\f1\b <=  } - True if left value is less than or equal to right value \par\fi0\li0{\b Substring Operators}, when present between two string values\par\li180 {\f1\b ><  } - True if left string contains the right string\line {\f1\b <<  } - True if left string starts with the right string\line {\f1\b >>  } - True if left string ends with the right string \par\fi0\li0{\b Bitwise Numeric Operators}, when present between two integer values\par\li180 {\f1\b ><  } - Bitwise AND, True if left and right integers have any bits in common {\f1\b <<  } - True if the high 16-bits of left integer equals the right integer\line {\f1\b >>  } - True if the low 16-bits of the left integer equals the right integer \par\fi0\li0{\b Feature and Component State Values}\par\li180 {\f1 0 (iisAbsent)} - feature or component not present\line {\f1 1 (iisLocal) } - feature or component on local machine\line {\f1 2 (iecSource } - feature or component run from source\line {\f1 (null value) } - no action to be taken on feature or component\line {\ul Note}: these states are not set until the {\uldb SetInstallLevel}{\v MsiSelectionManager_SetInstallLevel}  method is called, either directly or by the {\uldb CostFinalize}{\v Action_CostFinalize@msi.hlp} action.  Therefore, state checking is generally only useful in conditional expression in an action sequence table. \page #{\footnote MsiEngine_Initialize} ${\footnote MsiEngine.Initialize} +{\footnote MsiEngine:Initialize} K{\footnote Initialize} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Initialize Method \line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Validates and opens the database, initializes the engine, handler, Property table.  Fails if the database is incompatible or does not contain Property and Error tables.  Returns an integer enumeration indicating the result. If an error occurs, the  handler is not initialized and cannot display the error; therefore the responsibility  of the caller to handle the error. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Initialize({\i database, uiLevel, commandLine})} \par{\i object}\line Required. The MsiEngine object. \par{\i\b database}\line Required. Name or path to the database file. The engine interprets this string  and attempts to create the corresponding MsiDatabase object. The MsiDatabase object  must contain the {\uldb Error}{\v _msi_Error_Table@msi.hlp} table, and the  {\uldb Property}{\v _msi_Property_Table@msi.hlp} table. The Property table must contain the  {\uldb ProductVersion}{\v Property_ProductVersion}, {\uldb ProductLanguage}{\v Property_ProductLanguage}, and {\uldb ProductCode}{\v Property_ProductCode}  properties for the initialization to succeed. To facilitate component testing, if  an empty string is supplied, a temporary database will be created containing an empty  Property table. \par{\i\b uiLevel}\line Optional. The interaction level of the UI, one of the following: {\line\f1 iuiFull    = 0  } default, full interactive UI {\line\f1 iuiReduced = 1  } progress and errors, no modeless dialogs (wizards) {\line\f1 iuiBasic   = 2  } progress and errors using engine default handler {\line\f1 iuiNone    = 3  } no UI\line \par{\i\b commandLine}\line Optional. String containing property definitions, normally launcher command line.  These properties will override those in the resources of the launcher EXE,  The property name will be forced to upper case; the value is case-sensitive.  All externally settable properties are named entirely with  upper case letters. White space around the equals sign is optional.  Spaces within the value text are preserved if the value is quoted.  In addition to the property=value syntax, a selected set of letter options are interpreted. \par\fi0\li0{\b Operations performed by MsiEngine.Initialize}\par\li180  1. Loads property table if in UI preview mode. Goto step 15.\line  2. If a database wasn't passed in via the  database parameter, attempts to locate DATABASE= on the command-line  and use this as the database. If neither the database parameter is set  nor DATABASE= specifed on the command-line, creates a temporary database  and property table.\line  3. Evaluates the {\b\i uiLevel} argument and displays a startup window  if not totally quiet.\line  4. Copies the database to the TEMP folder if running from a floppy     or other removable media.\line  5. Reads and validates the SummaryInformation stream (_SummaryInformation table if ODBC database).\line  6. Checks database version against the engine and services objects.\line  7. Authenticates the database (if enabled)  8. Determines which language to use. The language is chosen using the   following steps, until a language is found:\line       a. If a language is advertised for the product then it is used. If the   database doesn't support this language then ieiLanguageUnsupported is returned.\line       b. If a language is specified on the command-line for the product then it is   used. If the database doesn't support this language then ieiLanguageUnsupported   is returned.\line       c. If a language supported by the database is the same as the user's   default language then it is used.\line       d. If a language supported by the database is the primary language of   the user's default language then it is used.\line       e. If the primary language of a language supported by the database is   the primary language of the user's default language then it is used.\line       f. If there is only one language supported by the database for which   the system has locale information then it is used.\line       g. The user is presented with a choice of language for which the system   has locale information. The chosen language is used.\line       h. An error, ieiLanguageUnsupported, is returned.\line  9. Opens the database, read-only unless PID_SECURITY property is set to 0.\line 10. Applies language transform if a language other than the base language is chosen.\line 11. Initializes database transforms, if transforms have been advertised or the  TRANSFORMS property is set\line 12. Loads Property table from the opened database.\line 13. Loads Error table and caches message headers from that table.\line 14. Adds user registration properties from the registry.\line 15. Processes property settings from the string passed in the {\b\i commandLine} argument.\line 16. Sets the operating system and hardware properties using  {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties}.\line 17. Creates an MsiExecute object to execute operations, directly or via script.\line 18. Initializes the log if {\uldb LOGFILE}{\v Property_LOGFILE} property is set.\line 19. Set the UI interaction level, creates instance of MsiHandler if full UI.\line 20. Initializes the MsiHandler object, supplying this engine object.\line 21. Checks whether an install is in progress and performs the following steps if one is:\line       a. If the install was started by a different user then it's silently rolled back\line   b. Otherwise, if it's the same user, but a different product then the user is  given the option to either roll back the partial install or exit\line       c. Otherwise, if it's the same user, same product, but has different  in-progress properties, then the user is given the option to either roll  back the partial install or exit\line   d. Otherwise, if it's the same user and same product then the previously   started install is resumed.\line \par\fi0\li0{\b Return Values}\par\li180 {\f1 ieiSuccess             =  0  } initialization complete\line {\f1 ieiAlreadyInitialized  =  2  } this engine object is already initialized\line {\f1 ieiCommandLineOption   =  3  } invalid command line syntax\line {\f1 ieiDatabaseOpenFailed  =  5  } database could not be opened\line {\f1 ieiDatabaseInvalid     =  6  } incompatible database\line {\f1 ieiInstallerVersion    =  7  } installer version does not support database format\line {\f1 ieiSourceAbsent        =  8  } couldn't resolve the source\line {\f1 ieiHandlerInitFailed   = 10  } could not initialize handler interface\line {\f1 ieiLogOpenFailure      = 11  } could not open logfile in requested mode\line {\f1 ieiLanguageUnsupported = 12  } no acceptable language could be found\line {\f1 ieiPlatformUnsupported = 13  } no acceptable platform could be found {\f1 ieiTransformFailed     = 14  } database transform failed to merge\line {\f1 ieiSignatureRejected   = 15  } digital signature rejected\line {\f1 ieiDatabaseCopyFailed  = 16  } could not copy database to temp dir\line {\f1 ieiPatchPackageOpenFailed  = 17 } could not open patch package\line {\f1 ieiPatchPackageInvalid     = 18 } patch package invalid\line {\f1 ieiTransformNotFound       = 19 } transform file not found\line {\f1 ieiPatchPackageUnsupported = 20 } patch package unsupported (unsupported patching engine?)\line {\f1 ieiPackageRejected         = 21 } package cannot be run because of security reasons\line {\f1 ieiProductUnknown          = 22 } attempt to uninstall a product you haven't installed\line {\f1 ieiDiffUserAfterReboot     = 23 } different user attempting to complete install after reboot\line {\f1 ieiProductAlreadyInstalled = 24 } product has been installed already w/ a different package\line {\f1 ieiTSRemoteInstallDisallowed = 25 } can't do installations from a remote session on Hydra\line \page #{\footnote MsiEngine_SetMode} ${\footnote MsiEngine.SetMode} +{\footnote MsiEngine:SetMode} K{\footnote SetMode} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SetMode Method \line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Sets a particular mode to the on or off state. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SetMode({\i mode, state})} \par{\i object}\line Required. The MsiEngine object. \par{\i\b mode}\line The mode to turn on or off. Possible values are any iefEnum value from engine.h.\line \par{\i\b state}\line Boolean. True to turn mode on, false to turn mode off. \page #{\footnote MsiEngine_GetMode} ${\footnote MsiEngine.GetMode} +{\footnote MsiEngine:GetMode} K{\footnote GetMode} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetMode Method \line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Gets the current mode bits.  The return is a bit flag.  Values are defined as iefEnum in engine.h. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetMode()} \par{\i object}\line Required. The MsiEngine object. \par{\i\b state}\line \page #{\footnote MsiEngine_Terminate} ${\footnote MsiEngine.Terminate} +{\footnote MsiEngine:Terminate} K{\footnote Terminate} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Terminate Method \line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Terminates the engine operations and releases references and data.  This method must be called before the engine is released.  After this method, the engine is returned to the uninitialized state,  and the {\uldb Initialize}{\v MsiEngine_Initialize} method may be called again. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Terminate({\i state})} \par{\i object}\line Required. The MsiEngine object. \par{\i\b state}\line The return status of the last executed action. See the  {\uldb DoAction}{\v MsiEngine_DoAction} method  for possible values. This value is passed to the server  to determine  how to handle rollback and the in-progress information for the install.  See {\uldb InstallFinalize}{\v MsiConfigurationManager_InstallFinalize}  for more information. \par\fi0\li0{\b Return Values}\par\li180 Returns the given state, or iesSuspend if the install was suspended. \page #{\footnote MsiEngine_DoAction} ${\footnote MsiEngine.DoAction} +{\footnote MsiEngine:DoAction} K{\footnote DoAction} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DoAction Method \line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object} \tx2400\tab{\uldb Msi Objects}{\v Msi_Objects} \tx4100\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \tx6300\tab{\uldb Msi Actions}{\v _msi_Installation_Database_Actions_List@msi.hlp} \par}\li180 Executes the action function corresponding to the name supplied.  If the name is not recognized by the engine as a build-in action or  as a custom action in the CustomAction table, the name is   passed to the DoAction method of the MsiHandler object,  which may either invoke a function or a dialog.  If a null action name is supplied, the engine uses the upper-cased value  of the ACTION property as the action to perform. If no property value is  defined, the default action is performed, currently defined as "INSTALL".  This method returns an integer enumeration as described below. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .DoAction({\i action})} \par{\i object}\line Required. The MsiEngine object. \par{\i\b action}\line Required. The string name of the action to execute, case-sensitive. \par\fi0\li0{\b Return Values}\par\li180 {\f1 iesNoAction       = 0  } action not invoked, most-likely does not exist.\line {\f1 iesSuccess        = 1  } IDOK, completed actions successfully.\line {\f1 iesUserExit       = 2  } IDCANCEL, user terminated prematurely.\line {\f1 iesFailure        = 3  } IDABORT, unrecoverable error occurred.\line {\f1 iesSuspend        = 4  } IDRETRY, sequence suspended, to be resumed later.\line {\f1 iesFinished       = 5  } IDIGNORE, skip remainin actions, not an error\line {\f1 iesWrongState     = 6  } calling sequence error, not in initialized state.\line {\f1 iesBadActionData  = 7  } from Sequence(), invalid Action table record data. \page #{\footnote MsiEngine_Sequence} ${\footnote MsiEngine.Sequence} +{\footnote MsiEngine:Sequence} K{\footnote Sequence} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Sequence Method \line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Opens a query on the specified table, ordering the actions by the numbers in the  'Sequence' column.  For each row fetched, the {\uldb DoAction}{MsiDatabase_DoAction}  method is called, provided that any supplied condition expression does not evaluate to False.  Returns an enumeration iesEnum, as described in the {\uldb DoAction}{\v MsiEngine_DoAction} method. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Sequence({\i table})} \par{\i object}\line Required. The MsiEngine object. \par{\i\b table}\line Required. The string name of the table to use for sequencing. \par\fi0\li0{\b Remarks}\par\li180 This method is meant to be called internally by top-level actions. \page #{\footnote MsiEngine_Message} ${\footnote MsiEngine.Message} +{\footnote MsiEngine:Message} K{\footnote Message} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Message Method \line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Performs any enabled logging operations and defers exection  to the {\uldb Message}{\v MsiHandler_Message} method of the MsiHandler  object associated with the engine. Logging may be selectively enabled  for the various message types.  See {uldb MsiMessage.Message}{\v MsiMessage_Message}  for message types and return codes. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Message({\i kind, record})} \par{\i object}\line Required. The MsiEngine object. \par{\i\b kind}\line Required. The message type, one of imtEnum, as described in {\uldb MsiMessage.Message}{\v MsiMessage_Message} \par{\i\b record}\line Required. An MsiRecord object containing message-specific field. \par\pard{\b Processing by Message Types}\par\li180 {\f1 imtOutOfMemory  } logged if '{\f1 m}' in LOGMODE, passed to handler\line {\f1 imtError        } logged if '{\f1 e}' in LOGMODE, passed to handler\line {\f1 imtWarning      } logged if '{\f1 w}' in LOGMODE, passed to handler\line {\f1 imtUser         } logged if '{\f1 u}' in LOGMODE, passed to handler\line {\f1 imtInfo         } logged if '{\f1 i}' in LOGMODE, not passed to handler\line {\f1 imtDiagnostic   } logged if '{\f1 d}' in LOGMODE, not passed to handler if log enabled\line {\f1 imtCommonData      } logged if '{\f1 c}' in LOGMODE, passed to handler to cache\line {\f1 imtActionStart  } logged if '{\f1 a}' in LOGMODE, passed to handler for progress display\line {\f1 imtActionData   } logged if '{\f1 r}' in LOGMODE, passed to handler for progress display\line {\f1 imtProgress     } never logged, passed to handler progress gauge {\f1 imtActionDone   } never logged, passed to handler to remove progress dialog \page #{\footnote MsiEngine_SelectLanguage} ${\footnote MsiEngine.SelectLanguage} +{\footnote MsiEngine:SelectLanguage} K{\footnote SelectLanguage} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SelectLanguage Method \line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Displays a dialog various type of messages and notifications. See table below. Returns an  integer of the enumeration imsEnum. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SelectLanguage({\i languages, caption)}} \par{\i object}\line Required. The MsiEngine object. \par{\i\b languages}\line Required. A string containing a list of decimal integer language IDs, separated by semicolons. \par{\i\b caption}\line Optional. A string designating the caption to display on the language select dialog.  No caption bar will be displayed if no caption is supplied. \par\fi-180\li180{\b Return Codes}, one of islEnum \line{\f1  islSystemError   = -3  } Error creating selection window \line{\f1  islSyntaxError   = -2  } Language ID missing, zero, or non-numeric \line{\f1  islNoneSupported = -1  } None of the languages are supported by system \line{\f1  islUserExit      =  0  } User closed window with Escape or terminate \line{\f1  positive value   >  0  } Index of language selected (1-based) \par\fi0\li0{\b Remarks}\par\li180 This is the only method of MsiEngine that may be called before Initialize, as it does  not make any use of the database (in fact, it is called by Initialize).  Languages not supported by the system will not be displayed.  Normally MsiEngine.Initialize will scan the languages and call this method only if  it cannot pick the best match and if multiple languages are supported by the system. \page #{\footnote MsiEngine_OpenView} ${\footnote MsiEngine.OpenView} +{\footnote MsiEngine:OpenView} K{\footnote OpenView} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b OpenView Method \line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Simply a wrapper which defers to the {\uldb OpenView}{\v MsiDatabase_OpenView}  method of the current MsiDatabase object associated with the engine. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .OpenViewSQL({\i sql, intent})} \par{\i object}\line Required. The MsiEngine object. \par{\i\b sql}\line Required. The SQL query string. \par{\i\b intent}\line Required. The combination of operations intended on the MsiView object. \page #{\footnote MsiEngine_ExecuteRecord} ${\footnote MsiEngine.ExecuteRecord} +{\footnote MsiEngine:ExecuteRecord} K{\footnote ExecuteRecord} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b OpenView Method \line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Either executes or spools and operation, depending on the current mode of execution.  If the {\uldb EXECUTEMODE}{\v Property_EXECUTEMODE} property indicates direct  execution, the operation is executed immediately.  Otherwise, the operation is added  to the current script. If no script has been created yet, a script is created  and the {\uldb ixoHeader}{\v Operation_ixoHeader},  {\uldb ixoProductInfo}{\v Operation_ixoProductInfo},  {\uldb ixoDialogInfo}{\v Operation_ixoDialogInfo} and  {\uldb ixoRollbackInfo}{\v Operation_ixoRollbackInfo}  operations are added before this operation. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ExecuteRecord({\i opcode, params})} \par{\i object}\line Required. The MsiEngine object. \par{\i\b opcode}\line Required. The {\uldb opcode}{\v Server_ScriptOpcodes} of the operation to execute. \par{\i\b params}\line Required. An MsiRecord object containing the arguments for this operation. \page #{\footnote MsiEngine_ResolveFolderProperty} ${\footnote MsiEngine.ResolveFolderProperty} +{\footnote MsiEngine:ResolveFolderProperty} K{\footnote ResolveFolderProperty} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ResolveFolderProperty Method \line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method insures that the designated property contains a full path to a folder.  If the property does not exist, it is create with the folder of the database  passed to the {\uldb Initialize}{\v MsiEngine_Initialize} method.  If a partial path is supplied, i.e. not commencing with a drive letter or UNC path,  the partial path is prefixed with the database folder. Partial paths beginning with  a dot or double dot are not supported. The method returns a boolean indicating  whether the property was initially defined or not. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ResolveFolderProperty({\i property})} \par{\i object}\line Required. The MsiEngine object. \par{\i\b property}\line Required. Name of the property to be resolved.   \page #{\footnote MsiEngine_ValidateProductID} ${\footnote MsiEngine.ValidateProductID} +{\footnote MsiEngine:ValidateProductID} K{\footnote ValidateProductID} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ValidateProductID Method \line\tx360\tab\fs18\b0{\uldb MsiEngine Object}{\v MsiEngine_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method returns a boolean value indicating if the Product ID is valid. In maintenance mode or if the {\uldb PIDTemplate}{\v Property_PIDTemplate} property is missing the method always returns true.  Otherwise it compares the content of the PIDTemplate property and the {\uldb PRODUCTID}{\v Property_PRODUCTID} property. It also supplies the random digits and verifies the checksum. For a description of the syntax of the template, see the {\uldb MaskedEdit}{\v ControlType_MaskedEdit} control description.  The PRODUCTID property should initially contain the part of the PID that is entered by the user. If the entry is validated, the PIDTemplate property is removed, and the PRODUCTID property is set to the complete validated value. Otherwise both  properties remain unchanged. If there is a CCP digit in the template, the value of that digit is stored in the {\uldb CCPTrigger}{\v Property_CCPTrigger} property.  This method is called from the CostInitialize action, in order to validate the PID if possible before the wizard sequence. If it fails, the user is asked for the input by the UI. The UI calls this method again to validate the entry and blocks further steps untill a valid entry is received.  The method is also called from the InstallValidate action, where it blocks the installation if the validation failed. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ValidateProductID()} \par{\i object}\line Required. The MsiEngine object. \page #{\footnote MsiCostAdjuster_Object} ${\footnote MsiCostAdjuster Object} K{\footnote MsiCostAdjuster} +{\footnote Class:MsiCostAdjuster} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiCostAdjuster Object class \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 MsiCostAdjuster objects are created by special costing actions, which are responsible for both the  implementation and exposure of the object through the MsiCostAdjuster interface.  For this reason, these  objects cannot be created or accessed via automation.\line  \line See the {\uldb CostInitialize}{\v _msi_Action_CostInitialize@msi.hlp} and  {\uldb RegisterCostAdjuster}{\v MsiSelectionManager_RegisterCostAdjuster} topics for details on the  creation and usage of MsiCostAdjuster objects. \par\li0{\b Methods}\par\li180 {\uldb GetDynamicCost}{\v MsiCostAdjuster_GetDynamicCost}\line \page #{\footnote MsiCostAdjuster_GetDynamicCost} ${\footnote MsiCostAdjuster.GetDynamicCost} +{\footnote MsiCostAdjuster:GetDynamicCost} K{\footnote GetDynamicCost} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetDynamicCost method \line\tx360\tab\fs18\b0{\uldb MsiCostAdjuster Object}{\v MsiCostAdjuster_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The GetDynamicCost method is responsible for calculating the total disk space cost associated with a  specified {\uldb Component}{\v _msi_Component_Table@msi.hlp} table entry, and returning the result.  Note that  because the actual implementation of each type of MsiCostAdjuster object is supplied by various  Installer actions, the actual calculations performed by GetDynamicCost are implementation-specific. \par\li0{\b Syntax}\par\li500\fi-320 IMsiRecord* piRec = {\i object}->{\b GetDynamicCost}(ristrComponent, riDestPath,iDynamicCost); \par{\i object}\line Required. The MsiCostAdjuster object. \par{\i\b IMsiString& ristrComponent}\line Required. A reference to the string name of the component in the {\uldb Component}{\v _msi_Component_Table@msi.hlp} table  that needs to be dynamically recosted.\line \par{\i\b IMsiPath& riDestPath}\line Required. a reference to a path object that represents the directory path associated with the component.\line \par{\i\b int& iDynamicCost}\line Required. a reference through which the dynamic cost as calculated by GetDynamicCost is returned to the caller.\line \par\fi0\li0{\b Remarks}\par\li180 For each MsiCostAdjuster object that is registered with the {\uldb Selection Manager}{\v MsiSelectionManager_Object}  using the {\uldb RegisterCostAdjuster}{\v MsiSelectionManager_RegisterCostAdjuster} method, the GetDynamicCost  method of that object will be called whenever the disk space cost associated with a specified  component needs to be re-calculated.  For instance, when the {\uldb CostFinalize}{\v Action_CostFinalize@msi.hlp}  action is executed, every component needs to be initialized, so all MsiCostAdjuster objects will be called  once for each entry in the {\uldb Component}{\v _msi_Component_Table@msi.hlp} table. Later, if the directory and/or  selection state associated with any component changes (i.e. through UI user interaction), the affected  component(s) will be recosted, causing all MsiCostAdjuster objects to be called again.\line  \line  See the {\uldb CostInitialize}{\v _msi_Action_CostInitialize@msi.hlp} topic for a complete discussion of costing. \page #{\footnote MsiSelectionManager_Object} ${\footnote MsiSelectionManager Object} K{\footnote MsiSelectionManager} +{\footnote Class:MsiSelectionManager} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiSelectionManager Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The MsiSelectionManager object, associated with the MsiEngine object, manages the in-memory   Feature,Component and VolumeCost tables. It loads the Feature and Compnent tables from the database and adds  temporary columns used in the UI selection and costing actions. The VolumeCost table  is temporary and contains the accumulated disk cost. Other objects, such as MsiHandler, that need to make changes in the 'Select'  state of records within the Feature Table will do so via the Selection Manager.  For instance, the Handler can get a read-only reference to the loaded Feature Table via  the FeatureTable property, and can use a cursor to read values at will from any records  and columns in the table.  However, to alter the 'Select' state of a Feature Table record,  a selection request must be made through the Selection Manager's ConfigureFeature interface.  This is because the Selection Manager must handle the dynamic costing and updating of the  'Select' condition of each Feature record as the selection states of parent and child  Feature records change. During standard installations, the Selection Manager will normally be initialized by executing the  {\uldb CostInitialize}{\v _msi_Action_CostInitialize@msi.hlp}  action. \par\li0{\b Properties}\par\li180 {\uldb FeatureTable}{\v MsiSelectionManager_FeatureTable}\line {\uldb ComponentTable}{\v MsiSelectionManager_ComponentTable}\line \par\li0{\b Methods}\par\li180 {\uldb ConfigureFeature}{\v MsiSelectionManager_ConfigureFeature}\line {\uldb FreeSelectionTables}{\v MsiSelectionManager_FreeSelectionTables}\line {\uldb GetFeatureValidStates}{\v MsiSelectionManager_GetFeatureValidStates}\line {\uldb GetFeatureCost}{\v MsiSelectionManager_GetFeatureCost}\line {\uldb GetDescendentFeatureCost}{\v MsiSelectionManager_GetDescendentFeatureCost}\line {\uldb GetVolumeCostTable}{\v MsiSelectionManager_GetVolumeCostTable}\line {\uldb InitializeDynamicCost}{\v MsiSelectionManager_InitializeDynamicCost}\line {\uldb InitializeComponents}{\v MsiSelectionManager_InitializeComponents}\line {\uldb LoadSelectionTables}{\v MsiSelectionManager_LoadSelectionTables}\line {\uldb ProcessConditionTable}{\v MsiSelectionManager_ProcessConditionTable}\line {\uldb RecostDirectory}{\v MsiSelectionManager_RecostDirectory}\line {\uldb RegisterCostAdjuster}{\v MsiSelectionManager_RegisterCostAdjuster}\line {\uldb SetFeatureHandle}{\v MsiSelectionManager_SetFeatureHandle}\line {\uldb SetInstallLevel}{\v MsiSelectionManager_SetInstallLevel}\line {\uldb SetComponent}{\v MsiSelectionManager_SetComponent}\line \page #{\footnote MsiSelectionManager_SetReinstallMode} ${\footnote MsiSelectionManager.SetReinstallMode} +{\footnote MsiSelectionManager:SetReinstallMode} K{\footnote SetReinstallMode} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SetReinstallMode Method \line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Allows the caller to specify the validation mode(s) to be used during a reinstall.  SetReinstallMode should  normally be used in conjunction with a call to {\uldb ConfigureFeature}{\v MsiSelectionManager_ConfigureFeature},  to specify the feature or features to be reinstalled. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SetReinstallMode(istrMode)} \par{\i object}\line Required. The MsiSelectionManager object. \par{\i istrMode}\line Required. A string containing letters that specify the type of reinstall to perform.  The letters accepted by  SetReinstallMode are identical to those specified for the {\uldb REINSTALLMODE}{\v Property_REINSTALLMODE} property. \par\fi0\li0{\b Remarks}\par\li180 The {\uldb SetInstallLevel}{\v MsiSelectionManager_SetInstallLevel} method must be called before  calling SetReinstallMode. \page #{\footnote MsiSelectionManager_FeatureTable} ${\footnote MsiSelectionManager.FeatureTable} +{\footnote MsiSelectionManager:FeatureTable} K{\footnote FeatureTable} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FeatureTable Property \line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the loaded {\uldb Feature}{\v _msi_Feature_Table@msi.hlp} table as an MsiTable object.  Returns an object set to Nothing if table is not loaded. Read only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .FeatureTable} \par{\i object}\line Required. The MsiSelectionManager object. \page #{\footnote MsiSelectionManager_ComponentTable} ${\footnote MsiSelectionManager.ComponentTable} +{\footnote MsiSelectionManager:ComponentTable} K{\footnote ComponentTable} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ComponentTable Property \line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the loaded {\uldb Component}{\v _msi_Component_Table@msi.hlp} table as an MsiTable object.  Returns an object set to Nothing if table is not loaded. Read only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ComponentTable} \par{\i object}\line Required. The MsiSelectionManager object. \page #{\footnote MsiSelectionManager_GetVolumeCostTable} ${\footnote MsiSelectionManager.GetVolumeCostTable} +{\footnote MsiSelectionManager:GetVolumeCostTable} K{\footnote GetVolumeCostTable;VolumeCost table} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetVolumeCostTable method \line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the loaded VolumeCost table as an MsiTable object.  Returns an object set to Nothing if table is not loaded. Read only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetVolumeCostTable()} \par{\i object}\line Required. The MsiSelectionManager object. \par\fi0\li0{\b Remarks}\par\li180 The VolumeCost table is a temporary table that is created in-memory by the  {\uldb SelectionManager}{\v MsiSelectionManager_Object}.  The purpose of this table is to track the  total disk space cost of the current install, on a volume by volume basis.  The VolumeCost table  consists of two columns:  \par {\i\b VolumeObject}\line Primary key, containing a pointer to an IMsiVolume object.\line \par {\i\b VolumeCost}\line Long integer specifying the total disk space cost attributed to this volume for the current install.\line \line \line Note: the value in the VolumeCost column will be accurate only after the {\uldb CostFinalize}{\v Action_CostFinalize@msi.hlp}  action has been executed.  See the {\uldb CostInitialize}{\v _msi_Action_CostInitialize@msi.hlp} topic for a complete  discussion of costing. \page #{\footnote MsiSelectionManager_GetFeatureValidStates} ${\footnote MsiSelectionManager.GetFeatureValidStates} +{\footnote MsiSelectionManager:GetFeatureValidStates} K{\footnote GetFeatureValidStates} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetFeatureValidStates method \line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method returns as the function result an integer representing bit flags, with each relevant bit  representing a 'valid' installation state for the specified feature. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFeatureValidStates({\i feature})} \par{\i object}\line Required. The MsiSelectionManager object. \par{\i\b feature}\line Required. String name of feature item whose valid installation states are to be retrieved. \par\fi0\li0{\b Remarks}\par\li180 The return value is composed of bit flags, as follows:\line \line Bit 0: if set, 'iisLocal' is a valid state.\line Bit 1: if set, 'iisSource' is a valid state.\line The GetFeatureValidStates method determines state validity by querying all the components that  are linked to the specified feature (without taking into account the current installed state  of any component). If any of these components has a value of 'irsOptional' in the RunFromSource  column, or if at least one component is marked 'irstLocalOnly' AND at least one other component  is marked 'irsSourceOnly', then both 'iisLocal' and 'iisSource' are both valid states for the  feature.  If ALL components are set to 'irsLocalOnly', then 'iisLocal' is the only valid state.  If ALL components are set to 'irsSourceOnly', then 'iisSource' is the only valid state.\line \page #{\footnote MsiSelectionManager_GetDescendentFeatureCost} ${\footnote MsiSelectionManager.GetDescendentFeatureCost} +{\footnote MsiSelectionManager:GetDescendentFeatureCost} K{\footnote GetDescendentFeatureCost} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetDescendentFeatureCost method \line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method returns as the function result the total amount of disk space (in units of 512 bytes) required by the specified  feature, AND all that feature's children.  For each feature, the total cost is made up of the disk costs attributed  to every component linked to the feature. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetDescendentFeatureCost({\i feature,iAction})} \par{\i object}\line Required. The MsiSelectionManager object. \par{\i\b feature}\line Required. String name of feature item whose cost is to be retrieved. \par{\i\b iAction}\line Required. Specifies the action state to use when determining the feature cost.  For instance, if  'iisLocal' is specified, GetDescendentFeatureCost will return the disk space that would be required  were the specified feature and all its children to be installed locally.  The following enum values are acceptable: \line\line  {\b \f1 iisAbsent  = 0} - cost if feature and all subfeatures were to be removed.\line  {\b \f1 iisLocal   = 1} - cost if feature and all subfeatures were to be installed locally.\line  {\b \f1 iisSource  = 2} - cost if feature and all subfeatures were to be installed to run from the source media.\line  {\b \f1 iisCurrent = 4} - cost if feature and all subfeatures were to be installed in their current action state.\line \page #{\footnote MsiSelectionManager_GetAncestryFeatureCost} ${\footnote MsiSelectionManager.GetAncestryFeatureCost} +{\footnote MsiSelectionManager:GetAncestryFeatureCost} K{\footnote GetAncestryFeatureCost} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetAncestryFeatureCost method \line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method returns as the function result the total amount of disk space (in units of 512 bytes) required by the specified  feature, AND that of all the feature's parents (up to the root of the Feature table).  For each feature, the total cost  is made up of the disk costs attributed to every component linked to the feature. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetAncestryFeatureCost({\i feature, iAction})} \par{\i object}\line Required. The MsiSelectionManager object. \par{\i\b feature}\line Required. String name of feature item whose cost is to be retrieved. \par{\i\b iAction}\line Required. Specifies the action state (iisLocal, iisSource, or iisAbsent) to use when determining the feature cost.  For  instance, if iisLocal is specified, GetAncestryFeatureCost will return the disk space that would be required were  the specified feature and all its parent features to be installed locally. \page #{\footnote MsiSelectionManager_GetFeatureCost} ${\footnote MsiSelectionManager.GetFeatureCost} +{\footnote MsiSelectionManager:GetFeatureCost} K{\footnote GetFeatureCost} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetFeatureCost method \line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method returns as the function result the total amount of disk space (in units of 512 bytes) required by the specified  feature, NOT including that feature's children or parents.  This total cost is made up of the disk costs attributed  to every component linked to the feature. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetFeatureCost({\i feature,iAction})} \par{\i object}\line Required. The MsiSelectionManager object. \par{\i\b feature}\line Required. String name of feature item whose cost is to be retrieved. \par{\i\b iAction}\line Required. Specifies the action state (iisLocal, iisSource, or iisAbsent) to use when determining the feature cost.  For  instance, if iisAbsent is specified, GetFeatureCost will return the disk space freed up (i.e. a negative number) were the  feature to be removed. \page #{\footnote MsiSelectionManager_RecostDirectory} ${\footnote MsiSelectionManager.RecostDirectory} +{\footnote MsiSelectionManager:RecostDirectory} K{\footnote RecostDirectory} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RecostDirectory method \line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The RecostDirectory method must be called whenever the path associated with a directory in the  {\uldb Directory}{\v _msi_Directory_Table@msi.hlp} table changes.  In response, this method prompts each selection that  references the changed directory to recalculate its dynamic cost.\line \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RecostDirectory({\i directoryName, oldPath})} \par{\i object}\line Required. The MsiSelectionManager object. \par{\i\b directoryName}\line Required. String name of directory item in the {\uldb Directory}{\v _msi_Directory_Table@msi.hlp} that has changed. \par{\i\b oldPath}\line Required. An MsiPath object that represents the directory item's path before the change. \par\fi0\li0{\b Remarks}\par\li180 The RecostDirectory method should be called only after the  {\uldb InitializeDynamicCost}{\v MsiSelectionManager_InitializeDynamicCost} method has been called  (this is normally done by the {\uldb CostFinalize}{\v Action_CostFinalize@msi.hlp} action). RecostDirectory  will typically be called only by the {\uldb DirectoryManager}{\v MsiDirectoryManager_Object}.\line  \line  See the {\uldb CostInitialize}{\v _msi_Action_CostInitialize@msi.hlp} topic for a complete discussion of costing. \page #{\footnote MsiSelectionManager_LoadSelectionTables} ${\footnote MsiSelectionManager.LoadSelectionTables} +{\footnote MsiSelectionManager:LoadSelectionTables} K{\footnote LoadSelectionTables} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b LoadSelectionTables Method \line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Loads the {\uldb Feature}{\v _msi_Feature_Table@msi.hlp} and {\uldb Component}{\v _msi_Component_Table@msi.hlp} tables into memory and adds temporary columns used during costing and UI selection. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .LoadSelectionTables()} \par{\i object}\line Required. The MsiSelectionManager object. \par\fi0\li0{\b Remarks}\par\li180 LoadSelectionTable must be called before calling any other SelectionManager method. \page #{\footnote MsiSelectionManager_InitializeDynamicCost} ${\footnote MsiSelectionManager.InitializeDynamicCost} +{\footnote MsiSelectionManager:InitializeDynamicCost} K{\footnote InitializeDynamicCost} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b InitializeDynamicCost Interface Function \line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Initializes the DynamicCost column of each record in the {\uldb Component}{\v _msi_Component_Table@msi.hlp} table.  InitializeDynamicCost does this by making a call to the  {\uldb GetDynamicCost}{\v MsiCostAdjuster_GetDynamicCost} method of each  {\uldb MsiCostAdjuster}{\v MsiCostAdjuster_Object} object that has been registered with the   {\uldb Selection Manager}{\v MsiSelectionManager_Object}, for each component in the  {\uldb Component}{\v _msi_Component_Table@msi.hlp} table.\line \line Note: InitializeDynamicCost is not available via automation - it is only available through the  IMsiSelectionManager C++ interface.  This is because dynamic cost calculations can only be performed by  registered MsiCostAdjuster objects, and these objects can only be created and registered from C++  (using the {\uldb RegisterCostAdjuster}{\v MsiSelectionManager_RegisterCostAdjuster} method). \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .InitializeDynamicCost()} \par{\i object}\line Required. The MsiSelectionManager object. \par\fi0\li0{\b Remarks}\par\li180 InitializeDynamicCost must be called only after the {\uldb Selection Manager}{\v MsiSelectionManager_Object}  has been initialized (which is typically done by the {\uldb CostInitialize}{\v _msi_Action_CostInitialize@msi.hlp}  action), and then only after any actions that register dynamic MsiCostAdjuster objects have been executed. \page #{\footnote MsiSelectionManager_RegisterCostAdjuster} ${\footnote MsiSelectionManager.RegisterCostAdjuster} +{\footnote MsiSelectionManager:RegisterCostAdjuster} K{\footnote RegisterCostAdjuster} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RegisterCostAdjuster Interface Function \line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Registers a dynamic {\uldb MsiCostAdjuster}{\v MsiCostAdjuster_Object} object with the  {\uldb Selection Manager}{\v MsiSelectionManager_Object}.  This object will then be called (through  the {\uldb GetDynamicCost}{\v MsiCostAdjuster_GetDynamicCost} method) whenever the dynamic cost of  a component needs to be recalculated.  For example, the {\uldb FileCost}{\v _msi_Action_FileCost@msi.hlp} action  creates and registers a special "file costing" version of the MsiCostAdjuster interface object.  Then,  when called by the {\uldb Selection Manager}{\v MsiSelectionManager_Object}, this object is responsible  for calculating the actual disk space costs for all the files in the {\uldb File}{\v _msi_File_Table@msi.hlp} table that  reference the specified component.\line \line Note: RegisterCostAdjuster is not available via automation - it is only available through the  IMsiSelectionManager C++ interface.  This is because there is no way to create MsiCostAdjuster objects  directly via automation - each different type of object exposed through the MsiCostAdjuster interface  is implemented and created internally by the appropriate Installer action. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .InitializeDynamicCost()} \par{\i object}\line Required. The MsiSelectionManager object. \par\fi0\li0{\b Remarks}\par\li180 RegisterCostAdjuster must be called only after the {\uldb Selection Manager}{\v MsiSelectionManager_Object}  has been initialized (which is typically done by the {\uldb CostInitialize}{\v _msi_Action_CostInitialize@msi.hlp}  action). \page #{\footnote MsiSelectionManager_FreeSelectionTables} ${\footnote MsiSelectionManager.FreeSelectionTables} +{\footnote MsiSelectionManager:FreeSelectionTables} K{\footnote FreeSelectionTables} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FreeSelectionTables Method \line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Frees the in-memory Feature and Component tables, along with the temporary computational and state columns.  The final Installed state column will be written to persistent storage. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .FreeSelectionTables()} \par{\i object}\line Required. The MsiSelectionManager object. \par\fi0\li0{\b Remarks}\par\li180 The return value for FreeSelectionTables is a boolean that indicates whether any components remain in an  installed state.  If ALL components are absent (i.e. the updated 'Installed' column of the  {\uldb Component}{\v _msi_Component_Table@msi.hlp} table contains either a NULL value, iisAbsent, or issReleased for all  components), false will be returned. \page #{\footnote MsiSelectionManager_SetFeatureHandle} ${\footnote MsiSelectionManager.SetFeatureHandle} +{\footnote MsiSelectionManager:SetFeatureHandle} K{\footnote SetFeatureHandle} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SetFeatureHandle Method \line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Stores an external handle to a Feature item, for use by UI display. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SetFeatureHandle({\i feature, handle})} \par{\i object}\line Required. The MsiSelectionManager object. \par{\i\b feature}\line Required. String name of feature item, primary key of Feature table. \par{\i\b handle}\line Required. Integer handle value to store in designated Feature table row. \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiSelectionManager_ProcessConditionTable} ${\footnote MsiSelectionManager.ProcessConditionTable} +{\footnote MsiSelectionManager:ProcessConditionTable} K{\footnote ProcessConditionTable} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ProcessConditionTable Method \line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The ProcessConditionTable method loads the {\uldb Condition Table}{\v _msi_Condition_Table@msi.hlp}, and  evaluates each conditional expression.  For those expressions that evaluate to iecTrue, the  value in the 'Level' column of the appropriate {\uldb Feature Table}{\v _msi_Feature_Table@msi.hlp}  entry will be set to the value specified in the {\uldb Condition Table}{\v _msi_Condition_Table@msi.hlp}. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ProcessConditionTable()} \par{\i object}\line Required. The MsiSelectionManager object. \par\fi0\li0{\b Remarks}\par\li180 The {\uldb LoadSelectionTables}{\v MsiSelectionManager_LoadSelectionTables} method must be executed prior  to executing ProcessConditionTable.  In addition, after executing ProcessConditionTable, the  {\uldb SetInstallLevel}{\v MsiSelectionManager_SetInstallLevel} method should be called to update  the {\uldb Feature Table}{\v _msi_Feature_Table@msi.hlp} 'select' and 'Installed' states. \page #{\footnote MsiSelectionManager_InitializeComponents} ${\footnote MsiSelectionManager.InitializeComponents} +{\footnote MsiSelectionManager:InitializeComponents} K{\footnote InitializeComponents} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b InitializeComponents Method \line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The InitializeComponents method initializes all components in the {\uldb Component}{\v _msi_Component_Table@msi.hlp} table,  evaluating the expression in the 'Condition' column of that table (all components for which this  conditional evaluates to iecFalse will be permanently disabled).  Note: InitializeComponents does not change  the 'Action' state of any component. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .InitializeComponents()} \par{\i object}\line Required. The MsiSelectionManager object. \par\fi0\li0{\b Remarks}\par\li180 The {\uldb LoadSelectionTables}{\v MsiSelectionManager_LoadSelectionTables} method must be executed prior  to executing InitializeComponents.  In addition, after executing InitializeComponents, the  {\uldb SetInstallLevel}{\v MsiSelectionManager_SetInstallLevel} method should be called - this will update  the 'Action' state of each component, based upon the state of the feature(s) in the   {\uldb Feature}{\v _msi_Feature_Table@msi.hlp} table that are linked to a particular component. \page #{\footnote MsiSelectionManager_SetInstallLevel} ${\footnote MsiSelectionManager.SetInstallLevel} +{\footnote MsiSelectionManager:SetInstallLevel} K{\footnote SetInstallLevel} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SetInstallLevel Method \line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method sets the Install Level for the current installation to a specified value, and recalculates  the 'Select' and 'Installed' states for all features in the Feature table, and sets the 'Action' state  of each component in the {\uldb Component}{\v _msi_Component_Table@msi.hlp} table, based on the new level. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SetInstallLevel({\i installLevel})} \par{\i object}\line Required. The MsiSelectionManager object. \par{\i installLevel}\line Required. The requested new install level. \par\fi0\li0{\b Remarks}\par\li180 The {\uldb InitializeComponents}{\v MsiSelectionManager_InitializeComponents} method must be executed prior  to executing SetInstallLevel. If 0 is passed for the installLevel parameter, the current install level will not be changed, but  all features will still be updated based on the current install level.  This functionality   could be used, for example, by the Handler module to reset all selections back to their initial  default states, at any point in the UI selection process. \page #{\footnote MsiSelectionManager_ConfigureFeature} ${\footnote MsiSelectionManager_ConfigureFeature} +{\footnote MsiSelectionManager:ConfigureFeature} K{\footnote ConfigureFeature} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ConfigureFeature Method \line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method is used to request a change in the 'Select' state of a record in the  {\uldb Feature}{\v _msi_Feature_Table@msi.hlp} table, and of that feature's child records.  In turn, the 'Action' state of all the components linked to the changed Feature  records will also be updated appropriately, based on the new feature 'Select' state.  ConfigureFeature can also be used to configure all features at once, by specifying the  keyword 'ALL' instead of a specific feature name. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ConfigureFeature({\i strFeature, iisState})} \par{\i object}\line Required. The MsiSelectionManager object. \par{\i\b strFeature}\line Required. A string specifying the name of the feature to be configured.  Alternatively, the reserved word "ALL"  (case insensitive) can be used, indicating that all features should be configured to the state specified by  iisState parameter.  For example, if 'iisAbsent' is specified in the iisState parameter, and "ALL" is specified in the  strFeature parameter, the entire product will be removed. \par{\i\b state}\line Required. Requested selection state, one of the following values:\line {\f1 Null (empty)  }:  Requests that no action is to be taken for this item.\line {\f1 iisAbsent    = 0}:  item is to be removed.\line {\f1 iisLocal     = 1}:  item is to be installed locally.\line {\f1 iisSource    = 2}:  item is to be installed from run from the source media.\line {\f1 iisReinstall = 3}:  if the feature is installed, reinstall in the same state.\line \par\fi0\li0{\b Remarks}\par\li180 The {\uldb SetInstallLevel}{\v MsiSelectionManager_SetInstallLevel} method must be called before  calling ConfigureFeature.  Also, note that if 'iisReinstall' is specified, the  {\uldb SetReinstallMode}{\v MsiSelectionManager_SetReinstallMode} method should be called first. When ConfigureFeature is called, the SelectionManager will attempt to set the 'Action' state of  each component tied to the specified feature to the specified state, as best as possible.  However, there are common situations when the request cannot be fully honored.  For example,  suppose a feature is tied to two components, Component A and Component B (via the   {\uldb FeatureComponents}{\v _msi_FeatureComponents_Table@msi.hlp} table, of course).  Also suppose that Component A is  authored with a 'RunFromSource' option of 'irsLocalOnly', and Component B is 'irsSourceOnly'.  In this case,  if ConfigureFeature is called with a requested state of either 'iisLocal' or 'iisSource', there is no way that  the request can be fully honored for both components.  However, both components will be turned 'ON', with  component A set to iisLocal, and component B set to iisSource.  \par If more than one feature is linked to a single component (a common scenario), the final 'Action' state of  that component will be determined as follows: if at least one feature calls for the component to be installed  locally, it will be installed 'iisLocal'; else, if at least one feature calls for the component to be run from  the source media, it will be installed 'iisSource', else, if at least one feature calls for the removal of  the component, the action state will be 'iisAbsent'. \page #{\footnote MsiSelectionManager_SetComponent} ${\footnote MsiSelectionManager.SetComponent} +{\footnote MsiSelectionManager:SetComponent} K{\footnote SetComponent} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SetComponent Method \line\tx360\tab\fs18\b0{\uldb MsiSelectionManager Object}{\v MsiSelectionManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method is used to request a change in the 'Action' state of a record in the  {\uldb Component}{\v _msi_Component_Table@msi.hlp} table.  \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SetComponent({\i component, state})} \par{\i object}\line Required. The MsiSelectionManager object. \par{\i\b component}\line Required. String name of component item, primary key of Component table. \par{\i\b state}\line Required. Requested action state, one of the following values:\line {\f1 Null (empty)  }:  Requests that no action is to be taken for this item.\line {\f1 iisAbsent    = 0}:  item is to be removed.\line {\f1 iisLocal     = 1}:  item is to be installed locally.\line {\f1 iisSource    = 2}:  item is to be installed from run from the source media.\line {\f1 iisReinstall = 3}: if installed, the item is to be reinstalled in the same state.\line \par\fi0\li0{\b Remarks}\par\li180 The {\uldb InitializeComponents}{\v MsiSelectionManager_InitializeComponents} method must be called before  calling SetComponent.  Also, note that if 'iisReinstall' is specified, the  {\uldb SetReinstallMode}{\v MsiSelectionManager_SetReinstallMode} method should be called first. \page #{\footnote MsiDirectoryManager_Object} ${\footnote MsiDirectoryManager Object} K{\footnote MsiDirectoryManager} +{\footnote Class:MsiDirectoryManager} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiDirectoryManager Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The MsiDirectoryManager object, associated with the MsiEngine object,  manages the in-memory Directory table. It loads the table from the database  and stores references to MsiPath objects for each entry in temporary  columns.  The source  and target path objects may be retrieved from the table and target path  objects may be reset to different paths.  Changing the value of a target  path object updates any duplicates or children of that path  appropriately. \par\li0{\b Properties}\par\li180 {\uldb DirectoryTable}{\v MsiDirectoryManager_DirectoryTable}\line \par\li0{\b Methods}\par\li180 {\uldb LoadDirectoryTable}{\v MsiDirectoryManager_LoadDirectoryTable}\line {\uldb FreeDirectoryTable}{\v MsiDirectoryManager_FreeDirectoryTable}\line {\uldb CreateTargetPaths}{\v MsiDirectoryManager_CreateTargetPaths}\line {\uldb CreateSourcePaths}{\v MsiDirectoryManager_CreateSourcePaths}\line {\uldb GetTargetPath}{\v MsiDirectoryManager_GetTargetPath}\line {\uldb SetTargetPath}{\v MsiDirectoryManager_SetTargetPath}\line {\uldb GetSourcePath}{\v MsiDirectoryManager_GetSourcePath}\line \page #{\footnote MsiDirectoryManager_DirectoryTable} ${\footnote MsiDirectoryManager.DirectoryTable} +{\footnote MsiDirectoryManager:DirectoryTable} K{\footnote DirectoryTable} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DirectoryTable Property \line\tx360\tab\fs18\b0{\uldb MsiDirectoryManager Object}{\v MsiDirectoryManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the loaded Directory table as an MsiTable object.  Returns an object set to Nothing if table is not loaded. Read only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .DirectoryTable} \par{\i object}\line Required. The MsiDirectoryManager object. \page #{\footnote MsiDirectoryManager_LoadDirectoryTable} ${\footnote MsiDirectoryManager.LoadDirectoryTable} +{\footnote MsiDirectoryManager:LoadDirectoryTable} K{\footnote LoadDirectoryTable} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b LoadDirectoryTable Method \line\tx360\tab\fs18\b0{\uldb MsiDirectoryManager Object}{\v MsiDirectoryManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Loads the {\uldb Directory table}{\v _msi_Directory_Table@msi.hlp} into memory and adds temporary columns to hold the path objects. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .LoadDirectoryTable()} \par{\i object}\line Required. The MsiDirectoryManager object. \par\fi0\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote MsiDirectoryManager_FreeDirectoryTable} ${\footnote MsiDirectoryManager.FreeDirectoryTable} +{\footnote MsiDirectoryManager:FreeDirectoryTable} K{\footnote FreeDirectoryTable} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FreeDirectoryTable Method \line\tx360\tab\fs18\b0{\uldb MsiDirectoryManager Object}{\v MsiDirectoryManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Frees the in-memory directory table along the the temporary columns holding the path objects.  There is no persistent information to be written to the database. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .FreeDirectoryTable({\i name, path})} \par{\i object}\line Required. The MsiDirectoryManager object. \page #{\footnote MsiDirectoryManager_CreateTargetPaths} ${\footnote MsiDirectoryManager.CreateTargetPaths} +{\footnote MsiDirectoryManager:CreateTargetPaths} K{\footnote CreateTargetPaths} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateTargetPaths Method \line\tx360\tab\fs18\b0{\uldb MsiDirectoryManager Object}{\v MsiDirectoryManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Creates the path objects for each target directory and puts the object  references in the temporary column added for the target path objects.  When not in Admin mode, defines properties for each target directory.  Target paths are resolved for each entry in the table in the  following way: \line\line Admin mode:\par\li500 {\b Roots:} If no property is defined and the entry is a root of the table,  an error will occur. \line\line {\b Non-roots:} If the entry is not a root, the path  is resolved to be the value of  DefaultDir appended to the path resolved  for the Directory_Parent entry. \par\li180 Non-Admin mode:\par\li500 {\b Properties:} If a property by the name of the Directory value  is defined, the path is resolved to its value. \line\line {\b Roots:} If no property is defined and the entry is a root of the table,  the path is resolved to the value of the {\uldb ROOTDRIVE}{\v Property_ROOTDRIVE}  property. \line\line {\b Non-roots:} If no property is defined and the entry is not a root, the path  is resolved to be the value of  DefaultDir appended to the path resolved  for the Directory_Parent entry. \line \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateTargetPaths()} \par{\i object}\line Required. The MsiDirectoryManager object. \page #{\footnote MsiDirectoryManager_CreateSourcePaths} ${\footnote MsiDirectoryManager.CreateSourcePaths} +{\footnote MsiDirectoryManager:CreateSourcePaths} K{\footnote CreateSourcePaths} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateSourcePaths Method \line\tx360\tab\fs18\b0{\uldb MsiDirectoryManager Object}{\v MsiDirectoryManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Creates the path objects for each source directory and puts the object  references in the temporary column added for the source path objects.  The source paths are resolved for each entry in the Directory table  in the following way: \line\line {\b Roots:} The value in the DefaultDir field is  assumed to be the name of the property defining the full path of the  directory.  If the property is not defined, the value of the  {\i defaultPath} argument is used.  If this argument is an empty string,  an error will occur. \line\line {\b Non-roots:} The path of a non-root is resolved to be the value of  DefaultDir appended to the path resolved  for the Directory_Parent entry.  \line \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateSourcePaths({\i defaultPath})} \par{\i object}\line Required. The MsiDirectoryManager object. \par{\i defaultPath}\line Required. The default path used for source roots when the properties  for those roots are undefined.  If an empty string is passed,  an error will occur when a source root property is undefined. \par\fi0\li0{\b Remarks}\par\li180 During a cabinet install, this method only validates the value of the  {\uldb SOURCEDIR}{\v Property_SOURCEDIR} property. \page #{\footnote MsiDirectoryManager_GetTargetPath} ${\footnote MsiDirectoryManager.GetTargetPath} +{\footnote MsiDirectoryManager:GetTargetPath} K{\footnote GetTargetPath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetTargetPath Method \line\tx360\tab\fs18\b0{\uldb MsiDirectoryManager Object}{\v MsiDirectoryManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the MsiPath object associated with the named target directory.  If the name does not exist or if the target path objects have not been created, an empty object is returned. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetTargetPath({\i name})} \par{\i object}\line Required. The MsiDirectoryManager object. \par{\i\b name}\line Required. Unique name associated with directory row, primary key. \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiDirectoryManager_SetTargetPath} ${\footnote MsiDirectoryManager.SetTargetPath} +{\footnote MsiDirectoryManager:SetTargetPath} K{\footnote SetTargetPath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SetTargetPath Method \line\tx360\tab\fs18\b0{\uldb MsiDirectoryManager Object}{\v MsiDirectoryManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Changes the path specification for the MsiPath object associated  with a named target directory in the in-memory Directory table.  Also, the path specifications of all other path objects in the table  that are either  children of or equivalent to the changed path are updated to reflect  the change.  The properties for each affected path are also updated.  In addition, {\uldb RecostDirectory}{\v MsiSelectionManager_RecostDirectory}  is called for each affected path. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SetTargetPath({\i name, path})} \par{\i object}\line Required. The MsiDirectoryManager object. \par{\i\b name}\line Required. Unique name associated with directory row, primary key. \par{\i\b path}\line Required. The complete path specification for the directory. \par\fi0\li0{\b Remarks}\par\li180 If an error occurs in this method, all updated paths and properties are reverted to  their previous values, and RecostDirectory is called again for each updated path.  Therefore, it is safe to treat errors returned by this  method as non-fatal. \page #{\footnote MsiDirectoryManager_GetSourcePath} ${\footnote MsiDirectoryManager.GetSourcePath} +{\footnote MsiDirectoryManager:GetSourcePath} K{\footnote GetSourcePath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetSourcePath Method \line\tx360\tab\fs18\b0{\uldb MsiDirectoryManager Object}{\v MsiDirectoryManager_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 See {\uldb MsiGetSourcePath}{\v _msi_MsiGetSourcePath@msi.hlp}. The 'name' parameter  in this method is equivalent to the 'szFolder' parameter in MsiGetSourcePath. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetSourcePath({\i name})} \par{\i object}\line Required. The MsiDirectoryManager object. \par{\i\b name}\line Required. Unique name associated with directory row, primary key. \par\fi0\li0{\b Remarks}\par\li180 {\uldb LoadDirectoryTable}{\v MsiDirectoryManager_LoadDirectoryTable}  must be called with {\i addSourcePath} set to true before  this method is called. \line\line During a cabinet install, this method always returns an MsiPath object representing  the path defined by the {\uldb SOURCEDIR}{\v Property_SOURCEDIR} property. \page #{\footnote MsiHandler_Object} ${\footnote MsiHandler Object} K{\footnote MsiHandler} +{\footnote Class:MsiHandler} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiHandler Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 MsiHandler is the class handling the messages sent by the engine. The handler has no interface in the  direction of the dialogs, since a generic dialog has no need of talking to the handler. The handler in  response to the actions and messages received from the engine starts wizard sequences, puts up individual  modal or modeless dialogs, posts progress messages, shows error messages and performs custom actions. After creating the Handler object, it must be initialized before any other method or property is used.  This initialization happens through the Initialize method of the Engine.  If any method or property is attempted on an uninitialized Handler object it will assert.  Before initialization the Handler object has no access to the Engine or Services,  therefore it can not create or send a reasonable error message.  At the end of its life a Handler object has to be terminated before it is destroyed.  This termination is performed through the Terminate method of the Engine. \par\li0{\b Methods}\par\li180 {\uldb Break}{\v MsiHandler_Break}\line {\uldb DoAction}{\v MsiHandler_DoAction}\line {\uldb Message}{\v MsiHandler_Message}\line \page #{\footnote MsiDialogHandler_Object} ${\footnote MsiDialogHandler Object} K{\footnote MsiDialogHandler} +{\footnote Class:MsiDialogHandler} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiDialogHandler Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 MsiDialogHandler is the interface of the Handler which creates and deletes dialogs. To get this interface, use the {\uldb GetInterface}{\v MsiBase_GetInterface} method on an existing {\uldb MsiHandler}{\v MsiHandler_Object}. After creating the Handler object, it must be initialized before any other method or property is used.  This initialization happens through the Initialize method of the Engine.  If any method or property is attempted on an uninitialized Handler object it will assert.  Before initialization the Handler object has no access to the Engine or Services,  therefore it can not create or send a reasonable error message.  At the end of its life a Handler object has to be terminated before it is destroyed.  This termination is performed through the Terminate method of the Engine. \par\li0{\b Properties}\par\li180 {\uldb Dialog}{\v MsiDialogHandler_Dialog}\line {\uldb DialogFromWindow}{\v MsiDialogHandler_DialogFromWindow}\line \par\li0{\b Methods}\par\li180 {\uldb AddDialog}{\v MsiDialogHandler_AddDialog}\line {\uldb DialogCreate}{\v MsiDialogHandler_DialogCreate}\line {\uldb RemoveDialog}{\v MsiDialogHandler_RemoveDialog}\line \page #{\footnote MsiHandler_Message} ${\footnote MsiHandler.Message} +{\footnote MsiHandler:Message} K{\footnote Message} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Message Method \line\tx360\tab\fs18\b0{\uldb MsiHandler Object}{\v MsiHandler_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Processes various type of messages and notifications.  See {uldb MsiMessage.Message}{\v MsiMessage_Message}  for message types and return codes. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Message({\i kind, record})} \par{\i object}\line Required. The MsiHandler object. \par{\i\b kind}\line Required. The message type, one of imtEnum, as described below: \par{\i\b record}\line Required. An MsiRecord object containing message-specific data fields. \page #{\footnote MsiHandler_DoAction} ${\footnote MsiHandler.DoAction} +{\footnote MsiHandler:DoAction} K{\footnote DoAction} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DoAction Method \line\tx360\tab\fs18\b0{\uldb MsiHandler Object}{\v MsiHandler_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Request to perform a named action. Normally this is the name of a dialog,  which is then constructed from information queried from the UI database  tables. However, actions may be implemented as functions. When the {\b DoAction}  method is called on the {\b MsiEngine} object and the requested action is not  found, the call is delegated to its {\b MsiHandler} object. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .DoAction({\i action})} \par{\i object}\line Required. The MsiHandler object. \par{\i\b action}\line Required. Name of the action. \page #{\footnote MsiHandler_Break} ${\footnote MsiHandler.Break} +{\footnote MsiHandler:Break} K{\footnote Break} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Break Method \line\tx360\tab\fs18\b0{\uldb MsiHandler Object}{\v MsiHandler_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Asynchronous call to terminate execution of a {\b DoAction} or {\b Message}  method. If a UI window is waiting in a message loop, this call should  indicate that the loop should terminate and return the status: iesUserExit. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Break} \par{\i object}\line Required. The MsiHandler object. \page #{\footnote MsiDialogHandler_DialogCreate} ${\footnote MsiDialogHandler.DialogCreate} +{\footnote MsiDialogHandler:DialogCreate} K{\footnote DialogCreate} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DialogCreate Method \line\tx360\tab\fs18\b0{\uldb MsiDialogHandler Object}{\v MsiDialogHandler_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Creates a blank {\b MsiDialog} object. All internal variables are uninitialized, the dialog object is not ready for any other call  except {\b WindowCreate}. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .DialogCreate({\i type})} \par{\i object}\line Required. The MsiDialogHandler object. \par{\i\b type}\line Required. The {\uldb type}{\v Dialog_Overview} of the desired dialog. \page #{\footnote MsiDialogHandler_Dialog} ${\footnote MsiDialogHandler.Dialog} +{\footnote MsiDialogHandler:Dialog} K{\footnote Dialog} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Dialog Property \line\tx360\tab\fs18\b0{\uldb MsiDialogHandler Object}{\v MsiDialogHandler_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The {\b MsiDialog} object corresponding to the name.  Read only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Dialog({\i name})} \par{\i object}\line Required. The MsiDialogHandler object. \par{\i\b name}\line Required. The string representing the dialog. \page #{\footnote MsiDialogHandler_DialogFromWindow} ${\footnote MsiDialogHandler.DialogFromWindow} +{\footnote MsiDialogHandler:DialogFromWindow} K{\footnote DialogFromWindow} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DialogFromWindow Property \line\tx360\tab\fs18\b0{\uldb MsiDialogHandler Object}{\v MsiDialogHandler_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The {\b MsiDialog} object corresponding to the passed window reference.  Read only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .DialogFromWindow({\i window})} \par{\i object}\line Required. The MsiDialogHandler object. \par{\i\b window}\line Required. WIN: The HWND of the window associated with the dialog. MAC: The WindowPtr of the window associated with the dialog. \page #{\footnote MsiDialogHandler_AddDialog} ${\footnote MsiDialogHandler.AddDialog} +{\footnote MsiDialogHandler:AddDialog} K{\footnote AddDialog} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b AddDialog Method \line\tx360\tab\fs18\b0{\uldb MsiDialogHandler Object}{\v MsiDialogHandler_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Adds a dialog to the handler internal tables. It also initializes the dialog with the data  provided in the record and in the pointers. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .AddDialog({\i dialog, parent, record, controleventtable, controlconditiontable, eventmappingtable})} \par{\i object}\line Required. The MsiDialogHandler object. \par{\i\b dialog}\line Required. Pointer to the previously created blank dialog. \par{\i\b parent}\line Pointer to the parent dialog. Can be null. \par{\i\b record}\line Record of data used to initialize the dialog. Required. The fields of the record correspond to the columns of the {\uldb Dialog Table}{\v _msi_Dialog_Table@msi.hlp} in the same order.\line \par{\i\b controleventtable}\line Pointer to the {\uldb ControlEvent table}{\v _msi_ControlEvent_Table@msi.hlp}. Can be null. \par{\i\b controlconditiontabel}\line Pointer to the {\uldb ControlCondition table}{\v _msi_ControlCondition_Table@msi.hlp}. Can be null. \par{\i\b eventmappingtable}\line Pointer to the {\uldb EventMapping table}{\v _msi_EventMapping_Table@msi.hlp}. Can be null. \page #{\footnote MsiDialogHandler_RemoveDialog} ${\footnote MsiDialogHandler.RemoveDialog} +{\footnote MsiDialogHandler:RemoveDialog} K{\footnote RemoveDialog} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RemoveDialog Method \line\tx360\tab\fs18\b0{\uldb MsiDialogHandler Object}{\v MsiDialogHandler_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Removes a dialog from the handler internal tables. It also destroys the window and the object corresponding to the dialog. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RemoveDialog({\i dialog})} \par{\i object}\line Required. The MsiDialogHandler object. \par{\i\b dialog}\line Required. Pointer to the dialog to be removed. \page #{\footnote MsiDialog_Object} ${\footnote MsiDialog Object} K{\footnote MsiDialog} +{\footnote Class:MsiDialog} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiDialog Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 MsiDialog is the interface of the dialog object visible to the handler.  \par\li0{\b Properties}\par\li180 {\uldb Control}{\v MsiDialog_Control}\line {\uldb Handler}{\v MsiEvent_Handler}\line {\uldb IntegerValue}{\v MsiDialog_IntegerValue}\line {\uldb StringValue}{\v MsiDialog_StringValue}\line \par\li0{\b Methods}\par\li180 {\uldb AddControl}{\v MsiDialog_AddControl}\line {\uldb Attribute}{\v MsiDialog_Attribute}\line {\uldb ControlCreate}{\v MsiDialog_ControlCreate}\line {\uldb EventAction}{\v MsiDialog_EventAction}\line {\uldb Execute}{\v MsiDialog_Execute}\line {\uldb FinishCreate}{\v MsiDialog_FinishCreate}\line {\uldb HandleEvent}{\v MsiDialog_HandleEvent}\line {\uldb PropertyChanged}{\v MsiDialog_PropertyChanged}\line {\uldb RemoveControl}{\v MsiDialog_RemoveControl}\line {\uldb Reset}{\v MsiDialog_Reset}\line {\uldb Visible}{\v MsiDialog_Visible}\line \page #{\footnote MsiDialog_Control} ${\footnote MsiDialog.Control} +{\footnote MsiDialog:Control} K{\footnote Control} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Database Property \line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The {\b MsiControl} object corresponding to the name.  Read only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Control({\i name})} \par{\i object}\line Required. The MsiDialog object. \par{\i\b name}\line Required. The string representing the control. \page #{\footnote MsiDialog_StringValue} ${\footnote MsiDialog.StringValue} +{\footnote MsiDialog:StringValue} K{\footnote StringValue} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Database Property \line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The string value of the dialog.  Read only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .StringValue} \par{\i object}\line Required. The MsiDialog object. \page #{\footnote MsiDialog_IntegerValue} ${\footnote MsiDialog.IntegerValue} +{\footnote MsiDialog:IntegerValue} K{\footnote IntegerValue} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Database Property \line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The integer value of the dialog.  Read only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .IntegerValue} \par{\i object}\line Required. The MsiDialog object. \page #{\footnote MsiDialog_Visible} ${\footnote MsiDialog.Visible} +{\footnote MsiDialog:Visible} K{\footnote Visible} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Visible Method \line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Depending on the argument, shows or hides the dialog. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Visible = {\i show}} \par{\i object}\line Required. The MsiDialog object. \par{\i\b show}\line Required. A Boolean value showing whether to show or hide the dialog. True means show, False means hide. \page #{\footnote MsiDialog_ControlCreate} ${\footnote MsiDialog.ControlCreate} +{\footnote MsiDialog:ControlCreate} K{\footnote ControlCreate} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ControlCreate Method \line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Creates a blank, uninitialized control of the named type. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ControlCreate({\i type})} \par{\i object}\line Required. The MsiDialog object. \par{\i\b type}\line Required. The name of the {\uldb control type}{\v Control_Overview}.  The author can specify a type that does not appear in the above list if there is code for such a custom control. \page #{\footnote MsiDialog_Attribute} ${\footnote MsiDialog.Attribute} +{\footnote MsiDialog:Attribute} K{\footnote Attribute} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Attribute Method \line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A general method allowing to get or set the value of some attributes of the dialog. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Attribute({\i set, attributename, record})} \par{\i object}\line Required. The MsiDialog object. \par{\i\b set}\line Required. A Boolean value showing whether to set or get the value of the named attribute. True means set, False means get. \par{\i\b attributename}\line The name of the {\uldb attribute}{\v Dialog_Overview} to be set or get.  \par{\i\b record}\line Required. The record to be filled in in case of get, or the record of the values to be set. The record contains one field, except in the cases noted in the above table. \page #{\footnote MsiDialog_AddControl} ${\footnote MsiDialog.AddControl} +{\footnote MsiDialog:AddControl} K{\footnote AddControl} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b AddControl Method \line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Adds a control to the dialog internal tables. It also initializes the control with the data  provided in the record. For compatibility with older scripts, if the control is NULL, it is equivalent to calling the {\uldb FinishCreate}{\v MsiDialog_FinishCreate} method.  At least one non-null control has to be added to the dialog, before FinishCreate is called.  \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .AddControl({\i control, record})} \par{\i object}\line Required. The MsiDialog object. \par{\i\b control}\line Required. The pointer to the previously created blank control, or NULL. \par{\i\b record}\line Required. The data used at the initialization of the control. The fields are as follows:\line Name of the control\line Type\line X coordinate\line Y coordinate\line Widht\line Height\line Attributes\line Property associated with the control\line Text\line Next control in the tab order\line Help string\line These fields correspond to those of the {\uldb Control Table}{\v _msi_Control_Table@msi.hlp}.\line \page #{\footnote MsiDialog_FinishCreate} ${\footnote MsiDialog.FinishCreate} +{\footnote MsiDialog:FinishCreate} K{\footnote FinishCreate} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FinishCreate Method \line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Signals to the dialog that we are done adding controls, it  can resolve the next pointers. At least one non-null control has to be added to the dialog, before this method is called.  This method has to be called before any other method can be used on the dialog.  \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .FinishCreate} \par{\i object}\line Required. The MsiDialog object. \page #{\footnote MsiDialog_RemoveControl} ${\footnote MsiDialog.RemoveControl} +{\footnote MsiDialog:RemoveControl} K{\footnote RemoveControl} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RemoveControl Method \line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Removes a control from the dialog internal tables. It does not change the permanent tables!  If some change is needed in those, than you have to do it yourself!  Also it does not check if the removed control was the default button.   \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RemoveControl({\i control})} \par{\i object}\line Required. The MsiDialog object. \par{\i\b control}\line Required. The pointer to the previously created control. \page #{\footnote MsiDialog_Execute} ${\footnote MsiDialog.Execute} +{\footnote MsiDialog:Execute} K{\footnote Execute} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Execute Method \line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Runs a modal dialog. It makes the dialog visible, then waits in the message loop to perform the user's commands.  Returns a record showing the exit status of the dialog. This method should not be called on a modeless dialog. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Execute} \par{\i object}\line Required. The MsiDialog object. \page #{\footnote MsiDialog_Reset} ${\footnote MsiDialog.Reset} +{\footnote MsiDialog:Reset} K{\footnote Reset} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Reset Method \line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Resets the dialog. It instructs all the controls to restore the original value of the properties they have changed. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Reset} \par{\i object}\line Required. The MsiDialog object. \page #{\footnote MsiDialog_Handler} ${\footnote MsiDialog.Handler} +{\footnote MsiDialog:Handler} K{\footnote HANDLER} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Database Property \line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The {\b MsiHandler} object used by the dialog.  Read only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Handler} \par{\i object}\line Required. The MsiDialog object. \page #{\footnote MsiDialog_EventAction} ${\footnote MsiDialog.EventAction} +{\footnote MsiDialog:EventAction} K{\footnote EventAction} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b EventAction Method \line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 It finds all the subscribers of the named event and performs the given action on them. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .EventAction({\i eventname, action})} \par{\i object}\line Required. The MsiDialog object. \par{\i\b eventname}\line Required. The name of the event whose subscribers have to be found. \par{\i\b action}\line Required. The action to be performed on the subscribers of the event. \page #{\footnote MsiDialog_HandleEvent} ${\footnote MsiDialog.HandleEvent} +{\footnote MsiDialog:HandleEvent} K{\footnote HandleEvent} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b HandleEvent Method \line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method triggers a control event. For example when a button is pushed that has to start an event, it uses this method to notify the publisher of the event. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .HandleEvent({\i eventname, argument})} \par{\i object}\line Required. The MsiDialog object. \par{\i\b eventname}\line Required. The name of the event. \par{\i\b argument}\line Required. The argument of the event. \page #{\footnote MsiDialog_PropertyChanged} ${\footnote MsiDialog.PropertyChanged} +{\footnote MsiDialog:PropertyChanged} K{\footnote PropertyChanged} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b PropertyChanged Method \line\tx360\tab\fs18\b0{\uldb MsiDialog Object}{\v MsiDialog_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method is called when a control changes a property value. The method scans the ControlCondition table to see if some action must be taken in response to this change. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .PropertyChanged({\i property, control})} \par{\i object}\line Required. The MsiDialog object. \par{\i\b property}\line The name of the property whose value has changed. Can be null. \par{\i\b control}\line The name of the control that reports the change. Can be null. This is used to avoid a control being called in response to its own change. \page #{\footnote MsiEvent_Object} ${\footnote MsiEvent Object} K{\footnote MsiEvent} +{\footnote Class:MsiEvent} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiEvent Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 MsiEvent is the interface of the dialog object visible to the controls.  \par\li0{\b Properties}\par\li180 {\uldb Control}{\v MsiEvent_Control}\line {\uldb Engine}{\v MsiEvent_Engine}\line {\uldb Handler}{\v MsiEvent_Handler}\line {\uldb IntegerValue}{\v MsiEvent_IntegerValue}\line {\uldb StringValue}{\v MsiEvent_StringValue}\line \par\li0{\b Methods}\par\li180 {\uldb Attribute}{\v MsiEvent_Attribute}\line {\uldb ControlActivated}{\v MsiEvent_ControlActivated}\line {\uldb EventAction}{\v MsiEvent_EventAction}\line {\uldb HandleEvent}{\v MsiEvent_HandleEvent}\line {\uldb PropertyChanged}{\v MsiEvent_PropertyChanged}\line {\uldb PublishEvent}{\v MsiEvent_PublishEvent}\line {\uldb ReadyToChangeFocus}{\v MsiEvent_ReadyToChangeFocus}\line {\uldb RegisterControlEvent}{\v MsiEvent_RegisterControlEvent}\line {\uldb SetFocus}{\v MsiEvent_SetFocus}\line \page #{\footnote MsiEvent_Control} ${\footnote MsiEvent.Control} +{\footnote MsiEvent:Control} K{\footnote Control} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Database Property \line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The {\b MsiControl} object corresponding to the name.  Read only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Control({\i name})} \par{\i object}\line Required. The MsiEvent object. \par{\i\b name}\line Required. The string representing the control. \page #{\footnote MsiEvent_Engine} ${\footnote MsiEvent.Engine} +{\footnote MsiEvent:Engine} K{\footnote ENGINE} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Engine Property \line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The {\b MsiEngine} object used by the event.   Read only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Engine} \par{\i object}\line Required. The MsiEvent object. \page #{\footnote MsiEvent_StringValue} ${\footnote MsiEvent.StringValue} +{\footnote MsiEvent:StringValue} K{\footnote StringValue} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Database Property \line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The string value of the event.  Read only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .StringValue} \par{\i object}\line Required. The MsiEvent object. \page #{\footnote MsiEvent_IntegerValue} ${\footnote MsiEvent.IntegerValue} +{\footnote MsiEvent:IntegerValue} K{\footnote IntegerValue} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Database Property \line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The integer value of the event.  Read only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .IntegerValue} \par{\i object}\line Required. The MsiEvent object. \page #{\footnote MsiEvent_Handler} ${\footnote MsiEvent.Handler} +{\footnote MsiEvent:Handler} K{\footnote HANDLER} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Database Property \line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The {\b MsiHandler} object used by the dialog.  Read only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Handler} \par{\i object}\line Required. The MsiEvent object. \page #{\footnote MsiEvent_PropertyChanged} ${\footnote MsiEvent.PropertyChanged} +{\footnote MsiEvent:PropertyChanged} K{\footnote PropertyChanged} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b PropertyChanged Method \line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method is called when a control changes a property value. The method scans the ControlCondition table to see if some action must be taken in response to this change. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .PropertyChanged({\i property, control})} \par{\i object}\line Required. The MsiEvent object. \par{\i\b property}\line The name of the property whose value has changed. Can be null. \par{\i\b control}\line The name of the control that reports the change. Can be null. This is used to avoid a control being called in response to its own change. \page #{\footnote MsiEvent_ControlActivated} ${\footnote MsiEvent.ControlActivated} +{\footnote MsiEvent:ControlActivated} K{\footnote ControlActivated} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ControlActivated Method \line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method is called when a control is activated (e.g. a button is pushed). The method scans the ControlEvent table to see if some event is triggered by this control. If an event is found, the argument is formatted using {\uldb FormatText}{\v MsiEngine_FormatText}. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ControlActivated({\i control})} \par{\i object}\line Required. The MsiEvent object. \par{\i\b control}\line The name of the control that was actived. \page #{\footnote MsiEvent_RegisterControlEvent} ${\footnote MsiEvent.RegisterControlEvent} +{\footnote MsiEvent:RegisterControlEvent} K{\footnote RegisterControlEvent} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RegisterControlEvent Method \line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method is called by a control to register/unregister as a publisher of some event. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RegisterControlEvent({\i control, toregister, event})} \par{\i object}\line Required. The MsiEvent object. \par{\i\b control}\line The name of the control registering/unregistering. \par{\i\b toregister}\line A Boolean value showing whether the control is registering or unregistering. \par{\i\b event}\line The name of the event. \page #{\footnote MsiEvent_HandleEvent} ${\footnote MsiEvent.HandleEvent} +{\footnote MsiEvent:HandleEvent} K{\footnote HandleEvent} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b HandleEvent Method \line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method triggers a control event. For example when a button is pushed that has to start an event, it uses this method to notify the publisher of the event. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .HandleEvent({\i eventname, argument})} \par{\i object}\line Required. The MsiEvent object. \par{\i\b eventname}\line Required. The name of the event. \par{\i\b argument}\line Required. The argument of the event. \page #{\footnote MsiEvent_Escape} ${\footnote MsiEvent.Escape} +{\footnote MsiEvent:Escape} K{\footnote Escape} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Escape Method \line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method is called when the Escape key or the close button is hit on a dialog. The method pushes the designated default button. (see {\uldb Dialog Table}{\v _msi_Dialog_Table@msi.hlp}) \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Escape} \par{\i object}\line Required. The MsiEvent object. \page #{\footnote MsiEvent_PublishEvent} ${\footnote MsiEvent.PublishEvent} +{\footnote MsiEvent:PublishEvent} K{\footnote PublishEvent} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b PublishEvent Method \line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Finds all the subscribers of an event and notifies them that the event was published. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .PublishEvent({\i eventname, argument})} \par{\i object}\line Required. The MsiEvent object. \par{\i\b eventname}\line Required. The name of the event whose subscribers have to be found. \par{\i\b argument}\line Required. A record representing the argument of the event. \page #{\footnote MsiEvent_Attribute} ${\footnote MsiEvent.Attribute} +{\footnote MsiEvent:Attribute} K{\footnote Attribute} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Attribute Method \line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A general method allowing to get or set the value of some attributes of the dialog. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Attribute({\i set, attributename, record})} \par{\i object}\line Required. The MsiEvent object. \par{\i\b set}\line Required. A Boolean value showing whether to set or get the value of the named attribute. True means set, False means get. \par{\i\b attributename}\line The name of the {\uldb attribute}{\v Dialog_Overview} to be set or get.  \par{\i\b record}\line Required. The record to be filled in in case of get, or the record of the values to be set. The record contains one field, except in the cases noted in the above table. \page #{\footnote MsiEvent_EventAction} ${\footnote MsiEvent.EventAction} +{\footnote MsiEvent:EventAction} K{\footnote EventAction} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b EventAction Method \line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 It finds all the subscribers of the named event and performs the given action on them. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .EventAction({\i eventname, action})} \par{\i object}\line Required. The MsiEvent object. \par{\i\b eventname}\line Required. The name of the {\uldb event}{\v ControlEvent_Overview} whose subscribers have to be found. \par{\i\b action}\line Required. The action to be performed on the subscribers of the event. \page #{\footnote MsiEvent_SetFocus} ${\footnote MsiEvent.SetFocus} +{\footnote MsiEvent:SetFocus} K{\footnote SetFocus} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SetFocus Method \line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Sets the focus to the named control. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SetFocus({\i control})} \par{\i object}\line Required. The MsiEvent object. \par{\i\b control}\line Required. The name of the control receiving focus. \page #{\footnote MsiEvent_ReadyToChangeFocus} ${\footnote MsiEvent.ReadyToChangeFocus} +{\footnote MsiEvent:ReadyToChangeFocus} K{\footnote ReadyToChangeFocus} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ReadyToChangeFocus Method \line\tx360\tab\fs18\b0{\uldb MsiEvent Object}{\v MsiEvent_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns a boolean indicating if the control presently having focus is willing to give it up. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ReadyToChangeFocus} \par{\i object}\line Required. The MsiEvent object. \page #{\footnote MsiControl_Object} ${\footnote MsiControl Object} K{\footnote MsiControl} +{\footnote Class:MsiControl} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiControl Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 MsiControl is the general interface of the control objects.  \par\li0{\b Properties}\par\li180 {\uldb CanTakeFocus}{\v MsiControl_CanTakeFocus}\line {\uldb Dialog}{\v MsiControl_Dialog}\line {\uldb IntegerValue}{\v MsiControl_IntegerValue}\line {\uldb StringValue}{\v MsiControl_StringValue}\line \par\li0{\b Methods}\par\li180 {\uldb Attribute}{\v MsiControl_Attribute}\line {\uldb GetIndirectPropertyFromDatabase}{\v MsiControl_GetIndirectPropertyFromDatabase}\line {\uldb GetPropertyFromDatabase}{\v MsiControl_GetPropertyFromDatabase}\line {\uldb HandleEvent}{\v MsiControl_HandleEvent}\line {\uldb ReadyToLooseFocus}{\v MsiControl_ReadyToLoseFocus}\line {\uldb SetFocus}{\v MsiControl_SetFocus}\line {\uldb SetPropertyInDatabase}{\v MsiControl_SetPropertyInDatabase}\line {\uldb Undo}{\v MsiControl_Undo}\line {\uldb WindowMessage}{\v MsiControl_WindowMessage}\line \page #{\footnote MsiControl_Dialog} ${\footnote MsiControl.Dialog} +{\footnote MsiControl:Dialog} K{\footnote Dialog} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Dialog Property \line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The {\b MsiEvent} interface of the dialog used by the control.  Read only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Dialog} \par{\i object}\line Required. The MsiControl object. \page #{\footnote MsiControl_StringValue} ${\footnote MsiControl.StringValue} +{\footnote MsiControl:StringValue} K{\footnote StringValue} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Database Property \line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The string value of the control.  Read only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .StringValue} \par{\i object}\line Required. The MsiControl object. \page #{\footnote MsiControl_IntegerValue} ${\footnote MsiControl.IntegerValue} +{\footnote MsiControl:IntegerValue} K{\footnote IntegerValue} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Database Property \line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The integer value of the control.  Read only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .IntegerValue} \par{\i object}\line Required. The MsiControl object. \page #{\footnote MsiControl_CanTakeFocus} ${\footnote MsiControl.CanTakeFocus} +{\footnote MsiControl:CanTakeFocus} K{\footnote CanTakeFocus} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CanTakeFocus Property \line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A Boolean value showing whether the control can take focus. This value is platform dependent! It can return different values depending on the operating system. Read only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CanTakeFocus} \par{\i object}\line Required. The MsiControl object. \page #{\footnote MsiControl_Attribute} ${\footnote MsiControl.Attribute} +{\footnote MsiControl:Attribute} K{\footnote Attribute} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Attribute Method \line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A general method allowing to get or set the value of some attributes of the control. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Attribute({\i set, attributename, record})} \par{\i object}\line Required. The MsiEvent object. \par{\i\b set}\line Required. A Boolean value showing whether to set or get the value of the named attribute. True means set, False means get. \par{\i\b attributename}\line The name of the {\uldb attribute}{\v Control_Overview} to be set or get.  \par{\i\b record}\line Required. The record to be filled in in case of get, or the record of the values to be set. The record contains one field, except in the cases noted in the above table. \page #{\footnote MsiControl_HandleEvent} ${\footnote MsiControl.HandleEvent} +{\footnote MsiControl:HandleEvent} K{\footnote HandleEvent} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b HandleEvent Method \line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Notifies the publisher of an event that the event has taken place. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .HandleEvent({\i eventname, argument})} \par{\i object}\line Required. The MsiControl object. \par{\i\b eventname}\line Required. The name of the {\uldb event}{\v ControlEvent_Overview}. \par{\i\b argument}\line The argument of the event. \page #{\footnote MsiControl_Undo} ${\footnote MsiControl.Undo} +{\footnote MsiControl:Undo} K{\footnote Undo} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Undo Method \line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method is called when the dialog is reset. It resets the property associated with the control to its original value. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Undo} \par{\i object}\line Required. The MsiControl object. \page #{\footnote MsiControl_SetPropertyInDatabase} ${\footnote MsiControl.SetPropertyInDatabase} +{\footnote MsiControl:SetPropertyInDatabase} K{\footnote SetPropertyInDatabase} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SetPropertyInDatabase Method \line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Sets the value of the associated property in the database. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SetPropertyInDatabase} \par{\i object}\line Required. The MsiControl object. \page #{\footnote MsiControl_GetPropertyFromDatabase} ${\footnote MsiControl.GetPropertyFromDatabase} +{\footnote MsiControl:GetPropertyFromDatabase} K{\footnote GetPropertyFromDatabase} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetPropertyFromDatabase Method \line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Gets the value of the associated property from the database. If the control is not an active control, this method does nothing. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetPropertyFromDatabase} \par{\i object}\line Required. The MsiControl object. \page #{\footnote MsiControl_GetIndirectPropertyFromDatabase} ${\footnote MsiControl.GetIndirectPropertyFromDatabase} +{\footnote MsiControl:GetIndirectPropertyFromDatabase} K{\footnote GetIndirectPropertyFromDatabase} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetIndirectPropertyFromDatabase Method \line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Gets the value of the associated indirect property from the database. If the control is not an active control or of it is not tied to an indirect property, this method does nothing. \line An indirect property means that the name given points to the name of an other property and the value of this second property is displayed/changed by the control. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetIndirectPropertyFromDatabase} \par{\i object}\line Required. The MsiControl object. \page #{\footnote MsiControl_SetFocus} ${\footnote MsiControl.SetFocus} +{\footnote MsiControl:SetFocus} K{\footnote SetFocus} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SetFocus Method \line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Sets the focus to this control. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SetFocus} \par{\i object}\line Required. The MsiControl object. \page #{\footnote MsiControl_WindowMessage} ${\footnote MsiControl.WindowMessage} +{\footnote MsiControl:WindowMessage} K{\footnote WindowMessage} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b WindowMessage Method \line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A general method notifying the object that the corresponding window received a message. The object can decide to perform some activity instead of the system or in addition to the system, or ignore the message. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .WindowMessage({\i message, wParam, lParam})} \par{\i object}\line Required. The MsiControl object. \par{\i message}\line Required. An integer identifying the message type. \par{\i wParam}\line Required. An integer representing the first argument of the message. Can be null, depending on the type of message. \par{\i lParam}\line Required. An integer representing the second argument of the message. Can be null, depending on the type of message. \page #{\footnote MsiControl_ReadyToLoseFocus} ${\footnote MsiControl.ReadyToLoseFocus} +{\footnote MsiControl:ReadyToLoseFocus} K{\footnote ReadyToLoseFocus} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ReadyToLoseFocus Method \line\tx360\tab\fs18\b0{\uldb MsiControl Object}{\v MsiControl_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns a boolean indicating if the control is willing to give up focus. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ReadyToLoseFocus} \par{\i object}\line Required. The MsiControl object. \page #{\footnote MsiFoo_Object} ${\footnote MsiFoo Object} K{\footnote MsiFoo} +{\footnote Class:MsiFoo} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiFoo Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 !!Desciptive text here!! !!Next paragraph desciptive text here!! \par\li0{\b Properties}\par\li180 {\uldb SomeProperty}{\v MsiFoo_SomeProperty}\line \par\li0{\b Methods}\par\li180 {\uldb SomeMethod}{\v MsiFoo_SomeMethod}\line \page #{\footnote MsiFoo_SomeMethod} ${\footnote MsiFoo.SomeMethod} +{\footnote MsiFoo:SomeMethod} K{\footnote SomeMethod} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SomeMethod Method \line\tx360\tab\fs18\b0{\uldb MsiFoo Object}{\v MsiFoo_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 !!Desciption here.!! \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SomeMethod({\i arg1, arg2})} \par{\i object}\line Required. The MsiFoo object. \par{\i\b arg1}\line Required. !!Description of a required argument.!! \par{\i\b arg2}\line Optional. !!Description of an optional argument.!! \par\fi0\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote MsiFoo_SomeProperty} ${\footnote MsiFoo.SomeProperty} +{\footnote MsiFoo:SomeProperty} K{\footnote SomeProperty} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SomeProperty Property \line\tx360\tab\fs18\b0{\uldb MsiFoo Object}{\v MsiFoo_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 !!Desciption here.!! \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SomeProperty} \par{\i object}\line Required. The MsiFoo object. \par\fi0\li0{\b Remarks}\par\li180 !!Additional notes!!  \page
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\help\general.rtf ===
{\rtf1\ansi {\fonttbl{\f0\fswiss Arial;}{\f1\fmodern Courier New;}} {\colortbl;} \fs20 #{\footnote MsiAutoContents} ${\footnote Msi Automation Contents} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Microsoft Installer Help Contents \par}\li180 NOTE: If you see this topic initially instead of the outline content view,  make sure that msiauto.cnt is in the same directory as msiauto.hlp the  first time you run help. \par\li0{\b\uldb Objects}{\v Msi_Objects} \par\li0{\b\uldb Properties}{\v Property_Contents} \par\li0{\b\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par\li0{\b\uldb Actions}{\v _msi_Installation_Database_Actions_List@msi.hlp} \par\li0{\uldb Installer Components}{\v Installer_Components} \par\li0{\uldb Released Components}{\v Release_Components} \par\li0{\uldb Command Line Options}{\v CommandLine_Options} \par\li0{\uldb REGMSI.EXE Tool}{\v RegMsi_Tool} \par\li0{\uldb MSIALTER.EXE Tool}{\v MsiAlter_Tool} \par\li0{\uldb MSIVAL.EXE Tool}{\v MsiVal_Tool} \par\li0{\uldb MSIDB.EXE Tool}{\v MsiTable_Tool} \par\li0{\uldb MSIINFO.EXE Tool}{\v MsiInfo_Tool} \par\li0{\uldb MSITRAN.EXE Tool}{\v MsiTran_Tool} \par\li0{\uldb MSIMERG.EXE Tool}{\v MsiMerge_Tool} \par\li0{\uldb Automating C++ method}{\v Coding_AutomateMethod} \par\li0{\uldb Help File Syntax}{\v Coding_HelpFile} \line\line {\b Obsolete tools}\line \par\li0{\uldb MSIDBVAL.EXE Tool}{\v MsiDbVal_Tool} \par\li0{\uldb MSITABLE.EXE Tool}{\v MsiDb_Tool} \page #{\footnote NoHelp} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Under Construction \line\tx360\tab\fs18\b0{\uldb Automation Overview}{\v MsiAutoOverview} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 No help is available for this topic yet. \page #{\footnote Msi_Obsolete} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Obsolete Method or Property \line\tx360\tab\fs18\b0{\uldb Automation Overview}{\v MsiAutoOverview} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method or property has been replaced.  It is retained temporarily until code and tests are updated. \page #{\footnote What_Is} ${\footnote What Is The Microsoft Installer?} K{\footnote Microsoft Installer} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b What Is The Microsoft Installer? \par}\li180 The  Microsoft Installer is an all new installation technology designed from the  ground up using COM and relational database principles; targeting the Windows 95,  Windows NT, and PowerMac platforms (32-bit only).  Utilizing relational database  principles frees the Microsoft Installer from the myriad parsers previously  required to interpret an Acme STF, making the code smaller and faster.  In addition,  databases are easily merged.  Components can be added to an existing installation  and be supported as if they were authored here at Microsoft. \par\li0{\b Reduced Overhead}\par\li180 The Microsoft Installer's components are shared system  components.  In the near term Microsoft Installer components will still need to be  shipped, but they may not be installed.  Even if installed, there is only ever  one copy as opposed to the per product copies of Acme which tend to litter a user's  computer over time.  Eventually, Darwin components should make their way into the  operating system, freeing product groups from having to ship them at all. \par\li180 Regarding speed, the Microsoft Installer uses pre-defined queries.  Two substantial  advantages result from this design: processing is file based rather than in memory  and no parsing is required.  Acme uses an in memory model, meaning an entire STF  is read into memory for processing.  Therefore, the memory footprint is proportional  to the complexity of a product's installation.  The Microsoft Installer, on the other  hand, loads into memory only those database tables required for the task at hand.  So the memory footprint is greatly reduced.  Rather than the multitude of parsers  Acme supports for all its different actions, the Microsoft Installer uses pre-defined  queries and fetching.  Very little overhead and faster processing are the result. \par\li180 Perceived performance is also improved by performing background searching and costing.  While a user navigates through the interface, the Microsoft Installer is searching  for previously installed products, compliant products (i.e., CCP), etc.  Also in the  background the Microsoft Installer is adjusting initial costing estimates,  accounting for files being replaced to improve disk space calculations.  Performing  these tasks in the background alleviates the need to make users explicitly wait. \par\li0{\b Easier Authoring}\par\li180 A multitude of schemes exist throughout Microsoft to facilitate Acme authoring.  These  were born out of the inherent complexities of the Acme STF as well as the pronounced  lack of formal support.  The Microsoft Installer addresses these by providing an  integrated authoring environment, code named Scopes.  Scopes is a separate yet  parallel effort with a similar time frame as the installer.  Two of the major  goals for Scopes are to provide a clear migration path from Acme and to support  buttom up authoring.  A semi-interactive conversion utility between Acme's *.STF and the  Microsoft Installer's *.MSI is provided.  Because of the radically different paradigms  used by these two products, the process does not achieve 100 percent conversion.  But  all of the content of an *.STF (i.e., files, registry entries, shortcuts, etc.)  gets converted as well as some of the logic.  In bottom up authoring, a component  such as Graph can be authored and tested independently.  Once completed, the Graph  component can be imported into a larger authoring effort such as Excel.  Additional  authoring is required to wire up the dependencies between Graph and other components,  but the logic for installing Graph does not change. \par\li0{\b Upgrading}\par\li180 In order to reduce the pain associated with upgrading, the Microsoft Installer provides  support for moving files and folders as well as reading and propagating registry  settings.  REcognizing that locations of product components change over time, the Microsoft  Installer facilitates keeping up.  User settings files (e.g., *.ACL, *.FAV) and template  folder hierarchies are two examples.  Similarly, registry organization changes  over time.  Registry based settings made in the past should be preserved when upgrading.  For these reasons, the Microsoft Installer provides support for detecting and propagating  registry settings to preserve behavior. \par\li0{\b Administration}\par\li180 Like the Office business unit, many business units within Microsoft are facing  previous versions of their own products as their largest competitor.  Though an  envious position to be in, it has its problems.  Maintaining a steady revenue  stream in such a situation requires establishing some form of annuity model where  customers pay a periodic fee to Microsoft for products and services.  This is  particularly true for corporate sales; whether small, medium, or large corporations.  The Microsoft Installer addresses this new market landscape by providing a host of  administration features like an integrated Network Installation Wizard for creating  network installations, an Installation Script Wizard for creating one or more  department specific scripts to be run from a network installation, the ability  to add corporate specific templates to an existing network installation and have  them managed like intrinsic components, silent installations, tight integration with  SMS, and more. \par\li0{\b Wizard User Interface}\par\li180 Though authorable, the default user interface is a wizard.  Users may go back and  forth through a consistent set of dialogs any number of times, making changes along  the way or viewing what the Microsoft Installer has chosen.  Not until the "Install  Now" button is clicked are a user's choices cast in stone.  Special emphasis has been  placed on providing both novice and advanced paths through the user interface.  For  novice users, the novice path is easier than Acme while advanced users have more  flexibility when taking the advanced path. \par\li0{\b Pre-Installation}\par\li180 OEM pre-installation of Microsoft products is an over growing business and one which  Acme does not address very well.  Coincidentally, many corporations have a centralized  purchasing and deployment center which employs similar techniques as OEMs to get new  machiens pre-configured and tested before rolling out to end users.  Both of these  scenarios are addressed by the Microsoft Installer's build int pre-installation  support.  This support creates an image directly, without having to take before  and after snapshots of a reference machine to derive file and registry differences. \par\li0{\b Intra(er)net}\par\li180 The Internet offers a pervasive low cost infrastructure for distributing product updates  as well as content.  The Microsoft Installer, because of its database underpinnings,  allows for the modification of existing components or the addition of new components  without distruption.  Once modified or introduced, these components behave as if they  were authored and shipped with theoriginal product.  This capability dramatically  simplifies and reduces the cost of letter releases.  Plus, a new vehicle is  created for disseminating product content not mainstream enough to make the CD  content bar. \par\li180 Distribution via the Internet can be accomplished with the Microsoft Installer using  a general concept known as launchers.  Launchers are executables responsible for  bootstrapping Microsoft Installer compnents.  One way to package up an Internet  installation is to stuff into the resource section of a launcher a table file  containing authored installation logic, a cabinet file, and properties to set  conditions.  The Microsoft Installer then runs directly out of the launcher's  resource section.  IN this way, a single file can be downloaded from the Internet  then an installation can be invoked. \par\li0{\b OLE Automation}\par\li180 For the ultimate in flexibility, the Microsoft Installer provides an OLE automation  wrapper for all of its COM interfaces.  While quite useful inside Microsoft for  testing purposes, the automation layer also offers corporations with advanced IS  departments a framework around which they cna build even more sophisticated  deployment schemes than the Microsoft Installer will ever consider. \page #{\footnote Supported_Platforms} ${\footnote Supported Platforms} K{\footnote Supported Platforms} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Supported Platforms \par}\li180 The Microsoft Installer is a core code application.  This is accomplished by centralizing  all platform specific code in the Services component where low level file and operating  system functionality resides.  Above that layer in the Services component, the rest of  the Microsoft Installer's code is platform independent.  Using this approach, the  platforms support by the Microsoft Installer include the following 32-bit only platforms: \line {\b Windows 95} \line {\b Windows 98} \line {\b Windows NT 4.0}\tab (x86, Alpha) \line {\b Windows NT 5.0}\tab (x86, Alpha) \page #{\footnote Localize} ${\footnote Localization} K{\footnote Localization} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Localization \par}\li180 None of the Microsoft Installer's components contain any resources requiring localization.  The user interface is authored as part of a Microsoft Installer installation  database, so visible text resides in the database.  Error strings also reside  in the installation database.  In addition to abstracting out all strings form  within the Installer's components, the Microsoft Installer is also DBCS enabled.  As the Microsoft Installer loads it checks the operating system to see if DBCS is  turned on.  If it is then it loads code to handle double byte characters as part  of its string object.  However, if a user's system is not DBCS enabled then the  Microsoft Installer does not incur the performance penalty of loading double byte  character handling code. \page #{\footnote Installer_Components} ${\footnote Installer Components} K{\footnote Components} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Microsoft Installer Components \par}\li180 Microsoft Installer has been developed as a set of shared components:   {\uldb Automation}{\v Automate_Info},  {\uldb Engine}{\v ENGINE_Info}, {\uldb Handler}{\v HANDLER_Info},  {\uldb Services}{\v SERVICES_Info}.  These components are DLLs that expose COM objects.  These objects are accessible  from a simple bootstrapper executable known as a {\uldb Launcher}{\v Launcher_Info},  from C++ programs, or from VBA applications using the OLE automation facility. All  of the functionality within the Microsoft Installer is exposed as a rich set of  objects exposing only abstract COM interfaces. These interfaces are operating  system independent; operating system dependencies are encapsulated within the  implementation. \page #{\footnote Installer_Installer} ${\footnote Installer Installer} K{\footnote Installer} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Active Installation Manager Installer \par}\li180 For cases where the Installer is not delivered with the operating system,  it is supplied as a separate self-installing executable that unregisters  old components and installs and registers new Installer components. The  location of this installer package is specified by the  {\uldb INSTALLER}{\v Property_INSTALLER} property in the launcher, and may be a URL.  If the installer package is a relative path, it will be copied during an admin install. \page #{\footnote Launcher_Info} ${\footnote Launcher} K{\footnote Launcher} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Launcher (INSTALL.EXE) \par}\li180 Because the Installer components all live in shared DLLs, an executable  module is required to load the rest of the components.  The basic launcher is very small, containing only enough code  to handle any startup errors occurring before the components are initialized.  In addition, its resources can be configured to  set any number of initial property values, most importantly the names of the   component libraries and the installation database to use. Also configurable is  the icon to use and the name of the launcher so that multiple specific use  launchers can be created.  For instance, the distribution media might contain  a launcher with an installation type icon and a name like "Install".  However,  on a user's machine after installation, a launcher may be created with a  modification type icon and a name like "Change Installation". Or in a corporate  world an administrator might create a launcher named "Install Finance Templates"  containing properties to install only a set of internally developed financial  templates. The launcher is responsible for loading the  various Installer COM components. It loads each DLL, calls the public entry point  to obtain a class factory for the desired object, the calls the entry point to  create an instance. The also reads property values from its resources  parses the command line for additional property settings.  Command line data can consist of either option flags followed by a data value  if appropriate or property names with associated values, separated by an equals sign.  This module is not used when an installation is controlled by OLE Automation (VBA).  The automation wrapper DLL is used to load components instead. \page #{\footnote Automate_Info} ${\footnote Automation} K{\footnote Automation} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Automation (MSIAUTO.DLL) \par}\li180 Each of the objects exposed by the various Microsoft Installer components is  exposed to OLE automation by using a shadow object which contains the COM   object pointer and dispatches calls through that pointer. The automation  translation code is contained in a separate DLL to permit the use of highly  shared code, and because this capability is not required for most shipping  products. The main uses for the automation include testing and custom install  controllers employed by many corporate customers. The automation code for  each function has been kept as small as possible, mostly specifying the  arguments to pass and testing for error returns. \page #{\footnote ENGINE_Info} ${\footnote ENGINE} K{\footnote ENGINE} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Engine (MSIENG.DLL) \par}\li180 The Engine object controls the installation process, relying on the  {\uldb Services}{\v SERVICES_Info} object to perform all of the operating  system functions. It opens the installation database containing the  installation logic and data as well as passes error handling on to the  {\uldb Handler}{\v HANDLER_Info} object. The Engine object is associated  with a standard set of {\uldb Actions}{\v _msi_Installation_Database_Actions_List@msi.hlp}, each of which  performs a particular operation on data from one or more action specific  table. Additional Custom Actions may be added for  particular product installations requiring functionality not provided natively.  The basic Engine functionality is that of a sequencer which is driven by   data authored into a designated "sequence" table (such as   {\uldb InstallSequence}{\v _msi_InstallSequence_Table@msi.hlp}) in the installation  database. In addition, the Engine manages the source and destination directory  layout, the product selection tree, and cost calculations. \page #{\footnote HANDLER_Info} ${\footnote HANDLER} K{\footnote HANDLER} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Handler (MSIHND.DLL) \par}\li180 The Handler module is a replaceable component which processes all interactions  with users or a controlling applications. The interface provides two  functions, one of which handles messages of several kinds: warnings, errors,   and progress notifications. The other function is a request to  perform a particular action. The action is normally used to invoke a particular  dialog or wizard sequence, but can also be implemented as code functionality.  The standard implementation utilizes its own database tables to store the structure  and sequencing of all the dialogs. However, an alternate implementation of the  Handler module could operate completely silently or even remotely. \page #{\footnote SERVICES_Info} ${\footnote SERVICES} K{\footnote SERVICES} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Services (MSISRV.DLL) \par}\li180 The Services component provides wrappers for several operating system functions  as well as higher level functionality appropriate to the installation process.  Some services are implemented as objects, as they have a lifetime beyond a single  method call, while others are simple function calls. Examples of some of the services  include: \line 1. String handling - Common string handling objects to avoid the use of buffers and to minimize string copying. \line 2. Record management - Generalized mechanism for passing sets of values, used for database access and error handling. \line 3. Property management - Centralized global install property table management. \line 4. Volumes - Management of the characteristics of the various drive types, including floppy, hard, CD-ROM, and network servers. \line 5. File paths - Performs all file and folder operations used by install, provides path parsing, concatenation, and validation. \line 6. File copy - Copies compressed and uncompressed files, handles resource copying on Mac. \line 7. Registry - Handles all registry and INI file operations, including key cleanup on uninstall. \line 8. Program groups and shortcuts - Creating linkes on the Start menu or anywhere else in a user's file system. \line 9. Hardware and OS detection - Setting the appropriate property values that can be tested elsewhere. \page #{\footnote Shipped_Components} ${\footnote Shipped Components} K{\footnote Shipped Components} +{\footnote Shipped:Components} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Shipped Components \par}\li180 The following components are shipped with each product installed using the Microsoft Installer.  Microsoft Installer components are included in this list because in  a majority of the scenarios, they need to be shipped even if they are not  installed or used.  Major releases of a product must contain Microsoft Installer  components because you cannot assume a user has them already.  However, for  letter upgrades, patches, Web content releases, etc. you can assume user's have  these components.  Consequently, they need not be shipped. {\f1\line\uldb INSTALL.EXE}{\v Launcher_Info}{ } Launcher that loads the Installer's components. {\f1\line\uldb MSIENG.DLL}{\v ENGINE_Info}{   } Installer engine responsible for sequencing actions in the Action table. {\f1\line\uldb MSIHND.DLL}{\v HANDLER_Info}{   } UI handler which constructs dialogs and processes errors. {\f1\line\uldb MSISRV.DLL}{\v SERVICES_Info}{   } Operating system and database services available to the rest of the Installer. {\f1\line\b <{\i app}>.MSI}{     } A product specific installation database containing install logic and data. {\f1\line\b <{\i app}>.CAB}{     } One or more cabinet files containing compressed files to be installed. \page #{\footnote Release_Components} ${\footnote Released Components} K{\footnote ReleasedComponents} +{\footnote Released:Components} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Released Components \par}\li180 The following components are delivered with each retail build of the Microsoft Installer.  Because the Microsoft Installer is a cross platform application, separate sets  of components are produced for each platform. {\f1\line\b ERROR.IDT}{       } Table of parameterized Microsoft Installer error messages. {\f1\line\uldb INSTALL.EXE}{\v Launcher_Info}{   } Launcher that loads the Installer's components. {\f1\line\b MSIALTER.EXE}{ } Tool to load or display properties and resources into(in) a launcher. {\f1\line\b MSI.ODL}{           } Type library used for VBA object browsing . {\f1\line\b MSIAUTO.CNT}{   } WinHelp contents file used to organize information about the Microsoft Installer. {\f1\line\uldb MSIAUTO.DLL}{\v Automate_Info}{   } OLE automation layer and loader for use with VBA. {\f1\line\b MSIAUTO.HLP}{   } WinHelp file containing on-line help information for the Microsoft Installer. {\f1\line\uldb MSIENG.DLL}{\v ENGINE_Info}{     } Installer engine responsible for sequencing actions in the Action table. {\f1\line\uldb MSIHND.DLL}{\v HANDLER_Info}{     } UI handler which constructs dialogs and processes errors. {\f1\line\uldb MSISRV.DLL}{\v SERVICES_Info}{     } Operating system and database services available to the rest of the Installer. {\f1\line\b MSIDB.EXE}{ } Tool to import from and export to a text based archive format for tables. {\f1\line\b REGMSI.EXE}{   } Tool to self-register and unregister installer components as OLE objects. {\f1\line\b MSIVAL.EXE}{ } Tool to validate an authored database. {\f1\line\b TESTDB.MDB}{     } Test database containing the basic tables and examples of data. \par\par In addition, debug builds of the Microsoft Installer deliver the following additional components: {\f1\line\b  INSTALLD.EXE  } Launcher stub with properties set to use debug components {\f1\line\b  MSIAUTOD.DLL,MSIAUTOD.PDB,MSIAUTOD.BSC,MSIAUTOD.MAP} Automation, debug components {\f1\line\b  MSIENGD.DLL, MSIENGD.PDB, MSIENGD.BSC, MSIENGD.MAP } Engine, debug components {\f1\line\b  MSIHNDD.DLL, MSIHNDD.PDB, MSIHNDD.BSC, MSIHNDD.MAP } Handler, debug components {\f1\line\b  MSISRVD.DLL, MSISRVD.PDB, MSISRVD.BSC, MSISRVD.MAP } Services, debug components {\f1\line\b  REGMSID.EXE  } debug build for registration tools, works identically to REGMSI.EXE \page #{\footnote CommandLine_Options} ${\footnote Command Line Options} K{\footnote Command;Options} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Command Line Options \par}\li180 Command line options may be specified when invoking a Windows launcher executable.  The command line is parsed by the launcher with corresponding property values  being passed on to the Services module, along with any properties stored in the  resource section of the launcher itself.  The general format is to specify property  =value pairs using an equals sign between the case insensitive property name and value.  Property pairs are separated by white space on the command line.  If a value contains  embedded white space it must be enclosed in double quotes.  Only properties whose  names consist of all upper case characters can be entered on the command line. Help for command line parameters is available by using a question mark as the  command line artument, (e.g., install ?). A selected list of property names and  descriptions are displayed. If two successive question marks are provided as a  property, the default values for properties predefined in the launcher are displayed.  Both property values and their descriptions are programmed either by the build process  or by using the MSIALTER.EXE tool. For backward compatibility with Acme, forward slash or minus sign followed by a letter continues  to be supported by the Microsoft Installer (e.g., install /?).  The letters are  case-insensitive and must be immediately preceeded by either a forward slash or minus sign.  Some of the options set a particular value for a property while others require the value  to follow the option letter. Backwards compatibile options are shown below, along with their  resultant property assignments. {\line\f1   /A {\i }          } {\uldb ACTION}{\v *Property_ACTION} = Admin {\line\f1   /G {\i logfile}   } {\uldb LOGFILE}{\v *Property_LOGFILE} = {\f1\i logfile} {\line\f1   /I {\i rootdrive} } {\uldb ROOTDRIVE}{\v *Property_ROOTDRIVE} = {\f1\i rootdrive} {\line\f1   /K {\i cdkey}     } !!?? CDKEY = {\f1\i cdkey} {\line\f1   /M {\i logmode}   } {\uldb LOGMODE}{\v *Property_LOGMODE} = {\f1\i logmode} {\line\f1   /N {\i username}  } {\uldb USERNAME}{\v *Property_USERNAME} = {\f1\i username} {\line\f1   /O {\i orgname}   } {\uldb COMPANYNAME}{\v *Property_COMPANYNAME} = {\f1\i orgname} {\line\f1   /P {\i pidstring} } {\uldb PRODUCTID}{\v *Property_PRODUCTID} = {\f1\i pidstring} {\line\f1   /R {\i }          } {\uldb ACTION}{\v *Property_ACTION} = Reinstall {\line\f1   /S {\i sourcedir} } {\uldb SOURCEDIR}{\v *Property_SOURCEDIR} = {\f1\i sourcedir} {\line\f1   /T {\i database}  } {\uldb DATABASE}{\v *Property_DATABASE} = {\f1\i database}  {\line\f1   /U {\i }          } {\uldb ACTION}{\v *Property_ACTION} = Uninstall \par\par\li0\fi0{\b Remarks}\par\li180 Command line options are not available on the Mac.  In their place will be an alternate mechanism for the user  to specify property settings such as a preference file. \page #{\footnote MsiAutoOverview} ${\footnote Automation Overview} K{\footnote Overview; Automation} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Microsoft Installer Automation Interface \par}{\b Access to C++ Libraries}\par\li180 An MsiAuto object must be initially created in order to load the automation  support that is required in order to access the Microsoft Installer components  through OLE automation. This object provides wrappers to create the top level  objects and access their methods. These wrapper simply provide argument  translations to expose the C++ methods in manner consitent with BASIC without  changing the behavior of the methods. When possible, a pair of Get and Set C++  methods will be exposed to BASIC as a single property. Multiple C++ methods  that simply handle different data types will be exposed as a single method.  Where appropriate, C++ methods taking an index argument will be exposed as an  indexed property. Many C++ methods return the result through an argument, as  the return value is used for the error return; however in BASIC errors are  handled by a separate mechanism, and the result is always passed in the return  value. \page #{\footnote MsiDb_Tool} ${\footnote MsiDb Tool} K{\footnote MsiDb} +{\footnote Tool:MsiDb} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MSIDB.EXE Tool To Modify A Database \par}\li180 The MSIDB.EXE tool uses the MSI database external API to import and export database tables as well  as merge databases and apply transforms to databases.  It is essentially a UI and/or command line  processing layer on MsiDatabase.Import and .Export.  If all required  parameters (mode, folder, database and and table list) are specified on the command line,  the tool will not bring up any UI and will operate as silent command line-driven utility,  suitable for a build script. The -m and -t and create modes can only be used in silent command line mode.  Up to  10 transforms or merge databases can be specified. If the folder  containing the text archive files is not specified it will be prompted for; likewise the database will   be prompted for if not specified. Create new database (both .msi and .mdb), Import archives to database  and Export tables to archives.  Tables can be exported from a read only database (only in interactive mode). \par\fi-180\li180{\b Command Line Syntax} {\line\f1 MsiDb \{option\}...\{option\}... \{table\}...\{table\}} \line The following case-insensitive command line options are supported (slash delimiter may also be used). {\line\f1\b  -i   } Import text archive files from folder into specified database {\line\f1\b  -e   } Export selected tables into text archive files in specified folder {\line\f1\b  -c   } Creates a new database file (overwrites existing) and imports tables {\line\f1\b  -f   } Specifies the folder containing the text archive files for tables and streams {\line\f1\b  -d   } Fully-qualified path to the database {\line\f1\b  -m   } Fully-qualified path to the database to merge in {\line\f1\b  -t   } Fully-qualified path to the transform to apply {\line\f1\b  -?   } Displays command line help dialog \line Table names for import are file names. Standard wild card specifications may be used. \line Table names for export are table names. Only the wildcard specification, "*", may be used. \par{\b Archive Table Naming} \line The table name is truncated to 8 characters and the extension ".idt" added. \line Tables names supplied by command for import are likewise converted. \line The name used for database table creation is maintained in the .idt file. \line Binary data streams are stored as separate files with extension ".ibd". \line Binary filename used is primary key data for the row containing the stream. \par{\b Database Naming Syntax} \line Microsoft Installer database:  \{databasepath(*.msi)\} \line Access database:    \{databasepath(*.mdb)\}[@\{owner\}][#\{password\}] \line SQLServer database: \\\\\{server\}\\\{database\}[@\{owner\}][#\{password\}] \line ODBC data source:   \{ODBCdatasource name\}[@\{owner\}][#\{password\}] \line        \{owner\} defaults to the current network username \line        \{password\} defaults to none \line\line Note:  When using long filenames with spaces, use quotes around them.  For example, for a  database that is in the 'My Documents' folder, specify it as "c:\my documents". \page #{\footnote MsiTable_Tool} ${\footnote MsiTable Tool} K{\footnote MsiTable} +{\footnote Tool:MsiTable} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MSITABLE.EXE Tool To Modify A Database \par}\li180 \line !!! OBSOLETE !!! \line\line The {\b MSITABLE.EXE} tool uses the MSI database engine to import and export database tables as well  as merge databases.  It is essentially a UI and/or command line processing layer on MsiDatabase.Import  and .Export.  This tool uses OLE to create an instance of the MsiServices component. If all required  parameters (mode, folder, database and and table list) are specified on the command line,  the tool will not bring up any UI and will operate as silent command line-driven utility,  suitable for a build script. It will also operate as a silent command line-driven utility if  the -m mode and database are specified for merging.  No UI is available for merging.  If the folder  containing the text archive files is not specified it will be prompted for; likewise the database will   be prompted for if not specified. There are three modes in which to tool can operate:  Create new database, Import archives to database and Export tables to archives.  The Create and Merge   options are not available when in interactive mode.  One can use multiple merge options (up to 10). \par\fi-180\li180{\b Command Line Syntax} {\line\f1 MsiTable \{option\}...\{option\}... \{table\}...\{table\}} \line The following case-insensitive command line options are supported (slash delimiter may also be used). {\line\f1\b  -i   } Import text archive files from folder into specified database {\line\f1\b  -e   } Export selected tables into text archive files in specified folder {\line\f1\b  -c   } Creates a new database file (overwrites existing) and imports tables {\line\f1\b  -f   } Specifies the folder containing the text archive files for tables and streams {\line\f1\b  -d   } Fully-qualified path to the database {\line\f1\b  -m   } Fully-qualified path to the database to merge in {\line\f1\b  -?   } Displays command line help dialog \line Table names for import are file names. Standard wild card specifications may be used. \line Table names for export are table names. Only the wildcard specification, "*", may be used. \par{\b Archive Table Naming} \line The table name is truncated to 8 characters and the extension ".idt" added. \line Tables names supplied by command for import are likewise converted. \line The name used for database table creation is maintained in the .idt file. \line Binary data streams are stored as separate files with extension ".ibd". \line Binary filename used is primary key data for the row containing the stream. \par{\b Database Naming Syntax} \line Microsoft Installer database:  \{databasepath(*.msi)\} \line Access database:    \{databasepath(*.mdb)\}[@\{owner\}][#\{password\}] \line SQLServer database: \\\\\{server\}\\\{database\}[@\{owner\}][#\{password\}] \line ODBC data source:   \{ODBCdatasource name\}[@\{owner\}][#\{password\}] \line        \{owner\} defaults to the current network username \line        \{password\} defaults to none \line\line\line\line\line \page #{\footnote RegMsi_Tool} ${\footnote RegMsi Tool} K{\footnote RegMsi} +{\footnote Tool:RegMsi} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b REGMSI.EXE Tool to Self-register Installer Components \par}\li180 The REGMSI.EXE tool simply calls the DllRegisterServer and DllUnregisterServer  entry points of the Installer components to cause them to register or unregister  themselves as OLE objects. Registration allows them to be called using the OLE  call CoCreateInstance, or by using CreateObject from VBA. The tool interprets  individual characters on the command line to set execution options. Options are  case insensitive and may appear in any order.  The default behavior is to register all the components designated below: {\line\f1\b  A   } Automation module, MsiAuto(D).DLL, ProgId = Msi.Automation(Msi.AutoDebug) {\line\f1\b  S   } Services module,     MsiSrv(D).DLL,   ProgId = Msi.Services(Msi.ServicesDebug) {\line\f1\b  E   } Engine module,       MsiEng(D).DLL,  ProgId = Msi.Engine(Msi.EngineDebug) {\line\f1\b  H   } Handler module,      MsiHnd(D).DLL,  ProgId = Msi.Handler(Msi.HandlerDebug) {\line\f1\b  D   } Access the debug builds of the components (D suffix), rather than ship. {\line\f1\b  B   } Access the Lego (BBT) builds of the components (L suffix), not available on Mac. {\line\f1\b  U   } Unregister modules, otherwise register {\line\f1\b  Q   } Quiet, no Errors show, returns non-zero status to batch file if failure. {\line\f1\b  G   } Generate tool module, MsiGen(D).DLL,  ProgId = Msi.Generate {\line\f1\b  L   } Localaize tool module, MsiLoc(D).DLL,  ProgId = Msi.Localize {\line\f1\b  T   } Utilities tool module, MsiUtil(D).DLL,  ProgId = Msi.Utilities {\line\f1\b  P   } Patch tool module,      MsiPat(D).DLL,  ProgId = Msi.Patch     {\line\f1\b  C   } Acme convert tool module, MsiAcme(D).DLL,  ProgId = Msi.AcmeConvert {\line\f1\b  ?   } Displays option letters The REGMSID.EXE tool is simply a debug build of the tool and is no different in funtionality.\par MAC NOTE: This tool cannot use command line arguments on the Mac, and thus  only can register the components. A solution to this is being considered for unregistration.  On the Mac, only the Automation module self-registers, as the others have no access to the registry, yet. \page #{\footnote MsiAlter_Tool} ${\footnote MsiAlter Tool} K{\footnote MsiAlter} +{\footnote Tool:MsiAlter} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MSIALTER.EXE (formerly LOADPROP.EXE) Tool  \par}\li180 The {\i\b MSIALTER.EXE} tool sets, updates, or displays launcher resources.  Also inserts cabinets or  transforms into a Database. {\i\b Stuffing cabinets or transforms into the database:} \line The tool can be used to stuff a cabinet or transform into the database storage.  For cabinets, use the syntax msialter \{database\} \{cabinet file\} where \{cabinet  file\} is the full path to the cabinet and \{database\} is the full path to the database.  The cabinet  will be stored as the base name in the database.  For example, if you specify the cabinet file as  c:\\temp\\msproj1.cab, the c:\\temp\\msproj1.cab file will be opened and its data put into the database  storage file as a stream whose name is msproj1.cab.  For transforms, use the syntax msialter -t \{database\} \{transform file\} where  \{transform file\} is the full path to the transform file and \{database\} is the full path to the database.  Note, you  don't have to use full paths if the transform or cabinet or database is in the same directory as msialter.exe.  Like the  cabinet file, the transform file will be stored under its base name.  The transform is stored as a child storage of the  database.  Note, OLE limits the size of streams and child storages allowed in the database.  This could be the cause of the  'Unable to open child storage' error.  Currently, spaces are not allowed in the names of the cabinet stream or transform storage. {\i\b Setting or Updating resources:} \line The tool can be used to set specific properties like DATABASE, ACTION, MESSSAGEBASE, and COMPANYNAME.  It can also update  the ICON resource and insert a DATABASE, TRANSFORMS, and/or CABINET file resource(s) into the  launcher.  The input is a text file of property and value pairs with one pair per text line.  Note that the end of  line/carriage return is required for a property-value pair to be added. The  delimiter between the property and value pair is the equals sign '='.  Only property  names that  use no lower case characters can be set; however, the property names in the text file are case-insensitive.  The value string in the text file is case sensitive.  File resources are designated by an at sign '@'  preceding the name of the file in the value string.  The resource is loaded as a file resource in the  launcher and its resource name is the base name [no path or file extension].  For the DATABASE property, an at  sign loads the resource as a file resource and sets the DATABASE property to point to that resource using the  @\{RESOURCE NAME\} syntax.  To specifiy languages for a property, use the following format: \{Property\}(langId)=\{Value\}  where langId is the language in decimal form.  All file resources, CABINET, DATABASE, ICON, and TRANSFORMS are always  netural and the DATABASE property is always neutral.  All other properties can have multiple languages associated  with them.  If no language is specified, it is assumed to be language neutral or zero (0).  To remove an install  property from the launcher, simply supply nothing after the delimiter as in the following format: \{Property\}(langId)=     .  Only one DATABASE property/file resource and one ICON resource is allowed per launcher.  One can only specifiy  a DATABASE property once in the property text file.  {\i\b Displaying resources:} \line The tool can also be used to display the resources in the launcher.  It will display the install property resources as  well as the transform, cabinet, database, and icon file resources.  Use of the -f option will dump the file resources into  the current directory. The Icon file resource is displayed as ICON=@{exe name} where {exe name} is the executable whose  resources the tool is displaying. {\i\b Command Line Syntax:} \line {\b msialter \{database\} \{cabinet file\} } -- Stuffs the Cabinet file into the database \line {\b msialter -t \{database\} \{transform file\} } -- Stuffs the Transform file into the database. \line {\b msialter -l \{launcher\} \{property file\} } -- Loads resources in the property file into the  launcher \line {\b msialter \{launcher\} } -- Displays the resources in the launcher. \line {\b msialter -f \{launcher\} } -- Displays the resources in the launcher and outputs the file resources  to the current directory \line {\i\b Sample property file:} \line COMPANYNAME(1032)=Microsoft \line DATABASE=@testdb.msi \line ICON=@cd.ico \line MESSAGEBASE=32 \line {\i\b Comments on property file:} \line COMPANYNAME(1032)=Microsoft sets the COMPANYNAME property to have the value of Microsoft in the Greek language.  DATABASE=@testdb.msi loads the testdb.msi database as a file resource in the launcher.  It will be called TESTDB and  the DATABASE property will contain the value @TESTDB.  ICON=@cd.ico changes the current icon resource in the launcher  to display the cd.ico icon.  MESSAGEBASE=32 sets the MESSAGEBASE property to 32 in language neutral. {\i\b NOTE:} \line This tool does not run on the current Windows95 release, as the API  function UpdateResource is not implemented. It requires WindowsNT. \page #{\footnote MsiInfo_Tool} ${\footnote MsiInfo Tool} K{\footnote MsiInfo} +{\footnote Tool:MsiInfo} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MSIINFO.EXE Tool To Modify A Database \par}\li180 The MSIINFO.EXE tool uses the MSI database external API to edit or display the summary information of a  database. It is a command line tool. \par\fi-180\li180{\b Command Line Syntax} {\line\f1 MsiInfo \{database\}}\line Displays the Summary information of the database to the console\line {\line\f1 MsiInfo \{database\} \{option\} \{data\}.....}\line Sets the corresponding summary information property\line \line The following case-insensitive command line options are supported (slash delimiter may also be used). {\line\f1\b  -I   }  PID_DICTIONARY {\line\f1\b  -C   }  PID_CODEPAGE {\line\f1\b  -T   }  PID_TITLE {\line\f1\b  -J   }  PID_SUBJECT {\line\f1\b  -A   }  PID_AUTHOR {\line\f1\b  -K   }  PID_KEYWORDS {\line\f1\b  -O   }  PID_COMMENTS {\line\f1\b  -P   }  PID_TEMPLATE {\line\f1\b  -L   }  PID_LASTAUTHOR {\line\f1\b  -V   }  PID_REVNUMBER {\line\f1\b  -E   }  PID_EDITTIME {\line\f1\b  -S   }  PID_LASTPRINTED {\line\f1\b  -R   }  PID_CREATE_DTM {\line\f1\b  -Q   }  PID_LASTSAVE_DTM {\line\f1\b  -G   }  PID_PAGECOUNT {\line\f1\b  -W   }  PID_WORDCOUNT {\line\f1\b  -H   }  PID_CHARCOUNT {\line\f1\b       }  PID_THUMBNAIL     !! NOT SUPPORTED !! {\line\f1\b  -N   }  PID_APPNAME {\line\f1\b  -U   }  PID_SECURITY \line The data following the option is optional. If there is no data following the option, then the property is  removed. The database must not be a readOnly database.  The same properties can be specified again on the  command line, but only 20 switches can be used.  If the data for a particular option contains a space,  encapsulate it in quotes, such as /T "MY TITLE".  The quotation marks notify the command line parser to  ignore the space.  For the file time  properties, those being PID_EDITTIME, PID_LASTPRINTED, PID_CREATE_DTM,  and PID_LASTSAVE_DTM, use the following format "year/month/day hour:minute:second" which is required to  be "yyyy/mm/dd hh:mm:ss" (i.e. "1997/06/20 03:25:59). \page #{\footnote MsiDbVal_Tool} ${\footnote MsiDbVal Tool} K{\footnote MsiDbVal} +{\footnote Tool:MsiDbVal} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MSIDBVAL.EXE Tool to Validate an Msi Database \par}\li180 \line !!! OBSOLETE !!! The {\i\b MSIDBVAL.EXE} tool validates a *.msi database.  It utilizes  the Validation tool module MsiVal(D).DLL for validation.  For any database  to be validated, the tool requires that the {\uldb _Validation table}{\v _msi__Validation_Table@msi.hlp}   {\b ( _Validation table )} exist in that database.  This table contains the values allowed  in the columns of all of the tables.  This is a console app and output is output  to stdout or a pipe or handle if specified.  If any errors are found in validation,  they are output to the screen. A valid database returns a valid database message. {\i\b COMMAND LINE SYNTAX:} \line {\b msidbval \{database\} } \page #{\footnote MsiVal_Tool} ${\footnote MsiVal Tool} K{\footnote MsiVal;Validation} +{\footnote Tool:MsiVal} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MSIVAL.EXE Tool to Validate an Msi Database \par}\li180 The {\b MsiVal.EXE} tool validates a *.msi database.  It utilizes  the external API for validation.  For any database  to be validated, the tool requires that the {\uldb _Validation table}{\v _msi__Validation_Table@msi.hlp}   {\b ( _Validation table )} exist in that database.  This table contains the values allowed  in the columns of all of the tables.  The msival.exe tool also performs the Missing  Columns validation in which any column defined in the _Validation table, but not in the  Columns catalog of the database is considered an error.  If one wishes to add a new  table/column, then one has to add the corresponding entry(ies) to the _Validation table.   If one removes an {\b optional} column {\i(no way of regulating this except through the  authoring environment)}, then one has to remove the corresponding entry from the  _Validation table.  The _Validation table is not shipped, and is merely used for  validation during authoring.  The Missing column validation code is external to the  Darwin code.  This is a console app and output is output  to stdout or a pipe or handle if specified.  If any errors are found in validation,  they are output to the screen. A valid database returns a valid database message. \line {\i\b Required Tables:}\line\line Depending on the validation, the following tables are required for the msival.exe tool to work\line {\f1 _Validation:} Required when using the external APIs for validation.\line {\f1 _Required:} Required for the 'Required' validation.  Not needed if use -OFF option\line {\f1 _InstallSequence:} Required for the 'Organizational' InstallSequence validation.  Not needed if use -OFF option\line {\f1 _Sequence:} Required for the 'Sequential' InstallSequence validation.  Not needed if use -OFF option\line \line {\i\b Command Line Syntax:} \line\line {\b msival \{database\} } --> All validation (missing column, data/foreign key, required, organizational install, sequential install)\line {\b msival \{database\} -OFF } --> Missing column and data/foreign key validation \line \line {\i\b How Validated:}\line\line {\f1 Missing Columns:}\line Use the _Validation table and ensure that every column listed in the _Validation table is also listed in the _Columns catalog  of the database. (Normal validation using the API's catches the other way from _Columns to _Validation)\line {\f1 Required:}\line Use the _Required table and ensure that the values are found in the particular table.  This only makes sure that the primary  keys are there, not that the values are valid.  See below for table definition information.\line {\f1 Install Organization:}\line Use the _InstallValidate table and ensure that the organization of the actions fall in the sections defined in the table.  If  an action is not listed in this table, it is assumed to be either a Dialog or a Custom Action and checked to be sure that  it is found in either the Dialog or CustomAction tables.\line {\f1 Install Sequence:}\line Use the _Sequence table and ensure that the actions occur in the correct order.  Some actions have pre and post conditional  actions. \line \line {\i\b Table Definitions (except _Validation)}\line\line {\f1 _Required}\line Table (string, primary key, required) -- name of table with said required value\line Value (string, primary key, required) -- required value, if multiple primary keys, then it is a delimited list (separator is semi-colon)\line KeyCount (short, required) -- number of primary keys in table\line Description (string, optional) -- description of required value\line \line {\f1 _InstallValidate}\line Action (string, primary key, required) -- name of action (do not list Dialog or CustomActions here!!)\line SectionFlag (integer, required) -- flag value of sections, 1 or more of the following:\line {\i Search --> Searching actions, from LaunchConditions to RMCCPSearch}\line {\i Costing --> Costing actions}\line {\i Selection --> UI actions, CustomActions, etc.}\line {\i Advertise --> RegisterProduct, PublishProduct, PublishFeatures, PublishComponents actions}\line {\i Execution --> Script operations, InstallFiles, etc}\line Other notes:\line 1.) Divisor between search and costing is CostInitialize\line 2.) Divisor between costing and selection is CostFinalize\line 3.) Divisor between selection and advertise is RegisterProduct\line 4.) Divisor between advertise and execution is InstallValidate\line 5.) If any advertise or execute action called, then ExecuteFinalize must be called\line 6.) A call to ExecuteFinalize resets section to search so more actions can occur afterwards\line \line {\f1 _Sequence}\line Action (string, primary key, required) -- name of action (do not list Dialog or CustomActions here!!)\line Dependent (string, primary key, required) -- action required to come before or after said action\line After (boolean, required) -- 0 if action comes before dependent, 1 if action comes after dependent\line Optional (boolean, required) -- (ignored for 'Before') 0 if action is not optional, 1 if optional\line Other notes:\line 1.) Temporary column is created for marking 'dependent' action of actions\line\line 2.) As action is encountered in InstallSequence table, its sequence number if filled in for every row of the  _Sequence table where the 'Dependent' action value equals the current action (thus marking the temp column)\line\line 3.) Two special queries are done for the _Sequence table (one for 'Before' and one for 'After' actions)\line\line 4.) The result sets of the fetches are important, as the idea is to not have a result set for valid (explained below)\line\line a.) Action Is To Go After A Required Dependent Action And Marking Column Is  Zero --> ERROR\line Explanation: A preceding action is required before this one, but it hasn't been found, so this is an error\line\line b.) Action Is To Go After A Required Dependent Action And Marking Column Is Not Zero --> CORRECT\line Explanation: A preceding action is required before this one, and it has been found, so this is valid\line\line c.) Action Is To Go After An Optional Dependent Action And Marking Column Is Zero --> CORRECT\line Explanation: This action doesn't have to be listed, but if it were to be found (some point after us, it would be caught as  if the _Sequence table is authored correctly, the Dependent Action would have us listed as coming Before them so we  would be caught in that pass)\line\line d.) Action Is To Go After An Optional Dependent Action And Marking Column Is Not Zero --> CORRECT\line Explanation: This action must come after an optional dependent action which happens to be listed before us, so this is valid\line \line{\i\bThe Optional/Required Attrib is ignored for Before conditions}\line\line e.) Action Is To Go Before Optional/Required Dependent Action And Marking Column Is Zero --> CORRECT\line Explanation: Action is supposed to come before the dependent action and the dependent action hasn't been seen yet, so this  is valid\line\line f.) Action Is To Go Before Optional/Required Dependent Action And Marking Column Is Not Zero --> ERROR\line Explanation: Action is supposed to come before the dependent action, but the dependent action has already been found, so this  is invalid\line\line \line {\i\b Extensibility of Validation}\line Validation is very extensible, as it is dependent upon tables, so changing the _Validation, _Required, _InstallValidate, and  _Sequence tables will change validation.\line \page #{\footnote MsiTran_Tool} ${\footnote MsiTran Tool} K{\footnote MsiTran} +{\footnote Tool:MsiTran} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MSITRAN.EXE Tool to Generate, Apply, or View a Transform file \par}\li180 The {\i\b MSITRAN(d).EXE} tool can generate or apply a transform file  and can be used to  view the transform file.  It utilizes the external API.  \par {\i\b COMMAND LINE SYNTAX:} \line {\b msitran(d) -g \{base db\} \{ref db\} \{transform file name\} [\{error conditions\}] --> Generate a Transform file }\line {\b msitran(d) -v \{transform\} \{base db\} --> View a Transform file}\line {\b msitran(d) -a \{transform\} \{database\} [\{error conditions\}] --> Apply a Transform}\line \line Error Conditions:\line The following errors may be suppressed when applying a transform.  To suppress an error, include the appropriate character in  the \{error conditions\} argument. Conditions specified with -g are placed in  the summary information of the transform, but are not used when  applying a transform with -a.\line \line {\f1 'a': }Add existing row.\line {\f1 'b': }Delete non-existing row.\line {\f1 'c': }Add existing table.\line {\f1 'd': }Delete non-existing table.\line {\f1 'e': }Modify existing row.\line \page #{\footnote MsiMerge_Tool} ${\footnote MsiMerge Tool} K{\footnote MsiMerge; MsiMerg} +{\footnote Tool:MsiMerge} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MSIMERG.EXE Tool to Merge a database into another \par}\li180 The {\i\b MSIMERG(d).EXE} tool can a database into another.  If MergeConflicts are reported, information  is placed in the _MergeErrors table.  Note, the _MergeErrors table may not always be created depending  on the error that occured (an error not related to the actual merge of the data).  It utilizes the external API.  \par {\i\b COMMAND LINE SYNTAX:} \line {\b msimerg(d) \{base db\} \{ref db\}}\line \page *{\footnote Dev} #{\footnote Coding_AutomateMethod} ${\footnote Automating C++ method} K{\footnote Automate} +{\footnote Coding:AutomateMethod} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Steps to Exposing a C++ Method to Automation \par}\li180 The following describes the series of operations that must be performed  in order to expose a C++ method to OLE Automation and Object browers,  including help topics, for use with VBA applications. For each C++ class that is exposed to OLE automation, a shadow class is  defined which is derived from the common base class CAutoBase, and which  simply holds a pointer to the C++ object. A member function is defined for  each property or method exposed. All such functions take argument stack  object, which abstracts the complicated Variant arguments and return values.  All functions have a void return, as they throw exceptions on any error. C++ functions that get and set values are usually exposed as properties, with  the "Get" and "Set" part of the names removed. If both a Get and a Set are  present, they will likely be exposed as a single property. Since all data is  passed as Variant unions, multiple functions that vary only in data types can  sometimes be combined into a single function. Also note that properties can  accept arguments, such that access to data from a particular field can be  exposed as an indexed property. These index arguments may be of any data type. \par\li0{\b Automation Wrapper}\par\li180 Add function to wrapper class definition: \line {\f1   void MyFunc(CAutoArgs& args);}\line Add implementation function that processes the arguments and return values:{\f1 \line  void CAutoFoo::MyFunc(CAutoArgs& args) \line   \{ \line      args = m_riFoo.MyFunc(args[1], args[2]); \line   \}} \par\li0{\b Dispatch Table Entry}\par\li180 Add an entry to the dispatch table, supplying function and argument names,  separated only by a comma. The convention is that both are mixed case,  but the method or property names start with upper case, and the argument  names start with lower case. Each entry in the dispatch table must be  assigned a unique dispatch Id, normally starting with the number 1. The  value 0 denotes the default property, which is called if the object itself  is used in the context of a value, i.e. assignment or function argument.  Properties use {\f1 aafPropRW} or {\f1 aafPropRO} instead of {\f1 aafMethod}. \line {\f1  10, aafMethod, CAutoFoo::MyFunc, "MyFunc,arg1,arg2", } \line  \par\li0{\b ODL Specification}\par\li180 To expose the method in the type library, the prototype of the exposed  method or property must be defined in ODL syntax, along with the help info:{\f1 \line   [id(10),helpcontext(MsiFoo_MyFunc),helpstring("What MyFunc does.")] \line      Boolean MyFunc([in] long arg1, [in] BSTR arg2);} \par\li0{\b Help Context ID}\par\li180 In the file "msiauto.hh", the help context Id must be defined. This file is  used to compile the ODL file to the type library and to generate the help file.  To insure uniqueness of the Ids, the low two digits are the same as the  dispatch Id, and the upper digits are the decimal equivalent of the low byte  of the GUID defined for the class. \line {\f1   #define MsiFoo_MyFunc  1510} \par\li0{\b Help Topic}\par\li180 Generate a new topic, including the necessary header information. It is best  to copy an existing topic or the sample topic, and modify it as required. *{\footnote Dev} {\f1\line   *\{\\footnote VBA\}            }{\i <-Build tab, must be first} {\f1\line   #\{\\footnote MsiFoo_MyFunc\}  }{\i <-Topic Id} {\f1\line   $\{\\footnote MsiFoo.MyFunc\}  }{\i <-Topic Title, diplayed in Find} {\f1\line   +\{\\footnote MsiFoo:MyFunc\}  }{\i <-Browse Sequence Id} {\f1\line   K\{\\footnote MyFunc;Internet\}}{\i <-List of keywords, separated by ';'} {\f1\line   \\pard\\f0\\cf1\\sb90           }{\i <-Restore paragraph and text styles} {\f1\line   \{\\li-150\\fi150\\brdrb\\fs24\\b }{\i <-Set special format for heading} {\f1\line   MyFunc Method               }{\i <-Heading text, larger font size, bold} {\f1\line   \\line\\tx360\\tab\\fs18\\b0\{\\uldb MsiFoo Object\}\{\\v MsiFoo_Object\} } {\f1\line   \\tx3000\\tab\{\\uldb Msi Objects\}\{\\v Msi_Objects\} }{\i <-Hot links} {\f1\line   \\tx5000\\tab\{\\uldb Database Tables\}\{\\v Database_Tables\} } {\f1\line   \\par\}\\li180                 }{\i <-End of heading, set normal indent} {\f1\line   Tell what MyFunc does here. } {\f1\line   \\par\\li0\{\\b Syntax\}\\par\\li500\\fi-320 }{\i <-Hanging indend} {\f1\line   \{\\i object\}\{\\b .MyFunc(\{\\i arg1, arg2\})\} } {\f1\line   \\par\{\\i object\}\\line } {\f1\line   Required. The MsiFoo object. } {\f1\line   \\par\{\\i\\b arg1\}\\line } {\f1\line   Required. Description of a required argument. } {\f1\line   \\par\{\\i\\b arg2\}\\line } {\f1\line   Optional. Description of an optional argument. } {\f1\line   \\par\\fi0\\li0\{\\b Remarks\}\\par\\li180 }{\i <-No indent, bold title, normal indent} {\f1\line   Additional notes as required.... } {\f1\line   \\page                       }{\i <-End of topic} \par\li0{\b Help References}\par\li180 Incorporate links to the new topic inside other relevent topics. In particular,  include the new topic under the appropriate {\b Methods} or {\b Properties}  section within the topic for the class itself. \line {\f1  \{\\uldb DoAction\}\{\\v MsiEngine_DoAction}\\line \par\li0{\b Help Contents Entry}\par\li180 In the help contents file, "msiauto.cnt" for the VBA help file, the new topic  must be inserted in the proper place in the topic hierarchy. The single digit  at the start of each line is the tree level. Spaces are inserted only for  clarity when editing this file. The first symbol is what is shown in the  contents view.  Following the equal sign is the help topic Id. \line {\f1   3 MyFunc=MsiFoo_MyFunc } \page *{\footnote Dev} #{\footnote Coding_HelpFile} ${\footnote Coding Help File} K{\footnote Help;RTF} +{\footnote Coding:HelpFile} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b\keepn Help Source File Syntax \par}\li180 This topic describes the syntax and tokens used to develop help topics for  Microsoft Installer. For a complete reference, use the VC++ help file  {\uldb HCW.HLP}{\v RTFHelpRTFStatementReference@HCW.HLP}. \par\li0{\b General RTF notes}\par\li180 The RTF format used in help files is a subset of that used by word processors.  Some of the tokens have been usurped to have different meanings. Tokens always  begin with a backslash and must be followed with a space (ignored), another  backslash, or a brace character. Enclosing tokens within braces restricts their  effect to the text enclosed within the braces. The entire RTF souce file must  also be enclosed in a set of braces (take care not to delete the ending brace.) Line breaks are ignored in RTF files, but spaces are displayed except for the  space immediately following an RTF token. Avoid accidently use of tab characters.  When wrapping text, the space between words must be included. The convention here  to avoid errors is to indent each wrapped line by a single space. \par\li0{\b Text format tokens}\par\li180 These tokens change the following text style, independent of paragraph formatting.  The change ends when the value is restored, either by explicitly restoring the  previous value or preferably by enclosing the token with the affected text in braces.  Avoid using "{\f1\\plain}" as this will reset the font size set in the file header. {\f1\line   \\b     } Starts {\b bold} text, ends at {\f1\\b0} or closing {\f1\}}. {\f1\line   \\i     } Starts {\i italic} text, ends at {\f1\\i0} or closing {\f1\}}. {\f1\line   \\f1    } Starts {\f1 font number 1} (fixed-pitch here), ends at {\f1\\f0} or closing {\f1\}}. {\f1\line   \\fs16  } Starts {\fs16 font size 8} (half the value), ends at next {\f1\\fs} or closing {\f1\}}. \par\li0{\b Paragraph format tokens}\par\li180 These tokens affect line indentation and spacing, and will be reset either by  the {\f1 \\pard} token, or by the ending brace if the token is enclosed in braces. {\f1\line   \\tab    } Inserts a tab character, moves to the next tab stop {\f1\line   \\line   } Forced line feed within a paragraph {\f1\line   \\par    } Start a new paragraph {\f1\line   \\li300  } Specified the line indent from left margin in twips (1\1440 inch) {\f1\line   \\fi-100 } Specified the first line indent relative to the line indent {\f1\line   \\sb90   } Specifies the extra space before paragraph in twips {\f1\line   \\tx500  } Specifies the location of a single tab stop in twips \par\li0{\b Topic header tokens}\par\li180 These tokens must placed at the start of each topic.  Each topic must be terminated with a {\f1 \\page} token.  If build tags are specified, the topic will only be included based on the   {\f1\b BUILD} expression in the help project file (.HPJ).  Topics may be group into a browse sequence, enabling the next and previous buttons,  by specifiying browse identifiers with identical text before the colon.  The build tag and keyword tokens may be repeated as necessary. {\f1\line   *\{\\footnote VBA\}            } Optional build tag, must be first tokens {\f1\line   #\{\\footnote MsiFoo_MyFunc\}  } Required Topic Id, used by links and contents {\f1\line   $\{\\footnote MsiFoo.MyFunc\}  } Topic Title, diplayed in Find and History {\f1\line   +\{\\footnote MsiFoo:MyFunc\}  } Optional Browse Sequence Id, group and sequence {\f1\line   K\{\\footnote MyFunc;Internet\}} Optional list of keywords, separated by ';' \par\li0{\b Hot links}\par\li180 These paired tokens create hot spots, displayed as green underlined text. {\f1\line   \{\\uldb Hot Spot Text\}\{\\v Help_Topic\}  } Jumps to another topic {\f1\line   \{\\ul Hot Spot Text\}\{\\v Help_Topic\}    } Creates a popup window \par\li0{\b File header tokens}\par\li180 These tokens are required to appear at the start of each RTF file.  In addition, the default font size for the file is set to 10 points  with the token: {\f1 \\fs20}. {\f1\line   \\rtf1           } Identifies the file as RTF, must be first. {\f1\line   \\ansi           } Identifies the character set {\f1\line   \{\\fonttbl\{\\f0\\fswiss Arial;\}\{\\f1\\fmodern Courier New;\}\} }Font table {\f1\line   \{\\colortbl;\}    } Color table, only color 0, black, is used here. \page *{\footnote Dev} #{\footnote Coding_MemoryLeaks} ${\footnote Coding Memory Leaks} K{\footnote Memory Leaks} +{\footnote Coding:Memory Leaks} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b\keepn Tracking Down Memory Leaks \par}\li180 Memory errors come in two flavors.   Rarely seen, but possible is a  list of memory blocks not freed when the services DLL goes away.  More common is an assert the CMsiMalloc was not released and then a list  of memory blocks not freed.  The first case happens when everyone releases CMsiMalloc correctly.  The second happens when someone holds on to CMsiMalloc without releasing it  and we assert when the destructor for the object is called when the DLL is being  removed by the system.  Both give a stack backtrace of when the memory was allocated, hopefully with function  names. They should also print out the type of object and which allocation it was  made on.  In order to get the stack backtrace to give function names, you need some DLLs in your  system or system32 directory to allow Darwin to interpret the PDB files. On Win95 and NT you need imagehlp.dll and mspdb50.dll in your system32 directory. If you think you have this set-up and it's not working, see DavidMck. The memory management code also allows you to increase the size of the stack back trace  if you need more data kept to make it easier to debug. There is a #define at the beginning  of imemory.cpp for cFuncTrace. It is currently set to 4 by default. You can adjust it as  needed. The output of the asserts should go to the log file if the log is open and set on the command  line. Otherwise the output of all asserts goes to the file c:\msidbg.log. Generally memory leaks are either a simple case of not freeing something that was allocated, or  a more complex issue of a reference counting problem. We have integrated code to help track  down reference counting issues. See {\uldb Reference Tracking}{\v Coding_RefTracking} for  more information on those features. \page *{\footnote Dev} #{\footnote Coding_DebugMemMgr} ${\footnote Coding Debug Memory Manager} K{\footnote Debug Memory Manager} +{\footnote Coding:Debug Memory Manager} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b\keepn Hooking up the Debug memory manager \par}\li180 The debug memory manager is hooked up for the main darwin DLLs. There are two cases  where you will need to hook it up your self to either make debugging easier or get  your new object to work. The debug memory manager overloads the new and delete operators. In order to work, a global  piMalloc needs to be set (since we have globally defined the new and delete overloaded functions).  These functions are in imsimem.h.  In order to set piMalloc you need to call SetAllocator with a pointer to a services object.  The allocator will be retrieved from the services object. We also keep a count for the DLL of how  many objects have called SetAllocator. This is needed since some DLLs contain multiple objects  that do not hold references to each other.  When your object that called SetAllocator is being deleted, you will want to call ReleaseAllocator.  The object that calls SetAllocator, however, cannot be allocated with the overloaded new and delete  operators since piMalloc will probably not be set correctly. In order to handle this we have  functions AllocSpc and FreeSpc which should be included as public member functions of your class  as follows. \par\tab static void *operator new(size_t cb) \{ return AllocSpc(cb); \} \par\tab static void operator delete(void * pv) \{ FreeSpc(pv); \} If you include imsimem.h in all the source files of your DLL, and appropriately hook up SetAllocator,  ReleaseAllocator, AllocSpc and FreeSpc, you should have the Darwin memory management installed. I would  urge that we have this done in all our DLLs in order to track down memory issues. \page *{\footnote Dev} #{\footnote Coding_RefTracking} ${\footnote Coding Reference Tracking} K{\footnote Reference Tracking} +{\footnote Coding:Reference Tracking} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b\keepn Tracking Down Reference Counting Problems \par}\li180 The services DLL (and in the future other Darwin DLLs) has a reference counting harness built in  to it to aid in tracking down problems with AddRefs and Releases.  Currently it is only useful in tracking down problems where objects are not released correctly. I  plan to add code to handle the case where an object is released too many times. The code hooks in to the AddRef and Release calls and uses the CMsiRef ref object which encompases  the m_iRefCnt as well as pointers to keep a link list of objects and a list of reference counting  actions and the stack track of each action. Due to the overhead imposed by keeping the tracking data this functionality is turned on for individual  classes. The environment variable TRACK_OBJECTS should be set to a comma separated list of darwin iids  which you wish to have tracked (you just need to use the low byte of the iid so to track services  set TRACK_OBJECTS=B). A static object that is an object of the CMsiRefHead class checks for objects not deleted in its  destructor. At that point it will assert with a list of actions and the stack track for those actions.  This info is also placed in the debug log (since usually the normal log has been closed by this point  in the process).  Using this information it is usually quite simple to look at the log and pair up AddRef and Release  calls until you end up with one or more AddRefs that shouldn't have happened. Looking through the code  you can then uncover the problem. As with the memory manager you can increase the size of the stack backtrace that is recorded if you  need more information. In imsidbg.h the defined value cFuncStack defaults to 3 currently and can  be adjusted as necessary. \page *{\footnote Dev} #{\footnote Coding_CodeReview} ${\footnote Code Review guidelines} K{\footnote Code Review guidelines;Coding conventions;Variable naming} +{\footnote Coding: Code Review guidelines} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b\keepn Coding Conventions and Code Review Guidelines \par}\li180 {\b General Coding Conventions} {\ul Tabs}\line * Every 3 columns, i.e. 1,4,7..., but only before the first non-white space character on the line.\line * Use tabs rather than spaces to indent lines, no tabs between any text on a line.\line * Avoid trailing white space on a line (expecially important for help .RTF files).\line * Avoid lines greater than 80 characters when possible (hard to diff and print).\line * When wrapping lines with multiple arguments, indent (with tabs) to line up the args if possible.\line * A utility exists, FIXTAB.EXE (from OTOOLS), to indicate or correct tab problems.\line \line {\ul Braces}\line * Opening and closing braces line up with each other and with the enclosing scope.\line * Code within braces indented one tab stop.\line * Braces may optionally be omitted for single line clauses following if, else, for, etc.\line * Lines with switch case values are lined up with the switch braces, code lines are indented.\line {\b Variable naming} {\ul Global Variables}\line Use the "g_" prefix followed by the Hungarian name. Ex: int g_cInstances\line \line {\ul Member Data Variables}\line Use the "m_" prefix followed by the Hungarian name. Ex: int m_iRefCnt\line \line {\ul COM Object Methods}\line Use mixed-case non-Hungarian (OLE Standard); args use Hungarian prefixes.\line Ex: int GetPropertyLen(const ICHAR* szProperty)\line \line Methods that return enumerators should be named Get{Item}Enumerator. \line Ex: IEnumMsiString* GetSubFolderEnumerator()\line \line {\ul COM Pointers And References}\line Use the "pi" (pointer to interface) and "ri" (reference to interface) prefixes followed by the variable name,  followed by the object type.  Do not include the type of instance pointer in the hungarian prefix. For the standard Darwin objects, preferred naming convention examples are:\line \line IMsiString*:   piComponentString (not pistrComponent)\line IMsiRecord&:   riErrRecord (riErrRec is also common in Darwin code, and is ok)\line IMsiCursor*:   piFeatureCursor\line IMsiTable*:    piFeatureTable\line IMsiDatabase&: riDatabase\line IMsiEngine&:   riEngine\line IMsiPath&:     riSourcePath\line \line {\ul MsiString}\line Use the "str" prefix followed by the variable name. After the prefix follow the same convention as for COM pointers. Ex: MsiString strUserName.\line \line {\ul Wrapper COM Pointers (PMsi...)}\line Use the "p" prefix, followed by the same convention as for "COM Pointers and References".  Ex: PMsiRecord pErrorRecord(0); \line {\ul Usage of char[], ICHAR[], IMsiString, and MsiString types} IMsiString is Darwin's string interface. It provides reference-counted string handling. An MsiString  is a wrapper object around an IMsiString interface. The MsiString class simplifies string handling  by automating the reference-counting. Avoid the use of the char data type except where 8-bit bytes are used.  Use ICHAR to refer to text characters; this define is current char but eventually will be  changed to wchar_t (16-bit) when we convert Darwin to Unicode.  Avoid the direct use of strlen, strcpy, strcat (run-time library functions).  Use the string functions defined in ISTRING.H: IStrLen, IStrCopy, etc.  These are wrappers for system APIs that are DBCS enabled. These will change to Unicode someday.  For non-trivial string handling, use the IMsiString and MsiString objects. \line {\b Type} Avoid the use of Windows-defined macros, such as WORD, whenever possible; use the inherent C type instead.  The exception is local variables used directly as in/out parameters to Windows API.  For boolean values, use the Darwin Bool enum, to allow type checking and automation conversion.  Avoid #defines whenever possible; use "const int" or other const values instead. This allows full  type checking without generating additional code. Use the int type when size doesn't matter, since that is  processed most efficiently. \line {\b Header Files}  Only put defines in header files that are required by more than one source file. Otherwise,  dependencies may inadvertently be created by exposing internal structures.  Define derived implementation classes at the start of the .CPP file when possible.  Headers local to a module are put in the same directory as the .CPP files  Put detailed method comments in the help file, put the help file source name in the header  Put comments in the header file describing classes defined and include and define requirements. \line {\b Function calls} All calls to functions other than a member function of the current object, or a static member of another class,   should be qualified with one of the dummy specifiers below to indicate the API that is being used. Unspecified  global functions can use just a "::" prefix, such as ::operator new.\line \line Currently the following API dummy specifiers are defined (all defined to nothing):\line WIN::  - Win32 API call, fails on Mac\line MAC::  - Mac API call, fails on Win32\line OLE::  - OLE API call, fails on modules not using OLE\line AUT::  - Local automation DLL functions\line SRV::  - Local services DLL function\line LOC::  - Functions local to a file\line {\b Procedure headers} All procedures should be well documented, with all input and return parameters described.  If the procedure  is an interface function of any object exposed through an IMsi* COM interface, the documentation for that  function should reside in the MSIAUTO help file (not in the source code).  In this case, the function header  should be formatted like this example:\line  \line{\f1 IMsiRecord* CMsiEngine::GetFeatureCost(IMsiString& ristrFeature, int& iCost)\line //----------------------------------------------\line \{\line ...\line \}\line \line If the procedure is a local function (whether global, or a protected or private member of a class), then  the documentation should appear in the function header, as in this example:\line \line {\f1 ifiEnum CMsiPath::GetFileVersion(const ICHAR* szFullPath, int& riMS, int& riLS )\line /*----------------------------------------------------------------------------\line Gets the file version values from the given file and sets the given riMS & \line riLS variables.\line \line Arguments:\line szFullPath: a zero terminated character string containing the fully\line qualified path (including disk drive) to the file.\line riMS: Most significant 32 bits of source file version stamp.\line riLS: Least significant 32 bits of source file version stamp.\line Returns:\line ifiNoError-       Version retrieved successfully \line ifiNoFile-        Specified file does not exist\line ifiNoFileInfo-    Specified file has no version\line ifiFileInfoError- An error occurred while trying to retrieve the version\line ------------------------------------------------------------------------------*/\line \{\line ...\line \}\line \line {\b General Code Review Checklist} Here are a few of the important issues, and potential problems, to look for when reviewing code:\line \line * Are all input values and return values well-defined?\line \line * Are all return states well-defined and correct?\line \line * Are potential errors returned by function calls always being handled properly?\line \line * Are there any "magic numbers" that should be made into well-defined constants?\line \line * Are there any useful assertions (or other debugging code) missing?\line \line * Are comments correct and concise?\line \line * Any code that is commented or #IFDEF'ed out should either be taken out, or well commented  as to why the code isn't being used.\line \line * Are any header files included that are unnecessary?\line \line * Is there code here that duplicates code found elsewhere in the project?\line \line * Are there any local variables which are used only once, where a constant value might be better?\line \line * Are there any unnecessary globals?\line \line * Are there any other performance problems?\line \line {\b Specific problems to watch for} * Is the value returned by the GetLastError() system call being interpreted properly?  Remember that the error  code returned by GetLastError() gets reset on every system call (successful or not), so a better name for it  would be GetLastStatus().\line \page #{\footnote Coding_UsingMemMgr} ${\footnote Coding Using Debug Memory Manager} K{\footnote Using Debug Memory Manager} +{\footnote Coding:Using Debug Memory Manager} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b\keepn Using the Debug memory manager \par}\li180 The debug memory manager has several flags you can set to change how it works. Setting the environment variable DEBUGMEM or calling the {\uldb SetDebugFlags}{\v MsiMalloc_SetDebugFlags} method  on an allocator from VB allows you to set several flags. \par 1\tab Does not actually free memory.   Places it in a linked list for comparing with future free requests.  Useful for tracking down doubly freeing memory. \par 2\tab Logs all allocations to the debug log file. \par 4\tab Checks the status of all memory blocks when a block is allocated \par 8\tab Checks the status of all memory blocks when a block is freed. \par 16\tab Only initializes the symbol information when it's needed.  This is useful when tracking down a memory leak when the EXE terminates and frees  memory. There are currently problems with the symbol information being freed when  this happens. \page #{\footnote Coding_BuildingDatabases} ${\footnote Building the databases} K{\footnote Building the databases} +{\footnote Coding:Building the databases} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b\keepn Building the databases \par}\li180 The makefile currently builds five databases during the debug build process: {\f1 testdb.msi}, {\f1 template.msi},  {\f1 schema.msi}, {\f1 testcab.msi}, and {\f1 repack.msi} and then validates all five (validation won't catch  everything though). \par {\b Source directories for the databases}\line {\f1  testdb.msi    } %DARWIN%\\data\\testdb \line {\f1  template.msi  } %DARWIN%\\data\\template \line {\f1  schema.msi    } %DARWIN%\\data\\schema \line {\f1  testcab.msi   } %DARWIN%\\data\\testdb.cab \line {\f1  repack.msi    } %DARWIN%\\src\\tools\\repack\\support \line \par {\b Build order}\line {\f1 first  } schema.msi \line {\f1 second } template.msi \line {\f1 third  } testdb.msi \line {\f1 fourth } testcab.msi \line {\f1 fifth  } repack.msi \line \par {\b What's in the databases}\line {\f1 schema.msi   } contains defined _Validation table, all other table schemas (no row data)\line {\f1 template.msi } basic UI, install sequences and actions \line {\f1 testdb.msi   } UITEST, sample install \line {\f1 testcab.msi  } sample install \line {\f1 repack.msi   } repackager template database, some extra tables (i.e. SourceDirectory)\line \par {\b How built}\line {\f1 schema.msi   } create new, import from schema source\line {\f1 template.msi } create new, import from template source, merge in schema.msi \line {\f1 testdb.msi   } create new, import from testdb source, merge in template.msi \line {\f1 testcab.msi  } create new, import from testcab source, merge in template.msi, add msproj1.cab\line {\f1 repack.msi   } create new, import from repack source, merge in template.msi \line  \par {\b Making changes}\line\line {\f1 Table schema changes}\line \tab When adding, removing, or modifying columns or tables, always change the .idt file in  the schema source.  If the table also exists in one of the other four source directories, be sure to  change it there as well (or merge problems or worse could arrise). {\b Always remember to make  the change to the {\uldb Validation table}{\v _msi__Validation_Table@msi.hlp} as well.}  You will also have to  modify the _Validation table in %DARWIN%\\data\\testdb.cab\\validate as it is another copy of the  _Validation table which was required since the cabinets were generated before the decision to  enforce the primary key as token rule.\line\line {\f1 Bumping the Database version}\line \tab When the database version is bumped up, edit the _Summary.idt tables in all five source  directories.  Merging does not deal with the {\uldb Summary Information}{\v Summary_Overview} stream.\line\line  {\f1 Changing the _Validation table}\line  \tab When changing the entries in the _Validation table, be sure to change it in schema source and in   the _Validation table in %DARWIN%\\data\\testdb.cab\\validate.  If you add a new table particular to   only one database (and not any others), update or add the _Validation table and the entries required   for the new table or column.  During merging, the database will import those new entries and   receive the rest from the merging of the other database (which will bring schema.msi's _Validation   table).\line\line {\f1 Other}\line \tab Make sure all of the databases pass validation and that the '_MergeErrors' table is not  created as it means that merge conflicts occured and those conflicts should be investigated. \page #{\footnote Msispy_Tool} ${\footnote Msispy Tool} K{\footnote Msispy} +{\footnote Tool:Msispy} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MSISPY: A Tool to Display Component-Level View of System \par}\li180 \line {\i\b MSISPY} provides a component level view of the products and features installed on a system,  using either a Darwin database, or the registry information. Msispy also displays the status of  each, and allows you to partially or completely re-install missing or damaged items. You  can also  re-configure any product or feature, selecting the install level, and specifying whether to install  it locally or run it from a network server. \line\line {\b Menu Options}\line\line  Under the {\b File} Menu,\line \tab {\i\b Open Any Database} allows you to open an MSI package.\line \tab {\i\b Open Local Database} uses the registry information to display information about all the\line \tab   products installed on the computer.\line \tab {\i\b Load Saved Profile} allows you to load a profile of the system previously saved by Msispy.\line \tab {\i\b Restore Profile} (enabled only when a profile is loaded) attempts to restore the system\line \tab   to the saved profile. If more components have been added since the profile was saved, they\line \tab   are left untouched. If some products or components have been damaged since the profile was\line \tab   saved, msispy attempts to restore them by attempting to re-install them from the original\line \tab   source. If the source is not available, you are given the option to abort, retry or ignore.\line \tab {\i\b Save Current Profile} allows you to save a complete profile of the system onto a file. The\line \tab   information is stored in an easy to read text format. This information should not be modified\line \tab   directly.\line\line  Under the {\b View} Menu,\line \tab {\i\b Refresh} refreshes the display by getting the displayed information again and redrawing it.\line\line  Under the {\b Options} Menu, \line \tab {\i\b Diagnostic Mode} allows you to run msispy in either of the two modes- normal and diagnostic.\line \tab   In the Normal mode, a component's status is determined by the status of its key-file.\line \tab   In the Diagnostic mode, each file of the component is checked and the component status\line \tab   displayed is determined using this information. This gives a more accurate picture of the\line \tab   system, but make the program much slower.\line\line {\b Context Menus}\line\line When a product, feature or component is selected, clicking on the right mouse-button brings up the   context menus that allow you to perform operations on the selected item.\line\line All context menus have a {\i\b Properties} option, that brings up a property sheet containing information  about the selected item. In addition to the {\b General} tab that contains the information, the property  sheets also contain a {\b File List} tab, that contains information about all the files needed by the  selected item. The list of files contains information about the file including the component that uses it,  the file name and size when it was installed, the location of the file. In this tab, the {\b Verify Files}  button allows you to check the current status of the files. This button brings up a window with the current  file information, including current size, creation, last access and modification dates. If the file is not  found, or if the file size is different, the file is marked broken with an icon to the its left.\line\line {\b Important:} If a profile is in use, the verify files brings up information about the files {\i when the  profile was saved, not the current file information}.\line\line Additional context-menu choices cary depending on the item selected. When the selected item is a\line\line {\b Component}: The menu comprises \line \tab {\i\b Re-install Component} (enabled only if the component is broken), which allows you to re-install\line \tab   the component from it's original install source.\line\line {\b Installed Feature or Product}: The menu comprises \line \tab {\i\b Re-install}, which allows you to use one of the available re-install modes, including\line \tab   options to re-install just the damaged or missing files. Other options allow you to force all \line \tab   the files to be re-installed, the registry entries to be verified, and so on.\line \tab {\i\b Configure}, which allows you to install the feature on your local machine, or run it\line \tab   from a remote source. Some features may have components that need to be installed on the local\line \tab   machine. Attempting to install such features to run from a remote location will lead to a mix\line \tab   of some components being on the local system and the rest at the remote location.\line \tab {\i\b Un-install}, which allows you to un-install the product or feature. If a feature with\line \tab   sub-features is un-installed, all of its sub-features will be un-installed as well.\line\line {\b Uninstalled Product or Feature}: If an MSI package for a product not installed on the local system \line \tab   is in use, the context menu has the following options:\line \tab {\i\b Install Product}, which will install the product on the local system using the default options\line \tab {\i\b Advertise Product}, which will advertise the product on to the local system. This will \line \tab   set all the registry entries needed for the product, but will not actually install any files \line \tab   on the local system. The files will be transferred in when the component they belong to is used.\line\line {\b Product or Feature in a Profile}: The menu always comprises:\line \tab {\i\b Restore Profile}, which has the same functionality as {\b Restore Saved Profile} described above.\line\line {\b Command Line Syntax:} \line {\b msispy } \page
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\help\database.rtf ===
{\rtf1\ansi {\fonttbl{\f0\fswiss Arial;}{\f1\fmodern Courier New;}} {\colortbl;} \fs20 @{\footnote   Help Topics for Microsoft Installer Database Classes} \page #{\footnote Table_ArchiveFormat} ${\footnote Database Table Archive Format} K{\footnote DATABASE; Archive; Format} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Installer Table Archive Format \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Database tables are normally maintained individually as text archive files  of the format below with the default extension ".idt". The MsiDatabase object  has {\uldb ExportTable}{\v MsiDatabase_ExportTable} and  {\uldb ImportTable}{\v MsiDatabase_ImportTable} functions that transfer these  file to and from the physical database. \par\li0{\b File Format}\par\li500\fi-320 Lines composed of tab-delimited text fields, terminated with CR and LF.\line 1st line contains the columns names as stored in the database.\line 2nd line contains the column specifications as described below.\line 3rd line contains the table name and all the primary keys for the table.\line Subsequent lines contain the data values for each row in the table.\line Integer, datetime, and bit fields are all converted to integer text.\line Control characters (CR,LF,Tab,Null) are remapped to avoid delimiter conflict.\line Memo and BLOB fields stored as separate files, filename used as column data.\line Memo filename: 1st 8 chars from row data + ".imd".\line BLOB filename: 1st 8 chars from row data + ".ibd".\line \par\fi0\li0{\b Datatype Codes}\par\li180 An upper case letter indicate that Null values are allowed in the column.  The '?' indicates that the maximum width of the column must be specified. \par\pard\li300\tx1000 b? \tab Binary bytes(not supported), SQL_BINARY\line c? \tab Character array (1-255), SQL_CHAR\line d6 \tab Date, SQL_DATE\line d16\tab Datetime, SQL_TIMESTAMP\line i0 \tab Boolean, SQL_BIT\line i1 \tab Byte, SQL_TINYINT\line i2 \tab Short, SQL_SMALLINT\line i4 \tab Integer, SQL_INTEGER\line k4 \tab Counter, SQL_INTEGER (SQL_AUTO_INCREMENT)\line s0 \tab Memo, SQL_LONGVARCHAR\line s? \tab String, variable length (n=1-255), SQL_VARCHAR\line v0 \tab BLOB, SQL_LONGVARBINARY\line v? \tab VarBinary (1-255), SQL_LONGBINARY (not supported)\line \page #{\footnote New_Table_ArchiveFormat} ${\footnote New Database Table Archive Format} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Installer Table Archive Format \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Database tables are normally maintained individually as text archive files  of the format below with the default extension ".idt". The MsiDatabase object  has {\uldb ExportTable}{\v MsiDatabase_ExportTable} and  {\uldb ImportTable}{\v MsiDatabase_ImportTable} functions that transfer these  file to and from the physical database. The format is designed to support  both MSI and ODBC database specifications. \par\li0{\b File Format}\par\li500\fi-320 Lines are composed of tab-delimited text fields, terminated with CR and LF.\line The 1st line contains the table name followed by the columns names.\line The 2nd line contains the primary key count followed by the column specifications.\line Subsequent lines contain the data values for each row in the table.\line The first data value contains the persistent row attributes, stored as characters.\line Integer, datetime, and bit fields are all converted to integer text.\line Control characters (CR,LF,Tab,Null) are remapped to avoid delimiter conflict.\line Memo and BLOB fields stored as separate files; the filename used as column data.\line Memo filename: 1st 8 chars from row data + ".imd".\line BLOB filename: 1st 8 chars from row data + ".ibd".\line Primary key columns must be specified first in priority order.\line \par\fi0\li0{\b Row Status attribute specification}\par\li180 Upper case letters are use to indicate each attribute tat is in the True state.\line \par\pard\li300\tx1000\tx3000 T \tab iraTemporary   \tab not persisted with table unless explicitly forced\line P \tab iraProvisional \tab with T, persisted only when database state dumped\line \tab \tab may be used alone by external client to mark row as incomplete\line U \tab iraUserInfo    \tab for use by external client to mark rows\line \tab \tab not used by database engine\line R \tab iraReadOnly    \tab prevents rows from being updated\line \par\fi0\li0{\b Datatype Column Specification}\par\li180 Lower case letters are used to indicate a non-nullable column.\line Upper case letters would indicate that Null values are allowed in the column.\line \par\pard\li180\tx1000 {\b Code\tab MSI type \tab SQL type}\line {\f1 b0} \tab icdObject \tab binary stream, SQL_LONGVARBINARY\line {\f1 d6} \tab icdShort \tab date, SQL_DATE\line {\f1 d16}\tab icdLong \tab datetime, SQL_TIMESTAMP\line {\f1 i0} \tab icdShort \tab boolean, SQL_BIT\line {\f1 i1} \tab icdShort \tab byte, SQL_TINYINT\line {\f1 i2} \tab icdShort \tab short, SQL_SMALLINT\line {\f1 i4} \tab icdLong \tab integer, SQL_INTEGER\line {\f1 s0} \tab icdString \tab memo, SQL_LONGVARCHAR\line {\f1 s?} \tab icdString \tab string, variable length (?=1-255), SQL_VARCHAR\line \page #{\footnote MsiDatabase_Specifications} ${\footnote Installer Database Specifications} K{\footnote DATABASE; Specifications} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Database Engine Overview and Features \line\fs18\b0\tx3000\tab{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The MSI database engine has been designed for small size, high query performance,  and very compact persistent file size, as well as to support the special requirements  of the installer such as object and stream datatypes, tree-walking cursors,  merges and diffs, and temporary tables, columns, and rows.  The engine supports two levels of access: Very high-performance direct table access via cursors,  and high-level access via SQL queries. The persistent file format uses OLE structured storage,  which is used to support the limited transaction capability.  Due to the performance and size constraints, we do not purport to be a complete SQL DBMS.  The implementation is identical between Win32 and Macintosh PPC, except for some minor differences  at the OLE interface level. \par\fi0\li0{\b Features}\par\li180 Tables are indexed by primary keys. Natural fetch order is by primary key.\line Any column may be specified to accept or reject null values, including primary keys.\line Tables may be linked as a tree through any column, and may be walked from any node.\line Strings are pooled; only one copy of each unique string is kept and stored per database.\line String columns are unsized and may hold strings up to 64K bytes.\line Streams are persisted and are accessed via stream objects.\line Databases may be opened from files, resources, and IStorage interfaces. Columns may be dynamically added to tables, and may be non-persistent.\line SummaryInformation stream properties are individually readable and writable.\line The database engine is exposed as a set of COM objects that support OLE automation.\line Rows may be marked non-persistent and/or read-only.\line Row attibutes may be queried: inserted, modified, non-persistent, merge failure, locked.\line Multiple update modes: Insert(new row), Update(existing row), Assign(force), Merge(insert or match).\line Temporary tables may be created. Even a temporary database can be created.\line Databases can be diffed, creating a transform file that can be applied to a database.\line COM objects may be stored in tables in non-persistent columns.\line Tables may optionally be locked in memory for increased performance.\line Stream objects may be used in tables, and are persisted as streams.\line A separate output database may be specified to avoid writing to original database.\line SQL updates and sorts through joins are supported.\line SQL parameterized queries can be re-executed with new parameters.\line Access and SQL Server databases and ODBC data sources are supported through ODBCS.\line Temporary tables may be use with ODBC databases and may be joined with SQL queries.\line ODBC driver available to expose MSI database as an ODBC data source.\line Table may be imported and exported to text archives by both MSI and ODBC databases.\line \par\fi0\li0{\b Low-level interface}\par\li180 The low-level interface consists of two primary objects: MsiTable which handles the schema,  and MsiCursor which handles external data transfer. The cursor object communicates to the  table object at the row level such that table updates are performed on complete rows.  String objects and stream objects are used to transfer non-integer data.  Row filtering can be performed only by matching column values for equality. \par\fi0\li0{\b High-level interface}\par\li180 The high-level interface is accessed through the MsiView object, which is constructed with  a SQL SELECT statement. The statement can contain parameter markers, "?", literal column values,  a predicate expression consisting of logical and comparison operators (including equi-joins),  and an ORDER BY column list. Queries with ORDER BY that doesn't specify the primary key are  slower to execute, as a temporary table must be constructed. Data is transferred using  MsiRecord objects, which contain the set of values transferred. The values may be integers,  strings, streams, or COM objects. \par\fi0\li0{\b Persistent storage}\par\li180 OLE structured storage is used to persist the database. Each table, including catalog tables,  is stored as a separate stream. Stream data values are also stored as unique streams.  The standard \\005SummaryStream property values are supported for use by the database client.  Transforms may be stored as substorages, typically to provide updates and language transformations.  The persistent files are compatible between the Win32 and Macintosh database engine.  Both direct and transaction modes are supported, and temporary rows may optionally be persisted.  For archiving purposes, the database engine can import and export tables as tab-delimited text files,  with stream data values exported as separate files. \par\fi0\li0{\b SQL limitations}\par\li180 Currently only SELECT statements are supported.\line Update and delete are performed following SELECT execution; positioned update and delete are supported.\line Only equi-joins are supported, using equality comparison; subqueries are not supported.\line Only logical and comparison predicate operators are supported, no functions, arithmetic operators, GROUP BY.\line \par\fi0\li0{\b Schema limitations}\par\li180 Datatypes supported: string, short integer, long integer, stream, object(non-persistent).\line Tables may contain from 1 to 32 columns. Tree-linked tables are limited to 64K rows and 256 nesting levels.\line Primary keys columns must be defined first in their priority order, followed by any non-primary key columns.\line Persistent columns must be defined before temporary columns.\line Text collating sequence is undefined; however identical text values will always group together.\line Table and column names are not contrained; however to export tables, their names must be unique in the first 8 characters.\line \page *{\footnote VBA} #{\footnote MsiDatabase_Object} ${\footnote MsiDatabase Object} K{\footnote MsiDatabase; MsiView} +{\footnote Class:MsiDatabase} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiDatabase Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The database object accesses a particular database, which may be either  an Access database file, a SQL Server database, an ODBC data source, or a  Microsoft Installer database. A low-level database engine is provided by the  {\uldb MsiTable}{\v MsiTable_Object} and {\uldb MsiCursor}{\v MsiCursor_Object}  objects, providing the basis of the Installer database and also providing  support for ODBC tables loaded into memory.  Some of the capabilities of the internal engine are object storage, dynamic  addition of temporary columns, high performance, and tree representation. In the Microsoft Installer database, strings are stored in a common pool as  an array of MsiString objects.  Database fields simply store indices to this private array of unique strings.  Internally, string uses are reference counted as part of the string management.  Functions are provided for converting string objects to and from string indices.  A string that returns zero for its index does not exist in the current database. Persistent tables are normally loaded into memory when a table object is created  and removed from memory when the last reference to the table object is released.  The LockTable function is used to keep a frequently used table in memory  independently of reference counts. As long as the lock calls are greater than  the unlock calls, the table remains in memory until the database is closed. Before the MsiDatabase object that is created for update is destructed  (by releasing all references), the {\uldb Persist}{\v MsiDatabase_Persist} method  must be called to either record all changes or to back out all changes, else  an implicit rollback is performed at object destruction. MSI, Access,  and SQLServer all support transactions and require this call. Some ODBC  data source may not support transactions, in which case changeds cannot be rolled back  (most non-transaction data source do not support update, so this is moot point). \par\li0{\b Properties}\par\li180 {\uldb UpdateState}{\v MsiDatabase_UpdateState}\line {\uldb Storage}{\v MsiDatabase_Storage}\line {\uldb TableState}{\v MsiDatabase_TableState}\line {\uldb ANSICodePage}{\v MsiDatabase_ANSICodePage}\line \par\li0{\b Methods}\par\li180 {\uldb OpenView}{\v MsiDatabase_OpenView}\line {\uldb GetPrimaryKeys}{\v MsiDatabase_GetPrimaryKeys}\line {\uldb ImportTable}{\v MsiDatabase_ImportTable}\line {\uldb ExportTable}{\v MsiDatabase_ExportTable}\line {\uldb DropTable}{\v MsiDatabase_DropTable}\line {\uldb FindTable}{\v MsiDatabase_FindTable}\line {\uldb LoadTable}{\v MsiDatabase_LoadTable}\line {\uldb CreateTable}{\v MsiDatabase_CreateTable}\line {\uldb LockTable}{\v MsiDatabase_LockTable}\line {\uldb GetCatalogTable}{\v MsiDatabase_GetCatalogTable}\line {\uldb EncodeString}{\v MsiDatabase_EncodeString}\line {\uldb DecodeString}{\v MsiDatabase_DecodeString}\line {\uldb CreateTempTableName}{\v MsiDatabase_CreateTempTableName}\line {\uldb Commit}{\v MsiDatabase_Commit}\line {\uldb CreateOutputDatabase}{\v MsiDatabase_CreateOutputDatabase}\line {\uldb GenerateTransform}{\v MsiDatabase_GenerateTransform}\line {\uldb SetTransform}{\v MsiDatabase_SetTransform}\line {\uldb MergeDatabase}{\v MsiDatabase_MergeDatabase} \par\li0{\b Query API Sequencing}\par\li500\fi-320 The normally course of data access is summarized below: \line 1. The client obtains a database object ({\uldb MsiServices.CreateDatabase}{\v MsiServices_CreateDatabase}). \line 2. OpenView is called, specifying the view name and intended actions. \line 3. View.Excecute is called, supplying any parameters in an MsiRecord object. \line 4. View.Fetch is called repeatedly, returns MsiRecord objects until exhausted. \line 5. View.Close is called, which releases the query and unfetched records. \line 6. Database.Persist is called to persist any database updates or to back out changes. \page *{\footnote CPP} #{\footnote IMsiDatabase_Class} ${\footnote IMsiDatabase Class} K{\footnote IMsiDatabase; IMsiView} +{\footnote Class:IMsiDatabase} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b IMsiDatabase Object \line\fs18\b0\tx3000\tab{\uldb Msi Classes}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The database object accesses a particular database, which may be either  an Access database file, a SQL Server database, an ODBC data source, or a  Microsoft Installer database. A low-level database engine is provided by the  {\uldb IMsiTable}{\v MsiTable_Object} and {\uldb IMsiCursor}{\v MsiCursor_Object}  objects, providing the basis of the Installer database and also providing  support for ODBC tables loaded into memory.  Some of the capabilities of the internal engine are object storage, dynamic  addition of temporary columns, high performance, and tree representation. In the Microsoft Installer database, strings are stored in a common pool as  an array of IMsiString objects.  Database fields simply store indices to this private array of unique strings.  Internally, string uses are reference counted as part of the string management.  Functions are provided for converting string objects to and from string indices.  A string that returns zero for its index does not exist in the current database. Persistent tables are normally loaded into memory when a table object is created  and removed from memory when the last reference to the table object is released.  The LockTable function is used to keep a frequently used table in memory  independently of reference counts. As long as the lock calls are greater than  the unlock calls, the table remains in memory until the database is closed. \par\li0{\b Methods}\par\li180 {\uldb OpenView}{\v MsiDatabase_OpenView}\line {\uldb GetPrimaryKeys}{\v MsiDatabase_GetPrimaryKeys}\line {\uldb ImportTable}{\v MsiDatabase_ImportTable}\line {\uldb ExportTable}{\v MsiDatabase_ExportTable}\line {\uldb DropTable}{\v MsiDatabase_DropTable}\line {\uldb FindTable}{\v MsiDatabase_FindTable}\line {\uldb LoadTable}{\v MsiDatabase_LoadTable}\line {\uldb CreateTable}{\v MsiDatabase_CreateTable}\line {\uldb LockTable}{\v MsiDatabase_LockTable}\line {\uldb GetCatalogTable}{\v MsiDatabase_GetCatalogTable}\line {\uldb EncodeString}{\v MsiDatabase_EncodeString}\line {\uldb DecodeString}{\v MsiDatabase_DecodeString}\line {\uldb CreateTempTableName}{\v MsiDatabase_CreateTempTableName} \par\li0{\b Query API Sequencing}\par\li500\fi-320 The normally course of data access is summarized below: \line 1. The client obtains a database object (IMsiServices::GetDatabase) \line 2. OpenView is called, specifying the view name and intended actions. \line 3. View->Excecute is called, supplying any parameters in an IMsiRecord. \line 4. View->Fetch is called repeatedly, returns records until exhausted. \line 5. View->Close is called, which releases the query and unfetched records. \page #{\footnote MsiDatabase_OpenView} ${\footnote MsiDatabase.OpenView} +{\footnote MsiDatabase:OpenView} K{\footnote OpenView} K{\footnote ivcNoData;ivcFetch;ivcUpdate;ivcInsert;ivcDelete;} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b OpenView Method \line\tx360\tab\fs18\b0{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns an {\uldb MsiView}{\v MsiView_Object} object representing the query  specified by a SQL string. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .OpenView({\i sql, intent})} \par{\i object}\line Required. The MsiDatabase object. \par{\i\b sql}\line Required. The SQL query string. \par{\i\b intent}\line Required. The combination of ALL operations intended on the MsiView object: \line{\f1  ivcNoData   }- No data access, can get column information only. \line{\f1  ivcFetch    }- Fetch data from rows into MsiRecord objects. \line{\f1  ivcUpdate   }- Update rows from modified MsiRecord objects. \line{\f1  ivcInsert   }- Insert rows using data in MsiRecord objects. \line{\f1  ivcDelete   }- Delete rows using fetched MsiRecord objects. \par\fi0\li0{\b SQL Syntax}\par\li500\fi-320 The SQL query strings are restricted to the format:\line The {\b select} SQL query.\line {\f1\b SELECT} [DISTINCT]\{column-list\} {\f1\b FROM} \{table-list\} [{\f1\b WHERE}  \{operation-list\}] [{\f1\b ORDER BY} \{column-list\}].\line \{table-list\} is a comma delimited list of one or more table names hereby refered to as \{table\} in the join. Table names  that clash with SQL keywords need to be quoted within {\b ``}.\line \{column-list\} is a comma delimited list of one or more table columns hereby refered to as \{column\} selected. Ambiguous columns may  be further qualified as \{tablename.column\}. Column names that clash with SQL keywords need to be  quoted within {\b ``}. In case the column is qualified as \{tablename.column\} and if there is a need  to escape the identifier then the tablename and the column need to be individually escaped as  \{`tablename`.`column`\}\line \{operation-list\} clause is optional and is a grouping of operations to be used to filter the selection. The operations can be of the type -\line \{column\} = \{column\}\line \{column\} <> \{column\}\line \{column\} > \{column\}\line \{column\} < \{column\}\line \{column\} >= \{column\}\line \{column\} <= \{column\}\line \{column\} = \{constant\}\line \{column\} <> \{constant\}\line \{column\} > \{constant\}\line \{column\} < \{constant\}\line \{column\} >= \{constant\}\line \{column\} <= \{constant\}\line \{column\} is null\line \{column\} is not null\line individual operations can be grouped be {\b AND} or {\b OR} operators. Ordering can be imposed by use of {\b()}\line \{constant\} is either a string or an integer. A string has to be quoted within {\b''}.\line The {\bORDER BY} clause is optional and will cause an initial delay during sorting.\line The {\b DISTINCT} clause is optional and will not repeat identical records in the return result set.\line  The table and column names are case sensitive, even if ODBC databases are used.  However, SQL keywords are case-insensitive.  Only inner joins are supported, specified by a comparison of columns from different tables.\line The {\b delete} SQL query.\line {\f1\b DELETE FROM} \{table\} [{\f1\b WHERE} \{operation-list\}].\line The {\b update} SQL query.\line {\f1\b UPDATE} \{table-list\} {\f1\b SET} \{column\}{\f1\b =} \{constant\}  [{\f1\b ,} \{column\}{\f1\b =} \{constant\}]* [{\f1\b WHERE} \{operation-list\}].\line The {\b insert} SQL query.\line {\f1\b INSERT INTO} \{table\} \{{\b (}column-list{\b )}\} {\f1\b VALUES}  \{{\b (}constant-list{\b )}\}.\line The * implies 0 or more repitition.\line The {\b create} SQL query.\line {\f1\b CREATE TABLE} \{table\} {\f1\b (} \{column\} [{\f1\b CHAR} [{\f1\b (} \{size\} {\f1\b )}] | {\f1\b CHARACTER} [{\f1\b (} \{size\} {\f1\b )}] | {\f1\b LONGCHAR}  | {\f1\b SHORT} | {\f1\b INT} | {\f1\b INTEGER} | {\f1\b LONG} | {\f1\b OBJECT} ]  [{\f1\b NOT NULL}] [{\f1\b TEMPORARY}] [, {column}...]* {\f1\b PRIMARY KEY } {column} [, {column}]* {\f1\b )}.\line The * implies 0 or more repitition.\line The {\b alter} SQL query.\line {\f1\b ALTER TABLE} \{table\} {\f1\b ADD } \{column\} [{\f1\b CHAR} [{\f1\b (} \{size\} {\f1\b )}] | {\f1\b CHARACTER} [{\f1\b (} \{size\} {\f1\b )}] | {\f1\b LONGCHAR}  | {\f1\b SHORT} | {\f1\b INT} | {\f1\b INTEGER} | {\f1\b LONG} | {\f1\b OBJECT} ]  [{\f1\b NOT NULL}] [{\f1\b TEMPORARY}].\line \page #{\footnote MsiDatabase_GetPrimaryKeys} ${\footnote MsiDatabase.GetPrimaryKeys} +{\footnote MsiDatabase:GetPrimaryKeys} K{\footnote GetPrimaryKeys} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetPrimaryKeys Method \line\tx360\tab\fs18\b0{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns a MsiRecord object containing table name in Field(0) and the  columns names comprising the primary keys in succeeding fields,  corresponding their column numbers. The field count of the record  is the count of primary key columns. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetPrimaryKeys {\i table}} \par{\i object}\line Required. The MsiDatabase object. \par{\i\b table}\line Required. Name of an existing table. An error is generated if the table does  not exist. \page #{\footnote MsiDatabase_ImportTable} ${\footnote MsiDatabase.ImportTable} +{\footnote MsiDatabase:ImportTable} K{\footnote ImportTable; Import} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ImportTable Method \line\tx360\tab\fs18\b0{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Imports a database table from a text archive file, dropping any existing table. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ImportTable {\i path, file}} \par{\i object}\line Required. The MsiDatabase object. \par{\i\b path}\line Required. An MsiPath object set to the folder where the text file is present. \par{\i\b file}\line Required. The name of the file to be imported. This does not include the folder,  as that must be set in the path object. The table name is specified within the file. \par\fi0\li0{\b\uldb Archive File Format}{\v Table_ArchiveFormat} \par\fi0\li0{\b SummaryInformation Stream}\par\li180 For .MSI databases only, not ODBC, a special stream "\005SummaryInformation" is written  containing standardized properties defined by OLE and browsable by the Explorer.  If the table name in the text archive file is named exactly "_SummaryInformation",  the table rows consisting of pairs of Property Id numbers with corresponding data values  will be written to the property stream. For ODBC databases, a normal table will be created.  If the data value is a valid integer, it is taken to be an integer property. Else if it  can be parsed as a date or date/time value (consisting of digits separated by slashes) it  is taken to be a data/time value. Otherwise it is assumed to be a string value. Date values  may have two formats: yyyy/mm/dd  (time is entered as 0) or yyyy/mm/dd/hh/mm/ss (24 hr. time).  The summary information is customarily generated for new files by the release build process. \page #{\footnote MsiDatabase_ExportTable} ${\footnote MsiDatabase.ExportTable} +{\footnote MsiDatabase:ExportTable} K{\footnote ExportTable; Export} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ExportTable Method \line\tx360\tab\fs18\b0{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Copies the structure and data from a specified table to a text archive file. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ExportTable {\i table, path, file}} \par{\i object}\line Required. The MsiDatabase object. \par{\i\b table}\line Required. The name of the database table, case-sensitive if MSI database. \par{\i\b path}\line Required. An MsiPath object set to the folder where the text file will be placed. \par{\i\b file}\line Required. The name of the file to be created. This does not include the folder,  as that must be set in the path object. Keep to the 8.3 format if SLM is used. \par\fi0\li0{\b\uldb Archive File Format}{\v Table_ArchiveFormat} \page #{\footnote MsiDatabase_LoadTable} ${\footnote MsiDatabase_LoadTable} +{\footnote MsiDatabase:LoadTable} K{\footnote LoadTable} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b LoadTable Method \line\tx360\tab\fs18\b0{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The LoadTable method creates and returns a database table object in memory by  reading a table from the persistent database. Additional temporary columns may  be added if desired using the {\uldb CreateColumn}{\v MsiTable_CreateColumn}  of the created table. This table remains in memory as long as there are  outstanding references to the MsiTable object, or outstanding locks from the  LockTable method. If an Access, SQL Server, or ODBC table is specified,  database operations will be performed on the in-memory table, and any update  operations on persistent columns will be replicated in the persistent table. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .LoadTable({\i table, addColumns})} \par{\i object}\line Required. The MsiDatabase object. \par{\i\b table}\line Required. Name of an existing table. An error is generated if the table does  not exist in the current database. \par{\b\i addColumns}\line Optional. The anticipated number of columns that will be added  after the data is loaded. This is for optimization only. Columns may be  added beyond this number, but will require reallocation of the data rows. \par\fi0\li0{\b Remarks}\par\li180 If the requested table is already loaded into memory, a reference to  that table will be returned. When processing SQL queries on an Msi database,  tables will be loaded if necessary during the processing of the query, and  will remain loaded until the MsiView object is released. If a table is known  to be accessed repeatedly, {\uldb LockTable}{\v MsiDatabase_LockTable} may  be called to hold the table in memory once loaded. A table loaded from an ODBC database must have a primary key defined and the  composite columns must specified in order as the first columns in the table.  (In the future the column order to be altered when loaded into memory.) \page #{\footnote MsiDatabase_CreateTable} ${\footnote MsiDatabase.CreateTable} +{\footnote MsiDatabase:CreateTable} K{\footnote CreateTable} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateTable Method \line\tx360\tab\fs18\b0{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Creates a temporary, in-memory table, and returns it as a  {\uldb MsiTable}{\v MsiTable_Object} object.  If columns are marked as persistent, the table will be created in the persistent  database when the database is closed. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateTable({\i table, initRows})} \par{\i object}\line Required. The MsiDatabase object. \par{\i\b table}\line Required. Name to be given to table. An error will be generated if a table  by that name already exists in the current database. \par{\b\i rowCount}\line Optional. The suggested number of rows to allocate initially.  This is an optimization only. If this argument is omitted or has a value of zero,  the default number of rows will be initially allocated.  The data array will grow as required as more rows are inserted. \page #{\footnote MsiDatabase_LockTable} ${\footnote MsiDatabase.LockTable} +{\footnote MsiDatabase:LockTable} K{\footnote LockTable} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b LockTable Method \line\tx360\tab\fs18\b0{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The LockTable method will lock a specified table in memory once it is loaded,  or will release a lock on a table that has been locked. When all locks are released and there  are no outstanding references to the table object, it will be released from memory.  Any outstanding locks will be removed when the database object is destroyed.  The method returns a boolean indicating whether the lock operation succeeded. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .LockTable({\i table, lock})} \par{\i object}\line Required. The MsiDatabase object. \par{\i\b table}\line Required. The name of the table to lock. \par{\i\b lock}\line Required. Boolean value, TRUE to lock, FALSE to unlock. \par\fi0\li0{\b Remarks}\par\li180 Locking a table that is not loaded into memory will not attempt to load that  table into memory, but will hold it in memory once loaded. Locks are cumulative,  and the loaded table is held in memory until the lock count returns to zero.  Locking is a performance hint to the database engine and may not always be honored. \page #{\footnote MsiDatabase_DropTable} ${\footnote MsiDatabase.DropTable} +{\footnote MsiDatabase:DropTable} K{\footnote DropTable} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b  DropTable Method \line\tx360\tab\fs18\b0{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Removes a table from the persistent database along with its data.  This method will fail if the table does not exist or if the database is not  an MSI database and the table is in use. Dropping an MSI database table that  is in use will remove it from the system catalogs, but the now-anonymous MsiTable  object will remain until all references are released.  Temporary tables, created with CreateTable, cannot be dropped, but will  be destroyed when all references are released. ODBC databases generally do not  perform Drop Table within the transaction, preventing this operation from being rolled back. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .DropTable {\i table}} \par{\i object}\line Required. The MsiDatabase object. \par{\i\b table}\line Required. The name of the database table, case-sensitive if MSI database. \page #{\footnote MsiDatabase_FindTable} ${\footnote MsiDatabase.FindTable} +{\footnote MsiDatabase:FindTable} K{\footnote FindTable} K{\footnote itsUnknown;itsTemporary;itsUnloaded;itsLoaded} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b  FindTable Method \line\tx360\tab\fs18\b0{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the status of a table in this database, one of the enum itsEnum: \line{\f1  itsUnknown   = 0 } named table is not in database \line{\f1  itsTemporary = 1 } table is temporary, not persistent !!marked obsolete \line{\f1  itsUnloaded  = 2 } table exists in database but is not loaded \line{\f1  itsLoaded    = 3 } table is loaded into memory from database \line{\f1  itsOutput    = 6 } table copied to output database (itsUnloaded + 4) \line{\f1  itsSaveError = 7 } unable to write table to storage (itsLoaded + 4) !!marked obsolete \line{\f1  itsTransform = 10} table need to have tranform applied when loaded !!marked obsolete \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .FindTable {\i table}} \par{\i object}\line Required. The MsiDatabase object. \par{\i\b table}\line Required. The name of the database table, case-sensitive. \page #{\footnote MsiDatabase_TableState} ${\footnote MsiDatabase.TableState} +{\footnote MsiDatabase:TableState} K{\footnote TableState} K{\footnote itsUnknown;itsTemporary;itsUnloaded;itsLoaded} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b TableState Property \line\tx360\tab\fs18\b0{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns a selected attribute of a table in this database. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .TableState({\i table, state})} \par{\i object}\line Required. The MsiDatabase object. \par{\i\b table}\line Required. The name of the database table, case-sensitive. \par{\i\b state}\line Required. The particular attribute to be queried, one of the enum itsEnum: \line{\f1  itsPermanent   = 0 }  table has persistent columns \line{\f1  itsTemporary   = 1 }  temporary table, no persistent columns \line{\f1  itsTableExists = 2 }  table currently defined in system catalog \line{\f1  itsDataLoaded  = 3 }  table currently present in memory \line{\f1  itsUserClear   = 4 }  user state flag reset, not used internally \line{\f1  itsUserSet     = 5 }  user state flag set, not used internally \line{\f1  itsOutputDb    = 6 }  persistence transferred to output database \line{\f1  itsSaveError   = 7 }  error saving table, will retry at Commit \line{\f1  itsUnlockTable = 8 }  table is not locked in memory \line{\f1  itsLockTable   = 9 }  table locked in memory \line{\f1  itsTransform   = 10}  table needs to be transformed when loaded \page #{\footnote MsiDatabase_GetCatalogTable} ${\footnote MsiDatabase.GetCatalogTable} +{\footnote MsiDatabase:GetCatalogTable} K{\footnote GetCatalogTable} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetCatalogTable Method \line\tx360\tab\fs18\b0{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns one of the MsiTable objects maintained by the MsiDatabase object that  contain the table definitions for the database.  The returned MsiTable object is read-only, and its data can be queried by  creating an MsiCursor object on the table. The table structures are given below. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetCatalogTable({\i table})} \par{\i object}\line Required. The MsiDatabase object. \par{\i\b table}\line Required. Table to access: 0 = {\uldb _Tables}{\v _msi__Tables_Table@msi.hlp}, 1 = {\uldb _Columns}{\v _msi__Columns_Table@msi.hlp}. \par\fi0\li0{\b Tables Catalog Table Definition} \line   1 - Table name, primary key for this catalog table \line   2 - MsiTable object, only if table is loaded into memory \par\fi0\li0{\b Columns Catalog Table Definition} \line   1 - Table name, 1st column of primary key for this catalog table \line   2 - Column number, remainder of primary key \line   3 - Column name, may be Null \line   4 - Column type, integer containing packed size and type information \par\fi0\li0{\b Remarks}\par\li180 These tables are maintained for ODBC databases as well as MSI databases,  and will also contain definitions for any temporary tables created. \page #{\footnote MsiDatabase_DecodeString} ${\footnote MsiDatabase.DecodeString} +{\footnote MsiDatabase:DecodeString} K{\footnote DecodeString} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DecodeString Method \line\tx360\tab\fs18\b0{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This function converts a database string index into its referenced string. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .DecodeString({\i index})} \par{\i object}\line Required. The MsiDatabase object. \par{\i\b index}\line Required. The database string index, 0 is always the null string. \page #{\footnote MsiDatabase_EncodeString} ${\footnote MsiDatabase.EncodeString} +{\footnote MsiDatabase:EncodeString} K{\footnote EncodeString} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b EncodeString Method \line\tx360\tab\fs18\b0{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This function converts a string into its corresponding database string index.  If the string is not used in the database the value 0 will be returned.  An empty string is treated as a Null in the database and not stored.  Consequently, this functions returns 0 for an empty string. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .EncodeString({\i text})} \par{\i object}\line Required. The MsiDatabase object. \par{\i\b text}\line Required. The string for which the string index is requested. \page #{\footnote MsiDatabase_CreateTempTableName} ${\footnote MsiDatabase.CreateTempTableName} +{\footnote MsiDatabase:CreateTempTableName} K{\footnote CreateTempTableName} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateTempTableName Method \line\tx360\tab\fs18\b0{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns a unique table name that can be used for a temporary database table  using the {\uldb CreateTable method}{\v MsiDatabase_CreateTable}. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateTempTableName} \par{\i object}\line Required. The MsiDatabase object. \page #{\footnote MsiDatabase_Persist} ${\footnote MsiDatabase.Persist} +{\footnote MsiDatabase:Persist} K{\footnote Persist} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Persist Method \line\tx360\tab\fs18\b0{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180  {\b --This method is OBSOLETE.--} use {\uldb Commit}{\v MsiDatabase_Commit} instead.  Finalizes the persistent form of the database. Depending upon the action specified,  changes made to the database since it was opened can be committed or rolled back,  or the database can be physically deleted when the current object is destructed.  If the MsiDatabase object has been created read-only, this method will have no effect  and no error will be generated. If the  {\uldb CreateOutputDatabase}{\v MsiDatabase_CreateOutputDatabase} method has be called,  any unloaded input database tables will be transferred to the output database.  This method is normally called prior to shutdown when all database changes have been finalized.  If this method is never explicitly called, the database will be rolled back when the Database object is destructed,  with {\i\b action} set to {\f1 idpRollback}. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Persist {\i action}} \par{\i object}\line Required. The MsiDatabase object. \par{\i\b action}\line Required. The action to be taken on the persistent format, on of the enum idpEnum: \line{\f1  idpRollback  = 0 = FALSE } NO-OP (rollback performed at database destruction) \line{\f1  idpCommit    = 1 = TRUE  } current updates committed, further updates allowed \line{\f1  idpDelete    = 2         } file is to be deleted when all references released \line{\f1  idpSave      = 3         } NOT SUPPORTED \page #{\footnote MsiDatabase_Commit} ${\footnote MsiDatabase.Commit} +{\footnote MsiDatabase:Commit} K{\footnote Commit} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Commit Method \line\tx360\tab\fs18\b0{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Finalizes the persistent form of the database. All persistent data will be written  to the writable database. No temporary columns or rows are written. This method has  no effect on a database opened read-only. This method can be call multiple times to  save the current state of tables loaded into memory. When the database is finally  closed, any changes made subsequent to the last Commit will be rolled back.  If the {\uldb CreateOutputDatabase}{\v MsiDatabase_CreateOutputDatabase} method has be called,  any unloaded input database tables will be transferred to the output database, applying transforms as required..  This method is normally called prior to shutdown when all database changes have been finalized. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Commit} \par{\i object}\line Required. The MsiDatabase object. \page #{\footnote MsiDatabase_CreateOutputDatabase} ${\footnote MsiDatabase.CreateOutputDatabase} +{\footnote MsiDatabase:CreateOutputDatabase} K{\footnote CreateOutputDatabase} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateOutputDatabase Method \line\tx360\tab\fs18\b0{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Specifies the name of the output database to be created that will contain the  original database as modified by all update operations. This method will  fail if called after any modifications have been written to the original database.  This does not apply to changes made to tables loaded into memory, as the changes  are not written to the persistent database until the tables are released from memory. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateOutputDatabase {\i file, saveTempRows}} \par{\i object}\line Required. The MsiDatabase object. \par{\i\b file}\line Required. The name of the database to be created. Only .msi database format is currently supported. \par{\i\b saveTempRows}\line Optional. True to persist temporary table rows, False to drop them from persistent storage. \par\fi0\li0{\b Remarks}\par\li180 The method in provided to avoid unnecessary copying of the database.  Often the final location of the updated database is not known without processing the  information in the database itself, and the database could be significantly updated.  If this method is used, the original database can be opened read-only, and thus may reside  on a CD or a read-only server. This method must be called before the first update to the  persistent database, i.e. released a modified table from memory, or performing a update on a  non-loaded table using any of the update methods of the MsiView object.  When this MsiDatabase object is released, all unmodified tables, along with associated binary stream data,  will be copied to the output database. \page #{\footnote MsiDatabase_GenerateTransform} ${\footnote MsiDatabase.GenerateTransform} +{\footnote MsiDatabase:GenerateTransform} K{\footnote GenerateTransform} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GenerateTransform Method \line\tx360\tab\fs18\b0{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \par}\li180 Creates a transform which, when applied to the {\i object} database, will  result in the {\i reference} database. The transform is stored in the  {\i storage} object. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GenerateTransform({\i reference, storage, long errorConditions, long validation})} \par{\i object}\line Required. The MsiDatabase object. \par{\i\b reference}\line Required. The reference MsiDatabase object. \par{\i\b storage}\line Required. The MsiStorage object where the transform is to be stored. \par{\i\b errorConditions}\line Required. The conditions that should be ignored as errors when  the transform is applied.\line Choose either: \line{\f1  iteNone                }- None of the following conditions. \line Or combine one or more of the following: \line{\f1  iteAddExistingRow      }- Adding a row that already exists. \line{\f1  iteDelNonExistingRow   }- Deleting a row that doesn't exist. \line{\f1  iteAddExistingTable    }- Adding a table that already exists. \line{\f1  iteDelNonExistingTable }- Deleting a table that doesn't exist. \line{\f1  iteUpdNonExistingRow   }- Updating a row that doesn't exist. \par{\i\b validation}\line Required. When the transform is applied to a database, which properties should  be validated to verify that this transform can be applied to the database.  The properties are all contained in the  {\uldb Summary Information}{\v Summary_Overview} stream. \line{\f1  itvNone           }- Validate no properties. \line Or combine one or more of the following \line{\f1  itvLanguage       }- Default language must match base database. \line{\f1  itvProduct        }- Product must match base database. \line{\f1  itvPlatform       }- Platform must match base database. \line To validate product version, first choose one or more of these  three flags to indicate how much of the version is to be verified. \line{\f1  itvMajVer         }- Check major version only. \line{\f1  itvMinVer         }- Check major and minor version only. \line{\f1  itvUpdVer         }- Check major, minor, and update version. \line Then choose one of the following to indicate the required  relationship between the product version of the database the transform  is being applied to, and that of the base database. \line{\f1  itvLess           }- Applied db version <  base db version \line{\f1  itvLessOrEqual    }- Applied db version <= base db version \line{\f1  itvEqual          }- Applied db version =  base db version \line{\f1  itvGreaterOrEqual }- Applied db version >= base db version \line{\f1  itvGreater        }- Applied db version >  base db version \par\fi0\li0{\b Remarks}\par\li180 !! The error and validation conditions may or may not work !!\line\line For tables that exist in both databases, the only difference between the two  schemas that is allowed is the addition of columns to the {\b end} of the   reference table. This means that you cannot add primary key columns to a  table or change the order or names or column definitions of the existng columns  as defined in the base table.  Therefore, the reference table must contain the  exact same table schema, but it can have some additional/extra columns.  These  columns must come after the columns defined in the base table though.  In other words,  if neither table contained data and the extra columns were removed from the reference  table, the resulting refernce table would be identifcal to the base table.  No deletion  of columns, addition of primary keys, or changing of column definitions is allowed. \page #{\footnote MsiDatabase_SetTransform} ${\footnote MsiDatabase.SetTransform} +{\footnote MsiDatabase:SetTransform} K{\footnote SetTransform} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SetTransform Method \line\tx360\tab\fs18\b0{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \par}\li180 SetTransform will apply the given transform to this database. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SetTransform({\i storage}, {\i errorConditions})} \par{\i object}\line Required. The MsiDatabase object. \par{\i\b storage}\line Required. The MsiStorage object containing the transform. \par{\i\b treatAsError}\line Required. The conditions that should be ignored as errors, specified as an  integer combination of the values below. \line{\f1  iteAddExistingRow       } Adding a row that already exists. \line{\f1  iteDelNonExistingRow    } Deleting a row that doesn't exist. \line{\f1  iteAddExistingTable     } Adding a table that already exists. \line{\f1  iteDelNonExistingTable  } Deleting a table that doesn't exist. \line{\f1  iteUpdNonExistingRow    } Updating a row that doesn't exist. \par\fi0\li0{\b Remarks}\par\li180 SetTransform delays transforming tables until the last possible moment.  The steps  taken in SetTransform are to immediately transform the table and column catalogs  for the database.  The table and column catalogs are updating according to what  table is added or deleted and what column is added (no deletion of columns is  allowed).  If a table is currently loaded in memory and needs to be transformed,  it will be transformed then.  Else, the table's state will be set to that requiring  a transform so that when it is loaded or when the database is committed the transform  will be applied.  Transform in this instance means that the actual data (row data) of  the table is added, deleted, or updated. If SetTransform is called when tables have already been saved  to storage, an error will occur. \page #{\footnote MsiDatabase_MergeDatabase} ${\footnote MsiDatabase.MergeDatabase} +{\footnote MsiDatabase:MergeDatabase} K{\footnote MergeDatabase} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MergeDatabase Method \line\tx360\tab\fs18\b0{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \par}\li180 MergeDatabase will merge the reference database in with the base database. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .MergeDatabase({\i reference}, {\i errorTable})} \par{\i object}\line Required. The MsiDatabase object. \par{\i\b reference}\line Required. The MsiDatabase object to be merged into the base. \par{\i\b errorTable}\line Optional. A table object to contain the names of the tables containing  merge conflicts, the number of conflicting rows within the table, and a  reference to the table with the merge conflict. \par\fi0\li0{\b Remarks}\par\li180 If no table is provided, the general error message provides the number of  tables containing merge conflicts.  Any table can be passed in, but all other  columns must be nullable as the operation to update the error table will fail  if a column is not nullable.  A newly created table can be passed in as well  since the MergeDatabase method will automatically create the columns it uses if  merge conflicts are found.  Three columns are used for presenting merge conflicts.   The first column is the table's name.  It's also the primary key column.  Column  two is the number of rows of that table that had merge failures.  Column three is  a temporary column that is not persisted/saved.  It contains the reference to the table  that can be obtained by cursor.ObjectData on that column and then asking for the iidMsiTable  interface.  This reference enables one to go through the table and output those rows where  merge failures occurred [using iraMergeFailed bit.]  If this is not done, that bit for that  row will be cleared, as the iraMergeFailed bit is not a persistent bit.  It should be noted  that Column three is not a persistent column, so upon commitance of the database that contains  this table, only column one and column two will remain.  \par If tables of the same name in both databases do not match in the number of  primary keys, the column types, the number of columns, or the column names,   the MergeDatabase method will fail, and will post an error message pertaining to which mismatch   occurred.  \par For the error table to remain, the error handler must commit the database to which the error table   belongs.  However, this commit should be done after using the third column to obtain the references   to those tables where merge conflicts occurred.  When the database is committed, the third column will   be lost as it is not a persistent column since it temporarily stores an object [the reference to   the table]. \page #{\footnote MsiDatabase_UpdateState} ${\footnote MsiDatabase.UpdateState} +{\footnote MsiDatabase:UpdateState} K{\footnote UpdateState} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b UpdateState Property \line\tx360\tab\fs18\b0{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the current persistence state of the database, as one of enum idsEnum: \line{\f1  idsRead     = 0} database open read-only, changes are not saved \line{\f1  idsWrite    = 1} database fully operational for read and write \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .UpdateState} \par{\i object}\line Required. The MsiDatabase object. \page #{\footnote MsiDatabase_ANSICodePage} ${\footnote MsiDatabase.ANSICodePage} +{\footnote MsiDatabase:ANSICodePage} K{\footnote ANSICodePage; codepage} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ANSICodePage Property \line\tx360\tab\fs18\b0{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the ANSI codepage of the current database, 0 if language neutral \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ANSICodePage} \par{\i object}\line Required. The MsiDatabase object. \par\fi0\li0{\b Remarks}\par\li180 The string data in a persisted database is stored in a single codepage,  in order to support Win9x and to optimize storage. If the strings have no extended  characters, then the codepage is defaulted to 0, language-neutral. Table import,  merge, or transform operations will set a neutral database to any non-neutral merged data,  and will be rejected if a codepage conflict occurs. \page #{\footnote MsiDatabase_Storage} ${\footnote MsiDatabase.Storage} +{\footnote MsiDatabase:Storage} K{\footnote Storage} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Storage Property \line\tx360\tab\fs18\b0{\uldb MsiDatabase Object}{\v MsiDatabase_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the designated MsiStorage object if present, else returns an empty (Nothing) object, \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Storage({\i index})} \par{\i object}\line Required. The MsiDatabase object. \par{\i\b index}\line Required. An integer designating which storage to return. \line{\f1  0} The output database storage if   {\uldb CreateOutputDatabase}{\v MsiDatabase_CreateOutputDatabase} succeeded. \line{\f1  1} The original storage if the database was created from an MsiStorage  or from an MSI database file. \line{\f1 >1} Auxiliary storages used for transforms (not implemented yet). \page #{\footnote MsiView_Object} ${\footnote MsiView Object} K{\footnote MsiView; MsiDatabase} +{\footnote Class:MsiView} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiView Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This object represents a result set obtained processing a query using the  MsiDatabase method {\uldb OpenView}{\v MsiDatabase_OpenView}.  Before any data can be transferred the query must be executed  using the {\uldb Execute}{\v MsiView_Execute} method, passing to it  all replaceable parameters designated within the SQL query string.  The query may be reexecuted, with different parameters if desired,  but only after freeing the result set either by fetching all the  records or by calling the {\uldb Close}{\v MsiView_Close} method.  The data transfer methods will fail if the corresponding intent flags  were not specified in the {\uldb OpenView}{\v MsiDatabase_OpenView} call.   \par\li0{\b Methods}\par\li180 {\uldb Execute}{\v MsiView_Execute}\line {\uldb Fetch}{\v MsiView_Fetch}\line {\uldb GetColumnNames}{\v MsiView_GetColumnNames}\line {\uldb GetColumnTypes}{\v MsiView_GetColumnTypes}\line {\uldb Update}{\v MsiView_Update}\line {\uldb Insert}{\v MsiView_Insert}\line {\uldb Delete}{\v MsiView_Delete}\line {\uldb Modify}{\v MsiView_Modify}\line {\uldb Close}{\v MsiView_Close}\line {\uldb GetError}{\v MsiView_GetError}\line \par\li0{\b Properties}\par\li180 {\uldb FieldCount}{\v MsiView_FieldCount}\line {\uldb RowCount}{\v MsiView_RowCount}\line {\uldb State}{\v MsiView_State}\line \page #{\footnote MsiView_Execute} ${\footnote MsiView.Execute} +{\footnote MsiView:Execute} K{\footnote Execute} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Execute Method \line\tx360\tab\fs18\b0{\uldb MsiView Object}{\v MsiView_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Accepts replaceable query parameters and executes the database query,  producing a result set that can be fetched or updated. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Execute {\i record}} \par{\i object}\line Required. The MsiView object. \par{\i\b record}\line Optional. MsiRecord objects containing values to replace parameter markers,  "?", in the SQL query. \par\fi0\li0{\b Remarks}\par\li180 This method must be called before any calls to {\uldb Fetch}{\v MsiView_Fetch}.  If the SQL query specifies values in the predicate expression with parameter  markers (question marks), then a record must be supplied containing all of  the replacement values in the exact order and of compatible data types. \page #{\footnote MsiView_FieldCount} ${\footnote MsiView.FieldCount} +{\footnote MsiView:FieldCount} K{\footnote FieldCount} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FieldCount Property \line\tx360\tab\fs18\b0{\uldb MsiView Object}{\v MsiView_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A long indicating the number of columns the will be fetched into MsiRecord fields. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .FieldCount} \par{\i object}\line Required. The MsiView object. \page #{\footnote MsiView_RowCount} ${\footnote MsiView.RowCount} +{\footnote MsiView:RowCount} K{\footnote RowCount} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RowCount Property \line\tx360\tab\fs18\b0{\uldb MsiView Object}{\v MsiView_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A long indicating the number of rows affected by MsiView.Execute. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RowCount} \par{\i object}\line Required. The MsiView object. \par\fi0\li0{\b Remarks}\par\li180 Should be called only after the MsiView.Execute and before a MsiView.Close. Would return error otherwise \page #{\footnote MsiView_State} ${\footnote MsiView.State} +{\footnote MsiView:State} K{\footnote State} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b State Property \line\tx360\tab\fs18\b0{\uldb MsiView Object}{\v MsiView_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A long indicating the current cursor state for the MsiView object. Is one of \line {\b dvcsClosed}\line The MsiView object is currently in the state closed.\line {\b dvcsPrepared}\line The MsiView object has been prepared i.e. the SQL query has been parsed. \line {\b dvcsExecuted}\line  Internal use only.\line  {\b dvcsBound}\line  Parameters to the SQL query, if any have been bound to the SQL query.  This is the state before the first Fetch. (The MsiView::Execute() function has been executed).\line {\b dvcsFetched}\line  Atleast one record has been successfully fetched from the MsiView object (via the MsiView::Fetch() function).\line {\b dvcsDestructor}\line Internal use only.\line  \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RowCount} \par{\i object}\line Required. The MsiView object. \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiView_Fetch} ${\footnote MsiView.Fetch} +{\footnote MsiView:Fetch} K{\footnote Fetch} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Fetch Method \line\tx360\tab\fs18\b0{\uldb MsiView Object}{\v MsiView_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns an MsiRecord object containing the requested column data if more rows  are available in the result set, else returns an object of value Nothing. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Fetch} \par{\i object}\line Required. The MsiView object. \par\fi0\li0{\b Remarks}\par\li180 This method must be called after {\uldb Execute}{\v MsiView_Execute}.  For maximum performance, the same record object should be used for all fetches,  or else it should be released by going out of scope. The returned record can  be tested for the end of the result set using the syntax:  "If FetchRecord Is Nothing". \page #{\footnote MsiView_GetColumnNames} ${\footnote MsiView.GetColumnNames} +{\footnote MsiView:GetColumnNames} K{\footnote GetColumnNames} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetColumnNames Method \line\tx360\tab\fs18\b0{\uldb MsiView Object}{\v MsiView_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns an MsiRecord object containing the columns names corresponding to the fetched record fields. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetColumnNames} \par{\i object}\line Required. The MsiView object. \page #{\footnote MsiView_GetColumnTypes} ${\footnote MsiView.GetColumnTypes} +{\footnote MsiView:GetColumnTypes} K{\footnote GetColumnTypes} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetColumnTypes Method \line\tx360\tab\fs18\b0{\uldb MsiView Object}{\v MsiView_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns an MsiRecord objects with text fields containing the data types of  the corresponding database columns, in the   {\b\uldb Archive File Format}{\v Table_ArchiveFormat} used by ExportTable. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetColumnTypes} \par{\i object}\line Required. The MsiView object. \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiView_Update} ${\footnote MsiView.Update} +{\footnote MsiView:Update} K{\footnote Update} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Update Method \line\tx360\tab\fs18\b0{\uldb MsiView Object}{\v MsiView_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Updates a database row with a modified MsiRecord object obtained by the Fetch method. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Update {\i record}} \par{\i object}\line Required. The MsiView object. \par{\i\b record}\line Required. The MsiRecord object obtained by the Fetch method, with modified field data. \par\fi0\li0{\b Remarks}\par\li180 Only the record fields that have been updated will be written to the database.  Thus multiple threads can update the same rows independently as long as they  have modified different database columns. \page #{\footnote MsiView_Insert} ${\footnote MsiView.Insert} +{\footnote MsiView:Insert} K{\footnote Insert} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Insert Method \line\tx360\tab\fs18\b0{\uldb MsiView Object}{\v MsiView_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Inserts a new row into the database with values in an MsiRecord object.  This method will fail if the primary key columns contain any Null  values or as a group match any existing row in the table. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Insert {\i record}} \par{\i object}\line Required. The MsiView object. \par{\i\b record}\line Required. An MsiRecord object containing values for a new database row. \par\fi0\li0{\b Remarks}\par\li180 The values in the record fields must match the query specification in sequence  and in data types (same as would be obtained by the Fetch method). Null values  may be supplied in the record fields as long as they are not part of the primary key. \page #{\footnote MsiView_Delete} ${\footnote MsiView.Delete} +{\footnote MsiView:Delete} K{\footnote Delete} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Delete Method \line\tx360\tab\fs18\b0{\uldb MsiView Object}{\v MsiView_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Removes the row corresponding the MsiRecord just obtained with the Fetch method. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Delete {\i record}} \par{\i object}\line Required. The MsiView object. \par{\i\b record}\line Required. The MsiRecord object obtained by the Fetch method. \par\fi0\li0{\b Remarks}\par\li180 This method will fail if the primary key fields are modified, or if the primary  key no longer exists in the database. \page #{\footnote MsiView_Modify} ${\footnote MsiView.Modify} +{\footnote MsiView:Modify} K{\footnote Modify} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Modify Method \line\tx360\tab\fs18\b0{\uldb MsiView Object}{\v MsiView_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Modifies a database row with a modified MsiRecord object obtained by the Fetch method. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Modify {\i record} {\i action}} \par{\i object}\line Required. The MsiView object. \par{\i\b record}\line Required. The MsiRecord object obtained by the Fetch method, with modified field data. \par{\i\b action}\line Required. Indicates the action to be performed on the database row. The operation map on to one with the modification  operation that can be performed on the {\uldb MsiCursor}{\v MsiCursor_Object} object. Is one of - \line \line {\b irmSeek}\line Completes the record data.  Seek requires that the primary key fields be filled in and then fills in the rest of the data,  allowing one to seek to a particular entry in the table (instead of having to fetch and compare).  The record must contain  all columns of the table.  Corresponds to the {\uldb MsiCursor.Seek}{\v MsiCursor_Seek} operation.  One can Insert/Update/Delete  the record after seeking.\line {\b irmInsert}\line Inserts the information into the database table. The operation does not require a {\uldb MsiView.Fetch}{\v MsiView_Fetch} to have been  performed before its calling. The function will fail if a row with the same primary key(s) exist in the table.  Corresponds to the {\uldb MsiCursor.Insert}{\v MsiCursor_Insert} operation.  The database must be open for modification. \line {\b irmInsertTemporary}\line Temporarily inserts the information into the database table. The operation does not require a {\uldb MsiView.Fetch}{\v MsiView_Fetch} to have been  performed before its calling and the database does not have to be open for modification. The function will fail if a row with the same primary key(s) exist in the table.  Corresponds to the {\uldb MsiCursor.InsertTemporary}{\v MsiCursor_InsertTemporary} operation \line {\b irmUpdate}\line Updates the information already existing in the database allowing modification of non-primary keys only. The operation does not require a {\uldb MsiView.Fetch}{\v MsiView_Fetch}  to have been  performed before its calling and has to be called with the same record as that returned by the fetch. The function will fail if the row has been deleted from the table.  Corresponds to the {\uldb MsiCursor.Update}{\v MsiCursor_Update} operation.  Requires that the database be open for modification. Update can occur on a fetched,  inserted, or deleted record.\line {\b irmDelete}\line Deletes the information already existing in the database (that is open for modification). The operation does not require a {\uldb MsiView.Fetch}{\v MsiView_Fetch}  to have been  performed before its calling and has to be called with the same record as that returned by the fetch. The function will fail if the row has been deleted from the table.  Corresponds to the {\uldb MsiCursor.Delete}{\v MsiCursor_Delete} operation.  Delete can be done on a fetched, inserted, or seeked record. \line {\b irmRefresh}\line Refreshes the information in the record from the database. The operation requires a {\uldb MsiView.Fetch}{\v MsiView_Fetch}  to have been  performed before its calling and has to be called with the same record as that returned by the fetch. The function will fail if the row has been deleted from the table.  Corresponds to the {\uldb MsiCursor.Refresh}{\v MsiCursor_Refresh} operation \line {\b irmAssign}\line Inserts/updates the information into the database table. The operation does not require a {\uldb MsiView.Fetch}{\v MsiView_Fetch} to have been  performed before its calling.  An update operation takes place if primary keys match an existing row. An insert operation takes place if primary  keys do not match any row. In either case the current data in the cursor are written to a table row.  Corresponds to the {\uldb MsiCursor.Assign}{\v MsiCursor_Assign} operation. Requires that the database be open for modification.\line {\b irmMerge}\line Inserts/validates the information into the database table. The operation does not require a {\uldb MsiView.Fetch}{\v MsiView_Fetch} to have been  performed before its calling. An insert operation takes place if primary keys do not match any row. A validation operation takes place if primary  keys match an existing row. The operation fails if the record data does not match the data in the table. Corresponds to the {\uldb MsiCursor.Merge}{\v MsiCursor_Merge} operation. Requires that the database be open for modification. \line {\b irmReplace}\line Updates/Delete-Inserts the information into the database table. The operation requires a {\uldb MsiView.Fetch}{\v MsiView_Fetch} to have been  performed before its calling and has to be called with the same record as that returned by the fetch. If the primary key(s) have not been  changed then an update of the table row occurs. If the primary key(s) have been changed the old table row is deleted and a new row corresponding  to the record is inserted. Corresponds to the {\uldb MsiCursor.Replace} operation.  Requires that the database be open for modification. \line {\b irmValidate}\line Validates a record.  Will not validate across joins. The operation requires a {\uldb MsiView.Fetch}{\v MsiView_Fetch} performed before its calling and has to be called with  the same record as that returned by the fetch.  Validation errors can be obtained by subsequent callings to {\uldb MsiView.GetError}{\ MsiView_GetError}.  Corresponds to the {\uldb MsiCursor.Validate}{\v MsiCursor_Validate} operation passing in 0 as the value for iCol.\line {\b irmValidateNew}\line Validates a record as a new record.  Requires the database to be open for modification. Will not validate across joins. This differs from irmValidate in that it checks for duplicate keys.  The operation requires that  {\uldb MsiDatabase.OpenView}{\v MsiDatabase_OpenView} be called with a modify value.  Validation errors can be obtained by  subsequent callings to {\uldb MsiView.GetError}{\v MsiView_GetError}.  Corresponds to the {\uldb MsiCursor.Validate}{\v MsiCursor_Validate}  operation passing in -1 as the value for iCol.\line {\b irmValidateField}\line Validates a field(s) of a fetched or new record.  Will not validate across joins. The validation depends upon the number of fields in the record.  If only one field exists,  it will validate the one field.  It can also validate more fields.  It should be used when the fetched/new record does not represent every  column of the table. Makes repeated calls to {\uldb MsiCursor.Validate}{\v MsiCursor_Validate} depending upon the number of fields in the record.\line {\b irmValidateDelete}\line Validates a fetched record.  Will not validate across joins. The validation depends upon the _Validation table and in particular the 'KeyTable' and 'KeyColumn'  columns of the table.  Validate delete returns an error if a row in the same table or another table explicitly references the primary  key(s) of the row to be deleted.  It requires that the database be open for modification and the operation requires a {\uldb MsiView.Fetch}{\v MsiView_Fetch} performed before its calling and has to be called with  the same record as that returned by the fetch. Corresponds to the {\uldb MsiCursor.Validate}{\v MsiCursor_Validate} operation passing in a -2 as the value for iCol.\line \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiView_Close} ${\footnote MsiView.Close} +{\footnote MsiView:Close} K{\footnote Close} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Close Method \line\tx360\tab\fs18\b0{\uldb MsiView Object}{\v MsiView_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Terminates query execution and releases database resources. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Close} \par{\i object}\line Required. The MsiView object. \par\fi0\li0{\b Remarks}\par\li180 This method must be called before the Execute method is called again on the  MsiView object, unless all rows of the result set have been obtained with the  Fetch method. It will be called internally when the view is destroyed. \page #{\footnote MsiView_GetError} ${\footnote MsiView.GetError} +{\footnote MsiView:GetError} K{\footnote GetError} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetError Method \line\tx360\tab\fs18\b0{\uldb MsiView Object}{\v MsiView_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the Validation error and the column name for which the error occured.  In automation,  the return is a string of the form ColumnName,Error.  It returns the first error it finds in  the view's error array.  So, once a return of ColumnName,0 [zero does not show up in automation],  no more errors exist.  See {\uldb MsiCursor_Validate}{\v MsiCursor_Validate} for error enums. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetError} \par{\i object}\line Required. The MsiView object. \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiTable_Object} ${\footnote MsiTable Object} K{\footnote MsiTable} +{\footnote Class:MsiTable} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiTable Object \par}\li180 This object represents a database table loaded into memory and is accessed by a  very efficient internal query engine. The table may be an image of a persistent  table with option temporary columns added, or may be totally composed of  temporary columns. If column names are not supplied, they are not accessible for  joins or by SQL. To access table data, an {\uldb MsiCursor}{\v MsiCursor_Object}  object is created that can be positioned sequentially or can seek to a particular  set of data values. The cursor seek operation will be slower when the search values  do not include the primary key columns. When a cursor object is created or when its Reset  method is called, it will be logically positioned just before the first table row.  The Next method always moves forward from the current cursor position. If a  table is linked as a tree, a tree-walking cursor can be created that will advance   to the next node in a depth-first traversal. \par Persistent tables are normally loaded into memory when a table object is created  and removed from memory when the last reference to the table object is released.  The LockTable function is used to keep a frequently used table in memory  independently of reference counts. As long as the lock calls are greater than  the unlock calls, the table remains in memory until the database is closed. \par For performance reasons, strings are not stored in the table data. Rather,  integer indices are stored which reference a common string pool maintained by  the database. Internally, string uses are reference counted as part of the string  management. Functions are provided in the {\uldb MsiDatabase}{\v MsiDatabase_Object}  object to convert strings to and from string indices. A string index of 0 indicates  a Null string value. \par\li0{\b Properties}\par\li180 {\uldb Database}{\v MsiTable_Database}\line {\uldb RowCount}{\v MsiTable_RowCount}\line {\uldb ColumnCount}{\v MsiTable_ColumnCount}\line {\uldb PrimaryKeyCount}{\v MsiTable_PrimaryKeyCount}\line {\uldb ReadOnly}{\v MsiTable_ReadOnly}\line {\uldb ColumnName}{\v MsiTable_ColumnName}\line {\uldb ColumnType}{\v MsiTable_ColumnType}\line \par\li0{\b Methods}\par\li180 {\uldb GetColumnIndex}{\v MsiTable_GetColumnIndex}\line {\uldb CreateColumn}{\v MsiTable_CreateColumn}\line {\uldb CreateCursor}{\v MsiTable_CreateCursor}\line {\uldb LinkTree}{\v MsiTable_LinkTree}\line \page #{\footnote MsiTable_Database} ${\footnote MsiTable.Database} +{\footnote MsiTable:Database} K{\footnote DATABASE} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Database Property \line\tx360\tab\fs18\b0{\uldb MsiTable Object}{\v MsiTable_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the {\uldb MsiDatabase object}{\v MsiDatabase_Object} that owns this table. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Database} \par{\i object}\line Required. The MsiTable object. \page #{\footnote MsiTable_RowCount} ${\footnote MsiTable.RowCount} +{\footnote MsiTable:RowCount} K{\footnote RowCount} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RowCount Property \line\tx360\tab\fs18\b0{\uldb MsiTable Object}{\v MsiTable_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the number of rows that are currently contained in the table. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RowCount} \par{\i object}\line Required. The MsiTable object. \page #{\footnote MsiTable_ColumnCount} ${\footnote MsiTable.ColumnCount} +{\footnote MsiTable:ColumnCount} K{\footnote ColumnCount} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ColumnCount Property \line\tx360\tab\fs18\b0{\uldb MsiTable Object}{\v MsiTable_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the number of columns defined in the table. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ColumnCount} \par{\i object}\line Required. The MsiTable object. \page #{\footnote MsiTable_PrimaryKeyCount} ${\footnote MsiTable.PrimaryKeyCount} +{\footnote MsiTable:PrimaryKeyCount} K{\footnote PrimaryKeyCount} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b PrimaryKeyCount Property \line\tx360\tab\fs18\b0{\uldb MsiTable Object}{\v MsiTable_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the number of columns that comprise the primary key for the table. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .PrimaryKeyCount} \par{\i object}\line Required. The MsiTable object. \page #{\footnote MsiTable_ReadOnly} ${\footnote MsiTable.ReadOnly} +{\footnote MsiTable:ReadOnly} K{\footnote ReadOnly} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ReadOnly Property \line\tx360\tab\fs18\b0{\uldb MsiTable Object}{\v MsiTable_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns a boolean, True if table is not updatable, False if  the table can be updated provided the database is not read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ReadOnly({column})} \par{\i object}\line Required. The MsiTable object. \page #{\footnote MsiTable_ColumnName} ${\footnote MsiTable.ColumnName} +{\footnote MsiTable:ColumnName} K{\footnote ColumnName} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ColumnName Property \line\tx360\tab\fs18\b0{\uldb MsiTable Object}{\v MsiTable_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the string index for the name of the designated column,  or 0 if the column does not exist or if it has no name. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ColumnName({column})} \par{\i object}\line Required. The MsiTable object. \par{\i\b column}\line Required. Column index, 1-based. \par\fi0\li0{\b Remarks}\par\li180 The string index may be converted to the corresponding string using the  {\b MsiDatabase} method {\uldb DecodeString}{\v MsiDatabase_DecodeString}. \page #{\footnote MsiTable_ColumnType} ${\footnote MsiTable.ColumnType} +{\footnote MsiTable:ColumnType} K{\footnote ColumnType} K{\footnote itdShort;itdLong;itdObject;itdString} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ColumnType Property \line\tx360\tab\fs18\b0{\uldb MsiTable Object}{\v MsiTable_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the column definition for the designated column, as an integer containing bit flags: \line{\f1  icdObject     } some type of object if 1, else integer if 0 \line{\f1  icdShort      } if icdObject: 1=string, 0=other object; else 1=16-bit integer, 0=32-bit integer \line{\f1  icdPersistent } persistent column if 1 (objects are streams), temporary if 0 \line{\f1  icdNullable   } if 1, column will accept null values \line{\f1  icdPrimaryKey } if 1, column comprises part of primary key \line The SQL data width for persistent columns is returned in the lower 8 bits (AND with 255). \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ColumnType({\i column})} \par{\i object}\line Required. The MsiTable object. \par{\i\b column}\line Required. Column index, 1-based. \par\fi0\li0{\b Remarks}\par\li180 Three types of objects, all derived from MsiData, can be stored: \line  Strings stored as indices into the string pool, icdObject+icdShort \line  Persistent stream objects, accessible via MsiCursor.StreamData, icdObject+icdPersistent \line  Other objects derived from MsiData, accessible via MsiCursor.ObjectData, icdObject \page #{\footnote MsiTable_GetColumnIndex} ${\footnote MsiTable.GetColumnIndex} +{\footnote MsiTable:GetColumnIndex} K{\footnote GetColumnIndex} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetColumnIndex Method \line\tx360\tab\fs18\b0{\uldb MsiTable Object}{\v MsiTable_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the column number for a column name supplied as a string index.  Returns 0 if the column name does not exist for the table. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetColumnIndex({\i nameIndex})} \par{\i object}\line Required. The MsiTable object. \par{\i\b nameIndex}\line Required. The database string index for column name. \par\fi0\li0{\b Remarks}\par\li180 Use the MsiDatabase method {\uldb EncodeString}{\v MsiDatabase_EncodeString}  to convert a string into a string index. This method returns 0 if the column  name does not exist in the table, or if the string index is 0. \page #{\footnote MsiTable_CreateColumn} ${\footnote MsiTable.CreateColumn} +{\footnote MsiTable:CreateColumn} K{\footnote CreateColumn} K{\footnote itdShort;itdLong;itdObject;itdString} K{\footnote itcPrimaryKey;itcNullable;itcNoNulls} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateColumn Method \line\tx360\tab\fs18\b0{\uldb MsiTable Object}{\v MsiTable_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180  Defines column parameters for a new column for an MsiTable object created with  {\uldb CreateTable}{\v MsiDatabase_CreateTable} or  {\uldb LoadTable}{\v MsiDatabase_LoadTable}.  Returns the column number for the created column if successful.  Fails if the column could not be created or if the a column by the same name already exists. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateColumn({\i columnDef, name})} \par{\i object}\line Required. The MsiTable object. \par{\i\b columnDef}\line Required. The column attributes, an integer combination of the values below. \line The datatype of the column, comprising the bit flags icdObject and icdShort: \line{\f1  icdLong     } 32-bit integer value (icdLong = 0, for readability only) \line{\f1  icdShort    } 16-bit integer value, for persistent integer columns \line{\f1  icdObject   } MsiData object (non-persistent), MsiStream (persistent) \line{\f1  icdString   } string, stored as index to database string cache (icdObject+icdShort) \line Column characteristics: \line{\f1  icdPrimaryKey   } column is part of primary key \line{\f1  icdNullable     } column will accept null values \line{\f1  icdNoNulls      } value required (icdNoNulls = 0, for readability only) \line Persistence: \line{\f1  icdPersistent   } column saved in persistent database \line{\f1  icdTemporary    } temporary column (icdTemporary = 0, for readability only) \line SQL column width in bytes, a number between 0 and 255, persistent columns only \par{\i\b name}\line Optional. Column name, unique within the table. Persistent columns must be  given a name. Anonymous columns cannot be accessed via SQL queries. \par\fi0\li0{\b Remarks}\par\li180 All persistent columns must be defined before any non-persistent columns.  At least one column must be designated as the primary key column,  and the primary key columns must be the first columns in the table,  with the most-significant columns first.  Persistent columns cannot contain object references, but may contain binary streams.  Avoid 32-bit integers when possible for persistent columns, as the storage is inefficient.  Use 32-bit integers for termporary columns, as there is no bounds checking.  Persistent primary key columns cannot accept the icdNullable attribute.  Each row in the table must have a unique set of primary key values.  A maximum of 32 columns may be defined for a database table.  The number of rows is limited by the available memory. \page #{\footnote MsiTable_CreateCursor} ${\footnote MsiTable.CreateCursor} +{\footnote MsiTable:CreateCursor} K{\footnote CreateCursor} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateCursor Method \line\tx360\tab\fs18\b0{\uldb MsiTable Object}{\v MsiTable_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns an {\uldb MsiCursor}{\v MsiCursor_Object} object that is in the reset state. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateCursor({\i tree})} \par{\i object}\line Required. The MsiTable object. \par{\b\i tree}\line Optional. Boolean indicating whether to create a tree-walking cursor. A True value  will create a cursor that will walk a tree-linked table in tree traversal order,  whereas a False, or missing, value will create a normal cursor that will advance by row order.  The two types behave identically if the table is not tree-linked. \par\fi0\li0{\b Remarks}\par\li180 To avoid excessive processing, mimimize the number of active cursors on a table  that is subject to frequent row insertions and deletions. \page #{\footnote MsiTable_LinkTree} ${\footnote MsiTable.LinkTree} +{\footnote MsiTable:LinkTree} K{\footnote LinkTree} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b LinkTree Method \line\tx360\tab\fs18\b0{\uldb MsiTable Object}{\v MsiTable_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Links the table in depth-first tree-traveral order to support a tree-walking cursor.  If the tree cannot be fully resolved the method will fail, returning -1.  If the method succeeds, the number of tree roots will be returned (a return value of  0 indicates that the table is empty). A row parented to itself or having a Null parent  indicates a root node. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .LinkTree({\i parentColumn})} \par{\i object}\line Required. The MsiTable object. \par{\b\i parentColumn}\line Required. The column number specifying the tree parent data. This column  must contain values referencing the single primary key column of the table. \par\fi0\li0{\b Remarks}\par\li180  This method requires that the primary key be composed of a single column.  The method will fail if any of the values in the specified column do not match  a primary key value currently in the table. Once the table is linked, only leaf  node rows may be deleted (those that are not the parent of another row). Rows  may be inserted, provided that their parent values are present in the table.  Specifying a parentColumn value of zero will unlink the table, and all cursors  will then advance sequentially through the rows. \page #{\footnote MsiCursor_Object} ${\footnote MsiCursor Object} K{\footnote MsiCursor} +{\footnote Class:MsiCursor} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiCursor Object \par}\li180 To access table data, an MsiCursor object is created that can be positioned  sequentially or can seek to a particular set of data values. The cursor  seek operation will be slower when table's primary key columns are not specified.  When a cursor object is created or when its Reset method is called,  or when the Next method fails to find a qualifying row, it will be  logically positioned just before the first table row. The Next method always  moves forward from the current cursor position. If a table is linked as a tree,  a cursor can be created that advances to the next node in a depth-first traversal. The cursor contains a snapshot of a table row, and its data is transferred  to and from the table as an atomic operation. On update, only columns with  changed data will be transferred, thus allowing other columns to be updated  via other cursor objects. \par\li0{\b Properties}\par\li180 {\uldb Table}{\v MsiCursor_Table}\line {\uldb Filter}{\v MsiCursor_Filter}\line {\uldb IntegerData}{\v MsiCursor_IntegerData}\line {\uldb StringData}{\v MsiCursor_StringData}\line {\uldb DateData}{\v MsiCursor_DateData}\line {\uldb ObjectData}{\v MsiCursor_ObjectData}\line {\uldb StreamData}{\v MsiCursor_StreamData}\line {\uldb RowState}{\v MsiCursor_RowState}\line {\uldb Moniker}{\v MsiCursor_Moniker}\line \par\li0{\b Methods}\par\li180 {\uldb PutNull}{\v MsiCursor_PutNull}\line {\uldb Reset}{\v MsiCursor_Reset}\line {\uldb Next}{\v MsiCursor_Next}\line {\uldb Update}{\v MsiCursor_Update}\line {\uldb Insert}{\v MsiCursor_Insert}\line {\uldb InsertTemporary}{\v MsiCursor_InsertTemporary}\line {\uldb Assign}{\v MsiCursor_Assign}\line {\uldb Replace}{\v MsiCursor_Replace}\line {\uldb Merge}{\v MsiCursor_Merge}\line {\uldb Refresh}{\v MsiCursor_Refresh}\line {\uldb Delete}{\v MsiCursor_Delete}\line {\uldb Seek}{\v MsiCursor_Seek}\line {\uldb Validate}{\v MsiCursor_Validate}\line \page #{\footnote MsiCursor_IntegerData} ${\footnote MsiCursor.IntegerData} +{\footnote MsiCursor:IntegerData} K{\footnote IntegerData} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b IntegerData Property \line\tx360\tab\fs18\b0{\uldb MsiCursor Object}{\v MsiCursor_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Transfers integer data to or from a column value in the cursor object. Read-write. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .IntegerData({\i column})} \par{\i object}\line Required. The MsiCursor object. \par{\i\b column}\line Required. Column index, 1-based. \par\fi0\li0{\b Remarks}\par\li180 A null value in an integer column will be returned as the defined constant {\f1 iMsiNullInteger}.  If the column is designated as a primary key or a non-null column, attempting  to set its value to {\f1 iMsiNullInteger} will produce an error. \par The IntegerData property will transfer data of all types as integers.  This method will fail if the column is type itdShort and the integers is outside the 16-bit range.  String data will be transferred using the database string index, and object data  will transferred as an integer containing the actual address of the object. Care must  exercised when passing objects as integers, as no validation can be done at this  low level. The integer returned for an object is not reference counted, but when an  object is set into the cursor using an integer, its AddRef method is called because  the cursor, and ultimately the database table, is keeping a copy of that pointer.  A null value for a non-integer column returned as an integer will be zero. \page #{\footnote MsiCursor_StringData} ${\footnote MsiCursor.StringData} +{\footnote MsiCursor:StringData} K{\footnote StringData} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b StringData Property \line\tx360\tab\fs18\b0{\uldb MsiCursor Object}{\v MsiCursor_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Transfers string data to or from a string column value in the cursor object. Read-write. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .StringData({\i column})} \par{\i object}\line Required. The MsiCursor object. \par{\i\b column}\line Required. Column index, 1-based. \par\fi0\li0{\b Remarks}\par\li180 Setting StringData property on a non-string column will fail.  Returning the property on a non-string column will return an empty string. \page #{\footnote MsiCursor_DateData} ${\footnote MsiCursor.DateData} +{\footnote MsiCursor:DateData} K{\footnote DateData} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DateData Property \line\tx360\tab\fs18\b0{\uldb MsiCursor Object}{\v MsiCursor_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Transfers date/time data to or from a string or long integer column value in the  cursor object. Read-write. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .DateData({\i column})} \par{\i object}\line Required. The MsiCursor object. \par{\i\b column}\line Required. Column index, 1-based. \par\fi0\li0{\b Remarks}\par\li180 Returning the property on a non-date value may fail or return an invalid date. \page #{\footnote MsiCursor_ObjectData} ${\footnote MsiCursor.ObjectData} +{\footnote MsiCursor:ObjectData} K{\footnote ObjectData} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ObjectData Property \line\tx360\tab\fs18\b0{\uldb MsiCursor Object}{\v MsiCursor_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Transfers object references to or from a column value in the cursor object. Read-write. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ObjectData({\i column})} \par{\i object}\line Required. The MsiCursor object. \par{\i\b column}\line Required. Column index, 1-based. \par\fi0\li0{\b Remarks}\par\li180 Objects stored in the database tables must be derived from the MsiData base object  and cannot be stored in persistent columns. A Null value for an object has pointer  value of zero, but is set and tested in BASIC using the {\f1\b1 Missing} keyword.  If the column is designated as a primary key or a non-null column, attempting  to set its value to a null object will produce an error. Objects are reference  counted when stored in the MsiCursor and the MsiTable objects. \page #{\footnote MsiCursor_StreamData} ${\footnote MsiCursor.StreamData} +{\footnote MsiCursor:StreamData} K{\footnote StreamData} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b StreamData Property \line\tx360\tab\fs18\b0{\uldb MsiCursor Object}{\v MsiCursor_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Transfers MsiStream objects to or from a column value in the cursor object. Read-write. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .StreamData({\i column})} \par{\i object}\line Required. The MsiCursor object. \par{\i\b column}\line Required. Column index, 1-based. \par\fi0\li0{\b Remarks}\par\li180 This property may only be used with persistent columns typed as icdObject. \page #{\footnote MsiCursor_Table} ${\footnote MsiCursor.Table} +{\footnote MsiCursor:Table} K{\footnote Table} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Table Property \line\tx360\tab\fs18\b0{\uldb MsiCursor Object}{\v MsiCursor_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the {\uldb MsiTable object}{\v MsiTable_Object} that owns this cursor object. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Table} \par{\i object}\line Required. The MsiCursor object. \page #{\footnote MsiCursor_Reset} ${\footnote MsiCursor.Reset} +{\footnote MsiCursor:Reset} K{\footnote Reset} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Reset Method \line\tx360\tab\fs18\b0{\uldb MsiCursor Object}{\v MsiCursor_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Positions cursor before first row, and clears all data to Null. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Reset} \par{\i object}\line Required. The MsiCursor object. \par\fi0\li0{\b Remarks}\par\li180 Because the {\b Next} method always progresses forward  through the data rows, {\b Reset} must be called first to insure  that all rows are found. When inserting new rows, {\b Reset} may     be called on the cursor to clear any existing data   if the cursor is not in the reset state. \page #{\footnote MsiCursor_PutNull} ${\footnote MsiCursor.PutNull} +{\footnote MsiCursor:PutNull} K{\footnote PutNull} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b PutNull Method \line\tx360\tab\fs18\b0{\uldb MsiCursor Object}{\v MsiCursor_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Sets the designated column value to the Null value appropriate for the data type. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .PutNull {\i column}} \par{\i object}\line Required. The MsiCursor object. \par{\i\b column}\line Required. Column index, 1-based. \par\fi0\li0{\b Remarks}\par\li180 This method will fail unless the column has the icdNullable attribute. \page #{\footnote MsiCursor_Next} ${\footnote MsiCursor.Next} +{\footnote MsiCursor:Next} K{\footnote Next} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Next Method \line\tx360\tab\fs18\b0{\uldb MsiCursor Object}{\v MsiCursor_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Positions this cursor to next database record in the table that matches the specified  filter values. If not filter columns are designated, the next sequential record  in primary key order will be returned. If the table is linked as a tree and a  tree-walking cursor has been created, the cursor will advance in tree traveral order.  Returns 0 if no more qualifying rows exist in the table, else returns the  tree level of the new row, 1 if the table is not linked as a tree. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Next} \par{\i object}\line Required. The MsiCursor object. \par\fi0\li0{\b Remarks}\par\li180 The filter mask, set by the {\uldb Filter}{\v MsiCursor_Filter} property,  designates columns in the cursor that contains values that must be matched.  If the mask is non-zero, rows will be skipped if the designated columns  contain data that does not match the values in the cursor. \page #{\footnote MsiCursor_Filter} ${\footnote MsiCursor.Filter} +{\footnote MsiCursor:Filter} K{\footnote Filter} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Filter Property \line\tx360\tab\fs18\b0{\uldb MsiCursor Object}{\v MsiCursor_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A long integer containing bit flags for all defined columns.  Marks data columns in the MsiCursor object to be used to match corresponding  data in the database table. Each bit in the filter corresponds to a database  column, with the low order bit (value=1) corresponding to the first column.  A value of zero removes all filter attributes from the columns. Read-write. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Filter} \par{\i object}\line Required. The MsiCursor object. \par\fi0\li0{\b Remarks}\par\li180 The Next method will skip over rows where the columns designated  by the filter mask do not match those in the cursor. If the filter includes  primary key columns, the search will be vastly improved because the  table rows are sorted by primary key. If the cursor was created as a  tree-walking cursor, it will advance to matching records in tree order, and  it will be optimized if the filter includes the primary key. \par\fi0\li0{\b Usage}\par\li180 In order to selectively filter rows in a table, the values to match must be set  into the corresponding columns in the MsiCursor object. The corresponding bits  must also be set in the filter mask to prevent fetching data into those columns.  When the cursor is reset, or reaches the end of the table, all data is cleared,  including the filter data, but the filter mask is not affected. To remove the  filter mask, this property value must be set to zero. \page #{\footnote MsiCursor_RowState} ${\footnote MsiCursor.RowState} +{\footnote MsiCursor:RowState} K{\footnote RowState} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RowState Property \line\tx360\tab\fs18\b0{\uldb MsiCursor Object}{\v MsiCursor_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Allows individual row attributes in a table row to read read or set. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RowState({\i attribute})} \par{\i object}\line Required. The MsiCursor object. \par{\i\b attribute}\line Required. The row attribute to be read or set, one of iraEnum. \par{\i object}\line \par\fi0\li0{\b Row attributes}\par\li180 !!Not finished!! \par\fi0\li0{\b Remarks}\par\li180 !!Not finished!! \page #{\footnote MsiCursor_Update} ${\footnote MsiCursor.Update} +{\footnote MsiCursor:Update} K{\footnote Update} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Update Method \line\tx360\tab\fs18\b0{\uldb MsiCursor Object}{\v MsiCursor_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Updates changed cursor data to the corresponding table row.  Returns True if the row was successfully updated. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Update} \par{\i object}\line Required. The MsiCursor object. \par\fi0\li0{\b Remarks}\par\li180 The table row to update is determined by set of primary key values.  If the primary key values to not match any existing row, the  function will fail and return False. \page #{\footnote MsiCursor_Insert} ${\footnote MsiCursor.Insert} +{\footnote MsiCursor:Insert} K{\footnote Insert} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Insert Method \line\tx360\tab\fs18\b0{\uldb MsiCursor Object}{\v MsiCursor_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Inserts a new table row using the current cursor data.  The table must be writable for this method to succeed.  Returns True if the row was successfully inserted. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Insert} \par{\i object}\line Required. The MsiCursor object. \par\fi0\li0{\b Remarks}\par\li180 The table row position is determined by the primary key values.  If the primary key columns contain any Null values, or if the  set of primary key values matches an existing row, the method  will fail and return False. If the table is tree-linked, the inserted  row will be linked into the tree as a leaf node under the row specified  by its parent column (the column specified by {\uldb LinkTree}{\v MsiTable_LinkTree}). \page #{\footnote MsiCursor_InsertTemporary} ${\footnote MsiCursor.InsertTemporary} +{\footnote MsiCursor:InsertTemporary} K{\footnote InsertTemporary} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b InsertTemporary Method \line\tx360\tab\fs18\b0{\uldb MsiCursor Object}{\v MsiCursor_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Inserts a new non-persistent table row using the current cursor data.  This method may be called on tables loaded from a read-only database.  Returns True if the row was successfully inserted. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .InsertTemporary} \par{\i object}\line Required. The MsiCursor object. \par\fi0\li0{\b Remarks}\par\li180 See {\b Remarks} under {\uldb MsiCursor.Insert}{\v MsiCursor_Insert} \page #{\footnote MsiCursor_Assign} ${\footnote MsiCursor.Assign} +{\footnote MsiCursor:Assign} K{\footnote Assign} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Assign Method \line\tx360\tab\fs18\b0{\uldb MsiCursor Object}{\v MsiCursor_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Either updates an existing table row or inserts a new table row   using the current cursor data.  Returns True if either an update or an insert was successful. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Assign} \par{\i object}\line Required. The MsiCursor object. \par\fi0\li0{\b Remarks}\par\li180 The table row position is determined by the primary key values.  An update operation takes place if primary keys match an existing row.  An insert operation takes place if primary keys do not match any row.  In either case the current data in the cursor are written to a table row.  If any of the primary key values are Null, the method will fail and return False. \page #{\footnote MsiCursor_Replace} ${\footnote MsiCursor.Replace} +{\footnote MsiCursor:Replace} K{\footnote Replace} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Replace Method \line\tx360\tab\fs18\b0{\uldb MsiCursor Object}{\v MsiCursor_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Updates a fetched row using current cursor data, allowing primary key changes.  Returns True if either an update or an insert+delete was successful. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Replace} \par{\i object}\line Required. The MsiCursor object. \par\fi0\li0{\b Remarks}\par\li180 The table row position is determined by the primary key values.  An update operation takes place if primary keys match an existing row.  An insert operation takes place if primary keys do not match any row,  in which case the row referenced by the previous key value will be delete (if not already deleted).  If any of the primary key values are Null, the method will fail and return False. \page #{\footnote MsiCursor_Merge} ${\footnote MsiCursor.Merge} +{\footnote MsiCursor:Merge} K{\footnote Merge} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Merge Method \line\tx360\tab\fs18\b0{\uldb MsiCursor Object}{\v MsiCursor_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Either inserts a new record into the table, or insures that an existing record is identical.   Returns True if the insert was successful, or an existing record with the same key is completely matched.  If an existing record is not identical, the row attribute bit iraMergeFailed is set. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Merge} \par{\i object}\line Required. The MsiCursor object. \par\fi0\li0{\b Remarks}\par\li180 The table row position is determined by the primary key values.  An insert operation takes place if primary keys do not match any row.  A validation operation takes place if primary keys match an existing row.  Since matched rows are never replaced, they may be marked as read-only. \page #{\footnote MsiCursor_Refresh} ${\footnote MsiCursor.Refresh} +{\footnote MsiCursor:Refresh} K{\footnote Refresh} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Refresh Method \line\tx360\tab\fs18\b0{\uldb MsiCursor Object}{\v MsiCursor_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Reloads the cursor with data from the current table row, replacing any changes  made to the cursor data and updating data that has been update via other cursors.  If the row has been deleted, all data will be set to null and the method will return False.  False will also be returned if the cursor is not positioned on a row, i.e. in a Reset state.  Returns True if the row is still present. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Refresh} \par{\i object}\line Required. The MsiCursor object. \page #{\footnote MsiCursor_Delete} ${\footnote MsiCursor.Delete} +{\footnote MsiCursor:Delete} K{\footnote Delete} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Delete Method \line\tx360\tab\fs18\b0{\uldb MsiCursor Object}{\v MsiCursor_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Deletes current cursor row from table. The row to be deleted is determined  by the primary key data, not by the current position in the table. Returns  True if successful, else False if the row could not be deleted. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Delete} \par{\i object}\line Required. The MsiCursor object. \par\fi0\li0{\b Remarks}\par\li180 The delete will fail if the any of the primary key fields in the cursor  are null, or if the primary key does not exist in the table, or if a non-leaf  node is specified in a tree-linked table.  In this cursor and any other MsiCursor objects positioned at the deleted row,  all non-updated data fields will be refreshed with Null values. The logical  positions of such cursors will be maintained such that the Next method will  advance to the next row following the deleted row. An attempt to call Delete  a second time without advancing the cursor will fail and return False. \page #{\footnote MsiCursor_Seek} ${\footnote MsiCursor.Seek} +{\footnote MsiCursor:Seek} K{\footnote Seek} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Seek Method \line\tx360\tab\fs18\b0{\uldb MsiCursor Object}{\v MsiCursor_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Positions the cursor to the table row corresponding the the current primary key values.  If the row is not present, the method will return False.  Returns True if the row is present, and reloads the cursor with data from the table row. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Seek} \par{\i object}\line Required. The MsiCursor object. \page #{\footnote MsiCursor_Validate} ${\footnote MsiCursor.Validate} +{\footnote MsiCursor:Validate} K{\footnote Validate} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Validate Method \line\tx360\tab\fs18\b0{\uldb MsiCursor Object}{\v MsiCursor_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns an MsiRecord object where each field represents a column of the table.  All invalid  fields will contain the iveEnum associated describing the invalid data.  For valid data,  it returns an object of Nothing.  For invalid data, the zeroeth (0th) field of the record  will contain the number of columns that were invalid.  If however the cursor was in a bad  state (set to be deleted or reset if you aren't validating a new row), the zeroeth (0th)  field will be null.   \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Validate({\i Table, Cursor, Column})} \par{\i object}\line Required. The MsiCursor object. \par{\b\i Table}\line Required. The Validation table object. \par{\b\i Cursor}\line Required.  The Validation table cursor object. \par{\b\i Column}\line Required.  -2 = Delete row, -1 = New row, 0 = row, or column number. \par\fi0\li0{\b Remarks}\par\li180 Delete validation ensures that no row is explicitly referencing the row to be deleted.  This means that it ensures that  any column with the foreign key to the table of the row to be deleted (data obtained from the 'KeyTable' column of the  _Validation table) reference the primary key(s) of the row to be deleted.  This validation is however limited and does  not include checking for properties referencing the row to be deleted nor for the delimited list of tables value allowed  in the 'KeyTable' column of the _Validation table.  In this instance, those strings (delimited list ones) are ignored. New row validation should be done prior to insertion.  This will ensure that no duplicate  primary keys exist.  Row validation validates the entire row. Field validation validates  the particular field, but field/column validation does not permit validation of foreign  key fields.  If an invalid field is found, its field in the data record will contain the  iveEnum describing the error.  Valid columns will be null.  The size of the record object  is determined by the number of columns in the table to which the cursor belongs. \par\fi0\lio{\b iveEnum}\par\li180 {\f1 \b iveNoError: 0} {\i Valid data}\line {\f1 \b iveDuplicateKey: 1} {\i Duplicate Primary Key}\line  {\f1 \b iveRequired: 2} {\i Not a nullable column}\line  {\f1 \b iveBadLink: 3} {\i Not a valid foreign key}\line  {\f1 \b iveOverFlow: 4} {\i Value exceeds MaxValue}\line  {\f1 \b iveUnderFlow: 5} {\i Value below MinValue}\line  {\f1 \b iveNotInSet: 6}  {\i Not member of set}\line  {\f1 \b iveBadVersion: 7} {\i Invalid version string}\line  {\f1 \b iveBadCase: 8} {\i Invalid case, must be all upper or all lower case}\line  {\f1 \b iveBadGuid: 9} {\i Invalid GUID}\line  {\f1 \b iveBadWildCard: 10} {\i Invalid wildcard or wildcard usage}\line  {\f1 \b iveBadIdentifier: 11} {\i Invalid identifier}\line  {\f1 \b iveBadLanguage: 12} {\i Invalid LangId}\line  {\f1 \b iveBadFilename: 13} {\i Invalid filename}\line  {\f1 \b iveBadPath: 14} {\i Invalid path}\line  {\f1 \b iveBadCondition: 15} {\i Invalid condition string}\line  {\f1 \b iveBadFormatted: 16} {\i Invalid format string}\line  {\f1 \b iveBadTemplate: 17} {\i Invalid template string}\line  {\f1 \b iveBadDefaultDir: 18} {\i Invalid DefaultDir string (special for Directory table)}\line  {\f1 \b iveBadRegPath: 19} {\i Invalid registry path (Key col in Registry table for example)}\line {\f1 \b iveBadCustomSource: 20} {\i Invalid CustomSource string (special for CustomAction table)}\line  {\f1 \b iveBadProperty: 21} {\i Bad property string}\line  {\f1 \b iveMissingData: 22} {\i Validation table: missing data}\line  {\f1 \b iveMissingTable: 23} {\i NO LONGER USED!!}\line {\f1 \b iveBadCategory: 24} {\i Validation table: invalid category string}\line  {\f1 \b iveBadKeyTable: 25} {\i Validation table: bad key table name [table could not be loaded]}\line  {\f1 \b iveBadMaxMinValues: 26} {\i Validation table:  case where value in Max col is < value in Min col}\line  {\f1 \b iveNonExistingCol: 27} {\i NO LONGER USED!!}\line {\f1 \b iveBadCabinet: 28} {\i Bad cabinet string, special for Media.Cabinet column}\line {\f1 \b iveBadShortcut: 29} {\i Bad shortcut target string, special for Shortcut.Target column}\line {\f1 \b iveStringOverflow: 30} {\i String overflow, length of string greater than size allowed by col def}\line \page #{\footnote MsiCursor_Moniker} ${\footnote MsiCursor.Moniker} +{\footnote MsiCursor:Moniker} K{\footnote Moniker} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Moniker Property \line\tx360\tab\fs18\b0{\uldb MsiCursor Object}{\v MsiCursor_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the unique identifier for the current row of the cursor. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetMoniker()} \par{\i object}\line Required. The MsiCursor object. \par\fi0\li0{\b Remarks}\par\li180 Identifier in form of table.key1(.key2 ...etc).  If cursor is not on a row, will get  the name of the table to which the cursor belongs. \page #{\footnote MsiStorage_Object} ${\footnote MsiStorage Object} K{\footnote MsiStorage} +{\footnote Class:MsiStorage} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiStorage Object \par}\li180 The MsiStorage object represents a persistent storage unit, typically a file,  but may also be implemented on memory or a resource, or as child of a parent storage.  The current implementation is a thin layer on top of OLE structured storage. The same  data format is used for Win32 and PPCMAC, with integers stored little-endian. All data  access is via MsiStream objects, with byte-swapping required for the PPCMAC performed  by the MsiStream integer access functions. Special handling is provided to generate and  read the SummaryInformation stream, where standardized document properties are stored. \par\li0{\b Properties}\par\li180 {\uldb Class}{\v MsiStorage_Class}\line {\uldb Name}{\v MsiStorage_Name}\line \par\li0{\b Methods}\par\li180 {\uldb OpenStream}{\v MsiStorage_OpenStream}\line {\uldb OpenStorage}{\v MsiStorage_OpenStorage}\line {\uldb Streams}{\v MsiStorage_Streams}\line {\uldb Storages}{\v MsiStorage_Storages}\line {\uldb RemoveElement}{\v MsiStorage_RemoveElement}\line {\uldb Commit}{\v MsiStorage_Commit}\line {\uldb Rollback}{\v MsiStorage_Rollback}\line {\uldb DeleteOnRelease}{\v MsiStorage_DeleteOnRelease}\line {\uldb CreateSummaryInfo}{\v MsiStorage_CreateSummaryInfo}\line {\uldb CopyTo}{\v MsiStorage_CopyTo}\line \page #{\footnote MsiStorage_Class} ${\footnote MsiStorage.Class} +{\footnote MsiStorage:Class} K{\footnote Class} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Class Property \line\tx360\tab\fs18\b0{\uldb MsiStorage Object}{\v MsiStorage_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Read/write. The class ID (CLSID) associated with this storage,  represented as the string form of a GUID.  Return an empty value if the storage has no class ID.  Generates an error if attempting to set an invalid GUID string.  This is a thin wrapper on the OLE methods: IStorage::SetClass and IStorage::Stat.  Microsoft Installer uses this for identification of the storage usage. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Class} \par{\i object}\line Required. The MsiStorage object. \page #{\footnote MsiStorage_Name} ${\footnote MsiStorage.Name} +{\footnote MsiStorage:Name} K{\footnote Name} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Name Property \line\tx360\tab\fs18\b0{\uldb MsiStorage Object}{\v MsiStorage_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Read-only. The name of the storage. This is a thin wrapper on the OLE method: IStorage::Stat. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Name} \par{\i object}\line Required. The MsiStorage object. \page #{\footnote MsiStorage_OpenStream} ${\footnote MsiStorage.OpenStream} +{\footnote MsiStorage:OpenStream} K{\footnote OpenStream} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b OpenStream Method \line\tx360\tab\fs18\b0{\uldb MsiStorage Object}{\v MsiStorage_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Creates and returns an {\uldb MsiStream}{\v MsiStream_Object} object that allows data to be read or written to the storage. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .OpenStream({\i name, fWrite})} \par{\i object}\line Required. The MsiStorage object. \par{\b\i name}\line Required. The name of the stream as it is known in the storage. If fWrite is set  to True, the stream will be created if it does not already exist. \par{\b\i fWrite}\line Required. True to create a writable stream, which will overwrite any existing stream.  False to read a read-only stream. \par\fi0\li0{\b Remarks}\par\li180 The stream object must be released in order to flush all changes to the storage. \page #{\footnote MsiStorage_OpenStorage} ${\footnote MsiStorage.OpenStorage} +{\footnote MsiStorage:OpenStorage} K{\footnote OpenStorage} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b OpenStorage Method \line\tx360\tab\fs18\b0{\uldb MsiStorage Object}{\v MsiStorage_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Creates and returns an MsiStorage object represents a child storage under this storage. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .OpenStorage({\i name, openMode})} \par{\i object}\line Required. The MsiStorage object. \par{\b\i name}\line Required. The name of the storage as it is known in the storage, or a unique name if it is to be created.  to True, the stream will be created if it does not already exist. \par{\b\i openMode}\line Required. Mode in which to create or open, see {\uldb CreateStorage}{\v MsiServices_CreateStorage}. \par\fi0\li0{\b Remarks}\par\li180 The child storage object must be released and/or committed in order to flush all changes to the parent storage. \page #{\footnote MsiStorage_Streams} ${\footnote MsiStorage.Streams} +{\footnote MsiStorage:Streams} K{\footnote Streams} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Streams Method \line\tx360\tab\fs18\b0{\uldb MsiStorage Object}{\v MsiStorage_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns a collection of strings containing the names of all streams in this storage object. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Streams} \par{\i object}\line Required. The MsiStorage object. \page #{\footnote MsiStorage_Storages} ${\footnote MsiStorage.Storages} +{\footnote MsiStorage:Storages} K{\footnote Storages} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Storages Method \line\tx360\tab\fs18\b0{\uldb MsiStorage Object}{\v MsiStorage_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns a collection of strings containing the names of all child storages in this storage object. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Storages} \par{\i object}\line Required. The MsiStorage object. \page #{\footnote MsiStorage_RemoveElement} ${\footnote MsiStorage.RemoveElement} +{\footnote MsiStorage:RemoveElement} K{\footnote RemoveElement} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RemoveElement Method \line\tx360\tab\fs18\b0{\uldb MsiStorage Object}{\v MsiStorage_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Removes a stream or child storage matching the supplied name.  This method will fail if the name is not found or if the storage is opened read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RemoveElement {\i name, fStorage}} \par{\i object}\line Required. The MsiStorage object. \par{\b\i name}\line Required. The name of the stream or child storage. \par{\b\i fStorage}\line Optional. True if a storage, False if a stream. Defaults to False. \page #{\footnote MsiStorage_RenameElement} ${\footnote MsiStorage.RenameElement} +{\footnote MsiStorage:RenameElement} K{\footnote RenameElement} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RenameElement Method \line\tx360\tab\fs18\b0{\uldb MsiStorage Object}{\v MsiStorage_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Renames a stream or child storage from the supplied old name to a new name.  This method will fail if the old name is not found or if the storage is opened read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RenameElement {\i oldName, newName, fStorage}} \par{\i object}\line Required. The MsiStorage object. \par{\b\i oldName}\line Required. The original name of the stream or child storage. \par{\b\i newName}\line Required. The new name of the stream or child storage. \par{\b\i fStorage}\line Optional. True if a storage, False if a stream. Defaults to False. \page #{\footnote MsiStorage_Commit} ${\footnote MsiStorage.Commit} +{\footnote MsiStorage:Commit} K{\footnote Commit} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Commit Method \line\tx360\tab\fs18\b0{\uldb MsiStorage Object}{\v MsiStorage_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Forces all persistent data to be written to the persistent storage.  No action is taken if the storage is opened read-only (ismReadOnly). \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Commit} \par{\i object}\line Required. The MsiStorage object. \page #{\footnote MsiStorage_Rollback} ${\footnote MsiStorage.Rollback} +{\footnote MsiStorage:Rollback} K{\footnote Rollback} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Rollback Method \line\tx360\tab\fs18\b0{\uldb MsiStorage Object}{\v MsiStorage_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Backs out any changes made to the storage since the MsiStorage object was created or last committed..  This method only succeeds if the MsiStorage object was created in transacted mode using ismTransact;  otherwise an error will be generated. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Rollback} \par{\i object}\line Required. The MsiStorage object. \page #{\footnote MsiStorage_DeleteOnRelease} ${\footnote MsiStorage.DeleteOnRelease} +{\footnote MsiStorage:DeleteOnRelease} K{\footnote DeleteOnRelease} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DeleteOnRelease Method \line\tx360\tab\fs18\b0{\uldb MsiStorage Object}{\v MsiStorage_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Forces the storage to be physically removed after all the references to the MsiStorage  object are released. Fails if the storage is opened read-only, or if the storage  was created from an existing IStorage interface (rather than from Msi services). \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .DeleteOnRelease} \par{\i object}\line Required. The MsiStorage object. \page #{\footnote MsiStorage_CreateSummaryInfo} ${\footnote MsiStorage.CreateSummaryInfo} +{\footnote MsiStorage:CreateSummaryInfo} K{\footnote CreateSummaryInfo} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateSummaryInfo Method \line\tx360\tab\fs18\b0{\uldb MsiStorage Object}{\v MsiStorage_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns a MsiCreateSummaryInfo object that can be used examine, update,  and add properties to the SummaryInformation stream. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateSummaryInfo({\i maxProperties})} \par{\i object}\line Required. The MsiStorage object. \par{\b\i maxProperties}\line Required. The maximum number of properties to be added or modified, used solely to allocate  sufficent working memory during the stream generation. It is not required to actually  store this number of properties. A value of zero prevents the stream from being updated. \par\fi0\li0{\b Remarks}\par\li180 If the MsiStorage object is opened read-only, no properties may be added or updated. \page #{\footnote MsiStorage_CopyTo} ${\footnote MsiStorage.CopyTo} +{\footnote MsiStorage:CopyTo} K{\footnote CopyTo} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CopyTo Method \line\tx360\tab\fs18\b0{\uldb MsiStorage Object}{\v MsiStorage_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Copies the contents of the storage to another storage, optionally excluding  some streams or substorages from the copy. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CopyTo({\i destStorage}, {\i excludedElements})} \par{\i object}\line Required. The MsiStorage object to which the contents of the current object should be copied. \par{\b\i destStorage}\line Required. The destination storage for the copy.  \par{\b\i excludedElements}\line Optional. A recording containing the names of elements (streams or storages) that  should not be copied. \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiStream_Object} ${\footnote MsiStream Object} K{\footnote MsiStream} +{\footnote Class:MsiStream} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiStream Object \par}\li180 The MsiStream object is used to transfer table data and large binary objects (BLOB)  to and from the persistent database. The use of streams to manage loading and saving  of table data is wholely managed by the database. However large binary data items are  not loaded into memory when their table is loaded, but only on demand when the  {\uldb StreamData property}{\v MsiCursor_StreamData} is requested for the data item,  which returns a read-only MsiStream object which is used to access the data sequentially. When transferring data to and from stream that may be shared between Windows and PPCMAC,  use the integer tranfer routines which automatically take care of the byte-swapping issues. \par\li0{\b Properties}\par\li180 {\uldb Length}{\v MsiStream_Length}\line {\uldb Remaining}{\v MsiStream_Remaining}\line {\uldb Error}{\v MsiStream_Error}\line \par\li0{\b Methods}\par\li180 {\uldb GetData}{\v MsiStream_GetData}\line {\uldb PutData}{\v MsiStream_PutData}\line {\uldb GetInt16}{\v MsiStream_GetInt16}\line {\uldb GetInt32}{\v MsiStream_GetInt32}\line {\uldb PutInt16}{\v MsiStream_PutInt16}\line {\uldb PutInt32}{\v MsiStream_PutInt32}\line {\uldb Seek}{\v MsiStream_Seek}\line {\uldb Reset}{\v MsiStream_Reset}\line {\uldb Clone}{\v MsiStream_Clone}\line \page #{\footnote MsiStream_Length} ${\footnote MsiStream.Length} +{\footnote MsiStream:Length} K{\footnote Length} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Length Property \line\tx360\tab\fs18\b0{\uldb MsiStream Object}{\v MsiStream_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the current length of the stream in bytes. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Length} \par{\i object}\line Required. The MsiStream object. \page #{\footnote MsiStream_Remaining} ${\footnote MsiStream.Remaining} +{\footnote MsiStream:Remaining} K{\footnote Remaining} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Remaining Property \line\tx360\tab\fs18\b0{\uldb MsiStream Object}{\v MsiStream_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the remaining length of the stream in bytes.  When writing to the stream, this value will be zero. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Remaining} \par{\i object}\line Required. The MsiStream object. \page #{\footnote MsiStream_Error} ${\footnote MsiStream.Error} +{\footnote MsiStream:Error} K{\footnote Error} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Error Property \line\tx360\tab\fs18\b0{\uldb MsiStream Object}{\v MsiStream_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns a boolean indicating when any transfer error occurred when reading or  writing to the stream. The error state is then cleared in the stream. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Error} \par{\i object}\line Required. The MsiStream object. \page #{\footnote MsiStream_GetData} ${\footnote MsiStream.GetData} +{\footnote MsiStream:GetData} K{\footnote GetData} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetData Method \line\tx360\tab\fs18\b0{\uldb MsiStream Object}{\v MsiStream_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Copies the indicated number of bytes from the stream into a buffer. For automation,  the bytes are returned as a string, with the length equal to the byte count copied.  If the end of the stream is reached before the requested number of bytes, the stream  error state is set and a smaller string is returned. On DBCS-enabled systems, byte values  corresponding to lead byte characters may be lost due to the intermediate Unicode translation. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetData({\i count})} \par{\i object}\line Required. The MsiStream object. \par{\b\i count}\line Required. The number of bytes to copy from the stream \page #{\footnote MsiStream_PutData} ${\footnote MsiStream.PutData} +{\footnote MsiStream:PutData} K{\footnote PutData} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b PutData Method \line\tx360\tab\fs18\b0{\uldb MsiStream Object}{\v MsiStream_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Copies the indicated number of bytes from the supplied buffer to the stream.  For automation, a string is passed in containing the bytes. The size of the string  is used for the count of bytes to write to the stream. The string may contain any  binary byte values, including null. On DBCS-enabled systems, byte values corresponding  to lead byte characters may be lost due to the intermediate Unicode translation. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .PutData({\i buffer})} \par{\i object}\line Required. The MsiStream object. \par{\b\i buffer}\line Required. String containing the bytes to copy. The string length is used for the count. \page #{\footnote MsiStream_GetInt16} ${\footnote MsiStream.GetInt16} +{\footnote MsiStream:GetInt16} K{\footnote GetInt16} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetInt16 Method \line\tx360\tab\fs18\b0{\uldb MsiStream Object}{\v MsiStream_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the next two bytes from the stream as a 16-bit integer,  the first byte becoming the low-order byte of the integer. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetInt16} \par{\i object}\line Required. The MsiStream object. \page #{\footnote MsiStream_GetInt32} ${\footnote MsiStream.GetInt32} +{\footnote MsiStream:GetInt32} K{\footnote GetInt32} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetInt32 Method \line\tx360\tab\fs18\b0{\uldb MsiStream Object}{\v MsiStream_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the next four bytes from the stream as a 32-bit integer,  the first byte becoming the low-order byte of the integer. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetInt32} \par{\i object}\line Required. The MsiStream object. \page #{\footnote MsiStream_PutInt16} ${\footnote MsiStream.PutInt16} +{\footnote MsiStream:PutInt16} K{\footnote PutInt16} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b PutInt16 Method \line\tx360\tab\fs18\b0{\uldb MsiStream Object}{\v MsiStream_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Writes a 16-bit integer to the stream, low-order byte first. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .PutInt16({\i value})} \par{\i object}\line Required. The MsiStream object. \par{\b\i value}\line Required. The short integer to be written to the stream. \page #{\footnote MsiStream_Seek} ${\footnote MsiStream.Seek} +{\footnote MsiStream:Seek} K{\footnote Seek} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Seek Method \line\tx360\tab\fs18\b0{\uldb MsiStream Object}{\v MsiStream_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Moves the stream pointer to a new position in the stream. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Seek({\i position})} \par{\i object}\line Required. The MsiStream object. \par{\b\i position}\line Required. The new position in the stream, relative to the beginning of the stream. \page #{\footnote MsiStream_PutInt32} ${\footnote MsiStream.PutInt32} +{\footnote MsiStream:PutInt32} K{\footnote PutInt32} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b PutInt32 Method \line\tx360\tab\fs18\b0{\uldb MsiStream Object}{\v MsiStream_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Writes a 32-bit integer to the stream, low-order byte first. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .PutInt32({\i value})} \par{\i object}\line Required. The MsiStream object. \par{\b\i value}\line Required. The long integer to be written to the stream. \page #{\footnote MsiStream_Reset} ${\footnote MsiStream.Reset} +{\footnote MsiStream:Reset} K{\footnote Reset} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Reset Method \line\tx360\tab\fs18\b0{\uldb MsiStream Object}{\v MsiStream_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Resets the stream to the beginning, allow it to be read or written again. Using this  method before writing simply replaces previous data, but does not remove old data  beyond what is newly written. To completely replace a stream, simply reopen the stream. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Reset} \par{\i object}\line Required. The MsiStream object. \page #{\footnote MsiStream_Clone} ${\footnote MsiStream.Clone} +{\footnote MsiStream:Clone} K{\footnote Clone} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Clone Method \line\tx360\tab\fs18\b0{\uldb MsiStream Object}{\v MsiStream_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Creates and returns an {\uldb MsiStream}{\v MsiStream_Object} object that accesses the  same data as the current object, but which has an independent seek pointer.  The new stream object will be in the reset state, i.e. seek pointer at the beginning.  Any clones used for writing must be kept positioned further than streams that are  current reading to avoid errors. More than one close currently writing (not recommended)  produces system-defined behavior; for file streams all writes will be appended to the end  of the stream. For storage streams, the behavior is dependent upon the OLE implementation. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Clone} \par{\i object}\line Required. The MsiStream object. \page #{\footnote MsiSummaryInfo_Object} ${\footnote MsiSummaryInfo Object} K{\footnote MsiSummaryInfo} +{\footnote Class:MsiSummaryInfo} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiSummaryInfo Object \par}\li180 The MsiSummaryInfo object is used to read, create, and update  document properties from the SummaryInformation stream of the storage object. \par\li0{\b Properties}\par\li180 {\uldb Property}{\v MsiSummaryInfo_Property}\line {\uldb PropertyCount}{\v MsiSummaryInfo_PropertyCount}\line {\uldb PropertyType}{\v MsiSummaryInfo_PropertyType}\line \par\li0{\b Methods}\par\li180 {\uldb WritePropertyStream}{\v MsiSummaryInfo_WritePropertyStream}\line \page #{\footnote MsiSummaryInfo_PropertyCount} ${\footnote MsiSummaryInfo.PropertyCount} +{\footnote MsiSummaryInfo:PropertyCount} K{\footnote GetPropertyCount} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b PropertyCount Property \line\tx360\tab\fs18\b0{\uldb MsiSummaryInfo Object}{\v MsiSummaryInfo_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The current number of property values in the summary information object.  This takes into account properties that have been added, deleted, or replaced. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .PropertyCount} \par{\i object}\line Required. The MsiSummaryInfo object. \page #{\footnote MsiSummaryInfo_PropertyType} ${\footnote MsiSummaryInfo.PropertyType} +{\footnote MsiSummaryInfo:PropertyType} K{\footnote GetPropertyType} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b PropertyType Property \line\tx360\tab\fs18\b0{\uldb MsiSummaryInfo Object}{\v MsiSummaryInfo_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns an integer containing the property type for the supplied property ID.  If the property does not exist, the value 0 (VT_EMPTY) is returned.  Standard property types are listed in {\uldb MsiSummaryInfo.Property}{\v MsiSummaryInfo_Property}.  Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .PropertyType({\i pid})} \par{\i object}\line Required. The MsiSummaryInfo object. \par{\b\i pid}\line Required. The property ID of one of the summary properties. \page #{\footnote MsiSummaryInfo_Property} ${\footnote MsiSummaryInfo.Property} +{\footnote MsiSummaryInfo:Property} K{\footnote Property} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Property Property \line\tx360\tab\fs18\b0{\uldb MsiSummaryInfo Object}{\v MsiSummaryInfo_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Sets or gets the value for the specified property in the summary information stream.  The properties are read when the MsiSummaryInfo object is created, but they are not  written until {\uldb WritePropertyStream}{\v MsiSummaryInfo_WritePropertyStream} is called.     Setting a property to Empty will cause its removal; likewise requesting a non-existent  property will return an Empty value. Otherwise values may be transferred as strings,  integers, or date (datetime) types. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Property({\i pid})} \par{\i object}\line Required. The MsiSummaryInfo object. \par{\b\i pid}\line Required. The property ID of one of the summary properties. \par\fi0\li0{\b Standard Summary Property IDs} (not an enumeration) \line{\f1  PID_DICTIONARY    0 } special format, not support by MsiSummaryInfo \line{\f1  PID_CODEPAGE      1 } VT_I2 \line{\f1  PID_TITLE         2 } VT_LPSTR \line{\f1  PID_SUBJECT       3 } VT_LPSTR \line{\f1  PID_AUTHOR        4 } VT_LPSTR \line{\f1  PID_KEYWORDS      5 } VT_LPSTR \line{\f1  PID_COMMENTS      6 } VT_LPSTR \line{\f1  PID_TEMPLATE      7 } VT_LPSTR \line{\f1  PID_LASTAUTHOR    8 } VT_LPSTR \line{\f1  PID_REVNUMBER     9 } VT_LPSTR \line{\f1  PID_EDITTIME     10 } VT_FILETIME \line{\f1  PID_LASTPRINTED  11 } VT_FILETIME \line{\f1  PID_CREATE_DTM   12 } VT_FILETIME \line{\f1  PID_LASTSAVE_DTM 13 } VT_FILETIME \line{\f1  PID_PAGECOUNT    14 } VT_I4 \line{\f1  PID_WORDCOUNT    15 } VT_I4 \line{\f1  PID_CHARCOUNT    16 } VT_I4 \line{\f1  PID_THUMBNAIL    17 } VT_CF  (not supported) \line{\f1  PID_APPNAME      18 } VT_LPSTR \line{\f1  PID_SECURITY     19 } VT_I4 \par\fi0\li0{\b MSI-specific Summary Property IDs} \line{\f1  PID_MSITAG       30 } VT_LPSTR  MSI FileType \line{\f1  PID_MSIPID       31 } VT_LPSTR  MSI Product ID \line{\f1  PID_MSIUSER      32 } VT_LPSTR  MSI Registered User \line{\f1  PID_MSIORG       33 } VT_LPSTR  MSI Organization \line{\f1  PID_MSICHECK     34 } VT_LPSTR  MSI Checksum \par\fi0\li0{\b Property Data Types} (not an enumeration) \line{\f1  VT_I2        2 } 16-bit integer \line{\f1  VT_I4        3 } 32-bit integer \line{\f1  VT_LPSTR    30 } string \line{\f1  VT_FILETIME 64 } date/time (FILETIME, converted to Variant time) \line{\f1  VT_CF       71 } clipboard format + data, not handled by MsiSummaryInfo \page #{\footnote MsiSummaryInfo_WritePropertyStream} ${\footnote MsiSummaryInfo.WritePropertyStream} +{\footnote MsiSummaryInfo:WritePropertyStream} K{\footnote WritePropertyStream} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b WritePropertyStream Method \line\tx360\tab\fs18\b0{\uldb MsiSummaryInfo Object}{\v MsiSummaryInfo_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Formats and writes the previously stored properties into the standard SummaryInformation stream.  Generates an error if the stream could not be successfully written. This method may only  be called once, after all the property values have been set. Properties may still be read  after the stream is written. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .WritePropertyStream} \par{\i object}\line Required. The MsiSummaryInfo object. \page
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\help\services.rtf ===
{\rtf1\ansi {\fonttbl{\f0\fswiss Helv;}{\f1\fmodern Courier New;}} {\colortbl;} \fs20 #{\footnote MsiServices_Object} ${\footnote MsiServices Object} K{\footnote MsiServices} +{\footnote Class:MsiServices} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiServices Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The MsiServices component provides common platform services, exposed as a set    of objects which expose, in a platform-independent manner, functionality such as  file, directory, registry, and memory services. Common data handling is  supported by the string and record objects, and by the property management.  The database subsystem is also contained within the services component. The MsiServices object must be the first to be instantiated, as the other  objects are dependent upon its functionality. No errors are handled within  this component; the information is packaged and returned to the outside caller.  For C++ callers, the error information is returned as a record object; for  OLE automation callers, it is returned in the error exception object. \par\li0{\b Properties}\par\li180 {\uldb LoggingEnabled}{\v MsiServices_LoggingEnabled}\line \par\li0{\b Methods}\par\li180 {\uldb AttachClient}{\v MsiServices_AttachClient}\line {\uldb DetachClient}{\v MsiServices_DetachClient}\line {\uldb CreateCopier}{\v MsiServices_CreateCopier}\line {\uldb CreatePatcher}{\v MsiServices_CreatePatcher}\line {\uldb CreateString}{\v MsiServices_CreateString}\line {\uldb CreateRecord}{\v MsiServices_CreateRecord}\line {\uldb SetPlatformProperties}{\v MsiServices_SetPlatformProperties}\line {\uldb GetShellFolderPath}{\v MsiServices_GetShellFolderPath}\line {\uldb GetUserProfilePath}{\v MsiServices_GetUserProfilePath}\line {\uldb CreateLog}{\v MsiServices_CreateLog}\line {\uldb WriteLog}{\v MsiServices_WriteLog}\line {\uldb CreateDatabase}{\v MsiServices_CreateDatabase}\line {\uldb CreateDatabaseFromStorage}{\v MsiServices_CreateDatabaseFromStorage}\line {\uldb CreateFilePath}{\v MsiServices_CreateFilePath}\line {\uldb CreatePath}{\v MsiServices_CreatePath}\line {\uldb CreateVolume}{\v MsiServices_CreateVolume}\line {\uldb CreateVolumeFromLabel}{\v MsiServices_CreateVolumeFromLabel}\line {\uldb EnumDriveType}{\v MsiServices_EnumDriveType}\line {\uldb ClearAllCaches}{\v MsiServices_ClearAllCaches}\line {\uldb GetModuleUsage}{\v MsiServices_GetModuleUsage}\line {\uldb GetLocalPath}{\v MsiServices_GetLocalPath}\line {\uldb CreateRegKey}{\v MsiServices_CreateRegKey}\line {\uldb RegisterFont}{\v MsiServices_RegisterFont}\line {\uldb UnRegisterFont}{\v MsiServices_UnRegisterFont}\line {\uldb WriteIniFile}{\v MsiServices_WriteIniFile}\line {\uldb ReadIniFile}{\v MsiServices_ReadIniFile}\line {\uldb GetLangNamesFromLangIDString}{\v MsiServices_GetLangNamesFromLangIDString}\line {\uldb CreateStorage}{\v MsiServices_CreateStorage}\line {\uldb GetUnhandledError}{\v MsiServices_GetUnhandledError}\line {\uldb SupportLanguageId}{\v MsiServices_SupportLanguageId}\line {\uldb GetAllocator}{\v MsiServices_GetAllocator}\line {\uldb CreateShortcut}{\v MsiServices_CreateShortcut}\line {\uldb RemoveShortcut}{\v MsiServices_RemoveShortcut}\line {\uldb ExtractFileName}{\v MsiServices_ExtractFileName}\line {\uldb ValidateFileName}{\v MsiServices_ValidateFileName}\line {\uldb CreateFileStream}{\v MsiServices_CreateFileStream}\line {\uldb CreateMemoryStream}{\v MsiServices_CreateMemoryStream}\line {\uldb RegisterTypeLibrary}{\v MsiServices_RegisterTypeLibrary}\line {\uldb UnregisterTypeLibrary}{\v MsiServices_UnregisterTypeLibrary}\line {\uldb RipFileNameFromPath}{\v MsiServices_RipFileNameFromPath}\line \page #{\footnote MsiServices_AttachClient} ${\footnote MsiServices.AttachClient} +{\footnote MsiServices:AttachClient} K{\footnote AttachClient} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b AttachClient method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method is undocumented. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .AttachClient} \par{\i object}\line Required. The MsiServices object. \page #{\footnote MsiServices_DetachClient} ${\footnote MsiServices.DetachClient} +{\footnote MsiServices:DetachClient} K{\footnote DetachClient} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DetachClient method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method is undocumented. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .DetachClient} \par{\i object}\line Required. The MsiServices object. \page #{\footnote MsiServices_LoggingEnabled} ${\footnote MsiServices.LoggingEnabled} +{\footnote MsiServices:LoggingEnabled} K{\footnote LoggingEnabled} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b LoggingEnabled Property \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A boolean indicating whether logging is currently enabled. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .LoggingEnabled} \par{\i object}\line Required. The MsiServices object. \page #{\footnote MsiServices_CreateString} ${\footnote MsiServices.CreateString} +{\footnote MsiServices:CreateString} K{\footnote CreateString} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateString Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns an MsiString object containing an empty string. Note that MsiString  objects are not used by the OLE Automation interface, except for testing. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateString} \par{\i object}\line Required. The MsiServices object. \page #{\footnote MsiServices_CreateRecord} ${\footnote MsiServices.CreateRecord} +{\footnote MsiServices:CreateRecord} K{\footnote CreateRecord} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateRecord Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns a new {\uldb MsiRecord object}{\v MsiRecord_Object} with the  requested number of fields. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateRecord({\i count})} \par{\i object}\line Required. The MsiServices object. \par{\i\b count}\line Required. The number of fields, which may be 0. The upper limit is memory limited. \par\fi0\li0{\b Remarks}\par\li180 Field 0, not one of the fields in {\i\b count}, is reserved for the format string,  which is used by {\uldb MsiRecord.FormatText}{\v MsiRecord_FormatText}. \page #{\footnote MsiServices_SetPlatformProperties} ${\footnote MsiServices.SetPlatformProperties} +{\footnote MsiServices:SetPlatformProperties} K{\footnote SetPlatformProperties} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SetPlatformProperties Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Sets hardware and operating system properties. See  {\uldb Property Summary}{\v Property_Contents} for complete listing.  This method is normally called by the MsiEngine object at initialization. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SetPlatformProperties{\i table, allUsersProfile}} \par{\i object}\line Required. The MsiServices object. \par{\i\b table}\line Required. The MsiTable object containing the property definitions.  The first column must be the primary key containing the property names.  The second column must contain the string values of the properties.  The table may be empty or may contain initial property definitions. \par{\i\b allUsersProfile}\line Required. Boolean. True to set profile folder properties to folders in the "All Users"  profile, if it exists. False to set those properties to folders in the user's personal  profile. \page #{\footnote MsiServices_GetShellFolderPath} ${\footnote MsiServices.GetShellFolderPath} +{\footnote MsiServices:GetShellFolderPath} K{\footnote GetShellFolderPath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetShellFolderPath Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the path to a shell folder. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetShellFolderPath({\i folderId, regValue})} \par{\i object}\line Required. The MsiServices object. \par{\i\b folderId}\line Required. The CSIDL_* value corresponding to this shell folder. These values are  defined in the Windows header shlobj.h. \par{\i\b regValue}\line Optional. The registry value under  (HKEY_CURRENT_USER or HKEY_LOCAL_MACHINE)\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\(Shell Folders or User Shell Folders)  in which the folder is registered. This argument is required to locate a folder that  does not physically exist. \page #{\footnote MsiServices_GetUserProfilePath} ${\footnote MsiServices.GetUserProfilePath} +{\footnote MsiServices:GetUserProfilePath} K{\footnote GetUserProfilePath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetUserProfilePath Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the path to the user's profile folder on Windows NT.  Returns an empty string on Windows 95. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetUserProfilePath} \par{\i object}\line Required. The MsiServices object. \page #{\footnote MsiServices_CreateLog} ${\footnote MsiServices.CreateLog} +{\footnote MsiServices:CreateLog} K{\footnote CreateLog} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateLog Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Opens a file for subsequent logging using the {\uldb WriteLog}{\v MsiServices_WriteLog} method. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateLog({\i path, append})} \par{\i object}\line Required. The MsiServices object. \par{\i\b path}\line Required. The path specification for the logfile to be created. \par{\i\b append}\line Required. A boolean: True to append to existing information in the file, False to clear any existing data. \page #{\footnote MsiServices_WriteLog} ${\footnote MsiServices.WriteLog} +{\footnote MsiServices:WriteLog} K{\footnote WriteLog} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b WriteLog Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Writes a line of text to the log file. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .WriteLog({\i text})} \par{\i object}\line Required. The MsiServices object. \par{\i\b text}\line Required. A string containing the text to write to the log file.  A line separator will be written following the text. \page #{\footnote MsiServices_CreateDatabase} ${\footnote MsiServices.CreateDatabase} +{\footnote MsiServices:CreateDatabase} K{\footnote CreateDatabase;idbCreate;idbMsi;idbAccess;idbSQLServer;idbODBC} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateDatabase Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Creates and returns an MsiDatabase object. Generates an error if the database  object could not be succcessful connected to the database. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateDatabase({\i name, openMode})} \par{\i object}\line Required. The MsiServices object. \par{\i\b name}\line Optional. String containing the name of the database. If no name is  supplied, a temporary database will be created which is not persisted. \par{\i\b openMode}\line Required. How to open the database file, one of the idoEnum values: \line{\f1  idoReadOnly     } - Read only \line{\f1  idoTransact     } - Transacted mode, can rollback \line{\f1  idoDirect       } - Direct write, not transacted \line{\f1  idoCreate       } - Create new storage file, transacted mode \line{\f1  idoCreateDirect } - Create new storage file, direct mode \line{\f1  idoScript       } - Open an execution script for enumeration \par\fi0\li0{\b Remarks}\par\li180 If the database is opened read-write, changes will be written to that database.  If it is opened read-only, then SetOutputDatabase must be used to save updates. \page #{\footnote MsiServices_CreateDatabaseFromStorage} ${\footnote MsiServices.CreateDatabaseFromStorage} +{\footnote MsiServices:CreateDatabaseFromStorage} K{\footnote CreateDatabaseFromStorage} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateDatabaseFromStorage Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Creates and returns an MsiDatabase object using an opened MsiStorage  object to access the database streams. Generates an error if the database   object could not be succcessful generated from the storage object. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateDatabaseFromStorage({\i storage, readOnly})} \par{\i object}\line Required. The MsiServices object. \par{\i\b storage}\line Required. MsiStorage object which contains the database data.  This must have been opened read-write if the database is to be opened read-write. \par{\i\b readOnly}\line Required. Boolean: True to open read-only, False to open read-write \par\fi0\li0{\b Remarks}\par\li180 If the database is opened read-write, changes will be written to that database.  If it is opened read-only, then SetOutputDatabase must be used to save updates. \page #{\footnote MsiServices_CreateFilePath} ${\footnote MsiServices.CreateFilePath} +{\footnote MsiServices:CreateFilePath} K{\footnote CreateFilePath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateFilePath Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method provides for the creation of an {\uldb MsiPath}{\v MsiPath_Object} object, based on a full path to a file. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateFilePath({\i path})} \par{\i object}\line Required. The MsiServices object. \par{\i\b path}\line Required. A full pathname to a file, including a full volume specification. \par\fi0\li0{\b Remarks}\par\li180 See the documentation for the {\uldb MsiPath}{\v MsiPath_Object} object for details  regarding path and volume syntax. \page #{\footnote MsiServices_RipFileNameFromPath} ${\footnote MsiServices.RipFileNameFromPath} +{\footnote MsiServices:RipFileNameFromPath} K{\footnote RipFileNameFromPath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RipFileNameFromPath Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Given a full path to a file, this method returns the file name. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RipFileNameFromPath({\i path})} \par{\i object}\line Required. The MsiServices object. \par{\i\b path}\line Required. A full pathname to a file, including a full volume specification. \par\fi0\li0{\b Remarks}\par\li180 See the documentation for the {\uldb MsiPath}{\v MsiPath_Object} object for details  regarding path and volume syntax. \page #{\footnote MsiServices_CreatePath} ${\footnote MsiServices.CreatePath} +{\footnote MsiServices:CreatePath} K{\footnote CreatePath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreatePath Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method provides for the creation of an {\uldb MsiPath}{\v MsiPath_Object} object. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreatePath({\i path})} \par{\i object}\line Required. The MsiServices object. \par{\i\b path}\line Required. A full pathname to a directory, including a full volume specification. \par\fi0\li0{\b Remarks}\par\li180 See the documentation for the {\uldb MsiPath}{\v MsiPath_Object} object for details  regarding path and volume syntax. \page #{\footnote MsiServices_CreateVolume} ${\footnote MsiServices.CreateVolume} +{\footnote MsiServices:CreateVolume} K{\footnote CreateVolume} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateVolume Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method provides for the creation of an MsiVolume object, which is  used to represent a physical disk drive. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateVolume({\i volPath,fSuppressLFN})} \par{\i object}\line Required. The MsiServices object. \par{\i\b volPath}\line Required. A pathname that includes a valid volume reference.  See the documentation  for the {\uldb MsiPath}{\v MsiPath_Object} object for details regarding path syntax. \par\fi0\li0{\b Remarks}\par\li180 Note: Any path information beyond the volume specification, and any trailing directory  separators, will be ignored by the CreateVolume method.  Thus, all the following calls   are functionally identical:\line \line  {\f1  services.CreateVolume("\\\\MyServer\\MyShare")\line  services.CreateVolume("\\\\MyServer\\MyShare\\")\line  services.CreateVolume("\\\\MyServer\\MyShare\\Dir1\\Dir2")\line  services.CreateVolume("\\\\MyServer\\MyShare\\Dir1\\Dir2\\")\line \page #{\footnote MsiServices_CreateVolumeFromLabel} ${\footnote MsiServices.CreateVolumeFromLabel} +{\footnote MsiServices:CreateVolumeFromLabel} K{\footnote CreateVolumeFromLabel} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateVolumeFromLabel Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This method searches for a mounted volume having a specified type and specified label.  If the specified volume is found, an {\uldb MsiVolume}{\v MsiVolume_Object} object will  be created and returned. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateVolumeFromLabel({\i label, driveType})} \par{\i object}\line Required. The MsiServices object. \par{\i\b label}\line Required. A string specifying the label of the volume to be searched for. \par{\i\b driveType}\line Required. An enumeration value of type {\uldb idtEnum}{\v MsiServices_EnumDriveType}, specifying  the type of volume to be searched for. \par\fi0\li0{\b Remarks}\par\li180 If there is no mounted volume of the specified type and label, error 1000 will be thrown, and  no volume object will be returned. \page #{\footnote MsiServices_CreateCopier} ${\footnote MsiServices.CreateCopier} +{\footnote MsiServices:CreateCopier} K{\footnote CreateCopier} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateCopier Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Creates an {\uldb MsiFileCopy}{\v MsiFileCopy_Object} object, which can be  used to copy files from a source directory (i.e. the full path associated  with this MsiPath object) to a specified destination directory.  Once the  MsiFileCopy object has been created, the {\uldb CopyTo}{\v MsiFileCopy_CopyTo}  function can be used to perform the actual file copy. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateCopier({\i copierType,storage})} \par{\i object}\line Required. The MsiServices object. \par{\i\b copierType}\line An integer enumeration value specifying the type of copier object to be created. The  following values are acceptable:\par {\f1 \ul ictFileCopier = 0}\line A copy object suitable for copying uncompressed files.\par {\f1 \ul ictFileCabinetCopier = 1}\line A copy object suitable for copying files compressed in a standard cabinet file.\par {\f1 \ul ictStreamCabinetCopier = 2}\line A copy object suitable for copying files compressed in a cabinet stored as a stream within an MsiStorage  object (see the {\i\b storage} parameter below).\par {\f1 \ul ictResourceCabinetCopier = 3}\line Obsolete.  Currently still supported for compatibility.  Copies files from a cabinet stored as a  resource within a Launcher.  However, note that from automation, there's no way to exploit this  copier type, because we have no mechanism available through automation to provide the valid HINSTANCE  of a module containing the cabinet resource.\par \par{\i\b storage}\line Optional.  If the copier type is ictStreamCabinetCopier, this parameter must be supplied as an MsiStorage  object that contains a cabinet as a named stream. \page #{\footnote MsiServices_CreatePatcher} ${\footnote MsiServices.CreatePatcher} +{\footnote MsiServices:CreatePatcher} K{\footnote CreatePatcher} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreatePatcher Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Creates an {\uldb MsiFilePatch}{\v MsiFilePatch_Object} object, which can be  used to patch existing files. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreatePatcher} \par{\i object}\line Required. The MsiServices object. \page #{\footnote MsiServices_EnumDriveType} ${\footnote MsiServices.EnumDriveType} +{\footnote MsiServices:EnumDriveType} K{\footnote EnumDriveType;idtEnum} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b EnumDriveType Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns an enumeration object containing a collection of MsiVolume objects representing all the mounted volumes  of a specified type. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .EnumDriveType({\i driveType})} \par{\i object}\line Required. The MsiServices object. \par{\i\b driveType}\line Required. The type of volume to be enumerated, one of idtEnum:\line    {\f1 idtAllDrives = 1   } Enumerate drives of all types\line    {\f1 idtRemovable = 2   } Drive contains non-floppy removable media\line    {\f1 idtFixed     = 3   } Hard disk drive\line    {\f1 idtRemote    = 4   } Network server share\line    {\f1 idtCDROM     = 5   } CD_ROM drive\line    {\f1 idtRAMDisk   = 6   } RAM disk\line    {\f1 idtFloppy    = 2   } Floppy disk (currently not distinguished from idtRemovable). \line \page #{\footnote MsiServices_ClearAllCaches} ${\footnote MsiServices.ClearAllCaches} +{\footnote MsiServices:ClearAllCaches} K{\footnote ClearAllCaches} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ClearAllCaches Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Clears all caches in the services object. Currently these caches are  references to created volume objects in the internal volume cache and  cached record objects (for performance). \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ClearAllCaches} \par{\i object}\line Required. The MsiServices object. \par\fi0\li0{\b Remarks}\par\li180 Each time an MsiVolume object is to be created (usually in conjunction with an  associated MsiPath object), Darwin checks to see if an MsiVolume object already  exists for the referenced volume.  If so, a reference to that object is returned  by the {\uldb CreateVolume}{\v MsiServices_CreateVolume} method, obviating the  need to create a new MsiVolume object from scratch.    Each time a record is released we add it to a record cache (assuming there is still room)  in order to save time by not returning it to the memory pool. When a record of the same  size is needed, we return a record from the cache if one is available.  The ClearAllCaches method  clears the volume cache and record cache, and is called by the Darwin Engine dll at setup termination. \page #{\footnote MsiServices_GetModuleUsage} ${\footnote MsiServices.GetModuleUsage} +{\footnote MsiServices:GetModuleUsage} K{\footnote GetModuleUsage} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetModuleUsage Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The GetModuleUsage function enumerates all the processes on the user system that have currently  loaded a given executable module in their address space. The function returns an enumeration of  MsiRecord objects, one for each such process. The record has 3 fields - The first field is a  string which is the process name. The second field is an integer which is the process id. The  third field is an integer which is the handle of the top level window of the process. The third  field is null if there is no top level window for the process. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetModuleUsage({\i fileName})} \par{\i object}\line Required. The MsiServices object. \par{\i\b fileName}\line Required. A string that is the file name of the executable module. \par\fi0\li0{\b Remarks}\par\li180  Note: The file name of the module must be the file name only and not the full path. \page #{\footnote MsiServices_GetLocalPath} ${\footnote MsiServices.GetLocalPath} +{\footnote MsiServices:GetLocalPath} K{\footnote GetLocalPath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetLocalPath Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Windows:\line Returns a string representing the full path of the installer's launch directory.\line \line Mac:\line Returns a string representing the full path of the MsiServices DLL directory.\line \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetLocalPath({\i fileName})} \par{\i object}\line Required. The MsiServices object. \par{\i\b fileName}\line Optional.  If supplied, this file name will be appended to the path returned by GetLocalPath.\line \par\fi0\li0{\b Remarks}\par\li180 (Windows Only)\line If the string supplied in the fileName parameter has the format of a fully qualified path (i.e. a  colon in the 2nd character position, or two leading backslash characters), that string itself will   be returned. Otherwise, no error checking is performed on the supplied fileName parameter   before it is appended. \page #{\footnote MsiServices_CreateRegKey} ${\footnote MsiServices.CreateRegKey} +{\footnote MsiServices:CreateRegKey} K{\footnote CreateRegKey} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateRegKey Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Creates a MsiRegKey object. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateRegKey({\i value, subKey})} \par{\i object}\line Required. The MsiServices object. \par{\i\b value}\line Required. A string which is one of the following predefined roots \line{\f1  "HKEY_CLASSES_ROOT"} \line{\f1  "HKEY_CURRENT_USER"} \line{\f1  "HKEY_LOCAL_MACHINE"} \line{\f1  "HKEY_USERS"} \par{\i\b subKey}\line Required. A string which is denotes the subkey below the predefined root {\i\b value} \par\fi0\li0{\b Remarks}\par\li180 The actual registry key is not opened or created on the construction of  the MsiRegKey object. \page #{\footnote MsiServices_RegisterFont} ${\footnote MsiServices.RegisterFont} +{\footnote MsiServices:RegisterFont} K{\footnote RegisterFont} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RegisterFont Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Registers a font with the system. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RegisterFont({\i fontTitle, fontFile, path})} \par{\i object}\line Required. The MsiServices object. \par{\i\b fontTitle}\line Required. the font title string. \par{\i\b fontFile}\line Required. the font filename. \par{\i\b path}\line Optional. the MsiPath object where the font file exists.  If this argument is omitted, the font file is assumed to exist in the  default font folder. \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiServices_UnregisterFont} ${\footnote MsiServices.UnregisterFont} +{\footnote MsiServices:UnregisterFont} K{\footnote UnregisterFont} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b UnregisterFont Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Unregisters a font with the system. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .UnregisterFont({\i fontTitle})} \par{\i object}\line Required. The MsiServices object. \par{\i\b fontTitle}\line Required. the font title string. \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiServices_WriteIniFile} ${\footnote MsiServices.WriteIniFile} +{\footnote MsiServices:WriteIniFile} K{\footnote WriteIniFile;iifIniAddLine;iifIniCreateLine;iifIniRemoveLine;iifIniAddTag;iifIniRemoveTag} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b WriteIniFile Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb ReadIniFile Method}{\v MsiServices_ReadIniFile} \par}\li180 Writes/Deletes an entry in a .INI file.  Generates an error if a system error occurs during file update. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .WriteIniFile({\i path, file, section, key, value, action})} \par{\i object}\line Required. The MsiServices object. \par{\i\b path}\line Optional. The MsiPath object to the .INI file. If absent, the windows directory is assumed.  If this directory does not exist, a run-time error will be generated. \par{\i\b file}\line Required. A string denoting the .INI file name. \par{\i\b section}\line Required. A string denoting the section in the .INI file. \par{\i\b key}\line Required. A string denoting the key in the .INI file. \par{\i\b value}\line A string denoting the value for the key in the .INI file. Ignored for {\b iifIniRemoveLine}  action. \par{\i\b action}\line Required. The type of .INI update, one of the iifIniMode values: \line{\f1  iifIniAddLine    =0 }- Creates/Updates .INI entry \line{\f1  iifIniCreateLine =1 }- Creates .INI entry only if absent \line{\f1  iifIniRemoveLine =2 }- Deletes .INI entry \line{\f1  iifIniAddTag     =3 }- Creates/ Appends a new comma separated tag(value) to a .INI entry \line{\f1  iifIniRemoveTag  =4 }- Deletes a tag from a .INI entry \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiServices_ReadIniFile} ${\footnote MsiServices.ReadIniFile} +{\footnote MsiServices:ReadIniFile} K{\footnote ReadIniFile} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ReadIniFile Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb WriteIniFile Method}{\v MsiServices_WriteIniFile} \par}\li180 Reads an entry from a .INI file.  Returns a string containing the value read from the .INI file. Generates an error   if a system error occurs during file read. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ReadIniFile({\i path, file, section, key, field})} \par{\i object}\line Required. The MsiServices object. \par{\i\b path}\line Optional. The Path object to the .INI file. If absent, the windows directory is assumed. \par{\i\b file}\line Required. a string denoting the .INI file name. \par{\i\b section}\line Required. a string denoting the section in the .INI file. \par{\i\b key}\line Required. a string denoting the key in the .INI file. \par{\i\b field}\line Optional. integer denoting field to be read from the .INI file. If absent or 0, will read the  entire line. \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiServices_GetAllocator} ${\footnote MsiServices.GetAllocator} +{\footnote MsiServices:GetAllocator} K{\footnote GetAllocator} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetAllocator Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the system memory allocator as an  {\uldb MsiMalloc}{\v MsiMalloc_Object} object.  This method and the allocator are exposed solely for testing purposes. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetAllocator} \par{\i object}\line Required. The MsiServices object. \par\fi0\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote MsiServices_GetLangNamesFromLangIDString} ${\footnote MsiServices.GetLangNamesFromLangIDString} +{\footnote MsiServices:GetLangNamesFromLangIDString} K{\footnote GetLangNamesFromLangIDString} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetLangNamesFromLangIDString Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Given a string containing a comma-separated list of language identifiers,  GetLangNamesFromLangIDString returns the full localized name of each specified language  in a record object supplied by the caller. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetLangNamesFromLangIDString({\i langIDString, langRec, iFieldStart})} \par{\i object}\line Required. The MsiServices object. \par{\i\b langIDString}\line Required. A string containing a comma-separated list of valid language identifiers.  For  example: "1031, 1033, 1046"\line \par{\i\b langRec}\line Required. An existing MsiRecord object.\line \par{\i\b iFieldStart}\line Required. An integer specifying the first field within langRec to begin storing language  names.  Starting with this field, GetLangNamesFromLangIDString will store the converted  language names in consecutively ascending record fields.  \par\fi0\li0{\b Return Value:}\par\li180 A count of the successfully converted language IDs. \par\fi0\li0{\b Remarks}\par\li180 GetLangNamesFromLangIDString will continue processing language IDs until either the end  of the string is reached, a syntax error (such as a non-numeric character) is detected,  an unassigned language ID is found, or the available fields within the record are exhausted.  In any case, the count returned as the function result will reflect the number of language IDs  successfully converted before the terminating condition was reached.\line\line Note: If the iFieldStart parameter is greater than the number of allocated fields in the  caller's MsiRecord object, GetLangNamesFromLangIDString will return immediately with a  count of zero as the function result. \page #{\footnote MsiServices_CreateStorage} ${\footnote MsiServices.CreateStorage} +{\footnote MsiServices:CreateStorage} K{\footnote CreateStorage} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateStorage Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Creates and returns an {\uldb MsiStorage}{\v MsiStorage_Object} object for a file, from which  {\uldb MsiStream}{\v MsiStream_Object}  objects can be created to read or write persistent data.             \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateStorage({\i path, openMode})} \par{\i object}\line Required. The MsiServices object. \par{\i\b path}\line Required. The file path for the file on which the storage will be opened. \par{\i\b openMode}\line Required. The mode in which the storage will be created, one of ismEnum: \line{\f1  ismReadOnly     } opens storage in read-only mode, required for read-only file. \line{\f1  ismDirect       } opens storage in direct mode, non-transacted, cannot rollback. \line{\f1  ismTransact     } opens storage in transacted mode, updates can be rolled back. \line{\f1  ismCreateDirect } creates new file, overwriting any existing, in direct mode. \line{\f1  ismCreate       } creates new file, overwriting any existing, in transacted mode. \par\fi0\li0{\b Remarks}\par\li180 MsiStorage objects may be created internally from sources other than files,  such as resources and memory buffers and substorages of other structured storage files. \page #{\footnote MsiServices_GetUnhandledError} ${\footnote MsiServices.GetUnhandledError} +{\footnote MsiServices:GetUnhandledError} K{\footnote GetUnhandledError} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetUnhandledError Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns an MsiRecord object containing the error information for an error  that occured under conditions that could not be returned at the time. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetUnhandledError} \par{\i object}\line Required. The MsiServices object. \par\fi0\li0{\b Remarks}\par\li180 Errors can sometimes occur during background processing and during destruction  of objects. If the MsiRecord object containg the error information cannot  be returned, it is posted internally, to be accessed at some later time  using this method. Only the first such error will be retained. Calling this  method will clear the error and allow another to be posted. Much of the  need for unhandled errors can be eliminated by finalizing objects before  they are released. For example, committing a database or storage object  will report any write errors at that time, rather than relying upon the  implicit commit during destruction of the object. \page #{\footnote MsiServices_SupportLanguageId} ${\footnote MsiServices.SupportLanguageId} +{\footnote MsiServices:SupportLanguageId} K{\footnote SupportLanguageId; Language} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SupportLanguageId Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Checks system support for the supplied language Id and returns the information as a figure of merit. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SupportLanguageId({\i languageId, systemDefault})} \par{\i object}\line Required. The MsiServices object. \par{\i\b languageId}\line Required. The numeric Id representing the language, including the dialect (sub-language). \par{\i\b languageId}\line Required. Boolean: True to use SystemDefault language, False to use UserDefault language. \par\fi-180\li180{\b Return Codes}, one of ismEnum \line{\f1  isliNotSupported      = 0  } system configuration doesn't support the language Id \line{\f1  isliLanguageMismatch  = 1  } base language differs from current user language Id \line{\f1  isliDialectMismatch   = 2  } base language matches, but dialect mismatched \line{\f1  isliLanguageOnlyMatch = 3  } base language matches, no dialect supplied \line{\f1  isliExactMatch        = 4  } exact match, both language and dialect \page #{\footnote MsiServices_CreateShortcut} ${\footnote MsiServices.CreateShortcut} +{\footnote MsiServices:CreateShortcut} K{\footnote CreateShortcut; Language} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateShortcut Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Creates a shortcut. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateShortcut({\i shortcutPath, shortcutName, targetPath, targetName, shortcutInfo})} \par{\i object}\line Required. The MsiServices object. \par{\i\b shortcutPath}\line Required. An {\uldb MsiPath}{\v MsiPath_Object} object indicating where the shortcut should be created. \par{\i\b shortcutName}\line Required. The name of the shortcut to be created. \par{\i\b targetPath}\line Required. An {\uldb MsiPath}{\v MsiPath_Object} object indicating where the target is. \par{\i\b targetName}\line Required. The name of the shortcut's target. \par{\i\b shortcutInfo}\line Optional. An {\uldb MsiRecord}{\v MsiRecord_Object} containing additional information  about the shortcut. The record contains the following fields: \line{\f1  icsArguments        = 1 } The command-line arguments for the shortcut. \line{\f1  icsDescription      = 2 } The description for the shortcut. \line{\f1  icsHotKey           = 3 } The hotkey for the shortcut. It has the  virtual-key code for the key in the low-order byte, and the modifier flags in  the high-order byte.  \line{\f1  icsIconId           = 4 } The icon index for the shortcut. \line{\f1  icsIconFullPath     = 5 } An {\uldb MsiPath}{\v MsiPath_Object} object  denoting the external icon file for the shortcut. \line{\f1  icsShowCmd          = 6 } The show command for the application window.  The values are exactly as defined for the ShowWindow Windows API fn. See the  {\uldb Shortcut Table}{\v _msi_Shortcut_Table@msi.hlp} help for more information. \line{\f1  icsWorkingDirectory = 7 } An {\uldb MsiPath}{\v MsiPath_Object} object  denoting the working directory for the shortcut. \page #{\footnote MsiServices_RemoveShortcut} ${\footnote MsiServices.RemoveShortcut} +{\footnote MsiServices:RemoveShortcut} K{\footnote RemoveShortcut; Language} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RemoveShortcut Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Removes a shortcut. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RemoveShortcut({\i shortcutPath, shortcutName, targetPath, targetName})} \par{\i object}\line Required. The MsiServices object. \par{\i\b shortcutPath}\line Required. An {\uldb MsiPath}{\v MsiPath_Object} object indicating where the shortcut  to be deleted is located. \par{\i\b shortcutName}\line Required. The name of the shortcut to be deleted. \par{\i\b targetPath}\line Optional. An {\uldb MsiPath}{\v MsiPath_Object} object indicating where the target is. \par{\i\b targetName}\line Optional. The name of the shortcut's target. \page #{\footnote MsiServices_ExtractFileName} ${\footnote MsiServices.ExtractFileName} +{\footnote MsiServices:ExtractFileName} K{\footnote ExtractFileName} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ExtractFileName Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Extract the appropriate name from a short|long pair of file names. The extracted name is  validated for correct syntax. The name that is not extracted, if there is one, is not validated  for syntax. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ExtractFileName({\i pair, longname})} \par{\i object}\line Required. The MsiServices object. \par{\i\b pair}\line Required. The pair of file names, seperated by a '|'. This string may also contain only one name if  desired. \par{\i\b longname}\line Required. Boolean. True to extract the long name, false to extract the short name. \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiServices_ValidateFileName} ${\footnote MsiServices.ValidateFileName} +{\footnote MsiServices:ValidateFileName} K{\footnote ValidateFileName} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ValidateFileName Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Validates a file name for correct syntax. Can validate either short or long file names. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ValidateFileName({\i filename, longname})} \par{\i object}\line Required. The MsiServices object. \par{\i\b pair}\line Required. String. The file name. \par{\i\b longname}\line Required. Boolean. True to validate for long name syntax, false to validate for short name syntax. \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiServices_CreateFileStream} ${\footnote MsiServices.CreateFileStream} +{\footnote MsiServices:CreateFileStream} K{\footnote CreateFileStream} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateFileStream Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Creates and returns an {\uldb MsiStream}{\v MsiStream_Object} object that accesses the supplied file. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateFileStream({\i filePath, write})} \par{\i object}\line Required. The MsiServices object. \par{\i\b filePath}\line Required string. The full path to the file. \par{\i\b write}\line Required boolean. True to create a writable stream, false to create a read-only stream. \par\fi0\li0{\b Remarks}\par\li180 If a read-only stream is requested, the file must exist. If a writable stream is requested  the file will be created if it does not exist, and will be truncated to 0 before the first write. \page #{\footnote MsiServices_CreateMemoryStream} ${\footnote MsiServices.CreateMemoryStream} +{\footnote MsiServices:CreateMemoryStream} K{\footnote CreateMemoryStream} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateMemoryStream Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Creates and returns an {\uldb MsiStream}{\v MsiStream_Object} object that accesses an allocated block of memory. Memory streams are read-only. Attempts to write will cause the stream to be set to the error state. The memory is allocated to hold the contents of a supplied string. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateMemoryStream({\i data})} \par{\i object}\line Required. The MsiServices object. \par{\i\b data}\line Required string. A string which is copied (as Unicode) to the allocated memory stream buffer. \par\fi0\li0{\b Remarks}\par\li180 The actual IMsiServices interface supports two functions, AllocateMemoryStream, and CreateStreamOnMemory.  Because VBA does not easily deal with raw memory, this wrapper function accepts a string to determinine  the size and contents of the allocated memory. The memory is released when the stream is destructed. \page #{\footnote MsiServices_RegisterTypeLibrary} ${\footnote MsiServices.RegisterTypeLibrary} +{\footnote MsiServices:RegisterTypeLibrary} K{\footnote RegisterTypeLibrary} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RegisterTypeLibrary Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Registers a type library using the Windows RegisterTypeLib API function. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RegisterTypeLibrary({\i libId, locale, path, helpPath})} \par{\i object}\line Required. The MsiServices object. \par{\i\b libId}\line Required string. A string that represents the type library IID. \par{\i\b locale}\line Required integer. The locale. \par{\i\b path}\line Required string. The full file path of the type library. \par{\i\b helpPath}\line Optional string. The help file folder. \par\fi0\li0{\b Remarks}\par\li180 The services object impersonates the user if running in the context of the Darwin service if the type library is located on a network path. \page #{\footnote MsiServices_UnregisterTypeLibrary} ${\footnote MsiServices.UnregisterTypeLibrary} +{\footnote MsiServices:UnregisterTypeLibrary} K{\footnote UnregisterTypeLibrary} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b UnregisterTypeLibrary Method \line\tx360\tab\fs18\b0{\uldb MsiServices Object}{\v MsiServices_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Unregisters a type library using the Windows UnregisterTypeLib API function. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .UnregisterTypeLibrary({\i libId, locale, path})} \par{\i object}\line Required. The MsiServices object. \par{\i\b libId}\line Required string. A string that represents the type library IID. \par{\i\b locale}\line Required integer. The locale. \par{\i\b path}\line Required string. The full file path of the type library. \par\fi0\li0{\b Remarks}\par\li180 The services object impersonates the user if running in the context of the Darwin service if the type library is located on a network path. \page #{\footnote MsiData_Object} ${\footnote MsiData Object} +{\footnote Class:MsiData} K{\footnote MsiData} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiData Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 MsiData is a base object from which MsiString and other objects are derived.  Its sole purpose is to permit the storage of objects in fields of MsiRecord  and MsiTable objects. The only direct access to the data is via read-only properties.  MsiData objects cannot be created directly. Rather, the ObjectData property of  MsiCursor and MsiRecord return the stored objects as MsiData objects. \par\li0{\b Properties}\par\li180 {\uldb StringValue}{\v MsiData_StringValue}\line {\uldb IntegerValue}{\v MsiData_IntegerValue}\line \page #{\footnote MsiData_StringValue} ${\footnote MsiData.StringValue} +{\footnote MsiData:StringValue} K{\footnote StringValue} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b StringValue Property \line\tx360\tab\fs18\b0{\uldb MsiData Object}{\v MsiData_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The string value for the MsiData object. This is the default property.  Because the MsiData object is a common base class for other objects, this  property returns a string representation of the underlying object. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .StringValue} \par{\i object}\line Required. The MsiData object. \par\fi0\li0{\b Remarks}\par\li180 OLE automation transfers strings as Unicode on Windows platforms. The  automation wrappers use the Win32 API to translate the strings to SBCS or  DBCS strings for use with the non-Unicode version of Microsoft Installer. \page #{\footnote MsiData_IntegerValue} ${\footnote MsiData.IntegerValue} +{\footnote MsiData:IntegerValue} K{\footnote IntegerValue} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b IntegerValue Property \line\tx360\tab\fs18\b0{\uldb MsiData Object}{\v MsiData_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The integer value for the MsiData object. Because the MsiData object is a  common base class for other objects, this property returns an integer  representation of the underlying object. If the object cannot be converted to  an integer, the value {\b\f1 iMsiNullInteger} is returned. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .IntegerValue} \par{\i object}\line Required. The MsiData object. \par\fi0\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote MsiString_Object} ${\footnote MsiString Object} K{\footnote MsiString} +{\footnote Class:MsiString} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiString Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 MsiString is a object providing abstracted, allocated string handling for  the whole of the Microsoft Installer implementation. This has been designed  to improve performance by reducing the need for string copying, to eliminate  the use of error-prone text buffers, and to efficiently handle DBCS strings. The MsiString object is derived from the common MsiData object that is used  to support storage in records and in local database tables. NOTE: Although the MsiString object is commonly used to pass strings by the  C++ methods, is not exposed to OLE automation. Rather, it is translated to  the OLE automation string type BSTR, which transfers strings as Unicode on Windows.  However the MsiString object itself is exposed to OLE automation for testing  purposes, as its integrity is crucial to the remainder of the system. \par\li0{\b Properties}\par\li180 {\uldb Value}{\v MsiString_Value}\line {\uldb IntegerValue}{\v MsiString_IntegerValue}\line {\uldb TextSize}{\v MsiString_TextSize}\line {\uldb CharacterCount}{\v MsiString_CharacterCount}\line {\uldb IsDBCS}{\v MsiString_IsDBCS}\line \par\li0{\b Methods}\par\li180 {\uldb Compare}{\v MsiString_Compare}\line {\uldb Append}{\v MsiString_Append}\line {\uldb Add}{\v MsiString_Add}\line {\uldb Extract}{\v MsiString_Extract}\line {\uldb Remove}{\v MsiString_Remove}\line {\uldb UpperCase}{\v MsiString_UpperCase}\line {\uldb LowerCase}{\v MsiString_LowerCase}\line \page #{\footnote MsiString_Value} ${\footnote MsiString.Value} +{\footnote MsiString:Value} K{\footnote Value} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Value Property \line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The string value for the MsiString object. This is the default property. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Value} \par{\i object}\line Required. The MsiString object. \par\fi0\li0{\b Remarks}\par\li180 OLE automation transfers strings as Unicode on Windows platforms. The  automation wrappers use the Win32 API to translate the strings to SBCS or  DBCS strings for use with the non-Unicode version of Microsoft Installer. \page #{\footnote MsiString_TextSize} ${\footnote MsiString.TextSize} +{\footnote MsiString:TextSize} K{\footnote TextSize} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b TextSize Property \line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The length of the string in units of character size, not counting the  null terminator. This is the storage requirement; the number of  displayable characters may be less if the string contains DBCS lead bytes  or Unicode uncomposed sequences. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .TextSize} \par{\i object}\line Required. The MsiString object. \page #{\footnote MsiString_IntegerValue} ${\footnote MsiString.IntegerValue} +{\footnote MsiString:IntegerValue} K{\footnote IntegerValue} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b IntegerValue Property \line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The integer value of the string. If the string does not represent a valid  signed 32-bit integer, the value {\b\f1 iMsiNullInteger} is returned. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .IntegerValue} \par{\i object}\line Required. The MsiString object. \page #{\footnote MsiString_CharacterCount} ${\footnote MsiString.CharacterCount} +{\footnote MsiString:CharacterCount} K{\footnote CharacterCount} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CharacterCount Property \line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The number of logical characters in the string. DBCS lead byte sequences  and Unicode uncomposed sequences count as a single character. This execution  of this property is considerably slower if the string contains lead bytes.  Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CharacterCount} \par{\i object}\line Required. The MsiString object. \page #{\footnote MsiString_IsDBCS} ${\footnote MsiString.IsDBCS} +{\footnote MsiString:IsDBCS} K{\footnote IsDBCS} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b IsDBCS Property \line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 True if the string contains any double-byte characters.  Will always return False if the operating system is not use a DBCS codepage.  Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .IsDBCS} \par{\i object}\line Required. The MsiString object. \page #{\footnote MsiString_Compare} ${\footnote MsiString.Compare} +{\footnote MsiString:Compare} K{\footnote Compare} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Compare Method \line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Compares the object with another string. A variety of compare options can be  set with the {\i\b mode} argument. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Compare({\i mode, text})} \par{\i object}\line Required. The MsiString object. \par{\i\b mode}\line Required. The comparison mode, one of the enumeration iscEnum:\line {\f1   iscExact   } - supplied string matches exactly current string, case sensistive\line {\f1   iscExactI  } - supplied string matches exactly current string, case insensistive\line {\f1   iscStart   } - supplied string matches start of current string, case sensitive\line {\f1   iscStartI  } - supplied string matches start of current string, case insensitive\line {\f1   iscEnd     } - supplied string matches end of current string, case sensitive\line {\f1   iscEndI    } - supplied string matches end of current string, case insensitive\line {\f1   iscWithin  } - supplied string matches anywhere in current string, case sensisitve\line {\f1   iscWithinI } - supplied string matches anywhere in current string, case insensitive\line \par{\i\b text}\line Required. The string to compare with the object. \par\fi0\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote MsiString_Append} ${\footnote MsiString.Append} +{\footnote MsiString:Append} K{\footnote Append} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Append Method \line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Appends a string or an MsiString object to the end of the current string object. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Append({\i text})} \par{\i object}\line Required. The MsiString object. \par{\i\b text}\line Required. The string to append. May be either a string or an MsiString object.  If the argument is Null, no action takes place. \par\fi0\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote MsiString_Add} ${\footnote MsiString.Add} +{\footnote MsiString:Add} K{\footnote Add} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Add Method \line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns a new MsiString object by appending a string or an MsiString object  to the end of the current string object. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Add({\i text})} \par{\i object}\line Required. The MsiString object. \par{\i\b text}\line Required. The string to append. May be either a string or an MsiString object.  If the argument is Null, the current MsiString object is returned. \par\fi0\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote MsiString_Extract} ${\footnote MsiString.Extract} +{\footnote MsiString:Extract} K{\footnote Extract} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Extract Method \line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns a new MsiString object by extracting a portion of the existing string,  depending upon the mode specified by the {\i\b mode} argument. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Extract({\i mode, limit})} \par{\i object}\line Required. The MsiString object. \par{\i\b mode}\line Required. The extraction mode, one of the enumeration iseEnum:\line {\f1   iseFirst     } - the first iLimit characters of the current string\line {\f1   iseLast      } - the last iLimit characters of the current string\line {\f1   iseUpto      } - the string up to the character iLimit\line {\f1   iseIncluding } - the string up to and including the character iLimit\line {\f1   iseFrom      } - the string starting with the final character iLimit\line {\f1   iseAfter     } - the string following the last character iLimit \par{\i\b limit}\line Required. An integer containing the number of characters to extract,  or the particular character to use as the limit. \par\fi0\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote MsiString_Remove} ${\footnote MsiString.Remove} +{\footnote MsiString:Remove} K{\footnote Remove} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Remove Method \line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Removes a portion of the existing string, depending upon the mode specified by  the {\i\b mode} argument. Returns a boolean indicating whether any text was removed. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Remove({\i mode, limit})} \par{\i object}\line Required. The MsiString object. \par{\i\b mode}\line Required. The extraction mode, one of the enumeration iseEnum:\line {\f1   iseFirst     } - the first iLimit characters of the current string\line {\f1   iseLast      } - the last iLimit characters of the current string\line {\f1   iseUpto      } - the string up to the character iLimit\line {\f1   iseIncluding } - the string up to and including the charcter iLimit\line {\f1   iseFrom      } - the string starting with the final character iLimit\line {\f1   iseAfter     } - the string following the last charcter iLimit \par{\i\b limit}\line Required. An integer containing the number of characters to extract,  or the particular character to use as the limit. \par\fi0\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote MsiString_UpperCase} ${\footnote MsiString.UpperCase} +{\footnote MsiString:UpperCase} K{\footnote UpperCase} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b UpperCase Method \line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Converts all lower case characters in the string to upper case. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .UpperCase} \par{\i object}\line Required. The MsiString object. \par\fi0\li0{\b Remarks}\par\li180 The actual conversion is performed by the operating system,  using the current system codepage or system script. \page #{\footnote MsiString_LowerCase} ${\footnote MsiString.LowerCase} +{\footnote MsiString:LowerCase} K{\footnote LowerCase} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b LowerCase Method \line\tx360\tab\fs18\b0{\uldb MsiString Object}{\v MsiString_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Converts all upper case characters in the string to lower case. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .LowerCase} \par{\i object}\line Required. The MsiString object. \par\fi0\li0{\b Remarks}\par\li180 The actual conversion is performed by the operating system,  using the current system codepage or system script. \page #{\footnote MsiRecord_Object} ${\footnote MsiRecord Object} K{\footnote MsiRecord} +{\footnote Class:MsiRecord} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiRecord Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The MsiRecord object is a container for holding and transferring a variable  number of values. Fields within the record are numerically indexed and can  contain strings, integers, objects, and null values. Fields beyond the  allocated record size are treated as having permanently null values.  Field number 0 is not used for data, but is reserved for the format string  for the record, processed by the {\uldb FormatText}{\v MsiRecord_FormatText} method.  Major uses of records are for error returns and database row fetches. \par\li0{\b Properties}\par\li180 {\uldb Data}{\v MsiRecord_Data}\line {\uldb StringData}{\v MsiRecord_StringData}\line {\uldb IntegerData}{\v MsiRecord_IntegerData}\line {\uldb ObjectData}{\v MsiRecord_ObjectData}\line {\uldb FieldCount}{\v MsiRecord_FieldCount}\line {\uldb IsInteger}{\v MsiRecord_IsInteger}\line {\uldb IsNull}{\v MsiRecord_IsNull}\line {\uldb IsChanged}{\v MsiRecord_IsChanged}\line {\uldb TextSize}{\v MsiRecord_TextSize}\line \par\li0{\b Methods}\par\li180 {\uldb FormatText}{\v MsiRecord_FormatText}\line {\uldb ClearData}{\v MsiRecord_ClearData}\line {\uldb ClearUpdate}{\v MsiRecord_ClearUpdate}\line \page #{\footnote MsiRecord_Data} ${\footnote MsiRecord.Data} +{\footnote MsiRecord:Data} K{\footnote Data} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Data Property \line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Read-write. Transfers data between a variant and a specified field within the record.  On property set, integers, strings, Empty, and objects derived from MsiData are accepted.  On property get, the returned variant will contain an long integer, string, MsiData object, or Empty. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Data({\i field})} \par{\i object}\line Required. The MsiRecord object. \par{\i\b field}\line Required. The field number of the value within the record, 1-based. \par\fi0\li0{\b Remarks}\par\li180 The returned value of a non-existent field will be an Empty variant.  An Empty variant value will set the record field to the Null state.  Attempting to store a value in a non-existent field will cause an error. \page #{\footnote MsiRecord_StringData} ${\footnote MsiRecord.StringData} +{\footnote MsiRecord:StringData} K{\footnote StringData} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b StringData Property \line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Read-write. Transfers string data in or out of a specified field within the record.  If an integer or object has been stored, its string value will be returned. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .StringData({\i field})} \par{\i object}\line Required. The MsiRecord object. \par{\i\b field}\line Required. The field number of the value within the record, 1-based. \par\fi0\li0{\b Remarks}\par\li180 The returned value of a non-existent field will be an empty string.  An Empty variant value will set the record field to the Null state.  Attempting to store a value in a non-existent field will cause an error. \page #{\footnote MsiRecord_IntegerData} ${\footnote MsiRecord.IntegerData} +{\footnote MsiRecord:IntegerData} K{\footnote IntegerData} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b IntegerData Property \line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Read-write. Transfers 32-bit integer data in or out of a specified field within the record.  If a field value cannot be converted to an integer, {\b\f1 iMsiNullInteger} is returned. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .IntegerData({\i field})} \par{\i object}\line Required. The MsiRecord object. \par{\i\b field}\line Required. The field number of the value within the record, 1-based. \par\fi0\li0{\b Remarks}\par\li180 The returned value of a non-existent field will be {\b\f1 iMsiNullInteger}.  Attempting to store a value in a non-existent field will cause an error. \page #{\footnote MsiRecord_ObjectData} ${\footnote MsiRecord.ObjectData} +{\footnote MsiRecord:ObjectData} K{\footnote ObjectData} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ObjectData Property \line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Read-write. Transfers objects in or out of a specified field within the record.  The objects must be of type derived from MsiData. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ObjectData({\i field})} \par{\i object}\line Required. The MsiRecord object. \par{\i\b field}\line Required. The field number of the value within the record, 1-based. \par\fi0\li0{\b Remarks}\par\li180 The returned value of a non-existent field will be an object set to Nothing.  An object set to Nothing will set the record field to the Null state.  Attempting to store a value in a non-existent field will cause an error.  To check if the object is of a particular type get its {\uldb HasInterface}{\v MsiBase_HasInterface} property.  To obtain an automation object for the particular type call its {\uldb GetInterface}{\v MsiBase_GetInterface} method. \page #{\footnote MsiRecord_FieldCount} ${\footnote MsiRecord.FieldCount} +{\footnote MsiRecord:FieldCount} K{\footnote FieldCount} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FieldCount Property \line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the number of fields in the record. Read-only.  Read access to fields beyond this count returns null values. Write access will fail. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .FieldCount} \par{\i object}\line Required. The MsiRecord object. \page #{\footnote MsiRecord_IsInteger} ${\footnote MsiRecord.IsInteger} +{\footnote MsiRecord:IsInteger} K{\footnote IsInteger} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b IsInteger Property \line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns a boolean indicating whether the field data is stored as an integer. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .IsInteger({\i field})} \par{\i object}\line Required. The MsiRecord object. \par{\i\b field}\line Required. The field number of the value within the record, 1-based. \page #{\footnote MsiRecord_IsNull} ${\footnote MsiRecord.IsNull} +{\footnote MsiRecord:IsNull} K{\footnote IsNull} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b IsNull Property \line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Read-only. Returns True if the indicated field is null, False if the field contains data. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .IsNull({\i field})} \par{\i object}\line Required. The MsiRecord object. \par{\i\b field}\line Required. The field number of the value within the record, 1-based. \page #{\footnote MsiRecord_IsChanged} ${\footnote MsiRecord.IsChanged} +{\footnote MsiRecord:IsChanged} K{\footnote IsChanged} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b IsChanged Property \line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Read-only. Returns True if the field data has been changed since the record  was initially created or since the last call to {\uldb ClearUpdate}{\v MsiRecord_ClearUpdate}.  Note that integer fields always return True, even if unchanged (the implementation  has no space to maintain the original integer, not a problem for the internal clients). \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .IsChanged({\i field})} \par{\i object}\line Required. The MsiRecord object. \par{\i\b field}\line Required. The field number of the value within the record, 1-based. \page #{\footnote MsiRecord_TextSize} ${\footnote MsiRecord.TextSize} +{\footnote MsiRecord:TextSize} K{\footnote TextSize} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b TextSize Property \line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns the size of the text if the field data were to be access as string data. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .TextSize({\i field})} \par{\i object}\line Required. The MsiRecord object. \par{\i\b field}\line Required. The field number of the value within the record, 1-based. \page #{\footnote MsiRecord_ClearData} ${\footnote MsiRecord.ClearData} +{\footnote MsiRecord:ClearData} K{\footnote ClearData} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ClearData Method \line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Clears the data in all fields, setting them to Null.  Any objects stored in the fields will be released. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ClearData} \par{\i object}\line Required. The MsiRecord object. \page #{\footnote MsiRecord_FormatText} ${\footnote MsiRecord.FormatText} +{\footnote MsiRecord:FormatText} K{\footnote FormatText} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FormatText Method \line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Returns an MsiString object produced from the format string in record field 0  by substituting the record parameters designated in the format string.  If field 0 of the record is null or an integer, then it is treated as being the string \{1: [1]\}\{2: [2]\} etc.  If a substring of the form [number] is encountered, it is replaced by the contents  of the record field of the given number if it exists, otherwise replaced by a null string.  If a part of the string is enclosed in \{ \}, and contains no field numbers,  it is left unchanged, including the curly braces.  If a part of the string is enclosed in \{ \}, and contains one or more field numbers,  and any of the field values are null or missing, all the text in the braces, and the braces themselves are removed;  else the subsititued text is displayed without the curly braces. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .FormatText} \par{\i object}\line Required. The MsiRecord object. \page #{\footnote MsiRecord_ClearUpdate} ${\footnote MsiRecord.ClearUpdate} +{\footnote MsiRecord:ClearUpdate} K{\footnote ClearUpdate} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ClearUpdate Method \line\tx360\tab\fs18\b0{\uldb MsiRecord Object}{\v MsiRecord_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Clears the update states in the record, such that the {\uldb IsChanged}{\v MsiRecord_IsChanged}  property will return False for all fields. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ClearUpdate} \par{\i object}\line Required. The MsiRecord object. \page #{\footnote MsiRegKey_Object} ${\footnote MsiRegKey Object} K{\footnote MsiRegKey} +{\footnote Class:MsiRegKey} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiRegKey Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The MsiRegKey object provides an interface to the system registry. \par\li0{\b Properties}\par\li180 {\uldb Value}{\v MsiRegKey_Value}\line {\uldb Key}{\v MsiRegKey_Key}\line {\uldb Exists}{\v MsiRegKey_Exists}\line {\uldb GetSelfRelativeSD}{\v MsiRegKey_GetSelfRelativeSD}\line {\uldb ValueExists}{\v MsiRegKey_ValueExists}\line \par\li0{\b Methods}\par\li180 {\uldb RemoveValue}{\v MsiRegKey_RemoveValue}\line {\uldb RemoveSubKey}{\v MsiRegKey_RemoveSubKey}\line {\uldb RemoveSubTree}{\v MsiRegKey_RemoveSubTree}\line {\uldb Values}{\v MsiRegKey_Values}\line {\uldb SubKeys}{\v MsiRegKey_SubKeys}\line {\uldb CreateChild}{\v MsiRegKey_CreateChild}\line \par\fi0\li0{\b Remarks} \par\fi0\li0{\b Differences between the Windows 95 and Windows NT registry: }\par {\b 1. }Windows NT does not allow you to create a new key under HKEY_LOCAL_MACHINE or HKEY_USERS,  whereas this is allowed under Windows 95.  Thus code that attempts to do this will succeed  under Windows 95 but fail when run on NT. \page #{\footnote MsiRegKey_Value} ${\footnote MsiRegKey.Value} +{\footnote MsiRegKey:Value} K{\footnote Value} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Value Property \line\tx360\tab\fs18\b0{\uldb MsiRegKey Object}{\v MsiRegKey_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The default or a named value for the current key. Read-write. \par\li0{\b Syntax 1}\par\li500\fi-320 {\i object}{\b .Value} \par\fi0\li0{\b Syntax 2}\par\li500\fi-320 {\i object}{\b .Value({\i valueName})} \par{\i object}\line Required. The MsiRegKey object. \par{\i\b valueName}\line Optional. Name of value, omit to access default value. \par\fi0\li0{\b Remarks}\par\li180 The {\b Value} Property is always read or written as a string. The system Registry  however supports values that may be strings, integers or hexadecimals. If the string  is preceded by a {\b #x} the value is interpreted (for read/ write) as a  hexadecimal value. If {\b Value} is preceded by a {\b #} it is interpreted  as an integer. Else {\b Value} is interpreted as a string. In case the string  begins with 2 or more consequtive {\b #}'s {\b Value} is interpreted as a string,  dropping the first {\b #}. \page #{\footnote MsiRegKey_Exists} ${\footnote MsiRegKey.Exists} +{\footnote MsiRegKey:Exists} K{\footnote Exists} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Exists Property \line\tx360\tab\fs18\b0{\uldb MsiRegKey Object}{\v MsiRegKey_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Boolean indicating whether the current registry key exists or whether to  create/ delete the current registry key. Read-write. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Exists} \par{\i object}\line Required. The MsiRegKey object. \par\fi0\li0{\b Remarks}\par\li180 The property can be used to query the registry to determine if the key  exists. It can also be used with an assignment to create/ delete the key. \page #{\footnote MsiRegKey_ValueExists} ${\footnote MsiRegKey.ValueExists} +{\footnote MsiRegKey:ValueExists} K{\footnote ValueExists} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ValueExists Property \line\tx360\tab\fs18\b0{\uldb MsiRegKey Object}{\v MsiRegKey_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Boolean indicating whether the given value exists under the current registry key.  Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ValueExists({\i valueName})} \par{\i object}\line Required. The MsiRegKey object. \par{\i\b valueName}\line Name of the value. \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiRegKey_Key} ${\footnote MsiRegKey.Key} +{\footnote MsiRegKey:Key} K{\footnote Key} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Key Property \line\tx360\tab\fs18\b0{\uldb MsiRegKey Object}{\v MsiRegKey_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The string representation of the key. Read-only. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Key} \par{\i object}\line Required. The MsiRegKey object. \par\fi0\li0{\b Remarks}\par\li180 A possible value of this property would be  {\f1 "HKEY_CLASSES_ROOT\\Software\\Microsoft"}. \page #{\footnote MsiRegKey_RemoveValue} ${\footnote MsiRegKey.RemoveValue} +{\footnote MsiRegKey:RemoveValue} K{\footnote RemoveValue} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RemoveValue Method \line\tx360\tab\fs18\b0{\uldb MsiRegKey Object}{\v MsiRegKey_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The method is used to remove the default or a named value of the   MsiRegKey object. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RemoveValue({\i valueName,value})} \par{\i object}\line Required. The MsiRegKey object. \par{\i\b valueName}\line Optional. Name of the value, default value used if omitted. \par{\i\b value}\line Optional. the value. The value is used only in case of REG_MULTI_SZ registry values. If the value  indicates a registry MULTI_SZ value append or prepend operation (there is an extra null either at the beginning  or at the end of the string list) then only the strings that appear in the passed in value are removed from  the existing registry value. If the value is not specified or the existing registry value is not of type  REG_MULTI_SZ, then the entire value is deleted. \par{\i\b Remarks}\line The function does not return failure if it does not find the value. \page #{\footnote MsiRegKey_RemoveSubKey} ${\footnote MsiRegKey.RemoveSubKey} +{\footnote MsiRegKey:RemoveSubKey} K{\footnote RemoveSubKey} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RemoveSubKey Method \line\tx360\tab\fs18\b0{\uldb MsiRegKey Object}{\v MsiRegKey_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The method is used to remove an empty subkey of the MsiRegKey object. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RemoveSubKey({\i subKey})} \par{\i object}\line Required. The MsiRegKey object. \par{\i\b subKey}\line Required. the string denoting the subkey. \par\fi0\li0{\b Remarks}\par\li180 The function fails if the subkey is not empty ie. if it has values   and/or subkeys. \page #{\footnote MsiRegKey_RemoveSubTree} ${\footnote MsiRegKey.RemoveSubTree} +{\footnote MsiRegKey:RemoveSubTree} K{\footnote RemoveSubTree} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RemoveSubTree Method \line\tx360\tab\fs18\b0{\uldb MsiRegKey Object}{\v MsiRegKey_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The method is used to remove a subkey of the MsiRegKey object. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RemoveSubTree({\i subKey})} \par{\i object}\line Required. The MsiRegKey object. \par{\i\b subKey}\line Required. the string denoting the subkey. \par\fi0\li0{\b Remarks}\par\li180 The function removes the subkey and any subkeys and values below, if present. \page #{\footnote MsiRegKey_Values} ${\footnote MsiRegKey.Values} +{\footnote MsiRegKey:Values} K{\footnote Values} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Values Method \line\tx360\tab\fs18\b0{\uldb MsiRegKey Object}{\v MsiRegKey_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The method returns an enumeration object of all the value names of the  values of the current key. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Values} \par{\i object}\line Required. The MsiRegKey object. \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiRegKey_SubKeys} ${\footnote MsiRegKey.SubKeys} +{\footnote MsiRegKey:SubKeys} K{\footnote SubKeys} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SubKeys Method \line\tx360\tab\fs18\b0{\uldb MsiRegKey Object}{\v MsiRegKey_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The method returns an enumeration object of all the subkey names of the  current key. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SubKeys} \par{\i object}\line Required. The MsiRegKey object. \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiRegKey_CreateChild} ${\footnote MsiRegKey.CreateChild} +{\footnote MsiRegKey:CreateChild} K{\footnote CreateChild} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateChild Method \line\tx360\tab\fs18\b0{\uldb MsiRegKey Object}{\v MsiRegKey_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The method creates a new MsiRegKey object which is a subkey of the  current MsiRegKey object. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateChild({\i subKey})} \par{\i object}\line Required. The MsiRegKey object. \par{\i\b subKey}\line Required. the string denoting subkey under the MsiRegKey object. \par\fi0\li0{\b Remarks}\par\li180 Please note that this function creates a reference to a new MsiRegKey object  that represents the physical registry key. The actual registry key is not opened  or created on the construction of the MsiRegKey object. One has to use the member  methods of the MsiRegKey object to manipulate the physical key itself. \page #{\footnote MsiRegKey_GetSelfRelativeSD} ${\footnote MsiRegKey.GetSelfRelativeSD} +{\footnote MsiRegKey:GetSelfRelativeSD} K{\footnote GetSelfRelativeSD} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetSelfRelativeSD Property \line\tx360\tab\fs18\b0{\uldb MsiRegKey Object}{\v MsiRegKey_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The property returns a stream object containing a self relative security descriptor for  the registry key. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetSelfRelativeSD()} \par{\i object}\line Required. The MsiRegKey object. \par\fi0\li0{\b Remarks}\par\li180 Please note that modifying this stream does not manipulate the security descriptor itself.  Also note that security descriptors may be equivalent in that they represent the same set  of permissions, without being identical binaries. \page #{\footnote MsiMalloc_Object} ${\footnote MsiMalloc Object} K{\footnote MsiMalloc} +{\footnote Class:MsiMalloc} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiMalloc Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \par}\li180 Provides basic memory allocation services for all modules.  This object is exposed only for testing purposes.  The MsiMalloc object is obtained from the MsiServices method  {\uldb GetAllocator}{\v MsiServices_GetAllocator}.  In debug builds, memory blocks are monitored for corruption such as  overwriting bounds and double deletion.  Also in debug builds memory leaks are displayed in dialog boxes.  Stack traces are shown of who allocated the memory. In order to  see these on your machine make sure the following DLLs are on your  path.  In WinNT - imagehlp.dll, dbi.dll and mspdb40.dll  On win95 - mspdb40.dll. !! Talk about diagnostic capabilities here !! \par\li0{\b Methods}\par\li180 {\uldb Alloc}{\v MsiMalloc_Alloc}\line {\uldb Free}{\v MsiMalloc_Free}\line {\uldb SetDebugFlags}{\v MsiMalloc_SetDebugFlags}\line {\uldb GetDebugFlags}{\v MsiMalloc_GetDebugFlags}\line {\uldb CheckAllBlocks}{\v MsiMalloc_CheckAllBlocks}\line {\uldb FCheckBlock}{\v MsiMalloc_FCheckBlock}\line {\uldb GetSizeOfBlock}{\v MsiMalloc_GetSizeOfBlock}\line \page #{\footnote MsiMalloc_Alloc} ${\footnote MsiMalloc.Alloc} +{\footnote MsiMalloc:Alloc} K{\footnote Alloc} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Alloc Method \line\tx360\tab\fs18\b0{\uldb MsiMalloc Object}{\v MsiMalloc_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \par}\li180 Allocates a new memory block and returns its address as a Long. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Alloc({\i byteCount})} \par{\i object}\line Required. The MsiMalloc object. \par{\i\b byteCount}\line Required. Number of bytes to allocate in the block. \par\fi0\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote MsiMalloc_Free} ${\footnote MsiMalloc.Free} +{\footnote MsiMalloc:Free} K{\footnote Free} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Free Method \line\tx360\tab\fs18\b0{\uldb MsiMalloc Object}{\v MsiMalloc_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \par}\li180 Frees a previously allocated memory block. This block must have been  allocated with this allocator object. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Free({\i memoryBlock})} \par{\i object}\line Required. The MsiMalloc object. \par{\i\b memoryBlock}\line Required. Memory block returned from {\uldb Alloc}{\v MsiMalloc_Alloc}. \par\fi0\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote MsiMalloc_SetDebugFlags} ${\footnote MsiMalloc.SetDebugFlags} +{\footnote MsiMalloc:SetDebugFlags} K{\footnote SetDebugFlags} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SetDebugFlags Method \line\tx360\tab\fs18\b0{\uldb MsiMalloc Object}{\v MsiMalloc_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \par}\li180 \tx360\tx720 Sets the debug flags for the debug allocator. Possible flags are:\par \tab 0x1\tab Tells the debug allocator  never to actually free a memory block, but to keep it in the "Free List"  which allows you to more easily tell if the block is being doubly-freed. \par\tab 0x2\tab Logs each memory allocation with the size and address from  where the allocation was called. This is only available when using debug services. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .SetDebugFlags({\i flag})} \par{\i object}\line Required. The MsiMalloc object. \par{\i\b flag}\line Required. Flags. \par\fi0\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote MsiMalloc_GetDebugFlags} ${\footnote MsiMalloc.GetDebugFlags} +{\footnote MsiMalloc:GetDebugFlags} K{\footnote GetDebugFlags} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetDebugFlags Method \line\tx360\tab\fs18\b0{\uldb MsiMalloc Object}{\v MsiMalloc_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \par}\li180 \tx360\tx720 Returns the debug flags for the debug allocator. Possible flags are:\par \tab 0x1\tab Tells the debug allocator  never to actually free a memory block, but to keep it in the "Free List"  which allows you to more easily tell if the block is being doubly-freed. \par\tab 0x2\tab Logs each memory allocation with the size and address from  where the allocation was called. This is only available when using debug services. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetDebugFlags} \par{\i object}\line Required. The MsiMalloc object. \par\fi0\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote MsiMalloc_CheckAllBlocks} ${\footnote MsiMalloc.CheckAllBlocks} +{\footnote MsiMalloc:CheckAllBlocks} K{\footnote CheckAllBlocks} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CheckAllBlocks Method \line\tx360\tab\fs18\b0{\uldb MsiMalloc Object}{\v MsiMalloc_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \par}\li180 \tx360\tx720 Checks all the allocated memory blocks for corruption and returns true  if everything is ok. False otherwise. It will display asserts about  memory blocks which are corrupt if asserts are enabled. This is only available when using debug services. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CheckAllBlocks} \par{\i object}\line Required. The MsiMalloc object. \par\fi0\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote MsiMalloc_FCheckBlock} ${\footnote MsiMalloc.FCheckBlock} +{\footnote MsiMalloc:FCheckBlock} K{\footnote FCheckBlock} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FCheckBlock Method \line\tx360\tab\fs18\b0{\uldb MsiMalloc Object}{\v MsiMalloc_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \par}\li180 \tx360\tx720 Checks the allocated memory block for corruption and returns true  if everything is ok. False otherwise. It will display asserts about  memory blocks which are corrupt if asserts are enabled. This is only available when using debug services. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .FCheckBlock({\i memoryBlock})} \par{\i object}\line Required. The MsiMalloc object. \par{\i\b memoryBlock}\line Required. Memory block allocated through memory allocator. \par\fi0\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote MsiMalloc_GetSizeOfBlock} ${\footnote MsiMalloc.GetSizeOfBlock} +{\footnote MsiMalloc:GetSizeOfBlock} K{\footnote GetSizeOfBlock} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b GetSizeOfBlock Method \line\tx360\tab\fs18\b0{\uldb MsiMalloc Object}{\v MsiMalloc_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \par}\li180 \tx360\tx720 Returns the size of the allocated memory block. Only works on blocks  allocated by the memory allocator. This is only available when using debug services. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .GetSizeOfBlock({\i memoryBlock})} \par{\i object}\line Required. The MsiMalloc object. \par{\i\b memoryBlock}\line Required. Memory block allocated through memory allocator. \par\fi0\li0{\b Remarks}\par\li180 !!Additional notes!!  \page {\uldb GetSizeOfBlock}{\v MsiMalloc_GetSizeOfBlock}\line
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\help\server.rtf ===
{\rtf1\ansi {\fonttbl{\f0\fswiss Arial;}{\f1\fmodern Courier New;}{\f2\fmodern\fcharset2 MS LineDraw;}{\f3\fmodern\fcharset3 Terminal;}} {\colortbl;} \fs20 #{\footnote MsiServer_Object} ${\footnote Msi Server Contents} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Microsoft Installer Server Contents \par}\li180 \par\li0{\b\uldb Design Summary}{\v Server_DesignSummary} \par\li0{\b\uldb Execution Flow}{\v Server_ExecutionFlow} \par\li0{\b\uldb Script Format}{\v Server_ScriptFormat} \par\li0{\b\uldb Script Opcodes}{\v Server_ScriptOpcodes} \par\li0{\b\uldb Deliverables}{\v Server_Deliverables} \page #{\footnote Server_ExecutionFlow} ${\footnote Execution Flow} K{\footnote MSIEXEC; Execution; Flow} +{\footnote Server:Execution} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Installer Execution Flow \par}\li180 This diagram shows how the various objects interact.  It does not indicate how the code is packaged into modules, as most of  the code is shared between the server and client implementation. The script  is not physically sent between processes; only its access is transferred. \par{\f3\fs18 \line  Client operating in User Account  | Server, can operate as an OS service \line                                    |   \line    RPC      \line   Product  Product  Config  Install  Configuration \line   Database Launcher Proxy    |        Server   Database      \line     |       \line                         |              \line       Messages |     \line   UI       Install Script  Config. Install \line   Handler  Engine               |  Execute Manager Engine  \line                |  \line                                  |                  \line    \line     System   Script    System   \line        Services Generate  Script       Services \line                 |          }\page #{\footnote Server_Deliverables} ${\footnote Installer Deliverables} K{\footnote Components; Deliverables; MSIEXEC} +{\footnote Server:Deliverables} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Deliverable Components \par}\li180 The following components will be delivered with each build of the Microsoft Installer.  Because the Microsoft Installer is a cross platform application, separate sets  of components are produced for each platform. \par\li0{\b Core installer components}\par\li180 {\f1 MSISRV.DLL  } system services and DBMS, shared by all other modules, IMsiServices\line {\f1 MSIENG.DLL  } install logic, action processing, IMsiEngine, IMsiExecute, IMsiConfigurationMangaer\line {\f1 MSIHND.DLL  } error handling, dialog management, operates only in user security, IMsiHandler\line {\f1 MSIEXEC.EXE } install server -- local OLE server, maintenance launcher, installable as OS service\line {\f1 INSTALL.EXE } install launcher with product-specific resources, installer for MSI components\line \par\li0{\b Authoring tools}\par\li180 {\f1 MSIAUTO.DLL } OLE automation for core components, ODBC driver for database services\line {\f1 MSIGEN.DLL  } generates installation database from product root\line {\f1 MSIDIFF.DLL } generates installation database from SYSDIFF output\line {\f1 MSIEDIT.EXE } authoring environment, launches tools, edits tables and views\line \page #{\footnote Server_DesignSummary} ${\footnote Server DesignSummary} K{\footnote Design; MSIEXEC} +{\footnote Server:DesignSummary} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Installer Enhancements Design Summary \par}\li180 \par\li0{\b Execution Phases}\par\li180 In order to operate in a secure environment, with the user's privileges locked down,  the installation process is divided into two phases, acquisition where the install  engine interacts with the installation database, the environment and the user to  determine the set of operations required, and execution where the system update  operations take place. The acquistion phase operates with user permissions, as it  generally requires UI such as dialogs, progress, billboards, and error handling.  The execution phase requires full file and registry permissions and updates the  machine's installation configuration database. In a secure system this execution  code is installed as a service. The communication between the two phases is handled  by the IMsiExecute object, which generates a script file during acquisition and  executes the script from with the execution module. Actions which formerly executed  in a single operation, have been divided into the acquisition half which queries the  database to determine the set of operations, and the execution half which is dispatched  from the IMsiExecute object. Generating the script has the following advantages: \line  1. The complete set of operations is successfully determined before any updates are done. \line  2. The set of operations can be treated as a single transaction, allowing rollback. \line  3. The transaction model eliminates concurrency problems by locking out intervening updates. \line  4. The package containing the script can be certified once for all operations. \line  5. Only a single RPC access is required to pass the set of operations. \line  6. Testing and debugging is facilitated by independent generation and execution. \line  7. Installation can be simulated by generation without execution. \line  8. The script file could be used to analyze or resume execution after a crash or power loss. \par\li0{\b Install Action Execution}\par\li180 Install actions typically execute queries against the product database and perform operations  using the fetched data parameters. Instead of directly updating the system, which cannot be done  from a user program in a secure system, the actions must call the Execute method of the engine  with the necessary information packaged in a record object. This is in turn passed to the IMsiExecute  object for streaming into the script file. The script is executed by another IMsiExecute object  in the install server, which dispatches the regenerated records to the appropriate worker functions.  The worker functions are generally associated with corresponding install actions, but may be  shared by multiple actions where appropriate. Additional operations are included in the script for  syncronization purposes, such as notifications, progress parameters, and media change information. \par\li0{\b Module Packaging}\par\li180 The install server, which binds to the configuration manager, is built as a standalone executable  and will be installed as a system service when possible. It creates an execute object to run a script  and creates an engine object to install and remove shared components controlled by other databases.  Being a service means that all UI must be dispatched by RPC to a user process.  We are using IDispatch (OLE automation) for the UI handling and configuration manager requests,  as OLE will marshal this interface across processes. The server must also manage the security  attributes for the OLE RPC connection. The engine and services modules, shared by launchers,  configuration manager, and tools, could eventually be combined into a single DLL to reduce disk space.  We need to invoke the install server  via the command line in a shortcut, add/remove command, or proxy, either by using a separate maintenance  launcher or, preferably, by having an external instance of the install server call the  service instance using the RPC mechanism. \page #{\footnote Server_Using} ${\footnote Using the Install Server} K{\footnote Executable; MSIEXEC} +{\footnote Server:Using} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Using the Install Server \par}\li180 The install server supports the following command-line options: \line\par\pard \trowd\trgaph108\trleft540 \cellx2150\cellx7400 \intbl{\b Option\cell Description\cell}\row \intbl/regserver\cell Q\cell\row \intbl/regnoservice\cell Registers as a standard OLE server even if it is possible to register as a service.\cell\row \intbl/unregister\cell Unregister the current registration.\cell\row \intbl/t <caption>\cell Show test window. Displays a small window with the specified caption. This can be useful to determine when the server is running.\cell\row \intbl/l <scriptfile>\cell List script. Display the opcodes and data contained in the given scriptfile. The output must be redirected to a file.\cell\row \intbl/i <scriptfile>\cell Install from script. \cell\row \intbl/a <featurelist>\cell Add features. Must be used after "/c". Separate feature names with commas.\cell\row \intbl/x <featurelist>\cell Remove features. Must be used after "/c". Separate feature names with commas.\cell\row \intbl/s <featurelist>\cell Q\cell\row \intbl/c <productkey>\cell Configure product. Use in combination with "/a", "/x", or "/s" to configure a product's features.\cell\row \intbl/? or /h\cell Display help.\cell\row \page #{\footnote Server_ScriptFormat} ${\footnote Server ScriptFormat} K{\footnote Script; MSIEXEC} +{\footnote Server:ScriptFormat} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Execution Script Format \par}\li180 The execution script is a file containing a linear sequence of install operations  to be performed, such as file and registry updates, configuration database updates,  UI notifications, and state information for other operations. A binary format is used  instead of text for efficiency, to avoid the need for parsing, and to discourage  manual editing. Each record consists of an opcode, argument count, and an array of  arguments, essentially a serialization of the record objects used by the installer.  Data types supported include NULL, integer, and variable length string and binary data.  All data is stored as 16-bit integers in Intel byte ordering, with the exception of  non-Unicode strings which are padded if necessary to a 16-bit boundary. \par\li0{\b Record Structure}\par\li180 The first 16-bit word of a record contains the opcode in the low byte and the argument  count in the high byte. {\f3\fs18 \line   \line      Argument Count        Operation Code   \line        (high byte)           (low byte)     \line   Each of the arguments specified is preceded by a 16-bit word that specifies the data type  and length of the following argument data. The exact data representation depends upon the type.  The maximum length of an argument is 16,383 characters. If ever a longer argument is required,  the extended type value is placed in the length field followed by a 32-bit word containing the  type bits as the highest bits. Arguments are never null terminated. {\f3\fs18 \line   \line    Data   Length of data in characters, or  \line    type   reserved codes for integer, NULL  \line   \par\li0{\b Script Data Types}\par\li180\tx3000 \line {\b Data type Length encoding} \line Null string (all types) \line 32-bit signed integer 0x4000, integer value \line Null value 0x8000 \line extended size 0xC000, 32-bit length, data array \line Non-DBCS char string lstrlenA(), char array \line DBCS char string lstrlenA() + 0x4000, char array \line Binary stream byte count + 0x8000, byte array \line Unicode string lstrlenW() + 0xC000, char array \page #{\footnote Server_ScriptOpcodes} ${\footnote Server ScriptOpcodes} K{\footnote Script; Opcodes} +{\footnote Server:ScriptOpcodes} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Execution Script Opcodes \par}\li180\tx3000 \line{\b Special Operations} \line{\f1 {\uldb ixoFail}{\v Operation_ixoFail}} \line{\f1 {\uldb ixoNoop}{\v Operation_ixoNoop}} \line{\f1 {\uldb ixoHeader}{\v Operation_ixoHeader}} \line{\f1 {\uldb ixoEnd}{\v Operation_ixoEnd}} \line{\f1 {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}} \line{\f1 {\uldb ixoDialogInfo}{\v Operation_ixoDialogInfo}} \line{\f1 {\uldb ixoRollbackInfo}{\v Operation_ixoRollbackInfo}} \line{\f1 {\uldb ixoInfoMessage}{\v Operation_ixoInfoMessage}} \line{\f1 {\uldb ixoActionStart}{\v Operation_ixoActionStart}} \line{\f1 {\uldb ixoProgressTotal}{\v Operation_ixoProgressTotal}} \line{\f1 {\uldb ixoProgressTick}{\v Operation_ixoProgressTick}} \line{\f1 {\uldb ixoFullRecord}{\v Operation_ixoFullRecord}} \line{\f1 {\uldb ixoDisableRollback}{\v Operation_ixoDisableRollback}} \line{\f1 {\uldb ixoUpdateEstimatedSize}{\v Operation_ixoUpdateEstimatedSize}} \line{\f1 {\uldb ixoInstallProtectedFiles}{\v Operation_ixoInstallProtectedFiles}} \line{\f1 {\uldb ixoInstallSFPCatalogFile}{\v Operation_ixoInstallSFPCatalogFile}} \line \line{\b Configuration Manager Operations} \line{\f1 {\uldb ixoAdvtFlagsUpdate}{\v Operation_ixoAdvtFlagsUpdate}} \line{\f1 {\uldb ixoProductRegister}{\v Operation_ixoProductRegister}} \line{\f1 {\uldb ixoProductUnregister}{\v Operation_ixoProductUnregister}} \line{\f1 {\uldb ixoProductCPDisplayInfoRegister}{\v Operation_ixoProductCPDisplayInfoRegister}} \line{\f1 {\uldb ixoProductCPDisplayInfoUnregister}{\v Operation_ixoProductCPDisplayInfoUnregister}} \line{\f1 {\uldb ixoUserRegister}{\v Operation_ixoUserRegister}} \line{\f1 {\uldb ixoComponentRegister}{\v Operation_ixoComponentRegister}} \line{\f1 {\uldb ixoComponentUnregister}{\v Operation_ixoComponentUnregister}} \line{\f1 {\uldb ixoProductPublish}{\v Operation_ixoProductPublish}} \line{\f1 {\uldb ixoProductUnpublish}{\v Operation_ixoProductUnpublish}} \line{\f1 {\uldb ixoProductPublishUpdate}{\v Operation_ixoProductPublishUpdate}} \line{\f1 {\uldb ixoPackageCodePublish}{\v Operation_ixoPackageCodePublish}} \line{\f1 {\uldb ixoUpgradeCodePublish}{\v Operation_ixoUpgradeCodePublish}} \line{\f1 {\uldb ixoUpgradeCodeUnpublish}{\v Operation_ixoUpgradeCodeUnpublish}} \line{\f1 {\uldb ixoProductPublishClient}{\v Operation_ixoProductPublishClient}} \line{\f1 {\uldb ixoProductUnpublishClient}{\v Operation_ixoProductUnpublishClient}} \line{\f1 {\uldb ixoSourceListPublish}{\v Operation_ixoSourceListPublish}} \line{\f1 {\uldb ixoSourceListAppend}{\v Operation_ixoSourceListAppend}} \line{\f1 {\uldb ixoSourceListUnpublish}{\v Operation_ixoSourceListUnpublish}} \line{\f1 {\uldb ixoFeaturePublish}{\v Operation_ixoFeaturePublish}} \line{\f1 {\uldb ixoFeatureUnpublish}{\v Operation_ixoFeatureUnpublish}} \line{\f1 {\uldb ixoComponentPublish}{\v Operation_ixoComponentPublish}} \line{\f1 {\uldb ixoComponentUnpublish}{\v Operation_ixoComponentUnpublish}} \line \line{\b File and Folder Operations} \line{\f1 {\uldb ixoSetSourceFolder}{\v Operation_ixoSetSourceFolder}} \line{\f1 {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder}} \line{\f1 {\uldb ixoChangeMedia}{\v Operation_ixoChangeMedia}} \line{\f1 {\uldb ixoSetCompanionParent}{\v Operation_ixoSetCompanionParent}} \line{\f1 {\uldb ixoFileCopy}{\v Operation_ixoFileCopy}} \line{\f1 {\uldb ixoFileRemove}{\v Operation_ixoFileRemove}} \line{\f1 {\uldb ixoFolderCreate}{\v Operation_ixoFolderCreate}} \line{\f1 {\uldb ixoFolderRemove}{\v Operation_ixoFolderRemove}} \line{\f1 {\uldb ixoFileBindImage}{\v Operation_ixoFileBindImage}} \line{\f1 {\uldb ixoIconCreate}{\v Operation_ixoIconCreate}} \line{\f1 {\uldb ixoIconRemove}{\v Operation_ixoIconRemove}} \line{\f1 {\uldb ixoTypeLibraryRegister}{\v Operation_ixoTypeLibraryRegister}} \line{\f1 {\uldb ixoTypeLibraryUnregister}{\v Operation_ixoTypeLibraryUnregister}} \line{\f1 {\uldb ixoRegisterBackupFile}{\v Operation_ixoTypeLibraryUnregister}} \line \line{\b Registry Operations} \line{\f1 {\uldb ixoRegAllocateSpace}{\v Operation_ixoRegAllocateSpace}} \line{\f1 {\uldb ixoRegOpenKey}{\v Operation_ixoRegOpenKey}} \line{\f1 {\uldb ixoRegAddValue}{\v Operation_ixoRegAddValue}} \line{\f1 {\uldb ixoRegRemoveValue}{\v Operation_ixoRegRemoveValue}} \line{\f1 {\uldb ixoRegCreateKey}{\v Operation_ixoRegCreateKey}} \line{\f1 {\uldb ixoRegRemoveKey}{\v Operation_ixoRegRemoveKey}} \line{\f1 {\uldb ixoRegSelfReg}{\v Operation_ixoRegSelfReg}} \line{\f1 {\uldb ixoRegSelfUnreg}{\v Operation_ixoRegSelfUnreg}} \line{\f1 {\uldb ixoRegAppIdInfoRegister}{\v Operation_ixoRegAppIdInfoRegister}} \line{\f1 {\uldb ixoRegAppIdInfoUnregister}{\v Operation_ixoRegAppIdInfoUnregister}} \line{\f1 {\uldb ixoRegAppIdInfoRegister64}{\v Operation_ixoRegAppIdInfoRegister64}} \line{\f1 {\uldb ixoRegAppIdInfoUnregister64}{\v Operation_ixoRegAppIdInfoUnregister64}} \line{\f1 {\uldb ixoRegClassInfoRegister}{\v Operation_ixoRegClassInfoRegister}} \line{\f1 {\uldb ixoRegClassInfoUnregister}{\v Operation_ixoRegClassInfoUnregister}} \line{\f1 {\uldb ixoRegClassInfoRegister64}{\v Operation_ixoRegClassInfoRegister}} \line{\f1 {\uldb ixoRegClassInfoUnregister64}{\v Operation_ixoRegClassInfoUnregister}} \line{\f1 {\uldb ixoRegExtensionInfoRegister}{\v Operation_ixoRegExtensionInfoRegister}} \line{\f1 {\uldb ixoRegExtensionInfoUnregister}{\v Operation_ixoRegExtensionInfoUnregister}} \line{\f1 {\uldb ixoRegExtensionInfoRegister64}{\v Operation_ixoRegExtensionInfoRegister}} \line{\f1 {\uldb ixoRegExtensionInfoUnregister64}{\v Operation_ixoRegExtensionInfoUnregister}} \line{\f1 {\uldb ixoRegMIMEInfoRegister}{\v Operation_ixoRegMIMEInfoRegister}} \line{\f1 {\uldb ixoRegMIMEInfoUnregister}{\v Operation_ixoRegMIMEInfoUnregister}} \line{\f1 {\uldb ixoRegMIMEInfoRegister64}{\v Operation_ixoRegMIMEInfoRegister}} \line{\f1 {\uldb ixoRegMIMEInfoUnregister64}{\v Operation_ixoRegMIMEInfoUnregister}} \line{\f1 {\uldb ixoRegProgIdInfoRegister}{\v Operation_ixoRegProgIdInfoRegister}} \line{\f1 {\uldb ixoRegProgIdInfoUnregister}{\v Operation_ixoRegProgIdInfoUnregister}} \line{\f1 {\uldb ixoRegProgIdInfoRegister64}{\v Operation_ixoRegProgIdInfoRegister}} \line{\f1 {\uldb ixoRegProgIdInfoUnregister64}{\v Operation_ixoRegProgIdInfoUnregister}} \line{\f1 {\uldb ixoRegAddRunOnceEntry}{\v Operation_ixoRegAddRunOnceEntry}} \line \line{\b Shortcut Operations} \line{\f1 {\uldb ixoShortcutCreate}{\v Operation_ixoShortcutCreate}} \line{\f1 {\uldb ixoShortcutRemove}{\v Operation_ixoShortcutRemove}} \line \line{\b Ini Operations} \line{\f1 {\uldb ixoIniWriteRemoveValue}{\v Operation_ixoIniWriteRemoveValue}} \line{\f1 {\uldb ixoIniFilePath}{\v Operation_ixoIniFilePath}} \line \line{\b Patch Operations} \line{\f1 {\uldb ixoPatchApply}{\v Operation_ixoPatchApply}} \line{\f1 {\uldb ixoPatchRegister}{\v Operation_ixoPatchRegister}} \line{\f1 {\uldb ixoPatchUnregister}{\v Operation_ixoPatchUnregister}} \line{\f1 {\uldb ixoPatchCache}{\v Operation_ixoPatchCache}} \line \line{\b Font Operations} \line{\f1 {\uldb ixoFontRegister}{\v Operation_ixoFontRegister}} \line{\f1 {\uldb ixoFontUnregister}{\v Operation_ixoFontUnregister}} \line \line{\b Resource Operations} \line{\f1 {\uldb ixoResourceUpdate}{\v Operation_ixoResourceUpdate}} \line \line{\b Database Operations} \line{\f1 {\uldb ixoSummaryInfoUpdate}{\v Operation_ixoSummaryInfoUpdate}} \line{\f1 {\uldb ixoStreamsRemove}{\v Operation_ixoStreamsRemove}} \line{\f1 {\uldb ixoStreamAdd}{\v Operation_ixoStreamAdd}} \line{\f1 {\uldb ixoDatabaseCopy}{\v Operation_ixoDatabaseCopy}} \line{\f1 {\uldb ixoDatabasePatch}{\v Operation_ixoDatabasePatch}} \line \line{\b CustomAction Operations} \line{\f1 {\uldb ixoCustomActionSchedule}{\v Operation_ixoCustomActionSchedule}} \line{\f1 {\uldb ixoCustomActionRollback}{\v Operation_ixoCustomActionRollback}} \line{\f1 {\uldb ixoCustomActionCommit}{\v Operation_ixoCustomActionCommit}} \line \line{\b System Service Operations} \line{\f1 {\uldb ixoServiceControl}{\v Operation_ixoServiceControl}} \line{\f1 {\uldb ixoServiceInstall}{\v Operation_ixoServiceInstall}} \line \line{\b ODBC Operations} \line{\f1 {\uldb ixoODBCInstallDriver}{\v Operation_ixoODBCInstallDriver}} \line{\f1 {\uldb ixoODBCRemoveDriver}{\v Operation_ixoODBCRemoveDriver}} \line{\f1 {\uldb ixoODBCDataSource}{\v Operation_ixoODBCDataSource}} \line{\f1 {\uldb ixoODBCInstallTranslator}{\v Operation_ixoODBCInstallTranslator}} \line{\f1 {\uldb ixoODBCRemoveTranslator}{\v Operation_ixoODBCRemoveTranslator}} \line{\f1 {\uldb ixoODBCDriverManager}{\v Operation_ixoODBCDriverManager}} \line \line{\b Environmental Variables Operations} \line{\f1 {\uldb ixoUpdateEnvironmentStrings}{\v Operation_ixoUpdateEnvironmentStrings}} \line \line{\b ComPlus Operations} \line{\f1 {\uldb ixoComPlusRegister}{\v Operation_ixoComPlusRegister}} \line{\f1 {\uldb ixoComPlusUnregister}{\v Operation_ixoComPlusUnregister}} \line \line{\b Miscellaneous Operations} \line{\f1 {\uldb ixoSecureTransformCache}{\v Operation_ixoSecureTransformCache}} \page #{\footnote Operation_ixoSample} ${\footnote ixoSample Operation} +{\footnote Operation:ixoSample} K{\footnote ixoSample} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoSample Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 !!Description!!  \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } !!Some kind of data!!\line {\f1 Field 2: } !!Some kind of data!! \par\li0\fi0{\b Sequencing Restrictions}\par\li180 !!What operations must be executed before this one??!!  \par\li0\fi0{\b Progress Notifications}\par\li180 !!Are any ActionData or Progress messages sent? What is sent in the ActionData messages??!!  \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 {\f1 imsgError1      MB_ABORTRETRYIGNORE }\line\line {\f1 imsgFatalError  MB_RETRYCANCEL } \par\li0\fi0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote Operation_ixoFail} ${\footnote ixoFail Operation} +{\footnote Operation:ixoFail} K{\footnote ixoFail} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoFail Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 ixoFail is a special opcode used to catch null data in the script. This opcode is never  explicitly used. \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoNoop} ${\footnote ixoNoop Operation} +{\footnote Operation:ixoNoop} K{\footnote ixoNoop} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoNoop Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 This is a special opcode used for commenting out operations. \par\li0\fi0{\b Parameters:}\par\li180 None. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 None. \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoFullRecord} ${\footnote ixoFullRecord Operation} +{\footnote Operation:ixoFullRecord} K{\footnote ixoFullRecord} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoFullRecord Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 This is a special opcode used by the script serializer to indicate the record contains  data in field 0. \par\li0\fi0{\b Parameters:}\par\li180 None. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 None. \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoHeader} ${\footnote ixoHeader Operation} +{\footnote Operation:ixoHeader} K{\footnote ixoHeader} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoHeader Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 The opcode marks the start of a script. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Script signature (integer)\line {\f1 Field 2: } Msi version (integer)\line {\f1 Field 3: } Timestamp (integer)\line {\f1 Field 4: } Language id (integer)\line {\f1 Field 5: } Platform (not currently used)\line {\f1 Field 6: } Script type. One of the following values:\line  {\f1 1 :} Install\line  {\f1 2 :} Rollback\line  {\f1 3 :} Advertise\line {\f1 Field 7 & 8: } Script version. Used to identify incompatible script files.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed before all other operations for a script. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 None, although the ommission of this operation from a script will cause an error. \par\li0\fi0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote Operation_ixoEnd} ${\footnote ixoEnd Operation} +{\footnote Operation:ixoEnd} K{\footnote ixoEnd} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoEnd Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 This opcode marks the end of a script. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Script checksum (integer).\line {\f1 Field 2: } Progress total (integer).  This value represents the total number  of progress ticks to be attributed to the script execution progress bar. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after all other operations for a script. \par\li0\fi0{\b Progress Notifications}\par\li180 Dispatches an ActionDone message. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 None.  \page #{\footnote Operation_ixoInfoMessage} ${\footnote ixoInfoMessage Operation} +{\footnote Operation:ixoInfoMessage} K{\footnote ixoInfoMessage} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoInfoMessage Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 This operation dispatches an {\uldb imtInfo}{\v MsiMessage_Message}  message with the parameters passed to it. \par\li0\fi0{\b Parameters:}\par\li180 Parameters to dispatch in imtInfo message \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 Dispatches an Info message. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 None. \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoActionStart} ${\footnote ixoActionStart Operation} +{\footnote Operation:ixoActionStart} K{\footnote ixoActionStart} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoActionStart Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 This operation designates the start of a new action. It sets the action name used in  progress  messages dispatched by subsequent operations. It also resets any state data set  by previous operations. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Action name (non-localized text)\line {\f1 Field 2: } Action description (localized text)\line {\f1 Field 3: } Action data template (localized text) \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be called before the {\uldb ixoProgressTotal}{\v Operation_ixoProgressTotal}  operation for the new action. \par\li0\fi0{\b Progress Notifications}\par\li180 Dispatches an ActionStart message with the following fields:\par\li360 {\f1 Field 1: } Action name (non-localized text)\line {\f1 Field 2: } Action description (localized text)\line {\f1 Field 3: } Action data template (localized text) \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 None. \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoProductRegister} ${\footnote ixoProductRegister Operation} +{\footnote Operation:ixoProductRegister} K{\footnote ixoProductRegister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoProductRegister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Registers a product with the  {\uldb ConfigurationManager}{\v MsiConfigurationManager_Object}. The parameters required  to register the product that are not included in the parameters below are obtained from  the {\uldb ixoProductInfo}{\v Operation_ixoProductInfo} operation. Most of the information  in this opcode is registered for the use of the Add/Remove control Panel (ARP) \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } UpgradeCode (UpgradeCode property)\line {\f1 Field 2: } Product version string (ProductVersion property)\line {\f1 Field 3: } Help Link (ARPHELPLINK property)\line {\f1 Field 4: } Help Telephone (ARPHELPTELEPHONE property)\line {\f1 Field 5: } Install location (ARPINSTALLLOCATION property)\line {\f1 Field 6: } Install source (SOURCEDIR property)\line {\f1 Field 7: } Publisher (Manufacturer property)\line {\f1 Field 8: } URL for product information(ARPURLINFOABOUT property)\line {\f1 Field 9: } URL for update information (ARPURLUPDATEINFO property)\line {\f1 Field 10: } Prevent app removal from ARP (ARPNOREMOVE property)\line {\f1 Field 11: } Prevent app removal from ARP (ARPNOMODIFY property)\line {\f1 Field 12: } Prevent app repair from ARP (ARPNOREPAIR property)\line {\f1 Field 13: } Authorized CDF prefix (ARPAUTHORIZEDCDFPREFIX property)\line {\f1 Field 14: } Comments (ARPCOMMENTS property)\line {\f1 Field 15: } Contact (ARPCONTACT property)\line {\f1 Field 16: } Readme (ARPREADME property)\line {\f1 Field 17: } Size (ARPSIZE property)\line {\f1 Field 18: } SystemComponent (ARPSYSTEMCOMPONENT property)\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Product key (non-localized text?) \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 {\f1 imsgOpProdRegister, MB_ABORTRETRYIGNORE } \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoSourceListRegisterLastUsed} ${\footnote ixoSourceListRegisterLastUsed Operation} +{\footnote Operation:ixoSourceListRegisterLastUsed} K{\footnote ixoSourceListRegisterLastUsed} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoSourceListRegisterLastUsed Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Sets the last used source for a product. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } SourceProduct - the product code for the product for which the last used source should be set\line {\f1 Field 2: } LastUsedSource - the path to the last used source\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 !!What operations must be executed before this one??!!  \par\li0\fi0{\b Progress Notifications}\par\li180 None.\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 !!To be documented!! \par\li0\fi0{\b Remarks}\par\li180 This op calls {\uldb Conman.RegisterLastUsedSource}{\v MsiConfigurationManager_SetLastUsedSource} source.  \page #{\footnote Operation_ixoSourceListPublish} ${\footnote ixoSourceListPublish Operation} +{\footnote Operation:ixoSourceListPublish} K{\footnote ixoSourceListPublish} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoSourceListPublish Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Publishes sources for a product. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } PatchCode - optional. used if we're publishing to a patch source list\line {\f1 Field 2: } PatchPackageName - optional. used if we're publishing a patch\line {\f1 Field 3: } DiskPromptTemplate - we stick the media table's disk prompt in this template to get our media prompt\line {\f1 Field 4: } PackagePath - relative path to package on media (e.g. "Office\\", if the MSI is in the Office folder on the CD)\line {\f1 Field 5: } NumberOfDisks - how many disks we have\line {\f1 Field 6..N} For each disk there should be an arg with the label and an arg with the media table prompt. Following  this, for each non-media source there should be an arg with the path to the source.\line par\li0\fi0{\b Sequencing Restrictions}\par\li180 !!What operations must be executed before this one??!!  \par\li0\fi0{\b Progress Notifications}\par\li180 None.\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 !!To be documented!! \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoSourceListAppend} ${\footnote ixoSourceListAppend Operation} +{\footnote Operation:ixoSourceListAppend} K{\footnote ixoSourceListAppend} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoSourceListAppend Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Continues publishing sources for a product. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } PatchCode - optional. used if we're publishing to a patch source list\line {\f1 Field 2: } NumberOfMedia - how many disks we have in this record\line {\f1 Field 3..N} For each disk there should be an arg with the label and an arg with the media table prompt. Following  this, for each non-media source there should be an arg with the path to the source.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be called after the {\uldb ixoSourceListPublish}{\v Operation_ixoSourceListPublish} opcode, as this opcode will not remove  existing source registration. \par\li0\fi0{\b Progress Notifications}\par\li180 None.\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 !!To be documented!! \par\li0\fi0{\b Remarks}\par\li180 This opcode is a no-op when un-advertising, as ixoSourceListPublsh removes the entire sourcelist key. \page #{\footnote Operation_ixoSourceListUnpublish} ${\footnote ixoSourceListUnpublish Operation} +{\footnote Operation:ixoSourceListUnpublish} K{\footnote ixoSourceListUnpublish} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoSourceListUnpublish Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Unpublishes sources for a product.. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } PatchCode - optional. used if we're unpublishing a patch source list\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 !!What operations must be executed before this one??!!  \par\li0\fi0{\b Progress Notifications}\par\li180 None.\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 !!To be documented!! \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoProductUnregister} ${\footnote ixoProductUnregister Operation} +{\footnote Operation:ixoProductUnregister} K{\footnote ixoProductUnregister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoProductUnregister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Unregisters a product with the  {\uldb ConfigurationManager}{\v MsiConfigurationManager_Object}. \par\li0\fi0{\b Parameters:}\par\li180 \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Product key (non-localized text?) \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 {\f1 imsgOpProdUnegister, MB_ABORTRETRYIGNORE } \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoProductCPDisplayInfoRegister} ${\footnote ixoProductCPDisplayInfoRegister Operation} +{\footnote Operation:ixoProductCPDisplayInfoRegister} K{\footnote ixoProductCPDisplayInfoRegister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoProductCPDisplayInfoRegister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 registers the product to be included in the add/remove control panel list of products. This operation is used only for parent installs. \par\li0\fi0{\b Parameters:}\par\li180 \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Product key (non-localized text?) \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 {\f1 imsgOpProdUnegister, MB_ABORTRETRYIGNORE } \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoProductCPDisplayInfoUnregister} ${\footnote ixoProductCPDisplayInfoUnregister Operation} +{\footnote Operation:ixoProductCPDisplayInfoUnregister} K{\footnote ixoProductCPDisplayInfoUnregister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoProductCPDisplayInfoUnregister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 unregisters the product from the add/remove control panel list of products. This operation is used only for parent installs. \par\li0\fi0{\b Parameters:}\par\li180 \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Product key (non-localized text?) \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 {\f1 imsgOpProdUnegister, MB_ABORTRETRYIGNORE } \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoProductInfo} ${\footnote ixoProductInfo Operation} +{\footnote Operation:ixoProductInfo} K{\footnote ixoProductInfo} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoProductInfo Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Contains information about the product to which the script file is related. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Product key (non-localized string)\line {\f1 Field 2: } Product name (localized string)\line {\f1 Field 3: } Product's package filename.\line {\f1 Field 4: } Language (integer)\line {\f1 Field 5: } Version (integer)\line {\f1 Field 6: } Assignment (integer). 1 == machine, 0 == user\line {\f1 Field 7: } AdminAssigned (integer). always 0 -- used by the executor\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 This operation must immediately follow the  {\uldb ixoHeader}{\v Operation_ixoHeader} operation in the script file. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 None. \par\li0\fi0{\b Remarks}\par\li180 The version given in field 5 should be generated in the following way from a X.X.X.X version:  The most significant 8 bits of the integer version should equal the integer value of the first field,  the next 8 bits should equal  the next field and the last 16 bits should equal the third field.  The fourth field, if it exists,  should be ignored. \page #{\footnote Operation_ixoUserRegister} ${\footnote ixoUserRegister Operation} +{\footnote Operation:ixoUserRegister} K{\footnote ixoUserRegister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoUserRegister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Registers a user with the  {\uldb ConfigurationManager}{\v MsiConfigurationManager_Object}. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Owner (localized string?)\line {\f1 Field 2: } Company (localized string?)\line {\f1 Field 3: } ProductId (non-localized string) \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Product key (non-localized text?) \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 {\f1 imsgOpUserRegister, MB_ABORTRETRYIGNORE } \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoComponentRegister} ${\footnote ixoComponentRegister Operation} +{\footnote Operation:ixoComponentRegister} K{\footnote ixoComponentRegister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoComponentRegister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Registers a component with the  {\uldb ConfigurationManager}{\v MsiConfigurationManager_Object}. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } ComponentId - the GUID representing the component \line {\f1 Field 2: } KeyPath - the key file or folder representing the component\line {\f1 Field 3: } Component State - the components INSTALLSTATE\line {\f1 Field 4: } ProductKey - the client of this component; if Null then the product key set by ixoProductInfo is used\line {\f1 Field 5: } Disk - the disk number for the component if the component is installed run from source from a removable media\line {\f1 Field 6: } SharedDllRefCount - boolean flag that denotes whether the component's key file is refcounted in the Shared Dll registry.\line {\f1 Fields 7 to N:} Redirected ComponentIds - the IDs for components that should now be redirected to the one being registered\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 !!What operations must be executed before this one??!!  \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData message with the following fields:\line {\f1 Field 1: } Product key (non-localized string)\line {\f1 Field 2: } ComponentId\line {\f1 Field 3: } KeyPath \line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 !!To be documented!! \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoComponentUnregister} ${\footnote ixoComponentUnregister Operation} +{\footnote Operation:ixoComponentUnregister} K{\footnote ixoComponentUnregister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoComponentUnregister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Unregisters a component with the  {\uldb ConfigurationManager}{\v MsiConfigurationManager_Object}. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } ComponentId - the GUID representing the component \line {\f1 Field 2: } ProductKey - the client of this component; if Null then the product key set by ixoProductInfo is used\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 !!What operations must be executed before this one??!!  \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData message with the following fields:\line {\f1 Field 1: } Product key (non-localized string)\line {\f1 Field 2: } ComponentId \line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 !!To be documented!! \par\li0\fi0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote Operation_ixoProgressTotal} ${\footnote ixoProgressTotal Operation} +{\footnote Operation:ixoProgressTotal} K{\footnote ixoProgressTotal} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoProgressTotal Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 This operation sets the total count for progress messages dispatched by subsequent  operations for the current action. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Total tick count (integer)\line {\f1 Field 2: } Progress type. One of two values:\line  {\f1 0:  } Separate progress and action data messages.\line  {\f1 1:  } Use ActionData messages as progress (i.e. increment the progress bar on each ActionData message).\line {\f1 Field 3: } Byte Equivalent.  For each action type, the approximate number of bytes the InstallFiles action  would copy in the time it takes for this action to perform one operation.  When using ActionData messages for  progress, the progress bar is incremented by the Byte Equivalent value each time an ActionData message is received.  Note: the Byte Equivalent value is related to the InstallFiles byte transfer rate so that the Installer can use  this relationship to approximate the anticipated total time required for the entire install. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be called after the {\uldb ixoActionStart}{\v Operation_ixoActionStart} operation  for the current action. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 None. \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoProgressTick} ${\footnote ixoProgressTick Operation} +{\footnote Operation:ixoProgressTick} K{\footnote ixoProgressTick} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoProgressTick Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 This operation performs 1 progress message operation on behalf of the current action. \par\li0\fi0{\b Parameters:}\par\li180 \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 None. \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoSetSourceFolder} ${\footnote ixoSetSourceFolder Operation} +{\footnote Operation:ixoSetSourceFolder} K{\footnote ixoSetSourceFolder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoSetSourceFolder Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 This operation sets the source folder used by subsequent operations. The value set by  operation is valid until the next ixoSetSourceFolder or  {\uldb ixoActionStart}{\v Operation_ixoActionStart} operation. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Full path of folder (localized text)\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed before any operations using the source folder since the last  {\uldb ixoActionStart}{\v Operation_ixoActionStart} operation. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 !! what errors can be dispatched?? !! \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoSetTargetFolder} ${\footnote ixoSetTargetFolder Operation} +{\footnote Operation:ixoSetTargetFolder} K{\footnote ixoSetTargetFolder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoSetTargetFolder Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 This operation sets the target folder used by subsequent operations. The value set by  operation is valid until the next ixoSetTargetFolder or  {\uldb ixoActionStart}{\v Operation_ixoActionStart} operation. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } String or integer. If a string, the full path of the folder (localized text).  If an integer, the CSIDL_* value corresponding to a shell folder. These values are defined in  the shlobj.h file in the Win32 headers. (integer).\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed before any operations using the target folder since the last  {\uldb ixoActionStart}{\v Operation_ixoActionStart} operation. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 !! what errors can be dispatched?? !! \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoChangeMedia} ${\footnote ixoChangeMedia Operation} +{\footnote Operation:ixoChangeMedia} K{\footnote ixoChangeMedia} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoChangeMedia Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Sets the media and cabinet files to use in subsequent  {\uldb ixoFileCopy}{\v Operation_ixoFileCopy} operations. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Media volume label.  This is the label associated with the volume (as returned by the GetVolumeInformation API),  and is used to ensure that the proper volume is in the drive.\line {\f1 Field 2: } Media prompt (localized text).  This field should represent the source disk name, as visible to the user  on the printed disk label. If the source volume is a removable drive (i.e. floppy or CD), and the  current disk's volume label does not match the value given in field 1, a dialog incorporating the string given in this field  will be displayed, prompting the user to enter the proper disk.\line {\f1 Field 3: } Media cabinet. If this cabinet is located in a stream of the module, this value is the stream name.  If the cabinet is a seperate file, this value is the full path to the file.\line {\f1 Field 4: } Bytes per tick of progress messages (integer)\line {\f1 Field 5: } Copier type. One of the following values:\line  {\f1 ictFileCopier          = 0 :} copy an uncompressed file.\line  {\f1 ictCabinetCopier       = 1 :} copy a compressed file from a cabinet.\line  {\f1 ictStreamCabinetCopier = 2 :} copy a compressed file from a cabinet stored as a stream within the install database.\line {\f1 Field 6: } Full path to the install database file containing cabinet file in a stream.  Not required if cabinet file isn't located in a stream, or if copying only uncompressed files. (non-localized text) \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 See the description of field 2 (above). \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoSetCompanionParent} ${\footnote ixoSetCompanionParent Operation} +{\footnote Operation:ixoCompanionParent} K{\footnote ixoSetCompanionParent} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoSetCompanionParent Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Signifies that the next ixoFileCopy operation involves a "companion" file,  i.e. a file whose installation status is dependent on the version and language  of a "parent" file.  The ixoSetCompanionParent operation specifies the full path,  version, and language of the parent.  Thus, when the subsequent ixoFileCopy  operation is executed, the path, version, and language of the parent file will  be checked to determine whether the companion file should be installed or not. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Parent Path: absolute path to the parent file.\line {\f1 Field 2: } Parent Name: filename of the parent file.\line {\f1 Field 3: } Parent Version: version string of the parent file, as found in the {\b Version} field of the {\uldb File}{\v _msi_File_Table@msi.hlp} table.\line {\f1 Field 4: } Parent language: language string of the parent file, as found in the {\b Language} field of the {\uldb File}{\v _msi_File_Table@msi.hlp} table.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 None. \page #{\footnote Operation_ixoInstallSFPCatalogFile} ${\footnote ixoInstallSFPCatalogFile Operation} +{\footnote Operation:ixoInstallSFPCatalogFile} K{\footnote ixoInstallSFPCatalogFile} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoInstallSFPCatalogFile Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Install a system file protection catalog file \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Catalog file name. \line {\f1 Field 2: } Binary blob containing catalog.\line {\f1 Field 3: } Comma delimited list of catalogs this one depends on. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed before {\uldb ixoFileCopy}{\v Operation_ixoFileCopy}. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Catalog file name \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 !!To be documented!! \par\li0\fi0{\b Remarks}\par\li180 If the catalog binary blob is empty, the specified catalog name will be deleted.  This is used for rollback, and future features for uninstalling catalogs. \page #{\footnote Operation_ixoFileCopy} ${\footnote ixoFileCopy Operation} +{\footnote Operation:ixoFileCopy} K{\footnote ixoFileCopy} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoFileCopy Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Copies a compressed file from a cabinet, or an uncompressed file from a source directory. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Source file identifier. Name of file located in the folder set by the  {\uldb ixoSetSourceFolder}{\v Operation_ixoSetSourceFolder} operation when copying  uncompressed files, or cabinet identifier when copying compressed files (localizable). \line {\f1 Field 2: } Destination file name. File will be copied to the folder set by the  {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder} operation (localizable). \line {\f1 Field 3: } Copy attributes (integer) - bit flags, defined as follows:\line   {\f1 0: iffReadOnly :} Set the ReadOnly bit in the destination file.\line   {\f1 1: iffHidden   :} Set the Hidden bit in the destination file.\line   {\f1 2: iffSystem   :} Set the System bit in the destination file.\line   {\f1 3: iffReserved :} must be zero.\line   {\f1 4: iffVital    :} Vital file.  If any error occurs at copy time (i.e. source file cannot    be located), the 'Ignore' button on the resulting dialog will be suppressed.\line {\f1 Field 4: } File size (integer)\line {\f1 Field 5: } Version string, as found in the {\b Version} field of the {\uldb File}{\v _msi_File_Table@msi.hlp} table.\line {\f1 Field 6: } Language string, as found in the {\b Language} field of the {\uldb File}{\v _msi_File_Table@msi.hlp} table.\line {\f1 Field 7: } Install mode (integer) - bit flags, defined as follows:\line   {\f1  0: icmRunFromSource              :} File should be run from source image (i.e. don't copy even if icmInstallEnabled bit is on) -\line    {\f1                                    } this bit allows the ixoFileCopy operation to log files that are RunFromSource, even though\line   {\f1                                    } it won't copy them.\line   {\f1  1: Reserved                      :} Must be zero.\line   {\f1  2: icmRemoveSource               :} delete the source file after copying (or simply move the file if possible).\line   {\f1  2-15: Reserved                   :} must be zero.\line   {\f1 16: icmInstallEnabled             :} Enables install/overwrite.  No file copy will occur if this bit is clear, regardless of\line   {\f1                                    } any other bit setting.\line   {\f1 17: icmOverwriteNone              :} Install only if no existing file is present (never overwrite).\line   {\f1 18: icmOverwriteOlderVersions     :} Overwrite older file versions.\line   {\f1 19: icmOverwriteEqualVersions     :} Overwrite equal file versions.\line   {\f1 20: icmOverwriteDifferingVersions :} Overwrite any file with a differing version.\line   {\f1 21: icmOverwriteCorruptedFiles    :} Overwrite corrupt files (i.e. checksum failure).\line   {\f1 22: icmOverwriteAllFiles          :} Overwrite all files, regardless of version.\line {\f1 Field 8: } Bytes per tick - the number of bytes to be copied between each progress message tick.\line {\f1 Field 9: } IsCompressed (Boolean): True if the file is compressed in a cabinet.\line {\f1 Field 10: } IMsiData object containing "self-relative" Win32 security descriptor.  Empty provides no security.\line {\f1 Field 11: } VerifyMedia: If true, and if the source file resides on removable media, verify that the source volume is present  before attempting the file copy.  If source volume is not present, a dialog will prompt the user to insert the appropriate disk.\line {\f1 Field 12: } Vital patches: count of patches for this file that are considered "vital."\line {\f1 Field 12: } Total patches: total count of patches for this file.\line {\f1 Field 13: } Patch headers: a variable number of patch headers, one for each patch to be applied to this file. These are retrieved from  the Header column of the Patch table, and used to test if a patch will be successful or not.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder}.  When copying uncompressed files, must be executed after  {\uldb ixoSetSourceFolder}{\v Operation_ixoSetSourceFolder}.  When copying compressed files, must be executed after  {\uldb ixoChangeMedia}{\v Operation_ixoChangeMedia}. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Source file name\line  {\f1 Field 6: } File size\line {\f1 Field 9: } Target folder \par\li180 Progress message every time a number of bytes equal to the 8th parameter is copied.  The progress record contains the following fields:\par\li360 {\f1 Field 1: } Total number of units for progress. This value is set by the  {\uldb ixoProgressTotal}{\v Operation_ixoProgressTotal} operation.\line {\f1 Field 2: } Number of units (bytes) copied so far. This value is for all files copied  since the last {\uldb ixoActionStart}{\v Operation_ixoActionStart} operation. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 An error message box will be presented if the source file cannot be located in the folder set by the last   {\uldb ixoSetSourceFolder}{\v Operation_ixoSetSourceFolder} operation, or if no disk is found in the  drive associated with the source volume (assuming removable media). \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoFileRemove} ${\footnote ixoFileRemove Operation} +{\footnote Operation:ixoFileRemove} K{\footnote ixoFileRemove} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoFileRemove Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Remove a file. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 2: } File name. File is assumed to exist in the folder set by the  {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder} operation. (localized text?) \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder}. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } File name\line {\f1 Field 9: } Folder \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 !!To be documented!! \par\li0\fi0{\b Remarks}\par\li180 If the removal of the file leaves the folder empty, and the folder is registered  with the Configuration Manager, the folder is deleted as well. \page #{\footnote Operation_ixoStreamsRemove} ${\footnote ixoStreamsRemove Operation} +{\footnote Operation:ixoStreamsRemove} K{\footnote ixoStreamsRemove} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoStreamsRemove Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } \line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 !!To be documented!! \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoStreamAdd} ${\footnote ixoStreamAdd Operation} +{\footnote Operation:ixoStreamAdd} K{\footnote ixoStreamAdd} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoStreamAdd Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Full path to the storage file\line {\f1 Field 2: } Stream name to create/replace\line {\f1 Field 3: } Stream data to place. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 !!To be documented!! \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoDatabaseCopy} ${\footnote ixoDatabaseCopy Operation} +{\footnote Operation:ixoDatabaseCopy} K{\footnote ixoDatabaseCopy} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoDatabaseCopy Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Caches the product database in %WINDOWS%\MSI \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Full path to the database\line {\f1 Field 2: } Product code\line {\f1 Field 3: } Cabinet streams. This is a semicolon-delimited list of streams  that should be dropped from the database when it is cached\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 !!To be documented!! \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoDatabasePatch} ${\footnote ixoDatabasePatch Operation} +{\footnote Operation:ixoDatabasePatch} K{\footnote ixoDatabasePatch} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoDatabasePatch Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Patchs the product database in %WINDOWS%\MSI \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Full path to the database\line {\f1 Field 2-n: } Transform to be applied and persisted to database package. The transform is stored as binary data.  The transforms are applied in the order they are listed in the parameter list.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 !!To be documented!! \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoFileUndoRebootReplace} ${\footnote ixoFileUndoRebootReplace Operation} +{\footnote Operation:ixoFileUndoRebootReplace} K{\footnote ixoFileUndoRebootReplace} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoFileUndoRebootReplace Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 This operation "un-schedules" a file for deletion or rename on reboot. When a file is in use and an attempt  is made to delete or copy over that file, the operation is scheduled to occur on reboot. This operation is  written to the rollback script so that if the installation is rolled back before a reboot occurs, the operation  will not take place.  This operation should only exist in a rollback script. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Full path of file to be deleted or renamed.\line {\f1 Field 2: } Null if file is to be deleted, or full path of file to rename original file to.\line {\f1 Field 3: } Type of operation. 0 for Win9X, 1 for WinNT. On Win9X, reboot operation are written to %windows%\\wininit.ini.  On WinNT, they are written to the registry value HKLM\\SYSTEM\\Control\\CurrentControlSet\\Session Manager\\[PendingFileRenameOperations]. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoFolderCreate} ${\footnote ixoFolderCreate Operation} +{\footnote Operation:ixoFolderCreate} K{\footnote ixoFolderCreate} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoFolderCreate Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Creates a folder. If the folder does not already exist, it is registered with the  {\uldb ConfigurationManager}{\v MsiConfigurationManager_Object} using the  {\uldb RegisterFolder}{\v MsiConfigurationManager_RegisterFolder} method. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Folder. Full path of the folder to be created. (localized text)\line {\f1 Field 2: } Foreign. True if this is a foreign (i.e. explicitly authored) folder, false otherwise.\line {\f1 Field 3: } IMsiData object containing "self-relative" Win32 security descriptor.  Empty provides no security.  \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Folder \line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 !!To be documented!! \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoFolderRemove} ${\footnote ixoFolderRemove Operation} +{\footnote Operation:ixoFolderRemove} K{\footnote ixoFolderRemove} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoFolderRemove Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Removes a folder if it is empty. If the folder is removed, it is unregistered with the  {\uldb ConfigurationManager}{\v MsiConfigurationManager_Object} using the  {\uldb UnregisterFolder}{\v MsiConfigurationManager_UnregisterFolder} method. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Folder. Full path of the folder to be created. (localized text)\line {\f1 Field 2: } Foreign. True if this is a foreign (i.e. explicitly authored) folder, false otherwise. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Folder \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 !! to be documented !! \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoRegAllocateSpace} ${\footnote ixoRegAllocateSpace Operation} +{\footnote Operation:ixoRegAllocateSpace} K{\footnote ixoRegAllocateSpace} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegAllocateSpace Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 This operation sets the free space available in the registry. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Space: (integer) the required free registry space in KB \par\li360 \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 None. \par\li0\fi0{\b Remarks}\par\li180 This operation is a noop on Win9X. \page #{\footnote Operation_ixoRegOpenKey} ${\footnote ixoRegOpenKey Operation} +{\footnote Operation:ixoRegOpenKey} K{\footnote ixoRegOpenKey} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegOpenKey Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 This operation sets the registry key to use in subsequent operations using registry  keys. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Root key: (integer)\par\li360 {\f1 0, rrkClassesRoot:  HKEY_CLASSES_ROOT}\line {\f1 1, rrkCurrentUser:  HKEY_CURRENT_USER}\line {\f1 2, rrkLocalMachine: HKEY_LOCAL_MACHINE}\line {\f1 3, rrkUsers:        HKEY_USERS}\par\li180 {\f1 Field 2: } Registry key (non-localized text?)\line {\f1 Field 3: } IMsiData object containing "self-relative" Win32 security descriptor.  Empty provides no security. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 None. \par\li0\fi0{\b Remarks}\par\li180 This operation only sets the value to use in future operations. It doesn't attempt  to open or read the specified registry key. \page #{\footnote Operation_ixoRegAddValue} ${\footnote ixoRegAddValue Operation} +{\footnote Operation:ixoRegAddValue} K{\footnote ixoRegAddValue} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegAddValue Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Write a value to the registry key opened with  {\uldb ixoRegOpenKey}{\v Operation_ixoRegOpenKey}. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Value name (non-localized text?)\line {\f1 Field 2: } Value data (localized text?)\line The value data is a string. The following registry types are supported - \line {\f1 REG_DWORD: } The string represents a decimal number and is prefixed by {\b # }. \line {\f1 REG_BINARY: } The string represents a binary sequence and is prefixed by {\b #x }. \line {\f1 REG_EXPAND_SZ: } The string represents an expandable string and is prefixed by {\b #% }. \line {\f1 REG__SZ: } The string represents the string to be written. If the string value begins with # then it is prefixed by another {\b # }. \line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after {\uldb ixoRegOpenKey}{\v Operation_ixoRegOpenKey}. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Registry key (non-localized text?)\line {\f1 Field 2: } Value name (non-localized text?)\line {\f1 Field 3: } Value data (localized text?) \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 {\f1 idbgOpOutOfSequence, MB_OK  } \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoRegRemoveValue} ${\footnote ixoRegRemoveValue Operation} +{\footnote Operation:ixoRegRemoveValue} K{\footnote ixoRegRemoveValue} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegRemoveValue Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Deletes a value from the registry key opened with  {\uldb ixoRegOpenKey}{\v Operation_ixoRegOpenKey}. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Value name (non-localized text?)\line {\f1 Field 2: } Optional value data (localized text?)\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after {\uldb ixoRegOpenKey}{\v Operation_ixoRegOpenKey}. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Registry key (non-localized text?)\line {\f1 Field 2: } Value name (non-localized text?) \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoRegRemoveKey} ${\footnote ixoRegRemoveKey Operation} +{\footnote Operation:ixoRegRemoveKey} K{\footnote ixoRegRemoveKey} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegRemoveKey Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Deletes an key and all its values/ subkeys from the registry. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Registry key (non-localized text?) \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after {\uldb ixoRegOpenKey}{\v Operation_ixoRegOpenKey}. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Registry key (non-localized text?)\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 {\f1 idbgOpOutOfSequence, MB_OK  } \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoRegCreateKey} ${\footnote ixoRegCreateKey Operation} +{\footnote Operation:ixoRegCreateKey} K{\footnote ixoRegCreateKey} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegCreateKey Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Creates a key, if absent. \par\li0\fi0{\b Parameters:}\par\li180 \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after {\uldb ixoRegOpenKey}{\v Operation_ixoRegOpenKey}. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Registry key (non-localized text?)\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 {\f1 idbgOpOutOfSequence, MB_OK  } \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoRegSelfReg} ${\footnote ixoRegSelfReg Operation} +{\footnote Operation:ixoRegSelfReg} K{\footnote ixoRegSelfReg} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegSelfReg Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Calls the self registration function of a module. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Module file name. File is assumed to exist in the folder set by the  {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder} operation. (localized text?)\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder}. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Module name (localized text?)\line {\f1 Field 2: } Folder containing module (localized text?) \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 {\f1 idbgOpOutOfSequence,  MB_OK  }\line {\f1 imsgSelfRegModulesFailed, MB_OK  } \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoRegSelfUnreg} ${\footnote ixoRegSelfUnreg Operation} +{\footnote Operation:ixoRegSelfUnreg} K{\footnote ixoRegSelfUnreg} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegSelfUnreg Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Calls the self unregistration function of a module. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Module file name. File is assumed to exist in the folder set by the  {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder} operation. (localized text?)\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder}. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Module name (localized text?)\line {\f1 Field 2: } Folder containing module (localized text?) \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 {\f1 idbgOpOutOfSequence,  MB_OK  }\line {\f1 imsgSelfUnregModulesFailed, MB_OK  } \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoIniWriteRemoveValue} ${\footnote ixoIniWriteRemoveValue Operation} +{\footnote Operation:ixoIniWriteRemoveValue} K{\footnote ixoIniWriteRemoveValue} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoIniWriteRemoveValue Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Writes or removes a value from a .INI file. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } .INI section to modify (non-localized text)\line {\f1 Field 2: } .INI key to modify (non-localized text)\line {\f1 Field 3: } Value to write. This value is ignored when the Action  parameter is iifIniRemoveLine.\line {\f1 Field 4: } Action to take. One of the following values: \line{\f1  iifIniAddLine    =0 }- Creates/Updates .INI entry \line{\f1  iifIniCreateLine =1 }- Creates .INI entry only if absent \line{\f1  iifIniRemoveLine =2 }- Deletes .INI entry \line{\f1  iifIniAddTag     =3 }- Creates/ Appends a new comma separated tag(value) to a .INI entry \line{\f1  iifIniRemoveTag  =4 }- Deletes a tag from a .INI entry \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after the {\uldb ixoIniFilePath}{\v Operation_ixoIniFilePath}  operation. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } .INI file name\line {\f1 Field 2: } .INI section\line {\f1 Field 3: } .INI key\line {\f1 Field 4: } Value \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 !!To be documented!! \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoIniFilePath} ${\footnote ixoIniFilePath Operation} +{\footnote Operation:ixoIniFilePath} K{\footnote ixoIniFilePath} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoIniFilePath Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Specifies the .INI file to modify in subsequent  {\uldb ixoIniWriteRemoveValue}{\v Operation_ixoIniWriteRemoveValue} operations. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } .INI file name.\line {\f1 Field 2: } Folder containing .INI file.  This value may be left NULL to use the  Windows directory. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 !!To be documented!! \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoPatchApply} ${\footnote ixoPatchApply Operation} +{\footnote Operation:ixoPatchApply} K{\footnote ixoPatchApply} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoPatchApply Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Applies a patch to an existing file. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Identifier for patch in the cabinet file set by  {\uldb ixoChangeMedia}{\v Operation_ixoChangeMedia}.\line {\f1 Field 2: } Name of target file to patch. Either a full path or the name of a file in the folder set by  {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder}.\line {\f1 Field 3: } Size of patch file.\line {\f1 Field 4: } Size of target file.\line {\f1 Field 5: } Bytes per tick of progress messages.\line {\f1 Field 6: } Boolean, always set to 1.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be after the {\uldb ixoFileCopy}{\v Operation_ixoFileCopy} operation for the target file. \par\li0\fi0{\b Progress Notifications}\par\li180 Same as {\uldb ixoFileCopy}{\v Operation_ixoFileCopy}. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoPatchRegister} ${\footnote ixoPatchRegister Operation} +{\footnote Operation:ixoPatchRegister} K{\footnote ixoPatchRegister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoPatchRegister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Registers a patch package with a product.  This registration is used during subsequent configurations  of the product to find the patch package. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } GUID representing this particular patch package.\line {\f1 Field 2: } Name of patch package.\line {\f1 Field 3: } Source list for patch package.  Same format as the SOURCELIST property.\line {\f1 Field 4: } List of transforms from the patch package that are actually used for this product.  Same format as the TRANSFORMS property.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoPatchUnregister} ${\footnote ixoPatchUnregister Operation} +{\footnote Operation:ixoPatchUnregister} K{\footnote ixoPatchUnregister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoPatchUnregister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Unregisters a patch package. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } GUID representing this particular patch package.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoPatchCache} ${\footnote ixoPatchCache Operation} +{\footnote Operation:ixoPatchCache} K{\footnote ixoPatchCache} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoPatchCache Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Copies a patch package to the %windows%\installer directory for future use during maintenance mode installs  of the patched product. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } GUID representing this particular patch package.\line {\f1 Field 2: } Path to the patch package to cache.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoDialogInfo} ${\footnote ixoDialogInfo Operation} +{\footnote Operation:ixoDialogInfo} K{\footnote ixoDialogInfo} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoDialogInfo Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 This operation dispatches an {\uldb imtCommonData}{\v MsiMessage_Message}  message with the parameters passed to it. \par\li0\fi0{\b Parameters:}\par\li180 Parameters to dispatch in imtCommonData message \par\li0\fi0{\b Sequencing Restrictions}\par\li180 This operation should be executed before any operations sending messages to the UI. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 None. \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoRollbackInfo} ${\footnote ixoRollbackInfo Operation} +{\footnote Operation:ixoRollbackInfo} K{\footnote ixoRollbackInfo} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRollbackInfo Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Passes rollback information to the script executor. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Reserved\line {\f1 Field 2: } Rollback action title. Passed in field 1 of ActionStart message  when performing rollback.\line {\f1 Field 3: } Rollback action description. Passed in field 2 of ActionStart message  when performing rollback.\line {\f1 Field 4: } Rollback action data template. Passed in field 3 of ActionStart message  when performing rollback.\line {\f1 Field 5: } Rollback cleanup action title. Passed in field 1 of ActionStart message  when removing backup files.\line {\f1 Field 6: } Rollback cleanup action description. Passed in field 2 of ActionStart message  when removing backup files.\line {\f1 Field 7: } Rollback cleanup action data template. Passed in field 3 of ActionStart message  when removing backup files.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 None. \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoDisableRollback} ${\footnote ixoDisableRollback Operation} +{\footnote Operation:ixoDisableRollback} K{\footnote ixoDisableRollback} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoDisableRollback Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 This operation disables rollback by stopping rollback processing for the script  and marking the current rollback script to not run. \par\li0\fi0{\b Parameters:}\par\li180 None. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 None. \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoUpdateEstimatedSize} ${\footnote ixoUpdateEstimatedSize Operation} +{\footnote Operation:ixoUpdateEstimatedSize} K{\footnote ixoUpdateEstimatedSize} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b UpdateEstimatedSize Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 This operation updates the EstimatedSize value under the Product's Uninstall key.  This value  represents the estimate amount of disk space, in KB, that the application is currently  consuming on the user's system. \par\li0\fi0{\b Parameters:}\par\li180 None. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 None. \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoInstallProtectedFiles} ${\footnote ixoInstallProtectedFiles Operation} +{\footnote Operation:ixoInstallProtectedFiles} K{\footnote ixoInstallProtectedFiles} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b InstallProtectedFiles Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 This operation scans the internal "file status" cache for any files that were scheduled for installation by InstallFiles, MoveFiles, etc.  yet couldn't be installed because they are on the Win2000 System File Protection list.  InstallProtectedFiles then calls  the Win2000 API SfcInstallProtectedFiles to actually install these files. \par\li0\fi0{\b Parameters:}\par\li180 None. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 None. \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoRegAddRunOnceEntry} ${\footnote ixoRegAddRunOnceEntry Operation} +{\footnote Operation:ixoRegAddRunOnceEntry} K{\footnote ixoRegAddRunOnceEntry} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegAddRunOnceEntry Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 This operation writes a command to the per-machine RunOnce registry key. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Name of the RunOnce value.\line {\f1 Field 1: } Command-line to be run at next logon.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 None. \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoFontRegister} ${\footnote ixoFontRegister Operation} +{\footnote Operation:ixoFontRegister} K{\footnote ixoFontRegister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoFontRegister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Registers a font with the system. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Font title (localized text?)\line {\f1 Field 2: } Font file name. File is assumed to exist in the folder set by the  {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder} operation, or in the default  font folder if ixoSetTargetFolder has not been executed since the last  {\uldb ixoActionStart}{\v Operation_ixoActionStart} operation. (localized text?) \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following field:\par\li360 {\f1 Field 1: } Font title (localized text?) \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 {\f1 imsgOpRegFont, MB_OK  } \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoFontUnregister} ${\footnote ixoFontUnregister Operation} +{\footnote Operation:ixoFontUnregister} K{\footnote ixoFontUnregister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoFontUnregister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Unregisters a font with the system. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Font title (localized text?)\line {\f1 Field 2: } Font file name. Not used by this operation. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Font title (localized text?) \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 {\f1 idbgOpOutOfSequence,  MB_OK  }\line {\f1 imsgOpUnregFont, MB_OK  } \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoResourceUpdate} ${\footnote ixoResourceUpdate Operation} +{\footnote Operation:ixoResourceUpdate} K{\footnote ixoResourceUpdate} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoResourceUpdate Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Obsolete.  No longer supported. \page #{\footnote Operation_ixoFileBindImage} ${\footnote ixoFileBindImage Operation} +{\footnote Operation:ixoFileBindImage} K{\footnote ixoFileBindImage} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoFileBindImage Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Binds and executable image. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } File name. File is assumed to exist in the folder set by the  {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder} operation. (localized text?)\line {\f1 Field 2: } Paths. A list of ; delimited paths that represent  the paths to be searched for the import DLLS. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder}. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } File name (localized text?)\line {\f1 Field 2: } Folder containing file (localized text?) \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 {\f1 idbgOpOutOfSequence,  MB_OK  }\line !! Others to be documented !! \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoComponentConfigure} ${\footnote ixoComponentConfigure Operation} +{\footnote Operation:ixoComponentConfigure} K{\footnote ixoComponentConfigure} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoComponentConfigure Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 {\b Not yet implemented. } \par\li0\fi0{\b Parameters:}\par\li180 !!To be documented!! \par\li0\fi0{\b Sequencing Restrictions}\par\li180 !!What operations must be executed before this one??!!  \par\li0\fi0{\b Progress Notifications}\par\li180 !!Are any ActionData or Progress messages sent? What is sent in the ActionData messages??!!  \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 !! to be documented !! \par\li0\fi0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote Operation_ixoSummaryInfoUpdate} ${\footnote ixoSummaryInfoUpdate Operation} +{\footnote Operation:ixoSummaryInfoUpdate} K{\footnote ixoSummaryInfoUpdate} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoSummaryInfoUpdate Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 This operation updates the {\uldb Summary Information Stream}{\v _msi_Summary_Information_Stream@msi.hlp}  of the Msi package. This operation is normally used  during a network install. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Package. Full path to the .msi package.\line {\f1 Field 2: } Last update. This value is used to update the  {\uldb Last Saved Time/Date Summary Property}{\v _msi_Last_Saved_Time_Date_Summary_Property@msi.hlp}.  Not currently set.\line {\f1 Field 3: } Last author. UserName of user performing install. Used to update the  {\uldb Last Saved By Summary Property}{\v _msi_Last_Saved_By_Summary_Property@msi.hlp}.\line {\f1 Field 4: } Install date. The time the network image was created, usually the current date and time.  This is an integer in MsiDate format. This value is used to update the  {\uldb Last Printed Summary Property}{\v _msi_Last_Printed_Property@msi.hlp}.\line {\f1 Field 5: } Source type. Integer value specifying the source type of the image. Used to update the  {\uldb MSI Source Type Summary Property}{\v _msi_MSI_Source_Type_Summary_Property@msi.hlp}.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after the Msi package has been copied to the network image. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 !! to be documented !! \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoReserved6} ${\footnote ixoReserved6 Operation} +{\footnote Operation:ixoReserved6} K{\footnote ixoReserved6} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoReserved6 Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Reserved for future use. \page #{\footnote Operation_ixoPackageCodePublish} ${\footnote ixoPackageCodePublish Operation} +{\footnote Operation:ixoPackageCodePublish} K{\footnote ixoPackageCodePublish} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoPackageCodePublish Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Publishes the package code. Used by patching/upgrades to republish the package code  when the package changes. \par\li0\fi0{\b Parameters:}\par\li180 This operation takes 1 argument.\line {\f1 Field 1: } Package key. The package GUID.\line ...\line ...\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Product key\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoProductPublishUpdate} ${\footnote ixoProductPublishUpdate Operation} +{\footnote Operation:ixoProductPublishUpdate} K{\footnote ixoProductPublishUpdate} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoProductPublishUpdate Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Re-publishes the product name and version.  Used during QFE-style patches and upgrades. \par\li0\fi0{\b Parameters:}\par\li180 This operation takes 1 argument.\line None. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoUpgradeCodePublish} ${\footnote ixoUpgradeCodePublish Operation} +{\footnote Operation:ixoUpgradeCodePublish} K{\footnote ixoUpgradeCodePublish} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoUpgradeCodePublish Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Publishes the product code under the appropriate Upgrade Code key. \par\li0\fi0{\b Parameters:}\par\li180 This operation takes 1 argument.\line {\f1 Field 1: } Upgrade code. The upgrade code GUID.\line ...\line ...\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoUpgradeCodeUnpublish} ${\footnote ixoUpgradeCodeUnpublish Operation} +{\footnote Operation:ixoUpgradeCodeUnpublish} K{\footnote ixoUpgradeCodeUnpublish} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoUpgradeCodeUnpublish Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Unpublishes the product code under the appropriate Upgrade Code key. \par\li0\fi0{\b Parameters:}\par\li180 This operation takes 1 argument.\line {\f1 Field 1: } Upgrade code. The upgrade code GUID.\line ...\line ...\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoProductPublish} ${\footnote ixoProductPublish Operation} +{\footnote Operation:ixoProductPublish} K{\footnote ixoProductPublish} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoProductPublish Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Publishes the product information with the configuration manager. \par\li0\fi0{\b Parameters:}\par\li180 This operation takes 1 or more variable number of arguments.\line {\f1 Field 1: } Package key. The package GUID.\line {\f1 Field 2: } Transform name 1. The transform name.\line {\f1 Field 3: } Transform data 1. The transform stream.\line {\f1 Field 4: } Transform name 2. The transform name.\line {\f1 Field 5: } Transform data 2. The transform stream.\line ...\line ...\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Product key\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 The transforms are cached in the %USERPROFILE%\MSI folder. \page #{\footnote Operation_ixoProductUnpublish} ${\footnote ixoProductUnpublish Operation} +{\footnote Operation:ixoProductUnpublish} K{\footnote ixoProductUnpublish} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoProductUnpublish Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Removes the published product information from the configuration manager. \par\li0\fi0{\b Parameters:}\par\li180 This operation takes 1 or more variable number of arguments.\line {\f1 Field 1: } Package key. The package GUID.\line {\f1 Field 2: } Transform name 1. The transform name.\line {\f1 Field 3: } Transform data 1. The transform stream.\line {\f1 Field 4: } Transform name 2. The transform name.\line {\f1 Field 5: } Transform data 2. The transform stream.\line ...\line ...\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Product key\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 The transforms cached in the %USERPROFILE%\MSI folder are removed. \page #{\footnote Operation_ixoProductPublishClient} ${\footnote ixoProductPublishClient Operation} +{\footnote Operation:ixoProductPublishClient} K{\footnote ixoProductPublishClient} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoProductPublishClient Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 registers the client for the product. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Parent product key.\line {\f1 Field 2: } Relative child package path.\line {\f1 Field 3: } The child disk id.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Product key\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoProductUnpublishClient} ${\footnote ixoProductUnpublishClient Operation} +{\footnote Operation:ixoProductUnpublishclient} K{\footnote ixoProductUnpublishClient} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoProductUnpublishClient Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 unregisters the client for the product.. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Parent product key.\line {\f1 Field 2: } Relative child package path.\line {\f1 Field 3: } The child disk id.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Product key\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoAdvtFlagsUpdate} ${\footnote ixoAdvtFlagsUpdate Operation} +{\footnote Operation:ixoAdvtFlagsUpdate} K{\footnote ixoAdvtFlagsUpdate} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoAdvtFlagsUpdate Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Publishes the Advertisement flags for the product under the appropriate Product Code key. \par\li0\fi0{\b Parameters:}\par\li180 This operation takes 1 argument.\line {\f1 Field 1: } Flags. The advertisement flags - records whether the OLE data, Qualified Components data and the Shortcuts have been created.\line ...\line ...\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoFeaturePublish} ${\footnote ixoFeaturePublish Operation} +{\footnote Operation:ixoFeaturePublish} K{\footnote ixoFeaturePublish} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoFeaturePublish Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Publishes the Feature composition (the constituent components) with the configuration manager. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } FeatureID. The feature key.\line { \f1 Field 2: } FeatureID (parent). Optional parent of the feature.\line { \f1 Field 3: } Absent. Set to 1 if the feature, being published, has been set to the Absent state.\line {\f1 Field 4: } ComponenID. The component ID of the first component of the feature.\line {\f1 Field 5: } ComponenID. The component ID of the second component of the feature.\line ...\line ...\line ...\line NOTE: This is a variable length record operation, the size depending on the number of components  of the feature.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Product key\line {\f1 Field 2: } Feature key\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 For features that are selected to be absent, the component list begins with the special character  '~' as Field 3. This is a Beta1 implementation that is up for revision in Beta2. \page #{\footnote Operation_ixoFeatureUnpublish} ${\footnote ixoFeatureUnpublish Operation} +{\footnote Operation:ixoFeatureUnpublish} K{\footnote ixoFeatureUnpublish} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoFeatureUnpublish Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Removes the published Feature composition (the constituent components) from the configuration manager. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } FeatureID. The feature key.\line { \f1 Field 2: } FeatureID (parent). Optional parent of the feature.\line { \f1 Field 3: } Absent. Set to 1 if the feature, being published, has been set to the Absent state.\line {\f1 Field 4: } ComponenID. The component ID of the first component of the feature.\line {\f1 Field 5: } ComponenID. The component ID of the second component of the feature.\line ...\line ...\line ...\line NOTE: This is a variable length record operation, the size depending on the number of components  of the feature.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Product key\line {\f1 Field 2: } Feature key\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoComponentPublish} ${\footnote ixoComponentPublish Operation} +{\footnote Operation:ixoComponentPublish} K{\footnote ixoComponentPublish} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoComponentPublish Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Publishes the component factory information (the darwin descriptor that provides the component) with the configuration manager.  This is typically used for cross-product component usage. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Feature. The feature to which the component to be published belongs to.\line {\f1 Field 2: } Component. The component id (from the Component Table) of the component.\line {\f1 Field 3: } ComponentId. The component id GUID (from the PublishComponent Table) under which the component is published.\line {\f1 Field 4: } Qualifier. Optional. The Qualifier string that further defines the component (in addition to  the ComponentId).\line {\f1 Field 5: } AppData. Additional localizable data to be associated with the component.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Product key\line {\f1 Field 2: } Component ID\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoComponentUnpublish} ${\footnote ixoComponentUnpublish Operation} +{\footnote Operation:ixoComponentUnpublish} K{\footnote ixoComponentUnpublish} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoComponentUnpublish Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Removes the published component information from the configuration manager. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Feature. The feature to which the component to be published belongs to.\line {\f1 Field 2: } Component. The component id (from the Component Table) of the component.\line {\f1 Field 3: } ComponentId. The component id GUID (from the PublishComponent Table) under which the component is published.\line {\f1 Field 4: } Qualifier. Optional. The Qualifier string that further defines the component (in addition to  the ComponentId).\line {\f1 Field 5: } AppData. Additional localizable data to be associated with the component.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be executed after {\uldb ixoProductInfo}{\v Operation_ixoProductInfo}. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Product key\line {\f1 Field 2: } Component ID\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoIconCreate} ${\footnote ixoIconCreate Operation} +{\footnote Operation:ixoIconCreate} K{\footnote ixoIconCreate} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoIconCreate Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Creates an icon file on the system to be used for advertised extensions and shortcuts. The default location of  the icon is <CSIDL_APPDATA Shell Folder>\\Microsoft\\Installer for user assigned apps on Win NT and <Windows Directory>\\Installer on Win95 or for  machine assigned apps on Win NT. This may however be overridden by the MsiProcessAdvertiseScript API. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Icon Name. The name of the icon file to be created including the extension.\line {\f1 Field 2: } Icon Data. The stream for the data for the icon file.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Icon name\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoIconRemove} ${\footnote ixoIconCreate Operation} +{\footnote Operation:ixoIconRemove} K{\footnote ixoIconRemove} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoIconRemove Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Removes an icon file on the system that was used for advertised extensions and shortcuts. The default location of  the icon is <CSIDL_APPDATA Shell Folder>\\Microsoft\\Installer for user assigned apps on Win NT and <Windows Directory>\\Installer on Win95 or for  machine assigned apps on Win NT. This may however be overridden by the MsiProcessAdvertiseScript API. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Icon Name. The name of the icon file created including the extension.\line {\f1 Field 2: } Icon Data. The stream for the data for the icon file. This field is unused.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Icon name\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoShortcutCreate} ${\footnote ixoShortcutCreate Operation} +{\footnote Operation:ixoShortcutCreate} K{\footnote ixoShortcutCreate} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoShortcutCreate Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Creates a shortcut. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Name. The shortcut name. \line {\f1 Field 2: } Feature. The feature to which the shortcut belongs to. Is null for non-advertisable shortcuts. \line {\f1 Field 3: } Component. The component id (from the Component Table) of the component whose key file is the shortcut target.  Is null for non-advertisable shortcuts. \line {\f1 Field 4: } FileName. The (key) file of the component for advertisable shortcuts. The target for non-advertisable shortcuts. \line {\f1 Field 5: } Arguments. The shortcut arguments. \line {\f1 Field 6: } WorkingDir. The working directory. \line {\f1 Field 7: } Icon. Icon file. For non-advertised shortcuts this is optionally a full file path. For  advertised shortcuts this has to be the name of the file created using the  {\uldb ixoIconCreate}{\v Operation_ixoIconCreate} operation.\line {\f1 Field 8: } IconIndex. The icon index (integer)\line {\f1 Field 9: } Hotkey. See help on Shortcut table for more details.\line {\f1 Field 10: } Show command. See help on Shortcut table for more details\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be exectued after {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder} operation.  In the advertise mode must be executed after the {\uldb ixoIconCreate}{\v Operation_ixoIconCreate}  operation. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Shortcut name\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 {\f1 imsgOpShortcutCreate, MB_OK  } \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoShortcutRemove} ${\footnote ixoShortcutRemove Operation} +{\footnote Operation:ixoShortcutRemove} K{\footnote ixoShortcutRemove} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoShortcutRemove Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Removes a shortcut \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Shortcut name\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must be exectued after the {\uldb ixoSetTargetFolder}{\v Operation_ixoSetTargetFolder}  operation. \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Shortcut name\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 {\f1 imsgOpShortcutRemove, MB_OK  } \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoRegAppIdInfoRegister} ${\footnote ixoRegAppIdInfoRegister Operation} +{\footnote Operation:ixoRegAppIdInfoRegister} K{\footnote ixoRegAppIdInfoRegister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegAppIdInfoRegister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Registers class info with the registry. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } UNFINISHED \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } UNFINISHED\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 On 64-bit operating systems will write info into the 32-bit OLE/COM hive. \page #{\footnote Operation_ixoRegAppIdInfoRegister64} ${\footnote ixoRegAppIdInfoRegister64 Operation} +{\footnote Operation:ixoRegAppIdInfoRegister64} K{\footnote ixoRegAppIdInfoRegister64} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegAppIdInfoRegister64 Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Registers class info with the registry for 64-bit components.  Behaviour is identic with ixoRegAppIdInfoRegister. \par\li0\fi0{\b Remarks}\par\li180 On 64-bit operating systems will write info into the 64-bit OLE/COM hive. \page #{\footnote Operation_ixoRegAppIdInfoUnregister} ${\footnote ixoRegClassAppIdUnregister Operation} +{\footnote Operation:ixoRegAppIdInfoUnregister} K{\footnote ixoRegAppIdInfoUnregister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegAppIdInfoUnregister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Unregisters class info with the registry. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } UNFINISHED \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } UNFINISHED\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 On 64-bit operating systems will remove info from the 32-bit OLE/COM hive. \page #{\footnote Operation_ixoRegAppIdInfoUnregister64} ${\footnote ixoRegAppIdInfoUnregister64 Operation} +{\footnote Operation:ixoRegAppIdInfoUnregister64} K{\footnote ixoRegAppIdInfoUnregister64} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegAppIdInfoUnregister64 Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Unregisters class info with the registry for 64-bit components.  Behaviour is identic with ixoRegAppIdInfoUnregister. \par\li0\fi0{\b Remarks}\par\li180 On 64-bit operating systems will remove info from the 64-bit OLE/COM hive. \page #{\footnote Operation_ixoRegClassInfoRegister} ${\footnote ixoRegClassInfoRegister Operation} +{\footnote Operation:ixoRegClassInfoRegister} K{\footnote ixoRegClassInfoRegister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegClassInfoRegister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Registers class info with the registry. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Feature. The class server feature.\line {\f1 Field 2: } Component. The component id (from the Component Table) of the component whose key file is the class server.\line {\f1 Field 3: } FileName. The (key) file of the component.\line {\f1 Field 4: } ClsId. The GUID string of the class.\line {\f1 Field 5: } ProgId. The ProgID string of the class.\line {\f1 Field 6: } VIProgId. The version independant ProgID string of the class.optional.\line {\f1 Field 7: } Description. The Description string. \line {\f1 Field 8: } Context. The class context. One of \line LocalServer\line LocalServer32\line InprocServer\line InprocServer32\line InprocHandler\line InprocHandler32\line {\f1 Field 9: } Insertable. Whether the class supports the Insertable key.\line {\f1 Field 10: } AppID. <TBD>\line {\f1 Field 11: } FileTypeMask. semicolon delimited file type masks for the class server.\line {\f1 Field 12: } Icon. The name of the icon file created using the  {\uldb ixoIconCreate}{\v Operation_ixoIconCreate} operation.\line {\f1 Field 13: } IconIndex.The index of the icon within the icon file.\line {\f1 Field 14: } DefInprocHandler. The default InprocHandler.Relevant only if the class context is LocalServer or LocalServer32.  It is either a number or is the name of a "system" file. If it is a number is is interpreted as - \line {\b 1 } - Use the system default for the 16 bit InprocHandler (ole2.dll used for InprocHandler).\line {\b 2 } - Use the system default for the 32 bit InprocHandler (ole32.dll used for InprocHandler32).\line {\b 3 } - Use the system default for both the 16 bit and 32 bit InprocHandler (ole2.dll used for InprocHandler, ole32.dll used for InprocHandler32).\line If it is a name it is interpreted as the file to be used as the 32 bit InprocHandler (used for InprocHandler32).\line {\f1 Field 15: } Argument. The argument to be used with the class server. Relevant only only if the class context is LocalServer or LocalServer32.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } CLSID\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 On 64-bit operating systems will write info into the 32-bit OLE/COM hive. \page #{\footnote Operation_ixoRegClassInfoRegister64} ${\footnote ixoRegClassInfoRegister64 Operation} +{\footnote Operation:ixoRegClassInfoRegister64} K{\footnote ixoRegClassInfoRegister64} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegClassInfoRegister64 Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Registers class info with the registry.  Behaviour is identic with ixoRegClassInfoRegister. \par\li0\fi0{\b Remarks}\par\li180 On 64-bit operating systems will write info into the 64-bit OLE/COM hive. \page #{\footnote Operation_ixoRegClassInfoUnregister} ${\footnote ixoRegClassInfoUnregister Operation} +{\footnote Operation:ixoRegClassInfoUnregister} K{\footnote ixoRegClassInfoUnregister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegClassInfoUnregister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Unregisters class info with the registry. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Feature. The class server feature.\line {\f1 Field 2: } Component. The component id (from the Component Table) of the component whose key file is the class server.\line {\f1 Field 3: } FileName. The (key) file of the component.\line {\f1 Field 4: } ClsId. The GUID string of the class.\line {\f1 Field 5: } ProgId. The ProgID string of the class.\line {\f1 Field 6: } VIProgId. The version independant ProgID string of the class.optional.\line {\f1 Field 7: } Description. The Description string. \line {\f1 Field 8: } Context. the class context. One of \line LocalServer\line LocalServer32\line InprocServer\line InprocServer32\line InprocHandler\line InprocHandler32\line {\f1 Field 9: } Insertable. Whether the class supports the Insertable key.\line {\f1 Field 10: } AppID. <TBD>\line {\f1 Field 11: } FileTypeMask. semicolon delimited file type masks for the class server.\line {\f1 Field 12: } Icon. The name of the icon file created using the  {\uldb ixoIconCreate}{\v Operation_ixoIconCreate} operation.\line {\f1 Field 13: } IconIndex.The index of the icon within the icon file.\line {\f1 Field 14: } DefInprocHandler. The default InprocHandler.Relevant only if the class context is LocalServer or LocalServer32.  It is either a number or is the name of a "system" file. If it is a number is is interpreted as - \line {\b 1 } - Use the system default for the 16 bit InprocHandler (ole2.dll used for InprocHandler).\line {\b 2 } - Use the system default for the 32 bit InprocHandler (ole32.dll used for InprocHandler32).\line {\b 3 } - Use the system default for both the 16 bit and 32 bit InprocHandler (ole2.dll used for InprocHandler, ole32.dll used for InprocHandler32).\line If it is a name it is interpreted as the file to be used as the 32 bit InprocHandler (used for InprocHandler32).\line {\f1 Field 15: } Argument. The argument to be used with the class server. Relevant only only if the class context is LocalServer or LocalServer32.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Progress Notifications}\par\li180 \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } CLSID\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 On 64-bit operating systems will remove info from the 32-bit OLE/COM hive. \page #{\footnote Operation_ixoRegClassInfoUnregister64} ${\footnote ixoRegClassInfoUnregister64 Operation} +{\footnote Operation:ixoRegClassInfoUnregister64} K{\footnote ixoRegClassInfoUnregister64} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegClassInfoUnregister64 Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Unregisters class info with the registry.  Behaviour is identic with ixoRegClassInfoUnregister. \par\li0\fi0{\b Remarks}\par\li180 On 64-bit operating systems will remove info from the 64-bit OLE/COM hive. \page #{\footnote Operation_ixoRegMIMEInfoRegister} ${\footnote ixoRegMIMEInfoRegister Operation} +{\footnote Operation:ixoRegMIMEInfoRegister} K{\footnote ixoRegMIMEInfoRegister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegMIMEInfoRegister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Registers the MIME info with the registry. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } ContentType. The Content type string.\line {\f1 Field 2: } Extension. The extension string (w/o the '.').\line {\f1 Field 3: } CLSID. The optional GUID string of the class.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } ContentType\line {\f1 Field 2: } Extension\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 On 64-bit operating systems will write info into the 32-bit OLE/COM hive. \page #{\footnote Operation_ixoRegMIMEInfoRegister64} ${\footnote ixoRegMIMEInfoRegister64 Operation} +{\footnote Operation:ixoRegMIMEInfoRegister64} K{\footnote ixoRegMIMEInfoRegister64} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegMIMEInfoRegister64 Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Registers the MIME info with the registry.  Behaviour is identic with ixoRegMIMEInfoRegister. \par\li0\fi0{\b Remarks}\par\li180 On 64-bit operating systems will write info into the 64-bit OLE/COM hive. \page #{\footnote Operation_ixoRegMIMEInfoUnregister} ${\footnote ixoRegMIMEInfoUnregister Operation} +{\footnote Operation:ixoRegMIMEInfoUnregister} K{\footnote ixoRegMIMEInfoUnregister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegMIMEInfoUnregister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Unregisters the MIME info with the registry. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } ContentType. The Content type string.\line {\f1 Field 2: } Extension. The extension string (w/o the '.').\line {\f1 Field 3: } CLSID. The optional GUID string of the class.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } ContentType\line {\f1 Field 2: } Extension\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 On 64-bit operating systems will remove info from the 32-bit OLE/COM hive. \page #{\footnote Operation_ixoRegMIMEInfoUnregister64} ${\footnote ixoRegMIMEInfoUnregister64 Operation} +{\footnote Operation:ixoRegMIMEInfoUnregister64} K{\footnote ixoRegMIMEInfoUnregister64} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegMIMEInfoUnregister64 Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Unregisters the MIME info with the registry.  Behaviour is identic with ixoRegMIMEInfoUnregister. \par\li0\fi0{\b Remarks}\par\li180 On 64-bit operating systems will remove info from the 64-bit OLE/COM hive. \page #{\footnote Operation_ixoRegProgIdInfoRegister} ${\footnote ixoRegProgIdInfoRegister Operation} +{\footnote Operation:ixoRegProgIdInfoRegister} K{\footnote ixoRegProgIdInfoRegister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegProgIdInfoRegister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Registers the ProgId info with the registry. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } ProgId. The Program Identifier string.\line {\f1 Field 2: } ClsId. The optional GUID string of the class.\line {\f1 Field 3: } Extension. The extension associated with the progid.\line {\f1 Field 4: } Description. The ProgId Description.\line {\f1 Field 5: } Icon. The icon associated with the ProgId.\line {\f1 Field 6: } IconIndex. The icon index.\line {\f1 Field 7: } VIProgId. The optional version independant prog id.\line {\f1 Field 8: } VIProgIdDescription. The description for the version independant prog id.\line {\f1 Field 9: } Insertable. Set to 1 if the corr. object is insertable.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } ProgId\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 On 64-bit operating systems will write info into the 32-bit OLE/COM hive. \page #{\footnote Operation_ixoRegProgIdInfoRegister64} ${\footnote ixoRegProgIdInfoRegister64 Operation} +{\footnote Operation:ixoRegProgIdInfoRegister64} K{\footnote ixoRegProgIdInfoRegister64} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegProgIdInfoRegister64 Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Registers the ProgId info with the registry.  Behaviour is identic with ixoRegProgIdInfoRegister. \par\li0\fi0{\b Remarks}\par\li180 On 64-bit operating systems will write info into the 64-bit OLE/COM hive. \page #{\footnote Operation_ixoRegProgIdInfoUnregister} ${\footnote ixoRegProgIdInfoUnregister Operation} +{\footnote Operation:ixoRegProgIdInfoUnregister} K{\footnote ixoRegProgIdInfoUnregister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegProgIdInfoUnregister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Unregisters the ProgId info with the registry. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } ProgId. The Program Identifier string.\line {\f1 Field 2: } ClsId. The optional GUID string of the class.\line {\f1 Field 3: } Extension. The extension associated with the progid.\line {\f1 Field 4: } Description. The ProgId Description.\line {\f1 Field 5: } Icon. The icon associated with the ProgId.\line {\f1 Field 6: } IconIndex. The icon index.\line {\f1 Field 7: } VIProgId. The optional version independant prog id.\line {\f1 Field 8: } VIProgIdDescription. The description for the version independant prog id.\line {\f1 Field 9: } Insertable. Set to 1 if the corr. object is insertable.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } ProgId\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 On 64-bit operating systems will remove info from the 32-bit OLE/COM hive. \page #{\footnote Operation_ixoRegProgIdInfoUnregister64} ${\footnote ixoRegProgIdInfoUnregister64 Operation} +{\footnote Operation:ixoRegProgIdInfoUnregister64} K{\footnote ixoRegProgIdInfoUnregister64} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegProgIdInfoUnregister64 Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Unregisters the ProgId info with the registry.  Behaviour is identic with ixoRegProgIdInfoUnregister. \par\li0\fi0{\b Remarks}\par\li180 On 64-bit operating systems will remove info from the 64-bit OLE/COM hive. \page #{\footnote Operation_ixoRegExtensionInfoRegister} ${\footnote ixoRegExtensionInfoRegister Operation} +{\footnote Operation:ixoRegExtensionInfoRegister} K{\footnote ixoRegExtensionInfoRegister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegExtensionInfoRegister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Registers the Extension info with the registry. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Feature. The extension server feature.\line {\f1 Field 2: } Component. The component id (from the Component Table) of the component whose key file is the extension server.\line {\f1 Field 3: } FileName. The (key) file of the component.\line {\f1 Field 4: } Extension. The extension.\line {\f1 Field 5: } ProgId. The optional progID.\line {\f1 Field 6: } ShellNew. The value name under the ShellNew key.\line {\f1 Field 7: } ShellNewValue. The value.\line {\f1 Field 8: } ContentType. The MIME Content Type to be associated with the extension.\line {\f1 Field 9: } Order. The number of verbs associated with the extension that need to be in the order specified (they are at the end of the sequence of verbs).\line {\f1 Field 10: } Verb1. The first verb.\line {\f1 Field 11: } Command1. The command associated with the first verb.\line {\f1 Field 12: } Arguments1. The arguments to be passed to the server when invoking the first verb.\line {\f1 Field 13: } Verb2. The second verb.\line {\f1 Field 14: } Command2.  The command associated with the second verb.\line {\f1 Field 15: } Arguments2.  The arguments to be passed to the server when invoking the second verb.\line ...\line ...\line ...\line NOTE: This is a variable length record operation, the size depending on the number of verbs (may be 0 or more)  supported by the extension server.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Extension\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 On 64-bit operating systems will write info into the 32-bit OLE/COM hive. \page #{\footnote Operation_ixoRegExtensionInfoRegister64} ${\footnote ixoRegExtensionInfoRegister64 Operation} +{\footnote Operation:ixoRegExtensionInfoRegister64} K{\footnote ixoRegExtensionInfoRegister64} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegExtensionInfoRegister64 Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Registers the Extension info with the registry.  Behaviour is identic with ixoRegExtensionInfoRegister. \par\li0\fi0{\b Remarks}\par\li180 On 64-bit operating systems will write info into the 64-bit OLE/COM hive. \page #{\footnote Operation_ixoRegExtensionInfoUnregister} ${\footnote ixoRegExtensionInfoUnregister Operation} +{\footnote Operation:ixoRegExtensionInfoUnregister} K{\footnote ixoRegExtensionInfoUnregister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegExtensionInfoUnregister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Unregisters the Extension info with the registry. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Feature. The extension server feature.\line {\f1 Field 2: } Component. The component id (from the Component Table) of the component whose key file is the extension server.\line {\f1 Field 3: } FileName. The (key) file of the component.\line {\f1 Field 4: } Extension. The extension.\line {\f1 Field 5: } ProgId. The optional progID.\line {\f1 Field 6: } ShellNew. The value name under the ShellNew key.\line {\f1 Field 7: } ShellNewValue. The value.\line {\f1 Field 8: } ContentType. The MIME Content Type to be associated with the extension.\line {\f1 Field 9: } Order. The number of verbs associated with the extension that need to be in the order specified (they are at the end of the sequence of verbs).\line {\f1 Field 10: } Verb1. The first verb.\line {\f1 Field 11: } Command1. The command associated with the first verb.\line {\f1 Field 12: } Arguments1. The arguments to be passed to the server when invoking the first verb.\line {\f1 Field 13: } Verb2. The second verb.\line {\f1 Field 14: } Command2.  The command associated with the second verb.\line {\f1 Field 15: } Arguments2.  The arguments to be passed to the server when invoking the second verb.\line ...\line ...\line ...\line NOTE: This is a variable length record operation, the size depending on the number of verbs (may be 0 or more)  supported by the extension server.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Extension\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 On 64-bit operating systems will remove info from the 32-bit OLE/COM hive. \page #{\footnote Operation_ixoRegExtensionInfoUnregister64} ${\footnote ixoRegExtensionInfoUnregister64 Operation} +{\footnote Operation:ixoRegExtensionInfoUnregister64} K{\footnote ixoRegExtensionInfoUnregister64} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegExtensionInfoUnregister64 Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Unregisters the Extension info with the registry.  Behaviour is identic with ixoRegExtensionInfoUnregister. \par\li0\fi0{\b Remarks}\par\li180 On 64-bit operating systems will remove info from the 64-bit OLE/COM hive. \page #{\footnote Operation_ixoRegisterBackupFile} ${\footnote ixoRegisterBackupFile Operation} +{\footnote Operation:ixoRegisterBackupFile} K{\footnote ixoRegisterBackupFile} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoRegisterBackupFile Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Marks a file as a backup file that may be removed with the rollback script. No execution is performed  with this operation. This operation is used when removing rollback scripts and backup files. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Full path of file. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 None. \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 None. \par\li0\fi0{\b Remarks}\par\li180 This operation is only relevant in a rollback script. \page #{\footnote Operation_ixoTypeLibraryRegister} ${\footnote ixoTypeLibraryRegister Operation} +{\footnote Operation:ixoTypeLibraryRegister} K{\footnote ixoTypeLibraryRegister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoTypeLibraryRegister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Registers/ advertises a type library. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Feature. The type library server feature.\line {\f1 Field 2: } Component. The component id (from the Component Table) of the component whose key file is the type library.\line {\f1 Field 3: } FileName. The (key) file of the component.\line {\f1 Field 4: } LibID. The UUID for the type library.\line {\f1 Field 5: } Version. the short integer version number.\line {\f1 Field 6: } Description. The description of the type library.\line {\f1 Field 7: } Language. The language of the type library.\line {\f1 Field 8: } Help Path. This the path of the help file for the type library.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } LibID\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoTypeLibraryUnregister} ${\footnote ixoTypeLibraryUnregister Operation} +{\footnote Operation:ixoTypeLibraryUnregister} K{\footnote ixoTypeLibraryUnregister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoTypeLibraryUnregister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Unregisters/ unadvertises a type library. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } Feature. The type library server feature.\line {\f1 Field 2: } Component. The component id (from the Component Table) of the component whose key file is the type library.\line {\f1 Field 3: } FileName. The (key) file of the component.\line {\f1 Field 4: } LibID. The UUID for the type library.\line {\f1 Field 5: } Version. the short integer version number.\line {\f1 Field 6: } Description. The description of the type library.\line {\f1 Field 7: } Language. The language of the type library.\line {\f1 Field 8: } Help Path. This the path of the help file for the type library.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } LibID\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoCustomActionSchedule} ${\footnote ixoCustomActionSchedule Operation} +{\footnote Operation:ixoCustomActionSchedule} K{\footnote ixoCustomActionSchedule} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoCustomActionSchedule Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Executes a scheduled custom action using information stored in the  script record, except passes the record to the rollback script if  it is a rollback or commit custom action. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: }Action, name of action.\line {\f1 Field 2: }ActionType, combination of icaXXX flags.\line {\f1 Field 3: }Source. Information from Source column of CustomAction table.\line {\f1 Field 4: }Target. Information from Target column of CustomAction table.\line {\f1 Field 5: }CustomActionData. A string containing context information, set from property. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 The Source field will contain the action binary data if the custom action was  stored within a database stream. The CustomActionData field is set with the value of the  property named the same as the primary key in the CustomAction table entry. \page #{\footnote Operation_ixoCustomActionRollback} ${\footnote ixoCustomActionRollback Operation} +{\footnote Operation:ixoCustomActionRollback} K{\footnote ixoCustomActionRollback} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoCustomActionRollback Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Executes a rollback custom action upon failure of script execution,  using information stored in the script record, passed over from the install script. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: }Action, name of action.\line {\f1 Field 2: }ActionType, combination of icaXXX flags.\line {\f1 Field 3: }Source. Information from Source column of CustomAction table.\line {\f1 Field 4: }Target. Information from Target column of CustomAction table.\line {\f1 Field 5: }CustomActionData. A string containing context information, set from property. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 The Source field will contain the action binary data if the custom action was  stored within a database stream. The CustomActionData field is set with the value of the  property named the same as the primary key in the CustomAction table entry. \page #{\footnote Operation_ixoCustomActionCommit} ${\footnote ixoCustomActionCommit Operation} +{\footnote Operation:ixoCustomActionCommit} K{\footnote ixoCustomActionCommit} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoCustomActionCommit Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Executes a commit custom action upon successful completion of script execution,  using information stored in the script record, passed over from the install script. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: }Action, name of action.\line {\f1 Field 2: }ActionType, combination of icaXXX flags.\line {\f1 Field 3: }Source. Information from Source column of CustomAction table.\line {\f1 Field 4: }Target. Information from Target column of CustomAction table.\line {\f1 Field 5: }CustomActionData. A string containing context information, set from property. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 The Source field will contain the action binary data if the custom action was  stored within a database stream. The CustomActionData field is set with the value of the  property named the same as the primary key in the CustomAction table entry. \page #{\footnote Operation_ixoODBCDriverManager} ${\footnote ixoODBCInstallDriverManager Operation} +{\footnote Operation:ixoODBCInstallDriverManager} K{\footnote ixoODBCInstallDriverManager} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoODBCInstallDriverManager Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Registers the driver manager for the first MSI product to become a  client of the ODBC driver manager component, or  unregisters the driver manager of the current product is removing  the last client of the ODBC driver manager component. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: } State: 1 to register, 2 to unregister. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must come after ixoFileCopy for manager files and before other ODBC ops on register.\line Must come before ixoFileRemove on manager files and after other ODBC ops on unregister. \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoODBCInstallDriver} ${\footnote ixoODBCInstallDriver Operation} +{\footnote Operation:ixoODBCInstallDriver} K{\footnote ixoODBCInstallDriver} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoODBCInstallDriver Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Registers an ODBC driver, configured with its set of attributes. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: }DriverKey,  registered name of driver, ODBC term: description.\line {\f1 Field 2: }Component,  component ID, used to check for existing clients.\line {\f1 Field 3: }Folder,     location of driver.\line {\f1 Field 4: }Attribute_, name of driver attribute, repeating pairs with value.\line {\f1 Field 5: }Value_,     associated value for attribute in repeating pair. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must come after ixoFileCopy for driver files and after ixoODBCDriverManager register. \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoODBCRemoveDriver} ${\footnote ixoODBCRemoveDriver Operation} +{\footnote Operation:ixoODBCRemoveDriver} K{\footnote ixoODBCRemoveDriver} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoODBCRemoveDriver Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Removes the registration for a driver. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: }DriverKey,  registered name of driver, ODBC term: description.\line {\f1 Field 2: }Component,  component ID, used to check for remaining clients. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must come before ixoFileRemove for driver files and before ixoODBCDriverManager unregister. \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoODBCDataSource} ${\footnote ixoODBCDataSource Operation} +{\footnote Operation:ixoODBCDataSource} K{\footnote ixoODBCDataSource} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoODBCDataSource Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Registers an ODBC data source, associated with a particular driver,  or unregisters an ODBC data source. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: }DriverKey,    registered name of driver, ODBC term: description.\line {\f1 Field 2: }Component,    component ID.\line {\f1 Field 3: }Registration, SQL_ADD_DSN, SQL_ADD_SYS_DSN, SQL_REMOVE_DSN, SQL_REMOVE_SYS_DSN.\line {\f1 Field 4: }Attribute_,   name of data source attribute, repeating pairs with value.\line {\f1 Field 5: }Value_,       associated value for attribute in repeating pair. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must come after ixoODBCInstallDriver for associated driver on ADD.\line Must come before ixoODBCRemoveDriver for associated driver on REMOVE. \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoODBCInstallTranslator} ${\footnote ixoODBCInstallTranslator Operation} +{\footnote Operation:ixoODBCInstallTranslator} K{\footnote ixoODBCInstallTranslator} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoODBCInstallTranslator Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Registers an ODBC data translator. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: }TranslatorKey,  registered name of translator, ODBC term: description.\line {\f1 Field 2: }Component,  component ID, used to check for existing clients.\line {\f1 Field 3: }Folder,     location of translator.\line {\f1 Field 4: }Attribute_, name of translator attribute, repeating pairs with value.\line {\f1 Field 5: }Value_,     associated value for attribute in repeating pair. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must come after ixoFileCopy for translator files and after ixoODBCDriverManager register. \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoODBCRemoveTranslator} ${\footnote ixoODBCRemoveTranslator Operation} +{\footnote Operation:ixoODBCRemoveTranslator} K{\footnote ixoODBCRemoveTranslator} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoODBCRemoveTranslator Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Unregisters an ODBC data translator. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: }TranslatorKey,  registered name of translator, ODBC term: description.\line {\f1 Field 2: }Component,  component ID, used to check for remaining clients. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 Must come before ixoFileRemove for translator files and before ixoODBCDriverManager unregister. \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoServiceControl} ${\footnote ixoServiceControl Operation} +{\footnote Operation:ixoServiceControl} K{\footnote ixoServiceControl} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoServiceControl Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Starts a service currently installed on the machine.    \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: }MachineName. MachineName property to start the service on.\line {\f1 Field 2: }Name.  Internal name of the service.  Does not includes slashes or spaces.\line {\f1 Field 3: }Action. Bitfield.  1 = Start, 2 = Stop, 4 = <reserved>, 8 = Delete\line {\f1 Field 3: }Wait.  Boolean for whether to wait for the service control event to complete.\line {\f1 Field 4: }StartupArguments.  List of arguments, separated by nulls, with a double null at the end.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Progress Notifications}\par\li180 ActionData record with the following fields:\par\li360 {\f1 Field 1: } Display name of the service.\line {\f1 Field 2: } Internal name of the service.\line \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoServiceInstall} ${\footnote ixoServiceInstall Operation} +{\footnote Operation:ixoServiceInstall} K{\footnote ixoServiceInstall} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoServiceInstall Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Starts a service currently installed on the machine.    \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: }Name.  Internal name of the service.  Does not includes slashes or spaces.\line {\f1 Field 2: }DisplayName.  Display name of the service.\line {\f1 Field 3: }ImagePath.  Full command line for invoking the service.\line {\f1 Field 4: }ServiceType.  Type of service.\line {\f1 Field 6: }StartType.  When to start service.\line {\f1 Field 7: }ErrorControl.  severity if service fails to start.\line {\f1 Field 8: }LoadOrderGroup.  Name of load ordering group.\line {\f1 Field 9: }Dependencies.  Null delimited list of services on which this service depends.\line {\f1 Field 10:}TagId.  Used only for rollback.  Tag for service start order.\line {\f1 Field 11:}StartName.  User for the service to run as.\line {\f1 Field 12:}Password.  Clear-text password for user specified in StartName.\line {\f1 Field 13:}Description.  A description of the service. Displayed by the Services MMC snap-in. Win2K only\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Progress Notifications}\par\li180 \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoUpdateEnvironmentStrings} ${\footnote ixoUpdateEnvironmentStrings} +{\footnote Operation:ixoUpdateEnvironmentStrings} K{\footnote ixoUpdateEnvironmentStrings} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoUpdateEnvironmentStrings Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 This operation performs an update on the system environmental variables.  On Windows '95 these occur in AutoExec.bat, on Windows NT they occur in the registry. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: }Name.  Name of the variable to set.\line {\f1 Field 2: }Value.  Value to set in the variable.\line {\f1 Field 3: }Delimiter.  Separator between values, if the value is one of several.\line {\f1 Field 4: }Action.  Bitfield specifying type of operation to perform:\line \tab 2   Set a value\line \tab 4   Set a value only if the variable is absent.\line \tab 8   Remove the value from the variable.\line \tab 16  Append the specified value to the named variable.\line \tab 32  Prepend the specified value to named variable.\line {\f1 Field 5: }AutoExec Path.  95 Only, ignored on NT.  Contains either the Windows Volume path, or  content of the WIN95_ENVIRONMENT_TEST property.  This allows you to modify a file in a test  directory rather than working on your primary file. \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Progress Notifications}\par\li180 None. \par\li0\fi0{\b Error Messages and MessageBox Styles}\par\li180 None. \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoComPlusRegister} ${\footnote ixoComPlusRegister Operation} +{\footnote Operation:ixoComPlusRegister} K{\footnote ixoComPlusRegister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoComPlusRegister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Installs the COM+ application. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: }AppID: The Application id guid.\line {\f1 Field 2: }AplFileName: The name of the file that contains application configuration information.\line {\f1 Field 3: }AppDir: The directory the application is installed to.\line {\f1 Field 4: }AppType: Information from the ExpType column of the Complus table.\line {\f1 Field 5: }InstallUsers: Whether to install the users of the application.\line {\f1 Field 6: }RSN: Remote server name for proxy applications.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoComPlusUnregister} ${\footnote ixoComPlusUnregister Operation} +{\footnote Operation:ixoComPlusUnregister} K{\footnote ixoComPlusUnregister} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoComPlusUnregister Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Uninstalls the COM+ application. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: }AppID: The Application id guid.\line {\f1 Field 2: }AplFileName: The name of the file that contains application configuration information.\line {\f1 Field 3: }AppDir: The directory the application is installed to.\line {\f1 Field 4: }AppType: Information from the ExpType column of the Complus table.\line {\f1 Field 5: }InstallUsers: Whether to install the users of the application.\line {\f1 Field 6: }RSN: Remote server name for proxy applications.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoComPlusRegisterMetaOnly} ${\footnote ixoComPlusRegisterMetaOnly Operation} +{\footnote Operation:ixoComPlusRegisterMetaOnly} K{\footnote ixoComPlusRegisterMetaOnly} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoComPlusRegisterMetaOnly Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Not used - only a placeholder. \par\li0\fi0{\b Parameters:}\par\li180 \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoComPlusUnregisterMetaOnly} ${\footnote ixoComPlusUnregisterMetaOnly Operation} +{\footnote Operation:ixoComPlusUnregisterMetaOnly} K{\footnote ixoComPlusUnregisterMetaOnly} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoComPlusUnregisterMetaOnly Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Not used - only a placeholder. \par\li0\fi0{\b Parameters:}\par\li180 \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoComPlusCommit} ${\footnote ixoComPlusCommit Operation} +{\footnote Operation:ixoComPlusCommit} K{\footnote ixoComPlusCommit} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoComPlusCommit Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Not used - only a placeholder. \par\li0\fi0{\b Parameters:}\par\li180 \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoComPlusRollback} ${\footnote ixoComPlusRollback Operation} +{\footnote Operation:ixoComPlusRollback} K{\footnote ixoComPlusRollback} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoComPlusRollback Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Not used - only a placeholder. \par\li0\fi0{\b Parameters:}\par\li180 \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote Operation_ixoSecureTransformCache} ${\footnote ixoSecureTransformCache Operation} +{\footnote Operation:ixoSecureTransformCache} K{\footnote ixoSecureTransformCache} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ixoSecureTransformCache Operation \line\tx360\tab\fs18\b0{\uldb Script Opcodes}{\v Server_ScriptOpcodes} \tx3000\tab{\uldb Error Codes}{\v Msi_Errors} \par}\li180 Caches the specified transform into the secure transforms directory for the  product. \par\li0\fi0{\b Parameters:}\par\li180 {\f1 Field 1: }Transform.  Full path to the transform to cache.\line \par\li0\fi0{\b Sequencing Restrictions}\par\li180 \par\li0\fi0{\b Remarks}\par\li180 \page #{\footnote MsiExecute_Object} ${\footnote MsiExecute Object} K{\footnote MsiExecute} +{\footnote Class:MsiExecute} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiExecute Object \line\fs18\b0\tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Script Operations}{\v Server_ScriptOpcodes} \par}\li180 The MsiExecute object is used to execute script operations either individually or as  part of a script file. This object can also enumerate a script file. Finally, the  MsiExecute object can be used to roll back one or more installations and clean up  back-up files and rollback scripts when they are not needed anymore. The MsiExecute object  is created by the {\uldb CreateExecutor}{\v MsiAuto_CreateExecutor} method. \par\li0{\b Properties}\par\li180 \par\li0{\b Methods}\par\li180 {\uldb EnumerateScript}{\v MsiExecute_EnumerateScript}\line {\uldb ExecuteRecord}{\v MsiExecute_ExecuteRecord}\line {\uldb RemoveRollbackFiles}{\v MsiExecute_RemoveRollbackFiles}\line {\uldb Rollback}{\v MsiExecute_Rollback}\line {\uldb RollbackFinalize}{\v MsiExecute_RollbackFinalize}\line {\uldb RunScript}{\v MsiExecute_RunScript}\line {\uldb CreateScript}{\v MsiExecute_CreateScript}\line {\uldb WriteScriptRecord}{\v MsiExecute_WriteScriptRecord}\line {\uldb CloseScript}{\v MsiExecute_CloseScript}\line \page #{\footnote MsiExecute_ExecuteRecord} ${\footnote MsiExecute.ExecuteRecord} +{\footnote MsiExecute:ExecuteRecord} K{\footnote ExecuteRecord} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ExecuteRecord Method \line\tx360\tab\fs18\b0{\uldb MsiExecute Object}{\v MsiExecute_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Script Operations}{\v Server_ScriptOpcodes} \par}\li180 Executes a single script operation. The operation is defined by the given  {\uldb opcode}{\v Server_ScriptOpcodes}, and the operation parameters are passed in  an {\uldb MsiRecord}{\v MsiRecord_Object} object. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .ExecuteRecord({\i opcode, params})} \par{\i object}\line Required. The MsiExecute object. \par{\i\b opcode}\line Required. The opcode of the operation to be executed. \par{\i\b params}\line Required. An MsiRecord object containing the operation parameters. Note that this argument  is required even if the operation does not accept any parameters. In this case, the record  would be 0-length. \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiExecute_RunScript} ${\footnote MsiExecute.RunScript} +{\footnote MsiExecute:RunScript} K{\footnote RunScript} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RunScript Method \line\tx360\tab\fs18\b0{\uldb MsiExecute Object}{\v MsiExecute_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Script Operations}{\v Server_ScriptOpcodes} \par}\li180 Runs a script. The script may be an installation, advertisement or rollback script.  The type of the script is defined in the {\uldb ixoHeader}{\v Operation_ixoHeader}  record. Each type of script is executed in a slightly different way. !! Explanation !! \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RunScript({\i scriptFile})} \par{\i object}\line Required. The MsiExecute object. \par{\i\b scriptfile}\line Required. The full path (string) to an installation script file. \par\fi0\li0{\b Remarks}\par\li180 {\uldb Scriptfile format}{\v Server_ScriptFormat} \par\fi0\li0{\b Return Values}\par\li180 {\f1 iesNoAction       = 0  } action not invoked, most-likely does not exist.\line {\f1 iesSuccess        = 1  } IDOK, completed actions successfully.\line {\f1 iesUserExit       = 2  } IDCANCEL, user terminated prematurely.\line {\f1 iesFailure        = 3  } IDABORT, unrecoverable error occurred.\line {\f1 iesSuspend        = 4  } IDRETRY, sequence suspended, to be resumed later.\line {\f1 iesFinished       = 5  } IDIGNORE, skip remainin actions, not an error\line {\f1 iesWrongState     = 6  } calling sequence error, not in initialized state.\line {\f1 iesBadActionData  = 7  } from Sequence(), invalid Action table record data. \line\line!! Rollback explanation!! \page #{\footnote MsiExecute_CreateScript} ${\footnote MsiExecute.CreateScript} +{\footnote MsiExecute:CreateScript} K{\footnote CreateScript} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CreateScript Method \line\tx360\tab\fs18\b0{\uldb MsiExecute Object}{\v MsiExecute_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Script Operations}{\v Server_ScriptOpcodes} \par}\li180 Creates a script file that can be written to with  {\uldb WriteScriptRecord}{\v MsiExecute_WriteScriptRecord} and closed with  {\uldb CloseScript}{\v MsiExecute_CloseScript}.  Once the script is closed, it may be run with  {\uldb RunScript}{\v MsiExecute_RunScript}.  This method returns TRUE if the script  could be created, FALSE if it could not. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CreateScript({\i scriptFile})} \par{\i object}\line Required. The MsiExecute object. \par{\i\b scriptfile}\line Required. The full path (string) to an installation script file to create. \page #{\footnote MsiExecute_WriteScriptRecord} ${\footnote MsiExecute.WriteScriptRecord} +{\footnote MsiExecute:WriteScriptRecord} K{\footnote WriteScriptRecord} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b WriteScriptRecord Method \line\tx360\tab\fs18\b0{\uldb MsiExecute Object}{\v MsiExecute_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Script Operations}{\v Server_ScriptOpcodes} \par}\li180 Writes an operation to the script opened by  {\uldb CreateScript}{\v MsiExecute_CreateScript}. The operation is defined by the given  {\uldb opcode}{\v Server_ScriptOpcodes}, and the operation parameters are passed in  an {\uldb MsiRecord}{\v MsiRecord_Object} object.  This method returns TRUE if the script  record could be written, FALSE if it could not. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .WriteScriptRecord({\i opcode, params})} \par{\i object}\line Required. The MsiExecute object. \par{\i\b opcode}\line Required. The opcode of the operation to be written. \par{\i\b params}\line Required. An MsiRecord object containing the operation parameters. Note that this argument  is required even if the operation does not accept any parameters. In this case, the record  would be 0-length. \page #{\footnote MsiExecute_CloseScript} ${\footnote MsiExecute.CloseScript} +{\footnote MsiExecute:CloseScript} K{\footnote CloseScript} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CloseScript Method \line\tx360\tab\fs18\b0{\uldb MsiExecute Object}{\v MsiExecute_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Script Operations}{\v Server_ScriptOpcodes} \par}\li180 Closes the script created by {\uldb CreateScript}{\v MsiExecute_CreateScript}. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .CloseScript} \par{\i object}\line Required. The MsiExecute object. \page #{\footnote MsiExecute_EnumerateScript} ${\footnote MsiExecute.EnumerateScript} +{\footnote MsiExecute:EnumerateScript} K{\footnote EnumerateScript} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b EnumerateScript Method \line\tx360\tab\fs18\b0{\uldb MsiExecute Object}{\v MsiExecute_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Script Operations}{\v Server_ScriptOpcodes} \par}\li180 Returns a collection of {\uldb MsiRecords}{\v MsiRecord_Object}, each  containing a script record. See the remarks for the record format. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .EnumerateScript({\i scriptFile})} \par{\i object}\line Required. The MsiExecute object. \par{\i\b scriptfile}\line Required. The full path (string) to an installation script file. \par\fi0\li0{\b Remarks}\par\li180 The record contains the {\uldb opcode}{\v Server_ScriptOpcodes} in field 0 and  the parameters in the following fields. \page #{\footnote MsiExecute_RemoveRollbackFiles} ${\footnote MsiExecute.RemoveRollbackFiles} +{\footnote MsiExecute:RemoveRollbackFiles} K{\footnote RemoveRollbackFiles} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RemoveRollbackFiles Method \line\tx360\tab\fs18\b0{\uldb MsiExecute Object}{\v MsiExecute_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Script Operations}{\v Server_ScriptOpcodes} \par}\li180 This method removes all rollback scripts and backup files on the local machine created before  the specified date, or all rollback scripts if the given date is 0. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RemoveRollbackFiles({\i date})} \par{\i object}\line Required. The MsiExecute object. \par{\i\b date}\line Required. All rollback scripts and files created before this date are removed. If this value is 0, all  rollback scripts and files ever created are removed. \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiExecute_Rollback} ${\footnote MsiExecute.Rollback} +{\footnote MsiExecute:Rollback} K{\footnote Rollback} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Rollback Method \line\tx360\tab\fs18\b0{\uldb MsiExecute Object}{\v MsiExecute_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Script Operations}{\v Server_ScriptOpcodes} \par}\li180 Rolls back changes made to the system since the specified date.  This is accomplished by running  all rollback scripts registered since the specified date. Rollback scripts are registered  with the {\uldb RegisterRollbackScript}{\v MsiConfigurationManager_RegisterRollbackScript} method. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .Rollback({\i date})} \par{\i object}\line Required. The MsiExecute object. \par{\b\i date}\line Required, The date to roll back to. \par\fi0\li0{\b Remarks}\par\li180 \page #{\footnote MsiExecute_RollbackFinalize} ${\footnote MsiExecute.RollbackFinalize} +{\footnote MsiExecute:RollbackFinalize} K{\footnote RollbackFinalize} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RollbackFinalize Method \line\tx360\tab\fs18\b0{\uldb MsiExecute Object}{\v MsiExecute_Object} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Script Operations}{\v Server_ScriptOpcodes} \par}\li180 {\b Not yet implemented.} Calls either {\uldb Rollback}{\v MsiExecute_Rollback} or  {\uldb RemoveRollbackFiles}{\v MsiExecute_RemoveRollbackFiles}  depending on the return state of the install and the current rollback policy for the local machine. \par\li0{\b Syntax}\par\li500\fi-320 {\i object}{\b .RollbackFinalize} \par{\i object}\line Required. The MsiExecute object. \par\fi0\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote MsiApi_MsiDecomposeDescriptor} ${\footnote MsiApi.MsiDecomposeDescriptor} K{\footnote MsiDecomposeDescriptor} +{\footnote MsiApi::MsiDecomposeDescriptor} MsiDecomposeDescriptor\fs18\tab\cf1\fs16\cf1\fs18\par \pard\li120\sa120\sl240\tx360\tx600\tx840\uldb\b0\f1\fs20  \cf1\ul0\v \cf1\v0  \par Returns constituent parts of a descriptor.\par {\b UINT MsiDecomposeDescriptor(}\line  {\b LPCTSTR} szDescriptor,\tab\line  {\b LPCSTR} szProductCode,\tab// returned product\line  {\b LPCSTR} szFeatureId,\tab// returned feature\line  {\b LPCSTR} szComponentCode,\tab// returned component code\line  {\b DWORD} *pcchArgsOffset\tab// returned offset of args in descriptor\line  {\b);}\par {\b Parameters}\par \li300\fi-120 {\i szDescriptor}\line The component descriptor.\par {\i szProductCode}\line Points to a variable that receives the product code. The buffer  should be large enough to hold 39 characters. This parameter can be NULL.\par {\i szFeatureId}\line Points to a variable that receives the component code. The buffer  should be large enough to hold (MAX_FEATURE_CHARS + 1) characters.  This parameter can be NULL.\par {\i szComponentCode}\line Points to a variable that receives the component code. The buffer  should be large enough to hold 39 characters. This parameter can be NULL.\par {\i pcchArgsOffset}\line Points to a variable that will be filled with the offset to the arguments.  This is to handle the case when the descriptor is followed by arguments.  If, for example, the descriptor  is 70 characters long we will pass back 71 to indicate that the arguments  start at the 71st character. This parameter can be NULL. \line {\b Return Values}\par If the function succeeds, the return value is ERROR_SUCCESS.\par If the function fails, the return value is ERROR_INVALID_PARAMETER\par \page #{\footnote MsiApi_MsiGetProductCodeFromPackageCode} ${\footnote MsiApi.MsiGetProductCodeFromPackageCode} K{\footnote MsiGetProductCodeFromPackageCode} +{\footnote MsiApi::MsiGetProductCodeFromPackageCode} MsiGetProductCodeFromPackageCode\fs18\tab\cf1\fs16\cf1\fs18\par \pard\li120\sa120\sl240\tx360\tx600\tx840\uldb\b0\f1\fs20  \cf1\ul0\cf1\v0  \par Enumerates products on the machine, returning the first product  that has the given package code.\par {\b UINT MsiGetProductCodeFromPackageCode(}\line  {\b LPCTSTR} szPackageCode,\tab\line  {\b LPCSTR} szProductCode,\tab// returned product\line  {\b);}\par {\b Parameters}\par \li300\fi-120 {\i szPackageCode}\line The package code to find.\par {\i szProductCode}\line Points to a variable that receives the product code. The buffer  should be large enough to hold 39 characters.\par \line {\b Return Values}\par If the function succeeds, the return value is ERROR_SUCCESS.\par If the function fails, the return value is ERROR_UNKNOWN_PRODUCT\par \page #{\footnote MsiApi_MsiProvideComponentFromDescriptor} ${\footnote MsiApi.MsiProvideComponentFromDescriptor} +{\footnote MsiApi:MsiProvideComponentFromDescriptor} K{\footnote MsiProvideComponentFromDescriptor} MsiProvideComponentFromDescriptor\fs18\tab\cf1\fs16\cf1\fs18\par \pard\li120\sa120\sl240\tx360\tx600\tx840\uldb\b0\f1\fs20 Group \cf1\ul0\v _msi_Service_Functions@msi.hlp\cf1\v0  \par Return full component path, performing any necessary installation. Prompts for source if necessary. Increments usage count for the feature.\par \pard\li120\sl240\b\f1\fs16 UINT MsiProvideComponentFromDescriptor(\b0\par  \b LPCTSTR\b0  \i szDescriptor\i0 ,    // product,feature,component info\par  \b LPTSTR\b0  \i lpPathBuf\i0 ,        // returned path to component's keyfile\par  \b DWORD\b0  *\i pcchPathBuf\i0\tab\b ,\b0      // in/out buffer character count\par  \b DWORD\b0  *\i pcchArgsOffset\i0\tab    // returned offset of args in descriptor\par  \b );\par  \b0\par \pard\sb140\sl280\b\f1\fs24 Parameters\par \pard\li120\sl240\tx360\tx600\tx840\b0\i\f1\fs20 szDescriptor\par \pard\li360\sl240\tx360\tx600\tx840\i0 The component descriptor for the component to be provided.\par \pard\li120\sl240\tx360\tx600\tx840\i lpPathBuf\par \pard\li360\sl240\tx360\tx600\tx840\i0 Points to a variable that receives the path to the component. This parameter can be NULL.\par \pard\li120\sl240\tx360\tx600\tx840\i pcchPathBuf\par \pard\li360\sl240\tx360\tx600\tx840\i0 Points to a variable that specifies the size, in characters, of the buffer pointed to by the \i lpPathBuf\i0  parameter. Upon success of this function, the parameter will contain the length of the string in \i lpPathBuf\i0 .\par \pard\li360\sl240\tqr\tx280\tqr\tx360\tqr\tx600\tqr\tx840 If \i lpPathBuf\i0  is NULL, \i pcchBuf\i0  can be NULL.  \par \pard\li120\sl240\tx360\tx600\tx840\i pcchArgsOffset\par \pard\li360\sl240\tx360\tx600\tx840\i0 Points to a variable that will be filled with the offset to the arguments. This is to handle the case when the descriptor is followed by arguments, as it may be when passed to us by OLE. The offset will be the length of the descriptor. This parameter can be NULL.\par \pard\li120\sl160\tx360\tx600\tx840\fs12\par \pard\sb140\sl280\b\f1\fs24 Return Values\par \pard\li120\sa120\sl240\tx360\tx600\tx840\b0\f1\fs20 If the function succeeds, the return value is ERROR_SUCCESS.\par If the function fails, the return value is one of the following error codes:\par \pard\tx3300\tx6959\b Error Code\tab Meaning\tab\b0\f4\par \pard\tx6960\par \pard\tx3300\tx6959\f1 ERROR_INSTALL_SERVICE_FAILURE\tab Failure accessing the install service\tab\f4\par \f1 ERROR_INSTALL_USEREXIT\tab The user cancelled the installation\tab\f4\par \f1 ERROR_INSTALL_FAILURE\tab Fatal error during installation\tab\f4\par \f1 ERROR_INSTALL_SUSPEND\tab The installation was suspended and is incomplete\tab\f4\par \f1 ERROR_UNKNOWN_PRODUCT\tab The product code does not identify a know product\tab\f4\par \f1 ERROR_UNKNOWN_FEATURE\tab The feature Id does not identify a know feature\tab\f4\par \f1 ERROR_INSTALL_INVALIDARG\tab An invalid argument was passed to the function\tab\f4\par \f1 ERROR_BAD_CONFIGURATION\tab The configuration data is corrupt\tab\f4\par \pard\li120\sl160\tx360\tx600\tx840\f1\fs12\par \pard\sb140\sl280\b\f1\fs24 Remarks\b0\par \pard\f1\fs20 The function is a wrapper around MsiProvideComponent\f0\fs22\par \page #{\footnote MsiApi_MsiConfigureFeatureFromDescriptor} ${\footnote MsiApi.MsiConfigureFeatureFromDescriptor} +{\footnote MsiApi:MsiConfigureFeatureFromDescriptor} K{\footnote MsiConfigureFeatureFromDescriptor} \pard\li120\ri120\sb120\sa120\sl440\slmult0\b\f1\fs40 MsiConfigureFeatureFromDescriptor\cf2\fs16\'a6@\'a6\cf0\fs40\par \pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\uldb\b0\f1\fs20 Group\cf2\ul0\v _msi_Service_Functions@msi.hlp\cf0\v0  \par The \b MsiConfigureFeatureFromDescriptor\b0  configures the installed state for a productfeature.\par \pard\li120\ri120\sl240\slmult0\b\f1\fs16 UINT MsiConfigureFeatureFromDescriptor(\b0\par  \b LPCTSTR\b0  \i szDescriptor\i0 ,\tab         // descriptor\par  \b INSTALLSTATE\b0  \i eInstallState\i0    // install state\par  \b );\par  \b0\par \pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Parameters\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\b0\i\f1\fs20 szDescriptor\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 A descriptor that identifies the feature to be configured.\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i eInstallState\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 The install state desired for the feature. One of the following:\par \pard\tx3242\tx6959\b State\tab Meaning\tab\b0\f1\par \pard\tx6960\par \pard\tx3242\tx6959\f1 INSTALLSTATE_LOCAL\tab The feature should be installed locally\tab\f1\par \f1 INSTALLSTATE_ABSENT\tab The feature should be uninstalled\tab\f1\par \f1 INSTALLSTATE_SOURCE\tab The feature should be installed to run from source\tab\f1\par \f1 INSTALLSTATE_DEFAULT\tab The feature should be installed to its default location\tab\f1\par \pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\f1\fs12\par \pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Return Values\par \pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 If the function succeeds, the return value is ERROR_SUCCESS.\par If the function fails, the return value is one of the following:\par Any {\uldb Action Error} {\v _msi_Action_Errors@msi.hlp} or {\uldb Initialization Error}{\v _msi_Initialization_Errors@msi.hlp}  \par Any error code relating to accessing a file.\par ERROR_INVALID_PARAMETER\par \pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Remarks\par \pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 This function is a wrapper around \uldb MsiConfigureFeature\cf2\ul0\v _msi_MsiConfigureFeature@msi.hlp\cf0\v0  \par \pard\f0\fs22\par \page #{\footnote MsiApi_MsiQueryFeatureStateFromDescriptor} ${\footnote MsiApi.MsiQueryFeatureStateFromDescriptor} +{\footnote MsiApi:MsiQueryFeatureStateFromDescriptor} K{\footnote MsiQueryFeatureStateFromDescriptor} \pard\li120\ri120\sb120\sa120\sl440\slmult0\b\f1\fs40 MsiQueryFeatureStateFromDescriptor\cf2\fs16\'a6@\'a6\cf0\fs40\par \pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\uldb\b0\f1\fs20 Group\cf2\ul0\v _msi_Service_Functions@msi.hlp\cf0\v0  \par The \b MsiQueryFeatureStateFromDescriptor\b0  is a wrapper around MsiQueryFeatureState.\par \pard\li120\ri120\sl240\slmult0\b\f1\fs16 INSTALLSTATE MsiQueryFeatureStateFromDescriptor(\b0\par  \b LPCTSTR\b0  \i szDescriptor\i0 \tab         // descriptor\par  \b );\par  \b0\par \pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Parameters\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\b0\i\f1\fs20 szDescriptor\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 A descriptor that identifies the feature to be queried.\par \pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\f1\fs12\par \pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Return Values\par \pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 The return values are the same as MsiQueryFeatureState\par \pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Remarks\par \pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 This function is a wrapper around \uldb MsiQueryFeatureState\cf2\ul0\v _msi_MsiQueryFeatureState@msi.hlp\cf0\v0  \par \pard\f0\fs22\par \page #{\footnote MsiApi_MsiGetProductInfoFromScript} ${\footnote MsiApi.MsiGetProductInfoFromScript} K{\footnote MsiGetProductInfoFromScript} +{\footnote MsiApi:MsiGetProductInfoFromScript} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MsiGetProductInfoFromScript\fs18\tab\tab\tab\tab\tab\tab{\uldb Group}{\v _msi_Service_Functions@msi.hlp} \par}\li180 The {\b MsiGetProductInfoFromScript} returns the product info for an installer  script file.\par {\b UINT __stdcall MsiGetProductInfoFromScript}(\line  {\b LPCDSTR} szScriptFile,{\tab\tab}// path to installer script file\line  {\b LPDSTR} lpProductBuf39,{\tab\tab}// buffer for product code string GUID, 39 chars\line  {\b LANGID} *plgidLanguage,{\tab\tab}// return language Id\line  {\b DWORD} *pdwVersion,{\tab\tab}// return version: Maj:Min:Build <8:8:16>\line  {\b LPDSTR} lpNameBuf,{\tab\tab\tab}// buffer to return readable product name\line  {\b DWORD} *pcchNameBuf,{\tab\tab}// in/out name buffer character count\line  {\b LPDSTR} lpPackageName,{\tab\tab}// buffer for package name\line  {\b DWORD} *pcchPackageNameBuf{\tab\tab}// in/out path buffer character count\line  {\b);}\par {\b Parameters}\par \li300\fi-120 {\i szScriptFile}\line The full path to the script file. {\i lpProductBuf39}\line Points to a buffer that receives the product code. {\i plgidLanguage}\line Points to a buffer that receives the product language. {\i pdwVersion}\line Points to a buffer that receives the product version. {\i lpNameBuf}\line Points to a buffer that receives the product name. {\i pcchNameBuf}\line Points to a variable that specifies the size, in characters, of the buffer pointed  to by the {\i lpNameBuf} parameter. This size should include the terminating  null character. When the function returns, this variable contains the  length of the class string stored in the buffer. The count returned does  not include the terminating null character. If the buffer is not big enough,  the function returns ERROR_MORE_DATA, and the variable contains the size  of the string, in characters, without counting the null character. {\i lpPackageNameBuf}\line Points to a buffer that receives the package name. {\i pcchPackageNameBuf}\line Points to a variable that specifies the size, in characters, of the buffer pointed  to by the {\i lpPackageNameBuf} parameter. This size should include the terminating  null character. When the function returns, this variable contains the  length of the class string stored in the buffer. The count returned does  not include the terminating null character. If the buffer is not big enough,  the function returns ERROR_MORE_DATA, and the variable contains the size  of the string, in characters, without counting the null character. {\b Return Values}\par If the function succeeds, the return value is ERROR_SUCCESS.\par If the function fails, the return value is one of the following:\line \trowd\trgaph108\trleft0 \cellx3550\cellx8400 \intbl{\b Error Code\cell Meaning\cell}\row \intbl ERROR_INVALID_PARAMETER\cell An invalid argument was passed to the function\cell\row \intbl ERROR_MORE_DATA\cell A buffer was too small to hold the entire value\cell\row \intbl ERROR_INSTALL_FAILURE\cell Could not get script info\cell\row \page #{\footnote MsiApi_MsiAdvertiseProduct} ${\footnote MsiApi.MsiAdvertiseProduct} +{\footnote MsiApi:MsiAdvertiseProduct} K{\footnote MsiAdvertiseProduct} \pard\li120\ri120\sb120\sa120\sl440\slmult0\b\f1\fs40 MsiAdvertiseProduct\cf2\fs16\'a6@\'a6\cf0\fs40\par \pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\uldb\b0\f1\fs20 Group\cf2\ul0\v _msi_Service_Functions@msi\cf0\v0  \par The \b MsiAdvertiseProduct\b0  function advertises a product.\par \pard\li120\ri120\sl240\slmult0\b\f1\fs16 UINT MsiAdvertiseProduct(\b0\par  \b LPCTSTR\b0  \i szPackagePath\i0 ,    // location of package\par  \b LPCTSTR\b0  \i szScriptfilePath\i0 , // if NULL, product is locally advertised\par  \b LPCTSTR\b0  \i szTransforms\i0 ,     // list of transforms to be applied\par  \b LANGID\b0  \i lgidLanguage\i0        // install language\par \b  );\par  \b0\par \pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Parameters\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\b0\i\f1\fs20 szLauncherPath\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 The full path to the launcher of the product being advertised.\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i szScriptfilePath\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 The full path to scriptfile that will be created with the advertise information. If this parameter is NULL then the product is advertised locally.\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i szTransforms\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 A semi-colon delimited list of transforms to be applied.\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i lgidLanguage\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 The language to choose if the install source supports multiple languages. If \i lgidLanguage\i0  is LANG_NEUTRAL then we do a "best match" ??? \par \pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\fs12\par \pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Return Values\par \pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 If the function succeeds, the return value is ERROR_SUCCESS.\par If the function fails, the return value is one of the following:\par Any \uldb Action Error\cf2\ul0\v _msi_Action_Errors@msi.hlp\cf0\v0  or \uldb Initialization Error\cf2\ul0\v _msi_Initialization_Errors@msi.hlp\cf0\v0  \par Any error code relating to accessing a file.\par ERROR_INVALID_PARAMETER\par \page #{\footnote MsiApi_MsiProcessAdvertiseScript} ${\footnote MsiApi.MsiProcessAdvertiseScript} +{\footnote MsiApi:MsiProcessAdvertiseScript} K{\footnote MsiProcessAdvertiseScript} \pard\li120\ri120\sb120\sa120\sl440\slmult0\b\f1\fs40 MsiProcessAdvertiseScript\cf2\fs16\'a6@\'a6\cf0\fs40\par \pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\uldb\b0\f1\fs20 Group\cf2\ul0\v _msi_Service_Functions@msi\cf0\v0  \par The \b MsiProcessAdvertiseScript\b0  function processes an advertise script file into the supplied locations.\par \pard\li120\ri120\sl240\slmult0\b\f1\fs16 UINT MsiProcessAdvertiseScript(\b0\par  \b LPCTSTR\b0  \i szScriptFile\i0 ,\tab  // path to script from MsiAdvertiseProduct\par  \b LPCTSTR\b0  \i szIconFolder\i0 ,\tab  // optional path to folder for icon files and transforms\par  \b HKEY\b0  \i hRegData\i0 ,        // optional parent registry key\par  \b BOOL\b0  \i fShortcuts\i0 ,      // TRUE if shortcuts output\par  \b BOOL\b0  \i fRemoveItems\i0      // TRUE if specified items are to be removed\par \b  );\par  \b0\par \pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Parameters\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\b0\i\f1\fs20 szScriptFile\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 The full path to a scriptfile generated by \uldb MsiAdvertiseProduct\ul0  \v MsiApi_MsiAdvertiseProduct\v0 .\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i szIconFolder\i0\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840 An optional path to a folder in which advertised icon files and transform files should be placed.If this parameter is   NULL, no icon or transform files are written\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i hRegData\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 A registry key under which registry data will be mapped. If this parameter is NULL, the registry data  will be placed under the appropriate key, based on whether the advertisement is per-user or per-machine.\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i fShortcuts\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 TRUE if shortcuts should be created. If a special folder is returned by SHGetSpecialFolderLocation(?) it will hold the shortcuts.\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i fRemoveItems\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 TRUE if specified items are to be removed instead of being created.\par \pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\fs12\par \pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Return Values\par \pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 If the function succeeds, the return value is ERROR_SUCCESS.\par If the function fails, the return value is one of the following error codes:\par \pard\tx3200\tx6959\b Error Code\f1\tab\f1 Meaning\tab\b0\f1\par \pard\tx6960\f1\par \pard\tx3200\tx6959 ERROR_INSTALL_FAILURE\tab Processing failed\tab\f1\par \f1 ERROR_INVALID_PARAMETER\tab An invalid argument was passed to the function\tab\f1\par \pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\f1\fs12\par \pard\cf3\f1\fs28\par \cf0\fs17\par \f0\fs22\par \pard\fi-1800\li1800\tx1800\cf1\fs20\par \page #{\footnote MsiApi_MsiAdvertiseScript} ${\footnote MsiApi.MsiAdvertiseScript} +{\footnote MsiApi:MsiAdvertiseScript} K{\footnote MsiAdvertiseScript} \pard\li120\ri120\sb120\sa120\sl440\slmult0\b\f1\fs40 MsiAdvertiseScript\cf2\fs16\'a6@\'a6\cf0\fs40\par \pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\uldb\b0\f1\fs20 Group\cf2\ul0\v _msi_Service_Functions@msi\cf0\v0  \par The \b MsiAdvertiseScript\b0  function processes an advertise script file into the supplied locations.\par \pard\li120\ri120\sl240\slmult0\b\f1\fs16 UINT MsiAdvertiseScript(\b0\par \b LPCTSTR\b0 \i szScriptFile\i0 ,\tab  // path to script from MsiAdvertiseProduct\par \b DWORD\b0   \i dwFlags\i0 ,\tab      // the bit flags from SCRIPTFLAGS\par \b PHKEY\b0   \i phRegData\i0 , // optional parent registry key if reg data to be populated in a user specified location\par \b BOOL\b0    \i fRemoveItems\i0 // TRUE if specified items are to be removed\par \b  );\par  \b0\par \pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Parameters\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\b0\i\f1\fs20 szScriptFile\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 The full path to a scriptfile generated by \uldb MsiAdvertiseProduct\ul0 \par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i dwFlags\i0\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 The flags that control the advertisement. Can be a combination of the following \line \i0 SCRIPTFLAGS_CACHEINFO = \t 0x00000001L,   // set if the icons need to be created/ removed\line \i0 SCRIPTFLAGS_SHORTCUTS = \t 0x00000004L,   // set if the shortcuts needs to be created/ deleted\line \i0 SCRIPTFLAGS_MACHINEASSIGN = \t 0x00000008L,   // set if product to be assigned to machine\line \i0 SCRIPTFLAGS_REGDATA_APPINFO = \t 0x00000010L,  // set if the app advt registry data needs to be written/ removed\line \i0 SCRIPTFLAGS_REGDATA_CNFGINFO = \t 0x00000020L,  // set if the product cnfg mgmt. registry data needs to be written/ removed\line \i0 SCRIPTFLAGS_REGDATA = \t SCRIPTFLAGS_REGDATA_APPINFO | SCRIPTFLAGS_REGDATA_CNFGINFO \par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i phRegData\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 A registry key under which registry data will be mapped. If this parameter is NULL, the registry data  will be placed under the appropriate key, based on whether the advertisement is per-user or per-machine.\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i fRemoveItems\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 TRUE if specified items are to be removed instead of being created.\par \pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\fs12\par \pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Return Values\par \pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 If the function succeeds, the return value is ERROR_SUCCESS.\par If the function fails, the return value is one of the following error codes:\par \pard\tx3200\tx6959\b Error Code\f1\tab\f1 Meaning\tab\b0\f1\par \pard\tx6960\f1\par \pard\tx3200\tx6959 ERROR_INSTALL_FAILURE\tab Processing failed\tab\f1\par \f1 ERROR_INVALID_PARAMETER\tab An invalid argument was passed to the function\tab\f1\par \pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\f1\fs12\par \pard\cf3\f1\fs28\par \cf0\fs17\par \f0\fs22\par \pard\fi-1800\li1800\tx1800\cf1\fs20\par \page #{\footnote MsiApi_MsiGetPatchInfo} ${\footnote MsiApi.MsiGetPatchInfo} +{\footnote MsiApi:MsiGetPatchInfo} K{\footnote MsiGetPatchInfo} \pard\li120\ri120\sb120\sa120\sl440\slmult0\b\f1\fs40 MsiGetPatchInfo\cf2\fs16\'a6@\'a6\cf0\fs40\par \pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\uldb\b0\f1\fs20 Group\cf2\ul0\v _msi_Service_Functions@msi\cf0\v0  \par The \b MsiGetPatchInfo\b0  function returns information about installed patches.\par \pard\li120\ri120\sl240\slmult0\b\f1\fs16 UINT MsiGetPatchInfo(\b0\par  \b LPCTSTR\b0  \i szPatch\i0 ,    // patch code\par  \b LPCTSTR\b0  \i szProperty\i0 , // attribute name, case-sensitive\par  \b LPTSTR\b0  \i lpValueBuf\i0 ,     // returned value, NULL if not desired\par  \b DWORD\b0  \i *pcchValueBuf\i0        // in/out buffer character count\par \b  );\par  \b0\par \pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Parameters\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\b0\i\f1\fs20 szPatch\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the patch code for the patch. A GUID.\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i szProperty\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the property to be retrieved. INSTALLPROPERTY_LOCALPACKAGE is the only currently supported property.\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i lpValueBuf\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Pointer to a buffer that receives the property value. This parameter can be NULL.\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i pcchValueBuf\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the lpValueBuf parameter. This size should include the terminating NULL character. If lpValueBuf is NULL, pcchValueBuf can be NULL.\par \pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\fs12\par \pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Return Values\par \pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 If the function succeeds, the return value is ERROR_SUCCESS. If the function fails, the return values are the same as those returned from {\uldb MsiGetProductInfo}{\v _msi_MsiGetProductInfo@msi.hlp}\par \page #{\footnote MsiApi_MsiEnumPatches} ${\footnote MsiApi.MsiEnumPatches} +{\footnote MsiApi:MsiEnumPatches} K{\footnote MsiEnumPatches} \pard\li120\ri120\sb120\sa120\sl440\slmult0\b\f1\fs40 MsiEnumPatches\cf2\fs16\'a6@\'a6\cf0\fs40\par \pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\uldb\b0\f1\fs20 Group\cf2\ul0\v _msi_Service_Functions@msi\cf0\v0  \par The \b MsiEnumPatches\b0  function enumerates all patches applied to a single product, in the order the patches were applied.\par \pard\li120\ri120\sl240\slmult0\b\f1\fs16 UINT MsiEnumPatches(\b0\par  \b LPCTSTR\b0  \i szProduct\i0 ,    // product code\par  \b DWORD\b0  \i iPatchIndex\i0 , // 0-based index into installed patches\par  \b LPTSTR\b0  \i lpPatchBuf\i0 ,     // patch code buffer,  size=39\par  \b LPTSTR\b0  \i lpTransformsBuf\i0 ,     // transforms buffer\par  \b DWORD\b0  \i *pcchTransformsBuf\i0        // in/out transforms buffer character count\par \b  );\par  \b0\par \pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Parameters\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\b0\i\f1\fs20 szProduct\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the product whose patches are to be enumerated.\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i iPatchIndex\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the index of the patch to retrieve. This parameter should be zero for the first call to the MsiEnumPatches function and then incremented for subsequent calls.\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i lpPatchBuf\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Pointer to a buffer that receives the patch code.  This buffer must be of size 39.\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i lpTransformsBuf\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Pointer to a buffer that receives the list of transforms from the patch that are to be applied to the product package.  This list has the same format as the TRANSFORMS property.\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i pcchTransformsBuf\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Pointer to a variable that specifies the size, in characters, of the buffer pointed to by the lpTransformsBuf parameter. This size should include the terminating NULL character.\par \pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\fs12\par \pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Return Values\par \pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 If the function succeeds, the return value is ERROR_SUCCESS.\par If the function fails, the possible return values are identical to the return values of MsiEnumFeatures. \page #{\footnote MsiApi_MsiLoadString} ${\footnote MsiApi.MsiLoadString} +{\footnote MsiApi:MsiLoadString} K{\footnote MsiLoadString} \pard\li120\ri120\sb120\sa120\sl440\slmult0\b\f1\fs40 MsiLoadString\cf2\fs16\'a6@\'a6\cf0\fs40\par \pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\uldb\b0\f1\fs20 Group\cf2\ul0\v _msi_Service_Functions@msi\cf0\v0  \par The \b MsiLoadString\b0  function is an extension to the LoadString Windows API to permit specification of a string of a particular language(* This API is not automated)\par \pard\li120\ri120\sl240\slmult0\b\f1\fs16 UINT MsiLoadString(\b0\par  \b HINSTANCE\b0  \i hInstance\i0 ,    // handle to instance containing resource\par  \b UINT\b0  \i uID\i0 , // resource ID of string\par  \b LPDSTR\b0  \i lpBuffer\i0 ,     // buffer to hold string\par  \b int\b0  \i nBufferMax\i0 ,     // buffer length\par  \b WORD\b0  \i wLanguage\i0        // language\par \b  );\par  \b0\par \pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Parameters\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\b0\i\f1\fs20 hInstance\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the instance containing the resource with the string.\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i uID\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the resource ID of the string.\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i lpBuffer\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Pointer to a buffer that receives the string.\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i nBufferMax\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Lenght of buffer.\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i wLanguage\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Value of particular language to be loaded\par \pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\fs12\par \pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Return Values\par \pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 If the function succeeds, the return value is the codepage of the found string.\par If the function fails, it returns 0.  The function fails if the resource could not be found.\par \pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Remarks\par \pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 MsiLoadString could be considered a LoadStringEx (in similar manner as FindResourceEx is to FindResource)\par  MsiLoadString attempts to find a matching string in the following order\par  \i (1)\i0 Language requested (wLanguage parameter)\par  \i (2)\i0 User-Interface language or User Locale language \par  \i (3)\i0 System Default language \par  \i (4)\i0 English (base English, not US English)\par  \i (5)\i0 Language Neutral \page #{\footnote MsiApi_MsiMessageBox} ${\footnote MsiApi.MsiMessageBox} +{\footnote MsiApi:MsiMessageBox} K{\footnote MsiMessageBox} \pard\li120\ri120\sb120\sa120\sl440\slmult0\b\f1\fs40 MsiMessageBox\cf2\fs16\'a6@\'a6\cf0\fs40\par \pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\uldb\b0\f1\fs20 Group\cf2\ul0\v _msi_Service_Functions@msi\cf0\v0  \par The \b MsiMessageBox\b0  function is a wrapper around the Windows MessageBox API that supports non-system codepages. It ignores the MB_APPMODAL, MB_TASKMODAL, and MB_SYSTEMMODAL flags.(* This API is not automated)\par \pard\li120\ri120\sl240\slmult0\b\f1\fs16 int MsiMessageBox(\b0\par  \b HWND\b0  \i hWnd\i0 ,    // handle to window\par  \b LPCDSTR\b0  \i szText\i0 ,     // text for message box\par  \b LPCDSTR\b0  \i szCaption\i0 ,     // text for caption for message box\par  \b UINT\b0  \i uiType\i0        // attributes for buttons to appear on message box\par  \b UINT\b0  \i uiCodepage\i0        // codepage to use\par  \b WORD\b0  \i iLangId\i0        // language to use\par \b  );\par  \b0\par \pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Parameters\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\b0\i\f1\fs20 hWnd\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the handle to the window\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i szText\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the text to appear in the message box\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i szCaption\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the caption for the message box\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i uiType\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the attributes for the message box (which buttons, icons, etc).  Same as Windows API MessageBox documentation\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i uiCodepage\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the codepage to use\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i iLangId\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 Specifies the language to use\par \pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\fs12\par \pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Return Values\par \pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 It returns the return value from the Windows DialogboxParam API. \page #{\footnote MsiApi_MsiIsProductElevated} ${\footnote MsiApi.MsiIsProductElevated} +{\footnote MsiApi:MsiIsProductElevated} K{\footnote MsiIsProductElevated} \pard\li120\ri120\sb120\sa120\sl440\slmult0\b\f1\fs40 MsiIsProductElevated\par \pard \fs20\b0The \b MsiIsProductElevated\b0  function checks the elevation state of a product.\par \pard\li120\ri120\sl240\slmult0\b\f1\fs16 UINT MsiIsProductElevated(\b0\par \b LPCTSTR\b0 \i  szProductCode\i0 ,\tab  // Product code to check.\par \b BOOL*\b0   \i  pfElevated\i0 ,\tab    // pointer to BOOL for result\par \b  );\par  \b0\par \pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Parameters\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\b0\i\f1\fs20 szProductCode\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 The full product code GUID of the product. This may not be NULL or empty.\par \pard\li120\ri120\sl240\slmult0\tx360\tx600\tx840\i pfElevated\i0\par \pard\li360\ri120\sa60\sl240\slmult0\tx360\tx600\tx840\i0 A pointer to a BOOL for the result. This may not be NULL.\par \pard\sb140\sa140\sl280\slmult0\b\f1\fs24 Return Values\par \pard\li120\ri120\sa120\sl240\slmult0\tx360\tx600\tx840\b0\f1\fs20 If the function succeeds, the return value is ERROR_SUCCESS, and the pfElevated is set to TRUE if the product is considered managed. This does not take into account policies such as  AlwaysInstallElevated, but does verify that LOCALSYSTEM owns the product's registry data. The function will always fail on Win9X.\par If the function fails, the return value is one of the following error codes:\par \pard\tx3200\tx6959\b Error Code\f1\tab\f1 Meaning\tab\b0\f1\par \pard\tx6960\f1\par \pard\tx3200\tx6959 ERROR_UNKNOWN_PRODUCT\tab The product is not currently known on this machine.\tab\f1\par \f1 ERROR_INVALID_PARAMETER\tab An invalid argument was passed to the function\tab\f1\par \f1 ERROR_BAD_CONFIGURATION\tab The configuration information for the product is corrup.\tab\f1\par \f1 ERROR_FUNCTION_FAILED\tab The call failed.\tab\f1\par \pard\li120\ri120\sl160\slmult0\tx360\tx600\tx840\f1\fs12\par \pard\cf3\f1\fs28\par \cf0\fs17\par \f0\fs22\par \pard\fi-1800\li1800\tx1800\cf1\fs20\par \page
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\help\property.rtf ===
{\rtf1\ansi {\fonttbl{\f0\fswiss Helv;}{\f1\fmodern Courier New;}} {\colortbl;} \fs20 #{\footnote Property_Contents} ${\footnote Property Contents} K{\footnote Property Summary; Hardware; System} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Standard Properties \line\fs18\b0\tx2400\tab{\uldb Msi Objects}{\v Msi_Objects} \tx4500\tx6600\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par} The following properties are defined by the Microsoft Installer.  Additional properties may be specified by authored data or custom actions.  Properties whose names are entirely upper case can be specified on  the command line or as resources within the launcher. \par\li0{\b Component Locations}\par\li180 {\uldb DATABASE}{\v Property_DATABASE}\tab {\uldb SOURCEDIR}{\v Property_SOURCEDIR}\tab {\uldb TARGETDIR}{\v Property_TARGETDIR}\line {\uldb INSTALLER}{\v Property_INSTALLER}\tab \par\li0{\b Feature Installation Options}\par\li180 {\uldb ADDLOCAL}{\v Property_ADDLOCAL}\tab {\uldb ADDSOURCE}{\v Property_ADDSOURCE}\tab {\uldb REMOVE}{\v Property_REMOVE}\line {\uldb REINSTALL}{\v Property_REINSTALL}\tab {\uldb COMPADDLOCAL}{\v Property_COMPADDLOCAL}\tab {\uldb COMPADDSOURCE}{\v Property_COMPADDSOURCE}\tab {\uldb FILEADDLOCAL}{\v Property_FILEADDLOCAL}\tab {\uldb FILEADDSOURCE}{\v Property_FILEADDSOURCE}\tab \par\li0{\b Other Configurable Properties}\par\li180 {\uldb ACTION}{\v Property_ACTION}\tab {\uldb ALLUSERS}{\v Property_ALLUSERS}\tab {\uldb CCP_DRIVE}{\v Property_CCP_DRIVE}\tab {\uldb EXECUTEMODE}{\v Property_EXECUTEMODE}\tab {\uldb INSTALLLEVEL}{\v Property_INSTALLLEVEL}\tab {\uldb LOGACTION}{\v Property_LOGACTION}\tab {\uldb LOGFILE}{\v Property_LOGFILE}\tab {\uldb LOGMODE}{\v Property_LOGMODE} {\uldb MESSAGEBASE}{\v Property_MESSAGEBASE}\line {\uldb REBOOT}{\v Property_REBOOT}\line {\uldb ROOTDRIVE}{\v Property_ROOTDRIVE}\tab {\uldb SCRIPTFILE}{\v Property_SCRIPTFILE}\tab {\uldb SHORTFILENAMES}{\v Property_SHORTFILENAMES}\line {\uldb TRANSFORMS}{\v Property_TRANSFORMS}\tab {\uldb NOUI}{\v Property_NOUI}\tab \par\li0{\b Advertise/Admin install related information}\par\li180 {\uldb ADTFOLDER}{\v Property_ADTFOLDER}\tab {\uldb ADTSTARTFOLDER}{\v Property_ADTSTARTFOLDER}\tab \par\li0{\b User-Supplied Information}\par\li180 {\uldb COMPANYNAME}{\v Property_COMPANYNAME}\tab {\uldb PRODUCTID}{\v Property_PRODUCTID}\tab {\uldb USERNAME}{\v Property_USERNAME} \par\li0{\b Product-specific Properties Specified in the Property Table}\par\li180 {\uldb ProductCode}{\v Property_ProductCode}\tab {\uldb ProductName}{\v Property_ProductName}\tab {\uldb ProductVersion}{\v Property_ProductVersion}\tab {\uldb ProductLanguage}{\v Property_ProductLanguage}\line {\uldb Manufacturer}{\v Property_Manufacturer}\tab {\uldb PIDTemplate}{\v Property_PIDTemplate}\tab {\uldb DiskPrompt}{\v Property_DiskPrompt}\tab {\uldb DiskSerial}{\v Property_DiskSerial}\line {\uldb ComponentDownload}{\v Property_ComponentDownload}\tab {\uldb SupportPhone}{\v Property_SupportPhone}\tab {\uldb SupportURL}{\v Property_SupportURL}\tab {\uldb LeftUnit}{\v Property_LeftUnit}\tab \par\li0{\b System Folders} - Set by Microsoft Installer as startup\par\li180 {\uldb AppDataFolder}{\v Property_AppDataFolder}\tab {\uldb CommonFilesFolder}{\v Property_CommonFilesFolder}\tab {\uldb DesktopFolder}{\v Property_DesktopFolder}\tab {\uldb FavoritesFolder}{\v Property_FavoritesFolder}\line {\uldb FontsFolder}{\v Property_FontsFolder}\tab {\uldb NetHoodFolder}{\v Property_NetHoodFolder}\tab {\uldb PersonalFolder}{\v Property_PersonalFolder}\tab {\uldb PrintHoodFolder}{\v Property_PrintHoodFolder}\line {\uldb ProgramFilesFolder}{\v Property_ProgramFilesFolder}\tab {\uldb ProgramMenuFolder}{\v Property_ProgramMenuFolder}\tab {\uldb RecentFolder}{\v Property_RecentFolder}\tab {\uldb SendToFolder}{\v Property_SendToFolder}\line {\uldb StartMenuFolder}{\v Property_StartMenuFolder}\tab {\uldb StartupFolder}{\v Property_StartupFolder}\tab {\uldb System16Folder}{\v Property_System16Folder}\tab {\uldb SystemFolder}{\v Property_SystemFolder}\line {\uldb TempFolder}{\v Property_TempFolder}\tab {\uldb TemplateFolder}{\v Property_TemplateFolder}\tab {\uldb WindowsFolder}{\v Property_WindowsFolder}\tab \par\li0{\b Operating System Properties} - Set by Microsoft Installer at startup\par\li180 {\uldb Bidirectional}{\v Property_Bidirectional}\tab {\uldb ComputerName}{\v Property_ComputerName}\tab {\uldb IME}{\v Property_IME}\tab {\uldb Language}{\v Property_Language}\line {\uldb LanguageId}{\v Property_LanguageId}\tab {\uldb LogonUser}{\v Property_LogonUser}\tab {\uldb Modem}{\v Property_Modem}\tab {\uldb Network}{\v Property_Network}\line {\uldb Security}{\v Property_Security}\tab {\uldb SharedWindows}{\v Property_SharedWindows}\tab {\uldb Sound}{\v Property_Sound}\tab {\uldb Version95}{\v Property_Version95}\line {\uldb VersionNT}{\v Property_VersionNT}\tab {\uldb WindowsBuild}{\v Property_WindowsBuild} \par\li0{\b Hardware Properties} - Set by Microsoft Installer at startup\par\li180 {\uldb Alpha}{\v Property_Alpha}\tab {\uldb BorderSide}{\v Property_BorderSide}\tab {\uldb BorderTop}{\v Property_BorderTop}\tab {\uldb CaptionHeight}{\v Property_CaptionHeight}\line {\uldb ColorBits}{\v Property_ColorBits}\tab {\uldb Intel}{\v Property_Intel}\tab {\uldb PhysicalMemory}{\v Property_PhysicalMemory}{\v}\line {\uldb ScreenX}{\v Property_ScreenX}\tab {\uldb ScreenY}{\v Property_ScreenY}\tab {\uldb TextHeight}{\v Property_TextHeight}\line {\uldb VirtualMemory}{\v Property_VirtualMemory}{\v}\tab \par\li0{\b Status Properties} - Updated by Microsoft Installer during install\par\li180 {\uldb Launcher}{\v Property_Launcher}\tab {\uldb CCPTrigger}{\v Property_CCPTrigger}\tab {\uldb Installed}{\v Property_Installed}\tab {\uldb OutOfDiskSpace}{\v Property_OutOfDiskSpace} {\uldb Preselected}{\v Property_Preselected}\tab {\uldb Resume}{\v Property_Resume}\tab {\uldb Time}{\v Property_Time}\tab {\uldb UpdateStarted}{\v Property_UpdateStarted}\tab \page #{\footnote Property_CCP_DRIVE} ${\footnote CCP_DRIVE Property} +{\footnote Property:CCP_DRIVE} K{\footnote CCP_DRIVE} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CCP_DRIVE Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Property to be set to the root path on the removable volume that has the installation for  any of the qualifying products for CCP. \par\li0{\b Set By}\par\li180 Property table, launcher property, command line or throught the UI \par\li0{\b Used By}\par\li180 {\uldb RMCCPSearch}{\v _msi_RMCCPSearch_Action@msi.hlp} action. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 \page #{\footnote Property_SOURCEDIR} ${\footnote SOURCEDIR Property} +{\footnote Property:SOURCEDIR} K{\footnote SOURCEDIR} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SOURCEDIR Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Root directory containing the source files (either the source cabinet file, or the source file tree). \par\li0{\b Set By}\par\li180 Property table, launcher property, or command line \par\li0{\b Used By}\par\li180 Directory resolution actions \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 If not set otherwise, SOURCEDIR will default to the directory containing the {\uldb Launcher}{\v Launcher_Info}. \page #{\footnote Property_TARGETDIR} ${\footnote TARGETDIR Property} +{\footnote Property:TARGETDIR} K{\footnote TARGETDIR} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b TARGETDIR Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 TARGETDIR must be the name of one root in the  {\uldb Directory}{\v Directory_Table@msi.hlp} table. It is used as the location to copy  the {\uldb Launcher}{\v Launcher_Info} and the  {\uldb Installer installation package}{\v Installer_Installer} during an  Admin install. \par\li0{\b Set By}\par\li180 Command line, user interface, {\uldb CostFinalize}{\v _msi_CostFinalize_Action@msi.hlp} \par\li0{\b Used By}\par\li180 Actions. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 \page #{\footnote Property_DATABASE} ${\footnote DATABASE Property} +{\footnote Property:DATABASE} K{\footnote DATABASE} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DATABASE Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Database containing install tables \par\li0{\b Set By}\par\li180 {\uldb Launcher}{\v Launcher_Info} property or command line \par\li0{\b Used By}\par\li180 Used by launcher to open database \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 When creating an admin image, this property must be defined in a resource of  the launcher. It is not sufficient to specify this property on the command-line.  The value of this property is used to copy the correct database file to the  admin image in the {\uldb AdminInstallFinalize}{\v _msi_AdminInstallFinalize_Action@msi.hlp}  action. Also, if this property is defined in the launcher, the launcher can be used  with no command line options. \page #{\footnote Property_INSTALLER} ${\footnote INSTALLER Property} +{\footnote Property:INSTALLER} K{\footnote Installer} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b INSTALLER Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Location of {\uldb installer package for the Installer components}{\v Installer_Installer}. \par\li0{\b Set By}\par\li180 {\uldb Launcher}{\v Launcher_Info} property or command line. \par\li0{\b Used By}\par\li180 Launcher to locate the installer installation package. {\uldb AdminInstallFinalize}{\v _msi_AdminInstallFinalize_Action@msi.hlp} action  to locate the installer package to copy to admin image, only if a relative path is given. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 If the property value is not defined, the Installer must be resident on the system.  If a bare file name is supplied, the package is assumed to reside in the  same directory as the Launcher.  If the property value is a relative path, the components are  assumed to reside in that path beneath the Launcher's directory. \page #{\footnote Property_MESSAGEBASE} ${\footnote MESSAGEBASE Property} +{\footnote Property:MESSAGEBASE} K{\footnote MESSAGEBASE} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MESSAGEBASE Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Specifies the base of the error messages contained within the launcher.  These messages are used for errors that occur before the product database is successfully opened.  The order of messages must agree with the ieiEnum return codes from the installer. \par\li0{\b Set By}\par\li180 Launcher resource property only, must match resource string IDs. \par\li0{\b Used By}\par\li180 Installer to determine string IDs for error messages. \par\li0{\b Default Value}\par\li180 None. If not set, no error or status messages can be displayed. \page #{\footnote Property_INSTALLLEVEL} ${\footnote INSTALLLEVEL Property} +{\footnote Property:INSTALLLEVEL} K{\footnote INSTALLLEVEL} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b INSTALLLEVEL Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The initial 'level' at which features will be selected 'ON' for installation by default.  See the  {\uldb Feature}{\v _msi_Feature_Table@msi.hlp} table for further discussion of install levels. \par\li0{\b Set By}\par\li180 Property table or launcher property \par\li0{\b Used By}\par\li180 Selection resolution actions. \par\li0{\b Default Value}\par\li180 If no value is specified, the install level defaults to 1. \page #{\footnote Property_OutOfDiskSpace} ${\footnote OutOfDiskSpace Property} +{\footnote Property:OutOfDiskSpace} K{\footnote OutOfDiskSpace Property} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b OutOfDiskSpace Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This property is set to a value of TRUE by the {\uldb MsiSelectionManager}{\v MsiSelectionManager_Object}  if any volume that is a target of the current install has insufficient disk space to accomodate the   proposed installation.  If all volumes have sufficient space, the value is FALSE. \par\li0{\b Set By}\par\li180 The {\uldb MsiSelectionManager}{\v MsiSelectionManager_Object}.  This property is valid at any time after  the {\uldb CostInitialize}{\v _msi_CostInitialize_Action@msi.hlp} action has been executed.  The OutOfDiskSpace  property status is dynamically updated any time the total install cost is re-calculated (for example, any time  the install state of any feature is changed via the {\uldb Selection}{\v SpecialDialog_Selection} dialog). \par\li0{\b Used By}\par\li180 Selection resolution actions. \page #{\footnote Property_Installed} ${\footnote Installed Property} +{\footnote Property:Installed} K{\footnote Installed} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Installed Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Set when the product has already been installed. \par\li0{\b Set By}\par\li180 Engine at initialization. \par\li0{\b Used By}\par\li180 UI conditionalization.  May be used to show first-install or maintenance mode UI. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 \page #{\footnote Property_Preselected} ${\footnote Preselected Property} +{\footnote Property:Preselected} K{\footnote Preselected} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Preselected Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Set when selections have been pre-determined and the selection dialog need not be shown.  This occurs when properties such as ADDLOCAL or REMOVE are set on the command line  or when a suspended install is being resumed. \par\li0{\b Set By}\par\li180 Engine at initialization. \par\li0{\b Used By}\par\li180 UI conditionalization.  May be used to suppress any dialogs used to make selections. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 \page #{\footnote Property_UpdateStarted} ${\footnote UpdateStarted Property} +{\footnote Property:UpdateStarted} K{\footnote UpdateStarted} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b UpdateStarted Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Set when changes to the system have begun for this install.  This includes the case  when a suspended install is resumed. \par\li0{\b Set By}\par\li180 Engine at initialization. \par\li0{\b Used By}\par\li180 UI conditionalization.  If this property is set, the user should be asked whether to restore  or continue later after an error and cancellation. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 \page #{\footnote Property_Resume} ${\footnote Resume Property} +{\footnote Property:Resume} K{\footnote Resume} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Resume Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Set when resuming a suspended install.  This property can be used to determine what text to  show the user in the UI.  For example, when not in resume mode the user could be asked  "Are you ready to install?" while in resume mode the user could be asked  "Are you ready to complete your install?". \par\li0{\b Set By}\par\li180 Engine at initialization. \par\li0{\b Used By}\par\li180 UI conditionalization. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 \page #{\footnote Property_ACTION} ${\footnote ACTION Property} +{\footnote Property:ACTION} K{\footnote Action} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ACTION Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Specifies the intial action function that is called after the installer.  in initialized. \par\li0{\b Set By}\par\li180 Must be set by the launcher, normally to the {\b Install} action,   but may be changed to {\b Remove}, {\b Admin}, or other actions  with customized launchers. This property may also be overridden  on the command line. \par\li0{\b Used By}\par\li180 The value of the property is the name of the action to invoke after  the installer is successfully initialized. That action most like will  in turn invoke other actions, commonly by querying the Action table. \par\li0{\b Default Value}\par\li180 None. Install will fail if no action is specified. \par\li0{\b Remarks}\par\li180 \page #{\footnote Property_LOGFILE} ${\footnote LOGFILE Property} +{\footnote Property:LOGFILE} K{\footnote LOGFILE} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b LOGFILE Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Enables logging of messages by specifying a path to the file where the log  information is to be written. The file will be created if not present,  else any old log information from a previous installation will be overwritten  unless the append option is set by the {\uldb LOGMODE}{\v Property_LOGMODE} property.  The logfile is flushed after each line is posted, and it is closed when the  MsiServices object is destroyed. \par\li0{\b Set By}\par\li180 Normally set on the command line, but may be customized into the launcher. \par\li0{\b Used By}\par\li180 The file specified will be opened when the installer is initialized. The  initialization will fail if the log file cannot be opened. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 The first line of the log will be formatted according to the value of the  imgLogHeader entry in the Error table.  Log line formats are determined by the various message and action types,  as well by code that directly writes directly to the log.  The final line of the log will be formatted according to the value of the  imsgLogTrailer entry in the Error table. \page #{\footnote Property_REBOOT} ${\footnote REBOOT Property} +{\footnote Property:REBOOT} K{\footnote Reboot} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b REBOOT Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this property is set to "Force" the installation will reboot at the end, regardless of what the actions require. If the property is set to "Suppress" the installation will not reboot in case of reboots that happen at the end of the installation before the new program can be used. If the reboot is needed to continue the installation, the reboot will still take place. \par\li0{\b Set By}\par\li180 Normally set on the command line, but may be customized into the launcher. \par\li0{\b Used By}\par\li180 By the Engine at termination to override the reboot decision made by the actions. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 This property is typically used by an administrator who installs several products at the same time and wants to have only one reboot at the end of the series of installations. \page #{\footnote Property_LOGMODE} ${\footnote LOGMODE Property} +{\footnote Property:LOGMODE} K{\footnote LOGMODE} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b LOGMODE Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A string containing letters that specify which messages are to be written  to the log file. Options are case-insensitive and order-independent. \par\li0{\b Set By}\par\li180 Launcher resource or command-line setting. \par\li0{\b Used By}\par\li180 MsiEngine uses the value to initialize the logging for the various message types,  only if the {\uldb LOGFILE}{\v Property_LOGFILE} property has been defined. \par\li0{\b Default Value}\par\li180 None. Internal default log options, "dewarim", are used if this property is undefined. \par\li0{\b Log Option Codes} - for message types: {\uldb MsiHandler.Message}{\v MsiHandler_Message}\par\li180 {\f1  i  (imtInfo)        } Informational-only messages\line {\f1  w  (imtWarning)     } Warning messages, not fatal\line {\f1  e  (imtError)       } Error messages, may be fatal\line {\f1  d  (imtDiagnostic)  } Diagnostics, debug build only\line {\f1  a  (imtActionStart) } Start of action notification\line {\f1  r  (imtActionData)  } Action data record, contents action-specific\line {\f1  u  (imtUser)        } User request messages\line {\f1  c  (imtCommonData)     } UI control messages\line {\f1  m  (imtOutOfMemory) } Out of memory messages\line {\f1  p                   } Dump property table, "property = value" at MsiEngine.Terminate {\f1  +                   } Append to existing logfile \page #{\footnote Property_LOGACTION} ${\footnote LOGACTION Property} +{\footnote Property:LOGACTION} K{\footnote LOGACTION} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b LOGACTION Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A list of action names, separated only by semicolons (no spaces), for which logging will  occur. \par\li0{\b Set By}\par\li180 Normally set on the command line, but could be customized into the launcher. \par\li0{\b Used By}\par\li180 MsiEngine.Message \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 The action names in this property are case-insensitive. The list may optionally end with a semicolon. \page #{\footnote Property_ROOTDRIVE} ${\footnote ROOTDRIVE Property} +{\footnote Property:ROOTDRIVE} K{\footnote ROOTDRIVE} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ROOTDRIVE Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 When not in Admin mode, ROOTDRIVE supplies the default paths for any  undefined root directories in the {\uldb Directory}{\v Directory_Table@msi.hlp}  table. If not already defined, this property is defined by the  {\uldb CostInitialize}{\v _msi_CostInitialize_Action@msi.hlp} action to the local  volume with the most available disk space. \par\li0{\b Set By}\par\li180 DirectoryInitialize action, command line \par\li0{\b Used By}\par\li180 {\uldb CreateTargetPaths}{\v MsiDirectoryManager_CreateTargetPaths}  method of the {\uldb MsiDirectoryManager}{\v MsiDirectoryManager_Object} object. \par\li0{\b Default Value}\par\li180 None. (Defined to path of local volume with most available disk space by  DirectoryInitialize) \par\li0{\b Remarks}\par\li180 \page #{\footnote Property_NOUI} ${\footnote NOUI Property} +{\footnote Property:NOUI} K{\footnote NOUI Property} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b NOUI Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this property is set, the UI level used when installing this package is capped  as Basic.  This property can be used when a package has no authored UI to use the  Installer's built in default UI. \par\li0{\b Set By}\par\li180 Property table or command line. \par\li0{\b Used By}\par\li180 Installer to determine what UI to display. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 \page #{\footnote Property_EXECUTEMODE} ${\footnote EXECUTEMODE Property} +{\footnote Property:EXECUTEMODE} K{\footnote EXECUTEMODE Property} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b EXECUTEMODE Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The mode of execution performed by the installer. This property can have one of the  following values: \par\li360 {\f1\b None   } No changes are made to the system, although the UI and database querying are  executed normally.\line {\f1\b Direct } All changes to the system are executed directly by the client, without  using script files. This mode is not  valid when the installer runs in client-server mode. In this case, the execution mode  defaults to None.\line {\f1\b Script } All changes to the system are made through script execution. This is the  default mode. \par\li180 Note that only the first letter of this property value is examined, case insensitively. \par\li0{\b Set By}\par\li180 Launcher property or command line. \par\li0{\b Used By}\par\li180 Engine to determine how to execute system updates. \par\li0{\b Default Value}\par\li180 If not defined, the execution mode defaults to Script. \par\li0{\b Remarks}\par\li180 \page #{\footnote Property_SCRIPTFILE} ${\footnote SCRIPTFILE Property} +{\footnote Property:SCRIPTFILE} K{\footnote SCRIPTFILE Property} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SCRIPTFILE Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this property is set, a script file is created containing all operations executed  during the install. This property defines the location of the script file. If a relative  path is given, the path is assumed to be relative to the location of the launcher. \par\li0{\b Set By}\par\li180 Launcher property or command line. \par\li0{\b Used By}\par\li180 Engine to determine if and where to create a script file. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 This property is completely unrelated to the {\uldb EXECUTEMODE}{\v Property_EXECUTEMODE}  property. In other words, if this property is set, the script will be created regardless  of the installer's execution mode. \page #{\footnote Property_ADDLOCAL} ${\footnote ADDLOCAL Property} +{\footnote Property:ADDLOCAL} K{\footnote ADDLOCAL Property} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ADDLOCAL Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The property value denotes a list of features, delimited by semi-colons, that are to be installed  locally. The features listed are to be found in the {\b Feature } column of the  {\uldb Feature }{\v _msi_Feature_Table@msi.hlp} table. Optionally, the value could be {\b All } to denote  installing all features locally. Thus, if you wish to install all features locally  you would provide the command line {\b ADDLOCAL=All } to the installer. \par\li0{\b Set By}\par\li180 Launcher property or command line. \par\li0{\b Used By}\par\li180 Engine to determine what Features to set to be installed locally. \par\li0{\b Default Value}\par\li180 \par\li0{\b Remarks}\par\li180 Note that the feature names are case-sensitive. Also note that if the {\b\i RunFromSource } column  of the {\uldb Component }{\v _msi_Component_Table@msi.hlp} table for a component has a value of {\b irsSourceOnly }  then the component is installed as run from source. \page #{\footnote Property_ADDSOURCE} ${\footnote ADDSOURCE Property} +{\footnote Property:ADDSOURCE} K{\footnote ADDSOURCE Property} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ADDSOURCE Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The property value denotes a list of features, delimited by semi-colons, that are to be installed  to run from source. The features listed are to be found in the {\b Feature } column of the  {\uldb Feature }{\v _msi_Feature_Table@msi.hlp} table. Optionally, the value could be {\b All } to denote  installing all features to run from source. Thus, if you wish to install all features as run from source  you would provide the command line {\b ADDSOURCE=All } to the installer. \par\li0{\b Set By}\par\li180 Launcher property or command line. \par\li0{\b Used By}\par\li180 Engine to determine what Features to set to be installed as run from source. \par\li0{\b Default Value}\par\li180 \par\li0{\b Remarks}\par\li180 Note that the feature names are case-sensitive. Also note that if the {\b\i RunFromSource } column  of the {\uldb Component }{\v _msi_Component_Table@msi.hlp} table for a component has a value of {\b irsLocalOnly} then the  component is installed locally. \page #{\footnote Property_REMOVE} ${\footnote REMOVE Property} +{\footnote Property:REMOVE} K{\footnote REMOVE Property} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b REMOVE Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The property value denotes a list of features, delimited by semi-colons, that are to be removed, if  installed. The features listed are to be found in the {\b Feature } column of the  {\uldb Feature }{\v _msi_Feature_Table@msi.hlp} table. Optionally, the value could be {\b All } to denote  removing all features. Thus, if you wish to remove all features (i.e. uninstall the entire product),  you would provide the command line {\b REMOVE=All } to the installer. \par\li0{\b Set By}\par\li180 Launcher property or command line. \par\li0{\b Used By}\par\li180 Engine to determine what Features to set to be removed. \par\li0{\b Default Value}\par\li180 \par\li0{\b Remarks}\par\li180 Note that the feature names are case-sensitive. \page #{\footnote Property_REINSTALL} ${\footnote REINSTALL Property} +{\footnote Property:REINSTALL} K{\footnote REINSTALL Property} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b REINSTALL Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The property value denotes a list of features, delimited by semi-colons, that are to be reinstalled.   The features listed are to be found in the {\b Feature } column of the  {\uldb Feature }{\v _msi_Feature_Table@msi.hlp} table. Optionally, the value could be {\b All } to denote  reinstalling all features. Thus, if you wish to reinstall all features you would provide the  command line {\b REINSTALL=All } to the installer. \par\li0{\b Set By}\par\li180 Launcher property or command line. \par\li0{\b Used By}\par\li180 Engine to determine what Features to set to be reinstalled. \par\li0{\b Default Value}\par\li180 \par\li0{\b Remarks}\par\li180 Note that the feature names are case-sensitive. \line \line If the REINSTALL property is set, the {\uldb REINSTALLMODE}{\v Property_REINSTALLMODE} property should  also be set, to indicate the type of reinstall to be performed.  If the REINSTALLMODE property is not  set, then by default all files that are currently installed will be reinstalled, IF the currently  installed file is a lesser version (or is not present). By default, no registry entries will be rewritten.\line \line Note that even if REINSTALL is set to "ALL", only those features that were already installed previously  will be reinstalled.  Thus, if REINSTALL is set for a product that is yet to be installed, no installation  action will take place at all. \page #{\footnote Property_REINSTALLMODE} ${\footnote REINSTALLMODE Property} +{\footnote Property:REINSTALLMODE} K{\footnote REINSTALLMODE Property} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b REINSTALLMODE Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A string containing letters that specify the type of reinstall to perform. Options are case-insensitive  and order-independent.  This property should normally always be used in conjunction with the  {\uldb REINSTALL}{\v Property_REINSTALL} property.  \par\li0{\b Set By}\par\li180 Launcher resource or command-line setting. \par\li0{\b Used By}\par\li180 MsiEngine uses the value to determine the type of reinstall (if any) to perform. \par\li0{\b Default Value}\par\li180 By default the REINSTALLMODE is "romus". \par\li0{\b Reinstall Option Codes}\line {\f1  r  (iefInstallEnable)              } Enable {\b r}einstall of any files/registry found to be invalid.\line {\f1  p  (iefOverwriteNone)              } Reinstall only if file is missing (i.e. verify that the file is {\b p}resent).\line {\f1  o  (iefOverwriteOlderVersions)     } Reinstall if file is missing, or an {\b o}lder version is present.\line {\f1  e  (iefOverwriteEqualVersions)     } Reinstall if file is missing, or an {\b e}qual or older version is present.\line {\f1  d  (iefOverwriteDifferingVersions) } Reinstall if file is missing, or a {\b d}ifferent version is present.\line {\f1  c  (iefOverwriteCorruptedFiles)    } Reinstall if file is missing, or {\b c}orrupt (i.e. the stored checksum doesn't match the computed value).\line {\f1  a  (iefOverwriteAllFiles)          } Force {\b a}ll files to be reinstalled, regardless of checksum or version\line {\f1  u  (iefInstallUserData)            } Re-write all required {\b u}ser registry entries.\line {\f1  m  (iefInstallMachineData)         } Re-write all required local {\b m}achine registry entries.\line {\f1  s  (iefInstallShortcuts)           } Reinstall all {\b s}hortcuts, overwriting any existing shortcut.\line All of the reinstall options shown above, except for iefInstallEnable, can actually be thought of as "detection"  flags, which are used to detect that the feature or features specified by the REINSTALL property are installed properly.  If any of the specified detection operations fail during the reinstall, this fact will be logged for informational  purposes. However, the invalid installation will actually be repaired only if the iefInstallEnable option is also set.  For example, if the iefOverwriteCorruptedFiles flag is set, corrupted files will be detected and logged on reinstall,  but the corrupted files will actually be repaired (by reinstallation) only if the iefInstallEnable flag is also  specified. If the REINSTALLMODE property is defined without the REINSTALL property defined, then the specified "detection"  modes still apply; however, only those features that are selected normally for install will actually be "reinstalled".  Thus, in this case, REINSTALLMODE actually specifies the "overwrite" mode for a normal install. {\b Note:} only those files that are designated in the {\uldb File}{\v _msi_File_Table@msi.hlp} table as containing checksum information  will ever be verified for accurate checksum. \page #{\footnote Property_COMPADDLOCAL} ${\footnote COMPADDLOCAL Property} +{\footnote Property:COMPADDLOCAL} K{\footnote COMPADDLOCAL Property} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b COMPADDLOCAL Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The property value denotes a list of component ID's, delimited by semi-colons, that are to be installed  locally. Specifically, for each listed component ID, the installer examines all features linked   (via the {\uldb FeatureComponents}{\v _msi_FeatureComponents_Table@msi.hlp} table) to that component, and installs the  "cheapest" feature (i.e. the feature that would require the least amount of disk space to install).  The components listed are to be found in the {\b Component } column of the  {\uldb Component }{\v _msi_Component_Table@msi.hlp} table. \par\li0{\b Set By}\par\li180 Launcher property or command line. \par\li0{\b Used By}\par\li180 Engine to determine what Feature(s) to set to be installed locally, based on the specified component(s). \par\li0{\b Default Value}\par\li180 \par\li0{\b Remarks}\par\li180 Note that the component names are case-sensitive. Also note that if the {\b\i RunFromSource } column  of the {\uldb Component }{\v _msi_Component_Table@msi.hlp} table for a component has a value of {\b irsSourceOnly }  then the component will be installed to run from source. \page #{\footnote Property_COMPADDSOURCE} ${\footnote COMPADDSOURCE Property} +{\footnote Property:COMPADDSOURCE} K{\footnote COMPADDSOURCE Property} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b COMPADDSOURCE Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The property value denotes a list of component ID's, delimited by semi-colons, that are to be installed  to run from the source media. Specifically, for each listed component ID, the installer examines all  features linked (via the {\uldb FeatureComponents}{\v _msi_FeatureComponents_Table@msi.hlp} table) to that  component, and installs the "cheapest" feature (i.e. the feature that would require the least  amount of disk space to install). The components listed are to be found in the {\b Component }  column of the {\uldb Component }{\v _msi_Component_Table@msi.hlp} table. \par\li0{\b Set By}\par\li180 Launcher property or command line. \par\li0{\b Used By}\par\li180 Engine to determine what Feature(s) to set to be installed to run from source, based on the specified component(s). \par\li0{\b Default Value}\par\li180 \par\li0{\b Remarks}\par\li180 Note that the component names are case-sensitive. Also note that if the {\b\i RunFromSource } column  of the {\uldb Component }{\v _msi_Component_Table@msi.hlp} table for a component has a value of {\b irsLocalOnly }  then the component will be installed to run locally. \page #{\footnote Property_FILEADDLOCAL} ${\footnote FILEADDLOCAL Property} +{\footnote Property:FILEADDLOCAL} K{\footnote FILEADDLOCAL Property} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FILEADDLOCAL Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The property value denotes a list of file keys, delimited by semi-colons, that are to be installed  to run locally. Specifically, for each listed file key, the installer determines the  component that controls that file, then examines all features linked   (via the {\uldb FeatureComponents}{\v _msi_FeatureComponents_Table@msi.hlp} table) to that component, and installs the  "cheapest" feature (i.e. the feature that would require the least amount of disk space to install).  The file keys listed must be found in the {\b File } column of the  {\uldb File }{\v _msi_File_Table@msi.hlp} table. \par\li0{\b Set By}\par\li180 Launcher property or command line. \par\li0{\b Used By}\par\li180 Engine to determine what Feature(s) to set to be installed locally, based on the specified file key(s). \par\li0{\b Default Value}\par\li180 \par\li0{\b Remarks}\par\li180 Note that the file key names are case-sensitive. Also note that if the {\b\i RunFromSource } column  of the {\uldb Component }{\v _msi_Component_Table@msi.hlp} table for a component has a value of {\b irsSourceOnly }  then the component will be installed to run from source. \page #{\footnote Property_FILEADDSOURCE} ${\footnote FILEADDSOURCE Property} +{\footnote Property:FILEADDSOURCE} K{\footnote FILEADDSOURCE Property} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FILEADDSOURCE Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The property value denotes a list of file keys, delimited by semi-colons, that are to be installed  to run from the source media. Specifically, for each listed file key, the installer determines the  component that controls that file, then examines all features linked   (via the {\uldb FeatureComponents}{\v _msi_FeatureComponents_Table@msi.hlp} table) to that component, and installs the  "cheapest" feature (i.e. the feature that would require the least amount of disk space to install).  The file keys listed must be found in the {\b File } column of the  {\uldb File }{\v _msi_File_Table@msi.hlp} table. \par\li0{\b Set By}\par\li180 Launcher property or command line. \par\li0{\b Used By}\par\li180 Engine to determine what Feature(s) to set to be installed to run from source, based on the specified file key(s). \par\li0{\b Default Value}\par\li180 \par\li0{\b Remarks}\par\li180 Note that the file key names are case-sensitive. Also note that if the {\b\i RunFromSource } column  of the {\uldb _msi_Component }{\v _msi_Component_Table@msi.hlp} table for a component has a value of {\b irsLocalOnly }  then the component will be installed to run locally. \page #{\footnote Property_ADTFOLDER} ${\footnote ADTFOLDER Property} +{\footnote Property:ADTFOLDER} K{\footnote ADTFOLDER Property} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ADTFOLDER Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The property is used during the advertise mode to determine the folder where to place the  proxy/proxies for the product. \par\li0{\b Set By}\par\li180 Launcher property, command line or set in the admin mode UI. \par\li0{\b Used By}\par\li180 Engine to determine where to create the proxy/proxies for the product when run in the  advertise mode. \par\li0{\b Default Value}\par\li180 \par\li0{\b Remarks}\par\li180 \page #{\footnote Property_ADTSTARTFOLDER} ${\footnote ADTSTARTFOLDER Property} +{\footnote Property:ADTSTARTFOLDER} K{\footnote ADTSTARTFOLDER} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ADTSTARTFOLDER Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The property is used during the advertise mode to determine the folder where to place the  shortcut(s) to the proxy/proxies for the product. \par\li0{\b Set By}\par\li180 Launcher property, command line or set in the admin mode UI. \par\li0{\b Used By}\par\li180 Engine to determine where to create the shortcut(s) to the proxy/proxies for the product  when run in the advertise mode. \par\li0{\b Default Value}\par\li180 \par\li0{\b Remarks}\par\li180 \page #{\footnote Property_ALLUSERS} ${\footnote ALLUSERS Property} +{\footnote Property:ALLUSERS} K{\footnote ALLUSERS} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ALLUSERS Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this property is set, the folder properties representing folders in a profile  are set to the folders in the "All Users" profile, if such a profile exists.  Otherwise,  those properties are set to folders in the user's personal profile. \par\li0{\b Set By}\par\li180 Launcher property, command line. \par\li0{\b Used By}\par\li180 {\uldb SetPlatformProperties}{\v MsiServices_SetPlatformProperties}. \par\li0{\b Default Value}\par\li180 None. May be undefined. \par\li0{\b Remarks}\par\li180 \page #{\footnote Property_USERNAME} ${\footnote USERNAME Property} +{\footnote Property:USERNAME} K{\footnote USERNAME} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b USERNAME Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 User performing installation \par\li0{\b Set By}\par\li180 Set by registry properties, overridable on command line \par\li0{\b Used By}\par\li180 Used by UI dialogs, and ultimately for personalization actions \par\li0{\b Default Value}\par\li180 Default value may be put in database Property table \par\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote Property_COMPANYNAME} ${\footnote COMPANYNAME Property} +{\footnote Property:COMPANYNAME} K{\footnote COMPANYNAME} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b COMPANYNAME Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Organization for user performing the installation \par\li0{\b Set By}\par\li180 Set by registry properties, overridable on command line or launcher property. \par\li0{\b Used By}\par\li180 Used by UI dialogs, and ultimately for personalization actions \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote Property_PRODUCTID} ${\footnote PRODUCTID Property} +{\footnote Property:PRODUCTID} K{\footnote PRODUCTID} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b PRODUCTID Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This property initially contains the part of the Product ID entered by the user, and after validation it contains the complete ID. \par\li0{\b Set By}\par\li180 The initial value can be set on the command line or through the UI. At this point the property contains only the part of the Product ID that has to be entered by the user. The {\uldb ValidateProductID}{\v MsiEngine_ValidateProductID} validates this value by comparing it to the {\uldb PIDTemplate}{\v Property_PIDTemplate} property. This method also adds the needed random digits and makes other modifications. Upon successfull validation the value of this property is changed to the complete Product ID. \par\li0{\b Used By}\par\li180 The value is used and modified by the ValidateProductID method, and displayed and modified by the UI. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote Property_LeftUnit} ${\footnote LeftUnit Property} +{\footnote Property:LeftUnit} K{\footnote LeftUnit} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b LeftUnit Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If this property is set, the unit is placed to the left of the number instead of the usual right hand side. This is needed to accomodate languages where this is the accepted format.  \par\li0{\b Set By}\par\li180 The value is set in the {\uldb Property Table}{\v _msi_Property_Table@msi.hlp}.  \par\li0{\b Used By}\par\li180 The property is used by the UI when displaying the size of files and the available space on different volumes. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote Property_PIDTemplate} ${\footnote PIDTemplate Property} +{\footnote Property:PIDTemplate} K{\footnote PIDTemplate} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b PIDTemplate Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 This property contains the string used as a template for the {\uldb PRODUCTID}{\v Property_PRODUCTID}. For the syntax used in the template, see the {\uldb MaskedEdit}{\v ControlType_MaskedEdit} control type. Removal of this property indicates that the Product ID has been successfuly validated. \par\li0{\b Set By}\par\li180 The value is initialy set in the {\uldb Property Table}{\v _msi_Property_Table@msi.hlp}. It is modified (removed) by the {\uldb ValidateProductID}{\v MsiEngine_ValidateProductID} method upon successful validation. \par\li0{\b Used By}\par\li180 The property is used by the ValidateProductID method and the UI when displaying the Product ID. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote Property_CCPTrigger} ${\footnote CCPTrigger Property} +{\footnote Property:CCPTrigger} K{\footnote CCPTrigger} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CCPTrigger Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 If the {\uldb PIDTemplate}{\v Property_PIDTemplate} contains a "=" character indicating a special CCP digit, this digit is pulled from the Product ID upon validation and saved in this property. \par\li0{\b Set By}\par\li180 The {\uldb ValidateProductID}{\v MsiEngine_ValidateProductID} method. \par\li0{\b Used By}\par\li180 CCP??? \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote Property_Launcher} ${\footnote Launcher Property} +{\footnote Property:Launcher} K{\footnote Launcher} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Launcher Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The path to the laucher when an installation in invoked using an Installer API call. \par\li0{\b Set By}\par\li180 Installer API functions that take a launcher argument, pass it to the engine as this property. \par\li0{\b Used By}\par\li180 Installer initialization to determine location of launcher resources. \par\li0{\b Default Value}\par\li180 None. \page #{\footnote Property_ProductCode} ${\footnote ProductCode Property} +{\footnote Property:ProductCode} K{\footnote ProductCode} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ProductCode Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A unique identifier for the particular product release,  represented as a string GUID, e.g. "\{12345678-1234-1234-1234-123456789012\}".  This ID must differ for different versions and languages. \par\li0{\b Set By}\par\li180 Authored into Property table. REQUIRED. \par\li0{\b Used By}\par\li180 Advertised as a product property, as the primary method of specifying the product. \par\li0{\b Default Value}\par\li180 None. \page #{\footnote Property_ProductName} ${\footnote ProductName Property} +{\footnote Property:ProductName} K{\footnote ProductName} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ProductName Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The ProductName property contains the human-readable name of the application being installed  (e.g. Microsoft Office 97). This is only used for display purposes. \par\li0{\b Set By}\par\li180 Authored into Property table. REQUIRED. May be changed by transform. \par\li0{\b Used By}\par\li180 Advertised as a product property. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 \page #{\footnote Property_ProductVersion} ${\footnote ProductVersion Property} +{\footnote Property:ProductVersion} K{\footnote ProductVersion} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ProductVersion Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The string format of the product version. \par\li0{\b Set By}\par\li180 Authored into Property table. REQUIRED. \par\li0{\b Used By}\par\li180 Advertised as a product property, as a numeric value \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 Only the major and minor versions are used for the advertised property. \page #{\footnote Property_ProductLanguage} ${\footnote ProductLanguage Property} +{\footnote Property:ProductLanguage} K{\footnote ProductLanguage} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ProductLanguage Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The numeric language ID  \par\li0{\b Set By}\par\li180 Authored into Property table. REQUIRED. May be changed by transform. \par\li0{\b Used By}\par\li180 Advertised as a product property. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 The language in the summary information stream is to be set from this value. \page #{\footnote Property_Manufacturer} ${\footnote Manufacturer Property} +{\footnote Property:Manufacturer} K{\footnote Manufacturer} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Manufacturer Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The name of the manufacturer for the product. \par\li0{\b Set By}\par\li180 Authored into Property table. REQUIRED. \par\li0{\b Used By}\par\li180 Advertised as a product property. \par\li0{\b Default Value}\par\li180 None. \page #{\footnote Property_DiskPrompt} ${\footnote DiskPrompt Property} +{\footnote Property:DiskPrompt} K{\footnote DiskPrompt} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DiskPrompt Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The localized string displayed when prompting for CD.  This should contain the text printed on the CD surface. \par\li0{\b Set By}\par\li180 Authored into Property table. Required if a CD product. \par\li0{\b Used By}\par\li180 Advertised as a product property. Displayed when CD not detected in any drive. \par\li0{\b Default Value}\par\li180 None. \page #{\footnote Property_DiskSerial} ${\footnote DiskSerial Property} +{\footnote Property:DiskSerial} K{\footnote DiskSerial} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DiskSerial Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The internal serial number for the CD for this particular product release. \par\li0{\b Set By}\par\li180 Authored into Property table. Required if a CD product. \par\li0{\b Used By}\par\li180 Advertised as a product property. Used to locate the CD in any drive. \par\li0{\b Default Value}\par\li180 None. \page #{\footnote Property_SupportPhone} ${\footnote SupportPhone Property} +{\footnote Property:SupportPhone} K{\footnote SupportPhone} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SupportPhone Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Technical support phone number(s). \par\li0{\b Set By}\par\li180 Authored into Property table. Optional. \par\li0{\b Used By}\par\li180 Available for display by product maintenance applet. \par\li0{\b Default Value}\par\li180 None. \page #{\footnote Property_SupportURL} ${\footnote SupportURL Property} +{\footnote Property:SupportURL} K{\footnote SupportURL} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SupportURL Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Internet address for technical support. \par\li0{\b Set By}\par\li180 Authored into Property table. Optional. \par\li0{\b Used By}\par\li180 Available for display by product maintenance applet. \par\li0{\b Default Value}\par\li180 None. \page #{\footnote Property_ComponentDownload} ${\footnote ComponentDownload Property} +{\footnote Property:ComponentDownload} K{\footnote ComponentDownload} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ComponentDownload Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 URL for downloading components by ID (string GUID). \par\li0{\b Set By}\par\li180 Authored into Property table. Optional. \par\li0{\b Used By}\par\li180 Installer uses this value to request a component when it is not  possible to connect any product source (server or CD). \par\li0{\b Default Value}\par\li180 None. \page #{\footnote Property_WindowsFolder} ${\footnote WindowsFolder Property} +{\footnote Property:WindowsFolder} K{\footnote WindowsFolder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b WindowsFolder Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Full path to the Windows folder. Set for Windows platforms. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and Directory table. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 Common values for this property are  C:\\Winnt (NT) and C:\\Windows (Win95). \line This folder will be local, even when configured for shared Windows. \page #{\footnote Property_SystemFolder} ${\footnote SystemFolder Property} +{\footnote Property:SystemFolder} K{\footnote SystemFolder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SystemFolder Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Full path to the System folder. Set for all platforms. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and Directory table \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 Common values for this property are:  C:\\Winnt\\System32 (NT 4.0) and C:\\Windows\\System\\ (Win95). \line\line Windows only:\line This folder is normally a subfolder of the Windows folder.  However, it will reside on a server when configured for shared Windows. \page #{\footnote Property_System16Folder} ${\footnote System16Folder Property} +{\footnote Property:System16Folder} K{\footnote System16Folder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b System16Folder Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Full path to folder for 16-bit system DLLs.  Set for NT 4.0 and above and Win95. Not set for NT 3.51. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and Directory table \par\li0{\b Default Value}\par\li180 None.  \par\li0{\b Remarks}\par\li180 Common values for this property are  C:\\Winnt\\System\\ (NT 4.0) and C:\\Windows\\System\\ (Win95). \page #{\footnote Property_ProgramFilesFolder} ${\footnote ProgramFilesFolder Property} +{\footnote Property:ProgramFilesFolder} K{\footnote ProgramFilesFolder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ProgramFilesFolder Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Full path to the Program Files folder.  Set for all Windows platforms. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and Directory table. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 A common value for this property is C:\\Program Files\\. \page #{\footnote Property_CommonFilesFolder} ${\footnote CommonFilesFolder Property} +{\footnote Property:CommonFilesFolder} K{\footnote CommonFilesFolder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CommonFilesFolder Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Full path to the Common Files folder for the current user.  Set for all Windows platforms. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and Directory table. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 A common value for this property is C:\\Program Files\\Common Files\\. \page #{\footnote Property_StartupFolder} ${\footnote StartupFolder Property} +{\footnote Property:StartupFolder} K{\footnote StartupFolder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b StartupFolder Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Full path to the Startup folder.  By default, this property is set to the folder for  the current user.  If an "All Users" profile exists and the  {\uldb ALLUSERS}{\v Property_ALLUSERS} property is set, than this property is set to the folder  in the "All Users" profile.  Set for NT 4.0 and above and Win95. Not set for NT 3.51. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and Directory table. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 Common values for this property are  C:\\Winnt\\Profiles\\[LogonUser]\\Start Menu\\Programs\\Startup\\ (NT 4.0) and  C:\\Windows\\Start Menu\\Programs\\Startup\\ (Win95). \page #{\footnote Property_TempFolder} ${\footnote TempFolder Property} +{\footnote Property:TempFolder} K{\footnote TempFolder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b TempFolder Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Full path to the Temp folder. Set for all platforms. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and Directory table. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 A common value for this property is  C:\\Temp\\ (Windows). \page #{\footnote Property_StartMenuFolder} ${\footnote StartMenuFolder Property} +{\footnote Property:StartMenuFolder} K{\footnote StartMenuFolder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b StartMenuFolder Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Full path to the Start menu folder.  By default, this property is set to the folder for  the current user.  If an "All Users" profile exists and the  {\uldb ALLUSERS}{\v Property_ALLUSERS} property is set, than this property is set to the folder  in the "All Users" profile.  Set for NT 4.0 and above and Win95. Not set for NT 3.51. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and Directory table. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 Common values for this property are  C:\\Winnt\\Profiles\\[LogonUser]\\Start Menu\\ (NT 4.0) and  C:\\Windows\\Start Menu\\ (Win95). \page #{\footnote Property_PersonalFolder} ${\footnote PersonalFolder Property} +{\footnote Property:PersonalFolder} K{\footnote PersonalFolder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b PersonalFolder Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Full path to the Personal folder for the current user.  Set for NT 4.0 and above and Win95. Not set for NT 3.51. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and Directory table. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 Common values for this property are  C:\\Winnt\\Profiles\\[LogonUser]\\Personal\\ (NT 4.0) and  C:\\My Documents\\ (Win95). \page #{\footnote Property_AppDataFolder} ${\footnote AppDataFolder Property} +{\footnote Property:AppDataFolder} K{\footnote AppDataFolder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b AppDataFolder Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Full path to the Application Data folder for the current user.  Set for NT 4.0 and above. Not set for NT 3.51 or Win95. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and Directory table \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 A common value for this property is  C:\\Winnt\\Profiles\\[LogonUser]\\Application Data\\. \page #{\footnote Property_PrintHoodFolder} ${\footnote PrintHoodFolder Property} +{\footnote Property:PrintHoodFolder} K{\footnote PrintHoodFolder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b PrintHoodFolder Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Full path to the PrintHood (Printer Neighborhood) folder for the  current user.  Set for NT 4.0 and above. Not set for NT 3.51 or Win95. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and Directory table \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 A common value for this property is  C:\\Winnt\\Profiles\\[LogonUser]\\PrintHood\\. \page #{\footnote Property_FontsFolder} ${\footnote FontsFolder Property} +{\footnote Property:FontsFolder} K{\footnote FontsFolder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FontsFolder Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Full path to the Fonts folder.  Set for all platforms. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and Directory table \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 A common value for this property is [WindowsFolder]\\Fonts (Windows). \page #{\footnote Property_ProgramMenuFolder} ${\footnote ProgramMenuFolder Property} +{\footnote Property:ProgramMenuFolder} K{\footnote ProgramMenuFolder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ProgramMenuFolder Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Full path to the Program Menu folder.  By default, this property is set to the folder for  the current user.  If an "All Users" profile exists and the  {\uldb ALLUSERS}{\v Property_ALLUSERS} property is set, than this property is set to the folder  in the "All Users" profile.  Set for NT 4.0 and above and Win95. Not set for NT 3.51. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and Directory table \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 Common values for this property are  C:\\Winnt\\Profiles\\[LogonUser]\\Start Menu\\Programs\\ (NT 4.0) and  C:\\Windows\\Start Menu\\Programs\\ (Win95). \page #{\footnote Property_DesktopFolder} ${\footnote DesktopFolder Property} +{\footnote Property:DesktopFolder} K{\footnote DesktopFolder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b DesktopFolder Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Full path to the Desktop folder.  By default, this property is set to the folder for  the current user.  If an "All Users" profile exists and the  {\uldb ALLUSERS}{\v Property_ALLUSERS} property is set, than this property is set to the folder  in the "All Users" profile.  Set for NT 4.0 and above and Win95. Not set for NT 3.51. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and Directory table \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 Common values for this property are  C:\\Winnt\\Profiles\\[LogonUser]\\Desktop\\ (NT 4.0) and  C:\\Windows\\Desktop\\ (Win95). \page #{\footnote Property_TemplateFolder} ${\footnote TemplateFolder Property} +{\footnote Property:TemplateFolder} K{\footnote TemplateFolder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b TemplateFolder Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Full path to the Template folder for the current user.  Set for NT 4.0 and above and Win95. Not set for NT 3.51. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and Directory table \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 Common values for this property are  C:\\Winnt\\Profiles\\[LogonUser]\\ShellNew\\ (NT 4.0)  and C:\\Windows\\ShellNew\\ (Win95). \page #{\footnote Property_SendToFolder} ${\footnote SendToFolder Property} +{\footnote Property:SendToFolder} K{\footnote SendToFolder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SendToFolder Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Full path to the SendTo folder for the current user.  Set for NT 4.0 and above and Win95. Not set for NT 3.51. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and Directory table \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 Common values for this property are  C:\\Winnt\\Profiles\\[LogonUser]\\SendTo\\ (NT 4.0) and  C:\\Windows\\SendTo\\ (Win95). \page #{\footnote Property_NetHoodFolder} ${\footnote NetHoodFolder Property} +{\footnote Property:NetHoodFolder} K{\footnote NetHoodFolder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b NetHoodFolder Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Full path to the NetHood (Network Neighborhood) folder for the current user.  Set for NT 4.0 and above. Not set for NT 3.51 or Win95. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and Directory table \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 A common value for this property is  C:\\Winnt\\Profiles\\[LogonUser]\\NetHood\\. \page #{\footnote Property_RecentFolder} ${\footnote RecentFolder Property} +{\footnote Property:RecentFolder} K{\footnote RecentFolder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b RecentFolder Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Full path to the Recent folder for the current user.  Set for NT 4.0 and above.  Not set for Win95 or NT 3.51. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and Directory table \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 A common value for this property is  C:\\Winnt\\Profiles\\[LogonUser]\\Recent\\. \page #{\footnote Property_FavoritesFolder} ${\footnote FavoritesFolder Property} +{\footnote Property:FavoritesFolder} K{\footnote FavoritesFolder} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b FavoritesFolder Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Full path to the Favorites folder for the current user.  Set for NT 4.0 and above and Win95. Not set for NT 3.51. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and Directory table \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 Common values for this property are  C:\\Winnt\\Profiles\\[LogonUser]\\Favorites\\ (NT 4.0) and  C:\\Windows\\Favorites\\ (Win95). \page #{\footnote Property_VersionNT} ${\footnote VersionNT Property} +{\footnote Property:VersionNT} K{\footnote VersionNT} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b VersionNT Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The version number for the Windows NT operating system,  undefined if the operating system is not Windows NT.  The value is an integer: MajorVersion * 100 + MinorVersion. \par\li0{\b Set By}\par\li180 MsiServices at startup, read-only. \par\li0{\b Used By}\par\li180 Operating system dependent actions and condition expressions. \par\li0{\b Remarks}\par\li180 Condition expressions may test for WindowsNT simply by using the  property name, or may verify the version using a comparison operator. \page #{\footnote Property_Version95} ${\footnote Version95 Property} +{\footnote Property:Version95} K{\footnote Version95} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Version95 Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The version number for the Windows 95 operating system,  undefined if the operating system is not Windows 95.  The value is an integer: MajorVersion * 100 + MinorVersion. \par\li0{\b Set By}\par\li180 MsiServices at startup, read-only. \par\li0{\b Used By}\par\li180 Operating system dependent actions and condition expressions. \par\li0{\b Remarks}\par\li180 Condition expressions may test for Windows95 simply by using the  property name, or may verify the version using a comparison operator. \page #{\footnote Property_WindowsBuild} ${\footnote WindowsBuild Property} +{\footnote Property:WindowsBuild} K{\footnote WindowsBuild} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b WindowsBuild Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 !!Desciption here.!! \par\li0{\b Set By}\par\li180 Set by Services component at initialization. \par\li0{\b Used By}\par\li180 !!Who uses value?!! \par\li0{\b Default Value}\par\li180 !!Default value (can be undefined)!! \par\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote Property_SharedWindows} ${\footnote SharedWindows Property} +{\footnote Property:SharedWindows} K{\footnote SharedWindows} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SharedWindows Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 !!Desciption here.!! \par\li0{\b Set By}\par\li180 Set by Services component at initialization. \par\li0{\b Used By}\par\li180 !!Who uses value?!! \par\li0{\b Default Value}\par\li180 !!Default value (can be undefined)!! \par\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote Property_ComputerName} ${\footnote ComputerName Property} +{\footnote Property:ComputerName} K{\footnote ComputerName} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ComputerName Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 !!Desciption here.!! \par\li0{\b Set By}\par\li180 Set by Services component at initialization. \par\li0{\b Used By}\par\li180 !!Who uses value?!! \par\li0{\b Default Value}\par\li180 !!Default value (can be undefined)!! \par\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote Property_LogonUser} ${\footnote LogonUser Property} +{\footnote Property:LogonUser} K{\footnote LogonUser} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b LogonUser Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 !!Desciption here.!! \par\li0{\b Set By}\par\li180 Set by Services component at initialization. \par\li0{\b Used By}\par\li180 !!Who uses value?!! \par\li0{\b Default Value}\par\li180 !!Default value (can be undefined)!! \par\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote Property_LanguageId} ${\footnote LanguageId Property} +{\footnote Property:LanguageId} K{\footnote LanguageId} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b LanguageId Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 !!Desciption here.!! \par\li0{\b Set By}\par\li180 Set by Services component at initialization. \par\li0{\b Used By}\par\li180 !!Who uses value?!! \par\li0{\b Default Value}\par\li180 !!Default value (can be undefined)!! \par\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote Property_SHORTFILENAMES} ${\footnote SHORTFILENAMES Property} +{\footnote Property:SHORTFILENAMES} K{\footnote SHORTFILENAMES} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SHORTFILENAMES Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Suppresses the use of long file names. \par\li0{\b Set By}\par\li180 Set by services if the system does not support long file names. May also be set by the launcher or command line to disable long file names. \par\li0{\b Used By}\par\li180 Actions and volume services. \par\li0{\b Default Value}\par\li180 Undefined. \par\li0{\b Remarks}\par\li180 Note: The SHORTFILENAMES property has no direct effect on {\uldb MsiVolume}{\v MsiVolume_Object}  or {\uldb MsiPath}{\v MsiPath_Object} objects at all.  MsiVolume objects support long filenames only  if the volume itself intrinsically supports long names (and the active system software also supports them).  MsiPath objects support long file names if the associated MsiVolume object supports them, UNLESS the  appropriate flag to suppress long file names is specified when the MsiPath object is created.  However, the  {\uldb DirectoryManager}{\v MsiDirectoryManager_Object} does respect the SHORTFILENAMES property, i.e.  it uses the state of this property to determine whether or not to create MsiPath objects with long names  suppressed. \page #{\footnote Property_TRANSFORMS} ${\footnote TRANSFORMS Property} +{\footnote Property:TRANSFORMS} K{\footnote Transform Transforms} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b TRANSFORMS Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 A string containing a list of transforms to be applied to the database. \par\li0{\b Set By}\par\li180 Launcher resource or command-line setting. \par\li0{\b Used By}\par\li180 MsiEngine uses the value to transform the database \par\li0{\b Default Value}\par\li180 Undefined. \par\li0{\b Remarks}\par\li180 Transforms will be applied in the order they are listed in the string.  To specify multiple transforms, separate each with a semi-colon (;). \line Transforms can reside in three locations. The format for specifiying  the transforms varies based on its location: \par\par \trowd \trqc\trgaph108\trleft540  \cellx2160\cellx3960 \pard\plain \widctlpar \intbl \f4\fs20 {\b Location\cell } {\b Format\cell }\row \intbl file\cell filename\cell \row \intbl resource in launcher\cell @transformname\cell \row \intbl child storage in database\cell :transformname\cell \row \li0{\b Example}\par\li180 Suppose the following transforms need to be applied:\line \line\tab trans1, located in a file in c:\\transforms \line\tab trans2, located in a resource \line\tab trans3, located in a child storage of the database \line\line The string would be: c:\\transforms\\trans1;@trans2;:trans3 \page #{\footnote Property_Modem} ${\footnote Modem Property} +{\footnote Property:Modem} K{\footnote Modem} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Modem Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 !!Desciption here.!! \par\li0{\b Set By}\par\li180 !!Who sets value?!! \par\li0{\b Used By}\par\li180 !!Who uses value?!! \par\li0{\b Default Value}\par\li180 !!Default value (can be undefined)!! \par\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote Property_Sound} ${\footnote Sound Property} +{\footnote Property:Sound} K{\footnote Sound} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Sound Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 !!Desciption here.!! \par\li0{\b Set By}\par\li180 !!Who sets value?!! \par\li0{\b Used By}\par\li180 !!Who uses value?!! \par\li0{\b Default Value}\par\li180 !!Default value (can be undefined)!! \par\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote Property_Network} ${\footnote Network Property} +{\footnote Property:Network} K{\footnote Network} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Network Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 !!Desciption here.!! \par\li0{\b Set By}\par\li180 !!Who sets value?!! \par\li0{\b Used By}\par\li180 !!Who uses value?!! \par\li0{\b Default Value}\par\li180 !!Default value (can be undefined)!! \par\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote Property_Language} ${\footnote Language Property} +{\footnote Property:Language} K{\footnote Language} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Language Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 !!Desciption here.!! \par\li0{\b Set By}\par\li180 !!Who sets value?!! \par\li0{\b Used By}\par\li180 !!Who uses value?!! \par\li0{\b Default Value}\par\li180 !!Default value (can be undefined)!! \par\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote Property_IME} ${\footnote IME Property} +{\footnote Property:IME} K{\footnote IME} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b IME Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 !!Desciption here.!! \par\li0{\b Set By}\par\li180 !!Who sets value?!! \par\li0{\b Used By}\par\li180 !!Who uses value?!! \par\li0{\b Default Value}\par\li180 !!Default value (can be undefined)!! \par\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote Property_Bidirectional} ${\footnote Bidirectional Property} +{\footnote Property:Bidirectional} K{\footnote Bidirectional} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Bidirectional Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 {\b This property is not yet set or used.}\line !!Desciption here.!! \par\li0{\b Set By}\par\li180 !!Who sets value?!! \par\li0{\b Used By}\par\li180 !!Who uses value?!! \par\li0{\b Default Value}\par\li180 !!Default value (can be undefined)!! \par\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote Property_Security} ${\footnote Security Property} +{\footnote Property:Security} K{\footnote Security} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Security Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 !!Desciption here.!! \par\li0{\b Set By}\par\li180 !!Who sets value?!! \par\li0{\b Used By}\par\li180 !!Who uses value?!! \par\li0{\b Default Value}\par\li180 !!Default value (can be undefined)!! \par\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote Property_Intel} ${\footnote Intel Property} +{\footnote Property:Intel} K{\footnote Intel} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Intel Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Defined only if running on an Intel processor.  The value is the numeric processor level, i.e. 4 for 486, 5 for P5, 6 for P6, etc... \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and condition expressions. \par\li0{\b Default Value}\par\li180 None. \page #{\footnote Property_Alpha} ${\footnote Alpha Property} +{\footnote Property:Alpha} K{\footnote Alpha} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Alpha Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Defined only if running on an Alpha processor.  The value is the numeric processor level. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and condition expressions. \par\li0{\b Default Value}\par\li180 None. \page #{\footnote Property_PhysicalMemory} ${\footnote PhysicalMemory Property} +{\footnote Property:PhysicalMemory} K{\footnote PhysicalMemory} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b PhysicalMemory Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Size of installed RAM in Megabytes. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and condition expressions. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 \page #{\footnote Property_VirtualMemory} ${\footnote VirtualMemory Property} +{\footnote Property:VirtualMemory} K{\footnote VirtualMemory} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b VirtualMemory Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Amount of available page file space in Megabytes. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and condition expressions. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 \page #{\footnote Property_ScreenX} ${\footnote ScreenX Property} +{\footnote Property:ScreenX} K{\footnote ScreenX} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ScreenX Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Width, in pixels, of the screen. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and condition expressions. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 \page #{\footnote Property_ScreenY} ${\footnote ScreenY Property} +{\footnote Property:ScreenY} K{\footnote ScreenY} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ScreenY Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Height, in pixels, of the screen. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and condition expressions. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 \page #{\footnote Property_TextHeight} ${\footnote TextHeight Property} +{\footnote Property:TextHeight} K{\footnote TextHeight} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b TextHeight Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The height (ascent + descent) of characters, given in logical units.  \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and condition expressions. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 \page #{\footnote Property_CaptionHeight} ${\footnote CaptionHeight Property} +{\footnote Property:CaptionHeight} K{\footnote CaptionHeight} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b CaptionHeight Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Height, in pixels, of normal caption area. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and condition expressions. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 \page #{\footnote Property_BorderTop} ${\footnote BorderTop Property} +{\footnote Property:BorderTop} K{\footnote BorderTop} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b BorderTop Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The height, in pixels, of window borders. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and condition expressions. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 \page #{\footnote Property_BorderSide} ${\footnote BorderSide Property} +{\footnote Property:BorderSide} K{\footnote BorderSide} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b BorderSide Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 The width, in pixels, of window borders. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and condition expressions. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 \page #{\footnote Property_ColorBits} ${\footnote ColorBits Property} +{\footnote Property:ColorBits} K{\footnote ColorBits} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b ColorBits Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 Number of adjacent color bits for each pixel. \par\li0{\b Set By}\par\li180 {\uldb MsiServices.SetPlatformProperties}{\v MsiServices_SetPlatformProperties} \par\li0{\b Used By}\par\li180 Actions and condition expressions. \par\li0{\b Default Value}\par\li180 None. \par\li0{\b Remarks}\par\li180 \page #{\footnote Property_Time} ${\footnote Time Property} +{\footnote Property:Time} K{\footnote Time} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Time Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 !!Desciption here.!! \par\li0{\b Set By}\par\li180 !!Who sets value?!! \par\li0{\b Used By}\par\li180 !!Who uses value?!! \par\li0{\b Default Value}\par\li180 !!Default value (can be undefined)!! \par\li0{\b Remarks}\par\li180 !!Additional notes!!  \page #{\footnote Property_SAMPLE} ${\footnote SAMPLE Property} +{\footnote Property:SAMPLE} K{\footnote SAMPLE} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b SAMPLE Property \line\tx360\tab\fs18\b0{\uldb Property Summary}{\v Property_Contents} \tx3000\tab{\uldb Msi Objects}{\v Msi_Objects} \tx5000\tab{\uldb Database Tables}{\v _msi_Installation_Database_Tables_List@msi.hlp} \par}\li180 !!Desciption here.!! \par\li0{\b Set By}\par\li180 !!Who sets value?!! \par\li0{\b Used By}\par\li180 !!Who uses value?!! \par\li0{\b Default Value}\par\li180 !!Default value (can be undefined)!! \par\li0{\b Remarks}\par\li180 !!Additional notes go here, delete the following text!!  When wrapping text lines, a space must be left after the last word. Replace occurrances of "SAMPLE" with the desired property name. \page
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\help\transfrm.rtf ===
{\rtf1\ansi {\fonttbl{\f0\fswiss Arial;}{\f1\fmodern Courier New;}} {\colortbl;} \fs20 #{\footnote Transform_Overview} ${\footnote Transform} K{\footnote Transform} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b What Is A Transform? \par}\li180 A Transform is a storage file consisting of various streams for the various tables.  Each table stream represents the actions to be performed on that table.  A mask  determines what action to take and is followed by the required data to complete  the action. To view the actions a transform file will perform, use the {\uldb Transform Tool}{\v MsiTran_Tool}  with the {\b -v} option. The following transform actions are supported:\line\line  {\f1      Add a table}\line  {\f1      Delete a table}\line  {\f1      Add a column to a table}\line  {\f1      Add a row to a table}\line  {\f1      Delete a row from a table}\line  {\f1      Update a row in a table}\line \page #{\footnote Transform_Creating} ${\footnote Transform} K{\footnote Transform} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Creating Transforms \par}\li180 Transforms are created by comparing a base database with a reference database  and generating a file containing the differences between  the two. This is accomplished via the  {\uldb GenerateTransform}{\v MsiDatabase_GenerateTransform} method of the  IMsiDatabase object. Or you can use the command line  {\uldb Transform Tool}{\v MsiTran_Tool} with the {\b -g} option.\par \page #{\footnote Transform_Scenarios} ${\footnote Transform} K{\footnote Transform} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Transform Scenarios \par}\li180 The data for a Darwin installation is stored in a set of relational tables. In  many situations a variation of the tables is required:\line\line 1. Localization - minor to major text changes, file and logic changes\line 2. Upgrades/patches - changes and additions to existing tables\line 3. Product variants - addition and removal of components\line 4. Admin customization - tailoring tables to corporate needs\line\line In all these situations, the same technology is used and is incorporated into  the Darwin components. A transform is read and applied to the database tables to  transform them into the desired set of table data. \page #{\footnote Transform_Applying} ${\footnote Transform} K{\footnote Transform} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Applying Transforms \par}\li180 Transforms are generally applied by setting the  {\uldb TRANSFORMS}{\v Property_TRANSFORMS} property to the list of transforms  to be be applied. The engine will apply these transforms to the database   when it opens the database. Transforms can also be applied by calling the  {\uldb SetTransform}{\v MsiDatabase_SetTransform} method of the MsiDatabase  object, or using the command line {\uldb Transform Tool}{\v MsiTran_Tool} with  the {\b -a} option. \page
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\help\suminfo.rtf ===
{\rtf1\ansi {\fonttbl{\f0\fswiss Helv;}{\f1\fmodern Courier New;}} {\colortbl;} \fs20 #{\footnote Summary_Overview} ${\footnote Summary Information} K{\footnote Summary Information;Stream;IStream Interface;Structured Storage} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b What Is The Summary Information Stream? \par}\li180 OLE supports the concept of structured storage accessible through the   {\i IStream} interface.  Stuctured storage, in turn, supports the concept of  property sets as a flexible method for serializing almost any information.  The  OLE specification defines a single standard property set, Summary Information,  which the Windows 95 Shell uses to populate property sheets viewable from  the Explorer.  So, information stored in the Summary Information stream can  be viewed by users when they right mouse click on a Microsoft Installer  installation database or transform and choose Properties.  The Microsoft  Installer takes advantage of this fact by storing useful information in the  Summary Information property set.  This set includes the following properties  with corresponding Property IDs (PID) and data types: \line\par\pard \trowd\trgaph108\trleft540 \cellx2750\cellx5000\cellx5630\cellx7250\cellx10000 \intbl{\b Property Name\cell Property ID\cell PID\cell Type\cell Installer Usage\cell }\row \intbl{\uldb Codepage}{\v Summary_Codepage}\cell PID_CODEPAGE\cell 1\cell VT_12\cell\row \intbl{\uldb Title}{\v Summary_Title}\cell PID_TITLE\cell 2\cell VT_LPSTR\cell File Type Description\cell\row \intbl{\uldb Subject}{\v Summary_Subject}\cell PID_SUBJECT\cell 3\cell VT_LPSTR\cell Product Name\cell\row \intbl{\uldb Author}{\v Summary_Author}\cell PID_AUTHOR\cell 4\cell VT_LPSTR\cell Vendor\cell\row \intbl{\uldb Keywords}{\v Summary_Keywords}\cell PID_KEYWORDS\cell 5\cell VT_LPSTR\cell Help for User\cell\row \intbl{\uldb Comments}{\v Summary_Comments}\cell PID_COMMENTS\cell 6\cell VT_LPSTR\cell Help for User\cell\row \intbl{\uldb Template}{\v Summary_Template}\cell PID_TEMPLATE\cell 7\cell VT_LPSTR\cell Platform, LangIDs\cell\row \intbl{\uldb Last Saved By}{\v Summary_SavedBy}\cell PID_LASTAUTHOR\cell 8\cell VT_LPSTR\cell\row \intbl{\uldb Revision Number}{\v Summary_Revision}\cell PID_REVNUMBER\cell 9\cell VT_LPSTR\cell Product Revision\cell\row \intbl{\uldb Last Printed}{\v Summary_LastPrinted}\cell PID_LASTPRINTED\cell 11\cell VT_FILETIME\cell\row \intbl{\uldb Create Time/Date}{\v Summary_Created}\cell PID_CREATE_DTM\cell 12\cell VT_FILETIME\cell Product Release Date\cell\row \intbl{\uldb Last Save Time/Date}{\v Summary_Saved}\cell PID_LASTSAVE_DTM\cell 13\cell VT_FILETIME\cell Last Database Modification\cell\row \intbl{\uldb Page Count}{\v Summary_PageCount}\cell PID_PAGECOUNT\cell 14\cell VT_I4\cell Minimum Installer Version\cell\row \intbl{\uldb Word Count}{\v Summary_SourceType}\cell PID_MSISOURCE\cell 15\cell VT_I4\cell Install Source Type\cell\row \intbl{\uldb Character Count}{\v Summary_CharCount}\cell PID_CHARCOUNT\cell 16\cell VT_I4\cell Transform Restrictions\cell\row \intbl{\uldb Creating Application}{\v Summary_Creator}\cell PID_APPNAME\cell 18\cell VT_LPSTR\cell "Microsoft Installer"\cell\row \intbl{\uldb Security}{\v Summary_Security}\cell PID_SECURITY\cell 19\cell VT_I4\cell Read-only Status\cell\row The Microsoft Installer currently maintains two storage formats:  a product specific {\uldb Installation Database}{\v NoHelp}, and a language or  version specific {\uldb Transform}{\v NoHelp}. The CLSID for the storage is  set to the appropriate format class for the particular format, independent  of the Summary Information for the storage. Values of summary properties for each of the file types are described in the following table (NOT UP TO DATE!): \line\par\pard \trowd \trgaph108\trleft540 \cellx2700\cellx4870\cellx7030\cellx9210  \intbl{\b {\i Summary Property}\cell Configuration Database\cell Installation Database\cell Transform\cell } \intbl{\uldb {\i Title}}{\v Summary_Title}\cell  [{\uldb SummaryTitle}{\v Summary_Title}] (e.g., "Configuration Database")\cell  [{\uldb SummaryTitle}{\v Summary_Title}] (e.g., "Installation Database")\cell  [{\uldb SummaryTitle}{\v Summary_Title}] (e.g., "Transform")\cell\row \intbl{\uldb {\i Subject}}{\v Summary_Subject}\cell [{\uldb ProductName}{\v Summary_AppName}]\cell [{\uldb ProductName}{\v Summary_AppName}]\cell [{\uldb ProductName}{\v Summary_AppName}]\cell \row \intbl{\uldb {\i Author}}{\v Summary_Author}\cell Microsoft Corporation\cell Microsoft Corporation\cell Microsoft Corporation\cell \row \intbl{\uldb {\i Keywords }}{\v Summary_Keywords}\cell [{\uldb SummaryKeywords}{\v Summary_Keywords}]\cell [{\uldb SummaryKeywords}{\v Summary_Keywords}]\cell [{\uldb SummaryKeywords}{\v Summary_Keywords}]\cell \row \intbl{\uldb {\i Comments }}{\v Summary_Comments}\cell  [{\uldb SummaryComments}{\v Summary_Comments}] (e.g.,The Configuration Database contains information about all Microsoft Installer installed products such as PID, location of Installation Database, shared components, etc.)\cell [{\uldb SummaryComments}{\v Summary_Comments}] (e.g., An Installation Database contains the logic and data required to install or modify the installation of a product on a user\rquote s machine.)\cell  [{\uldb SummaryComments}{\v Summary_Comments}] (e.g., A Transform is a set of changes to be applied to an Installation Database prior to processing the database.  Transforms can be used for creating language version, upgrades, and the like.)\cell\row \intbl{\uldb {\i Template }}{\v Summary_Template}\cell NULL\cell platform;default language ID;other languageIDs\cell  base platform;base language ID\cell\row \intbl{\uldb {\i Last Saved By }}{\v Summary_SavedBy}\cell [{\uldb USERNAME}{\v Property_USERNAME}]\cell NULL\cell new platform;new language ID\cell\row \intbl{\uldb {\i Revision Number }}{\v Summary_Revision}\cell NULL\cell Product code and version\cell  Base product code and version;New product code and version\cell\row \intbl{\uldb {\i Last Printed}}{\v Summary_LastPrinted}\cell NULL\cell Install time\cell NULL\cell\row \intbl{\uldb {\i Create Time/Date }}{\v Summary_Created}\cell Time & date the Configuration Database was created on a user\rquote s machine.\cell  Time & date stamped here at Microsoft before shipment\cell Time & date stamped here at Microsoft before shipment\cell\row \intbl{\uldb {\i Last Saved Time/Date }}{\v Summary_Saved}\cell Time & date of the last time a modification was made.\cell NULL\cell NULL\cell\row  \intbl{\uldb {\i Number of Pages}}{\v Summary_PageCount}\cell MSI version\cell MSI version\cell MSI version\cell\row \intbl{\uldb {\i Source Type}}{\v Summary_SourceType}\cell NULL\cell Type code\cell NULL\cell\row \intbl{\uldb {\i Number of Characters}}{\v Summary_CharCount}\cell NULL\cell NULL\cell transform restrictions\cell\row \intbl{\i\uldb Creating Application }{\v\f2 Summary_Creator}\cell "Microsoft Installer"\cell "Microsoft Installer"\cell "Microsoft Installer"\cell\row \intbl{\i\uldb Security}{\v Summary_Security}\cell 0 (none)\cell 2 (read-only recomm.)\cell 4 (read-only enforced)\cell\row \par  \page #{\footnote Summary_AppName} ${\footnote AppName Summary Property} K{\footnote AppName Summary Property} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b AppName Summary Property \par}\li180 \page #{\footnote Summary_Codepage} ${\footnote Codepage Summary Property} K{\footnote Codepage Summary Property} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Codepage Summary Property \par}\li180 The Codepage Summary Property identifies the codepage used to display the Summary Information.  This property never changes. \page #{\footnote Summary_Title} ${\footnote Title Summary Property} K{\footnote Title Summary Property} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Title Summary Property \par}\li180 The Title Summary Property is used to convey what the *.MSI file is, so the  value for this summary property is either "Installation Database",  "Transform", or "Configuration Database", and it never changes. \page #{\footnote Summary_Subject} ${\footnote Subject Summary Property} K{\footnote Subject} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Subject Summary Property \par}\li180 This summary property is used to convey to a file browser the product that can be installed  using the logic and data in this installation database.  For example, the  value of the summary property for Office 97 would be; "Microsoft Office 97  Professional". This value is typically set from the installer property {\uldb ProductName}{\v Property_ProductName}. \page #{\footnote Summary_Author} ${\footnote Author Summary Property} K{\footnote Author} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Author Summary Property \par}\li180 The Author Summary Property is used to convey to a file browser who initially created an installation  database. This value is typically set from the installer property {\uldb Manufacturer}{\v Property_Manufacturer}. \page #{\footnote Summary_Keywords} ${\footnote Keywords Summary Property} K{\footnote Keywords} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Keywords Summary Property \par}\li180 This summary property is for use by file browsers to hold kewords that  can permit the database file to be found in a keyword search. The set  of keywords typically will include "Installer" as well as product-specific keywords,  and may be localized.. \page #{\footnote Summary_Comments} ${\footnote Comments Summary Property} K{\footnote Comments} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Comments Summary Property \par}\li180 The Comments Summary Property is used to convey the general purpose of the  installation database.  By default the value for this summary property is set  to the following: \tab "This installation database contains the logic and data\line \tab required to install <{\i product name}>." where <{\i product name}> is the name of the product being installed (e.g.,  "Microsoft Office 97 Professional").  In general the value for this summary  property only changes in the product name, nothing else.  But for localization  reasons and to allow the modification of this summary property, the Microsoft \page #{\footnote Summary_Template} ${\footnote Template Summary Property} K{\footnote Template} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Template Summary Property \par}\li180 The Template Summary Property is somewhat overloaded.  Since there is no  notion of a template in the Microsoft Installer this summary property could  be left blank.  However, a location is required for the platform and   language version(s) supported by an installation database.  The Template   summary property is used for this purpose.  In all database types this  property has the same form.  The value is a list of the platform supported by  this database (e.g., "Intel"), and the  language ID (e.g. "1033" for US English) of all languages that are  supported by this database.  The list is delimited by semi-colons.  For example,  a database for the Intel platform that supports U.S. English, Farsi, and   Byelorussian would have this property set to: \tab"Intel;1033;1065;1059" There are variations of this property depending on whether it is in a source   installation database, maintenance database, transform, or configuration   database.\par {\b Source Installation Database}\line In a source installation database any number of languages may be  specified.  If more than one language is specified then a multi-language  install will be done.  Listing only one language specifies a single-langage  install.\par {\b Maintenance Database}\line In a maintenance database only one language will be specified.  This is the  language of the installed product.\par {\b Transform}\line In a transform file only one language may be specified.  The specified  platform and language are used, in combination with the transform  restrictions, to determine whether a this transform can be applied to a   particular database.  Either or both of these properties may be left blank  if no transform restriction relies on them to validate the transform.\par {\b Configuration Database}\line This property is NULL in a configuration database. \page #{\footnote Summary_SavedBy} ${\footnote Last Saved By Summary Property} K{\footnote Last Saved By} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Last Saved By Summary Property \par}\li180 In an installation database the Last Saved By Summary Property is used to  keep track of who made the last changes to the database. Initially the value  for this summary property is set to NULL. However, should a user choose to  make modifications to an installation the value for this summary property  changes.  The value is set to the value of the  {\uldb USERNAME}{\v Property_USERNAME} property defined by the Microsoft  Installer.\par {\b Transform}\line In a transform this property is used for a different purpose. It contains  the platform and language ID(s) that a database should have after it has  been transformed. In other words, it specifies what the Template property  should be set to in the new database. See the description of the   {\uldb Template}{\v Summary_Template} property for information about the form of  this property.\par {\b Configuration Database}\line This property is NULL in a configuration database. \page #{\footnote Summary_Revision} ${\footnote Revision Number Summary Property} K{\footnote Revision Number} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Revision Number Summary Property \par}\li180 The Revision Number Summary Property contains the product ID and version.  The product ID is a GUID code representing a  product. The version is stored in a string with the format  "Maj.Min.Inc.Build". For example, Word 6.0 Build 3280 could be stored as: \tab "\{000C1101-0000-0000-C000-000000000046\}7.0.0.3280" {\b Transform}\line In a transform the product ID and version of both the original and transformed  database are stored. They are separated with a semi-colon. For example, a  transform that transforms a database from Office Pro 7.0 to  Office Standard 7.0 could have this property set to: \tab "\{000C1101-0000-0000-C000-000000000046\}7.0.0.0;\{000C1101-0000-0000-C000-000000000047\}7.0.0.0" {\b Configuration Database}\line This property is NULL is a configuration database.  \page #{\footnote Summary_LastPrinted} ${\footnote Last Printed Summary Property} K{\footnote Last Printed} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Last Printed Property \par}\li180 The Last Printed property is used to convey when the installation occurred  (i.e. when the maintenance database was created). Thus, it is NULL in all  databases except the maintenance database. \page #{\footnote Summary_Created} ${\footnote Create Time/Date Summary Property} K{\footnote Create Time/Date} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Create Time/Date Summary Property \par}\li180 The Create Time/Date Summary Property is used to convey when the installation  database was created.  This property is set at Microsoft as part of the  authoring process and never changes. \page #{\footnote Summary_Saved} ${\footnote Last Saved Time/Date Summary Property} K{\footnote Last Saved Time/Date} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Last Saved Time/Date Summary Property \par}\li180 The Last Saved Time/Date Summary Property is used to convey when the last time  the installation database was modified.  Each time a user changes an  installation the value for this summary property is updated to the current  system time/date at the time the installation database was saved.  Initially  the value for this summary property is set to NULL to indicate that no changes  have yet been made. \page #{\footnote Summary_PageCount} ${\footnote Page Count Summary Property} K{\footnote Page Count Summary Property} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Page Count Summary Property \par}\li180 The Page Count Summary Property contains the minimum Darwin version reequired.  It is stored as an integer in the form: Major * 100 + minor. \page #{\footnote Summary_CharCount} ${\footnote Character Count Summary Property} K{\footnote Character Count Summary Property} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Character Count Summary Property \par}\li180 The Character Count Summary Property is only used in transforms. The upper word  contains the transform validation flags. The lower word contains the transform  error condition flags. !! more to be filled in here when implemented \page #{\footnote Summary_Creator} ${\footnote Creating Application Summary Property} K{\footnote Creating Application} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Creating Application Summary Property \par}\li180 The Creating Application Summary Property is used to convey what  application created the installation database.  In general the value for  this summary property is "Microsoft Installer".  However, over time corporate  customers and/or OEMs may use other tools, via {\uldb OLE Automation}{\v Automate_Info},  to create installation databases. \page #{\footnote Summary_Security} ${\footnote Security Summary Property} K{\footnote Security;PID_SECURITY} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b Security Summary Property \par}\li180 The Security Summary Property is used to convey whether the file should be  opened read-only or read-write. Possible values are:\par \tab 0\tab No restriction\line \tab 2\tab Read-only recommended\line \tab 4\tab Read-only enforced \page #{\footnote Summary_SourceType} ${\footnote MSI FileType Summary Property} K{\footnote Source Imaage Type;PID_MSISOURCE} \pard\f0\cf1\sb90{\li-150\fi150\brdrb\fs24\b MSI Source Type Summary Property \par}\li180 The MSI Source Type Summary Property is used to indicate the type  of source file image. If this property is not present, it defaults to 0.  The location of the image is determined by the {\f1 SOURCEFILE} property,  which defaults to the location of the launcher. Note that this property is  stored in place of the standard {\bWord Count} property. \line\tab {\f1 0}\tab Tree image matching the Directory table, long file names. \line\tab {\f1 1}\tab Tree image matching the Directory table, short file names. \line\tab {\f1 2}\tab Cabinet and files matching the Media table, long file names. \line\tab {\f1 3}\tab Cabinet and files matching the Media table, short file names. \page
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\msi\legacy\placefil.txt ===
; This file is used to specify where every file built by the NT build lab is
; binplaced relative to the root of the distribution point.  If a file is not
; listed, it will end up in the dump directory.
;
; The format is like this:
;
; <imagename>    <class name>
;
; where <imagename> is the filename.ext and <class name> is the directory off
; the root of the distribution point (retail is a placeholder for the root).
; If there are multiple class names for a single image, use a colon to separate
; each.
;
; All bits that ship in the NT base product and are installed with winnt32,
; must have a class name of retail.
;

msi.dll	instmsi\unicode
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\msipol\readme.txt ===
The way to use the msi client side extension

building

build this dll (msipol.dll)
cd msipoladd
build msipoladd.exe

Note: this dll doesn't build in ansi currently..

running

Admin side
-----------

Copy msipol.dll and msipoladd.exe to the admin machine
Create a GPO using gpedit and link to the OU of the machine that you are interested in.
Find the name of this GPO using gpedit and use
msipoladd.exe 

For eg.
where the guid is the name of the GPO

msipoladd LDAP://CN={C1BBE5DF-E08F-4FFB-8317-112AAA443D79},CN=Policies,CN=System,DC=ushdom1,DC=nttest,DC=microsoft,DC=co
m e:\testcerts\certs\cert3.cer 0

This will add a certificate to the installable certificate list..


Client Side
-----------

Copy msipol.dll to %windir%\system32 
regsvr32 msipol.dll
secedit /refreshpolicy machine_policy to refresh the policy.


After that point call WinVerifyTrust on any package with the guid
MSI_ACTION_ID_INSTALLABLE..
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\msitools\iceman\placefil.txt ===
; This file is used to specify where every file built by the NT build lab is
; binplaced relative to the root of the distribution point.  If a file is not
; listed, it will end up in the dump directory.
;
; The format is like this:
;
; <imagename>    <class name>
;
; where <imagename> is the filename.ext and <class name> is the directory off
; the root of the distribution point (retail is a placeholder for the root).
; If there are multiple class names for a single image, use a colon to separate
; each.
;
; All bits that ship in the NT base product and are installed with winnt32,
; must have a class name of retail.
;

;
; postbuild batch file
;
icecub.mak        instmsi\cub

;
; CUB files
;
mergemod.cub      instmsi\cub
darice.cub        instmsi\cub
logo.cub          instmsi\cub


;
; binary table import files
;
full_bin.idt      instmsi\cub
logo_bin.idt      instmsi\cub
mod_bin.idt       instmsi\cub


;
; custom action DLLs and scripts
;

msiice.dll        instmsi\cub\binary
msiice11.dll      instmsi\cub\binary
msiice15.dll      instmsi\cub\binary
modice.dll        instmsi\cub\binary
shrice.dll        instmsi\cub\binary
shrice11.dll      instmsi\cub\binary
shrice15.dll      instmsi\cub\binary
ice08.vbs         instmsi\cub\binary
ice09.vbs         instmsi\cub\binary
ice32.vbs         instmsi\cub\binary
ice61.vbs         instmsi\cub\binary
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\msitools\msi9xmig\placefil.txt ===
; This file is used to specify where every file built by the NT build lab is
; binplaced relative to the root of the distribution point.  If a file is not
; listed, it will end up in the dump directory.
;
; The format is like this:
;
; <imagename>    <class name>
;
; where <imagename> is the filename.ext and <class name> is the directory off
; the root of the distribution point (retail is a placeholder for the root).
; If there are multiple class names for a single image, use a colon to separate
; each.
;
; All bits that ship in the NT base product and are installed with winnt32,
; must have a class name of retail.
;

;
; migration dll
;
migrate.dll         win9xmig\msi
msintmig.dll        win9xmig\msi
msi9xmig.dll        win9xmig\msi
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\msitools\msiloc\msiloc.txt ===
MSILOC.EXE -- Copyright (c) Microsoft Corporation 2000-2001.  All rights reserved.

- compile unicode for Windows NT 4.0, Windows 2000, Windows XP
- compile ansi for Windows 9X
- compiled from msiloc.cpp sample code

FEATURES:
1.) Generates a resource file (.rc) from a Windows Installer database (.msi)
2.) Imports a resource dll (.dll) into a Windows Installer database (.msi)

==================================================================================================================
msiloc /? will display the command line options availabe.  A summary of the options is provided below.

EXPORT .msi to .rc
	msiloc.exe -e {database} {option 1} [{option 2}...]
IMPORT .dll (.res) into .msi
	msiloc.exe -i {database} {resource dll} {option 1} [{option 2}...]

OPTIONS
-d *		// all dialogs, available in both export and import modes
-d {dialog}		// specific dialog, available in both export and import modes
-s * *		// all strings, available in import mode
-s {table} {column}	// specific table column, available in export mode
-x		// no binary data, available in export mode
-c {database}	// save to new database, available in export and import modes

The -d {dialog} option can be specified up to 32 times on the command line.
The -s {table} {column} option can be specified up to 32 times on the command line.
The -d * option cannot be used with the -d {dialog} option.

The tool does not automattically create a compiled resource file (.res).  Use the following command to create it. RC.EXE is availabe with Microsoft Visual Studio and is the resource compiler.
	rc.exe {resource file}

For import, the tool requires that the localized compiled resource file (.res) be linked into a dynamic link library (.dll).  Use the following command to create it.  LINK.EXE is available with Microsoft Visual Studio and is the linker.
	link.exe /DLL /NOENTRY /NODEFAULTLIB /MACHINE:iX86 /OUT:{resource dll} {compiled .res file}

==================================================================================================================
Important Information:

1.) Exporting a MSI to RC only works with a database that is marked langauge neutral.  To check the codepage of
      your database, use the msiinfo tool with the following command line.  The msiinfo tool is provided in the
    Windows Installer 1.1 SDK.
	msiinfo {database} /d
    Alternatively, you can use the MsiDatabaseExport API to export the _ForceCodepage table.

2.) You can only import a localized resource file via the DLL into a database whose codepage is LANGUAGE_NEUTRAL
    or whose codepage matches the codepage of the localized resource file.

3.) When importing on Windows 9x, the User/System Locale must be set to the codepage of the localized resource
    file.

4.) When importing on WindowsNT/Windows2000, the codepage of the localized resource file must be installed on
    the system.

5.) The tool creates three tables -- _RESDialogs, _RESControls, and _RESStrings for maintaining resource Id's
    and for permitting correct update of the data.  Therefore the database is always opened read/write.  In
    addition the database you import into must contain these tables.  Generally this should be the same database
    you exported from, or a copy of that database after the export.

6.) The RichEdit control is exported as Static Text.

7.) Tab order and attributes are not utilized by the tool.  Billboards are not exported, but a groupbox
    placeholder is put on the dialog where the Billboard would appear on the dialog.

8.) When exporting binary data, the temporary files are placed in the folder returned by W32::GetTempFolder().
    These files can be deleted after the resource file (.rc) is compiled (.res).

9.) Because radiobutton properties can be used, import only updates the width, height, and text.  The x and y
    dimensions of radiobuttons are local to the group to which they belong and those values could change among
    the various radiobutton groups.  Furthermore, if a property is used more than once, the last property
    imported wins out.  Each time the radiobutton is found as control, the RadioButton table is updated with
    the new data.  If a particular radiobutton is not localized, it could overwrite the localized data of a
    radiobutton with the same property that was found earlier.

10.) A resource file has a limitation to the maximum length of a string.  The tool outputs the string
     "!! STR OVER LIMIT!!" for this occurence and upon import will ignore the update of the string. 

11.) The tool does not support localization of the _SummaryInformation stream of the Windows Installer database.
    In addition, it does not permit import of new dialogs, new controls, and/or new strings.

==================================================================================================================
KNOWN ISSUES

1.) Specifying the same column of a table more than once when exporting strings will cause the generation of
    an invalid resource file (due to duplicate ID's since the tool attempts to maintain the same resource IDs).

2.) Specifying the same dialog more than once when exporting specific dialogs will cause the generation of an
    invalid resource file (due to duplicate ID's since the tool attempts to maintain the same resource IDs).
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\msitools\msispy\readme.txt ===
Readme.txt for Msispy

Overview
--------
Msispy is a tool that provides a component level view of the products
and features installed on a system, using either an MSI Package, or
the registry information. Msispy also displays the status of each,
and allows you to partially or completely re-install missing or
damaged items. You can also re-configure any product or feature,
selecting the install level and specifying whether to install it
locally or run it from a CD or network server.

Installing Msispy
-----------------
Msispy for any platform can be installed from the Msispy installation 
package available:  Msispy.msi

Msispy can be installed 
(a) on your local machine,
(b) to run from CD or a network server,
(c) as a combination of both
(d) advertised (install-on-demand), on NT 5 only

The typical install installs the most frequently used components
of Msispy on your local machine, and leaves the rest to be run
from the CD when needed. This takes up less disk space, but you 
will need the source CD everytime you use any of the features that 
have been configured to run from the CD.

The complete install copies all the files over to your local
hard-drive. This will take up more disk space, but you will not
need the CD again (unless Msispy files are deleted).

The custom install option allows you to configure which features
of Msispy you would like to install locally, and where on the
local drive these files should reside. It also gives you the
diskspace that you will need for your selection.


Resiliency
----------
If any of the Msispy files are deleted from the local drive,
they are copied back on from the CD when they are needed. Feel
free to delete all of Msispy's files and launch Msispy- It will
automatically copy over ("fault in") the required components as
and when they are needed. (Keep the source CD handy!)

If you are using Windows NT 4.0, or Windows 95 (or earlier 
versions), the file Msispy.EXE will not be faulted in when you 
click on the shortcut. (You will need to run the installer again
to fix Msispy if you delete Msispy.exe).

On MSI descriptor enabled systems (NT 5.0, Windows 98, with 
IE 4.01) even if you delete Msispy.exe, clicking on the shortcut
will automatically fault in the required components, (including
Msispy.exe)


Help
---- 
Once you have installed Msispy, help is available under the Help
Menu (select "Overview"). You can run the hlp file directly
before installation from the CD by clicking on spyENU.hlp (for the
English (US) version) or spyDEU.hlp (for the German (Std) version) 


Source
------
Many of the MSI initialisation functions performed by Msispy are 
in the source file InitMSI.cpp, available under the "samples" 
directory (..\samples\InitMSI.cpp). This file serves as an example 
of an app using the functions.

Language
--------
For the Japanese DLLs, the font MS UI Gothic is used, which will only
show up correctly on NT5 J or Windows98, unless the font is installed.


Compatibility
-------------
Msispy is compatible with Windows NT 4.0 and above. At this time, Msispy is NOT 
fully compatible with the Windows-95 environment.

THIS TOOL AND INFORMATION ARE PROVIDED "AS IS" WITHOUT WARRANTY
OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT
LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR
FITNESS FOR A PARTICULAR PURPOSE. 

Not Supported
-------------
Msispy currently does not support the saving of profiles for use later.  As a 
result the menu choices for this are always greyed out.

Msispy does not support the ALPHA platform (as of the Windows Installer 1.1 SDK).
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\msitools\scripts\wireadme.txt ===
Copyright (c) 1999-2001, Microsoft Corporation
Windows Installer utility scripts for use with Windows Scripting Host

WiLstPrd.vbs - lists products, product properties, features, and components
WiImport.vbs - imports files to an MSI database
WiExport.vbs - exports files from an MSI database
WiSubStg.vbs - adds a transform or nested MSI as a substorage
WiStream.vbs - adds an external stream to a MSI package (e.g CAB file)
WiMerge.vbs  - merges two MSI databases
WiGenXfm.vbs - generates a transform from two databases, or compares them
WiUseXfm.vbs - applies a transform to an MSI database
WiLstXfm.vbs - lists an MSI transform file (CSCRIPT only)
WiDiffDb.vbs - lists the differences between two databases (CSCRIPT only)   
WiLstScr.vbs - lists an installer script file (CSCRIPT only)
WiSumInf.vbs - displays and updates summary information stream
WiPolicy.vbs - manages installer policy settings
WiLangId.vbs - reports and updates the language and codepage of a package
WiToAnsi.vbs - copies a Unicode text file to the same or a new Ansi text file
WiFilVer.vbs - updates File table sizes and versions from source file tree
WiMakCab.vbs - generates compressed file cabinets and updates package
WiRunSQL.vbs - executes SQL statements against an installer database
WiTextIn.vbs - copies an ANSI text file into a database string column value
WiCompon.vbs - lists components and their composition in an installer database
WiFeatur.vbs - lists features and their composition in an installer database
WiDialog.vbs - previews all or specified dialogs in an installer database

All scripts display help screens describing their command line arguments,
either if the first argument contains a ?, or if too few arguments are given.
Scripts return a value of 0 for success, 1 if help invoked, or 2 if failure.

Windows Scripting Host is actually two hosts, use //? to obtain help:
Cscript.exe displays to standard out - useful for batch files and build scripts
Wscript.exe displays the output in a window - the default for extension .VBS
When run from a Win NT DOS box, only the base name needs to be specified, and
if the tools are on the PATH, then they will be found like EXE or BAT files.
To redirect output to a file, you must use Cscript {scriptname}.VBS > {file}.

To download and install Windows Scripting Host (not required for Windows2000):
  http://msdn.microsoft.com/scripting/windowshost/download/default.htm
To download and update Windows scripting engines:
  http://msdn.microsoft.com/scripting/vbscript/download/vbsdown.htm
or
  http://www.microsoft.com/msdownload/vbscript/scripting.asp

The utility makecab.exe is located in the Windows Installer SDK
at \Patching\makecab.exe.

For more information about these samples, see the section
"Windows Installer Scripting Examples" in the Windows Installer help files.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\sdk\redist.txt ===
======================================
Windows Installer Redistributables 2.0
======================================

The Windows Installer redistributables may only be redistributed as part 
of INSTMSI.EXE.  You may not redistribute any of the DLLs in INSTMSI.EXE 
except by using INSTMSI.EXE.  You may not modify INSTMSI.EXE

INSTMSI.EXE is a self-extracting executable that will install the 
Windows Installer redistributables only if there is not a more recent 
version of the DLLs in the system directory. INSTMSI.EXE will write the 
registry keys required by Windows Installer.

In addition to the rights granted in Section 1 of the Microsoft Platform 
Software Development Kit End User License Agreement ("Agreement"), with 
respect to the Redistributable Code, you have the following 
non-exclusive, royalty free rights subject to the
Distribution Requirements detailed in Section 1 of the Agreement:

(1) You may distribute WIN9X\INSTMSI.EXE for use only on Windows 95, Windows 98, and Windows ME

(2) You may distribute WINNT\INSTMSI.EXE for use only on Windows NT Version 4 and Windows 2000
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\sdk\dbreadme.txt ===
Copyright (c) 1999-2001, Microsoft Corporation
Windows Installer sample databases and database schemas.

SUMMARY

The Database folder contains Windows Installer schema files you should use to create installations with 
Windows Installer version 1.5. The schema files for earlier Windows Installer versions are in the folders 
100, 110, and 120. For more information see the help file "Released Versions of Windows Installer" in the 
SDK documentation. The samples provided in this folder are not supported by Microsoft Corporation. They 
are provided "as is" because we believe they may be useful to you. 

100 - This folder contains Windows Installer schema files you should use to create installations with 
Windows Installer version 1.0. 

110 - This folder contains Windows Installer schema files you should use to create installations with 
Windows Installer version 1.1. 

120 - This folder contains Windows Installer schema files you should use to create installations with 
Windows Installer version 1.2. 

INTL - This folder contains default international strings for error and action text database fields in the form 
of .idt files. Developers should merge one of these into their schema file to get the resources for their 
language. For more information see the help files "Localizing a Windows Installer Package" and 
"Localizing the Action and Text Tables" in the SDK documentation.

Schema.msi - An empty Windows Installer database with all tables in the correct schema for a Windows 
Installer package (.msi file).

Schema.msm -  An empty Windows Installer database with all tables in the correct schema for a Windows 
Installer merge module (.msm file). For more information see the help section "Merge Modules" in the SDK 
documentation.

Sequence.msi - The recommended default sequence tables for a Windows Installer package (.msi file). For 
more information see the help section "Using a Sequence Table" in the SDK documentation.

Schema.log - A text file describing the schema changes between the versions.

UISample.msi - A Windows Installer database with a sample default user interface. For more information 
see the help section "Windows Installer Examples" in the SDK documentation.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\sdk\preadme.txt ===
Copyright (c) 1999-2001, Microsoft Corporation
Windows Installer sample patching.

The samples in this folder assist developers in the development of file patches and updates that can be used 
with Windows Installer installation packages. This directory contains patch creation utilities used to create a 
Windows installer patch package sample patch creation files (.pcp files). A .pcp file may be used with the 
utilities Msimsp.exe and Patchwiz.dll to generate a Windows Installer patch package (.msp extension). The 
samples provided in this folder are not supported by Microsoft Corporation. They are provided "as is" 
because we believe they may be useful to you. 

Makecab.exe - This is a data compression tool that developers can use to make compressed cabinet files for 
use with Windows Installer installations. For more information about makecab.exe see the help file 
"MakeCAB: A Compression and Disk Layout Tool" in the Platform SDK documentation. Windows 
Installer developers must take care to properly author their installation database to match up with the files in 
their cabinets. For more information about how to use cabinet files with the Windows Installer you should 
see the help file "Using Cabinets and Compressed Sources" in the SDK documentation. Type makcab.exe /? 
on a command line to display makecab.exe syntax and options. 

Apatch.exe - This is a command line tool used to apply an ordinary patch file to a file. This utility is 
intended for use with ordinary patch files and will not work with Windows Installer patch packages (.msp 
files). The utility is provided merely as an aid to development. Type apatch.exe /? on a command line to 
display apatch.exe syntax.  

Mpatch.exe - This is a command line tool that calls mspatchc.dll to generate a regular patch file. This utility 
is intended for use with ordinary patch files and will not work with Windows Installer patch packages (.msp 
files). The utility is provided merely as an aid to development. Type mpatch.exe /? on a command line to 
display apatch.exe syntax. 

Mspatchc.dll - This DLL is used by mpatch.exe.

Msimsp.exe - This tool calls PatchWiz.dll to generate a Windows Installer patch package (.msp file) by 
passing in a patch creation properties file (.pcp file) and the path to the patch package being created. The 
tool can also be used to create a log file and to specify a temporary folder in which the transforms, cabinets 
and files used to create the patch package are saved. Msimsp.exe is the recommended method for generating 
a Windows Installer patch package, for more information see the help files "Patching" and "Msimsp.exe" in 
the SDK documentation. Type msimsp.exe /? on a command line to display msimsp.exe syntax and options. 

Patchwiz.dll - This DLL is used by msimsp.exe. Patchwiz.dll called by msimsp.exe is the recommended 
method for generating Windows Installer patch packages (.msi files). For more information see  the help 
files "Patching" and "Patchwiz.dll" in the SDK documentation. 

Template.pcp - An empty patch creation properties file (.pcp file). The .pcp file is a binary database file 
with the same format as a Windows Installer database (an .msi file) but uses a different database schema. 
Authors may create a .pcp file by using a table editor such Orca to enter their information into the blank 
.pcp database provided template.pcp. An example of the procedure is discussed in the help file "A Small 
Update Patching Example" in the SDK documentation. For more information about patch creation 
properties files see the help file "Patchwiz.dll" in the SDK documentation.

Example.pcp - An example of a populated patch creation properties file (.pcp file). An example of the 
procedure is discussed in the help file "A Small Update Patching Example" in the SDK documentation. For 
more information about patch creation properties files see the help file "Patchwiz.dll" in the SDK 
documentation.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\sdk\readme.txt ===
Windows Installer 2.0 SDK Release  -  Microsoft Corporation 

---------------------------------------------------------------------------
This release includes the following components, in the indicated folders:

    ReadMe.txt 		- this file, contents and notes
    License.rtf		- SDK license agreement
    Redist.txt 		- redistibution terms and conditions

Redist - components that may be redistributed with your application
    WINNT\InstMsi.exe 	- Windows Installer self-installer for use with Windows NT4 and Windows 2000
    WIN9x\InstMsi.exe 	- Windows Installer self-installer for use with Windows 95, Windows 98, Windows ME

Help
    Msi.chm+Msi.chi	- Documentation for Windows Installer, HTML help format (see note below)

Include
    Msi.h		- install management API functions
    MsiQuery.h 		- database and custom action API functions
    MsiDefs.h  		- property names and database data bit flags
    MergeMod.h 		- definitions for use with MergeMod.dll COM object
    PatchApi.h 		- definitions for use with MsPatchC.lib and MsPatchC.dll
    PatchWiz.h 		- definitions for use with the installer patch package creation tool

Lib
    Msi.lib	     	- import lib for MSI API functions
    MsPatchC.lib	- import lib for patch generation engine MsPatchC.dll
    PatchWiz.lib 	- import lib for patch package creation tool PatchWiz.dll

Tools
    Instlr11.adm   	- used with the Group Policy Editor. See the "System Policy" help topic.
    Instlr1.adm	   	- used with the Group Policy Editor and Windows Installer version 1.0
    Orca.msi     	- graphical table editor supporting validation and merge modules
    MsiVal2.msi  	- command-line installer package validation tool, provides darice.cub and logo.cub files
    MsiDb.exe    	- database import, export, merge, transform
    MsiMig.dll          - Custom Action for migration of 1.0 cached packages to 1.1 of the Windows Installer
    MsiMig.exe          - Command line utility for administrators migrating 1.0 cached packages to 1.1
    MsiInfo.exe  	- summary information property manager, string pool validation
    MsiMerg.exe  	- merges two databases
    MsiTran.exe  	- generates and applies database transforms
    MsiZap.exe   	- used to remove selected MSI management data from a machine. Use with caution.
    MsiCert.exe         - used to populate the MsiDigitalSignature and MsiDigitalCertificate tables
    MsiFiler.exe        - used to populate file versions, sizes, and languages
    MsiTool.mak		- shared makefile for tools and custom actions
    MergeMod.dll	- COM object providing support for installer merge modules
    WiLogUtl.exe        - Windows Installer Verbose Setup Log Analyzer, useful for reading Windows Installer logfiles

Tools\110
    darice.cub          - Windows Installer version 1.1 complete validation suite
    mergemod.cub        - Windows Installer version 1.1 merge module validation suite
    logo.cub            - Windows Installer version 1.1 logo validation suite

Tools\120
    darice.cub          - Windows Installer version 1.2 complete validation suite
    mergemod.cub        - Windows Installer version 1.2 merge module validation suite
    logo.cub            - Windows Installer version 1.2 logo validation suite

Web
    msistuff.exe        - used to populate resources in setup.exe.  Only works on Windows NT.
    setup.exe           - internet download executable for creating installs from the web


Patching
    PReadme.txt         - readme describing contents of this folder
    MsiMsp.exe    	- patch package creation tool
    MakeCab.exe	  	- general compressed file cabinet generation tool, not installer-specific
    MPatch.exe   	- test application to create a patch file using MsPatchC.dll
    APatch.exe   	- test application to apply a patch using MsPatchA.dll (part of InstMsi package)
    MsPatchC.dll	- patch file creation engine, used by PatchWiz.dll and MPatch.exe
    PatchWiz.dll 	- installer patch package creation tool (documented in Msi.chm)
    Template.pcp	- schema for patch wizard project settings
    Example.pcp  	- sample project settings for patch wizard

Database
    DbReadme.txt        - readme file with information on the files in this folder and subfolders
    Schema.msi   	- database containing all standard tables, but no installation data
    Schema.msm   	- merge module containing all standard module tables, but no installation data
    Schema.log          - List of schema changes
    Sequence.msi 	- recommended sequence table actions
    UISample.msi	- sample database demonstrating a UI implementation         
    Intl         	- localized Error and ActionText tables in multiple languages
    
Database\100
    Schema.msi   	- Windows Installer version 1.0 database containing all standard tables
    Sequence.msi 	- Windows Installer version 1.0 recommended sequence table actions

Database\110
    Schema.msi          - Windows Installer version 1.1 database containing all standard tables
    Sequence.msi        - Windows Installer version 1.1 recommended sequence table actions
    Schema.msm          - Windows Installer version 1.1 merge module containing all standard module tables

Database\120
    Schema.msi          - Windows Installer version 1.2 database containing all standard tables
    Sequence.msi        - Windows Installer version 1.2 recommended sequence table actions
    Schema.msm          - Windows Installer version 1.2 merge module containing all standard module tables

Samples - examples demonstrating the use of the Windows Installer APIs
    Create.cpp          - sample DLL custom action for creating user accounts on the local machine
    CustAct1.cpp 	- sample DLL custom action for testing
    CustExe1.cpp 	- sample EXE custom action for testing
    MsiLoc.cpp          - sample resource file generation and import tool (export an msi for use with localization of .RES files)
    MsiLoc.txt          - readme for msiloc.cpp and usage of the corresponding compiled exe
    MsiMerg.cpp  	- sample database merge tool
    MsiTran.cpp  	- sample transform creation and application tool
    Process.cpp         - sample DLL custom actions (ProcessUserAccounts, UninstallUserAccounts) for user account creation and deletion
    Remove.cpp          - sample DLL custom action for removing user accounts from the local machine 
    Scripts 		- folder containing doc and scripts to perform a variety of installer-related tasks
    Tutorial.cpp        - sample DLL custom action for invoking an installed file at the end of setup
    setup.exe\*         - code for the Windows Installer Internet Download bootstrapper, setup.exe
    MsiStuff\*          - code for the configuration utility for the Windows Installer Internet Download Bootstrapper, msistuff.exe

---------------------------------------------------------------------------
Windows Installer core files installed by installation package InstMsi.exe:
    Msi.dll		- installation engine, use by install clients and install service
    MsiExec.exe		- command-line invocation of install functions, and service control functions
    MsiHnd.dll		- UI process, loaded only when full UI is authored and used for installation

Other files that are updated as needed by installation package InstMsi.exe:
    riched20.dll, usp10.dll, msls31.dll	- rich-edit and complex script support
    cabinet.dll  			- extraction of files from compressed file cabinets
    imagehlp.dll 			- used for import table binding
    mspatcha.dll 			- used to apply file-level patches
    shfolder.dll 			- special shell folder location and creation

---------------------------------------------------------------------------
Notes: 

Msi.chm is the primary source of information about the Windows Installer, and contains both an 
introduction to the new model, as well as detailed reference material for developers.
See the topic "Windows Installer Examples" to get started with simple packages.

If HTML help is already installed on your system, msi.chm can be invoked via file association
HTML help can be installed from: http://msdn.microsoft.com/workshop/author/htmlhelp/localize.asp

The .msi packages in the SDK may be installed by activating them in the Windows Explorer,
or by using "MsiExec.exe -i path_to_package". Use "MsiExec.exe -?" to see more options.
The object model is exposed as the ProdId: WindowsInstaller.Installer

UISample.msi provides a sample UI sequence, but that sequence will not function
properly until the database has been populated with valid installation data.
For help in populating a database with valid installation data, see the help topic
titled "An Installation Example" under "Windows Installer Examples". For an
example of a completed installation package that uses the same UI sequence as
UISample.msi, install one of the msi packages under the Tools or SampProd folders.
Set the ShowUserRegistrationDlg property in the Property table to 0 if you do not
wish to have the UserRegistrationDlg appear.

UISample.msi together with Sequence.msi and schema.msi will provide a framework which can
then be populated with valid installation data.  Use the MsiMerg tool, MsiDb tool or the
WiMerge.vbs script to merge the databases together (merging two at a time).  You should drop
any empty tables from your package.

The custom action samples process.cpp, remove.cpp, create.cpp, and tutorial.cpp are the source
files for the sample custom actions described in the msi.chm file.  See the msi.chm file for
more information regarding their usage.

---------------------------------------------------------------------------
Compiling sample code:

There are two options for compiling the sample code in the Samples subfolder:
use nmake or use a project in the MSDev environment.

To use nmake, make certain that the MSVCDIR environment variable is set. You can
generally run the VCVARS32.BAT to set this. VCVARS32.BAT is located in the BIN
subdirectory of your VC install. The command line to compile the CUSTACT1.CPP
sample file (given default install locations for both Microsoft Visual C++ 6
and the Windows Installer SDK) would look like this:
C:\program files\MsiIntel.SDK\Samples> nmake -f custact1.cpp include="%include%;c:\program files\MsiIntel.SDK\Include" lib="%lib%;c:\program files\MsiIntel.SDK\Lib"
Note: the quotes are included because the default install locations include spaces in path names.
If the INCLUDE and LIB environment variables on the machine and the SDK install location
do not have spaces in the path, then the quotes are unnecessary.

To use the MSDev environment, create a new Win32 EXE or Win32 DLL project, and
add the appropriate file as a source. MSI.LIB will need to added to the library
list in the Project Settings dialog. MsiIntel.SDK\Include and MsiIntel.SDK\Lib
directories will need to be added to the Directories tab under Tools\Options.

All SDK source files contain comments on how to compile the sample code.  See the
source file for more specific build information.

---------------------------------------------------------------------------
Known issues:

Msi.chm is not yet properly integrated w/ the typelib in msi.dll - context sensitive 
help is not available in VB w/ this release.

Tools that create customization transforms require special considerations that are
not yet documented in msi.chm.  A KB article on this topic will be published
shortly after this SDK is released - go to http://support.microsoft.com/support/search/c.asp
and enter "Q225522" in the "My Question Is" box.

Additional support articles and solutions will be placed on 
http://support.microsoft.com/support/search/c.asp as they become available.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\darwin\src\sdk\license.rtf ===
{\rtf1\ansi\ansicpg1252\deff0\deftab720{\fonttbl{\f0\froman\fprq2 Times New Roman;}}{\colortbl\red0\green0\blue0;}\deflang1033\horzdoc{\*\fchars }{\*\lchars }\pard\plain\f0\fs20 MICROSOFT INSTALLER SOFTWARE DEVELOPMENT KIT \par  \par END-USER LICENSE AGREEMENT FOR MICROSOFT SOFTWARE \par  \par IMPORTANT-READ CAREFULLY: This Microsoft End-User License Agreement ("EULA") is a legal agreement between you (either an individual or a single entity) and Microsoft Corporation for the Microsoft software product identified above, which includes computer software and associated media and printed materials, and may include "online" or electronic documentation ("SOFTWARE PRODUCT" or "SOFTWARE"). By installing, copying, or otherwise using the SOFTWARE PRODUCT, you agree to be bound by the terms of this EULA. If you do not agree to the terms of this EULA; promptly return the unused SOFTWARE PRODUCT to the place from which you obtained it for a full refund; or if you received the SOFTWARE PRODUCT as part of a subscription or other service from Microsoft, you may cancel the subscription and receive a pro rata portion of the subscription price. \par  \par SOFTWARE PRODUCT LICENSE \par  \par The SOFTWARE PRODUCT is protected by copyright laws and international copyright treaties, as well as other intellectual property laws and treaties. The SOFTWARE PRODUCT is licensed, not sold. \par  \par 1. GRANT OF LICENSE. This EULA grants you the following limited, non-exclusive rights: \par Software Product. You may install and use the SOFTWARE PRODUCT on a single computer solely for the purpose of developing applications for use with Microsoft(R) Windows(R) or Windows NT(R) ("Application").  You may not use the SOFTWARE PRODUCT to create files which are not compatible with the Microsoft Windows Installer file format.  \par Microsoft Developer Network Subscriber. If you acquired the SOFTWARE PRODUCT through a subscription to the Microsoft Developer Network, and you are either an individual developer or an individual designated within a single entity, you are granted the following additional rights with respect to the SOFTWARE PRODUCT:  (a) you may make and use copies of the SOFTWARE PRODUCT on up to ten (10) separate computers, provided that you are the only individual using the SOFTWARE PRODUCT on each such computer, and (b) if you are a single entity, you may designate one individual within your organization to have the right to use the SOFTWARE PRODUCT in the manner described herein. \par Sample Code. You may modify the sample source code located in the SOFTWARE PRODUCT's "SAMPLES" directory ("Sample Code") to design, develop, and test your Application.  \par Redistributable Code. Portions of the SOFTWARE PRODUCT in the "REDIST" directory are designated as "Redistributable Code."  You may reproduce and distribute the Redistributable Code provided you comply with the Distribution Requirements described below. \par Distribution Requirements. You may copy and redistribute the Redistributable Code (collectively "REDISTRIBUTABLE COMPONENTS") as described above, provided that (a) you distribute the REDISTRIBUTABLE COMPONENTS only in conjunction with, and as a part of, your Application; (b) your Application adds significant and primary functionality to the REDISTRIBUTABLE COMPONENTS; (c) the REDISTRIBUTABLE COMPONENTS only operate in conjunction with a valid copy of Microsoft Windows or Windows NT; (d) the Application does not allow the use of the REDISTRIBUTABLE COMPONENTS for files which are not compatible with the Microsoft Windows Installer;  (e) the executable code in the REDIST directory may be redistributed unmodified in conjunction with your Application provided that your Application adds significant and primary functionality to the REDISTRIBUTABLE COMPONENTS; (f) the library code in the LIB directory may only be redistributed when linked into your Application; (g) you do not use Microsoft's name, logo, or trademarks to market your Application; (h) you include a valid copyright notice on your Application; and (i) you agree to indemnify, hold harmless, and defend Microsoft from and against any claims or lawsuits, including attorneys' fees, that arise or result from the use or distribution of your Application. Contact Microsoft for the applicable royalties due and other licensing terms for all other uses and/or distribution of the REDISTRIBUTABLE COMPONENTS. \par Microsoft reserves all rights not expressly granted to you.  \par  \par 2. COPYRIGHT. All rights, title, and copyrights in and to the SOFTWARE PRODUCT (including, but not limited to, any images, photographs, animations, video, audio, music, text, and "applets" incorporated into the SOFTWARE PRODUCT) and any copies of the SOFTWARE PRODUCT are owned by Microsoft or its suppliers. The SOFTWARE PRODUCT is protected by copyright laws and international treaty provisions. Therefore, you must treat the SOFTWARE PRODUCT like any other copyrighted material, except that you may either (a) make one copy of the SOFTWARE PRODUCT solely for backup or archival purposes, or (b) install the SOFTWARE PRODUCT on a single computer, provided you keep the original solely for backup or archival purposes. You may not copy the printed materials accompanying the SOFTWARE PRODUCT.  \par  \par 3. PRERELEASE CODE. The SOFTWARE PRODUCT may contain PRERELEASE CODE that is not at the level of performance and compatibility of the final, generally available, product offering. These portions of the SOFTWARE PRODUCT may not operate correctly and may be substantially modified prior to first commercial shipment. Microsoft is not obligated to make this or any later version of the SOFTWARE PRODUCT commercially available.  Microsoft grants you the right to distribute test versions of your Application created using the PRERELEASE CODE provided you comply with the Distribution Requirements described in Section 1 and the following additional provisions: (a)  you must mark the test version of your Application "BETA" and (b) you are solely responsible for updating your customers with versions of your Application that operate satisfactorily with the final commercial release of the PRERELEASE CODE.   \par  \par 4. DESCRIPTION OF OTHER RIGHTS AND LIMITATIONS.  \par  \par Limitations on Reverse-Engineering, Decompilation, and Disassembly. You may not reverse- engineer, decompile, or disassemble the SOFTWARE PRODUCT, except and only to the extent that such activity is expressly permitted by applicable law notwithstanding this limitation. \par  \par Rental. You may not rent or lease the SOFTWARE PRODUCT.  \par  \par Software Transfer. You may permanently transfer all of your rights under this EULA, provided you retain no copies, you transfer all of the SOFTWARE PRODUCT (including all component parts, the media and printed materials, any upgrades, this EULA, and, if applicable, the Certificate of Authenticity), and the recipient agrees to the terms of this EULA. If the SOFTWARE PRODUCT is an upgrade, any transfer must include all prior versions of the SOFTWARE PRODUCT. \par  \par Termination. Without prejudice to any other rights, Microsoft may terminate this EULA if you fail to comply with the terms and conditions of this EULA. In such event, you must destroy all copies of the SOFTWARE PRODUCT and all of its component parts.  \par  \par 5. EXPORT RESTRICTIONS. You agree that neither you nor your customers intend to or will, directly or indirectly, export or transmit (a) the SOFTWARE PRODUCT or related documentation and technical data, or (b) your Application as described in Section 1 of this EULA (or any part thereof), or process, or service that is the direct product of the SOFTWARE PRODUCT to any country to which such export or transmission is restricted by any applicable U.S. regulation or statute, without the prior written consent, if required, of the Bureau of Export Administration of the U.S. Department of Commerce, or such other governmental entity as may have jurisdiction over such export or transmission.  \par  \par  \par 6. U.S. GOVERNMENT RESTRICTED RIGHTS. The SOFTWARE PRODUCT and documentation are provided with RESTRICTED RIGHTS. Use, duplication, or disclosure by the Government is subject to restrictions as set forth in subparagraph (c)(1)(ii) of The Rights in Technical Data and Computer Software clause at DFARS 252.227-7013 or subparagraphs (c)(1) and (2) of the Commercial Computer Software - Restricted Rights at 48 CFR 52.227-19, as applicable. Manufacturer is Microsoft Corporation/One Microsoft Way/Redmond, WA 98052-6399.  \par  \par MISCELLANEOUS \par  \par If you acquired this product in the United States, this EULA is governed by the laws of the State of Washington.  \par  \par If you acquired this product in Canada, this EULA is governed by the laws of the Province of Ontario, Canada. Each of the parties hereto irrevocably attorns to the jurisdiction of the courts of the Province of Ontario and further agrees to commence any litigation that may arise hereunder in the courts located in the Judicial District of York, Province of Ontario.  \par  \par If this product was acquired outside the United States, local law may apply. \par  \par Should you have any questions concerning this EULA, or if you desire to contact Microsoft for any reason, please contact the Microsoft subsidiary serving your country, or write: Microsoft Customer Sales and Service/One Microsoft Way/Redmond, WA 98052-6399.  \par  \par NO WARRANTIES. To the maximum extent permitted by applicable law, Microsoft expressly disclaims any warranty for the SOFTWARE PRODUCT. The SOFTWARE PRODUCT and any related documentation are provided "as is" without warranty of any kind, either express or implied, including, without limitation, the implied warranties of merchantability or fitness for a particular purpose. The entire risk arising out of use or performance of the SOFTWARE PRODUCT remains with you.  \par  \par LIMITATION OF LIABILITY. Microsoft's entire liability and your exclusive remedy under this EULA shall not exceed five dollars (US$5.00).  \par  \par NO LIABILITY FOR CONSEQUENTIAL DAMAGES. To the maximum extent permitted by applicable law, in no event shall Microsoft or its suppliers be liable for any damages whatsoever (including, without limitation, damages for loss of business profit, business interruption, loss of business information, or any other pecuniary loss) arising out of the use of, or inability to use, this Microsoft product, even if Microsoft has been advised of the possibility of such damages. Because some states/jurisdictions do not allow the exclusion or limitation of liability for consequential or incidental damages, the above limitation may not apply to you.  \par  \par  \par Si vous avez acquis votre produit Microsoft au CANADA, la garantie limit e suivante vous concerne:  \par  \par GARANTIE LIMIT \par  \par EXCLUSION DE GARANTIES. Microsoft renonce enti rement   toute garantie pour le LOGICIEL. Le LOGICIEL et toute autre documentation s'y rapportant sont fournis   comme tels   sans aucune garantie quelle qu'elle soit, expresse ou implicite, y compris, mais ne se limitant pas aux garanties implicites de la qualit  marchande ou un usage particulier. Le risque total d coulant de l'utilisation ou de la performance du LOGICIEL est entre vos mains.  \par  \par RESPONSABILIT  LIMIT E. La seule obligation de Microsoft et votre recours exclusif concernant ce contrat n'exc deront pas cinq dollars (US$5.00).  \par  \par ABSENCE DE RESPONSABILIT  POUR LES DOMMAGES INDIRECTS. Microsoft ou ses  \par fournisseurs ne pourront  tre tenus responsables en aucune circonstance de tout dommage quel qu'il soit (y compris mais non de fa on limitative les dommages directs ou indirects caus s par la perte de b fices commerciaux, l'interruption des affaires, la perte d'information commerciale ou toute autre perte p cuniaire) r sultant de l'utilisation ou de l'impossibilit  d'utilisation de ce produit, et ce, m me si la soci  Microsoft a   avis e de l' ventualit  de tels dommages. Certains  tats/juridictions ne permettent pas l'exclusion ou la limitation de responsabilit  relative aux dommages indirects ou cons cutifs, et la limitation ci-dessus peut ne pas s'appliquer   votre  gard.  \par La pr sente Convention est r gie par les lois de la province d'Ontario, Canada. Chacune des parties   la Convention reconna t irr vocablement la comp tence des tribunaux de la province d'Ontario et consent   instituer tout litige qui pourrait d couler de la Convention aupr s des tribunaux situ s dans le district judiciaire de York, province d'Ontario.  \par Au cas o  vous auriez des questions concernant cette licence ou que vous d siriez vous mettre en rapport avec Microsoft pour quelque raison que ce soit, veuillez contacter la succursale Microsoft desservant votre pays, dont l'adresse est fournie dans ce produit, ou  crire  : Microsoft Customer Sales and Service, One Microsoft Way, Redmond, Washington 98052-6399.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\dcpromo\dcpdns.txt ===
[NetOptionalComponents]
DNS=1
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\dcpromo\answer.txt ===
; Sample DCPROMO2 AnswerFile.
; Copyright (C) 1998-2000 Microsoft Corporation
;
; To invoke dcpromo with an answerfile, use the following syntax:
; dcpromo /answer:<answerfile name>
;
; where <answerfile name> is the name of the answerfile to be used, relative
; to the directory from which dcpromo is invoked
;
; The answer file is essentially an INI file, the options for which complete
; the fields of each page of the wizard.  Default values are those used if
; the option is not specified.
;
; For all operations (insallations or un-installations), the following
; options apply:
;	RebootOnSuccess
; 
; For all installations, the following options apply:
;	DatabasePath
;	LogPath
;	SYSVOLPath
;   SafeModeAdminPassword
; 	CriticalReplicationOnly
;	SiteName
;
; For BDC upgrades or new replica installations, the following additional
; options apply:
;   ReplicaOrMember=Replica
;	ReplicaOrNewDomain=Replica
;	ReplicaDomainDNSName
; 	ReplicationSourceDC
; 	ReplicateFromMedia
; 	ReplicationSourcePath
;
; For child domain installations, the following additional options apply:
;	ReplicaOrNewDomain=Domain
;	NewDomain=Child
;	ParentDomainDNSName
;	ChildName
;	DomainNetbiosName
;	AutoConfigDNS
; 	AllowAnonymousAccess
;
; For new tree in existing forest installations, the following
; additional options apply:
;	ReplicaOrNewDomain=Domain
;	NewDomain=Tree
;	NewDomainDNSName
;	DomainNetbiosName
;	AutoConfigDNS
; 	AllowAnonymousAccess
;
; For DC demotion, the following additional options apply:
; 	AdministratorPassword
;	IsLastDCInDomain
;
; For all of the above scenarios, the following options also apply:
;	UserName
;	Password
;	UserDomain
; 
; For new tree in new forest installations, the following additional
; options apply:
;	ReplicaOrNewDomain=Domain
;	NewDomain=Forest
;	NewDomainDNSName
;	DNSOnNetwork
;	DomainNetbiosName
;	AutoConfigDNS
; 	AllowAnonymousAccess
;
; for PDC upgrades, the following additional options apply:
;   SetForestVersion
;
; When running in advanced mode, these options apply:
; 
; ReplicationSourcePath
; ConfirmGc
; Syskey



[DCInstall]

; ReplicaOrMember
; Used only for BDC upgrades.
;
; Possible values:
; "Replica" - convert the BDC to a replica DS DC.
; "Member" (or any other value) - demote the BDC to a member server of its
; domain.
;
; Default: "Member"

ReplicaOrMember=Replica



; ReplicaOrNewDomain
; Used only for new NT5 server installs.
; 
; Possible values:
; "Domain" - convert the server into the first DC of a new DS domain.  A
; value for NewDomain is required.
; "Replica" (or any other value) - convert the server into a replica DS DC.
;
; Default: "Replica"

ReplicaOrNewDomain=Replica



; NewDomain
;
; Used to indicate the type of the new domain, whether it will be a new
; domain in a new forest, the root of a new tree in an existing forest, or a
; child of an existing domain.
;
; Possible values:
;
; "Tree" - the new domain will be the root of a new tree in an existing
; forest.
;
; "Child" - the new domain will be a child of an existing domain.
;
; "Forest" (or any other value) - the new domain will be the first domain in
; a new forest of domain trees.
;
; Default: "Forest"

NewDomain=Forest



; ReplicaDomainDNSName
; Used for BDC upgrades and new replica dc installs.  Value is the DNS
; domain name of the domain to be replicated from.  It is assumed that the
; currently logged-on user has administrative privileges to that domain,
; and that DNS services are properly configured.
;
; The domain name must refer to an existing DS domain.
;
; Ignored if ReplicationSourcePath refers to a valid set of restored backup
; files (as the domain name to which those files belong takes precedence)
;
; Default: none.  This value must be specified.

ReplicaDomainDNSName=spruce.ntdev.microsoft.com



; ParentDomainDNSName
; Used when child domain install is indicated.  Value is the DNS domain name
; of an existing DS domain.  It is assumed that the currently logged-on
; user has administrative privileges to this domain, and that DNS services
; are properly configured.
;
; Default: none.  This value must be specified.

ParentDomainDNSName=spruce.ntdev.microsoft.com



; ChildName
; Used when child domain install is indicated.  Value is the DNS label to be
; prepended to the value specified by ParentDomainDNSName to form a new
; domain name contiguous with and subordinate to the parent.  E.g. if the
; parent name is "spruce.ntdev.microsoft.com" and ChildName is "blue", then
; the name of the new domain is "blue.spruce.ntdev.microsoft.com".  This
; new domain name must not be in use and DNS services must be properly
; configured.
;
; Default: none.  This value must be specified.

ChildName=blue



; DomainNetbiosName
; Used to assign a flat name to the new domain.  The name must not already
; be in use as a domain or computer name.  This key is ignored when upgrading
; pre-Windows 2000 PDCs.
;
; Default: none.  This value must be specified.

DomainNetbiosName=blue-dom



; NewDomainDNSName
; Used when new tree in existing domain or new forest installation is
; indicated.  Value is the DNS domain name to be created.  This name may
; not be currently in use.
;
; Default: none.  This value must be specified.

NewDomainDNSName=aspen.ntdev.microsoft.com



; DNSOnNetwork
; Used in new forest installations when DNS client is not configured.
;
; Possbile values:
; "No" - "No, DNS is not on the network, install the DNS service, and
; create a zone for the new domain"
; "Yes" (or any other value) - "Yes, DNS is on the network, double-check
; that the local machine's DNS client configuration is complete."  (Note
; that if the local DNS client is not configured, the wizard will go into
; interactive mode.)
;
; Default: "Yes"

DNSOnNetwork=Yes



; DatabasePath
; Value must be the fully-qualified, non-unc path to a directory of a fixed
; disk of the local machine.  If the directory exists, it must be empty.
; If it does not, it will be created.  The volume must have sufficient disk
; space available -- at least 20MB for new domains.  For replicas, the
; space required is a function of domain size.  For optimal performance,
; the database path should be on a different volume than the log path.
;
; Default: %systemroot%\NTDS

DatabasePath=C:\ntds



; LogPath
; Value must be the fully-qualified, non-unc path to a directory of a fixed
; disk of the local machine.  If the directory exists, it must be empty.
; If it does not, it will be created.  The volume must have sufficient disk
; space available -- at least 10MB for new domains.  For replicas, the
; space required is a function of domain size.  For optimal performance,
; the database path should be on a different volume than the log path.
;
; Default: %systemroot%\NTDS
 
LogPath=C:\NTDS



; SYSVOLPath
; Value must be the fully-qualified, non-unc path to a directory of a fixed
; disk of the local machine.  If the directory exists, it must be empty.
; If it does not, it will be created.  The volume must be formatted with
; NTFS version 5.0.
;
; Default: %systemroot%\SYSVOL

SYSVOLPath=d:\sysvol



; SiteName (optional)
; Value is the name of an existing site in which to place the new DC.  If
; not specified, a suitable site will be selected.
;
; Default: "Default-First-Site"

SiteName=My-Answer-File-Site



; IsLastDCInDomain
; Only used for demote.  Value indicates that the machine is the last DC
; in the domain.
;
; "Yes" - DC is to be treated as the last in the domain.
; "No" - (or any other value) - DC is not the last in the domain.
;
; Default: No

IsLastDCInDomain=No



; AdministratorPassword
; Used when demoting a domain controller, to establish the local
; Administrator account password.
;
; Default: no password

AdministratorPassword=foo



; RebootOnSuccess
; Used to indicate whether the machine should be rebooted upon successful
; operation, or not.  The server must be rebooted for the directory
; service to be started.
;
; "Yes" - reboot the machine
; "NoAndNoPromptEither" - do not reboot the machine, and don't show the prompt
; to reboot either.  Just silently exit.
; "No" - (or any other value) do not reboot the machine.
;
; Default: "No"

RebootOnSuccess=No



; UserName
; Used to indicate the account credentials to be used for the promotion
; operation.
;
; Default: none.

UserName=Administrator



; Password
; Used to indicate the account credentials to be used for the promotion
; operation.
;
; Default: none.

Password=bar



; UserDomain
; Used to indicate the domain that the UserName should be taken from.
;
; Default: If the operation is to create a new forest or to become a member
; server from a BDC upgrade, there is no default.  If the operation is to
; create a new tree, then the default is the DNS name of the forest the
; computer is presently joined to.  If the operation is to create a new child
; domain or a replica, then the default is the DNS name of the domain the
; computer is joined to.  If the operation is to demote the computer, and the
; computer is a DC for a child domain, then the default is the DNS name of
; the parent domain.  If the operation is to demote the computer, and the
; computer is a DC of a tree root domain, then the default is the DNS name of
; the forest.

UserDomain=myDomain



; AutoConfigDNS
; Used to indicate whether the wizard should install and configure DNS for
; the new domain, as it has detected that dynamic dns updates are not
; available.
;
; If the wizard can't verify that dynamic DNS registration will be
; successful, and the value of this key is "Yes", then the wizard will
; install and configure DNS on the local computer.
;
; Otherwise, dynamic DNS is available, or the value is not "Yes", and so
; DNS will not be installed.
;
; Default: "Yes"

AutoConfigDNS=Yes



; AllowAnonymousAccess
; Used when downlevel (pre Windows 2000) servers will be authenticating users
; from this domain or any trusting domain.  This option indicates whether
; dcpromo should cause the permissions to be set to permit anonymous access
; to user and group information.
;
; "Yes" - downlevel servers will be used with this domain.  Allow anonymous
; access.
; "No" (or any other value) - all servers in the domain are Windows 2000 --
; use more restrictive, permissions.
;
; Default: "Yes"



; ReplicationSourceDC (optional)
; Used to indicate the name of the domain controller from which the domain
; information is to be replicated.  Only applies in new replica or BDC
; upgrade cases.  If no value is supplied, the closest domain controller
; for the domain being replicated will be selected.
;
; Default: (no value) - select a dc automatically

ReplicationSourceDC=



; SafeModeAdminPassword
; Used to supply the password to be set on the administrator account used
; when the computer is started in safe mode (or a variant of safe mode, like
; ds repair mode)
;
; Default: (no value) - blank password

SafeModeAdminPassword=MyHappyPassword



; CriticalReplicationOnly
; Used to specify that the promotion operation should perform only critical
; replication, then continue, skipping the (possibly very lengthy) non-
; critical portion.  Set to "yes" to skip non-critical replication.
;
; (in the case that non-critical replication is skipped, that replication
; will automatically and silently resume when the computer is rebooted and
; assumes its new role as a domain controller.)
;
; Default: (no value) - no; i.e. do critical and non-critical replication

CriticalReplicationOnly=yes



; ReplicationSourcePath
;
; Used to indicate that the bulk of the directory data replication should
; be drawn from backup files that have been restored to a volume on the
; server, rather from another domain controller.
;
; However, complete replication can not be performed entirely from copied
; files: access to another domain controller is still required.  (see
; ReplicationSourceDC)
;
; Indicates the location of the files to be used to create a new replica
; domain controller.  The value must be the fully-qualified path to a
; folder on the local computer where the files have been copied.
;
; If this value is present and non-empty, then data replication will be
; performed using the restored files.  If this value is not present or is
; empty, then replication will take place entirely over the wire.
;
; If the value refers to a valid set of restored backup files, then any
; value for the ReplicaDomainDNSName key will be ignored, as the domain
; name to which the restored files belong takes precedence.
;
; Default: none
;
; Example: "C:\restored\ds"

ReplicationSourcePath=



; ConfirmGc
;
; Only applies if ReplicationSourcePath is specified.  If restored files
; were created from a backup of a global catalog, then the replica can also
; be made a global catalog from those files.  Use this value to indicate
; whether the replica should also be a global catalog, or not.
;
; If this value is "Yes" and the backup was of a global catalog, then the
; replica will also be made a global catalog.  Otherwise, the replica will
; not be made a global catalog
;
; Default: "Yes"
							 
ConfirmGc=No



; Syskey
;
; Only applies if ReplicationSourcePath is specified.  This value is used
; if the restored files used to install a replica indicate that the system
; key must be supplied by the user.
;
; If the restored files indicate that the system key must be supplied on
; diskette, then the system will look for the key on drive A:
;
; Default: none

Syskey=



; SetForestVersion
;
; Only applies if the machine is a NT4 domain controller completing upgrade,
; and the domain controller will be the first dc in a new forest
; (NewDomain=Forest).  This key will indicate whether or not to set the new
; forest behavior version level to 1.  Level 1 allows more efficient
; replication of large group memberships, but will prevent any Windows 2000
; domain controllers from being added to the forest.
;
; If the value is "Yes", the level will be set to 1.  If not, the level will
; not be set.
;
; Default: "No"

SetForestVersion=No
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\display\loghours\readme.txt ===
========================================================================
       MICROSOFT FOUNDATION CLASS LIBRARY : LogHours
========================================================================


AppWizard has created this LogHours DLL for you.  This DLL not only
demonstrates the basics of using the Microsoft Foundation classes but
is also a starting point for writing your DLL.

This file contains a summary of what you will find in each of the files that
make up your LogHours DLL.

LogHours.h
	This is the main header file for the DLL.  It declares the
	CLogHoursApp class.

LogHours.cpp
	This is the main DLL source file.  It contains the class CLogHoursApp.


LogHours.rc
    This is a listing of all of the Microsoft Windows resources that the
    program uses.  It includes the icons, bitmaps, and cursors that are stored
    in the RES subdirectory.  This file can be directly edited in Microsoft
	Developer Studio.

res\LogHours.rc2
    This file contains resources that are not edited by Microsoft 
	Developer Studio.  You should place all resources not
	editable by the resource editor in this file.

LogHours.def
    This file contains information about the DLL that must be
    provided to run with Microsoft Windows.  It defines parameters
    such as the name and description of the DLL.  It also exports
	functions from the DLL.

LogHours.clw
    This file contains information used by ClassWizard to edit existing
    classes or add new classes.  ClassWizard also uses this file to store
    information needed to create and edit message maps and dialog data
    maps and to create prototype member functions.

/////////////////////////////////////////////////////////////////////////////
Other standard files:

StdAfx.h, StdAfx.cpp
    These files are used to build a precompiled header (PCH) file
    named LogHours.pch and a precompiled types file named StdAfx.obj.

Resource.h
    This is the standard header file, which defines new resource IDs.
    Microsoft Developer Studio reads and updates this file.

/////////////////////////////////////////////////////////////////////////////
Other notes:

AppWizard uses "TODO:" to indicate parts of the source code you
should add to or customize.

/////////////////////////////////////////////////////////////////////////////
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\display\proppage\res\iso-3166.txt ===
AFGHANISTAN                                     AF      AFG     004
ALBANIA                                         AL      ALB     008
ALGERIA                                         DZ      DZA     012
AMERICAN SAMOA                                  AS      ASM     016
ANDORRA                                         AD      AND     020
ANGOLA                                          AO      AGO     024
ANGUILLA                                        AI      AIA     660
ANTARCTICA                                      AQ      ATA     010
ANTIGUA AND BARBUDA                             AG      ATG     028
ARGENTINA                                       AR      ARG     032
ARMENIA                                         AM      ARM     051
ARUBA                                           AW      ABW     533
AUSTRALIA                                       AU      AUS     036
AUSTRIA                                         AT      AUT     040
AZERBAIJAN                                      AZ      AZE     031
BAHAMAS                                         BS      BHS     044
BAHRAIN                                         BH      BHR     048
BANGLADESH                                      BD      BGD     050
BARBADOS                                        BB      BRB     052
BELARUS                                         BY      BLR     112
BELGIUM                                         BE      BEL     056
BELIZE                                          BZ      BLZ     084
BENIN                                           BJ      BEN     204
BERMUDA                                         BM      BMU     060
BHUTAN                                          BT      BTN     064
BOLIVIA                                         BO      BOL     068
BOSNIA AND HERZEGOWINA                          BA      BIH     070
BOTSWANA                                        BW      BWA     072
BOUVET ISLAND                                   BV      BVT     074
BRAZIL                                          BR      BRA     076
BRITISH INDIAN OCEAN TERRITORY                  IO      IOT     086
BRUNEI DARUSSALAM                               BN      BRN     096
BULGARIA                                        BG      BGR     100
BURKINA FASO                                    BF      BFA     854
BURUNDI                                         BI      BDI     108
CAMBODIA                                        KH      KHM     116
CAMEROON                                        CM      CMR     120
CANADA                                          CA      CAN     124
CAPE VERDE                                      CV      CPV     132
CAYMAN ISLANDS                                  KY      CYM     136
CENTRAL AFRICAN REPUBLIC                        CF      CAF     140
CHAD                                            TD      TCD     148
CHILE                                           CL      CHL     152
CHINA                                           CN      CHN     156
CHRISTMAS ISLAND                                CX      CXR     162
COCOS (KEELING) ISLANDS                         CC      CCK     166
COLOMBIA                                        CO      COL     170
COMOROS                                         KM      COM     174
CONGO                                           CG      COG     178
CONGO, THE DEMOCRATIC REPUBLIC OF THE           CD      COD     180
COOK ISLANDS                                    CK      COK     184
COSTA RICA                                      CR      CRI     188
COTE D'IVOIRE                                   CI      CIV     384
CROATIA (local name: Hrvatska)                  HR      HRV     191
CUBA                                            CU      CUB     192
CYPRUS                                          CY      CYP     196
CZECH REPUBLIC                                  CZ      CZE     203
DENMARK                                         DK      DNK     208
DJIBOUTI                                        DJ      DJI     262
DOMINICA                                        DM      DMA     212
DOMINICAN REPUBLIC                              DO      DOM     214
EAST TIMOR                                      TP      TMP     626
ECUADOR                                         EC      ECU     218
EGYPT                                           EG      EGY     818
EL SALVADOR                                     SV      SLV     222
EQUATORIAL GUINEA                               GQ      GNQ     226
ERITREA                                         ER      ERI     232
ESTONIA                                         EE      EST     233
ETHIOPIA                                        ET      ETH     231
FALKLAND ISLANDS (MALVINAS)                     FK      FLK     238
FAROE ISLANDS                                   FO      FRO     234
FIJI                                            FJ      FJI     242
FINLAND                                         FI      FIN     246
FRANCE                                          FR      FRA     250
FRANCE, METROPOLITAN                            FX      FXX     249
FRENCH GUIANA                                   GF      GUF     254
FRENCH POLYNESIA                                PF      PYF     258
FRENCH SOUTHERN TERRITORIES                     TF      ATF     260
GABON                                           GA      GAB     266
GAMBIA                                          GM      GMB     270
GEORGIA                                         GE      GEO     268
GERMANY                                         DE      DEU     276
GHANA                                           GH      GHA     288
GIBRALTAR                                       GI      GIB     292
GREECE                                          GR      GRC     300
GREENLAND                                       GL      GRL     304
GRENADA                                         GD      GRD     308
GUADELOUPE                                      GP      GLP     312
GUAM                                            GU      GUM     316
GUATEMALA                                       GT      GTM     320
GUINEA                                          GN      GIN     324
GUINEA-BISSAU                                   GW      GNB     624
GUYANA                                          GY      GUY     328
HAITI                                           HT      HTI     332
HEARD AND MC DONALD ISLANDS                     HM      HMD     334
HOLY SEE (VATICAN CITY STATE)                   VA      VAT     336
HONDURAS                                        HN      HND     340
HONG KONG                                       HK      HKG     344
HUNGARY                                         HU      HUN     348
ICELAND                                         IS      ISL     352
INDIA                                           IN      IND     356
INDONESIA                                       ID      IDN     360
IRAN (ISLAMIC REPUBLIC OF)                      IR      IRN     364
IRAQ                                            IQ      IRQ     368
IRELAND                                         IE      IRL     372
ISRAEL                                          IL      ISR     376
ITALY                                           IT      ITA     380
JAMAICA                                         JM      JAM     388
JAPAN                                           JP      JPN     392
JORDAN                                          JO      JOR     400
KAZAKHSTAN                                      KZ      KAZ     398
KENYA                                           KE      KEN     404
KIRIBATI                                        KI      KIR     296
KOREA, DEMOCRATIC PEOPLE'S REPUBLIC OF          KP      PRK     408
KOREA, REPUBLIC OF                              KR      KOR     410
KUWAIT                                          KW      KWT     414
KYRGYZSTAN                                      KG      KGZ     417
LAO PEOPLE'S DEMOCRATIC REPUBLIC                LA      LAO     418
LATVIA                                          LV      LVA     428
LEBANON                                         LB      LBN     422
LESOTHO                                         LS      LSO     426
LIBERIA                                         LR      LBR     430
LIBYAN ARAB JAMAHIRIYA                          LY      LBY     434
LIECHTENSTEIN                                   LI      LIE     438
LITHUANIA                                       LT      LTU     440
LUXEMBOURG                                      LU      LUX     442
MACAU SAR                                       MO      MAC     446
MACEDONIA, THE FORMER YUGOSLAV REPUBLIC OF      MK      MKD     807
MADAGASCAR                                      MG      MDG     450
MALAWI                                          MW      MWI     454
MALAYSIA                                        MY      MYS     458
MALDIVES                                        MV      MDV     462
MALI                                            ML      MLI     466
MALTA                                           MT      MLT     470
MARSHALL ISLANDS                                MH      MHL     584
MARTINIQUE                                      MQ      MTQ     474
MAURITANIA                                      MR      MRT     478
MAURITIUS                                       MU      MUS     480
MAYOTTE                                         YT      MYT     175
MEXICO                                          MX      MEX     484
MICRONESIA, FEDERATED STATES OF                 FM      FSM     583
MOLDOVA, REPUBLIC OF                            MD      MDA     498
MONACO                                          MC      MCO     492
MONGOLIA                                        MN      MNG     496
MONTSERRAT                                      MS      MSR     500
MOROCCO                                         MA      MAR     504
MOZAMBIQUE                                      MZ      MOZ     508
MYANMAR                                         MM      MMR     104
NAMIBIA                                         NA      NAM     516
NAURU                                           NR      NRU     520
NEPAL                                           NP      NPL     524
NETHERLANDS                                     NL      NLD     528
NETHERLANDS ANTILLES                            AN      ANT     530
NEW CALEDONIA                                   NC      NCL     540
NEW ZEALAND                                     NZ      NZL     554
NICARAGUA                                       NI      NIC     558
NIGER                                           NE      NER     562
NIGERIA                                         NG      NGA     566
NIUE                                            NU      NIU     570
NORFOLK ISLAND                                  NF      NFK     574
NORTHERN MARIANA ISLANDS                        MP      MNP     580
NORWAY                                          NO      NOR     578
OMAN                                            OM      OMN     512
PAKISTAN                                        PK      PAK     586
PALAU                                           PW      PLW     585
PANAMA                                          PA      PAN     591
PAPUA NEW GUINEA                                PG      PNG     598
PARAGUAY                                        PY      PRY     600
PERU                                            PE      PER     604
PHILIPPINES                                     PH      PHL     608
PITCAIRN                                        PN      PCN     612
POLAND                                          PL      POL     616
PORTUGAL                                        PT      PRT     620
PUERTO RICO                                     PR      PRI     630
QATAR                                           QA      QAT     634
REUNION                                         RE      REU     638
ROMANIA                                         RO      ROM     642
RUSSIAN FEDERATION                              RU      RUS     643
RWANDA                                          RW      RWA     646
SAINT KITTS AND NEVIS                           KN      KNA     659
SAINT LUCIA                                     LC      LCA     662
SAINT VINCENT AND THE GRENADINES                VC      VCT     670
SAMOA                                           WS      WSM     882
SAN MARINO                                      SM      SMR     674
SAO TOME AND PRINCIPE                           ST      STP     678
SAUDI ARABIA                                    SA      SAU     682
SENEGAL                                         SN      SEN     686
SEYCHELLES                                      SC      SYC     690
SIERRA LEONE                                    SL      SLE     694
SINGAPORE                                       SG      SGP     702
SLOVAKIA (Slovak Republic)                      SK      SVK     703
SLOVENIA                                        SI      SVN     705
SOLOMON ISLANDS                                 SB      SLB     090
SOMALIA                                         SO      SOM     706
SOUTH AFRICA                                    ZA      ZAF     710
SOUTH GEORGIA AND THE SOUTH SANDWICH ISLANDS    GS      SGS     239
SPAIN                                           ES      ESP     724
SRI LANKA                                       LK      LKA     144
ST. HELENA                                      SH      SHN     654
ST. PIERRE AND MIQUELON                         PM      SPM     666
SUDAN                                           SD      SDN     736
SURINAME                                        SR      SUR     740
SVALBARD AND JAN MAYEN ISLANDS                  SJ      SJM     744
SWAZILAND                                       SZ      SWZ     748
SWEDEN                                          SE      SWE     752
SWITZERLAND                                     CH      CHE     756
SYRIAN ARAB REPUBLIC                            SY      SYR     760
TAIWAN                                          TW      TWN     158
TAJIKISTAN                                      TJ      TJK     762
TANZANIA, UNITED REPUBLIC OF                    TZ      TZA     834
THAILAND                                        TH      THA     764
TOGO                                            TG      TGO     768
TOKELAU                                         TK      TKL     772
TONGA                                           TO      TON     776
TRINIDAD AND TOBAGO                             TT      TTO     780
TUNISIA                                         TN      TUN     788
TURKEY                                          TR      TUR     792
TURKMENISTAN                                    TM      TKM     795
TURKS AND CAICOS ISLANDS                        TC      TCA     796
TUVALU                                          TV      TUV     798
UGANDA                                          UG      UGA     800
UKRAINE                                         UA      UKR     804
UNITED ARAB EMIRATES                            AE      ARE     784
UNITED KINGDOM                                  GB      GBR     826
UNITED STATES                                   US      USA     840
UNITED STATES MINOR OUTLYING ISLANDS            UM      UMI     581
URUGUAY                                         UY      URY     858
UZBEKISTAN                                      UZ      UZB     860
VANUATU                                         VU      VUT     548
VENEZUELA                                       VE      VEN     862
VIET NAM                                        VN      VNM     704
VIRGIN ISLANDS (BRITISH)                        VG      VGB     092
VIRGIN ISLANDS (U.S.)                           VI      VIR     850
WALLIS AND FUTUNA ISLANDS                       WF      WLF     876
WESTERN SAHARA                                  EH      ESH     732
YEMEN                                           YE      YEM     887
YUGOSLAVIA                                      YU      YUG     891
ZAMBIA                                          ZM      ZMB     894
ZIMBABWE                                        ZW      ZWE     716
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\display\proppage\sample\dssample.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Sample Code for DS-11 Session Title _PID_GUIDSample Code for DS-11 Session Eric Brown Normal.dot Eric Brown Microsoft Word 8.0Sample Code for the DS-11 Session Extending the Active Directory User Interface The enclosed sample code creates a COM object that produces a property page. This sample shows how to use the COM interfaces IShellExtInit and IShellPropSheetExt to create property pages. Property pages for Active Directory Objects can be created one of two ways: using HTML or as a COM object. HTML property pages are not supported in the first NT 5 beta release. COM object property pages must implement the two shell extension interfaces as illustrated by this sample. Note that the sample uses two separate classes (in addition to the class factory class). They could be combined into one, but in actual practice you may want to have several page classes be created by a single page host class. Steps to Use Copy proppage.dll from the debug directory to somewhere on the target machine s path. regsvr32 proppage.dll  to register the class ID of the page. Copy the dispspec.exe application to somewhere on your path and start it. The General page should be pointed to the user class. If not, choose the user class. Choose the Property Page tab of the dispspec application. Choose  Administrative  from the View combobox. Click on the Add button. In the  Add Property Page  dialog, choose the  ActiveX Pages  radio button and then type  DsSamplePropertyPage  (without the quotes) into the ProgID edit control and click OK. Click OK in the dispspec application to close it. Start  mmc.exe  and choose Console-Add/Remove Snap-in and add the  Schema Management  Snap-in. Add a new attribute with the Common Name of  Spending-Limit , the LDAP Display name of  spendingLimit , and the Syntax of  Case Insensitive String . Add this new attribute to the Optional Attributes of the User class object. Again go to the MMC Console-Add/Remove Snap-in menu item and add the  Microsoft Directory Service Manager  snap-in. Now, when you view properties on a user object, you should see a new tab  Spending Limit  where you can view and set the new user attribute. Note that it takes a minimum of 5 minutes for schema changes to be added to the Active Directory s in-memory schema cache. Steps to Compile the Sample Code This sample code is a Microsoft Visual C++ 5.0 project. To load it into VC++ do the following: Copy the sample code to a directory on your hard disk. Start VC++ 5.0. Choose File-Open Workspace, navigate to the directory containing the sample code and choose  sample.dsw. Press F7 to compile the code. Notes on the DispSpec.exe Application This is a temporary tool for the first beta. We expect its functionality to be replaced in a later release. The exact form of the replacement application has yet to be determined. If you want to modify the Context Menu for a class, you must delete the existing class ID and substitute a new class ID or menu command. This is a Beta 1 limitation that will be addressed in the next beta release. This application cannot create new Display Specifier objects nor can it modify the list of Display Specifiers stored on schema class objects. These are Beta 1 limitations that will be removed by the final release. Display Specifier White Paper A white paper has been written that explains in detail the architecture and implementation of the Windows NT Active Directory user interface extension mechanism. We expect this white paper will be available for downloading from the Microsoft Web site.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\display\proppage\shell\dsprpres\placefil.txt ===
;

dsprpres.dll     retail
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\dsadminlib\dependencies.txt ===
This is a list of the components that depend on dsadminp.lib and/or the headers in admin\dsadminlib\inc

Component:                             Location:

Active Directory Users & Computers,    admin\snapin\dsadmin
Active Directory Schema,               admin\snapin\schmmgmt
Active Directory Domains & Trusts,     admin\snapin\domain
Delegation of Control Wizard,          admin\extens\OUDeleg
DS Command line utilities,             admin\dscmd
Active Directory Property Pages,       admin\display\proppage
ACL Diag,                              admin\extens\acldiag
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\dsclientnt4\package\usa\eula.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft SUPPLEMENTAL END USER LICENSE AGREEMENT FOR MICROSOFT SOFTWARE TitleSUPPLEMENTAL END USER LICENSE AGREEMENT FOR MICROSOFT SOFTWARE Normal.dot Microsoft Word 9.0SUPPLEMENTAL END USER LICENSE AGREEMENT FOR MICROSOFT SOFTWARE ( Supplemental EULA IMPORTANT:  READ CAREFULLY   The Microsoft operating system components accompanying this Supplemental EULA, including any  online  or electronic documentation ( OS Components ) are subject to the terms and conditions of the agreement under which you have licensed the applicable Microsoft operating system product described below (each an  End User License Agreement ) and the terms and conditions of this Supplemental EULA.  BY INSTALLING, COPYING, DOWNLOADING, ACCESSING, OR OTHERWISE USING THE OS COMPONENTS, YOU AGREE TO BE BOUND BY THE TERMS AND CONDITIONS OF THE APPLICABLE OPERATING SYSTEM PRODUCT EULA AND THIS SUPPLEMENTAL EULA.  IF YOU DO NOT AGREE TO THESE TERMS AND CONDITIONS, YOU MAY NOT INSTALL, COPY, DOWNLOAD, ACCESS, OR USE THE OS COMPONENTS. NOTE:  IF YOU DO NOT HAVE A VALIDLY LICENSED COPY OF ANY VERSION OR EDITION OF MICROSOFT WINDOWS NT 4.0 (each an  OS Product ), YOU ARE NOT AUTHORIZED TO INSTALL, COPY, DOWNLOAD, ACCESS, OR OTHERWISE USE THE OS COMPONENTS AND YOU HAVE NO RIGHTS UNDER THIS SUPPLEMENTAL EULA. Capitalized terms used in this Supplemental EULA and not otherwise defined herein shall have the meanings assigned to them in the applicable OS Product EULA. General.  The OS Components are provided to you solely to update, supplement, or replace existing functionality of the applicable OS Product, and upon installation the OS Components become a part of the OS Product.  In the event your OS Product is a version of Windows NT Server, the OS Components are deemed  Client Software .  You are hereby granted a license to use the OS Components under the terms and conditions of the OS Product EULA for the applicable OS Product (which are hereby incorporated by reference) and the terms and conditions set forth in this Supplemental EULA, provided that you comply with all such terms and conditions.  To the extent that there is a conflict among any of these terms and conditions applicable to the OS Components, the terms and conditions in this Supplemental EULA shall take precedence. Additional Rights and Limitations.   You may reproduce, install and use one copy of the OS Components on each of your computers running validly licensed copies of the OS Product provided that each such computer is not acting as a domain controller, and provided that you use such additional copies of the OS Components in accordance with the terms and conditions above.   Unless you acquired the OS Components on external media, you may make a single copy of the OS Components solely for archival purposes or reinstallation of the OS Components on the same computer as the OS Components were previously installed.  Microsoft Corporation, its subsidiaries and/or suppliers retain all right, title and interest in and to the OS Components.  All rights not expressly granted are reserved by Microsoft Corporation, its subsidiaries and/or suppliers. You may reproduce and distribute an unlimited number of copies of the OS Components (either (i) as a whole, including all components, (ii) as a whole but without the user interface components, or (iii) just the complete Active Directory Service Interfaces ( ) package portion) provided that: (a) you distribute the OS Components in object code form only as part of and in conjunction with your own software application product; (b) your software application product adds significant and primary functionality to the OS Components; (c) you distribute your own software application product containing the OS Components pursuant to an End-User License Agreement with terms no less protective than those contained in the applicable OS Product EULA (including the restrictions contained in this Supplemental EULA).  Your End-User License Agreement may be  break-the-seal click-wrap  or signed; (d) you include a valid copyright notice for your software application product and do not remove any copyright or trademark notices contained in the OS Components; (e) you indemnify, hold harmless and defend Microsoft from and against any claims or lawsuits, including attorneys  fees, that arise or result from the use or distribution of your software application product; (f) you do not modify the OS Components; and (g) you do not permit further redistribution of the OS Components. You acknowledge that the OS Components are of U.S. origin.  You agree to comply with all applicable international and national laws that apply to the OS Components, including the U.S. Export Administration Regulations, as well as end-user, end-use and destination restrictions issued by U.S. and other governments. For additional information, see <http://www.microsoft.com/exporting/>. THE LIMITED WARRANTY (IF ANY) INCLUDED IN THE APPLICABLE OS PRODUCT EULA APPLIES TO THE OS COMPONENTS PROVIDED THE OS COMPONENTS HAVE BEEN LICENSED BY YOU WITHIN THE TERM OF THE LIMITED WARRANTY IN THE APPLICABLE OS PRODUCT EULA.  THIS SUPPLEMENTAL EULA DOES NOT EXTEND THE TIME PERIOD FOR WHICH THE LIMITED WARRANTY IS PROVIDED. Windows Update Consumer_v4 FINAL
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\dsclientnt4\package\ml\eula.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft SUPPLEMENTAL END USER LICENSE AGREEMENT FOR MICROSOFT SOFTWARE TitleSUPPLEMENTAL END USER LICENSE AGREEMENT FOR MICROSOFT SOFTWARE Normal.dot Microsoft Word 9.0SUPPLEMENTAL END USER LICENSE AGREEMENT FOR MICROSOFT SOFTWARE ( Supplemental EULA IMPORTANT:  READ CAREFULLY   The Microsoft operating system components accompanying this Supplemental EULA, including any  online  or electronic documentation ( OS Components ) are subject to the terms and conditions of the agreement under which you have licensed the applicable Microsoft operating system product described below (each an  End User License Agreement ) and the terms and conditions of this Supplemental EULA.  BY INSTALLING, COPYING, DOWNLOADING, ACCESSING, OR OTHERWISE USING THE OS COMPONENTS, YOU AGREE TO BE BOUND BY THE TERMS AND CONDITIONS OF THE APPLICABLE OPERATING SYSTEM PRODUCT EULA AND THIS SUPPLEMENTAL EULA.  IF YOU DO NOT AGREE TO THESE TERMS AND CONDITIONS, YOU MAY NOT INSTALL, COPY, DOWNLOAD, ACCESS, OR USE THE OS COMPONENTS. NOTE:  IF YOU DO NOT HAVE A VALIDLY LICENSED COPY OF ANY VERSION OR EDITION OF MICROSOFT WINDOWS NT 4.0 (each an  OS Product ), YOU ARE NOT AUTHORIZED TO INSTALL, COPY, DOWNLOAD, ACCESS, OR OTHERWISE USE THE OS COMPONENTS AND YOU HAVE NO RIGHTS UNDER THIS SUPPLEMENTAL EULA. Capitalized terms used in this Supplemental EULA and not otherwise defined herein shall have the meanings assigned to them in the applicable OS Product EULA. General.  The OS Components are provided to you solely to update, supplement, or replace existing functionality of the applicable OS Product, and upon installation the OS Components become a part of the OS Product.  In the event your OS Product is a version of Windows NT Server, the OS Components are deemed  Client Software .  You are hereby granted a license to use the OS Components under the terms and conditions of the OS Product EULA for the applicable OS Product (which are hereby incorporated by reference) and the terms and conditions set forth in this Supplemental EULA, provided that you comply with all such terms and conditions.  To the extent that there is a conflict among any of these terms and conditions applicable to the OS Components, the terms and conditions in this Supplemental EULA shall take precedence. Additional Rights and Limitations.   You may reproduce, install and use one copy of the OS Components on each of your computers running validly licensed copies of the OS Product provided that each such computer is not acting as a domain controller, and provided that you use such additional copies of the OS Components in accordance with the terms and conditions above.   Unless you acquired the OS Components on external media, you may make a single copy of the OS Components solely for archival purposes or reinstallation of the OS Components on the same computer as the OS Components were previously installed.  Microsoft Corporation, its subsidiaries and/or suppliers retain all right, title and interest in and to the OS Components.  All rights not expressly granted are reserved by Microsoft Corporation, its subsidiaries and/or suppliers. You may reproduce and distribute an unlimited number of copies of the OS Components (either (i) as a whole, including all components, (ii) as a whole but without the user interface components, or (iii) just the complete Active Directory Service Interfaces ( ) package portion) provided that: (a) you distribute the OS Components in object code form only as part of and in conjunction with your own software application product; (b) your software application product adds significant and primary functionality to the OS Components; (c) you distribute your own software application product containing the OS Components pursuant to an End-User License Agreement with terms no less protective than those contained in the applicable OS Product EULA (including the restrictions contained in this Supplemental EULA).  Your End-User License Agreement may be  break-the-seal click-wrap  or signed; (d) you include a valid copyright notice for your software application product and do not remove any copyright or trademark notices contained in the OS Components; (e) you indemnify, hold harmless and defend Microsoft from and against any claims or lawsuits, including attorneys  fees, that arise or result from the use or distribution of your software application product; (f) you do not modify the OS Components; and (g) you do not permit further redistribution of the OS Components. You acknowledge that the OS Components are of U.S. origin.  You agree to comply with all applicable international and national laws that apply to the OS Components, including the U.S. Export Administration Regulations, as well as end-user, end-use and destination restrictions issued by U.S. and other governments. For additional information, see <http://www.microsoft.com/exporting/>. THE LIMITED WARRANTY (IF ANY) INCLUDED IN THE APPLICABLE OS PRODUCT EULA APPLIES TO THE OS COMPONENTS PROVIDED THE OS COMPONENTS HAVE BEEN LICENSED BY YOU WITHIN THE TERM OF THE LIMITED WARRANTY IN THE APPLICABLE OS PRODUCT EULA.  THIS SUPPLEMENTAL EULA DOES NOT EXTEND THE TIME PERIOD FOR WHICH THE LIMITED WARRANTY IS PROVIDED. Windows Update Consumer_v4 FINAL
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\dsclientnt4\package\usa\eula.txt ===
SUPPLEMENTAL END USER LICENSE AGREEMENT FOR MICROSOFT SOFTWARE ("Supplemental EULA")


IMPORTANT:  READ CAREFULLY  The Microsoft operating system components accompanying this Supplemental EULA, including any "online" or electronic documentation ("OS Components") are subject to the terms and conditions of the agreement under which you have licensed the applicable Microsoft operating system product described below (each an "End User License Agreement" or "EULA") and the terms and conditions of this Supplemental EULA.  BY INSTALLING, COPYING, DOWNLOADING, ACCESSING, OR OTHERWISE USING THE OS COMPONENTS, YOU AGREE TO BE BOUND BY THE TERMS AND CONDITIONS OF THE APPLICABLE OPERATING SYSTEM PRODUCT EULA AND THIS SUPPLEMENTAL EULA.  IF YOU DO NOT AGREE TO THESE TERMS AND CONDITIONS, YOU MAY NOT INSTALL, COPY, DOWNLOAD, ACCESS, OR USE THE OS COMPONENTS.

NOTE:  IF YOU DO NOT HAVE A VALIDLY LICENSED COPY OF ANY VERSION OR EDITION OF MICROSOFT WINDOWS NT 4.0 (each an "OS Product"), YOU ARE NOT AUTHORIZED TO INSTALL, COPY, DOWNLOAD, ACCESS, OR OTHERWISE USE THE OS COMPONENTS AND YOU HAVE NO RIGHTS UNDER THIS SUPPLEMENTAL EULA.

Capitalized terms used in this Supplemental EULA and not otherwise defined herein shall have the meanings assigned to them in the applicable OS Product EULA.

General.  The OS Components are provided to you solely to update, supplement, or replace existing functionality of the applicable OS Product, and upon installation the OS Components become a part of the OS Product.  In the event your OS Product is a version of Windows NT Server, the OS Components are deemed "Client Software".  You are hereby granted a license to use the OS Components under the terms and conditions of the OS Product EULA for the applicable OS Product (which are hereby incorporated by reference) and the terms and conditions set forth in this Supplemental EULA, provided that you comply with all such terms and conditions.  To the extent that there is a conflict among any of these terms and conditions applicable to the OS Components, the terms and conditions in this Supplemental EULA shall take precedence.

Additional Rights and Limitations.  

*	You may reproduce, install and use one copy of the OS Components on each of your computers running validly licensed copies of the OS Product provided that each such computer is not acting as a domain controller, and provided that you use such additional copies of the OS Components in accordance with the terms and conditions above.  

*	Unless you acquired the OS Components on external media, you may make a single copy of the OS Components solely for archival purposes or reinstallation of the OS Components on the same computer as the OS Components were previously installed.  Microsoft Corporation, its subsidiaries and/or suppliers retain all right, title and interest in and to the OS Components.  All rights not expressly granted are reserved by Microsoft Corporation, its subsidiaries and/or suppliers.

*	You may reproduce and distribute an unlimited number of copies of the OS Components (either (i) as a whole, including all components, (ii) as a whole but without the user interface components, or (iii) just the complete Active Directory Service Interfaces ("ADSI") package portion) provided that: (a) you distribute the OS Components in object code form only as part of and in conjunction with your own software application product; (b) your software application product adds significant and primary functionality to the OS Components; (c) you distribute your own software application product containing the OS Components pursuant to an End-User License Agreement with terms no less protective than those contained in the applicable OS Product EULA (including the restrictions contained in this Supplemental EULA).  Your End-User License Agreement may be "break-the-seal", "click-wrap" or signed; (d) you include a valid copyright notice for your software application product and do not remove any copyright or trademark notices contained in the OS Components; (e) you indemnify, hold harmless and defend Microsoft from and against any claims or lawsuits, including attorneys' fees, that arise or result from the use or distribution of your software application product; (f) you do not modify the OS Components; and (g) you do not permit further redistribution of the OS Components.

*	You acknowledge that the OS Components are of U.S. origin.  You agree to comply with all applicable international and national laws that apply to the OS Components, including the U.S. Export Administration Regulations, as well as end-user, end-use and destination restrictions issued by U.S. and other governments. For additional information, see <http://www.microsoft.com/exporting/>.

THE LIMITED WARRANTY (IF ANY) INCLUDED IN THE APPLICABLE OS PRODUCT EULA APPLIES TO THE OS COMPONENTS PROVIDED THE OS COMPONENTS HAVE BEEN LICENSED BY YOU WITHIN THE TERM OF THE LIMITED WARRANTY IN THE APPLICABLE OS PRODUCT EULA.  THIS SUPPLEMENTAL EULA DOES NOT EXTEND THE TIME PERIOD FOR WHICH THE LIMITED WARRANTY IS PROVIDED.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\dsclientnt4\readme.txt ===
Building the setup binaries and the dsclient.exe cabinet file:

////////////////////////////////////////////////////////////////////////////////////////////////
BUILDING THE SETUP BINARIES:

The source files for setup.exe and dscsetup.dll are also available in the dsclientNT4\setup directory.  
To build them start up a normal razzle window and from %sdxroot%\admin\dsclientNT4 type buildsetup.cmd.  
The binaries will be built and copied to the binaries\usa directory.

////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////
GENERATING THE CABINET FILES:

The makedsclient.cmd works as follows (where <loc> = usa, jpn, cht, etc.):
All binaries that will be packaged must be in a loc directory under dsclientNT4\binaries\<loc>
All help files must be in dsclientNT4\help\<loc>
All cab generation files (sed, inf, EULA.txt) must be in dsclientNT4\package\<loc>

Makedsclient <loc> (if <loc> is not specified it defaults to usa) will create a directory 
called dsclientNT4\release\<loc> and copy all binaries, help, and package files.  
It then runs iexpress to generate the adsix86.exe and dsclient.exe cabs.

The final deliverable will be found at %sdxroot%\admin\dsclientNT4\release\<loc>\dsclient.exe

/////////////////////////////////////////////////////////////////////////////////////////////////
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\dsclientnt4\package\ml\eula.txt ===
SUPPLEMENTAL END USER LICENSE AGREEMENT FOR MICROSOFT SOFTWARE ("Supplemental EULA")


IMPORTANT:  READ CAREFULLY  The Microsoft operating system components accompanying this Supplemental EULA, including any "online" or electronic documentation ("OS Components") are subject to the terms and conditions of the agreement under which you have licensed the applicable Microsoft operating system product described below (each an "End User License Agreement" or "EULA") and the terms and conditions of this Supplemental EULA.  BY INSTALLING, COPYING, DOWNLOADING, ACCESSING, OR OTHERWISE USING THE OS COMPONENTS, YOU AGREE TO BE BOUND BY THE TERMS AND CONDITIONS OF THE APPLICABLE OPERATING SYSTEM PRODUCT EULA AND THIS SUPPLEMENTAL EULA.  IF YOU DO NOT AGREE TO THESE TERMS AND CONDITIONS, YOU MAY NOT INSTALL, COPY, DOWNLOAD, ACCESS, OR USE THE OS COMPONENTS.

NOTE:  IF YOU DO NOT HAVE A VALIDLY LICENSED COPY OF ANY VERSION OR EDITION OF MICROSOFT WINDOWS NT 4.0 (each an "OS Product"), YOU ARE NOT AUTHORIZED TO INSTALL, COPY, DOWNLOAD, ACCESS, OR OTHERWISE USE THE OS COMPONENTS AND YOU HAVE NO RIGHTS UNDER THIS SUPPLEMENTAL EULA.

Capitalized terms used in this Supplemental EULA and not otherwise defined herein shall have the meanings assigned to them in the applicable OS Product EULA.

General.  The OS Components are provided to you solely to update, supplement, or replace existing functionality of the applicable OS Product, and upon installation the OS Components become a part of the OS Product.  In the event your OS Product is a version of Windows NT Server, the OS Components are deemed "Client Software".  You are hereby granted a license to use the OS Components under the terms and conditions of the OS Product EULA for the applicable OS Product (which are hereby incorporated by reference) and the terms and conditions set forth in this Supplemental EULA, provided that you comply with all such terms and conditions.  To the extent that there is a conflict among any of these terms and conditions applicable to the OS Components, the terms and conditions in this Supplemental EULA shall take precedence.

Additional Rights and Limitations.  

*	You may reproduce, install and use one copy of the OS Components on each of your computers running validly licensed copies of the OS Product provided that each such computer is not acting as a domain controller, and provided that you use such additional copies of the OS Components in accordance with the terms and conditions above.  

*	Unless you acquired the OS Components on external media, you may make a single copy of the OS Components solely for archival purposes or reinstallation of the OS Components on the same computer as the OS Components were previously installed.  Microsoft Corporation, its subsidiaries and/or suppliers retain all right, title and interest in and to the OS Components.  All rights not expressly granted are reserved by Microsoft Corporation, its subsidiaries and/or suppliers.

*	You may reproduce and distribute an unlimited number of copies of the OS Components (either (i) as a whole, including all components, (ii) as a whole but without the user interface components, or (iii) just the complete Active Directory Service Interfaces ("ADSI") package portion) provided that: (a) you distribute the OS Components in object code form only as part of and in conjunction with your own software application product; (b) your software application product adds significant and primary functionality to the OS Components; (c) you distribute your own software application product containing the OS Components pursuant to an End-User License Agreement with terms no less protective than those contained in the applicable OS Product EULA (including the restrictions contained in this Supplemental EULA).  Your End-User License Agreement may be "break-the-seal", "click-wrap" or signed; (d) you include a valid copyright notice for your software application product and do not remove any copyright or trademark notices contained in the OS Components; (e) you indemnify, hold harmless and defend Microsoft from and against any claims or lawsuits, including attorneys' fees, that arise or result from the use or distribution of your software application product; (f) you do not modify the OS Components; and (g) you do not permit further redistribution of the OS Components.

*	You acknowledge that the OS Components are of U.S. origin.  You agree to comply with all applicable international and national laws that apply to the OS Components, including the U.S. Export Administration Regulations, as well as end-user, end-use and destination restrictions issued by U.S. and other governments. For additional information, see <http://www.microsoft.com/exporting/>.

THE LIMITED WARRANTY (IF ANY) INCLUDED IN THE APPLICABLE OS PRODUCT EULA APPLIES TO THE OS COMPONENTS PROVIDED THE OS COMPONENTS HAVE BEEN LICENSED BY YOU WITHIN THE TERM OF THE LIMITED WARRANTY IN THE APPLICABLE OS PRODUCT EULA.  THIS SUPPLEMENTAL EULA DOES NOT EXTEND THE TIME PERIOD FOR WHICH THE LIMITED WARRANTY IS PROVIDED.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\dscmd\test\expectederrors.txt ===
dsmod failed:OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:Directory object not found.
Description:  dsadd will add objects to the directory

Syntax:  dsadd OBJECTTYPE [-s SERVER | -d DOMAIN]

[-u USERNAME] [-w {PASSWORD | *}] [-q] ARGUMENTS

Parameters:



Value             Description

-s SERVER         Connect to the DC with name SERVER [Default: this system]

-d DOMAIN         Connect to a DC in domain DOMAIN [Default: Logon domain]

-u USERNAME       Connect as USERNAME [Default: the logged in user]

-w PASSWORD       Password for the user USERNAME [if * then prompt for pwd]

-q                Quiet mode: suppress all output to STDOUT

OBJECTTYPE        Type of object to add which is one of {user,

                  computer,group,contact, ou, subnet, site,

                  slink, slinkbr, conn}

ARGUMENTS         Parameters specific to the object type being added.

                  For details, type "dsadd OBJECTTYPE -h" where OBJECTTYPE is

                  one of the valid object types listed above

Description:  dsadd will add objects to the directory

Syntax:  dsadd OBJECTTYPE [-s SERVER | -d DOMAIN]

[-u USERNAME] [-w {PASSWORD | *}] [-q] ARGUMENTS

Parameters:



Value             Description

-s SERVER         Connect to the DC with name SERVER [Default: this system]

-d DOMAIN         Connect to a DC in domain DOMAIN [Default: Logon domain]

-u USERNAME       Connect as USERNAME [Default: the logged in user]

-w PASSWORD       Password for the user USERNAME [if * then prompt for pwd]

-q                Quiet mode: suppress all output to STDOUT

OBJECTTYPE        Type of object to add which is one of {user,

                  computer,group,contact, ou, subnet, site,

                  slink, slinkbr, conn}

ARGUMENTS         Parameters specific to the object type being added.

                  For details, type "dsadd OBJECTTYPE -h" where OBJECTTYPE is

                  one of the valid object types listed above

dsadd failed:CN=nnGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a universal group as a member.
dsadd failed:CN=ooGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a universal group as a member.
dsadd failed:CN=ppGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a local group as a member.
dsadd failed:CN=qqGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A universal group cannot have a local group as a member.
dsadd failed:CN=rrGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a local group as a member.
dsadd failed:CN=ssGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A universal group cannot have a local group as a member.
dsadd failed:CN=ttGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A universal group cannot have a local group as a member.
dsadd failed:CN=uuGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A universal group cannot have a local group as a member.
dsadd failed:CN=vvGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a local group as a member.
dsadd failed:CN=wwGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a local group as a member.
dsadd failed:CN=xxGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a universal group as a member.
dsadd failed:CN=yyGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a universal group as a member.
dsadd failed:OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:An attempt was made to add an object to the directory with a name that is already in use.
dsadd failed:CN=aGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:The specified group already exists.
dsadd failed:CN=aUser,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:The specified user already exists.
dsadd failed:CN=aComp,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:The specified user already exists.
dsadd failed:CN=aCont,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:An attempt was made to add an object to the directory with a name that is already in use.
Description:  dsmod modifies existing objects in the directory

Syntax:     dsmod [-s SERVER | -d DOMAIN] [-u USERNAME] [-w {PASSWORD | *}] 

            [-q] OBJECTTYPE OBJECTDN ...[-desc DESCRIPTION] ARGUMENTS

Parameters:



Value             Description

-s SERVER         Connect to the DC with name SERVER [Default: this system]

-d DOMAIN         Connect to a DC in domain DOMAIN [Default: this domain]

-u USERNAME       Connect as USERNAME [Default: the logged in user]

-w PASSWORD       Password for the user USERNAME [if * then prompt for pwd]

-q                Quiet mode

OBJECTTYPE        Type of object to modify which is one of

                  {user, computer, group, contact, ou, subnet, site, slink, slinkbr, conn}

OBJECTDN ...      The LDAP distinguished name of the object being modified

-desc DESCRIPTION Set the description attribute for the object specified

                  by OBJECTDN

ARGUMENTS         Parameters specific to the object type being modified.

                  For details, type dsmod OBJECTTYPE h where OBJECTTYPE is

                  one of the valid object types listed above

Description:  dsmod modifies existing objects in the directory

Syntax:     dsmod [-s SERVER | -d DOMAIN] [-u USERNAME] [-w {PASSWORD | *}] 

            [-q] OBJECTTYPE OBJECTDN ...[-desc DESCRIPTION] ARGUMENTS

Parameters:



Value             Description

-s SERVER         Connect to the DC with name SERVER [Default: this system]

-d DOMAIN         Connect to a DC in domain DOMAIN [Default: this domain]

-u USERNAME       Connect as USERNAME [Default: the logged in user]

-w PASSWORD       Password for the user USERNAME [if * then prompt for pwd]

-q                Quiet mode

OBJECTTYPE        Type of object to modify which is one of

                  {user, computer, group, contact, ou, subnet, site, slink, slinkbr, conn}

OBJECTDN ...      The LDAP distinguished name of the object being modified

-desc DESCRIPTION Set the description attribute for the object specified

                  by OBJECTDN

ARGUMENTS         Parameters specific to the object type being modified.

                  For details, type dsmod OBJECTTYPE h where OBJECTTYPE is

                  one of the valid object types listed above

Description: dsmod ou will modify an existing organizational unit in the

directory

Syntax:     dsmod ou {<NAME > | <OBJECTDN ...>}

            [-name NEWNAME] [-desc DESCRIPTION]

Parameters:



Value                   Description

NAME                    Common name of one or more OUs to modify

OBJECTDN ...            DNs of one or more OUs to modify

-name NEWNAME           Rename the OU to NEWNAME

-desc DESCRIPTION       Set OU description to DESCRIPTION

Description: dsmod group modifies an existing group in the directory

Syntax:     dsmod group <OBJECTDN ......>

                [-samid SAMNAME] [-desc DESCRIPTION]

                [-secgrp yes|no] [-scope l|g|u]

            dsmod group {-addmbr|-rmmbr|-chmbr}

                OBJECTDN ...<MEMBER ...>



Parameters:



Value                   Description

NAME                    Common name of one or more groups to modify

OBJECTDN ......         DNs of one or more groups to modify

-name NEWNAME           Rename the group to NEWNAME

-samname SAMNAME        Set the SAM account name of group to SAMNAME

-desc DESCRIPTION       Set group description to DESCRIPTION

-secgrp yes|no          Set the group type to security or non-security

-scope l|g|u            Set the scope of group to local/global/universal

-memberof GROUP;        Make group a member of one or more groups GROUP;

Description:  dsmod user will modify an existing user in the directory

Syntax:     dsmod user {<NAME > | <OBJECTDN ...>}

            [-name NEWNAME]

            [-upn UPN] [-fn FIRSTNAME] [-mi INITIAL] [-ln LASTNAME]

            [-display DISPLAYNAME] [-pwd PASSWORD] [-desc DESCRIPTION]

            [-office OFFICE] [-tel PHONE#] [-email EMAIL]

            [-hometel HOMEPHONE#] [-pager PAGER#] [-mobile CELLPHONE#]

            [-fax FAX#] [-iptel IPPHONE#]

            [-title TITLE] [-dept DEPARTMENT] [-company COMPANY]

            [-mustchpwd yes|no] [-canchpwd yes|no] [-pwdneverexpires

            yes|no] [-acctexpires NUMDAYS] [-disabled yes|no]

Parameters:



Value                   Description

NAME                    Common name of one or more users to modify

OBJECTDN ...            DNs of one or more users to modify

-name NEWNAME           Rename the user to NEWNAME

-upn UPN                Set the upn value to UPN

-fn FIRSTNAME           Set user first name to FIRSTNAME

-mi INITIAL             Set user middle initial to INITIAL

-ln LASTNAME            Set user last name to LASTNAME

-display DISPLAYNAME    Set user display name to DISPLAYNAME

-pwd PASSWORD           Reset user password to PASSWORD

-desc DESCRIPTION       Set user description to DESCRIPTION

-office OFFICE          Set user office location to OFFICE

-tel PHONE#             Set user telephone# to PHONE#

-email EMAIL            Set user e-mail address to EMAIL

-hometel HOMEPHONE#     Set user home phone# to HOMEPHONE#

-pager PAGER#           Set user pager# to PAGER#

-mobile CELLPHONE#      Set user mobile# to CELLPHONE#

-fax FAX#               Set user fax# to FAX#

-title TITLE            Set user title to TITLE

-dept DEPARTMENT        Set user department to DEPARTMENT

-company COMPANY        Set user company info to COMPANY

-mustchpwd yes|no       Set if user must change password at next logon

-canchpwd yes|no        Set if user can change password or not

-pwdneverexpires yes|no Set if user password never expires or not

-acctexpires NUMDAYS    Set user account to expire in NUMDAYS days from

                        today [a value of 0 implies account never expires]

-disabled yes|no        Set if user account is disabled or not



Examples:

Resetting a user password can be accomplished by running



    dsmod user USERDN -pwd NEW_PASSWORD -mustchpwd yes



Passwords of multiple users can be reset at the same time to a common password

forcing them to change their password the next time they logon by running



    dsmod user USERDN1 USERDN2 USERDN3 -pwd NEW_PASSWORD -mustchpwd yes



Disabling multiple user accounts at the same time can be accomplished by running



    dsmod user USERDN1 USERDN2 USERDN3 -disabled yes



Description: dsmod computer will modify an existing computer in the directory

Syntax:     dsmod computer {<NAME > | <OBJECTDN ...>}

            [-name NEWNAME]

            [-desc DESCRIPTION] [-disabled yes|no] [-reset]

Parameters:



Value                   Description

NAME                    Common name of one or more computers to modify

OBJECTDN ...            DNs of one or more computers to modify

-name NEWNAME           Rename the computer to NEWNAME

-desc DESCRIPTION       Set computer description to DESCRIPTION

-disabled yes|no        Set if computer account is disabled or not

-reset                  Reset computer account



Examples:

Disabling (or reseting) multiple computer accounts at the same time can be

accomplished by running



    dsmod computer DN1 DN2 DN3 -disabled yes

    dsmod computer DN1 DN2 DN3 -reset

Description:  dsmod contact will modify an existing contact in the directory

Syntax:     dsmod contact {<NAME > | <OBJECTDN ...>}

            [-name NEWNAME]

            [-fn FIRSTNAME] [-mi INITIAL] [-ln LASTNAME]

            [-full FULLNAME] [-desc DESCRIPTION]

            [-office OFFICE] [-tel PHONE#] [-email EMAIL]

            [-hometel HOMEPHONE#] [-pager PAGER#] [-mobile CELLPHONE#]

            [-fax FAX#] [-iptel IPPHONE#]

            [-title TITLE] [-dept DEPARTMENT] [-company COMPANY]

Parameters:



Value                   Description

NAME                    Common name of one or more contacts to modify

OBJECTDN ...            DNs of one or more contacts to modify

-name NEWNAME           Rename the contact to NEWNAME

-fn FIRSTNAME           Set contact first name to FIRSTNAME

-mi INITIAL             Set contact middle initial to INITIAL

-ln LASTNAME            Set contact last name to LASTNAME

-full FULLNAME          Set contact full name to FULLNAME

-desc DESCRIPTION       Set contact description to DESCRIPTION

-office OFFICE          Set contact office location to OFFICE

-tel PHONE#             Set contact telephone# to PHONE#

-email EMAIL            Set contact e-mail address to EMAIL

-hometel HOMEPHONE#     Set contact home phone# to HOMEPHONE#

-pager PAGER#           Set contact pager# to PAGER#

-mobile CELLPHONE#      Set contact mobile# to CELLPHONE#

-fax FAX#               Set contact fax# to FAX#

-title TITLE            Set contact title to TITLE

-dept DEPARTMENT        Set contact department to DEPARTMENT

-company COMPANY        Set contact company info to COMPANY

dsmod failed:CN=LocalSec4,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:The request is not supported.
dsmod failed:CN=LocalSec6,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:The request is not supported.
dsmod failed:CN=GlobalSec4,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:The request is not supported.
dsmod failed:CN=GlobalSec6,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:The request is not supported.
dsmod failed:CN=LocalDist4,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:The request is not supported.
dsmod failed:CN=LocalDist6,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:The request is not supported.
dsmod failed:CN=GlobalDist4,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:The request is not supported.
dsmod failed:CN=GlobalDist6,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:The request is not supported.
dsmod failed:CN=dGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:The request is not supported.
dsmod failed:CN=dGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:The request is not supported.
Description:  dsmod user will modify an existing user in the directory

Syntax:     dsmod user {<NAME > | <OBJECTDN ...>}

            [-name NEWNAME]

            [-upn UPN] [-fn FIRSTNAME] [-mi INITIAL] [-ln LASTNAME]

            [-display DISPLAYNAME] [-pwd PASSWORD] [-desc DESCRIPTION]

            [-office OFFICE] [-tel PHONE#] [-email EMAIL]

            [-hometel HOMEPHONE#] [-pager PAGER#] [-mobile CELLPHONE#]

            [-fax FAX#] [-iptel IPPHONE#]

            [-title TITLE] [-dept DEPARTMENT] [-company COMPANY]

            [-mustchpwd yes|no] [-canchpwd yes|no] [-pwdneverexpires

            yes|no] [-acctexpires NUMDAYS] [-disabled yes|no]

Parameters:



Value                   Description

NAME                    Common name of one or more users to modify

OBJECTDN ...            DNs of one or more users to modify

-name NEWNAME           Rename the user to NEWNAME

-upn UPN                Set the upn value to UPN

-fn FIRSTNAME           Set user first name to FIRSTNAME

-mi INITIAL             Set user middle initial to INITIAL

-ln LASTNAME            Set user last name to LASTNAME

-display DISPLAYNAME    Set user display name to DISPLAYNAME

-pwd PASSWORD           Reset user password to PASSWORD

-desc DESCRIPTION       Set user description to DESCRIPTION

-office OFFICE          Set user office location to OFFICE

-tel PHONE#             Set user telephone# to PHONE#

-email EMAIL            Set user e-mail address to EMAIL

-hometel HOMEPHONE#     Set user home phone# to HOMEPHONE#

-pager PAGER#           Set user pager# to PAGER#

-mobile CELLPHONE#      Set user mobile# to CELLPHONE#

-fax FAX#               Set user fax# to FAX#

-title TITLE            Set user title to TITLE

-dept DEPARTMENT        Set user department to DEPARTMENT

-company COMPANY        Set user company info to COMPANY

-mustchpwd yes|no       Set if user must change password at next logon

-canchpwd yes|no        Set if user can change password or not

-pwdneverexpires yes|no Set if user password never expires or not

-acctexpires NUMDAYS    Set user account to expire in NUMDAYS days from

                        today [a value of 0 implies account never expires]

-disabled yes|no        Set if user account is disabled or not



Examples:

Resetting a user password can be accomplished by running



    dsmod user USERDN -pwd NEW_PASSWORD -mustchpwd yes



Passwords of multiple users can be reset at the same time to a common password

forcing them to change their password the next time they logon by running



    dsmod user USERDN1 USERDN2 USERDN3 -pwd NEW_PASSWORD -mustchpwd yes



Disabling multiple user accounts at the same time can be accomplished by running



    dsmod user USERDN1 USERDN2 USERDN3 -disabled yes



dsmod failed:CN=GlobalSec1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a local group as a member.
dsmod failed:CN=GlobalSec1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a universal group as a member.
dsmod failed:CN=GlobalSec1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a local group as a member.
dsmod failed:CN=GlobalSec1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a universal group as a member.
dsmod failed:CN=UniSec1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A universal group cannot have a local group as a member.
dsmod failed:CN=UniSec1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A universal group cannot have a local group as a member.
dsmod failed:CN=GlobalDist1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a local group as a member.
dsmod failed:CN=GlobalDist1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a universal group as a member.
dsmod failed:CN=GlobalDist1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a local group as a member.
dsmod failed:CN=GlobalDist1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a universal group as a member.
dsmod failed:CN=UniDist1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A universal group cannot have a local group as a member.
dsmod failed:CN=UniDist1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A universal group cannot have a local group as a member.
dsmod failed:CN=GlobalSec2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a local group as a member.
dsmod failed:CN=GlobalSec2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a universal group as a member.
dsmod failed:CN=GlobalSec2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a local group as a member.
dsmod failed:CN=GlobalSec2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a universal group as a member.
dsmod failed:CN=UniSec2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A universal group cannot have a local group as a member.
dsmod failed:CN=UniSec2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A universal group cannot have a local group as a member.
dsmod failed:CN=GlobalDist2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a local group as a member.
dsmod failed:CN=GlobalDist2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a universal group as a member.
dsmod failed:CN=GlobalDist2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a local group as a member.
dsmod failed:CN=GlobalDist2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A global group cannot have a universal group as a member.
dsmod failed:CN=UniDist2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A universal group cannot have a local group as a member.
dsmod failed:CN=UniDist2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com:A universal group cannot have a local group as a member.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\dscmd\test\expectedsuccess.txt ===
********** dsadd usage **********

********** dsadd -h usage **********

********** dsadd ou -h **********
Description:  dsadd ou adds an organizational unit to the directory

Syntax:  dsadd ou OBJECTDN [-desc DESCRIPTION]

Parameters:



Value                   Description

OBJECTDN                DN of the OU to add

-desc DESCRIPTION       Set the OU description to DESCRIPTION


********** dsadd group -h **********
Description:  dsadd group adds a group to the directory

Syntax:  dsadd group OBJECTDN [-secgrp yes|no]

[-scope l|g|u] [-samid SAMNAME] [-desc DESCRIPTION]

[-memberof GROUP;...] [-members MEMBER;...]

Parameters:



Value                   Description

OBJECTDN                DN of group to add

-secgrp yes|no          This group is a security grp or not [Default: yes]

-scope l|g|u            Scope of this group: local, global or universal

                        [Default: global]

-samid SAMNAME          Set the SAM account name of group to SAMNAME

-desc DESCRIPTION       Set group description to DESCRIPTION

-memberof GROUP;...     Make group a member of one or more groups GROUP;...

-members MEMBER;...     Add one or more members MEMBER;... to this group


********** dsadd user -h **********
Description:  dsadd user will add a user to the directory

Syntax:  dsadd user OBJECTDN -samid SAMNAME [-upn UPN]

[-fn FIRSTNAME] [-mi INITIAL] [-ln LASTNAME]

[-display DISPLAYNAME] [-empid EMPLOYEEID]

[-pwd {PASSWORD|*}] [-desc DESCRIPTION] [-memberof GROUP;...]

[-office OFFICE] [-tel PHONE#] [-email EMAIL]

[-hometel HOMEPHONE#] [-pager PAGER#] [-mobile CELLPHONE#]

[-fax FAX#] [-iptel IPPHONE#] [-webpg WEBPAGE]

[-title TITLE] [-dept DEPARTMENT] [-company COMPANY]

[-mgr MANAGER] [-hmdir HOMEDIR] [-hmdrv DRIVELTR:]

[-profile PROFILEPATH] [-loscr SCRIPTPATH]

[-mustchpwd yes|no] [-canchpwd yes|no] [-reversiblepwd yes|no]

[-pwdneverexpires yes|no] [-acctexpires NUMDAYS]

[-disabled yes|no]

Parameters:



Value                   Description

OBJECTDN                DN of user to add

-samid SAMNAME          Set the SAM account name of user to SAMNAME

-upn UPN                Set the upn value to UPN

-fn FIRSTNAME           Set user first name to FIRSTNAME

-mi INITIAL             Set user middle initial to INITIAL

-ln LASTNAME            Set user last name to LASTNAME

-display DISPLAYNAME    Set user display name to DISPLAYNAME

-empid EMPLOYEEID       Set user employee ID to EMPLOYEEID

-pwd PASSWORD | *       Set user password to PASSWORD [if *, then prompt

                        for password]

-desc DESCRIPTION       Set user description to DESCRIPTION

-memberof GROUP;...     Make user a member of one or more groups GROUP;...

-office OFFICE          Set user office location to OFFICE

-tel PHONE#             Set user telephone# to PHONE#

-email EMAIL            Set user e-mail address to EMAIL

-hometel HOMEPHONE#     Set user home phone# to HOMEPHONE#

-pager PAGER#           Set user pager# to PAGER#

-mobile CELLPHONE#      Set user mobile# to CELLPHONE#

-fax FAX#               Set user fax# to FAX#

-iptel IPPHONE#         Set user IP phone# to IPPHONE#

-webpg WEBPAGE          Set user web page URL to WEBPAGE

-title TITLE            Set user title to TITLE

-dept DEPARTMENT        Set user department to DEPARTMENT

-company COMPANY        Set user company info to COMPANY

-mgr MANAGER            Set user's manager to MANAGER

-hmdir HOMEDIR          Set user home directory to HOMEDIR (if this is

                        UNC path, then a drive letter to be mapped to

                        this path must also be specified through -hmdrv)

-hmdrv DRIVELTR:        Set user home drive letter to DRIVELTR:

-profile PROFILEPATH    Set user's profile path to PROFILEPATH

-loscr SCRIPTPATH       Set user's logon script path to SCRIPTPATH

-mustchpwd yes|no       User must change password at next logon or not

                        [Default: no]

-canchpwd yes|no        User can change password or not (this should be

                        "yes" if the -mustchpwd is "yes") [Default: yes]

-reversiblepwd yes|no   Store user password using reversible encryption or

                        not [Default: no]

-pwdneverexpires yes|no User password never expires or not [Default: no]

-acctexpires NUMDAYS    Set user account to expire in NUMDAYS days from

                        today [a value of 0 implies account never expires]

-disabled yes|no        User account is disabled or not [Default: no]


********** dsadd computer -h **********
Description: dsadd computer will add a computer to the directory

Syntax:  dsadd computer OBJECTDN [-samid SAMNAME] [-desc DESCRIPTION]

[-loc LOCATION] [-memberof GROUP;...]

Parameters:



Value                   Description

OBJECTDN                DN of computer to add

-samid SAMNAME          Set the computer SAM account name to SAMNAME

-desc DESCRIPTION       Set the computer description to DESCRIPTION

-loc LOCATION           Set the computer location to LOCATION

-memberof GROUP;...     Make computer a member of one or more groups 

                        given by the list GROUP;...


********** dsadd contact -h **********
Description:  dsadd contact adds a contact to the directory

Syntax:  dsadd contact OBJECTDN [-fn FIRSTNAME]

[-mi INITIAL] [-ln LASTNAME] [-display DISPLAYNAME]

[-desc DESCRIPTION]

[-office OFFICE] [-tel PHONE#] [-email EMAIL]

[-hometel HOMEPHONE#] [-pager PAGER#] [-mobile CELLPHONE#]

[-fax FAX#] [-iptel IPPHONE#]

[-title TITLE] [-dept DEPARTMENT] [-company COMPANY]

Parameters:



Value                   Description

OBJECTDN                DN of contact to add

-fn FIRSTNAME           Set contact first name to FIRSTNAME

-mi INITIAL             Set contact middle initial to INITIAL

-ln LASTNAME            Set contact last name to LASTNAME

-display DISPLAYNAME    Set contact display name to DISPLAYNAME

-desc DESCRIPTION       Set contact description to DESCRIPTION

-office OFFICE          Set contact office location to OFFICE

-tel PHONE#             Set contact telephone# to PHONE#

-email EMAIL            Set contact e-mail address to EMAIL

-hometel HOMEPHONE#     Set contact home phone# to HOMEPHONE#

-pager PAGER#           Set contact pager# to PAGER#

-mobile CELLPHONE#      Set contact mobile# to CELLPHONE#

-fax FAX#               Set contact fax# to FAX#

-title TITLE            Set contact title to TITLE

-dept DEPARTMENT        Set contact department to DEPARTMENT

-company COMPANY        Set contact company info to COMPANY


********** Adding OUs **********
dsadd succeeded:OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:OU=bTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com

********** Adding groups **********
dsadd succeeded:CN=aGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=bGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=cGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=dGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=eGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=fGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=gGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=hGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=iGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=jGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=kGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=lGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=mGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=nGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=LocalSec1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=GlobalSec1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=UniSec1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=LocalDist1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=GlobalDist1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=UniDist1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=LocalSec2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=GlobalSec2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=UniSec2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=LocalDist2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=GlobalDist2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=UniDist2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=LocalSec3,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=GlobalSec3,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=UniSec3,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=LocalDist3,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=GlobalDist3,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=UniDist3,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=LocalSec4,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=GlobalSec4,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=UniSec4,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=LocalDist4,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=GlobalDist4,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=UniDist4,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=LocalSec5,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=GlobalSec5,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=UniSec5,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=LocalDist5,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=GlobalDist5,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=UniDist5,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=LocalSec6,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=GlobalSec6,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=UniSec6,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=LocalDist6,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=GlobalDist6,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=UniDist6,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=LocalSec7,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=GlobalSec7,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=UniSec7,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=LocalDist7,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=GlobalDist7,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=UniDist7,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com

********** Adding users **********
dsadd succeeded:CN=aUser,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=bUser,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=cUser,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=dUser,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=eUser,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com

********** Adding users in groups **********
dsadd succeeded:CN=fUser,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=gUser,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=hUser,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=iUser,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=jUser,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=kUser,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=lUser,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=mUser,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=nUser,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com

********** Adding groups in groups **********
dsadd succeeded:CN=oGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=pGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=qGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=rGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=sGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=tGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=uGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=vGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=wGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=xGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=yGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=zGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com

********** Adding computers **********
dsadd succeeded:CN=aComp,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=bComp,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=cComp,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=dComp,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=eComp,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=fComp,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=gComp,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=hComp,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=iComp,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=jComp,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=kComp,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com

********** Adding groups with members **********
dsadd succeeded:CN=aaGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=bbGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=ccGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=ddGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=eeGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=ffGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=ggGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=hhGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=iiGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=jjGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=kkGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=llGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=mmGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com

********** Adding contacts **********
dsadd succeeded:CN=aCont,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=bCont,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=cCont,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=dCont,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=eCont,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsadd succeeded:CN=fCont,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com

********** Expected Group MemberOf Failures **********

********** Expected Group Member Failures **********

********** Expected Duplicate Failures **********
 
******** Quite execution - If you see anything after this its a bug!!! ********
********** dsmod usage **********

********** dsmod -h **********

********** dsmod ou **********

********** dsmod ou -h **********
Description: dsmod ou will modify an existing organizational unit in the

directory

Syntax:     dsmod ou {<NAME > | <OBJECTDN ...>}

            [-name NEWNAME] [-desc DESCRIPTION]

Parameters:



Value                   Description

NAME                    Common name of one or more OUs to modify

OBJECTDN ...            DNs of one or more OUs to modify

-name NEWNAME           Rename the OU to NEWNAME

-desc DESCRIPTION       Set OU description to DESCRIPTION


********** dsmod group **********

********** dsmod group -h **********
Description: dsmod group modifies an existing group in the directory

Syntax:     dsmod group <OBJECTDN ......>

                [-samid SAMNAME] [-desc DESCRIPTION]

                [-secgrp yes|no] [-scope l|g|u]

            dsmod group {-addmbr|-rmmbr|-chmbr}

                OBJECTDN ...<MEMBER ...>



Parameters:



Value                   Description

NAME                    Common name of one or more groups to modify

OBJECTDN ......         DNs of one or more groups to modify

-name NEWNAME           Rename the group to NEWNAME

-samname SAMNAME        Set the SAM account name of group to SAMNAME

-desc DESCRIPTION       Set group description to DESCRIPTION

-secgrp yes|no          Set the group type to security or non-security

-scope l|g|u            Set the scope of group to local/global/universal

-memberof GROUP;        Make group a member of one or more groups GROUP;


********** dsmod user **********

********** dsmod user -h **********
Description:  dsmod user will modify an existing user in the directory

Syntax:     dsmod user {<NAME > | <OBJECTDN ...>}

            [-name NEWNAME]

            [-upn UPN] [-fn FIRSTNAME] [-mi INITIAL] [-ln LASTNAME]

            [-display DISPLAYNAME] [-pwd PASSWORD] [-desc DESCRIPTION]

            [-office OFFICE] [-tel PHONE#] [-email EMAIL]

            [-hometel HOMEPHONE#] [-pager PAGER#] [-mobile CELLPHONE#]

            [-fax FAX#] [-iptel IPPHONE#]

            [-title TITLE] [-dept DEPARTMENT] [-company COMPANY]

            [-mustchpwd yes|no] [-canchpwd yes|no] [-pwdneverexpires

            yes|no] [-acctexpires NUMDAYS] [-disabled yes|no]

Parameters:



Value                   Description

NAME                    Common name of one or more users to modify

OBJECTDN ...            DNs of one or more users to modify

-name NEWNAME           Rename the user to NEWNAME

-upn UPN                Set the upn value to UPN

-fn FIRSTNAME           Set user first name to FIRSTNAME

-mi INITIAL             Set user middle initial to INITIAL

-ln LASTNAME            Set user last name to LASTNAME

-display DISPLAYNAME    Set user display name to DISPLAYNAME

-pwd PASSWORD           Reset user password to PASSWORD

-desc DESCRIPTION       Set user description to DESCRIPTION

-office OFFICE          Set user office location to OFFICE

-tel PHONE#             Set user telephone# to PHONE#

-email EMAIL            Set user e-mail address to EMAIL

-hometel HOMEPHONE#     Set user home phone# to HOMEPHONE#

-pager PAGER#           Set user pager# to PAGER#

-mobile CELLPHONE#      Set user mobile# to CELLPHONE#

-fax FAX#               Set user fax# to FAX#

-title TITLE            Set user title to TITLE

-dept DEPARTMENT        Set user department to DEPARTMENT

-company COMPANY        Set user company info to COMPANY

-mustchpwd yes|no       Set if user must change password at next logon

-canchpwd yes|no        Set if user can change password or not

-pwdneverexpires yes|no Set if user password never expires or not

-acctexpires NUMDAYS    Set user account to expire in NUMDAYS days from

                        today [a value of 0 implies account never expires]

-disabled yes|no        Set if user account is disabled or not



Examples:

Resetting a user password can be accomplished by running



    dsmod user USERDN -pwd NEW_PASSWORD -mustchpwd yes



Passwords of multiple users can be reset at the same time to a common password

forcing them to change their password the next time they logon by running



    dsmod user USERDN1 USERDN2 USERDN3 -pwd NEW_PASSWORD -mustchpwd yes



Disabling multiple user accounts at the same time can be accomplished by running



    dsmod user USERDN1 USERDN2 USERDN3 -disabled yes




********** dsmod computer **********

********** dsmod computer -h **********
Description: dsmod computer will modify an existing computer in the directory

Syntax:     dsmod computer {<NAME > | <OBJECTDN ...>}

            [-name NEWNAME]

            [-desc DESCRIPTION] [-disabled yes|no] [-reset]

Parameters:



Value                   Description

NAME                    Common name of one or more computers to modify

OBJECTDN ...            DNs of one or more computers to modify

-name NEWNAME           Rename the computer to NEWNAME

-desc DESCRIPTION       Set computer description to DESCRIPTION

-disabled yes|no        Set if computer account is disabled or not

-reset                  Reset computer account



Examples:

Disabling (or reseting) multiple computer accounts at the same time can be

accomplished by running



    dsmod computer DN1 DN2 DN3 -disabled yes

    dsmod computer DN1 DN2 DN3 -reset


********** dsmod contact**********

********** dsmod contact -h **********
Description:  dsmod contact will modify an existing contact in the directory

Syntax:     dsmod contact {<NAME > | <OBJECTDN ...>}

            [-name NEWNAME]

            [-fn FIRSTNAME] [-mi INITIAL] [-ln LASTNAME]

            [-full FULLNAME] [-desc DESCRIPTION]

            [-office OFFICE] [-tel PHONE#] [-email EMAIL]

            [-hometel HOMEPHONE#] [-pager PAGER#] [-mobile CELLPHONE#]

            [-fax FAX#] [-iptel IPPHONE#]

            [-title TITLE] [-dept DEPARTMENT] [-company COMPANY]

Parameters:



Value                   Description

NAME                    Common name of one or more contacts to modify

OBJECTDN ...            DNs of one or more contacts to modify

-name NEWNAME           Rename the contact to NEWNAME

-fn FIRSTNAME           Set contact first name to FIRSTNAME

-mi INITIAL             Set contact middle initial to INITIAL

-ln LASTNAME            Set contact last name to LASTNAME

-full FULLNAME          Set contact full name to FULLNAME

-desc DESCRIPTION       Set contact description to DESCRIPTION

-office OFFICE          Set contact office location to OFFICE

-tel PHONE#             Set contact telephone# to PHONE#

-email EMAIL            Set contact e-mail address to EMAIL

-hometel HOMEPHONE#     Set contact home phone# to HOMEPHONE#

-pager PAGER#           Set contact pager# to PAGER#

-mobile CELLPHONE#      Set contact mobile# to CELLPHONE#

-fax FAX#               Set contact fax# to FAX#

-title TITLE            Set contact title to TITLE

-dept DEPARTMENT        Set contact department to DEPARTMENT

-company COMPANY        Set contact company info to COMPANY


********** Modifying OUs **********
dsmod succeeded:OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com

********** Modifying groups types **********
dsmod succeeded:CN=LocalSec3,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalSec5,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalSec7,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=GlobalSec3,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=GlobalSec5,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=GlobalSec7,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniSec3,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniSec4,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniSec5,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniSec6,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniSec7,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalDist3,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalDist5,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalDist7,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=GlobalDist3,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=GlobalDist5,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=GlobalDist7,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniDist3,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniDist4,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniDist5,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniDist6,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniDist7,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com

********** Expected group mod type failures **********

********** Expected group mod failures **********

********** Modifying users **********
dsmod succeeded:CN=bUser,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=cUser,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=dUser,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=eUser,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=eUser,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=eUser,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=eUser,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=eUser,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com

********** Expected user mod failures (usage shown) *********

********** Modifying user in group membership **********
dsmod succeeded:CN=gGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=hGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=iGroup,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com

********** Modifying group in group using -addmbr **********
dsmod succeeded:CN=LocalSec1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalSec1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalSec1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalSec1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalSec1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalSec1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=GlobalSec1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=GlobalSec1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniSec1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniSec1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniSec1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniSec1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalDist1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalDist1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalDist1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalDist1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalDist1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalDist1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=GlobalDist1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=GlobalDist1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniDist1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniDist1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniDist1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniDist1,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com

********** Expected group -addmbr failures *********

********** Modifying group in group using -chmbr **********
dsmod succeeded:CN=LocalSec2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalSec2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalSec2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalSec2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalSec2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalSec2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=GlobalSec2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=GlobalSec2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniSec2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniSec2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniSec2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniSec2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalDist2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalDist2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalDist2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalDist2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalDist2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=LocalDist2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=GlobalDist2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=GlobalDist2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniDist2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniDist2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniDist2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=UniDist2,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com

********** Expected group -chmbr failures *********

********** Modifying computers **********
dsmod succeeded:CN=bComp,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=cComp,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=dComp,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=eComp,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=fComp,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=gComp,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=hComp,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=iComp,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com

********** Modifying contacts **********
dsmod succeeded:CN=aCont,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=bCont,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=cCont,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=dCont,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=eCont,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
dsmod succeeded:CN=fCont,OU=aTest,DC=jeffjontst,DC=nttest,DC=microsoft,DC=com
 
******** Quite execution - If you see anything after this its a bug!!! ********
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\dsutils\displayspecifierupgrade\prebuild\readme.txt ===
W2KStrs produces the computer generated code
with some Display specifier strings from the
Windows 2000's dcpromo.csv. These strings are used 
in dspecup.lib for the the RRPLACE_W2K_SINGLE_VALUE and
REPLACE_W2K_MULTIPLE_VALUE actions. 

The strings should be pasted in the appropriate part 
of the function setW2KReplaceStrs in constants.cpp.

W2KStrs depends on files on the parent directory, expected
to be the directory with the sources for dspecup.lib.

The usage is W2KStrs c:\dcpromo.csv c:\out.txt. 
The first file should be the windows 2000's dcpromo.csv
to be read and the second is the file to be written as
a result of running the tool.

Both paths should be complete.

The tool takes some seconds to run, and a MessageBox
displays the final result.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\dsutils\displayspecifierupgrade\uiarchive\readme.txt ===
The files in this folder were part of the UI for the display specifiers upgrade.

The tool doesn't have a UI anymore, it has turned into a library.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\eelvewer\ia64\checked\eelcols.xml ===
<?xml version= "1.0" ?>
<ColumnFormat>
<INSTANCE>
<PROPERTY NAME="Type"  show="true" Sort="none" width="134" DisplayName="Type" TYPE="integer"></PROPERTY>
<PROPERTY NAME="Classification" show="true" Sort="none" width="137" DisplayName="Classification" TYPE="integer"></PROPERTY>
<PROPERTY NAME="TimeGenerated"   show="true" Sort="ascending" width="167" DisplayName="Time" TYPE="datetime"></PROPERTY>
<PROPERTY NAME="SourceSubsystemName"   show="true" Sort="none" width="123" DisplayName="Subsystem Source" TYPE="string"></PROPERTY>
<PROPERTY NAME="Category" show="true" Sort="none"  width="49" DisplayName="Category" TYPE="string"></PROPERTY>
<PROPERTY NAME="Severity" show="true" Sort="none"  width="42" DisplayName="Severity" TYPE="integer"></PROPERTY>
<PROPERTY NAME="Priority" show="true" Sort="none"  width="39" DisplayName="Priority" TYPE="integer"></PROPERTY>
<PROPERTY NAME="User" show="true"  Sort="none" width="25" DisplayName="User" TYPE="string"></PROPERTY>
<PROPERTY NAME="SystemAbout" show="true"  Sort="none" width="68" DisplayName="System Data" TYPE="string"></PROPERTY>
<PROPERTY NAME="DeliveredBy" show="true" Sort="none"  width="62" DisplayName="Delivered By" TYPE="string"></PROPERTY>
<PROPERTY NAME="Message" show="false"  Sort="none" width="100" DisplayName="Message" TYPE="string"></PROPERTY>

<PROPERTY NAME="EventID" show="false"  Sort="none" width="43" DisplayName="EventID" TYPE="integer"></PROPERTY>
<PROPERTY NAME="SourceSubsystemType"  Sort="none" show="false" width="123" DisplayName="Source Subsystem Type" TYPE="string"></PROPERTY>
<PROPERTY NAME="SystemFrom" show="false" Sort="none"  width="65" DisplayName="System From" TYPE="string"></PROPERTY>
<PROPERTY NAME="Subcategory" show="false"  Sort="none" width="74" DisplayName="Sub category" TYPE="string"></PROPERTY>
<PROPERTY NAME="LoggingTime" show="false"  Sort="none" width="167" DisplayName="Logging Time" TYPE="datetime"></PROPERTY>
<PROPERTY NAME="RollupTime" show="false"  Sort="none" width="167" DisplayName="Rollup Time" TYPE="datetime"></PROPERTY>
<PROPERTY NAME="RecordNumber" show="false" Sort="none"  width="75" DisplayName="RecordNumber" TYPE="integer"></PROPERTY>
<PROPERTY NAME="LogType" show="false" Sort="none"  width="45" DisplayName="LogType" TYPE="integer"></PROPERTY>
</INSTANCE>
</ColumnFormat>
<!-- ******************************************************** -->
<!--                                                          -->
<!-- Copyright (c) 1999-2000 Microsoft Corporation            -->
<!--                                                          -->
<!-- eelcols.xml                                             -->
<!--                                                          -->
<!-- Build Type : Checked                                     -->
<!-- Build Number : 0707                                      -->
<!-- Build Date   : 07/07/2000                                 -->
<!-- *******************************************************  -->
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\eelvewer\ia64\checked\ntcols.xml ===
<?xml version= "1.0" ?>
<ColumnFormat>
<INSTANCE>
<PROPERTY NAME="Type" show="true"  Sort="none"  width="85" DisplayName="Type" TYPE="string"></PROPERTY>
<PROPERTY NAME="TimeGenerated" show="true"   Sort="ascending" width="167" DisplayName="Time" TYPE="datetime"></PROPERTY>
<PROPERTY NAME="SourceName" show="true"  Sort="none"  width="43" DisplayName="Source" TYPE="string"></PROPERTY>
<PROPERTY NAME="CategoryString" show="true"  Sort="none"  width="49" DisplayName="Category" TYPE="string"></PROPERTY>
<PROPERTY NAME="EventCode" show="true"   Sort="none" width="32" DisplayName="Event" TYPE="integer"></PROPERTY>
<PROPERTY NAME="User" show="true"  Sort="none"  width="25" DisplayName="User" TYPE="string"></PROPERTY>
<PROPERTY NAME="ComputerName" show="true"  Sort="none"  width="52" DisplayName="Computer" TYPE="string"></PROPERTY>
<PROPERTY NAME="RecordNumber" show="false"  Sort="none"  width="75" DisplayName="RecordNumber" TYPE="integer"></PROPERTY>
<PROPERTY NAME="Logfile" show="false"  Sort="none"  width="64" DisplayName="Logfile" TYPE="string"></PROPERTY>
<EMBEDDEDPROPERTY NAME="Message"  width="150" DisplayName="Message" TYPE="string"></EMBEDDEDPROPERTY>
</INSTANCE>
</ColumnFormat>

<!-- ******************************************************** -->
<!--                                                          -->
<!-- Copyright (c) 1999-2000 Microsoft Corporation            -->
<!--                                                          -->
<!-- ntcols.xml                                             -->
<!--                                                          -->
<!-- Build Type : Checked                                     -->
<!-- Build Number : 0707                                      -->
<!-- Build Date   : 07/07/2000                                 -->
<!-- *******************************************************  -->
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\eelvewer\i386\checked\eelcols.xml ===
<?xml version= "1.0" ?>
<ColumnFormat>
<INSTANCE>
<PROPERTY NAME="Type"  show="true" Sort="none" width="134" DisplayName="Type" TYPE="integer"></PROPERTY>
<PROPERTY NAME="Classification" show="true" Sort="none" width="137" DisplayName="Classification" TYPE="integer"></PROPERTY>
<PROPERTY NAME="TimeGenerated"   show="true" Sort="ascending" width="167" DisplayName="Time" TYPE="datetime"></PROPERTY>
<PROPERTY NAME="SourceSubsystemName"   show="true" Sort="none" width="123" DisplayName="Subsystem Source" TYPE="string"></PROPERTY>
<PROPERTY NAME="Category" show="true" Sort="none"  width="49" DisplayName="Category" TYPE="string"></PROPERTY>
<PROPERTY NAME="Severity" show="true" Sort="none"  width="42" DisplayName="Severity" TYPE="integer"></PROPERTY>
<PROPERTY NAME="Priority" show="true" Sort="none"  width="39" DisplayName="Priority" TYPE="integer"></PROPERTY>
<PROPERTY NAME="User" show="true"  Sort="none" width="25" DisplayName="User" TYPE="string"></PROPERTY>
<PROPERTY NAME="SystemAbout" show="true"  Sort="none" width="68" DisplayName="System Data" TYPE="string"></PROPERTY>
<PROPERTY NAME="DeliveredBy" show="true" Sort="none"  width="62" DisplayName="Delivered By" TYPE="string"></PROPERTY>
<PROPERTY NAME="Message" show="false"  Sort="none" width="100" DisplayName="Message" TYPE="string"></PROPERTY>

<PROPERTY NAME="EventID" show="false"  Sort="none" width="43" DisplayName="EventID" TYPE="integer"></PROPERTY>
<PROPERTY NAME="SourceSubsystemType"  Sort="none" show="false" width="123" DisplayName="Source Subsystem Type" TYPE="string"></PROPERTY>
<PROPERTY NAME="SystemFrom" show="false" Sort="none"  width="65" DisplayName="System From" TYPE="string"></PROPERTY>
<PROPERTY NAME="Subcategory" show="false"  Sort="none" width="74" DisplayName="Sub category" TYPE="string"></PROPERTY>
<PROPERTY NAME="LoggingTime" show="false"  Sort="none" width="167" DisplayName="Logging Time" TYPE="datetime"></PROPERTY>
<PROPERTY NAME="RollupTime" show="false"  Sort="none" width="167" DisplayName="Rollup Time" TYPE="datetime"></PROPERTY>
<PROPERTY NAME="RecordNumber" show="false" Sort="none"  width="75" DisplayName="RecordNumber" TYPE="integer"></PROPERTY>
<PROPERTY NAME="LogType" show="false" Sort="none"  width="45" DisplayName="LogType" TYPE="integer"></PROPERTY>
</INSTANCE>
</ColumnFormat>
<!-- ******************************************************** -->
<!--                                                          -->
<!-- Copyright (c) 1999-2000 Microsoft Corporation            -->
<!--                                                          -->
<!-- eelcols.xml                                             -->
<!--                                                          -->
<!-- Build Type : 32 Bit Checked                              -->
<!-- Build Number : 0707                                      -->
<!-- Build Date   : 07/07/2000                                 -->
<!-- *******************************************************  -->
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\eelvewer\i386\free\eelcols.xml ===
<?xml version= "1.0" ?>
<ColumnFormat>
<INSTANCE>
<PROPERTY NAME="Type"  show="true" Sort="none" width="134" DisplayName="Type" TYPE="integer"></PROPERTY>
<PROPERTY NAME="Classification" show="true" Sort="none" width="137" DisplayName="Classification" TYPE="integer"></PROPERTY>
<PROPERTY NAME="TimeGenerated"   show="true" Sort="ascending" width="167" DisplayName="Time" TYPE="datetime"></PROPERTY>
<PROPERTY NAME="SourceSubsystemName"   show="true" Sort="none" width="123" DisplayName="Subsystem Source" TYPE="string"></PROPERTY>
<PROPERTY NAME="Category" show="true" Sort="none"  width="49" DisplayName="Category" TYPE="string"></PROPERTY>
<PROPERTY NAME="Severity" show="true" Sort="none"  width="42" DisplayName="Severity" TYPE="integer"></PROPERTY>
<PROPERTY NAME="Priority" show="true" Sort="none"  width="39" DisplayName="Priority" TYPE="integer"></PROPERTY>
<PROPERTY NAME="User" show="true"  Sort="none" width="25" DisplayName="User" TYPE="string"></PROPERTY>
<PROPERTY NAME="SystemAbout" show="true"  Sort="none" width="68" DisplayName="System Data" TYPE="string"></PROPERTY>
<PROPERTY NAME="DeliveredBy" show="true" Sort="none"  width="62" DisplayName="Delivered By" TYPE="string"></PROPERTY>
<PROPERTY NAME="Message" show="false"  Sort="none" width="100" DisplayName="Message" TYPE="string"></PROPERTY>

<PROPERTY NAME="EventID" show="false"  Sort="none" width="43" DisplayName="EventID" TYPE="integer"></PROPERTY>
<PROPERTY NAME="SourceSubsystemType"  Sort="none" show="false" width="123" DisplayName="Source Subsystem Type" TYPE="string"></PROPERTY>
<PROPERTY NAME="SystemFrom" show="false" Sort="none"  width="65" DisplayName="System From" TYPE="string"></PROPERTY>
<PROPERTY NAME="Subcategory" show="false"  Sort="none" width="74" DisplayName="Sub category" TYPE="string"></PROPERTY>
<PROPERTY NAME="LoggingTime" show="false"  Sort="none" width="167" DisplayName="Logging Time" TYPE="datetime"></PROPERTY>
<PROPERTY NAME="RollupTime" show="false"  Sort="none" width="167" DisplayName="Rollup Time" TYPE="datetime"></PROPERTY>
<PROPERTY NAME="RecordNumber" show="false" Sort="none"  width="75" DisplayName="RecordNumber" TYPE="integer"></PROPERTY>
<PROPERTY NAME="LogType" show="false" Sort="none"  width="45" DisplayName="LogType" TYPE="integer"></PROPERTY>
</INSTANCE>
</ColumnFormat>
<!-- ******************************************************** -->
<!--                                                          -->
<!-- Copyright (c) 1999-2000 Microsoft Corporation            -->
<!--                                                          -->
<!-- eelcols.xml                                             -->
<!--                                                          -->
<!-- Build Type : 32 Bit Free                                 -->
<!-- Build Number : 0707                                      -->
<!-- Build Date   : 07/07/2000                                 -->
<!-- *******************************************************  -->
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\eelvewer\i386\free\ntcols.xml ===
<?xml version= "1.0" ?>
<ColumnFormat>
<INSTANCE>
<PROPERTY NAME="Type" show="true"  Sort="none"  width="85" DisplayName="Type" TYPE="string"></PROPERTY>
<PROPERTY NAME="TimeGenerated" show="true"   Sort="ascending" width="167" DisplayName="Time" TYPE="datetime"></PROPERTY>
<PROPERTY NAME="SourceName" show="true"  Sort="none"  width="43" DisplayName="Source" TYPE="string"></PROPERTY>
<PROPERTY NAME="CategoryString" show="true"  Sort="none"  width="49" DisplayName="Category" TYPE="string"></PROPERTY>
<PROPERTY NAME="EventCode" show="true"   Sort="none" width="32" DisplayName="Event" TYPE="integer"></PROPERTY>
<PROPERTY NAME="User" show="true"  Sort="none"  width="25" DisplayName="User" TYPE="string"></PROPERTY>
<PROPERTY NAME="ComputerName" show="true"  Sort="none"  width="52" DisplayName="Computer" TYPE="string"></PROPERTY>
<PROPERTY NAME="RecordNumber" show="false"  Sort="none"  width="75" DisplayName="RecordNumber" TYPE="integer"></PROPERTY>
<PROPERTY NAME="Logfile" show="false"  Sort="none"  width="64" DisplayName="Logfile" TYPE="string"></PROPERTY>
<EMBEDDEDPROPERTY NAME="Message"  width="150" DisplayName="Message" TYPE="string"></EMBEDDEDPROPERTY>
</INSTANCE>
</ColumnFormat>

<!-- ******************************************************** -->
<!--                                                          -->
<!-- Copyright (c) 1999-2000 Microsoft Corporation            -->
<!--                                                          -->
<!-- ntcols.xml                                             -->
<!--                                                          -->
<!-- Build Type : 32 Bit Free                                 -->
<!-- Build Number : 0707                                      -->
<!-- Build Date   : 07/07/2000                                 -->
<!-- *******************************************************  -->
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\eelvewer\i386\checked\ntcols.xml ===
<?xml version= "1.0" ?>
<ColumnFormat>
<INSTANCE>
<PROPERTY NAME="Type" show="true"  Sort="none"  width="85" DisplayName="Type" TYPE="string"></PROPERTY>
<PROPERTY NAME="TimeGenerated" show="true"   Sort="ascending" width="167" DisplayName="Time" TYPE="datetime"></PROPERTY>
<PROPERTY NAME="SourceName" show="true"  Sort="none"  width="43" DisplayName="Source" TYPE="string"></PROPERTY>
<PROPERTY NAME="CategoryString" show="true"  Sort="none"  width="49" DisplayName="Category" TYPE="string"></PROPERTY>
<PROPERTY NAME="EventCode" show="true"   Sort="none" width="32" DisplayName="Event" TYPE="integer"></PROPERTY>
<PROPERTY NAME="User" show="true"  Sort="none"  width="25" DisplayName="User" TYPE="string"></PROPERTY>
<PROPERTY NAME="ComputerName" show="true"  Sort="none"  width="52" DisplayName="Computer" TYPE="string"></PROPERTY>
<PROPERTY NAME="RecordNumber" show="false"  Sort="none"  width="75" DisplayName="RecordNumber" TYPE="integer"></PROPERTY>
<PROPERTY NAME="Logfile" show="false"  Sort="none"  width="64" DisplayName="Logfile" TYPE="string"></PROPERTY>
<EMBEDDEDPROPERTY NAME="Message"  width="150" DisplayName="Message" TYPE="string"></EMBEDDEDPROPERTY>
</INSTANCE>
</ColumnFormat>

<!-- ******************************************************** -->
<!--                                                          -->
<!-- Copyright (c) 1999-2000 Microsoft Corporation            -->
<!--                                                          -->
<!-- ntcols.xml                                             -->
<!--                                                          -->
<!-- Build Type : 32 Bit Checked                              -->
<!-- Build Number : 0707                                      -->
<!-- Build Date   : 07/07/2000                                 -->
<!-- *******************************************************  -->
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\eelvewer\ia64\free\ntcols.xml ===
<?xml version= "1.0" ?>
<ColumnFormat>
<INSTANCE>
<PROPERTY NAME="Type" show="true"  Sort="none"  width="85" DisplayName="Type" TYPE="string"></PROPERTY>
<PROPERTY NAME="TimeGenerated" show="true"   Sort="ascending" width="167" DisplayName="Time" TYPE="datetime"></PROPERTY>
<PROPERTY NAME="SourceName" show="true"  Sort="none"  width="43" DisplayName="Source" TYPE="string"></PROPERTY>
<PROPERTY NAME="CategoryString" show="true"  Sort="none"  width="49" DisplayName="Category" TYPE="string"></PROPERTY>
<PROPERTY NAME="EventCode" show="true"   Sort="none" width="32" DisplayName="Event" TYPE="integer"></PROPERTY>
<PROPERTY NAME="User" show="true"  Sort="none"  width="25" DisplayName="User" TYPE="string"></PROPERTY>
<PROPERTY NAME="ComputerName" show="true"  Sort="none"  width="52" DisplayName="Computer" TYPE="string"></PROPERTY>
<PROPERTY NAME="RecordNumber" show="false"  Sort="none"  width="75" DisplayName="RecordNumber" TYPE="integer"></PROPERTY>
<PROPERTY NAME="Logfile" show="false"  Sort="none"  width="64" DisplayName="Logfile" TYPE="string"></PROPERTY>
<EMBEDDEDPROPERTY NAME="Message"  width="150" DisplayName="Message" TYPE="string"></EMBEDDEDPROPERTY>
</INSTANCE>
</ColumnFormat>

<!-- ******************************************************** -->
<!--                                                          -->
<!-- Copyright (c) 1999-2000 Microsoft Corporation            -->
<!--                                                          -->
<!-- ntcols.xml                                             -->
<!--                                                          -->
<!-- Build Type : Free                                        -->
<!-- Build Number : 0707                                      -->
<!-- Build Date   : 07/07/2000                                 -->
<!-- *******************************************************  -->
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\eelvewer\ia64\free\eelcols.xml ===
<?xml version= "1.0" ?>
<ColumnFormat>
<INSTANCE>
<PROPERTY NAME="Type"  show="true" Sort="none" width="134" DisplayName="Type" TYPE="integer"></PROPERTY>
<PROPERTY NAME="Classification" show="true" Sort="none" width="137" DisplayName="Classification" TYPE="integer"></PROPERTY>
<PROPERTY NAME="TimeGenerated"   show="true" Sort="ascending" width="167" DisplayName="Time" TYPE="datetime"></PROPERTY>
<PROPERTY NAME="SourceSubsystemName"   show="true" Sort="none" width="123" DisplayName="Subsystem Source" TYPE="string"></PROPERTY>
<PROPERTY NAME="Category" show="true" Sort="none"  width="49" DisplayName="Category" TYPE="string"></PROPERTY>
<PROPERTY NAME="Severity" show="true" Sort="none"  width="42" DisplayName="Severity" TYPE="integer"></PROPERTY>
<PROPERTY NAME="Priority" show="true" Sort="none"  width="39" DisplayName="Priority" TYPE="integer"></PROPERTY>
<PROPERTY NAME="User" show="true"  Sort="none" width="25" DisplayName="User" TYPE="string"></PROPERTY>
<PROPERTY NAME="SystemAbout" show="true"  Sort="none" width="68" DisplayName="System Data" TYPE="string"></PROPERTY>
<PROPERTY NAME="DeliveredBy" show="true" Sort="none"  width="62" DisplayName="Delivered By" TYPE="string"></PROPERTY>
<PROPERTY NAME="Message" show="false"  Sort="none" width="100" DisplayName="Message" TYPE="string"></PROPERTY>

<PROPERTY NAME="EventID" show="false"  Sort="none" width="43" DisplayName="EventID" TYPE="integer"></PROPERTY>
<PROPERTY NAME="SourceSubsystemType"  Sort="none" show="false" width="123" DisplayName="Source Subsystem Type" TYPE="string"></PROPERTY>
<PROPERTY NAME="SystemFrom" show="false" Sort="none"  width="65" DisplayName="System From" TYPE="string"></PROPERTY>
<PROPERTY NAME="Subcategory" show="false"  Sort="none" width="74" DisplayName="Sub category" TYPE="string"></PROPERTY>
<PROPERTY NAME="LoggingTime" show="false"  Sort="none" width="167" DisplayName="Logging Time" TYPE="datetime"></PROPERTY>
<PROPERTY NAME="RollupTime" show="false"  Sort="none" width="167" DisplayName="Rollup Time" TYPE="datetime"></PROPERTY>
<PROPERTY NAME="RecordNumber" show="false" Sort="none"  width="75" DisplayName="RecordNumber" TYPE="integer"></PROPERTY>
<PROPERTY NAME="LogType" show="false" Sort="none"  width="45" DisplayName="LogType" TYPE="integer"></PROPERTY>
</INSTANCE>
</ColumnFormat>
<!-- ******************************************************** -->
<!--                                                          -->
<!-- Copyright (c) 1999-2000 Microsoft Corporation            -->
<!--                                                          -->
<!-- eelcols.xml                                             -->
<!--                                                          -->
<!-- Build Type : Free                                        -->
<!-- Build Number : 0707                                      -->
<!-- Build Date   : 07/07/2000                                 -->
<!-- *******************************************************  -->
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\hmonitor\hmlistview\hmlistview.log ===
Microsoft (R) Help Compiler
HCRTF 4.03.0002
Copyright (c) Microsoft Corp 1990 - 1995. All rights reserved.
hmlistview.hpj
    HC1002: Note: 
	Using existing phrase table: HMListView.ph.
    HC1010: Note: 
	The following mapped Topic IDs were not used in any topic:
	HIDD_PROPPAGE_HMLISTVIEW
	HID_FILTERMENU_ENDSWITH
	HID_FILTERMENU_STARTSWITH
	HID_FILTERMENU_CONTAINS
	HID_FILTERMENU_ISEXACTLY
	HID_HEADERCONTEXT_FILTERBAR
	HID_FILTERMENU_DOESNOTCONTAIN
	HIDR_MENU_HEADER_CONTEXT
	HID_FILTERMENU_CLEARFILTER
	HID_FILTERMENU_CLEARALLFILTERS
	HID_FILTERMENU_ISNOT
3	Topics
0	Jumps
0	Keywords
1	Bitmap


Created C:\SMSDev\HealthMon\HMListView\HMListView.hlp, 6,511 bytes
Phrase+Zeck compression decreased help file by 72 bytes.
Compile time: 0 minutes, 0 seconds
2 notes, 0 warnings
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\hmonitor\hmsnapinres\readme.txt ===
========================================================================
       MICROSOFT FOUNDATION CLASS LIBRARY : HMSnapinRes
========================================================================


AppWizard has created this HMSnapinRes DLL for you.  This DLL not only
demonstrates the basics of using the Microsoft Foundation classes but
is also a starting point for writing your DLL.

This file contains a summary of what you will find in each of the files that
make up your HMSnapinRes DLL.

HMSnapinRes.dsp
    This file (the project file) contains information at the project level and
    is used to build a single project or subproject. Other users can share the
    project (.dsp) file, but they should export the makefiles locally.

HMSnapinRes.cpp
    This is the main DLL source file that contains the definition of
	DllMain().


HMSnapinRes.rc
    This is a listing of all of the Microsoft Windows resources that the
    program uses.  It includes the icons, bitmaps, and cursors that are stored
    in the RES subdirectory.  This file can be directly edited in Microsoft
	Visual C++.

HMSnapinRes.clw
    This file contains information used by ClassWizard to edit existing
    classes or add new classes.  ClassWizard also uses this file to store
    information needed to create and edit message maps and dialog data
    maps and to create prototype member functions.

res\HMSnapinRes.rc2
    This file contains resources that are not edited by Microsoft 
	Visual C++.  You should place all resources not editable by
	the resource editor in this file.

HMSnapinRes.def
    This file contains information about the DLL that must be
    provided to run with Microsoft Windows.  It defines parameters
    such as the name and description of the DLL.  It also exports
	functions from the DLL.

/////////////////////////////////////////////////////////////////////////////
Other standard files:

StdAfx.h, StdAfx.cpp
    These files are used to build a precompiled header (PCH) file
    named HMSnapinRes.pch and a precompiled types file named StdAfx.obj.

Resource.h
    This is the standard header file, which defines new resource IDs.
    Microsoft Visual C++ reads and updates this file.

/////////////////////////////////////////////////////////////////////////////
Other notes:

AppWizard uses "TODO:" to indicate parts of the source code you
should add to or customize.

/////////////////////////////////////////////////////////////////////////////
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\hmonitor\hmtabview\hmtabview.log ===
Microsoft (R) Help Compiler
HCRTF 4.03.0002
Copyright (c) Microsoft Corp 1990 - 1995. All rights reserved.
hmtabview.hpj
    HC1002: Note: 
	Using existing phrase table: HMTabView.ph.
    HC1010: Note: 
	The following mapped Topic IDs were not used in any topic:
	HIDD_PROPPAGE_HMTABVIEW
3	Topics
0	Jumps
0	Keywords
1	Bitmap


Created D:\Projects\HealthMon\HMTabView\HMTabView.hlp, 6,510 bytes
Phrase+Zeck compression decreased help file by 72 bytes.
Compile time: 0 minutes, 0 seconds
2 notes, 0 warnings
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\hmonitor\splitter\splitter.log ===
Microsoft (R) Help Compiler
HCRTF 4.03.0002
Copyright (c) Microsoft Corp 1990 - 1995. All rights reserved.
splitter.hpj
    HC1010: Note: 
	The following mapped Topic IDs were not used in any topic:
	HIDD_PROPPAGE_SPLITTER
3	Topics
0	Jumps
0	Keywords
1	Bitmap


Created D:\Projects\HealthMon\splitter\Splitter.hlp, 6,443 bytes
Phrase+Zeck compression decreased help file by 72 bytes.
Compile time: 0 minutes, 0 seconds
1 note, 0 warnings
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\netui\admin\common\doc\multsel.doc ===
!                    -  @                  i      B                                                      *                    L     Q  B   6   L    L    L    L    L    L    L    L    L    L    L   j  B    j        j    j    j      J L                                                                         LAN Manager 3.0 User Interface
Component Design Document
Multiple Selection
MS Confidential



date08/22/91

Jonathan S Newman
Microsoft
email:JonN


This document also includes the User Properties Main Dialog CDD as of Version 0.61


Revision 0.62



Revision History

07/15/91	0.10	JonN	First Draft
07/17/91	0.20	JonN	After discussion with RustanL
07/29/91	0.30	JonN	Corrections by RustanL
08/06/91	0.40	JonN	First "release"
08/22/91	0.50	JonN	Multiselection redesign
08/27/91	0.60	JonN	PROP_DLG code review
09/04/91	0.61	JonN	Preparation for USERPROP_DLG code review; this document now includes the User Properties Main Dialog CDD
09/13/91	0.62	JonN	USERPROP_DLG code review changes

Issues Pending

	o	How much of the complex protocol defined in the User Interface FuncSpec can be declared Post-Halloween Sex?  For example, can the re-creation of objects which were deleted while the Property Dialog was displayed be declared PHS (see the section on the PERFORMER object)?
Table of Contents
TOC \oRequirements	5
Non-requirements	5
Also see:	5
Design	5
PERFORMER	5
BASEPROP_DLG	9
PROP_DLG	14
SUBPROP_DLG	14
Interface with main listbox	14
The main property dialog	14
Constructor	15
Secondary Constructor Virtuals GetInfo / InitControls	19
OnOK	22
Subdialogs	24
Non-dialog Clients of PERFORMER	26


autonumlgl	Requirements
+	Where possible, single-select behavior should be a special case of multiselect behavior.
+	Subdialogs should behave the same, or as similarly as possible, in the single-select and multiselect cases.
+	Subdialogs must also be available for "new" and "duplicate" operations.
+	Information on multiply-selected API objects must be read and saved according to the protocol stated in the standards (User Interface Standards FuncSpec v1.00 section 23). This section of the UI Standards FuncSpec will have to be revised, since it is no longer true that only changed parameters are written out; instead, the entire object is written out in a single NetFoobarSetInfo(PARMNUM_ALL) operation.
autonumlgl	Non-requirements
+	"New" and "duplicate" need not be compatible with multiple selection.
+	Information need not be reread on every instantiation of a subdialog.
autonumlgl	Also see:
LMOBJ CDD for a description of the NEW_LM_OBJ scheme.
BLT CDD for general information on the BLT object-oriented windowing scheme.
autonumlgl	Design
This design attempts to abstract the common portions of the multiselect protocol into base classes. This common protocol is defined in the UI Standards Document, which primarily describes how errors are to be handled while reading/writing information on multiply-selected objects.
autonumlgl	PERFORMER
PERFORMER contains the method PerformSeries and the virtual method PerformOne. These methods provide support for the multiple-selection protocols described in the UI Standards FuncSpec v1.00 sections 10.2.2 and 10.2.3. They are seperated from dialog window classes  so that they can be used for deletion of multiply-selected objects, an operation which does not normally involve a dialog.
/*************************************************************************

    NAME:	PERFORMER

    SYNOPSIS:	PERFORMER handles the protocol for writing out
		changes on multiply-selected objects as defined in the
		User Interface Standards (section 10.2 in version 1.00).

    INTERFACE:
		PerformOne()
			Pure virtual which must be redefined by derived
			class.  This should perform the action in
			question on one of the series.  PerformOne()
			does not have to call SetWorkWasDone(),
			PerformSeries() will deal with that.
		DisplayError()
			Displays an error which occurred in PerformOne.
			Declared protected because it can be called by
			PROP_DLG::GetInfo().
		PerformSeries()
			returns TRUE iff _all_ information is written
			successfully.  If not, error has already been reported.
			The number of selected objects is obtained with
			QueryObjectCount, and their names are obtained with
			QueryObjectName.
		WasWorkDone()
			This is TRUE iff any call to PerformOne over the
			lifetime of the PERFORMER indicated that work was
			done.  Note that this is different from the
			return code from PerformSeries(), which is TRUE
			iff all of the calls to PerformOne() suceeded
			completely.
		QueryObjectCount()
			PerformSeries uses QueryObjectCount to get the number
			of times to call PerformOne.
		QueryObjectName()
			When PerformOne() reports an error, PerformSeries()
			uses QueryObjectName() to get the "%1" insertion
			string to be inserted in the error template.
		QueryOwnerWindow()
    			Returns the owner window pointer, that was passed to
			constructor.

    USES:	PERFORMER can be used either in combination with
		DIALOG_WINDOW or standalone.  Property dialogs will
		want to multiply-inherit from PERFORMER and
		DIALOG_WINDOW in order to add the capabilities of
		PERFORMER to the dialog.  PERFORMER can also be used
		standalone, for example, to delete all selected items;
		this operation would not normally create a dialog, but
		PERFORMER can still be used.

    NOTES:	PERFORMER is an abstract superclass and the pure virtual
		methods must be redefined by subclasses which can be
		instantiated.

		PerformSeries() returns TRUE iff _all_ PerformOne()
		actions succeed.  By convention, this signifies that the
		dialog (if there is a dialog) may be closed.

		PROPERTY_DIALOG variants which call PerformSeries are expected
		to redefine PerformOne(). PerformOne() will be called
		QueryObjectCount() times, e.g. for QueryObjectCount==3, it
		will be called with iObject=0, then 1, then 2. PerformOne
		should not attempt to display error messages, PerformSeries
		will take care of that.  perrMsg returns the error message
		template to be used if the return value is not NERR_Success,
		and will be ignored otherwise. The error message template
		will be displayed in a MsgPopup with the following
		insertion strings:
		"%1" for the error messages, e.g.
			Not enough memory [SYS0008]
			Workstation Not Started [NET2138]
			Miscellaneous Application Error [ERROR]
		"%2" for the name of the object from QueryObjectName()
		The error template need not contain these strings, they
		are optional.  %1 will typically be separated from other
		text in the template by two newlines ("\n\n").

    HISTORY:
	JonN	17-Jul-1991	Created

**************************************************************************/

class PERFORMER
{

private:

    const OWNER_WINDOW * _powin;
    BOOL _fWorkWasDone;

protected:

    virtual APIERR PerformOne(
	UINT		iObject,
	APIERR *	perrMsg,
	BOOL *		pfWorkWasDone
	) = 0;

    BOOL DisplayError(
	APIERR	errAPI,
	APIERR	errMsg,
	const CHAR * pszObjectName,
	BOOL fOfferToContinue,
	const OWNER_WINDOW * powinParent
	);

    void SetWorkWasDone( void ) { _fWorkWasDone = TRUE; }

public:

    PERFORMER(
	const OWNER_WINDOW *	powin
	);

    ~PERFORMER();

    BOOL PerformSeries( const OWNER_WINDOW * powinParent,
			BOOL fOfferToContinue = TRUE );

    BOOL QueryWorkWasDone( void ) { return _fWorkWasDone; }

    virtual UINT QueryObjectCount( void ) const = 0;

    virtual const CHAR * QueryObjectName(
	UINT		iObject
	) const = 0;

    const OWNER_WINDOW * QueryOwnerWindow( void ) const;

} ; // class PERFORMER

/*******************************************************************

    NAME:       PERFORMER::PerformSeries

    SYNOPSIS:   Performs series of PerformOne actions

    RETURNS:	TRUE iff _all_ PerformOne actions succeeded.  This may
		indicate to the caller that the property dialog can be
		closed.

    NOTES:	We may eventually add an "ignore future errors" option

    HISTORY:
    JonN        23-Jul-1991     Created

********************************************************************/

BOOL PERFORMER::PerformSeries(	const OWNER_WINDOW * powinParent,
				BOOL fOfferToContinue )
{
    AUTO_CURSOR autocur;
    BOOL fAllSucceeded = TRUE;

    UINT i;
    for ( i = 0; i < QueryObjectCount(); i++ )
    {
	BOOL fWorkWasDone = FALSE;
	APIERR errMsg;
	APIERR err = PerformOne( i, &errMsg, &fWorkWasDone );
	if ( fWorkWasDone )
	    SetWorkWasDone();
	if ( err != NERR_Success )
	{
	    fAllSucceeded = FALSE;
	    BOOL fContinue = DisplayError(
		err,
		errMsg,
		QueryObjectName( i ),
		(fOfferToContinue && (i < QueryObjectCount()-1)),
		powinParent
		);
	    if (!fContinue)
		return FALSE;
	}
    }

    return fAllSucceeded;
}


OPEN QUESTION: How do we handle the case where the object has been deleted (see UI Standards FunSpec lines 559-567)? One possibility is that we allow PerformOne to return a value indicating that the object has been deleted, causing PerformSeries to call another virtual method, CreateOne. Another, possibly better suggestion, is that lines 559-567 are PHS.
autonumlgl	BASEPROP_DLG
BASEPROP_DLG is the base class for all property dialogs and subdialogs. It adds several things to DIALOG_WINDOW:
+	BASEPROP_DLG multiply inherits from DIALOG_WINDOW and PERFORMER (see below), so that it provides support for multiple selection;
+	BASEPROP_DLG provides a secondary constructor which calls virtual GetOne() to read in information on all selected items, and virtual InitControls() to set up the (sub-)dialog controls once all information has been successfully read in.
+	BASEPROP_DLG adds the fNewVariant flag and IsNewVariant() accessor to keep track of whether this property dialog and its sub-property dialogs are New Object variants.
/*************************************************************************

    NAME:	BASEPROP_DLG

    SYNOPSIS:	BASEPROP_DLG is the base class for the main property
		dialogs and subdialogs in the admin applications.  It
		provides support for initializing the data on
		multiply-selected objects, and inherits from PERFORMER
		support for writing out changes on these objects.

		BASEPROP_DLG adds to PERFORMER the "post-constructor"
		GetInfo(), which must be called on all property dialogs
		and subdialogs after construction but before Process().
		GetInfo() will call GetOne() repeatedly in the same way
		PerformSeries() calls PerformOne(), then will call
		InitControls() if all the GetOne() calls succeed.

    INTERFACE:
		QueryLocation()
			Returns the focus for this dialog
		GetOne()
			Loads information for later use by PerformOne()
		InitControls()
			Derived classes may derive their own InitControls()
			variants but should call down to this one when they
			are finished.
		GetInfo()
			GetInfo is a second stage constructor.  It allows
			BASEPROP_DLG to initialize the information on the
			selected items.
		PerformOne()
		QueryObjectCount()
		QueryObjectName()
			See PERFORMER
		IsNewVariant()
			Indicates whether this dialog is a New Object
			variant as opposed to an Edit Object variant

    PARENT:	DIALOG_WINDOW, PERFORMER

    USES:	LOCATION

    CAVEATS:	BASEPROP_DLG is an abstract subclass.  The virtual methods
		BASEPROP_DLG::QueryLocation, BASEPROP_DLG::GetOne,
		BASEPROP_DLG::IsNewVariant, PERFORMER::PerformOne and
		PERFORMER::QueryObjectName must be redefined before an
		object of this class can be instantiated.

		BUGBUG BASEPROP_DLG should contain support for changing
		the Cancel button to Close when a subdialog does
		something.

    NOTES:	The same error message format applies to GetOne() as to
		PERFORMER::PerformOne().

		Process() returns TRUE iff _any_ PerformOne() action in
		any PerformSeries() indicated that something was
		changed.  This includes changes from subdialogs other
		than "new object" variants.

		To determine whether any changes were made over the life
		of the dialog (i.e. whether we want to refresh), call
		QueryWasWorkDone() after Process() completes but before
		destruction.  This will indicate whether any call to
		PerformOne() made any changes.  For main property
		dialogs, this includes whetherh any subdialogs made
		changes.

    HISTORY:
	JonN	15-Aug-1991	Created

**************************************************************************/

class BASEPROP_DLG: public DIALOG_WINDOW, public PERFORMER
{

// allows SUBPROP_DLG to access parent's QueryLocation()
friend class SUBPROP_DLG;

protected:

    virtual const LOCATION & QueryLocation() const = 0;

    virtual APIERR GetOne(
	UINT		iObject,
	APIERR *	perrMsg
	) = 0;

    virtual APIERR InitControls();

    /* inherited from PERFORMER */
    virtual APIERR PerformOne(
	UINT		iObject,
	APIERR *	perrMsg,
	BOOL *		pfWorkWasDone
	) = 0;

public:

    BASEPROP_DLG(
	/*
		CODEWORK should take const CHAR *, but not until
		DIALOG_WINDOW does the same
	*/
	LPSTR	pszResourceName,
	const OWNER_WINDOW *	powin
	) ;

    ~BASEPROP_DLG();

    BOOL PerformSeries( BOOL fOfferToContinue = TRUE );

    BOOL GetInfo();

    /* inherited from PERFORMER */
    virtual UINT QueryObjectCount( void ) const = 0;
    virtual const CHAR * QueryObjectName(
	UINT		iObject
	) const = 0;

    virtual BOOL IsNewVariant() const = 0;

} ; // class BASEPROP_DLG

/*******************************************************************

    NAME:       BASEPROP_DLG::PerformSeries

    SYNOPSIS:   Performs series of PerformOne actions

    RETURNS:	As PERFORMER::PerformSeries, but assumes that dialog is
		the parent for any error messages

    NOTES:	We may eventually add an "ignore future errors" option

    HISTORY:
    JonN        26-Jul-1991     Created

********************************************************************/

BOOL BASEPROP_DLG::PerformSeries( BOOL fOfferToContinue )
{
    return PERFORMER::PerformSeries( this, fOfferToContinue );
}

/*******************************************************************

    NAME:       BASEPROP_DLG::GetInfo

    SYNOPSIS:   Secondary constructor for Properties main dialogs
		and subdialogs

    RETURNS:	Do not Process() dialog if this is not TRUE.
		GetInfo() will report the error itself.

    HISTORY:
    JonN        18-Jul-1991     Created

********************************************************************/

BOOL BASEPROP_DLG::GetInfo()
{
    //
    // If the dialog failed to construct, let Process() report the error.
    //
    if ( QueryError() )
	return TRUE;

    AUTO_CURSOR autocur;

    UINT i;
    APIERR err = NERR_Success;
    for ( i = 0; i < QueryObjectCount(); i++ )
    {
	/*
	   If GetOne fails, report the error here and do not let
	   Process() be called.  We set the error to GEN_FAILURE
	   initially because GetOne is virtual and might forget.
	*/
	APIERR errMsg = ERROR_GEN_FAILURE; // should not appear!
	err = GetOne( i, &errMsg );
	if ( err != NERR_Success )
	{
	    ASSERT( errMsg != ERROR_GEN_FAILURE );
	    DisplayError(
		err,
		errMsg,
		QueryObjectName( i ),
		FALSE,
		QueryOwnerWindow()
		);
	    return FALSE;
	    //
	    // BUGBUG this doesn't seem to work quite right -- can we
	    // really get away with not calling Process()?
	    //
	}
    }

    err = InitControls();
    if ( err != NERR_Success )
    {
	//
	// If the controls could not initialize, let Process() report
	// the error.
	//
	ReportError( err );
	return TRUE;
    }

    return TRUE;
}

autonumlgl	PROP_DLG
PROP_DLG is the base class for all main property dialogs. It adds these things to BASEPROP_DLG:
+	PROP_DLG keeps a LOCATION for the use of the main property dialog and all of its subdialogs.
autonumlgl	SUBPROP_DLG
SUBPROP_DLG is the base class for all sub-property dialogs. It adds these things to BASEPROP_DLG:
+	SUBPROP_DLG retains a pointer to its parent PROP_DLG. It handles redirecting the QueryFocus(), QueryObjectCount() and QueryObjectName() methods to its parent PROP_DLG and gets its initial fNewVariant from its parent.
autonumlgl	Interface with main listbox
The main listbox provides an ADMIN_SELECTION object. This object has an interface similar to an SLIST, and may in fact be defined as a thin shell over SLIST; or, alternately, it may get its information directly from a BLT listbox. It allows the main properties dialog and its subdialogs to iterate over the names of the selected items.
This ADMIN_SELECTION object is the only interface between the main window and the main properties dialog and subdialogs. The main properties dialog will reread the basic information displayed in the main window as part of the LMOBJ/LMENUM objects for the selected API objects.
autonumlgl	The main property dialog
The User Manager main property dialog hierarchy, USERPROP_DLG, will be used as the example for this section. As stated above, this will also serve as the CDD for the User Manager main property dialog hierarchy.
The W_ virtuals rooted at USERPROP_DLG are not required of all main property dialog classes. They are a convention to be used where appropriate.
All main property dialogs are subclasses of PROP_DLG. They are responsible for:
+	Reading in all information about the selected API object(s), including information needed only by subdialogs;
+	For "new/duplicate" variants, creating default information for the newly created API object;
+	Placing appropriate information in the main properties dialog and allowing editing there;
+	Dispatching subdialogs;
+	Saving the changes resulting from editing in the main properties dialog, and saving the changes resulting from edits in the subdialogs for "new/duplicate" variants.
The information needed in the main dialog and subdialogs will be stored in objects taking the form of array of <NEW_LM_OBJ> or <LM_ENUM>, where <NEW_LM_OBJ> and <LM_ENUM> are a particular subclass of NEW_LM_OBJ  or LM_ENUM. Initialization of the main property dialog is described in the following section.
USERPROP_DLG defines some special virtuals used within the USERPROP_DLG hierarchy. These virtuals are not required of all main property dialogs; their use should be considered a convention, to be followed where appropriate.
autonumlgl	Adding fields to the dialogs
When a new editable field is added to the dialogs, it should be assigned a place in the dialog hierarchy.  For example, the Comment field is located in USERPROP_DLG, while the Password field is located in SINGLE_USERPROP_DLG because it doesn't apply to multiselect variants. This means that the dialog hierarchy should be shaped according to which edit fields are present in the dialogs.
Each editable field requires one or several member objects in its class, as well as modification to several methods of that class. The easiest thing to do is to find another editable field which lives in that class, and do the same thing for the new field. If the class is new, or currently contains no editable fields, run through this checklist:
+	Add a _typeFoobar member object to the class, e.g. _nlsComment or _fAccountDisabled. If the class potentially supports multiselection, add _fIndeterminateFoobar and _fIndetNowFoobar as well. Naturally, a corresponding BLT control item must also be added, along with the appropriate changes to the dialog template.
+	Add or update the W_LMOBJtoMembers() method at this level to load the value of this control from an LM_OBJ into the class data members. This method will be called several times, once for object 0 and again for each subsequent object. If multiple selection is supported, _fIndeterminateFoobar should keep track of whether all object seen so far have had the same value; if they haven't, _typeFoobar should be set to some default value.
+	Add or update the InitControls() method at this level to load the value of this control from _typeFoobar into the dialog.
+	Add or update the W_DialogToMembers() method at this level to load the value of this control from the dialog into _typeFoobar. This will be called during OnOK. If the control is in "indeterminate" state (e.g. checkbox in tristate), record this fact in _fIndetNowFoobar.
+	Add or update the W_MembersToLMOBJ() method at this level to load the value of this control from _typeFoobar into the corresponding LMOBJ. Note that the field should not be loaded if _fIndetNowFoobar is TRUE. This will be called during OnOK.
Note that all of these methods call their predecessor when they are finished, down to the root classes. This causes the action to be performed on all editable fields relevant to any given dialog.
autonumlgl	A sample class definition
/*************************************************************************

    NAME:	USERPROP_DLG

    SYNOPSIS:	USERPROP_DLG is the base dialog class for the main User
		Properties dialog.

    INTERFACE:
		These virtuals are rooted here:
		W_LMOBJtoMembers: Loads information from the USER_2 into
			the class data members
		W_MembersToLMOBJ: Loads information from the class data members
			into the USER_2
		W_DialogToMembers: Loads information from the dialog into the
			class data members

    PARENT:	PROP_DLG

    NOTES:	The GetOne, PerformOne and QueryObjectName methods of
		USERPROP_DLG assume an "edit user(s)" variant instead of
		a "new user" variant.  For new user variants, these
		must be redefined.  New user variants are required to
		pass psel==NULL.

		USERPROP_DLG's constructor is protected.  However, its
		destructor is virtual and public, to allow subclasses to
		delete objects of class USERPROP_DLG *.

    BUGBUG We should create a USERSUBPROP_DLG which handles the USER2_LB
    common to all subdialogs.

    HISTORY:
	JonN	17-Jul-1991	Created

**************************************************************************/

class USERPROP_DLG: public PROP_DLG
{

private:

    const ADMIN_SELECTION *	_psel;

    PUSER_2 *		_apuser2;
    // not yet implemented PUSER_MEMB *	_apusermemb;

protected:

    UINT		_cItems;

    NLS_STR		_nlsComment;
    BOOL		_fIndeterminateComment;
    NLS_STR		_fIndetNowComment;

    ICON_CONTROL	_iconUser;
    MLE			_mleComment;
    PUSH_BUTTON		_pbAccount; // BUGBUG should be GRAPHICAL_BUTTON
    PUSH_BUTTON		_pbGroups;
    PUSH_BUTTON		_pbLogonHours;
    PUSH_BUTTON		_pbLogonFrom;

    USERPROP_DLG(
	const LOCATION & loc,
	LPSTR	pszResourceName,
	const OWNER_WINDOW *	powin,
	const ADMIN_SELECTION * psel // "new user" variants pass NULL
	) ;

    /* inherited from PROP_DLG */
    virtual APIERR GetOne(
	UINT		iObject,
	APIERR *	pErrMsg
	);
    virtual APIERR InitControls();

    /* inherited from PERFORMER */
    virtual APIERR PerformOne(
	UINT		iObject,
	APIERR *	pErrMsg,
	BOOL *		pfWorkWasDone
	);

    virtual APIERR W_LMOBJtoMembers(
	UINT		iObject
	);
    virtual APIERR W_MembersToLMOBJ(
	PUSER_2		puser2
	);
    virtual APIERR W_DialogToMembers(
	);

    virtual BOOL OnOK( void );

    virtual BOOL OnCommand( CID cid, ULONG lParam );


public:

    /* virtual destructor required, see above */
    virtual ~USERPROP_DLG();

    /* inherited from PERFORMER */
    virtual UINT QueryObjectCount( void ) const;
    virtual const CHAR * QueryObjectName(
	UINT		iObject
	) const;

    inline USER_2 * QueryUserPtr( UINT iObject )
    {
	ASSERT( _apuser2 != NULL );
	ASSERT( iObject < _cItems);
	return _apuser2[ iObject ];
    }

    inline VOID SetUserPtr( UINT iObject, USER_2 * puser2 )
    {
	ASSERT( _apuser2 != NULL );
	ASSERT( iObject < _cItems );
	ASSERT( _apuser2[ iObject] != puser2 );
	delete _apuser2[ iObject ];
	_apuser2[ iObject ] = puser2;
    }

} ; // class USERPROP_DLG

autonumlgl	Constructor
The constructor for the main dialog will allocate the array(s) of pointers to objects needed to store information about the selected or new item(s). Here is an example constructor:
/*******************************************************************

    NAME:	USERPROP_DLG::USERPROP_DLG

    SYNOPSIS:	Constructor for User Properties main dialog, base class

    ENTRY:	Note that psel is required to be NULL for NEW variants

    NOTES:	cItems must be passed to the constructor because we
		cannot rely on virtual QueryObjectCount before the
		object has been fully initialized.

    HISTORY:
    JonN        17-Jul-1991     Created
    JonN	20-Aug-1991	Multiselection redesign

********************************************************************/

USERPROP_DLG::USERPROP_DLG(
	const LOCATION & loc,
	LPSTR	pszResourceName,
	const OWNER_WINDOW * powin,
	const ADMIN_SELECTION * psel
	) : PROP_DLG( loc, pszResourceName, powin, (psel == NULL) ),
	    _psel( psel ),
	    _apuser2( NULL ),
	    _cItems( (psel != NULL) ? psel->QueryCount() : 1 ),
	    _nlsComment(),
	    _fIndeterminateComment( FALSE ),
	    _fIndetNowComment( FALSE ),
	    _iconUser( this, IDUP_ICON, "UMIcon" ), // same icon as app
	    _mleComment( this, IDUP_ET_COMMENT ),
	    _pbAccount( this, IDBM_ACCOUNT_HACK ),
	    _pbGroups( this, IDBM_GROUPS_HACK ),
	    _pbLogonHours( this, IDBM_HOURS_HACK ),
	    _pbLogonFrom( this, IDBM_LOGON_FROM_HACK )
{
    if ( QueryError() ) return;
    _apuser2 = new PUSER_2[ _cItems ];
    if ( !_apuser2 )
    {
	ReportError( ERROR_NOT_ENOUGH_MEMORY );
	return;
    }
    UINT iItem;
    for ( iItem = 0; iItem < _cItems; iItem++ )
    {
	_apuser2[ iItem ] = NULL;
    }

}// USERPROP_DLG::USERPROP_DLG

autonumlgl	Secondary Constructor Virtuals GetInfo / InitControls
PROP_DIALOG has a virtual secondary constructor, GetInfo(), which must always be called between dialog construction and DIALOG::Process(). This secondary constructor coordinates reading information on the selected users; it behaves similarly to PERFORMER.
GetInfo() and InitControls() typically maintain class-instance variables for each item which can be edited. _typeFoobar stores the value of the Foobar item last seen in the dialog. For items which can be active in multiple-selection contexts, _fIndeterminateFoobar records whether the value was indeterminate when the dialog first appeared, and _IndetNowFoobar remembers whether the value was indeterminate when OK was last pressed. The following is an example of typical methods GetInfo() and InitControls().
/*******************************************************************

    NAME:       USERPROP_DLG::GetOne

    SYNOPSIS:   Loads information on one user

    ENTRY:	iObject is the index of the object to load

		perrMsg is the error message to be displayed if an
		error occurs, see PERFORMER::PerformSeries for details

    NOTES:      This version of GetOne assumes that the user already
		exists.  Subclasses which work with new object will want
		to redefine GetOne.

    CAVEATS:	Error 5 in GetInfo here has some unusual implications.
		The error text should note that account operators may not
		view properties of any admin or any user with operator
		rights, except him/herself.  More confusing, an account
		operator may view him/herself but may not edit
		him/herself (see PerformOne).
                    
    HISTORY:
               JonN  17-Jul-1991    created
	       JonN  20-Aug-1991    Multiselection redesign

********************************************************************/

APIERR USERPROP_DLG::GetOne(
	UINT		iObject,
	APIERR *	perrMsg
	)
{
    *perrMsg = IDS_UMGetOneFailure;
    const CHAR * pszName = QueryObjectName( iObject );
    UIASSERT( pszName != NULL );

    USER_2 * puser2New = new USER_2( pszName, QueryLocation() );
    if ( puser2New == NULL )
	return ERROR_NOT_ENOUGH_MEMORY;
    APIERR err = puser2New->QueryError();
    if ( err == NERR_Success )
    	err = puser2New->GetInfo();
    if ( err != NERR_Success )
    {
	delete puser2New;
	return err;
    }
    SetUser2Ptr( iObject, puser2New ); // change and delete previous

    return W_LMOBJtoMembers( iObject );
}

APIERR USERPROP_DLG::W_LMOBJtoMembers(
	UINT		iObject
	)
{
    USER_2 * puser2 = QueryUser2Ptr( iObject );
    UIASSERT( puser2 != NULL );

    if ( iObject == 0 ) // first object
    {
	_fIndeterminateComment = FALSE;

	// BUGBUG should use NLS_STR::Copy()
	_nlsComment = puser2->QueryComment();
	APIERR err = _nlsComment.QueryError();
	if ( err != NERR_Success )
	    return err;
    }
    else
    {
	if ( !_fIndeterminateComment )
	{
	    const CHAR * pszNewComment = puser2->QueryComment();
	    ALIAS_STR nlsNewComment( pszNewComment );
	    if ( _nlsComment.strcmp( nlsNewComment ) )
	    {
	        _fIndeterminateComment = TRUE;
		// BUGBUG should use NLS_STR::Copy()
		_nlsComment = NULL;
		APIERR err = _nlsComment.QueryError();
		if ( err != NERR_Success )
		    return err;
	    }
	}

    }

    return NERR_Success;
}

APIERR USERPROP_DLG::InitControls()
{
    ASSERT( _nlsInitComment.QueryError() == NERR_Success );
    _mleComment.SetText( _nlsComment );
    return PROP_DLG::InitControls();
}

autonumlgl	OnOK
When OK is pressed, the (sub-)dialog will change any individual property of a selected API object only if the user changed the value since the dialog was brought up. OnOK() typically calls W_DialogToMembers() to store the values from the dialog into _typeFoobar and _fIndetNowFoobar class-instance variables, for use by PerformOne().
BOOL USERPROP_DLG::OnOK( void )
{
    APIERR err = W_DialogToMembers();
    if ( err != NERR_Success )
    {
	MsgPopup( this, err );
	return TRUE;
    }

    if ( PerformSeries() )
    	Dismiss( QueryWorkWasDone() );
    return TRUE;
    
}   // USERPROP_DLG::OnOK

APIERR USERPROP_DLG::W_DialogToMembers(
	)
{
    _mleComment.QueryText( &_nlsComment );
    APIERR err = _nlsComment.QueryError();
    if ( err != NERR_Success )
	return err;
    _fIndetNowComment = ( _fIndeterminateComment &&
		(_nlsComment.strlen() == 0) );

    return NERR_Success;
}

/*******************************************************************

    NAME:       USERPROP_DLG::PerformOne

    SYNOPSIS:   
                    
    ENTRY:	iObject is the index of the object to save

		perrMsg is the error message to be displayed if an
		error occurs, see PERFORMER::PerformSeries for details

    CAVEATS:	Error 5 in GetInfo here has some unusual implications.
		The error text should note that account operators may not
		view properties of any admin or any user with operator
		rights, except him/herself.  More confusing, an account
		operator may view him/herself but may not edit
		him/herself (see PerformOne).
                    
    HISTORY:
               JonN  17-Jul-1991    created
	       JonN  20-Aug-1991    Multiselection redesign
	       JonN  26-Aug-1991    PROP_DLG code review changes

********************************************************************/

APIERR USERPROP_DLG::PerformOne(
	UINT		iObject,
	APIERR *	perrMsg,
	BOOL *		pfWorkWasDone
	)
{
     UIASSERT( iObject < QueryObjectCount() );
    UIASSERT( (perrMsg != NULL) && (pfWorkWasDone != NULL) );

   *perrMsg = IDS_UMEditFailure;
    *pfWorkWasDone = FALSE;

    USER_2 * puser2Old = QueryUser2Ptr( iObject );
    UIASSERT( puser2Old != NULL );
    
    USER_2 * puser2New = new USER_2( puser2Old->QueryName() );
    if ( puser2New == NULL )
    {
	delete puser2New;
	return ERROR_NOT_ENOUGH_MEMORY;
    }

    APIERR err = puser2New->CloneFrom( *puser2Old );

    if ( err == NERR_Success )
    {
	err = W_MembersToLMOBJ( puser2New );
    }

    UITRACE( "USERPROP_DLG::PerformOne object ready for WriteInfo\n\r" );

    if ( err == NERR_Success )
    {
	err = puser2New->WriteInfo();
	if ( err == NERR_Success )
	    *pfWorkWasDone = TRUE;
	else
	{
	    UIDEBUG("USERPROP_DLG::PerformOne -- puser2New->WriteNew failed\n\r");
	    err = W_MapPerformOneAPIError( err );
	}
    }


    if ( err == NERR_Success )
    {
	SetUser2Ptr( iObject, puser2New ); // change and delete previous
    }
    else
    {
	delete puser2New;
	puser2New = NULL;
    }

    UITRACE( "USERPROP_DLG::PerformOne returns " );
    UITRACENUM( (LONG)err );
    UITRACE( "\n\r" );

    return err;

}

autonumlgl	Subdialogs
Subdialogs receive both the ADMIN_SELECTION object and accessors to the arrays of objects from the main properties dialog. They are permitted to change the objects in the arrays. The Nth item in the ADMIN_SELECTION is expected to match the Nth item in each array.
Subdialogs edit the appropriate fields of the information of the selected API objects, where this information is stored in the elements of the arrays. They will not save the changes into the arrays until the changes have been successfully applied to the API. (Such changes will generally be specific to the affected parameters.)
Subdialogs may also provide a static method for use of the main properties dialog. This static method will apply the changes to a single API object, and return a standard error code. The main dialog may then call down to this static method to write out the changes for "new/duplicate" variants, just as the subdialog itself uses the method for "existing" variants. This method is only provided where both the "existing" and "new/duplicate" variants will use the same API call to write out information regarding this aspect of the object; in most cases, "existing" will write only specific parameters with Net***SetInfo(parmnum) while "new/duplicate" will write out the entire object with Net***Create.
APIERR USERACCT_DLG::PerformOne(
	UINT		iObject,
	APIERR *	perrMsg,
	BOOL *		pfWorkWasDone
	)
{
    UIASSERT( iObject < QueryObjectCount() );
    UIASSERT( (perrMsg != NULL) && (pfWorkWasDone != NULL) );

    UITRACE( "USERACCT_DLG::PerformOne : " );
    UITRACE( QueryObjectName( iObject ) );
    UITRACE( "\n\r" );

    *perrMsg = IDS_UMEDITFAILURE;
    *pfWorkWasDone = FALSE;

    USER_2 * puser2Old = _QueryUser2Ptr( iObject );
    UIASSERT( puser2Old != NULL );
    USER_2 * puser2New = new USER_2(
	puser2Old->QueryName()
	);
    
    if ( puser2New == NULL )
	return ERROR_NOT_ENOUGH_MEMORY;

    APIERR err = puser2New->CloneFrom( puser2Old );

    if ( err == NERR_Success )
    {
	if ( _cidCurrentPrivilege != RG_NO_SEL )
	{
	    puser2New->SetPriv( _cidCurrentPrivilege - IDUP_RB_GUEST );
	}
    }

    /*
	Only write the changes if we want to commit, otherwise just
	switch the old LM_OBJ with the new LM_OBJ
    */
    if ( (err == NERR_Success) && (!IsNewVariant()) )
    {
	err = puser2New->WriteInfo();
	if ( err == NERR_Success )
	    *pfWorkWasDone = TRUE;
    }

    if ( err == NERR_Success )
    {
	SetUser2Ptr( iObject, puser2New );
   }
  else
  {
     delete puser2New;
  }

    UITRACE( "USERACCT_DLG::PerformOne returns " );
    UITRACENUM( (LONG)err );
    UITRACE( "\n\r" );

    return err;

}

autonumlgl	Non-dialog Clients of PERFORMER
PERFORMER is designed to be used by non-dialog clients as well as by BASEPROP_DLG. When the user hits Delete, for example, the application will delete the selected item(s). This action does not normally involve displaying a dialog box, although it may if an error occurs. The PERFORMER class should still be used to maintain the multiple-action protocol described in the UI Standards spec. The following example shows the class which deletes the selected users; some intermediate classes (i.e. ADMIN_PERFORMER, LOC_ADMIN_PERFORMER, DELETE_PERFORMER) are left out.
/*************************************************************************

    NAME:	USER_DELETE_PERFORMER

    SYNOPSIS:   For deleting users

    INTERFACE:  USER_DELETE_PERFORMER(),  constructor
    	
    		~USER_DELETE_PERFORMER(), destructor

    PARENT:	DELETE_PERFORMER

    HISTORY:
        o-SimoP     09-Aug-1991     Created

**************************************************************************/

class USER_DELETE_PERFORMER: public DELETE_PERFORMER
{
protected:

    virtual APIERR PerformOne(	UINT		iObject,
				APIERR  *	perrMsg,
				BOOL *		pfWorkWasDone );

public:
    
    USER_DELETE_PERFORMER(
    	const OWNER_WINDOW    * pownd,
	const ADMIN_SELECTION & asel,
	const LOCATION        & loc );

    ~USER_DELETE_PERFORMER();

};

APIERR USER_DELETE_PERFORMER::PerformOne(
            UINT        iObject,
            APIERR  *   perrMsg,
	    BOOL *	pfWorkWasDone )
{
    UIASSERT( (perrMsg != NULL) && (pfWorkWasDone != NULL) );
    *perrMsg = IDS_CannotDeleteUser;
    *pfWorkWasDone = FALSE;
    USER user( QueryObjectName( iObject ), QueryLocation() );
    APIERR err = user.QueryError();
    if( err == NERR_Success )
	err = user.Delete();
    if ( err == NERR_Success )
	*pfWorkWasDone = TRUE;
    return err;

} // APIERR USER_DELETE_PERFORMER::PerformOne

NT LAN User Interface CDD: Multiple Selection	page PAGE19



v                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               J  K          	  	  	  	  	  	  
  
  O
  P
  Z
  [
  
  
  
  
      &  '  $  $  $  $  ;%  <%  %  %  &  &  >  >  >  >  >  >  >  >  >  >  `?  a?  <@  =@  G@  H@  B  B  B  B  D  D  E  E  ~E  E  E  E  E  E  H  H  H  H  K  K  L  L  N  N  /O  0O  @P  AP  Q                                                      A @ cQ  Q  R  R  V  V  ;^  <^  F^  G^  ?e  @e  Je  Ke  's  (s  2s  3s          G  H  R  S        !  "  $  %  +  -  9                                                                                                                                                                                                                                                                                                                                                        #                        #  %  '  {  }                    &  J  v      Q  T  d  f  y  z                  
  *  G  W                J      	  	  
  O
  g
  
  
      Ŀĺɫ     $    $           $j  $&   $                                             $   $%                    $   $ C  3            \            (  V          "  U  n        #  [  p          P              P        	      X        +  e          >  O  Q          8  q      +  i        2  W  w        >  z            &  (  9  <  >  H  J  l         $   $     $         ]                      &  7  U  n                        '  )  d              ,  <  K  M                  N  P             !   /   X   Z            !  !  !  ?!  A!  N!  ~!  !  !  !  !  "  "  6"  :"  W"  |"  "  "  "  "  "  "  #  #  #  $#  &#  A#  D#  F#  H#  $                $     $   $  ]$  $  ;%  %  &  X'  '  '  '  '  (  =(  n(  (  (  (  )  S)  )  )  )  4*  6*  F*  Y*  *  *  *  *  	+  A+  S+  `+  +  +  +  +  ,  ,  -,  ?,  q,  ,  ,  ,  ,  ,  ,  +-  a-  -  -  .  .  >.  r.  .  .  .  .  .  /  S/  /  /  /  /  "0  ]0  0  0  1  1  1  1  81  :1  1  1  1  1  1  2  2  !2  -2  /2  h2  j2  2       $   $   $=  $&    $         Y2  2  2  2  2  2  2  2  3  03  D3  \3  e3  g3  p3  r3  3  3  3  3  3  3  4  4   4  64  84  q4  s4  4  4  4  4  5  5  .5  05  \5  ^5  y5  {5  5  5  5  5  )6  +6  q6  6  6  6  6  6  7  7  ]7  _7  7  7  7  7  7  (8  *8  Q8  S8  8  8  8  8  9  9   9  I9  K9  9  9  9  9  9  :  :  ):  8:  ::  T:  V:  c:  :  :  :  :  :  5;  p;  u;  ;  ;       $   $  a;  ;  ;  <  0<  8<  C<  \<  f<  |<  <  <  <  <  =  =  !=  (=  *=  E=  e=  l=  q=  =  =  =  =  =  =  =  >  	>  >  ">  >  >  >  `?  <@  f@  A  B  B  C  \D  D  E  ~E  E  E  F  G  H  H  bJ  K  L  N  /O  @P  5Q  Q  "R  nR  pR  R  R  R  R  R  R  S  XS  sS  S  S  T  "T                      $                      $  $=  $&    $            $   $  M"T  $T  :T  <T  ~T  T  T  *U  >U  @U  zU  U  U  U  -V  LV  NV  \V  wV  yV  V  V  V  V  V  V  V  "W  $W  >W  tW  vW  W  W  W  W  W  W  W  W  X  0X  sX  X  X  X  X  X  X  Y  5Y  uY  {Y  }Y  Y  Y  Y  Y  Y  	Z  Z  /Z  OZ  `Z  tZ  Z  Z  Z  Z  Z  Z  Z  [  [  2[  7[  9[  Y[  [[  [  [  [  [  [  [  [  [  \  H\  s\  \  \  \  \       $                    $  ]\  \  \  ]  #]  *]  ,]  i]  p]  ]  ]  ]  ]  ^  ^  ^  9^  ;^  U^  _  Q_  S_  y_  {_  _  _  `  	`  I`  `  `  `  `  `  a  a  Ua  Wa  ta  a  a  a  a  !b  6b  Nb  b  b  b  b  (c  Tc  c  c  c  d  d  /d  Wd  md  td  d  d  d  d  d  d  e  e  e  =e  ?e  e  f  h  h  h  h  h  #i  %i  \i  ^i  i  i  i  j  Rj                $    $    $                   $  WRj  ij  kj  j  j  'k  bk  k  k  k  k  l  <l  >l  l  l  l  l  l  l  l  l  -m  Om  Qm  m  m  m  m  n  @n  `n  gn  {n  n  n  n  n  o  o  o  .o  >o  Bo  Eo  vo  o  o  o  o  o  o  p  <p  ep  p  p  p  p  p  p  p  q  <q  mq  uq  q  q  q  r  %r  8r  @r  Dr  Fr  Mr  Or  ir  lr  nr  r  r  r  r  "s  %s  's  :s  t  t  t  t                                $   $  [t  t  t  u  #u  *u  ,u  Hu  mu  u  u  u  u  u  u  u  u  *v  Jv  Xv  v  v  v  v  v  v  w  w  Bw  Dw  Vw  lw  w  w  w  x  x  \x  x  x  y  @y  ay  wy  y  y  y  #z  %z  lz  nz  z  z  z  z  z  z  {  C{  E{  g{  {  {  {  {  {  $|  B|  I|  ]|  |  |  |  |  |  |  |  }  }  }  b}  d}  }  }  }  }  }  }  }  =~  i~  m~  t~  v~  x~  ~               $   $  _~  ~  ~  ~  ~  ~    "  )  +  `  ~                Ҁ    ۄ      "  :  >  A  p          $  &  I  f  h               )  K  M          և  ڇ       '  )  1  o      ڈ        ;  B  D  d  k                    -  /  @  B  E  G  u           $    $    $                    $          W        ?  A  x        ˍ  ͍  ۍ    
  W  Y          ώ            2  W  w                  0  M  P      Ґ    6  U  l              '  )  +  -                                                                                                                                                                                                          $   $  9                       EXB1B2B3B4TIRNFFRHCBNL
Spec titleTitlepage infoFigure titleRevision HistoryCentered BoldPicture                                                             
      h      @       <  $ 
      <  $ 
      <  8$ 
      <  $ 

      h                                                        
                    0       0       p0       @0        H 
       	       
        @   	                   H x          	              @   	            x 3                                  	
              -   5            Q  9      #  #  $+  1  b6  ;  -C  e  k  p  Pu    ٌ    
          

          
   L    
   i   
  	    
 
       g
        
   s    
       
   Q   E 
         @   F     Q  9  J K       $  2  ;  "T  \  Rj  t  ~    -  L M N O P Q R S T U V W 
1COURIER  elite  prestige  lettergothic  gothicPS  
cubicPS lineprinter  "HELVETICA  avantegarde  
spartan  metro  presentation  APL  OCRA  OCRB  emperorPS  madaleine  zapf humanist  
classic  
roman f  
roman g  
roman h  timesroman  
century  PALATINO  souvenir  garamond  caledonia  	bodini  university  	BSCRIPT scriptPS  script c  script d  commercial script  park avenue  
coronet  script h  greek  kana  	hebrew  
roman s  
russian  
roman u  
roman v  
roman w  narrator  emphasis  zapf chancery  
decor d  old english  
decor f  
decor g  cooper black  linedraw  math7  math8  
bar3of9  EAN  	pcline  	tech h  RZAPFDINGBATS   Zapf Dingbats f   k   t       M  S  ^    )      l	  w	  
  
  .#  9#  <  <  c=  n=  >  >  MA  XA  2G  =G  zP  P  \  \  c  c  q  q  0~  ;~  ǈ  ҈      5 5 5 5 5 5 5 5 5 5 5 5 5555 5 3   8   ;   F   !      
            "   "   =/    h    jj     2   &  Z          Multiple Selection CDD MULTIPLE SELECTION CDD0based on Generic CDD Template for LM3.0 UI GroupJonathan Spencer NewmanJonathan Spencer Newman
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\netui\admin\common\xlate\sed0.txt ===
#n
/MAX_NERR/d
/^#define.*NERR_BASE/p
/^[ 	][ 	][ 	]*\*.*/s/^[ 	]*\*/!/p
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\netui\admin\common\xlate\sed1.txt ===
/^!/bNOBC
/(NERR_BASE/!b
/\*\//bPROCESS
h
d
:NOBC
H
g
s/\n!//
/\*\//bPROCESS
h
d

:PROCESS
s/^.*(NERR_BASE/	(NERR_BASE/
s/).*\/\* /),	"/
s/\*\//"/

s/@W //
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\netui\admin\doc\refresh.txt ===
Algorithm

0.  On initial Add to main window set all fExist flags to TRUE.
-------------------------------------------------------------------------

1. Repeat
     Get Next Buffer (From resumable API's)
     For each item in the buffer
       Find it in the listbox
       If item is found
          Then Update the data for that item
               Toggle fExist.
	       Invalidate item
          Else Add item to the listbox
               (add with toggled value of fExist)

2. Delete all items from the listbox that do not have the proper value for
   fExist.
   Invalidate listbox.



Class Hierarchy

	LBI
	   ADMIN_LBI (fExists lives here)
		UM_LBI
		GR_LBI
		SM_LBI

	BLT_LISTBOX
	   ADMIN_LISTBOX
		UM_LB
		GR_LB
		SM_LB
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\netui\admin\server\doc\enum.doc ===
ۥ- !@	   -             ]  K                 Z*                                   f  f                      P        $  @     \ V L                                        < 4 p  4           4   4                                                                   
Windows NT
Component Design Document
New Server Enumeration Strategy
Microsoft Confidential





EMBED MSDraw   \* mergeformat



date \@ "MMMM d, yyyy"March 6, 1992

Charles Keith Moore (KeithMo)
Microsoft

Revision 0.0

Revision History

0.0	05-Mar-1992	KeithMo	Created this document.
Issues Pending
1.	Overview
1.1	Definition of Component
This CDD describes the design of the new server enumeration strategy used to fill the Server Manager's main window.  This CDD includes the algorithms, data structures, and C++ classes used to implement the new server enumeration strategy.
1.2	References
1.2.1	Functional Specifications
SYMBOL 183 \f "Symbol" \s 10 \h	Server Manager Functional Specification.
SYMBOL 183 \f "Symbol" \s 10 \h	NT Security Account Manager Protected Subsystem (SAM) Specification.
1.2.2	Related Component Design Documents
SYMBOL 183 \f "Symbol" \s 10 \h	Server Manager Design Overview.
1.3	Design Overview
1.3.1	Problem Description
Describe the design of the new server enumeration strategy.
1.3.2	Design Objectives
These procedures must provide good performance and minimum network impact.  In particular, execution time must not grow exponentially as the number of enumerated servers is increased.  O(n2) behavior can be avoided with careful selection of algorithms and data structures.
1.3.3	Design constraints
The initial client for these procedures will be the Server Manager admin tool.  However, the design should avoid any dependencies on the Server Manager so they may be reused by other applications.
2.	Development Tools, Platforms and Environment
2.1	Platforms
See the Server Manager Design Overview.
2.2	Presentation Tools 
See the Server Manager Design Overview.
2.3	Languages and Tools
See the Server Manager Design Overview.
2.4	Down Level Support
The new server enumeration strategy detailed in this CDD may only be used in pure NT domains and mixed NT/LanMan domains.  These procedures should fall back to the "standard" enumeration when targeted against pure LanMan domains.
3.	Detailed Description of Operation
This section describes the detailed operation of the new server enumeration strategy.
3.1	Description
Then general algorithm for the new enumeration strategy (viewed from 10,000 feet) is:
Open a SAM handle to the target domain.

Enumerate the NT servers in the domain with the SamQueryDisplayInformation API.  This is the NT_SERVERS list.

Sort the NT_SERVERS list.  This step will only be necessary in early implementations of the SamQueryDisplayInformation API.  Future implementations will return the information presorted in the target domain's language.

Enumerate the LanMan servers in the domain with the SamEnumerateUsersInDomain API.  This is the LM_SERVERS list.

Sort the LM_SERVERS list.

Merge the NT_SERVERS and LM_SERVERS lists into the KNOWN_SERVERS list.  If the NT_SERVERS and LM_SERVERS lists are not disjoint (i.e. one or more server names appear in both lists) then warn the user and remove the offending server name(s) from both lists.

Enumerate the broadcasting servers in the domain with the NetServerEnum API.  This is the BROWSER_SERVERS list.

Sort the BROWSER_SERVERS list.

Merge the KNOWN_SERVERS and BROWSER_SERVERS lists into the ALL_SERVERS list.  The Role, Type, Name, and Comment fields wil be retrieved from the KNOWN_SERVERS and the BROWSER_SERVERS lists as follows:

RoleIf the server is from BROWSER_SERVERS, then compute the role from the SERVER_INFO data structure.  Otherwise, if the server is an NT server from NT_SERVERS, compute the role from the SAM information.  Otherwise, the role is unknown.
TypeIf the server is from BROWSER_SERVERS, then compute the type and network version number from the SERVER_INFO data structure.  Otherwise, if the server is an NT server from NT_SERVERS, assume its type is NT.  Otherwise, assume its type is LanMan.
NameIf the server is from BROWSER_SERVERS, use the server name from SERVER_INFO data structure.  Otherwise, use the server name from KNOWN_SERVERS.
CommentIf the server is from BROWSER_SERVERS, use the server comment from the SERVER_INFO data structure.  Otherwise, this field is blank.3.2	Class Hierarchy
The classes for the new enumeration strategy are structured as follows:
BASE		ENUM_CALLER
	LM_ENUM
		LOC_LM_ENUM
			SERVER_ENUM
				SERVER1_ENUM
			USER_ENUM
			TRIPLE_SERVER_ENUM
	LM_RESUME_ENUM
		NT_MACHINE_ENUM

The TRIPLE_SERVER_ENUM and NT_MACHINE_ENUM classes are described below.  All other classes have been predefined in LMOBJ.
3.3	General Operation
<<details>>
3.4	Class Declarations
This section will detail the class declarations for each of the above described classes.
3.4.1	<<foo classes>
The <<foo>> class is defined as follows:
class <<foo>> : public <<foo_parent>>
{
};  // class <<foo>>
3.5	Alternatives Considered and Tradeoffs
<<<Add discussion of parent-class/contained-object constructor synchronization issues.>>>
4.	Modular Decomposition and Tasking
4.1	Modules

4.2	Process/Thread Structure
N/A.
5.	Major Data Structures and Functions

5.1	Major Data Structures

5.2	Major Functions/Classes

6.	Internal Interfaces

6.1	Inter-component

6.2	Intra-component

7.	External Interfaces and Dependencies

7.1	Exported Interfaces 

7.2	Imported Interfaces

7.3	Dependencies

8.	Performance Issues

8.1	Performance Aims

8.2	Size

9.	Work Effort Estimates

9.1	Major Task List

10.	Testing Considerations

10.1	Instrumentation, Test Hooks

10.2	Desirable Test Utilities

10.3	Unit Tests
<<TBD>>
10.4	Expected Problem Areas 

10.4.1	System Test

10.4.2	Integration Test

10.4.3	Boundary Conditions

10.4.4	Memory Related

10.4.5	System/SubSystem Constraints

10.5	Others

PAGE1



u } @$  :  qq)                                     	  eA   B@       &      MrEd Microsoft Draw  Z   &  MrEd                                  P Times New Roman _                                              &  MrEd                                 	                        %                                              4     5 B@  C               (                                                                                   w      ww      www      wwww      wwwww      wwwwww      wwwwwww      wwwwwwww      wwwwwwwww      wwwwwwwwww      wwwwwwwwwww      wwwwwwwwwwww      wwwwwwwwwwwww     wwwwwwwwwwwwww     wwwwwwwwwwwwwww     wwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp       wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp       wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp    wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp  wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp                                                                                                                                                                                                                           w  ww  www  wwww wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwx wwwww wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwx wwwww                                                        x wwwww                                                        x wwwww  x wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w      x wwwww  w      x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwww  w     x www  w     x ww  w     x w  w     x   w     x   w     x   w     x   w     x   w     x   w     x   w     x   w     x   w     x   w     x   w     x   w     x   w     x   w      x   w      x   w                 x   w                 x   w                 x   w                 x   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwx   wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwpx                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               -                                                  4    5         '   '     /M@m-!(m4           MSDraw             qq 	  eA   B@       &      MrEd Microsoft Draw  Z   &  MrEd                                  P Times New Roman _                                              &  MrEd                                 	                        %                                              4     5 B@  C               (                                                                                   w      ww      www      wwww      wwwww      wwwwww      wwwwwww      wwwwwwww      wwwwwwwww      wwwwwwwwww      wwwwwwwwwww      wwwwwwwwwwww      wwwwwwwwwwwww     wwwwwwwwwwwwww     wwwwwwwwwwwwwww     wwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp       wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp       wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp    wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp  wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp                                                                                                                                                                                                                           w  ww  www  wwww wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwx wwwww wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwx wwwww                                                        x wwwww                                                        x wwwww  x wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w      x wwwww  w      x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwww  w     x www  w     x ww  w     x w  w     x   w     x   w     x   w     x   w     x   w     x   w     x   w     x   w     x   w     x   w     x   w     x   w     x   w     x   w      x   w      x   w                 x   w                 x   w                 x   w                 x   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwx   wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwpx                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               -                                                  4    5         '   '     /M@m-!(m|9/]9102#W=        METAFILEPICT q     qq) 	  eA   B@       &      MrEd Microsoft Draw  Z   &  MrEd                                  P Times New Roman _                                              &  MrEd                                 	                        %                                              4     5 B@  C               (                                                                                   w      ww      www      wwww      wwwww      wwwwww      wwwwwww      wwwwwwww      wwwwwwwww      wwwwwwwwww      wwwwwwwwwww      wwwwwwwwwwww      wwwwwwwwwwwww     wwwwwwwwwwwwww     wwwwwwwwwwwwwww     wwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp       wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp       wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp      wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp     wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp    wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp  wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwp                                                                                                                                                                                                                           w  ww  www  wwww wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwx wwwww wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwx wwwww                                                        x wwwww                                                        x wwwww  x wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  wx wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w      x wwwww  w      x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwwww  w     x wwww  w     x www  w     x ww  w     x w  w     x   w     x   w     x   w     x   w     x   w     x   w     x   w     x   w     x   w     x   w     x   w     x   w     x   w     x   w      x   w      x   w                 x   w                 x   w                 x   w                 x   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wx   wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwx   wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwpx                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               -                                                  4    5         '   '     /M@m-!(m
				USER0_ENUM
	ENUM_ w      
            ,  -  :  ;      =  >  i  j                                                    
  M  N  R  S  T  U  [  ]  ȡ ʡ ء ڡ  f   Ů Ʈ  R S ϰ     7 9 H L M \ ` m                                                                     F B           A  A                      x  
F           Q                              =  ?  ^  i  k  y  |                    i      >  S  n                  8  a  z      	  	  
  0
  
  ľĘĨĨĨĨ     $B   $   $   $   $%   $   $   $K   $           $   $           $    $      $   $ &9'9(9)9   $Z&9'9(9)9 6
  
  
  !  #      s  u            	  )  +                                    ,  u                                5  _    ʽ                $     $   $    $   $   $    $    $   $  F          l  4
!  F    F        $ 0   $    $    $  5        %  K  X  Z  x  ~                      *  ,  U  W  q  s                              .  0  R  T  s  u                          <  >  K  M  W  Y  [  ]  ʡ ڡ p    ү 7                    $   $             $   $    $    $   $B  $ 8  $  $ 8I                   Example (Monofont)Bullet Level 1Bullet Level 2Bullet Level 3Bullet Level 4	Doc TitleRevision Notice/DateFigure TitleRevision HistoryCenter Bold
Plain LineAlgorithm 1 B A       	  B C       	  B C       	  B C       	  B C       	 B C       	 F C      	 F C      	 F C      	 F C      	 F C      	 F C      	 F C       	  F A      	   B  F A      	  F       	  F       	  F       	 F C       	 F A      	 F C      	  F A      	 F A      	  F A      	   A
      h      <  $ 
      <  $ 
      <  8$ 
      <  $ 

      h                                                        
                    0x       0x       p0x       @0x       H 
      	       
       @   	                  0.                                    	
OBJ_BASE
		SERVER1_ENUM_OBJ
		USER0_ENUM_OBJ
		NT_MACHINE_ENUM_OBJ
		TRIPLE_SERVER_ENUM_OBJ,TRIPLE_SERVER_ENUM_OBJ, NT_MACHINE_ENUM, and NT_MACHINE_ENUM_OBJ NT_MACHINE_ENUM is a fairly standard LMOBJ resumeable enumerator.  During construction it will get a handle to the target domain.  This domain handle will be released in the NT_MACHINE_ENUM destructor.
TRIPLE_SERVER_ENUM is somewhat unique.  During the processing of its GetInfo() method, it will create an NT_MACHINE_ENUM, a USER0_ENUM, and a SERVER1_ENUM.  Information from these three objects will be combined & regurgitated into the final server list.3.4.1	NT_MACHINE_ENUM classesNT_MACHINE_ENUM NT_MACHINE_ENUMLM_RESUME_ENUM};  // class NT_MACHINE_ENUM

NT_MACHINE_ENUM_OBJ NT_MACHINE_ENUM_OBJENUM_OBJ_BASE};  // class NT_MACHINE_ENUM_OBJ3.4.2	TRIPLE_SERVER_ENUM classesTRIPLE_SERVER_ENUMTRIPLE_SERVER_ENUM : public LOC_LM_ENUM};  // class TRIPLE_SERVER_ENUM
TRIPLE_SERVER_ENUM_OBJTRIPLE_SERVER_ENUM_OBJ : public ENUM_OBJ_BASE};  // class TRIPLE_SERVER_ENUM_OBJ

public:
	NT_MACHINE_ENUM( const TCHAR * pszDomainName,
                       const TCHAR * pszPrimaryName = NULL );
               y  #  (     h    -ÅMB            
        New Enumeration Strategy CDD %Server Manager SRVMGR SAM EnumerationWThis CDD decribes the new server enumeration strategy to be used by the Server Manager.Charles Keith Moore (KeithMo)Charl           / 3 = J i m o             E W f n   ι        z     ) * 7 < = > Z \ ^ _ q s v         N U b d f h  ƾ      h j o }     ο      " $ &                                                                                                               b7 9  o q z    G P  ι й   = m     \   % d f h     > j     $ C        b           {      ! 7 9       , W Y q          $   $    $   $    $   $ 8            $ T
The NT_MACHINE_ENUM constructor takes two arguments.  The first is the name of the target domain (i.e. "NTPROJECT").  The second, optional, argument is the name of the domain's Primary Controller.  If the Primary is not known, NULL may be passed for this argument and the domains's Primary will be determined automatically.
public:
	const DOMAIN_DISPLAY_MACHINE * QueryBufferPtr( VOID ) const;
	VOID SetBufferPtr( const DOMAIN_DISPLAY_MACHINE * pBuffer );

	ULONG QueryIndex( VOID ) const;
	ULONG QueryRID( VOID ) const;
	ULONG QueryAccountControl( VOID ) const;
	const TCHAR * QueryMachineName( VOID ) const;
	const TCHAR * QueryComment( VOID ) const;
	

The QueryBufferPtr() and SetBufferPtr() methods allow easy access to the ENUM_OBJ's buffer by using properly casted pointers.
The QueryIndex(), QueryRID(), QueryAccountControl(), QueryMachineName(), and QueryComment() methods return the various fields of the DOMAIN_DISPLAY_MACHINE strcutre.  These methods correspond to the Index, Rid, AccountControl, Machine, and Comment fields respectively.	TRIPLE_SERVER_ENUM( const TCHAR * pszDomainName,
                          const TCHAR * pszPrimaryName = NULL );

The TRIPLE_SERVER_ENUM constructor takes two arguments.  The first is the name of the target domain (i.e. "NTPROJECT").  The second, optional, argument is the name of the domain's Primary Controller.  If the Primary is not known, NULL may be passed for this argument and the domains's Primary will be determined automatically.	const DOMAIN_DISPLAY_MACHINE * QueryBufferPtr( VOID ) const;
	VOID SetBufferPtr( const DOMAIN_DISPLAY_MACHINE * pBuffer );


The QueryBufferPtr() and SetBufferPtr() methods allow easy access to the ENUM_OBJ's buffer by using properly casted pointers.

TRIPLE_SERVER_BUFFERTRIPLE_SERVER_BUFFER

	const TCHAR * QueryName( VOID ) const;
	const TCHAR * QueryComment( VOID ) const;
	UINT QueryMajorVer( VOID ) const;
	UINT QueryMinorVer( VOID ) const;	enum TRIPLE_SERVER_TYPE QueryType( VOID ) const;
	enum TRIPLE_SERVER_ROLE QueryRole( VOID ) const;

March81992
113.4	Data Structures & Types
The following enum represents the type of a target server.
enum TRIPLE_SERVER_TYPE
{
    NtServerType,
    LmServerType
};

An object of this type will be NtServerType if the target server is an NT Server.  The value will be LmServerType if the target server is a LanMan Server.
The following enum represents the role of a target server.
enum TRIPLE_SERVER_ROLE
{
    PrimaryRole,
    ServerRole,
    WkstaRole,
    UnknownRole
};

The first three values correspond to the NT machine types of Primary, Server, and Workstation.  For LanMan Servers, these values will correspond to the PDC, BDC/Member, and Workstation.  The UnknownRole value is used for servers whose role is not yet known.
The following data structure is used when merging the NT_SERVERS and LM_SERVERS lists into the KNOWN_SERVERS list:
typedef struct _KNOWN_SERVER_INFO
{
    const TCHAR             * pszName;
    enum TRIPLE_SERVER_TYPE   ServerType;
    enum TRIPLE_SERVER_ROLE   ServerRole;

} KNOWN_SERVER_INFO;

The pszName field points to the name of the target server.  The ServerType and ServerRole fields contain the target server's type (NtServer or LmServer) and role (PrimaryRole, ServerRole, WkstaRole, or UnknownRole).
The following structure is used when merging the KNOWN_SERVERS and BROWSER_SERVERS lists into the ALL_SERVERS list:
typedef struct _TRIPLE_SERVER_INFO
{
    const TCHAR             * pszName;
    const TCHAR             * pszComment;
    enum TRIPLE_SERVER_TYPE   ServerType;
    enum TRIPLE_SERVER_ROLE   ServerRole;

}; TRIPLE_SERVER_INFO;
55.                                5        INFO    INFO                        6
11ers whose role is not yet known (duh...).

The pszName and pszComment fields point to the target server's name and comment strings respectively.  The ServerType and ServerRole fields contain exactly what you would expect.
uu
11domain'scastdomain'scast
1March919929
1     O  Q  _              & A }          ` b            # $ & y {             / 4 5 7 9 K         , H J U W o q r s t x |                                                                                                                                           e                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 j*   ]         A  P  6  	        #  '  (  )  j*                       @ 1     @    N ]    `          	      
      
      
          C  Q                                  )  -  /         #  5  F  V  g  k  m  y        ;  f                   H  s                *  \            	  '  )  m          #  e  g           ?   B   d   f      !  "  I"  {"  "  "  #  #  [$  $  $  
%  H%  J%  v%  %  %  %  )&  _&  a&  &  &  '  0'  2'  X*  j*   $  $  $  $  $  $  $  $  $  $  $ $ $  $  $ $ $  $  $  $  $  $  $ $ $  $  $  $  $  $  $  $  $ $ $  $  $  $  $  $  $  $  $ $ $  $  $  $  $  $  $  $  $  $ $ $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $ $ $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $  $ $ $ $ $B                   &         
    7      V Times 	Symbol " Helvetica 
1 Courier 0 elite 0 prestige   lettergothic 0 gothicPS 1 LinePrinter " Helv " AvantGarde " Helvetica-Narrow 0 metro 0 presentation 0 APL 0 OCRA 0 OCRB 
 Bookman  emperorPS  madaleine  zapf humanist 
 classic 
 roman f 
 roman g 
 roman h 
 Tms Rmn  NewCenturySchlbk  Palatino  souvenir  garamond  caledonia 	 bodini  university 	BScript @ scriptPS @ script c @ script d @ commercial script @ park avenue 
@ coronet @ script h @ greek  kana 	 hebrew 
 roman s 
 russian 
 roman u 
 roman v 
 roman w P narrator P emphasis B ZapfChancery 
P decor d P old english 
P decor f 
P decor g P cooper black 0 linedraw   math7   math8 RZapfDingbats   EAN 	  pcline 	  tech h 1MS LineDraw  Times New Roman 5 Courier New & Arial Wingdings  time new roman l                        	  {    j*  : 999             !                        N    A      	 DB J                             O  Q  _                      ^                        #  '  +  -  /          #  K  S  e  i  m  N  w  y            	      #  /  ?  W  Y                      =     0  <  X  d                                  (  *  .  >  \  b  q  {                            	  '  9  A  k  m  q                              #  '  O  V  e  g  k                    =   @   B   ^   b   d   f               @!  \!  ]!  ^!  _!  !  !  !  !  !  !  !  !  !  !  !  !  "  "  "  "  *"  O"  v"  {"  "  "  "  "  "  "  "  "  "  "  "  "  #  #  #  #  %#  '$  /$  Y$  [$  _$  q$  u$  $  $  $  $  $  $  $  $  $  $  $  
%  %  '%  5%  9%  F%  H%  J%  N%  v%  z%  %  %  %  %  %  %  %  %  %  %  %  %  &  )&  -&  J&  _&  a&  &  &  &  &  &  &  &  &  '  '  '  0'  2'  X*  Z*  `*  a*  d*  f*  h*  j*          #       %    &        :            ȡ   ʡ        ء   ڡ   f          
  x     Ů   (    Ʈ    9       R   S        &   A   }                              `   b                                     #   $   &   y   {                                       /   4   5   7   9   K                           ,   H   J   U   W      o      q        ϰ   r   s   Ӱ    3    5        A    _     l         o   t   {                                           7   5    9   H   L    A    M   \   l    `        E   x   Q   W   f   n   |            ι      ѹ                  >      n           m                           z                                                        3    5        @               *   7   <   =   >   Z   ^   _   q   s   v                             7   5           @       /   3   =                             &         U                  ?   h      k   o   }               b         ο            d   J   i        f   h      ƾ      ۾                #    %       M       T    W     Y     [    #  (     h    -ÅK%C     !          New Enumeration Strategy CDD %Server Manager SRVMGR SAM EnumerationWThis CDD decribes the new server enumeration strategy to be used by the Server Manager.Charles Keith Moore (KeithMo)Charles Keith Moore         
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\netui\admin\server\doc\repl.doc ===
ۥ- x@	   -             ]7  Y                  5                                  P  D P  DDT    DT    DT    DT    DT   RT   (U    (U    (U    (U   4U  
 >U  " (U    `U  +X  ( X   X    X    X    X   X  
 X   X   X    X    X    X    X    X   X  4 3Y   X    DT          X    X      " #                                                             
Windows/NT
Component Design Document
Replicator Administration
MS Confidential







EMBED MSDraw   \* mergeformat





date \@ "MMMM d, yyyy"December 7, 1991

Charles Keith Moore (KeithMo)
Microsoft

Revision 0.0

Revision History

0.0	09-Dec-1991	KeithMo	Created this document.
Issues Pending
1.	Overview
1.1	Definition of Component
This CDD describes the C++ class structures used to implement the Replicator Administration dialogs.
1.2	References
1.2.1	Functional Specifications
	o	??? Server Manager Function Spec ???
	o	??? Replicator Functional Spec ???
1.2.2	Related Component Design Documents

1.3	Design Overview
1.3.1	Problem Description
Describe the design of the Replicator Admin dialogs, with emphasis on the C++ class hierarchy, the necessary LanMan API, and the required LMOBJ classes.
1.3.2	Design Objectives
The design should maximize shared code where ever possible.  There is a great potential to share code between the Replicator Export Admin and the Replicator Import Admin.
1.3.3	Design constraints
The classes detailed in this document are private to the Server Manager.
2.	Development Tools, Platforms and Environment
2.1	Platforms
See the Server Manager Design Overview.
2.2	Presentation Tools 
See the Server Manager Design Overview.
2.3	Languages and Tools
See the Server Manager Design Overview.
2.4	Down Level Support
See the Server Manager Design Overview.
3.	Detailed Description of Operation
This section describes the detailed operation of the Replicator Admin dialogs.
3.1	Description
The main Replicator Admin dialog is referred to as the Replicator Control dialog.  This dialog allows the user to enable or disable the Import and Export sides of the Replicator.  Push buttons on the Replicator Control dialog lead to four additional dialogs:  the Replicator Import Config dialog, the Replicator Export Config dialog, the Replicator Import Directory dialog, and the Replicator Export Directory dialog.
There is a great potential to share code between the Import and Export Admin dialogs.  For each Replicator mode (Import or Export) there are two dialogs.  The Config dialog allows the user to tweak a number of semi-permanent parameters.  These parameters are typically set once (when the Replicator is initially installed) and never touched again.  The Directory dialog allows the user to specify exactly which directories are imported/exported.  These values will be changed more frequently than the values in the Config dialog.
The only real difference between the Import Admin dialogs and the Export Admin dialogs is that the Export Admin Config dialog contains four additional parameters which apply only to Replicator Export.
3.2	Class Hierarchy
The classes for the Replicator Control dialog are structured as follows:
	DIALOG_WINDOW		BASE_REPL_DIALOG			REPL_CONTROL_DIALOG
The classes for the Replicator Import/Export Config dialogs are structured as follows:
	DIALOG_WINDOW		BASE_REPL_DIALOG			BASE_REPL_CONFIG				REPL_IMPORT_CONFIG				REPL_EXPORT_CONFIG
The classes for the Replicator Import/Export Directory dialogs are structured as follows:
	DIALOG_WINDOW		BASE_REPL_DIALOG			BASE_REPL_DIR				REPL_IMPORT_DIR				REPL_EXPORT_DIR
The REPL_SERVICE class is used to manipulate the target server's replicator service.  This class is structured as follows:
	LM_SERVICE		UI_SERVICE			REPL_SERVICE
The REPL_DIR class represents a single instance of a replicated directory (either the Import or Export side).  The REPL_DIR_ENUM enumerates all of the replicated directories on the target server.  The REPL_DIR_ENUM_ITER iterates the enumerated directories.
3.3	General Operation
This section outlines the various events which occur during the creation and operation of the Replicator Admin.
When the Replicator Admin is invoked, a REPL_CONTROL_DIALOG is created.  This dialog contains check boxes for controlling the state of the Replicator Service.  The Import and Export sides of the Replicator Service may be independently enabled or disabled.  This dialog also contains four push buttons, two for Import and two for Export.  These buttons lead to the Import Config dialog, the Export Config dialog, the Import Directory dialog, and the Export Directory dialog.
When the Import Config dialog is invoked, a REPL_IMPORT_CONFIG is created.  This dialog contains an SLE for the Import Path, and a single-selection listbox containing the current Import List.  If an item is selected in the Import List, the Remove push button may be pressed to remove the item from the list.  When the Add button is pressed, the standard Set Focus dialog is invoked.  This allows the user to add either domains or servers to the Import List.
When the Export Config dialog is invoked, a REPL_EXPORT_CONFIG is created.  This dialog is a super set of the REPL_IMPORT_CONFIG.  This dialog contains four additional spin buttons.  These spin buttons allow the user to set the Interval, Guard Time, Pulse, and Random values.
When the Import Directory dialog is invoked, a REPL_IMPORT_DIR is created.  This dialog contains a single-selection listbox showing all of the top-level directories under the Import Path.  Each directory is shown with its corresponding Locked, Integrity, and Extent status.  If one of the listed directories is not currently being imported, the Locked, Integrity, and Extent fields are blanked.
When the Export Directory dialog is invoked, a REPL_EXPORT_DIR is created.  This dialog is a super set of the REPL_IMPORT_DIR.  This dialog contains an additional magic group.  This magic group allows the user to toggle the selected directory's state between Exported and Not Exported.  If the directory's state is Exported, the user can toggle the Integrity and Extent attributes.
3.4	Class Declarations
This section details the class declarations for each of the above described classes.
3.4.1	BASE_REPL_DIALOG class
The abstract BASE_REPL_DIALOG class contains all data & methods common to the Replicator Admin dialogs.
The BASE_REPL_DIALOG class is defined as follows:
class BASE_REPL_DIALOG : public DIALOG_WINDOW
{
protected:
    const CHAR * QueryServer( VOID );

public:
    BASE_REPL_DIALOG( const CHAR * pszResource,
                      HWND         hwndOwner,
                      SERVER_2   * pserver );
    ~BASE_REPL_DIALOG( VOID );

};  // class BASE_REPL_DIALOG

The BASE_REPL_DIALOG constructor receives the name of the resource (dialog template), and HWND representing the "owning" window, and a pointer to a properly constructed SERVER_2 object.
The QueryServer method allows derived subclasses to easily access the target server's name.
3.4.2	REPL_CONTROL_DIALOG class
The REPL_CONTROL_DIALOG class is defined as follows:
class REPL_CONTROL_DIALOG : public BASE_REPL_DIALOG
{
protected:
    virtual BOOL OnCommand( const CONTROL_EVENT & event );
    virtual BOOL OnOK( VOID );
    virtual ULONG QueryHelpContext( VOID );

public:
    REPL_CONTROL_DIALOG( HWND       hwndOwner,
                         SERVER_2 * pserver );
    ~REPL_CONTROL_DIALOG( VOID );

};  // class REPL_CONTROL_DIALOG

The REPL_CONTROL_DIALOG constructor receives an HWND representing the "owning" window, and a SERVER_2 * which points to a properly constructed SERVER_2 object.
The OnCommand method is used to enable/disable various buttons.  For example, the Import Dir and Import Config buttons are disabled after the user disables the Import side of the Replicator.
The OnOK method updates the state of the target server's Replicator Service.  This method is invoked when the user presses the OK button.
The QueryHelpContext method returns a context value used by WINHELP to locate the appropriate help text.  This method is invoked automatically by BLT when the user presses the Help button.
The OnCommand, OnOK, and QueryHelpContext methods are all used by the REPL_IMPORT_CONFIG, REPL_EXPORT_CONFIG, REPL_IMPORT_DIR, and REPL_EXPORT_DIR classes.  The description of these methods will not be repeated in the following sections describing these classes.
3.4.3	BASE_REPL_CONFIG class
The abstract BASE_REPL_CONFIG class contains all data & methods common to the Import/Export Config dialogs.  This class is currently empty.
The BASE_REPL_CONFIG class is defined as follows:
class BASE_REPL_CONFIG : public BASE_REPL_DIALOG
{
public:
    BASE_REPL_CONFIG( const CHAR * pszResource,
                      HWND         hwndOwner,
                      SERVER_2   * pserver );
    ~BASE_REPL_CONFIG( VOID );

};  // class BASE_REPL_CONFIG

The BASE_REPL_CONFIG constructor receives the name of the resource (dialog template), and HWND representing the "owning" window, and a pointer to a properly constructed SERVER_2 object.
3.4.4	REPL_IMPORT_CONFIG class
The REPL_IMPORT_CONFIG class is defined as follows:
class REPL_IMPORT_CONFIG : public BASE_REPL_CONFIG
{
protected:
    virtual BOOL OnCommand( const CONTROL_EVENT & event );
    virtual BOOL OnOK( VOID );
    virtual ULONG QueryHelpContext( VOID );

public:
    REPL_IMPORT_CONFIG( HWND       hwndOwner,
                        SERVER_2 * pserver );
    ~REPL_IMPORT_CONFIG( VOID );

};  // class REPL_IMPORT_CONFIG

The REPL_IMPORT_CONFIG constructor receives the name of the resource (dialog template), and HWND representing the "owning" window, and a pointer to a properly constructed SERVER_2 object.
3.4.5	REPL_EXPORT_CONFIG class
The REPL_EXPORT_CONFIG class is defined as follows:
class REPL_EXPORT_CONFIG : public BASE_REPL_CONFIG
{
protected:
    virtual BOOL OnCommand( const CONTROL_EVENT & event );
    virtual BOOL OnOK( VOID );
    virtual ULONG QueryHelpContext( VOID );

public:
    REPL_EXPORT_CONFIG( HWND       hwndOwner,
                        SERVER_2 * pserver );
    ~REPL_EXPORT_CONFIG( VOID );

};  // class REPL_EXPORT_CONFIG

The REPL_EXPORT_CONFIG constructor receives the name of the resource (dialog template), and HWND representing the "owning" window, and a pointer to a properly constructed SERVER_2 object.
3.4.6	BASE_REPL_DIR class
The abstract BASE_REPL_DIR class contains all data & methods common to the Import/Export Dir dialogs.  This class is currently empty.
The BASE_REPL_DIR class is defined as follows:
class BASE_REPL_DIR : public BASE_REPL_DIALOG
{
public:
    BASE_REPL_DIR( HWND       hwndOwner,
                   SERVER_2 * pserver );
    ~BASE_REPL_DIR( VOID );

};  // class BASE_REPL_DIR

The BASE_REPL_DIR constructor receives the name of the resource (dialog template), and HWND representing the "owning" window, and a pointer to a properly constructed SERVER_2 object.
3.4.7	REPL_IMPORT_DIR class
The REPL_IMPORT_DIR class is defined as follows:
class REPL_IMPORT_DIR : public BASE_REPL_DIR
{
protected:
    virtual BOOL OnCommand( const CONTROL_EVENT & event );
    virtual BOOL OnOK( VOID );
    virtual ULONG QueryHelpContext( VOID );

public:
    REPL_IMPORT_DIR( HWND       hwndOwner,
                     SERVER_2 * pserver );
    ~REPL_IMPORT_DIR( VOID );

};  // class REPL_IMPORT_DIR

The REPL_IMPORT_DIR constructor receives the name of the resource (dialog template), and HWND representing the "owning" window, and a pointer to a properly constructed SERVER_2 object.
3.4.8	REPL_EXPORT_DIR class
The REPL_EXPORT_DIR class is defined as follows:
class REPL_EXPORT_DIR : public BASE_REPL_DIR
{
protected:
    virtual BOOL OnCommand( const CONTROL_EVENT & event );
    virtual BOOL OnOK( VOID );
    virtual ULONG QueryHelpContext( VOID );

public:
    REPL_EXPORT_DIR( HWND       hwndOwner,
                     SERVER_2 * pserver );
    ~REPL_EXPORT_DIR( VOID );

};  // class REPL_EXPORT_DIR

The REPL_EXPORT_DIR constructor receives the name of the resource (dialog template), and HWND representing the "owning" window, and a pointer to a properly constructed SERVER_2 object.
3.4.9	REPL_SERVICE class
The REPL_SERVICE class is defined as follows:
class REPL_SERVICE : public UI_SERVICE
{
public:
    REPL_SERVICE( const OWNER_WINDOW * powner,
                  SERVER_2           * pserver );
    ~REPL_SERVICE( VOID );

    APIERR GetInfo( VOID );
    APIERR WriteInfo( VOID );

    ULONG QueryRole( VOID );
    VOID SetRole( ULONG ulNewRole );

    const CHAR * QueryImportPath( VOID );
    APIERR SetImportPath( const CHAR * pszNewImportPath );

    const CHAR * QueryExportPath( VOID );
    APIERR SetExportPath( const CHAR * pszNewExportPath );

    ULONG QueryInterval( VOID );
    APIERR SetInterval( ULONG ulNewInterval );

    ULONG QueryPulse( VOID );
    APIERR SetPulse( ULONG ulNewPulse );

    ULONG QueryGuardTime( VOID );
    APIERR SetGuardTime( ULONG ulNewGuardTime );

    ULONG QueryRandom( VOID );
    APIERR SetRandom( ULONG ulNewRandom );

};  // class REPL_SERVICE
3.5	Alternatives Considered and Tradeoffs

4.	Modular Decomposition and Tasking
4.1	Modules

4.2	Process/Thread Structure
N/A.
5.	Major Data Structures and Functions

5.1	Major Data Structures

5.2	Major Functions/Classes

6.	Internal Interfaces

6.1	Inter-component

6.2	Intra-component

7.	External Interfaces and Dependencies

7.1	Exported Interfaces 

7.2	Imported Interfaces

7.3	Dependencies

8.	Performance Issues

8.1	Performance Aims

8.2	Size

9.	Work Effort Estimates

9.1	Major Task List

10.	Testing Considerations

10.1	Instrumentation, Test Hooks

10.2	Desirable Test Utilities

10.3	Unit Tests
<<TBD>>
10.4	Expected Problem Areas 

10.4.1	System Test

10.4.2	Integration Test

10.4.3	Boundary Conditions

10.4.4	Memory Related

10.4.5	System/SubSystem Constraints

10.5	Others

PAGE1



u } @*  :  w-              x
                       	     Z        &      MrEd Microsoft Draw  Z   &  MrEd                                  P Times New Roman _                                              &  MrEd    (      0               	                           &  MrEd    0 0           -            - 	     $, ,    &  MrEd        p         -                   -      	     t   .                     Times New Roman      -    2
    Some appropriately   2
P   cool graphic   2

   goes here!             "System    -                 -                   -         '   '                  d4            MSDraw            w 	     Z        &      MrEd Microsoft Draw  Z   &  MrEd                                  P Times New Roman _                                              &  MrEd    (      0               	                           &  MrEd    0 0           -            - 	     $, ,    &  MrEd        p         -                   -      	     t   .                     Times New Roman      -    2
    Some appropriately   2
P   cool graphic   2

   goes here!             "System    -                 -                   -         '   '                          METAFILEPICT w  &h   wn 	     Z        &      MrEd Microsoft Draw  Z   &  MrEd                                  P Times New Roman _                                              &  MrEd    (      0               	                           &  MrEd    0 0           -            - 	     $, ,    &  MrEd        p         -                   -      	     t   .                     Times New Roman      -    2
    Some appropriately   2
P   cool graphic   2

   goes here!             "System    -                 -                   -         '   '                  2
P   cool graphic   2

   goes here!             "System    -                 -                   -         '   '                  d4            MSDraw            w 	     Z        &      MrEd Microsoft Draw  Z   &  MrEd                                  P Times New Roman _                              '  (  8  9  =    M7  N7  R7  S7  T7  U7  [7  ]7  HB                                                                                                                                                                                                                                                                                                                                                                                   x7  
F         ;                                
        ;  =  \  g  i  w  z              `  p            "  =             1  @  i            .  T      ľĨĒĨĨĨĒĨ    $B  $   $   $   $   $   $B   $m           $   $           $    $     $   $ &9'9(9)9   $Z&9'9(9)9 9  X	  k  5  J      &      B          r  M    -    8  P      -  `                0  _          ]        F  I  U              I  l  n      3    ~  <   D!  b!  ½½    $    $   $    $    $   $ 8  $     $    $   $    $   $    $   $   $    $    $ >b!  !  ""  T"  W"  `"  "  "  "  #  #  0#  2#  #  $  B$  v$  y$  $  $  $  %  %  %  H%  w%  %  %  %  %  {&  &  &  '  '  '  O'  o'  '  '  '  '  (  '(  )(  J(  L(  	)  $)  )  )  
*  *  *  @*  j*  *  *  *  *  _+  |+  +  +  +  +  ',  G,  t,  v,  ,  ,  ,  ,  ,  -  -  -  -  !.  O.  R.  ^.  .  .  .      $    $    $   $ 8  $     $    $ U.  .  .  /  J/  i/  k/  /  /  E0  _0  0  0  0  0  0  %1  A1  C1  `1  1  1  1  1  1  1  .2  02  [2  2  2  2  2  2  3  63  83  [3  3  3  3  3  3  3  #4  %4  K4  X4  Z4  x4  ~4  4  4  4  4  4  4  4  4  5  5  *5  ,5  U5  W5  q5  s5  5  5  5  5  5  5  5  5  5  5  5  5  6  6  .6       $   $B  $ 8  $  $    $    $    $   $ 8Q.6  06  R6  T6  s6  u6  6  6  6  6  6  6  6  6  6  6  7  7  <7  >7  K7  M7  W7  Y7  [7  ]7                                                                                                                                                                                                                                                                                                                                       $   $    $   $   $                    Example (Monofont)Bullet Level 1Bullet Level 2Bullet Level 3Bullet Level 4	Doc TitleRevision Notice/DateFigure TitleRevision HistoryCenter Bold
Plain Line B A       	  B        	  B        	  B        	  B        	 B        	 F       	 F       	 F       	 F       	 F A      	 F A      	 F A       	  F A      	   B  F A      	  F       	  F       	  F       	 F A       	 F A      	 F       	  F       	 F A      	  F       	
      h      <  $ 
      <  $ 
      <  8$ 
      <  $ 

      h                                                        
                    0       0       p0       @0       H 
      	       
       @   	            -                                    	
    5   ]7         ?  N        :    $  )  /  (3  ;4  /5  5                       i 2    :  N    v             	      
     d  #    L     `     u                 HB  "     b!  .  .6  ]7  # $ % & ' +
 Tms Rmn 	Symbol " Helv 
1 Courier 0 elite 0 prestige   lettergothic 0 gothicPS 1 LinePrinter " Helv " AvantGarde " Helvetica-Narrow 0 metro 0 presentation 0 APL 0 OCRA 0 OCRB 
 Bookman  emperorPS  madaleine  zapf humanist 
 classic 
 roman f 
 roman g 
 roman h 
 Tms Rmn  NewCenturySchlbk  Palatino  souvenir  garamond  caledonia 	 bodini  university 	BScript @ scriptPS @ script c @ script d @ commercial script @ park avenue 
@ coronet @ script h @ greek  kana 	 hebrew 
 roman s 
 russian 
 roman u 
 roman v 
 roman w P narrator P emphasis  ZapfChancery 
P decor d P old english 
P decor f 
P decor g P cooper black 0 linedraw   math7   math8 R ZapfDingbats   EAN 	  pcline 	  tech h 0 MS LineDraw  Times New Roman 5 Courier New c                  5  :              !  x  5      5     	.  	.     	.      x2  #  (     h    ZEK%, >    *          Replicator Admin CDD Replicator Repl CDD CDD for Replicator Admin dialogsCharles Keith MooreCharles Keith Moore         
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\netui\admin\server\doc\service.doc ===
ۥ- x@	   -               9                                                   0  D 0  DD4  
 N4   4    4    4   5   5    5    5    5   5  
 5   5    5  .9  ( 09   F9    F9    F9    F9    F9    F9    F9   H9    H9    H9    H9    H9    H9   f9  4 9  W f9    Z4         f9    f9                                                                    
Windows/NT
Component Design Document
Network Service Control User Interface
MS Confidential







EMBED MSDraw   \* mergeformat





date \@ "MMMM d, yyyy"January 8, 1992

Charles Keith Moore (KeithMo)
Microsoft

Revision 0.0

Revision History

0.0	09-Jan-1991	KeithMo	Created this document.
Issues Pending
1.	Overview
1.1	Definition of Component
This CDD describes the C++ classes used to implement the Network Service Control dialogs.
1.2	References
1.2.1	Functional Specifications
	o	??? Server Manager Functional Spec ???
	o	??? Service Controller Functional Spec ???
1.2.2	Related Component Design Documents
1.3	Design Overview
1.3.1	Problem Description
Describe the design of the Network Service Control dialogs, with emphasis on the C++ class hierarchy, the necessary API, and the required LMOBJ classes.
1.3.2	Design Objectives
Fast, small, efficient, bug-free, what else is new...
1.3.3	Design constraints
The classes detailed in this document are private to the Server Manager.
2.	Development Tools, Platforms and Environment
2.1	Platforms
See the Server Manager Design Overview.
2.2	Presentation Tools 
See the Server Manager Design Overview.
2.3	Languages and Tools
See the Server Manager Design Overview.
2.4	Down Level Support
See the Server Manager Design Overview.
3.	Detailed Description of Operation
This section describes the detailed operation of the Network Service Control dialogs.
3.1	Description
The main point of interaction for controlling network services is the Service Control dialog.  This dialog contains a listbox enumerating the installed services.  A number of push buttons are available to allow the user to stop, start, pause, and continue the various services as appropriate.  Some of these buttons may be disabled.  For instance, the Workstation service cannot be stopped.  Therefore, when the Workstation service is selected in the listbox, the Stop button is disabled.
If so enabled, a confirmation dialog is displayed whenever a service is to be stopped.  This gives the user the opportunity to wimp-out.  Stopping certain critical services (such as the Server and NetLogon services) is always confirmed.  In addition, the confirmation dialog for stopping the Server service contains a listbox enumerating the users with active connections to the target server.
To enumerate the services installed on the target server, a new LMOBJ enumerator is required.  This enumerator, SERVICE_ENUM, uses the Win32 service control API.
3.2	Class Hierarchy
The classes for the Service Control dialog are structured as follows:
	DIALOG_WINDOW		SERVICE_CONTROL_DLG
The classes for the service enumerator are structured as follows:
	LM_ENUM		SERVICE_ENUM
3.3	General Operation
This section outlines the various events that occur during the creation and operation of the Service Control dialog.
When the Service Control dialog is invoked, a SERVICE_CONTROL_DLG is created.  This dialog features a listbox that contains a list of installed services.  The listbox is filled using a SERVICE_ENUM enumerator and its associated iterator.  This dialog also contains six push buttons:  OK, Cancel, Start, Stop, Pause, and Continue.  The OK and Cancel buttons do the usual thing.  The Start, Stop, Pause, and Continue buttons are used to manipulate the selected service.  Note that some of these manipulation buttons may be disabled, depending on the current state of the service.  Also, some states are unavailable for some services.  For example, since the NT Workstation service cannot be stopped, the Stop button will always be disabled whenever the Workstation service is selected.
3.4	Class Declarations
This section details the class declarations for each of the above described classes.
3.4.1	SERVICE_CONTROL_DLG class
The SERVICE_CONTROL_DLG class is defined as follows:
class SERVICE_CONTROL_DLG : public DIALOG_WINDOW
{
protected:
    virtual BOOL OnCommand( const CONTROL_EVENT & event );
    virtual BOOL OnOK( VOID );
    virtual ULONG QueryHelpContext( VOID );

public:
    SERVICE_CONTROL_DLG( HWND       hwndOwner,
                         SERVER_2 * pserver );
    ~SERVICE_CONTROL_DLG( VOID );

};  // class SERVICE_CONTROL_DLG

The REPL_CONTROL_DIALOG constructor receives an HWND representing the "owning" window, and a SERVER_2 * which points to a properly constructed SERVER_2 object.
The OnCommand method is used to enable/disable various buttons.  For example, the Stop button is disabled whenever an unstoppable service is selected.
The OnOK method dismisses the Service Control dialog.
The QueryHelpContext method returns a context value used by WINHELP to locate the appropriate help text.  This method is invoked automatically by BLT when the user presses the Help button.
3.4.1	SERVICE_ENUM
The SERVICE_ENUM class is defined as follows:
class SERVICE_ENUM : public LM_ENUM
{
private:
    virtual APIERR CallAPI( BYTE ** ppbBuffer,
                            UINT  * pcEntriesRead );

public:
    SERVICE_ENUM( const CHAR * pszServer,
                  UINT         ServiceType = SERVICE_WIN32 );
    ~SERVICE_ENUM( VOID );

};  // class SERVICE_ENUM

The SERVICE_ENUM constructor receives the name of the target server, and a UINT specifying the type of services to enumerate.  The default ServiceType is SERVICE_WIN32, which specifies all "normal" services.  The other legal value is SERVICE_DRIVER, which is used to enumerate device drivers.
Note that the implementation of the CallAPI callback will be substantially different from that of other LMOBJ enumerators.  Specifically, since the Win32 network API do not perform buffer allocation, CallAPI must handle its own buffer manipulation.
3.5	Alternatives Considered and Tradeoffs
4.	Modular Decomposition and Tasking
4.1	Modules

4.2	Process/Thread Structure
N/A.
5.	Major Data Structures and Functions

5.1	Major Data Structures

5.2	Major Functions/Classes

6.	Internal Interfaces

6.1	Inter-component

6.2	Intra-component

7.	External Interfaces and Dependencies

7.1	Exported Interfaces 

7.2	Imported Interfaces

7.3	Dependencies

8.	Performance Issues

8.1	Performance Aims

8.2	Size

9.	Work Effort Estimates

9.1	Major Task List

10.	Testing Considerations

10.1	Instrumentation, Test Hooks

10.2	Desirable Test Utilities

10.3	Unit Tests
<<TBD>>
10.4	Expected Problem Areas 

10.4.1	System Test

10.4.2	Integration Test

10.4.3	Boundary Conditions

10.4.4	Memory Related

10.4.5	System/SubSystem Constraints

10.5	Others

In this context "installed" means that the appropriate service software is available on the server.  "Installed" does not necessarily mean that the service is actually running.

PAGE1



u  @u } @  :  w-              x
                       	     Z        &      MrEd Microsoft Draw  Z   &  MrEd                                  P Times New Roman _                                              &  MrEd    (      0               	                           &  MrEd    0 0           -            - 	     $, ,    &  MrEd        p         -                   -      	     t   .                     Times New Roman      -    2
    Some appropriately   2
P   cool graphic   2

   goes here!             "System    -                 -                   -         '   '                  en4            MSDraw            w 	     Z        &      MrEd Microsoft Draw  Z   &  MrEd                                  P Times New Roman _                                              &  MrEd    (      0               	                           &  MrEd    0 0           -            - 	     $, ,    &  MrEd        p         -                   -      	     t   .                     Times New Roman      -    2
    Some appropriately   2
P   cool graphic   2

   goes here!             "System    -                 -                   -         '   '                          METAFILEPICT w  &h   w/ 	     Z        &      MrEd Microsoft Draw  Z   &  MrEd                                  P Times New Roman _                                              &  MrEd    (      0               	                           &  MrEd    0 0           -            - 	     $, ,    &  MrEd        p         -                   -      	     t   .                     Times New Roman      -    2
    Some appropriately   2
P   cool graphic   2

   goes here!             "System    -                 -                   -         '   '                  2
P   cool graphic   2

   goes here!             "System    -                 -                   -         '   '                  en4            MSDraw                           4  5  D  E      
  
  T  U  	  
              '                                                                                                                                                                                                                                                                                                                             A                        @  
F                                                 G  I  h  s  u                    a  q          +  F      0  J            ?  X          ľĩęčĩĩĩč    $B   $   $   $   $   $  $B   $m                    $   $           $    $     $   $ &9'9(9)9   $Z&9'9(9)9 7  ?  P  ;	  
  i  ~      .  G  ^        S  t          '  G  t  v            &  (    a    V  j            1  3  <  g                ,  R  _  a          $B            $    $    $    $   $ 8  $     $   $    $    $   $   $    $           $   $ ;                    1  3  \  ^  x  z                               5  7  Y  [  z  |                          C  E  R  T    	                                                                                                                                                $                    $    $   $B  $   $ 9                    Example (Monofont)Bullet Level 1Bullet Level 2Bullet Level 3Bullet Level 4	Doc TitleRevision Notice/DateFigure TitleRevision HistoryCenter Bold
Plain Line B A       	  B        	  B        	  B        	  B        	 B        	 F       	 F       	 F       	 F       	 F A      	 F A      	 F A       	  F A      	   B  F A      	  F       	  F       	  F       	 F A       	 F A      	 F       	  F       	 F A      	  F       	
      h      <  $ 
      <  $ 
      <  8$ 
      <  $ 

      h                                                        
                    0       0       p0       @0       H 
      	       
       @   	            -                                    	
g                                                                                                                                          \        (        K  \  \  }  
    /  B  L                     0          B     0 .     S     t                             '              . Times 	Symbol " Helvetica 
1 Courier 0 elite 0 prestige   lettergothic 0 gothicPS 1 LinePrinter " Helv " AvantGarde " Helvetica-Narrow 0 metro 0 presentation 0 APL 0 OCRA 0 OCRB 
 Bookman  emperorPS  madaleine  zapf humanist 
 classic 
 roman f 
 roman g 
 roman h 
 Tms Rmn  NewCenturySchlbk  Palatino  souvenir  garamond  caledonia 	 bodini  university 	BScript @ scriptPS @ script c @ script d @ commercial script @ park avenue 
@ coronet @ script h @ greek  kana 	 hebrew 
 roman s 
 russian 
 roman u 
 roman v 
 roman w P narrator P emphasis B ZapfChancery 
P decor d P old english 
P decor f 
P decor g P cooper black 0 linedraw   math7   math8 RZapfDingbats   EAN 	  pcline 	  tech h 0 MS LineDraw  Times New Roman 5 Courier New p                    :              !                 W  #  (     h    De     0       9       W   Network Service Control UI CDD   Charles Keith MooreCharles Keith Moore         
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\netui\admin\server\doc\shared.doc ===
ۥ- x@	    -             S;  N                  9                                  F  T F  TTJ    TJ    TJ    TJ    TJ   lJ    J    J    J    J   J  
 J   J    J  M   M   M    M    M    M    M    M    M   M    M    M    M    M    M   N  4 DN   N    TJ          N    N                                                                    
LAN Manager User Interface
Component Design Document
Server Manager Shared Resources Subproperty Sheets
MS Confidential



date \@ "MMMM d, yyyy"

Charles Keith Moore
Microsoft
email:KeithMo



Revision 0.1



Revision History

0.0	18-Jun-1991	KeithMo	Created this document.
0.1	20-Jun-1991	KeithMo	General cleanup per comments by ChuckC.
Issues Pending
1.	Overview
1.1	Definition of Component
This CDD describes the Server Manager Subproperty Sheets for Shared Files, Shared Printers, and Shared Communication Ports.
1.2	References
1.2.1	Functional Specifications
	o	Lan Manager Server Manager Functional Specification.
1.2.2	Related Component Design Documents
	o	Server Manager Design Overview.
	o	Server Manager Property Sheet Design Overview.
1.3	Design Overview
1.3.1	Problem Description
Describe the design of the shared resource subproperty sheets, with emphasis on the C++ class hierarchy, the necessary LanMan API, and the required LMOBJ classes.
1.3.2	Design Objectives
The design should maximize shared code where ever possible.  There is a great potential for shared code in the shared resources subproperty sheets.
1.3.3	Design constraints
The classes detailed in this document are private to the Server Manager.
2.	Development Tools, Platforms and Environment
2.1	Platforms
See the Server Manager Design Overview.
2.2	Presentation Tools 
See the Server Manager Design Overview.
2.3	Languages and Tools
See the Server Manager Design Overview.
2.4	Down Level Support
See the Server Manager Design Overview.
3.	Detailed Description of Operation
This section will describe the detailed operation of the shared resources subproperty sheets.
3.1	Description
There is a great opportunity to share code between these similar subproperty sheets.  The Shared Printers and Shared Ports dialogs are practically identical, while the Shared Files dialog differs only slightly.
For an overview of the basic operation of these dialogs, see the Server Manager Functional Specification.
3.2	Class Hierarchy
The classes for the dialogs are structured as follows:
	RESOURCE_DIALOG		FILES_DIALOG		PRINTERS_DIALOG		PORTS_DIALOG
With the RESOURCE_DIALOG abstract class inheriting from DIALOG_WINDOW.  RESOURCE_DIALOG will contain a USERS_LISTBOX which enumerates the users connected to a specific sharepoint.
There are current plans to subclass DIALOG_WINDOW (or VALIDATED_WINDOW) into a PROPERTY_WINDOW and SUBPROPERTY_WINDOW.  RESOURCE_DIALOG will inherit from SUBPROPERTY_WINDOW when this class becomes available..

Most of the code for refreshing, selecting resources, and disconnecting users is located in the RESOURCE_DIALOG abstract class.
Each dialog (FILES_DIALOG, PRINTERS_DIALOG, and PORTS_DIALOG) contains a listbox derived from RESOURCE_LISTBOX.  The classes for the resource listboxes are structured as follows:
	RESOURCE_LISTBOX		FILES_LISTBOX		PRINTERS_LISTBOX		PORTS_LISTBOX
The RESOURCE_LISTBOX abstract class inherits from BLT_LISTBOX.
Each listbox (FILES_LISTBOX, PRINTERS_LISTBOX, and PORTS_LISTBOX) is constructed from a number of items derived from RESOURCE_LBI.  The classes for the individual listbox items in each listbox are structured as follows:
	RESOURCE_LBI		FILES_LBI		PRINTERS_LBI		PORTS_LBI
With the RESOURCE_LBI abstract class inheriting from LBI.
These parallel class hierarchies allow for an orthogonal interface across all three dialogs.
3.3	General Operation
This section will outline the various events which occur during the creation and operation of the Shared Files dialog.  The operation of the Shared Printers and Shared Ports dialog is similar; differences will be noted.
The application creates an instance of the FILES_DIALOG class.  The FILES_DIALOG class contains a FILES_LISTBOX object, two SLT objects, and a PUSH_BUTTON object.  During construction, FILES_DIALOG "hands" the FILES_LISTBOX to the RESOURCE_DIALOG class.  From this point on, the RESOURCE_DIALOG class is responsible for maintaining the FILES_LISTBOX object.
The PRINTERS_DIALOG and PORTS_DIALOG classes have neither the SLT objects nor the PUSH_BUTTON object.  The PRINTERS_DIALOG class contains only a PRINTERS_LISTBOX object.  The PORTS_DIALOG object contains only a PORTS_LISTBOX object.

The RESOURCE_DIALOG class contains a USERS_LISTBOX and a PUSH_BUTTON.  The USERS_LISTBOX enumerates the users connected to a particular resource.  The PUSH_BUTTON ("Disconnect") is used to disconnect the selected user(s) from the server.
FILES_DIALOG receives Refresh() notifications.  During Refresh() processing, the open files/file locks statistics are updated.  The "Opens..." button is either enabled or disabled, based on the number of open files.  After Refresh() processing, control is passed to RESOURCE_DIALOG::Refresh() so it can perform its refreshing.
PRINTERS_DIALOG and PORTS_DIALOG do not handle Refresh(), RESOURCE_DIALOG performs all necessary refreshing on their behalf.  FILES_DIALOG needs to take control during Refresh() so that it can update its file statistics.

FILES_DIALOG also receives OnCommand() notifications.  Here, it checks for the "Opens..." button.  If pressed, the OPEN_FILES dialog is invoked.  For all other commands, control is passed to RESOURCE_DIALOG::OnCommand().
PRINTERS_DIALOG and PORTS_DIALOG do not handle OnCommand(), RESOURCE_DIALOG performs all necessary processing on their behalf.  FILES_DIALOG needs to take control during OnCommmand() so that it can invoke the OPEN_FILES dialog.

The RESOURCE_DIALOG::OnCommand() method operates on three objects:  The RESOURCE_LISTBOX passed in from the derived class, the USERS_LISTBOX, and the "Disconnect" PUSH_BUTTON.  Whenever a SELCHANGE notification is received from the RESOURCE_LISTBOX, the USERS_LISTBOX is filled with the users connected to the selected resource.  Whenever a SELCHANGE notification is received from the USERS_LISTBOX, the Disconnect PUSH_BUTTON is enabled/disabled based on the number of selected users.  Whenever the PUSH_BUTTON is pressed, all selected users are disconnected (after verifying with the operator).
The RESOURCE_DIALOG::Refresh() method is responsible for updating the two listboxes.  First, the RESOURCE_LISTBOX is told to refresh with the currently available resources.  Then, the USERS_LISBOX is told to refresh with the users connected to the resource currently selected in RESOURCE_LISTBOX.  Each listbox is responsible for maintaining (as much as possible) the current selection state.
3.3	General Operation
The central point of operation is the RESOURCE_DIALOG class.  It can provide most of the required functionality for these dialogs, including complete control over the USERS_LISTBOX.  Indeed, the PRINTERS_DIALOG and PORTS_DIALOG classes merely create the appropriate listbox (PRINTERS_LISTBOX or PORTS_LISTBOX) and pass a pointer to this listbox to the RESOURCE_DIALOG constructor.  The RESOURCE_DIALOG class handles all remaining details.  The FILES_DIALOG dialog is complicated only slightly by the presence of the "Opens..." button and the open files/file locks statistics.
The RESOURCE_DIALOG constructor takes as one of its arguments a pointer to a RESOURCE_LISTBOX.  It is through this pointer that the appropriate SHARES/PRINTERS/PORTS_LISTBOX is manipulated.
In its OnCommand() method, RESOURCE_DIALOG performs the following steps:
	o  If cmd == SELCHANGE from the RESOURCE_LISTBOX, then refill the USERS_LISTBOX.
	o  If cmd == SELCHANGE from the USERS_LISTBOX, then either enable or disable the "Disconnect" button based on the number of selections.
	o  If cmd == from the DISCONNECT button, then warn the user, disconnect the uses selected in the USERS_LISTBOX, then refill the USERS_LISTBOX.
During Refresh() processing, RESOURCE_DIALOG will invoke the Refresh() methods in the RESOURCE_LISTBOX and the USERS_LISTBOX.
The RESOURCE_LISTBOX class provides two pure virtual methods which must be provided by the subclasses:
	o  Refresh() is invoked by RESOURCE_DIALOG whenever the listbox needs to be refreshed.  The listboxes are each responsible for "doing the right thing" regarding the maintenance of selected item(s) during the refresh.
	o  Fill() is invoked by RESOURCE_DIALOG whenever the listbox needs to remove all selections and invoke the enumeration.  This is typically called only once, after dialog object construction.
The RESOURCE_LBI class provides one pure virtual method which must be provided by the subclass:
	o  QueryResourceName() returns the name of the selected resource.  This is invoked by RESOURCE_DIALOG during processing of the SELCHANGE notifications.
3.4	Class Declarations
This section will detail the class declarations for each of the above described classes.
3.4.1	Dialog Classes
The RESOURCE_DIALOG class is defined as follows:
class RESOURCE_DIALOG : public DIALOG_WINDOW
{
protected:
    BOOL OnCommand( CID cid, ULONG lParam );

    VOID Refresh( VOID );

public:
    RESOURCE_DIALOG( OWNER_WINDOW     * powner,
                     LPSTR              pszResourceName,
                     RESOURCE_LISTBOX * plbResource,
                     CID                cidUsersListbox );

    ~RESOURCE_DIALOG();

};  // class RESOURCE_DIALOG

pszResourceName is the name of the dialog template in the program's .RES file.  The cidUsersListbox data member is the CID of the USERS_LISTBOX within the dialog.  Note that the code to perform listbox column alignment assumes a sequential numbering of USERS_LISTBOX and the three column headings above the listbox.
The FILES_DIALOG class is defined as follows:
class FILES_DIALOG : public RESOURCE_DIALOG
{
protected:
    BOOL OnCommand( WORD wID, DWORD lParam );

    VOID Refresh( VOID );

public:
    FILES_DIALOG( OWNER_WINDOW * powner );

};  // class FILES_DIALOG

The PRINTERS_DIALOG class is defined as follows:
class PRINTERS_DIALOG : public RESOURCE_DIALOG
{
public:
    PRINTERS_DIALOG( OWNER_WINDOW * powner );

};  // class PRINTERS_DIALOG

The PORTS_DIALOG class is defined as follows:
class PORTS_DIALOG : public RESOURCE_DIALOG
{
public:
    PORTS_DIALOG( OWNER_WINDOW * powner );

};  // class PORTS_DIALOG

Note that FILES_DIALOG is the only subclass to override the OnCommand() method.  This allows FILES_DIALOG to process the "Opens..." button.  Also note that FILES_DIALOG::OnCommand() must pass control to RESOURCE_DIALOG::OnCommand() for all unprocessed commands.  If this is not done, then RESOURCE_DIALOG cannot properly manage the listbox interaction.
3.4.2	Listbox Classes
The RESOURCE_LISTBOX class is defined as follows:
class RESOURCE_LISTBOX : public BLT_LISTBOX
{
protected:

    INT * QueryColumnWidths( VOID );

    PSZ QueryServer( VOID ) const;

public:
    RESOURCE_LISTBOX( OWNER_WINDOW * powner,
                      CID            cid,
                      USHORT         cColumns,
                      SERVER_1     * psrv1 );

    ~RESOURCE_LISTBOX();

    APIERR Refresh( VOID );

    virtual APIERR Fill( VOID ) = 0;

};  // class RESOURCE_LISTBOX

cid is the CID of the listbox.  cColumns is the number of columns in the listbox.  This class assumes that the listbox has column headings above.  It also assumes that the CIDs of the column headings are sequential, starting with cid+1.
psrv1 is a pointer to a SERVER_1 object.  It is through this object that the listboxes obtain the server name (see below).
The QueryColumnWidths() method returns a pointer to an array of INTs.  These INTs are the column widths to be used during listbox painting.  This array is generated at RESOURCE_LISTBOX construction time.
The QueryServer() method returns the name of the target server.
The pure virtual Fill() method must be redefined by the subclasses.  This method is responsible for performing the resource enumeration and filling the listbox.

The FILES_LISTBOX class is defined as follows:
class FILES_LISTBOX : public RESOURCE_LISTBOX
{
public:
    FILES_LISTBOX( OWNER_WINDOW * powner,
                    CID            cid,
                    SERVER_1     * psrv1 );

    ~FILES_LISTBOX();

    APIERR Fill( VOID );

};  // class FILES_LISTBOX

FILES_LISTBOX enumerates the available sharepoints using the LMOBJ SHARE2_ENUM enumerator class.
The PRINTERS_LISTBOX and PORTS_LISTBOX classes are defined similarly.  PRINTERS_LISTBOX will require a new LMOBJ class for performing printer queue enumeration.  PORTS_LISTBOX will require a new LMOBJ class for performing communications queue enumeration.
3.5	Alternatives Considered and Tradeoffs
<<<Add discussion of parent-class/contained-object constructor synchronization issues.>>>
4.	Modular Decomposition and Tasking
4.1	Modules

4.2	Process/Thread Structure
N/A.
5.	Major Data Structures and Functions

5.1	Major Data Structures

5.2	Major Functions/Classes

6.	Internal Interfaces

6.1	Inter-component

6.2	Intra-component

7.	External Interfaces and Dependencies
Two new LMOBJ classes must be defined for these dialogs:
	o	An enumerator/iterator pair for printer queue enumeration.
	o	An enumerator/iterator pair for comm queue enumeration.
7.1	Exported Interfaces 

7.2	Imported Interfaces

7.3	Dependencies

8.	Performance Issues
The current architecture for BLT_LISTBOXs encourages the design of LBI items independent of the owning listbox.  For maximum display refresh speed, much of the required LBI data can be stored in the owning listbox.  For example, each LBI contains an icon.  These icons can be loaded in the listbox constructor, then accessed from the individual LBI items.
8.1	Performance Aims

8.2	Size

9.	Work Effort Estimates
Work will begin with the implementation of the FILES_DIALOG dialog.  For this dialog to work, all major pieces must be functioning.  Implementing this dialog will also point out any deficiencies in the current design.  After the FILES_DIALOG dialog has been implemented, the PRINTERS_DIALOG and PORTS_DIALOG dialog implementation should require only minimal work.
9.1	Major Task List

10.	Testing Considerations
Because these dialogs are by their very nature interactive, all unit tests must be performed manually.
10.1	Instrumentation, Test Hooks

10.2	Desirable Test Utilities

10.3	Unit Tests
<<TBD>>
10.4	Expected Problem Areas 
Probably the most bizarre code in this system deals with refresh.  Refreshing a single selection listbox, while maintaining the relatively display position of the current selection, is somewhat tedious.  Refreshing a multiple selection listbox is a nightmare.
10.4.1	System Test

10.4.2	Integration Test

10.4.3	Boundary Conditions

10.4.4	Memory Related

10.4.5	System/SubSystem Constraints

10.5	Others

PAGE



u  @u } @
<<TBD>>
10.4	Expected Problem Areas 
Probably the most bizarre code in this system deals with refresh.  Refreshing a single selecti            $*  (*  E;  F;  J;  K;  Q;  S;  z;                                                                                                                                                                                                                                                                                                                                                                                                                                                                           5  @  O  Q  S  U  c  e  g  j  |  ~             +          <  `        g      /  y          $  =  f  ~      ,  =  	  |	  	  	  
  
            O  ,  ý彷彷ý         8                                               $    $.   $           $    $   
  $ H    C,  b          V  @  B  1  y  W  Y  7      t      V    _    <    L      !  P"  "  K#  c#  #  #  $  3$  6$  B$  p$  r$  $  $  $  $  %  9%  u%  w%  %  %  %  %  &  '  K'  N'  Z'  '  '  '  '  '  '  '  '  '  .(  ^(  a(  j(  (  (  (  (  (  )  )  #)  O)  Q)  l)                  8                                      8               Pl)  n)  *  *  +  G+  J+  V+  X+  ~+  +  +  +  +  +  ,  8,  g,  i,  ,  ,  ,  ,  ,  ,  ,  ,  -  W.  $/  e/  0  	0  90  h0  k0  t0  0  0  0  0  1  1  *1  ,1  H1  J1  1  2  2  33  Y3  f3  h3  3  3  3  3  3  3  3  3  
4  4  !4  #4  84  :4  c4  4  4  5  25  45  M5  O5  a5  c5  z5                      8                      8                                Nz5  6  6  6  7  7  7  8  8  8  8  %9  G9  I9  h9  j9  {9  9  9  :  :  :  :  :  :  :  ;  ;  4;  6;  C;  E;  M;  O;  Q;  S;                                                                                                                                                                                                                                                                                                                      #                   Example (Monofont)Bullet Level 1Bullet Level 2Bullet Level 3Bullet Level 4	Doc TitleRevision Notice/DateFigure TitleRevision HistoryCenter Bold
Plain Line B        	  B        	  B        	  B        	  B        	 B        	 F       	 F       	 F       	 F       	 F       	 F       	 F        	  F       	   B        	  F       	  F       	  F       	  F       	 F        	 F       	 F       	  F       	 F       	  F       	
      h      <  $ 
      <  $ 
      <  8$ 
      <  $ 

      h                                                        
                          0       0       p0       @0       H 
      	       
       @   	            -                                   	
      9   S;   b;         9                 
        z;     ,  l)  z5  S;     ! "  Times New Roman 	Symbol & Arial 
1 Courier 0 elite 0 prestige   lettergothic 0 gothicPS 1 LinePrinter " Helv 0 AvantGarde   Helvetica-Narrow 0 metro 0 presentation 0 APL 0 OCRA 0 OCRB 
 Bookman  emperorPS  madaleine  zapf humanist 
 classic 
 roman f 
 roman g 
 roman h 
 Tms Rmn  NewCenturySchlbk  palatino  souvenir  garamond  caledonia 	 bodini  university 	BScript @ scriptPS @ script c @ script d @ commercial script @ park avenue 
@ coronet @ script h @ greek  kana 	 hebrew 
 roman s 
 russian 
 roman u 
 roman v 
 roman w P narrator P emphasis P ZapfChancery 
P decor d P old english 
P decor f 
P decor g P cooper black 0 linedraw   math7   math8 P ZapfDingbats   EAN 	  pcline 	  tech h 0 MS LineDraw       9            !                    #  (     h     %E             9          Shared Resources CDD /server manager subproperty shared resources cdd9LM Server Manager Shared Resources Subproperty Sheets CDDKeithMoCharles Keith Moore         
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\netui\admin\server\doc\property.txt ===
LAN Manager User Interface
                               Design Overview
                        Server Manager Property Sheet
                            Keith Moore (KeithMo)
                          Revision 0.1 21-Jun-1991



1.  SCOPE

    This document provides a general design overview of the Server Manager
    Property Sheet implementation.  It describes the class declarations,
    the flow of information, and the general algorithms used.


2.  REFERENCES

    LAN Manager 3.0 Server Manager Functional Specification

    LAN Manager Server Manager Subproperty Sheet CDD

    BLT Specification


3.  OVERVIEW

    The Server Manager Main Property Sheet (PS) is the central focus for
    the administration of server properties.  The PS allows the user to
    change the server comment on the target server.  In addition, the PS
    is the launching point for a number of Subproperty Sheets (SPS).  See
    the Server Manager Subproperty Sheet CDD for details.


4.  CLASS OVERVIEW

    The SERVER_PROPERTIES class implements the PS dialog.  It contains code
    for reading & writing the target server comment.  It displays a number
    of current usage statistics.  It also contains a button-bar for
    launching the subproperty sheets.

    SERVER_PROPERTIES is contained in a wrapper class, PROPERTY_SHEET.
    The PROPERTY_SHEET class is responsible for validating that the user
    has sufficient privilege to administer the target server.  Only if the
    user has sufficient privilege will the SERVER_PROPERTIES dialog be
    invoked.


5.  CLASS DETAILS

    This section details the interfaces to the above described classes.
    Note that only the public: and protected: sections of the class
    declarations are given.

    5.1	SERVER_PROPERTIES

	The SERVER_PROPERTIES class is declared as follows:

	class SERVER_PROPERTIES : public DIALOG_WINDOW
	{
	protected:
            BOOL OnCommand( CID cid, ULONG lParam );

            BOOL OnOK( VOID );

	public:
	    SERVER_PROPERTIES( HWND	  hWndOwner,
			       SERVER_2	* psrv2 );

	    ~SERVER_PROPERTIES();

	};  // class SERVER_PROPERTIES

	    Note:  There are current plans to subclass DIALOG_WINDOW
	    (or VALIDATED_WINDOW) into PROPERTY_WINDOW and
	    SUBPROPERTY_WINDOW.  SERVER_PROPERTIES will inherit from
	    PROPERTY_WINDOW when this class becomes available.

        The OnCommand() method is responsible for handling all action
        items from the Graphical Button Bar.

        OnOK() is responsible for updating all information at the server,
        including the dreaded domain role transitions.

	    Note:  There will be a Refresh() method provided when
	    the design for dialog refresh is stable.


    5.2	PROPERTY_SHEET

	The PROPERTY_SHEET class is declared as follows:

	class PROPERTY_SHEET
	{
	public:
	    PROPERTY_SHEET( HWND       hWndOwner,
			    SERVER_2 * psrv2 );

	    ~PROPERTY_SHEET();

	};  // class PROPERTY_SHEET

	PROPERTY_SHEET is just a wrapper for the SERVER_PROPERTIES class.


6.  OPERATION

    After the user indicates that a property sheet should be invoked, the
    following steps are performed:

        The Server Manager Main Window (SrvMain) constructs a SERVER_2
	using the name of the selected server.  Note that this object
	is simply constructed.  None of this objects methods (including
	GetInfo()) are invoked by SrvMain.

        SrvMain creates a PROPERTY_SHEET object, passing to the
        constructor an HWND window handle to the main window and a
	pointer to the newly created SERVER_2 object.

    The PROPERTY_SHEET class performs the following operations:

	Invoking the SERVER_2 object's GetInfo() method will issue a
	level 2 NetServerGetInfo() API.  Since this infolevel requires
	admin privileges, the result of this method is used for privilege
	verification.  If the user has insufficient privilege, an
	appropriate error message is displayed and the PROPERTY_SHEET
	constructor is terminated.  If the GetInfo() method fails for
	any other reason (server malfunction??) then an appropriate error
	message is displayed and the PROPERTY_SHEET constructor is
	terminated.

	    Note:  What about share level servers?  The current
	    Server Manager Functional Specification does not address
	    share level servers.

	At this point, we know that the server exists, is responding
	properly to API, and the user has admin privileges.

	PROPERTY_SHEET now creats a SERVER_PROPERTIES class, passing
	to the constructer the HWND and SERVER_2 pointer it received
	from SrvMain.

    The SINGLE_PROPERTIES class performs the following steps:

        Retrieve all necessary information from the server.  The
        major/minor version numbers and server comment are retrieved
        from a SERVER_1 LMOBJ object.  The domain role is retrieved
        from a SERVER_2 LMOBJ object.

	    Note:  The LMOBJ specs state that SERVER_2 should inherit
	    directly from SERVER_1.  Currently, they both inherit
	    from the COMPUTER class.  If SERVER_2 was redesigned to
	    inherit from SERVER_1, then SERVER_PROPERTIES could
	    retrieve all of its information from a SERVER_2 object.

        Setup the graphical button bar.

        Display all "dynamic" data (data that can be refreshed during
        the lifetime of the dialog).  This data is retrieved via the
        function GetCurrentUsage() in PROPUTIL.C.  This module will
        eventually be converted to C++ as the necessary classes are
        created.  The following API are used for retrieving the
	current usage statistics:

	    NetFileEnum2()	- Open Files, File Locks,
				  Open Named Pipes
	    NetSessionEnum()	- Sessions
	    NetCharDevQEnum()	- Open Comm Ports
	    DosPrintQEnum()	- Print Jobs

        During OnOK() processing, SERVER_PROPERTIES::WriteInfoToServer()
        is invoked to update the server comment.  If a domain role
        transition was requested, this is performed next after displaying
        an appropriate warning message popup.


7.  OPEN ISSUES

    Servers running share level security.

    Updating LANMAN.INI on a server running LanMan < 2.1.

    Domain role transitions.


8.  REVISION HISTORY

    Rev	    Who         When            What
    ---	    ---		----            ----
    0.0	    KeithMo	12-Jun-1991	Created this document.

    0.1	    KeithMo	21-Jun-1991	Ripped out all references to DS and
					multiple-select properties.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\netui\admin\server\doc\rolechg.doc ===
Microsoft Word 6.0 Document MSWordDoc Word.Document.6C:\MSOFFICE\WINWORD\TEMPLATE\NORMAL.DOT Server Domain Role Transition CDD cdd domain role transition Windows/NT Server Domain Role Transition CDD Charles Keith Moore Tom Payne Microsoft Word 6.0Windows/NT Component Design Document Server Domain Role Transitions Microsoft Confidential EMBED PBrush \s  \* mergeformat date \@ "MMMM d, yyyy" September 18, 1991 Charles Keith Moore (KeithMo) Microsoft Revision 0.1 Revision History 12-Sep-1991 KeithMo Created this document. 18-Sep-1991 KeithMo Revised with comments from ChuckC. Issues Pending The new NT API for forcing a SAM replication has not yet been finalized. We're working with the security group to get an API for putting SAM into a "read only" mode.  This will prevent a nasty race condition which can cause user account updates to be lost during a server promotion. Overview Definition of Component This CDD details the procedures used to perform server domain role transitions.  These include user initiated server domain role transitions as well as those necessary for routine network maintenance. Definition of Terms The following terms will be used to describe the server domain role transition operations: Native NT Domain -- A domain consisting only of machines running NT. Mixed Domain -- A domain consisting of a Primary running NT, and any number of Servers and Workstations running either NT or OS/2. Down Level Domain -- A domain consisting only of machines running OS/2. Primary -- In a Native NT Domain or a Mixed Domain, this is the machine which runs NT and "owns" the SAM database.  This is the only machine that is allowed to modify the SAM database.  This machine is responsible for replicating the SAM database to the Servers and Workstations.  This machine is also the owner of the Logon Scripts, and is responsible for replicating these scripts to the Servers.  In a Down Level Domain, this is the machine that runs OS/2 and "owns" the UAS database.  This is normally referred to as a Primary Domain Controller (PDC). Server -- In a Native NT Domain or a Mixed Domain, this is any machine that runs NT and receives copies of the SAM database and Logon Scripts from the Primary.  Generally, these machines are good candidates for promotion to Primary.  In a Down Level Domain, this is any machine with runs OS/2 and receives copies of the UAS database and the Logon Scripts.  This is normally referred to as a Backup Domain Controller (BDC). Workstation --  In a Native NT Domain or a Mixed Domain, this is any machine that runs NT and receives copies of the SAM database from the Primary, but does not receive copies of the Logon Scripts.  Since this machine does not receive copies of the Logon Scripts, it is not generally a good candidate for promotion to Primary.  In a Down Level Domain, this is any machine that runs OS/2 and receives copies of the UAS database, but not the Logon Scripts.  This is normally referred to as a Member server. Standalone -- This is any machine running OS/2 that does not receive the UAS database from any Primary.  These machines do not actively participate in any domain.  Standalone machines are an artifact of LanMan 2.X.  NT has no similar concept. References 1.3.1 Functional Specifications Lan Manager Server Manager Functional Specification. 1.3.2 Related Component Design Documents Server Manager Design Overview. LM_SERVICE CDD. Design Overview 1.4.1 Problem Description Describe the procedures necessary to perform server domain role transitions.  Detail all aspects of safety precautions, error handling, and error recovery. 1.4.2 Design Objectives Above all else, these procedures must be robust, bulletproof, and fully recoverable.  The network is particularly vulnerable when role transitions are invoked against the Primary.  Since the Primary is the only machine allowed to modify the SAM (UAS) Database, all efforts must be made to minimize Primary down time. 1.4.3 Design constraints The initial client for these procedures will be the Server Manager admin tool.  However, the design should avoid any dependencies on the Server Manager so they may be reused by other applications. Development Tools, Platforms and Environment Platforms See the Server Manager Design Overview. Presentation Tools  See the Server Manager Design Overview. Languages and Tools See the Server Manager Design Overview. Down Level Support These procedures are primarily designed for manipulating Native NT Domains.  All procedures will function properly in Down Level Domains, with a possible reduction in robustness due to insufficient API.  When manipulating Mixed Domains, only those machines running NT may be targeted for domain role transition. Detailed Description of Operation This section describes the detailed operation of server domain role transitions. Description The procedures required for server domain role transitions are: SWAPSERVERROLES -- Swap the domain roles between two specific machines.  This makes promoting a machine to Primary slightly more "atomic".  This will be the major use for this module.  This procedure corresponds to the LM_DOMAIN::SetPrimary() method. RESYNCSERVER -- Resync a machine with its Primary.  A machine can get out of sync with its Primary during machine password updates.  This procedure will correct this condition by generating a new machine password and notifying both the machine and its primary.  This procedure corresponds to the LM_DOMAIN::ResyncServer() method. Class Hierarchy LM_DOMAIN SERVER_MODALS The LM_DOMAIN class represents a specific domain.  This class contains methods for querying and setting the Primary for the domain.  This class also contains a method for resynching a Server with the domain's Primary. The SERVER_MODALS class is used for manipulating a server's role in the domain.  This class contains methods for querying and setting the server's role. General Operation 3.3.1 SWAPSERVERROLES Swap the domain roles between two specific machines.  One of the target machines must be the current Primary.  NewPrimary is promoted to Primary, while OldPrimary is demoted to NewPrimary's original role. SWAPSERVERROLES( OldPrimary, NewPrimary ) If NT Domain, force NewPrimary to resync SAM database. If not successful, DESCRIPTION: NewPrimary could not resync its SAM database. DIAGNOSIS: NewPrimary is probably having difficulty communicating with its Primary (OldPrimary). RECOVERY: Abort the promotion. Return the error to the caller. End If. Stop NewPrimary's NetLogon service. If not successful, DESCRIPTION: NewPrimary could not stop its NetLogon service. DIAGNOSIS: NewPrimary is probably in a semi-functional state. RECOVERY: Abort the promotion. Return the error to the caller. End If. At this point, NewPrimary is unable to validate network logon requests. Change NewPrimary's UserModals to Primary If not successful, DESCRIPTION: NewPrimary was unable to change its UserModals settings. DIAGNOSIS: NewPrimary is probably in a semi-functional state. RECOVERY: Restart NewPrimary's NetLogon service, then abort the promotion. Goto Rollback1 End If. Stop OldPrimary's NetLogon service. If not successful, DESCRIPTION. OldPrimary could not stop its NetLogon service. DIAGNOSIS: We cannot continue the role swap without first stopping OldPrimary's NetLogon service. RECOVERY: Reset NewPrimary's UserModals, restart NewPrimary's NetLogon service, then abort the promotion. Goto Rollback2 End If. At this point, both NewPrimary and OldPrimary are unable to validate network logon requests.  In addition, OldPrimary is unable to accept requests for SAM modification. Start NewPrimary's NetLogon service. If not successful, DESCRIPTION: NewPrimary could not start its NetLogon service. DIAGNOSIS: Since NewPrimary's NetLogon service was running before we began this procedure, it is very unlikely that it would fail to restart.  One possible reason would be that another Primary was just started in this domain. RECOVERY: Restart OldPrimary's NetLogon service, reset NewPrimary's UserModals, restart NewPrimary's NetLogon service, then abort the promotion. Goto Rollback3 End If. At this point, NewPrimary is the active Primary in the domain.  NewPrimary can now validate network logon requests and modify the SAM database. Change OldPrimary's UserModals to Server If not successful, DESCRIPTION: OldPrimary was unable to change its UserModals settings. DIAGNOSIS: OldPrimary is probably in a semi- functional state.  This should leave OldPrimary's UserModals set to Primary. There's no point in trying to start the NetLogon service, since we've already promoted NewPrimary to Primary. RECOVERY: Notify the user, then terminate the remaining steps in this procedure.  Note that the network should be OK, as we've already started a Primary in this domain. Tell the user the bad news. Return some appropriate error to the caller. End If. Start OldPrimary's NetLogon service. If not successful, DESCRIPTION: OldPrimary could not start its NetLogon service. DIAGNOSIS: Since OldPrimary's NetLogon service was running before we began this procedure, it is very unlikely that it would fail to restart. RECOVERY: Notify the user, then terminate the remaining steps in this procedure.  Note that the network should be OK, as we've already started a Primary in this domain. Tell the user the bad news. Return some appropriate error to the caller. End If. Success! Return good status to the caller. Rollback steps.  These are the steps necessary for undoing any of the above operations after an error has occurred. Rollback3: Start OldPrimary's NetLogon service. If not successful, DESCRIPTION: OldPrimary could not start its NetLogon service. DIAGNOSIS: The domain is in a world of trouble now. NewPrimary refused to promote to Primary, and now OldPrimary is refusing to restart its NetLogon service. RECOVERY: Full recovery will probably require manual admin intervention. Tell the user the bad news. Return some appropriate error to the caller. End If. Fall through... Rollback2: Change NewPrimary's UserModals to Server. If not successful, DESCRIPTION: NewPrimary was unable to change its UserModals settings. DIAGNOSIS: NewPrimary is probably in a semi-functional state. RECOVERY: Restart NewPrimary's NetLogon service. This will probably fail, as NewPrimary's UserModals are probably still set to Primary. Tell the user the bad news. End If. Fall through... Rollback1: Start NewPrimary's NetLogon service. If not successful, DESCRIPTION: NewPrimary could not start its NetLogon service. DIAGNOSIS: Since NewPrimary's NetLogon service was running before we began this procedure, it is very unlikely that it would fail to restart.  One possible reason would be that its UserModals could were not properly reset to Server. RECOVERY: Notify the user. Tell the user the bad news. End If. Whew!! End SWAPSERVERROLES. 3.3.2 RESYNCSERVER Resync a machine with its Primary. RESYNCSERVER( Primary, HosedServer ) Stop HosedServer's NetLogon service. If not successful, DESCRIPTION: HosedServer was unable to stop its NetLogon service. DIAGNOSIS: HosedServer cannot be resynced without first stopping its NetLogon service. RECOVERY: Abort the resync. Return the error to the caller. End If. Save away HosedServer's current UserModals settings If not successful, DESCRIPTION: An error occurred retrieving HosedServer's UserModals settings. DIAGNOSIS: HosedServer is probably quite unstable. RECOVERY: Restart HosedServer's NetLogon service, then abort the resync. Goto Rollback1 End If. Change HosedServer's UserModals to Primary. If not successful, DESCRIPTION: HosedServer was unable to change its UserModals settings. DIAGNOSIS: Changing the domain role in the UserModals should only fail in the most dire of circumstances.  HosedServer is probably in a world of hurt. RECOVERY: Restart HosedServer's NetLogon service, then abort the resync. Goto Rollback1 End If. Generate RandomPwd // <<<TBD>>> Check that Primary is functioning properly. If not, DESCRIPTION: Primary is either down or unable to service network requests. DIAGNOSIS: Since Primary is down, we should avoid doing anything "permanent" to HosedServer until Primary's problems are corrected. RECOVERY: Reset the HosedServer's UserModals to their original values, restart HosedServer's NetLogon service, then abort the resync. Goto Rollback2 End If. Set HosedServer's password at HosedServer to RandomPwd If not successful, DESCRIPTION: HosedServer was unable to set its password. DIAGNOSIS: This is easily handled, since we've not yet committed any changes to either server. RECOVERY: Reset the HosedServer's UserModals to their original values, restart HosedServer's NetLogon service, then abort the resync. Goto Rollback2 End If. Set HosedServer's password at Primary to RandomPwd If not successful, DESCRIPTION: Primary was unable to accept HosedServer's new password. DIAGNOSIS: Now we really do need a resync.  We've set password at HosedServer, but we cannot set the password at Primary. RECOVERY: We should probably give the poor bastard an opportunity to retry the operation. Otherwise, we have no choice but to bag out. Goto Rollback2 End If. Reset HosedServer's UserModals to their original values. If not successful, DESCRIPTION: HosedServer was unable to reset its UserModals to their original values. DIAGNOSIS: HosedServer is probably in some bizarre semi-functional state. RECOVERY: Restart HosedServer's NetLogon service, then abort the resync. Goto Rollback1 End If. Start HosedServer's NetLogon service. If not successful, DESCRIPTION: HosedServer was unable to restart its NetLogon service. DIAGNOSIS: Now HosedServer is truly hosed. RECOVERY: No hope. Return the error to the caller. End If. Success! Return good status to the caller. Rollback steps.  These are the steps necessary for undoing any of the above operations after an error has occurred. Rollback2: Reset HosedServer's UserModals to their original values. If not successful, DESCRIPTION: HosedServer was unable to change its UserModals settings. DIAGNOSIS: HosedServer is probably in a semi-functional state. RECOVERY: Restart HosedServer's NetLogon service. This will probably fail, as HosedServer's UserModals are probably still set to Primary. Tell the user the bad news. End If. Fall through... Rollback1: Start HosedServer's NetLogon service. If not successful, DESCRIPTION: HosedServer could not start its NetLogon service. DIAGNOSIS: Since HosedServer's NetLogon service was running before we began this procedure, it is very unlikely that it would fail to restart.  One possible reason would be that its UserModals could were not properly reset to Server. RECOVERY: Notify the user. Tell the user the bad news. End If. Whew!! End RESYNCSERVER. Class Declarations 3.4.1 LM_DOMAIN class LM_DOMAIN : public BASE public: LM_DOMAIN( const CHAR * pszDomainName ); ~LM_DOMAIN(); const CHAR * QueryName(); const CHAR * QueryPrimary(); APIERR SetPrimary( const CHAR * pszNewPrimaryName ); APIERR ResyncServer( const CHAR * pszServerName ); // class LM_DOMAIN The LM_DOMAIN() constructor takes as its single argument the name of the target domain. The QueryName() method returns the target domain name. The QueryPrimary() method returns the name of the domain's Primary.  Note that this name is not stored in the LM_DOMAIN object.  This name must be retrieved from the network each time this method is invoked. The SetPrimary() method is responsible for promoting a specific Server to Primary, while demoting the current Primary to Server.  This may take a long time to execute... The ResyncServer() method resyncs a specific Server with the domain's Primary.  This is necessary after certain catastrophic failures occur during the Server's machine password update. SetPrimary() and ResyncServer() may need to return some form of extended status information to indicate such conditions as "both machines are now totally dead" or "the Server's NetLogon failed to restart". SetPrimary() and ResyncPrimary() may require additional parameters and methods so that progress indicators may be implemented. 3.4.2 SERVER_MODALS class SERVER_MODALS : public BASE public: SERVER_MODALS( const CHAR * pszServerName ); ~SERVER_MODALS(); APIERR QueryServerRole( PUSHORT pusRole ); APIERR SetServerRole( USHORT usRole ); // class SERVER_MODALS The SERVER_MODALS() constructor takes as its single argument the name of the target server. The QueryServerRole() method retrieves the server's role.  The role is stored in *pusRole. The SetServerRole() method sets the server's role to the value in usRole. Alternatives Considered and Tradeoffs <<<TBD>>> Modular Decomposition and Tasking <<<TBD>>> Modules <<<TBD>>> Process/Thread Structure <<<TBD>>> Major Data Structures and Functions <<<TBD>>> Major Data Structures <<<TBD>>> Major Functions/Classes <<<TBD>>> Internal Interfaces <<<TBD>>> Inter-component <<<TBD>>> Intra-component <<<TBD>>> External Interfaces and Dependencies <<<TBD>>> Exported Interfaces  <<<TBD>>> Imported Interfaces <<<TBD>>> Dependencies <<<TBD>>> Performance Issues <<<TBD>>> Performance Aims <<<TBD>>> <<<TBD>>> Work Effort Estimates <<<TBD>>> Major Task List <<<TBD>>> Testing Considerations <<<TBD>>> Instrumentation, Test Hooks <<<TBD>>> Desirable Test Utilities <<<TBD>>> Unit Tests <<<TBD>>> Expected Problem Areas  <<<TBD>>> 10.4.1 System Test <<<TBD>>> 10.4.2 Integration Test <<<TBD>>> 10.4.3 Boundary Conditions <<<TBD>>> 10.4.4 Memory Related <<<TBD>>> 10.4.5 System/SubSystem Constraints <<<TBD>>> Others <<<TBD>>> wwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwx wwwwwwx wwwwwwwwwwwwww wwwwwwx wwwwwwwwwwwww wwwwwwwwwwwwwwww wwwwwwwwwwwwp wwwwp wwwwwwwwwwwwww wwwwwwwwwwwwww wwwwwwwwwww wwwwwwwwwwwp wwwwwwwwwwwwww t,PCX Lotus 1-2-3 Graphr. PBrush 0 0 238 104 wwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwx wwwwwwx wwwwwwwwwwwwww wwwwwwx wwwwwwwwwwwww wwwwwwwwwwwwwwww wwwwwwwwwwwwp wwwwp wwwwwwwwwwwwww wwwwwwwwwwwwww wwwwwwwwwww wwwwwwwwwwwp wwwwwwwwwwwwww METAFILEPICT wwwwwwwwwwwwwwwwwwp wwwwwwwwwwwwwwwwwwwwwwwwwwp wwwwwwx wwwwwwx wwwwwwwwwwwwww wwwwwwx wwwwwwwwwwwww wwwwwwwwwwwwwwww wwwwwwwwwwwwp wwwwp wwwwwwwwwwwwww wwwwwwwwwwwwww wwwwwwwwwww wwwwwwwwwwwp wwwwwwwwwwwwww t,PCX Lotus 1-2-3 Graph Normal Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Heading 7 Default Paragraph Font Annotation Text TOC 4 TOC 3 TOC 2 TOC 1 Footer Footnote Text Normal Indent Example (Monofont) Bullet Level 1 Bullet Level 2 Bullet Level 3 Bullet Level 4 Doc Title Revision Notice/Date Figure Title Revision History Center Bold Plain Line Tom Payne1D:\NT\PRIVATE\NET\UI\ADMIN\SERVER\DOC\ROLECHG.DOC @\\PRT12088\\\explorer\ps Ne01: winspool \\PRT12088\\\explorer\ps Letter  N N N \\PRT12088\\\explorer\ps Letter  N N N Times New Roman Symbol Arial Times timesroman Courier !Server Domain Role Transition CDD cdd domain role transition,Windows/NT Server Domain Role Transition CDD Charles Keith Moore Tom Payne
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\netui\admin\server\doc\srvmain.txt ===
LAN Manager User Interface
                               Design Overview
                         Server Manager Main Window
                          Kevin LaChapelle (KevinL)
                            Revision 0.0 06/18/91



1.  SCOPE

    This document provides a general design overview of the Server Manager
    Main Window implementation.  It describes the C++ class hierarchy,
    the flow of information, and the general algorithms used.


2.  REFERENCES

    LAN Manager 3.0 Server Manager Functional Specification

    BLT Specification


3.  OVERVIEW

    The server manager main window lists available servers in a domain or a
    single server.  The focus of the main window can be changed from one of
    two places.  First, is the command line, second, is the set focus menu
    option.  The servers are sorted by name and display the server name,
    server role (Primary, Backup, Member, or Standalone), and server comment.
    The main window is multiple select for use with the Server->pause,
    stop, and continue menu items.  Although, when more than one item is
    selected the user will not be given access to the property sheet,
    as it only works in the single selection case.

4.  CLASS HEIRARCHY

    The C++ classes for implementing the main window is as follows:

        SM_ADMIN_APP
	LBITEM

    The SM_ADMIN_APP inherits directly from the ADMIN_APP class.
    SM_ADMIN_APP provides all of the main window functionality that is found
    in the Server Manager.  This class handles all of the Menu and message
    commands that are sent.  The main job of this class however is to 
    present the main listbox with servers and keep that information up
    to date via the OnRefresh method.

    LBITEM inherits from LBI and is the listbox entry class for the server
    manager's main window.  The class itself caches the common display maps
    and role strings ("Primary", "Backup", etc.) so as to conserve on memory
    usage.  The class provides methods for painting a line of information,
    comparing items, and returning the name of the server that is displayed.
    The data that is stored in the class MUST be initialized through the
    use of LBITEM::Init() and then destroyed using LBITEM::Term().

5.  CLASS DETAILS

    This section details the interfaces to the above described classes.
    Note that only the public: and protected: sections of the class
    declarations are given.

    5.1 SM_ADMIN_APP

        The SM_ADMIN_APP class is defined as follows:

            class SM_ADMIN_APP : public ADMIN_APP
            {
            protected:
            
                BLT_LISTBOX _MainWindowLB;
                virtual BOOL OnMenuCommand( MID midMenuItem ) ;
            
                virtual BOOL OnResize( const SIZE_EVENT & event );
                virtual BOOL OnCommand( const CONTROL_EVENT & event );
                virtual BOOL OnFocus( const FOCUS_EVENT & event );
            
            public:
            
                SM_ADMIN_APP() ;
            
                BOOL FillMainWindowLB();
            
                virtual void  OnPropertiesMenuSel( void );
            
                ULONG QueryHelpContext( enum HELP_OPTIONS helpOptions ) ;
            
            } ; // SM_ADMIN_APP class
            

        _MainWindowLB is the control (BLT_LISTBOX) that represents the 
	main window listbox.  It currently lives in SM_ADMIN_APP, but in
	the future it should become a class.  This split however, is
	waiting on the work to integrate some of this functionality
	into ADMIN_APP itself.

        OnMenuCommand() is called by ADMIN_APP when a menu item that
	ADMIN_APP does not support is selected.  This provides support
	for Server->Pause,Stop,Continue,Send Message and the Statistics
	menu.

        OnResize() is called by ADMIN_APP when the main window is resized.
	This method then resizes the main window listbox to match the new
	window size.

        OnCommand() is called by ADMIN_APP when a WM_COMMAND message is
	sent to the Server Manager.  Currently this method handles the 
	double click message to the Main Window.

        OnFocus() is called by ADMIN_APP when the main window gets the
	input focus.  This method simply passes on the focus to the main
	window listbox, so that the keyboard will manipulate the listbox.

        FillMainWindowLB() fills the main window listbox with the servers
	currently visible using LMOBJ::SERVER1_ENUM.  From this call we 
	get the server_info_1 structures which contain the server name,
	comment, and type.  The type field presents some interesting 
	problems.  They are outlined below:

	    LanManager version 2.0c and above include the 
	    bit SV_TYPE_DOMAIN_MEMBER from this we can determine 
	    whether a server is a member or standalone.  The 
	    problem is that when we are looking at a LM 2.0b or 
	    earlier server that information is not available.  So 
	    we have no way of determining what role the server 
	    is (member/standalone).  
	    
	    To further complicate matters there is no way to
	    distinguish what version of LM the server is running
	    (2.0, 2.0a, 2.0b, and 2.0c) as the server version
	    does not change across these releases.
	    
	    If the role is not determined by server_info_1.sv1_type,
	    then we can try to call an API that might shed more
	    light on the servers' domain role.  The problem with this
	    is that the API's that will give you this information:
	    
	    	NetUserModalsGet( Level 1 )
	    	NetServerGetInfo( Level 2 )
	    
	    require admin privilege.  Therefore, if the person
	    running this tool does not have admin privilege and the 
	    server is standalone(2.0c) or 
	              member or standalone(2.0b, 2.0a, 2.0)
	    there will be no way for the Server Manager to positively 
	    determine the actual domain role for that server.

        OnPropertiesMenuSel() invokes the property sheet outlined in
	<property.txt>.  Server Manager constructs a STRLIST
        object containing the name(s) of the target server(s).  These
        names *do* include the leading backslashes (\\).  SrvMain then
        creates a PROPERTY_SHEET object, passing to the constructor an 
        HWND window handle to the main window, and the STRLIST object.

        QueryHelpContext() is called by ADMIN_APP when the user invokes
	the help system.
            
    5.2 LBITEM

        The LBITEM class is defined as follows:

            class LBITEM : public LBI
            {
            protected:
                VOID Paint( BLT_LISTBOX * plb, HDC hdc, RECT * prect,
                            GUILTT_INFO * pGUILTT ) const;
                WCHAR QueryLeadingChar() const;
                INT Compare( const LBI * plbi ) const;
            
            public:
                LBITEM(CHAR * pszServer, INT dRole, CHAR * pszComment);
                ~LBITEM();
                CHAR * QueryServer();
                static BOOL Init();
                static VOID Term();

            } ; // LBITEM class

        Paint() creates a display table for the listbox entry and then
	paints it to the window.

        QueryLeadingChar() returns the first character of the listbox item.
	This actually returns the first letter of the server name.

        Compare() compares two listbox items, this is used for sorting
	the listbox.

        QueryServer() returns the server name that is stored in the 
	LBITEM.

        Init() initializes the private date in the LBITEM class.  The 
	information that is initialized is the display map dte's that 
	are constant across the life of the LBITEM.  Returns TRUE if
        successful, FALSE otherwise.

        Term() deletes the information that is created in the Init() call.

6.  OPERATION

    After the user indicates that a property sheet should be invoked, 
    via OnPropertiesMenuSel() the following steps are performed:

        The Server Manager Main Window (SrvMain) constructs a STRLIST
        object containing the name(s) of the target server(s).  These
        names *do* include the leading backslashes (\\).

        SrvMain creates a PROPERTY_SHEET object, passing to the
        constructor an HWND window handle to the main window, the
        STRLIST object, and an option domain name.  Note that the
        domain name is not currently used.

7.  OPEN ISSUES

    Refreshing the main window information.

    Determining server roles (Member/Standalone) on LanMan < 2.1.

    How much main window functionality will be moved into ADMIN_APP.

    What the impact of picking up the UM property sheet paradigm.


8.  REVISION HISTORY

    Who         When        What
    ---         ----        ----
    KevinL      06/18/1991  Created this document.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\netui\admin\server\doc\template.doc ===
ۥ- x@	  , -             6  V)                  	                                    f   ff"    f"    f"    f"    f"   t"  t "  h P#    P#    P#   \#  
 f#   P#    v#  V&  @ '   "'    "'    "'    "'    "'    "'    "'   $'    $'    $'  % I'   )(    )(   (  4 (   G(  C f"          G(    G(                                                                    
Windows NT
Component Design Document
<<component>>
Microsoft Confidential







EMBED MSDraw   \* mergeformat




date \@ "MMMM d, yyyy"March 5, 1992

Charles Keith Moore (KeithMo)
Microsoft

Revision 0.0

Revision History

0.0	05-Mar-1992	KeithMo	Created this document.
Issues Pending
1.	Overview
1.1	Definition of Component
This CDD describes the design of the <<component>>.
1.2	References
1.2.1	Functional Specifications
SYMBOL 183 \f "Symbol" \s 10 \h	<<some specification>>
1.2.2	Related Component Design Documents
SYMBOL 183 \f "Symbol" \s 10 \h	<<some specification>>
1.3	Design Overview
1.3.1	Problem Description
Describe the design of the <<component>>.
1.3.2	Design Objectives
<<design objectives>>
1.3.3	Design constraints
<<design constraints>>
2.	Development Tools, Platforms and Environment
2.1	Platforms
See <<something>>.
2.2	Presentation Tools 
See <<something>>.
2.3	Languages and Tools
See <<something>>.
2.4	Down Level Support
<<downlevel issues>>.
3.	Detailed Description of Operation
This section describes the detailed operation of the <<component>>.
3.1	Description
<<description>>
3.2	Class Hierarchy
The classes for the <<component>> are structured as follows:
	<<class>>		<<class>>			<<class>>		<<class>>
3.3	General Operation
<<details>>
3.4	Class Declarations
This section will detail the class declarations for each of the above described classes.
3.4.1	<<foo classes>
The <<foo>> class is defined as follows:
class <<foo>> : public <<foo_parent>>
{
};  // class <<foo>>
3.5	Alternatives Considered and Tradeoffs
<<alternatives & tradeoffs>>
4.	Modular Decomposition and Tasking
4.1	Modules

4.2	Process/Thread Structure
N/A.
5.	Major Data Structures and Functions

5.1	Major Data Structures

5.2	Major Functions/Classes

6.	Internal Interfaces

6.1	Inter-component

6.2	Intra-component

7.	External Interfaces and Dependencies

7.1	Exported Interfaces 

7.2	Imported Interfaces

7.3	Dependencies

8.	Performance Issues

8.1	Performance Aims

8.2	Size

9.	Work Effort Estimates

9.1	Major Task List

10.	Testing Considerations

10.1	Instrumentation, Test Hooks

10.2	Desirable Test Utilities

10.3	Unit Tests
<<TBD>>
10.4	Expected Problem Areas 

10.4.1	System Test

10.4.2	Integration Test

10.4.3	Boundary Conditions

10.4.4	Memory Related

10.4.5	System/SubSystem Constraints

10.5	Others

PAGE1



u } @    :  wn?              x
                       	     Z        &      MrEd Microsoft Draw  Z   &  MrEd                                           Helv      E .                                           &  MrEd    (      0               	                           &  MrEd    0 0           -            - 	     $, ,    &  MrEd        p         -                   -      	     t   .                     Times New Roman    -    2
    Some appropriately   2
P   cool graphic   2

   goes here!    	         "System    -                 -                   -         '   '                       v4            MSDraw            w 	     Z        &      MrEd Microsoft Draw  Z   &  MrEd                                           Helv      E .                                           &  MrEd    (      0               	                           &  MrEd    0 0           -            - 	     $, ,    &  MrEd        p         -                   -      	     t   .                     Times New Roman    -    2
    Some appropriately   2
P   cool graphic   2

   goes here!    	         "System    -                 -                   -         '   '                       ~~~~~~~~|~|~|||||||||}Post        METAFILEPICT w  &h   wn? 	     Z        &      MrEd Microsoft Draw  Z   &  MrEd                                           Helv      E .                                           &  MrEd    (      0               	                           &  MrEd    0 0           -            - 	     $, ,    &  MrEd        p         -                   -      	     t   .                     Times New Roman    -    2
    Some appropriately   2
P   cool graphic   2

   goes here!    	         "System    -                 -                   -         '   '                       

 !#$%&'()*,-./0123456789:;<=>?@ACDEFGIJKMNOPQRTUVWZ[\`abcdefghijklmnp  rstuvwxyz{|}~                                                                                                                                                                                                    	  
     !  .  /  V  W  v  w          &  '  +  ,  -  .  4  6     "  $                                                                                                                                                                                                                                                                                                                                                  P   
F                                             	  1  3  R  ]  _  m  p              %  5  V        	  $  O  h                2  K  _  w        
    0  ſůşşůůůŒů    $B   $   $   $   $%   $  $K   $           $   $           $     $    $   $ &9'9(9)9   $Z&9'9(9)9 90  n          5  K  u            $  1  3  Q  W                      	  	  .	  0	  J	  L	  e	  g	  y	  {	  	  	  	  	  	  	  	  	  	  	  
  	
  +
  -
  L
  N
  _
  h
  
  
  
  
  
  
  
  
  
  
      $  &  0  2  4  6  "  $            $   $B   $   $ 8  $     $   $   $   $    $ L                   Example (Monofont)Bullet Level 1Bullet Level 2Bullet Level 3Bullet Level 4	Doc TitleRevision Notice/DateFigure TitleRevision HistoryCenter Bold
Plain LineAlgorithm 1 B A       	  B C       	  B C       	  B C       	  B C       	 B C       	 F C      	 F C      	 F C      	 F C      	 F C      	 F C      	 F C       	  F A      	   B  F A      	  F       	  F       	  F       	 F C       	 F A      	 F C      	  F A      	 F A      	  F A      	   A
      h     <  $ 
     <  $ 
     <  8$ 
     <  $ 

     h                                                 
                   0x      0x      p0x      @0x      H 
      	      
      @   	                0.                                    	
    	  
 6         5  D    ~      	                        2    &  K     ^     r            	  	  9	  W	  p	  	  	  	   $ $ $ $  $  $  $  $  $                  $     0  $    V Times 	Symbol " Helvetica 
1 Courier 0 elite 0 prestige   lettergothic 0 gothicPS 1 LinePrinter " Helv " AvantGarde " Helvetica-Narrow 0 metro 0 presentation 0 APL 0 OCRA 0 OCRB 
 Bookman  emperorPS  madaleine  zapf humanist 
 classic 
 roman f 
 roman g 
 roman h 
 Tms Rmn  NewCenturySchlbk  Palatino  souvenir  garamond  caledonia 	 bodini  university 	BScript @ scriptPS @ script c @ script d @ commercial script @ park avenue 
@ coronet @ script h @ greek  kana 	 hebrew 
 roman s 
 russian 
 roman u 
 roman v 
 roman w P narrator P emphasis B ZapfChancery 
P decor d P old english 
P decor f 
P decor g P cooper black 0 linedraw   math7   math8 RZapfDingbats   EAN 	  pcline 	  tech h 1MS LineDraw  Times New Roman 5 Courier New & Arial Wingdings  time new roman ^   |   ~                :  Z  	  : 99             !   Apple LaserWriter Plus FILE: pscript Apple LaserWriter Plus          
UD  [    
od            ,                                                                   XZ                             e -         '   '                    	  @     	  	  	  	  	       "    &     2     4    #  (     h    -Å-Å            
        Template CDD CDDDThis is a template CDD to be used for the generation of future CDDs.Charles Keith Moore (KeithMo)Keith and Sonia Moore         
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\admin\netui\admin\server\doc\trust.doc ===
ۥ- !@	   -             /9                    7                                   :  ::   :   :   :   :  H              
 & "    H V  8  N   N   N   N   N   N   N  P   P   P + {  [    [   y  4   C y    :         y    y                                                                    
Windows NT
Component Design Document
Trusted Domain List Manipulation
Microsoft Confidential






EMBED MSDraw   \* mergeformat




date \@ "MMMM d, yyyy"April 1, 1992

Charles Keith Moore (KeithMo)
Microsoft

Revision 0.0

Revision History

0.0	01-Apr-1992	KeithMo	Created this document.
Issues Pending
1.	Overview
1.1	Definition of Component
This CDD describes the design of the Trusted Domain List Manipulation code for the NT User Manager.
1.2	References
1.2.1	Functional Specifications
SYMBOL 183 \f "Symbol" \s 10 \h	Windows NT Local Security Authority Protected Subsystem (LSA)
SYMBOL 183 \f "Symbol" \s 10 \h	NT Security Account Manager Protected Subsystem (SAM)
1.2.2	Related Component Design Documents
SYMBOL 183 \f "Symbol" \s 10 \h	User Manager Design Overview
1.3	Design Overview
1.3.1	Problem Description
Describe the design of the Trusted Domain List Manipulation component.  This component is responsible for creating new trust relationships between existing domains.  This component is also responsible for destroying existing trust relationships.
1.3.2	Design Objectives
As with any object oriented design, a proper object hierarchy is crucial.  The objects designed for this module must integrate cleanly into the existing LMOBJ and LSA/SAM object hierarchies.
1.3.3	Design constraints
The User Manager admin tool is the initial client for these classes.  However, the design should avoid any dependencies on the User Manager.  All classes must be reusable by other applications.
2.	Development Tools, Platforms and Environment
2.1	Platforms
See the User Manager Design Overview.
2.2	Presentation Tools 
See the User Manager Design Overview.
2.3	Languages and Tools
See the User Manager Design Overview.
2.4	Down Level Support
Trusted Domain List Manipulation is only applicable to NT domains.  Since LAN Man domains have no concept of a trusted domain list, this document is not applicable.
3.	Detailed Description of Operation
This section describes the detailed operation of the Trusted Domain List Manipulation.
3.1	Description
This section defines a few terms used in describing the fundamental operations of this component, then presents an overall description of each operation.
3.1.1.	Terms and Definitions
The terms used in describing the fundamental operations of this component are:
SYMBOL 183 \f "Symbol" \s 10 \h	Gullible Domain - A domain that trusts one or more other domains for authentication and name/id lookup requests.  The Gullible Domain is conceptually identical to the client side of a client/server relationship with the Trusted Domain.
SYMBOL 183 \f "Symbol" \s 10 \h	Trusted Domain - A domain entrusted to perform authentication and name/id lookup requests for another domain.  The Trusted Domain is conceptually identical to the server side of a client/server relationship with the Gullible Domain.
3.1.2.	Initializing the Gullible Domain side of the Trust Relationship
Each Gullible Domain maintains the following information for each associated Trusted Domain:
SYMBOL 183 \f "Symbol" \s 10 \h	An LsaTrustedDomain object containing the name and SID of the Trusted Domain.
SYMBOL 183 \f "Symbol" \s 10 \h	An LsaSecret object containing a unique password shared with the Trusted Domain.  The LsaSecret object's name is a function of Trusted Domain's name.  Since each domain name is unique, each LsaSecret is also unique.
3.1.3.	Initializing the Trusted Domain of the Trust Relationship
Each Trusted Domain maintains the following information for each associated Gullible Domain:
SYMBOL 183 \f "Symbol" \s 10 \h	A SAM user account containing the name and password for the Gullible Domain.  The name field is a function of Gullible Domain's name.  The password field must match the password stored in the Gullible Domain's associated LsaSecret object.
3.1.4	Destroying a Trust Relationship
Destroying a trust relationship is relatively easy.  Once the appropriate LsaTrustedDomain, LsaSecret, and SAM accounts are deleted, the trust relationship is destroyed.
3.1.5.	Domain Structure
Graphically, the data structures establishing a domain trust relationship are:
EMBED MSDraw   \* mergeformat
This figure shows that Gullible Domain's primary owns the LsaTrustedDomain and LsaSecret objects, and Trusted Domain's primary owns the SAM database.  In reality, each primary replicates these objects to all servers & workstations within each domain.  These additional lines of ownership have been omitted to simplify the figure.

The Gullible Domain contains one LsaTrustedDomain object per Trusted Domain and one LsaSecret object per Trusted Domain.  The LsaTrustedDomain object contains the name and SID of the Trusted Domain.  The LsaSecret object stores the associated password.
The Trusted Domain contains one SAM account per Gullible Domain.  This account contains the "mangled" name of the Gullible Domain and the associated password.
3.2	Class Hierarchy
The classes for this component build upon the existing LSA class hierarchy.  The class hierarchy is:
	BASE		NT_MEMORY			LSA_MEMORY				LSA_SECRET_VALUE_MEM				LSA_TRUSTED_DOMAIN_MEM		LSA_OBJECT			LSA_POLICY			LSA_SECRET			LSA_TRUSTED_DOMAIN		LM_RESUME_ENUM			TRUSTED_DOMAIN_ENUM		ENUM_OBJ_BASE			TRUSTED_DOMAIN_ENUM_OBJ
LSA_SECRET_VALUE_MEM, LSA_TRUSTED_DOMAIN_MEM, LSA_SECRET, LSA_TRUSTED_DOMAIN, TRUSTED_DOMAIN_ENUM, and TRUSTED_DOMAIN_ENUM_OBJ are new objects required by this component.
3.3	General Operation
The general algorithm for initializing the Gullible (client) side of the trust relationship is:
Find Gullible Domain's Primary Controller.  We'll refer to this server as "Primary".

Create an LSA_POLICY object for Primary.  This object is needed to create the required LSA_SECRET and LSA_TRUSTED_DOMAIN objects.

Create an LSA_SECRET object on Primary.  The name of this object is a function of Trusted Domain's name.  The value of this object is a password provided by the user.

The function used to map a domain name to an LsaSecret name is currently:	LsaSecretName = SSI_SECRET_PREFIX + DomainName + SSI_SECRET_POSTFIX.\NT\PRIVATE\INC\LOGONMSV.H contains the SSI_SECRET_* manifest constants.

Create an LSA_TRUSTED_DOMAIN object on Primary.

Creating an LSA_TRUSTED_DOMAIN requires the SID of the Trusted Domain.  How do we map Trusted Domain's name to its associated SID?  Ask ThomasPa for details!

Ta Da!  The Gullible Domain side of the trust relationship has been sucessfully initialized.

It might be useful (even required) to coerce Primary into performing an immediate replication of the new LSA objects to Gullible Domain's subordinate servers & workstations.

The general algorithm for initializing the Trusted (server) side of the trust relationship is:
Find Trusted Domain's Primary Controller.  We'll refer to this server as "Primary".

Create a new user account on Primary.  The name of this account is a function of Gullible Domain's name.  The password for this account is provided by the user and must match the password stored Gullible Domain's LSA_SECRET object.  The AccountControl field for this account must be USER_INTERDOMAIN_TRUST_ACCOUNT (defined in NTSAM.H).

The function used to map a domain name to an account name is currently:	AccountName = DomainName + SSI_ACCOUNT_NAME_POSTFIX.\NT\PRIVATE\NET\INC\SSI.H contains the SSI_ACOUNT_NAME_* manifest constants.

Ta Da!  The Trusted Domain side of the trust relationship has been sucessfully initialized.
3.4	Class Declarations
This section details the class declarations for each of the above described classes.
3.4.1	LSA_SECRET_VALUE_MEM class
The LSA_SECRET_VALUE_MEM class declaration is:
class LSA_SECRET_VALUE_MEM : public LSA_MEMORY
{
public:
    LSA_SECRET_VALUE_MEM( const UNICODE_STRING * pCurrentValue,
                          const UNICODE_STRING * pOldValue );
    ~LSA_SECRET_VALUE_MEM( VOID );

    const TCHAR * QueryCurrentValue( VOID ) const;
    const TCHAR * QueryOldValue( VOID ) const;

    APIERR SetCurrentValue( const TCHAR * pszCurrentValue );
    APIERR SetOldValue( const TCHAR * pszOldValue );

};  // class LSA_SECRET_VALUE_MEM

The LSA_SECRET_VALUE_MEM class contains the strings returned by the LsaQuerySecret API.  These strings contain the current and old values of the secret.
The constructor takes two const UNICODE_STRING pointers, one for the current value and one for the old value.  These must be the pointers returned from the LsaQuerySecret API.  Private NLS_STR objects maintain copies of these two strings.
The destructor is responsible for freeing the two value strings with the LsaFreeMemory API.
Alternative:  Since private NLS_STR objects maintain copies of these two secret strings anyway, we could potentially free the UNICODE_STRINGs at construct time.

The QueryCurrentValue, QueryOldValue, SetCurrentValue, and SetOldValue methods access and manipulate the values of the secret strings.
3.4.2	LSA_SECRET class
The LSA_SECRET class declaration is:
class LSA_SECRET : public LSA_OBJECT
{
public:
    LSA_SECRET( const LSA_POLICY & lsapol,
                const TCHAR      * pszSecretName,
                const TCHAR      * pszCurrentValue = NULL,
                const TCHAR      * pszOldValue = NULL );
    ~LSA_SECRET( VOID );

    const TCHAR * QueryName( VOID ) const;

    APIERR QueryValue( LSA_SECRET_VALUE_MEM * plsasvm,
                       LARGE_INTEGER        * pCurrentSetTime = NULL ) const;

    APIERR SetValue( const TCHAR * pszCurrentValue,
                     const TCHAR * pszOldValue = NULL ) const;

    APIERR Create( VOID );
    APIERR Delete( VOID );

};  // class LSA_SECRET

The LSA_SECRET class represent an LsaSecret object on the target server.
The constructor takes a reference to a properly constructed LSA_POLICY object representing the target server, and the name of the secret object.  Optionally, the constructor also takes the current & old secret values for this LsaSecret object.
The destructor is not particularly interesting at this time.
The QueryName method returns the name of the secret object.
The QueryValue and SetValue methods access and manipulate the values of the secret strings.
The Create and Delete methods create a new LsaSecret object and delete an existing LsaSecret object respectively (duh).
3.4.3	LSA_TRUSTED_DOMAN_MEM class
The LSA_TRUSTED_DOMAIN_MEM class declaration is:
class LSA_TRUSTED_DOMAIN_MEM : public LSA_MEMORY
{
public:
    LSA_TRUSTED_DOMAIN_MEM( PVOID pvBuffer = NULL,
                            ULONG cEntries = 0L );
    ~LSA_TRUSTED_DOMAIN_MEM( VOID );

    QueryControllerName( ULONG     i,
                         NLS_STR * pnlsControllerName );

};  // class LSA_TRUSTED_DOMAIN_MEM

The LSA_TRUSTED_DOMAIN_MEM class represents the data returned from the LSA_TRUSTED_DOMAIN::QueryControllerList() method.
The constructor takes a pointer to a buffer and a count of items in that buffer.
The QueryControllerName method returns the controller name for a specified index into the buffer.
3.4.4	LSA_TRUSTED_DOMAIN class
The LSA_TRUSTED_DOMAIN class declaration is:
class LSA_TRUSTED_DOMAIN : public LSA_OBJECT
{
public:
    LSA_TRUSTED_DOMAIN( const LSA_POLICY & lsapol,
                        const TCHAR      * pszDomainName,
                        const SID        * pSid );
    ~LSA_TRUSTED_DOMAIN( VOID );

    APIERR QueryAccountName( NLS_STR & nlsAccountName );
    APIERR QueryPosixOffset( ULONG * plPosixOffset );
    APIERR QueryControllerList( LSA_TRUSTED_DOMAIN_MEM * plsatdm );

    APIERR SetPosixOffset( ULONG lPosixOffset );
    APIERR SetControllerList( LSA_TRUSTED_DOMAIN_MEM * plsatdm );

};  // class LSA_TRUSTED_DOMAIN

The LSA_TRUSTED_DOMAIN class represents an LsaTrustedDomain object on the target server.
The constructor takes a reference to a properly constructed LSA_POLICY object representing the target server, the domain's name, and the domain's SID.
The QueryAccountName, QueryPosixOffset, QueryControllerList, SetPosixOffset, and SetControllerList methods access and manipulate various attributes of the LsaTrustedDomain object.
3.4.5	TRUSTED_DOMAIN_ENUM class
The TRUSTED_DOMAIN_ENUM class declaration is:
class TRUSTED_DOMAIN_ENUM : public LM_RESUME_ENUM
{
public:
    TRUSTED_DOMAIN_ENUM( const LSA_POLICY & lsapol );
    ~TRUSTED_DOMAIN_ENUM( VOID );

};  // class TRUSTED_DOMAIN_ENUM

The TRUSTED_DOMAIN_ENUM class is a wrapper around the LsaEnumerateTrustedDomains API.
The constructor takes a reference to a properly constructed LSA_POLICY object representing the target server.
3.4.6	TRUSTED_DOMAIN_ENUM_OBJ class
The TRUSTED_DOMAIN_ENUM_OBJ class declaration is:
class TRUSTED_DOMAIN_ENUM_