"M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList2.EnumSelectedItems(Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems@)">
      <summary>Returns an enumerator that will enumerate all the selected items, in order from last selected to first selected.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppEnum">[Out] A pointer to a pointer to an object of type <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItems" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList2.GetActiveProvider(Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider@)">
      <summary>Returns the currently active task provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppProvider">[Out] A pointer to a pointer to an object of type <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList2.GetCaretPos(Microsoft.VisualStudio.Shell.Interop.IVsTaskItem@)">
      <summary>Returns the item that currently has the caret.  This item is always among the selected items.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppItem">[Out] A pointer to a pointer to an object of type <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsEnumTaskItem" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList2.GetSelectionCount(System.Int32@)">
      <summary>Returns the count of selected items, which may be anywhere from zero to the total count of items in the task list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pnItems">[out] A pointer to an integer value containing the Count.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList2.RefreshAllProviders">
      <summary>Refreshes all tasks from all registered providers.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList2.RefreshOrAddTasks(System.UInt32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsTaskItem[])">
      <summary>Refreshes all cached information for the given tasks.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="vsProviderCookie">[in] The task provider ID given by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.RegisterTaskProvider(Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider,System.UInt32@)" /> method.</param>
      <param name="nTasks">[in] The number of tasks to refresh.</param>
      <param name="prgTasks">[in] An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskList" /> items to refresh.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList2.RemoveTasks(System.UInt32,System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsTaskItem[])">
      <summary>Removes tasks from the tasklist.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="vsProviderCookie">[in] The task provider ID given by the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList.RegisterTaskProvider(Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider,System.UInt32@)" /> method.</param>
      <param name="nTasks">[in] The number of tasks to remove</param>
      <param name="prgTasks">[in] An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskList" /> items to remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList2.SelectItems(System.Int32,Microsoft.VisualStudio.Shell.Interop.IVsTaskItem[],System.UInt32,System.UInt32)">
      <summary>Selects zero or more items.  Pass in zero for nItems to remove the selection entirely. All non-filtered items in pItems will be selected and the last one will become the caret item.  Filtered items are ignored.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="nItems">[in] Integer value containing Zero or the number of items selected. Set to zero to remove the selection entirely.</param>
      <param name="pItems">[in] An array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskList" /> objects.</param>
      <param name="tsfSelType">[in] An object of <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSTASKLISTSELECTIONTYPE" /> type.</param>
      <param name="tsspScrollPos">[in] An object of <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSTASKLISTSELECTIONSCROLLPOS" /> type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskList2.SetActiveProvider(System.Guid@)">
      <summary>Selects the provider currently displayed in the tasklist.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidProvider">[in] A Provider Identifier; an object of type REFGUID.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider3">
      <summary>Supports adding content to the Task View window. Defines the provider of information along with manipulating the window columns.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider3.GetColumn(System.Int32,Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN[])">
      <summary>Gets the definition of an indexed column (0 &lt;= iColumn &lt; nColumns)</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iColumn">[in] A value of type integer containing the Column Index.</param>
      <param name="pColumn">[out] A pointer to an array of objects of type VSTASKCOLUMN.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider3.GetColumnCount(System.Int32@)">
      <summary>Returns the total number of columns supported by this provider, including columns that are not visible by default.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pnColumns">[out] A pointer to an integer type containing the number of columns supported by the provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider3.GetProviderFlags(System.UInt32@)">
      <summary>Returns the behavior flags for this provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="tpfFlags">[out] A pointer to an object of type VSTASKPROVIDERFLAGS.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider3.GetProviderGuid(System.Guid@)">
      <summary>Returns a unique Identifier for this provider.  This is used to persist &amp; restore per-provider data managed by the task list, such as user customizations of column width &amp; order.  If it is not practical to assign a GUID to this provider (e.g. the provider is dynamically created at run-time and the identity cannot be preserved across VS sessions), you may return GUID_NULL.  However, you should be aware that certain functionality (such as UI settings persistence and the IVsTaskList2.SetActiveProvider method) will not work in that case.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidProvider">[out] A pointer to a Provider Identifier (an object of type GUID).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider3.GetProviderName(System.String@)">
      <summary>Returns a localized human-readable name for this data provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrName">[out] A pointer to a string containing the data provider human-readable name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider3.GetProviderToolbar(System.Guid@,System.UInt32@)">
      <summary>Returns a group GUID and toolbar ID indicating which toolbar should be displayed when this provider is active. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidGroup">[out] A pointer to a Group Identifier (an object of type GUID).</param>
      <param name="pdwID">[out] A pointer to an identifier (a value of unsigned integer type).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider3.GetSurrogateProviderGuid(System.Guid@)">
      <summary>If a provider implements this method, all its tasks will be listed under the surrogate provider in the list, as if they belong to the surrogate provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidProvider">[out] A pointer to a Provider Identifier (an object of type GUID).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider3.OnBeginTaskEdit(Microsoft.VisualStudio.Shell.Interop.IVsTaskItem)">
      <summary>Called when the user begins editing a task in-place.  Providers may want to avoid scrolling the tasklist or changing the selection during editing, since these actions can force in-place edit mode to be canceled abruptly.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pItem">[in] A pointer to an object of type IVsTaskItem.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTaskProvider3.OnEndTaskEdit(Microsoft.VisualStudio.Shell.Interop.IVsTaskItem,System.Int32,System.Int32@)">
      <summary>Called when the user finishes editing a task in-place.  fCommitChanges indicates whether the user chose to commit the changes or discard them.  This method may set *pfAllowChanges to FALSE to disallow the user from exiting edit mode.  If fCommitChanges is TRUE, the changes will have already been persisted down to the task item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pItem">[in] A pointer to an object of type IVsTaskItem.</param>
      <param name="fCommitChanges">[in] A Boolean value set to TRUE if the user chooses to commit the changes.</param>
      <param name="pfAllowChanges">[out] A Boolean value set to FALSE to disallow the user from exiting edit mode, or to TRUE if the changes were already persisted down to the task item.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog">
      <summary>Shows a dialog used while waiting for an action to end. The dialog is displayed on a separate, background thread to allow the environment to appear responsive even when busy. You can get an instance of this interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsThreadedWaitDialog" /> (SID_SVsThreadedWaitDialog) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog.EndWaitDialog(System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfCancelled">Operation was cancelled</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog.GiveTimeSlice(System.String,System.String,System.Int32,System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrUpdatedWaitMessage">[in] Can be null</param>
      <param name="bstrIfTruncateAppend">[in] Can be null, should be a short string e.g. L"..." or L"...\""</param>
      <param name="fDisableCancel">[in] Disable the button if the operation can no longer be cancelled. </param>
      <param name="pfCancelled">[out] </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog.StartWaitDialog(System.String,System.String,System.String,System.UInt32,System.Object,System.String)">
      <summary>Starts the Wait dialog.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrWaitCaption">[in] Caption text of the wait message box.</param>
      <param name="bstrWaitMessage">[in] Message text of the wait message box.</param>
      <param name="bstrIfTruncateAppend">[in] Can be null</param>
      <param name="dwFlags">[in] Display the Cancel button</param>
      <param name="varStatusBmpAnim">[in] Optional. Should be a VT_INT_PTR containing a valid BMP, or VT_NULL</param>
      <param name="bstrStatusBarText">[in] Can be null</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsThreadPool">
      <summary>Manages background operations in the environment.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadPool.ScheduleTask(System.UInt32,System.UInt32,System.UInt32)">
      <summary>Schedules a task to run.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTaskProc">[in] The environment explicitly casts this pointer to a PVsBackgroundTask_Function_Pointer prior to being called</param>
      <param name="pvParam">[in]</param>
      <param name="priority">[in] <see cref="F:Microsoft.VisualStudio.Shell.Interop.__VSBACKGROUNDTASKPRIORITY.VSBACKGROUNDTASKPRIORITY_STANDARD" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadPool.ScheduleWaitableTask(System.UInt32,System.UInt32,System.UInt32)">
      <summary>Schedules a task and a handle to wait on before running the task.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hWait">[in] HANDLE to wait upon</param>
      <param name="pTaskProc">[in] The environment explicitly casts this pointer to a PVsBackgroundTask_Function_Pointer prior to being called.</param>
      <param name="pvParam">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsThreadPool.UnscheduleWaitableTask(System.UInt32)">
      <summary>Removes a handle and task from the list of waitable tasks.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hWait">[in] HANDLE to remove.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3">
      <summary>Provides persistence and localization support for a Toolbox. Extends, but does not inherit from, <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolbox2" />. You can get an instance of the interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SVsToolbox" /> (SID_SVsToolbox) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetGeneralTabID(System.String@)">
      <summary>Gets the ID for the General tab.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrTabID">[out] The locale-invariant ID of the Toolbox tab.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetIDOfTab(System.String,System.String@)">
      <summary>Retrieves the canonical ID for the given localized name of the Toolbox tab.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszTabName">[in] The localized name of the Toolbox tab.</param>
      <param name="pbstrTabID">[out] The locale-invariant ID of the Toolbox tab.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetItemDisplayName(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.String@)">
      <summary>Gets the display name of an item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDO">An <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> interface to the item.</param>
      <param name="pbstrName">The name of the item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetItemID(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.String@)">
      <summary>Gets the unique ID of a item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDO">An <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> interface to the item.</param>
      <param name="pbstrID">The ID of the item. If the item is found, but has no ID then this values is null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetLastModifiedTime(Microsoft.VisualStudio.Shell.Interop.SYSTEMTIME[])">
      <summary>Returns the most recent time at which the Toolbox contents were modified.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pst">[out] A <see cref="T:Microsoft.VisualStudio.Shell.Interop.SYSTEMTIME" /> structure containing the most recent time at which the Toolbox contents were modified.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.GetTabOfID(System.String,System.String@)">
      <summary>Retrieves the localized name of a Toolbox tab, given its canonical ID.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszTabID">[in] The locale-invariant ID of the Toolbox tab.</param>
      <param name="pbstrTabName">[out] The localized name of the Toolbox tab.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolbox3.SetIDOfTab(System.String,System.String)">
      <summary>Sets the canonical ID for the given Toolbox tab.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszTabName">[in] The localized name of the Toolbox tab.</param>
      <param name="lpszTabID">[in] The locale-invariant ID of the Toolbox tab.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsToolboxActiveUserHook">
      <summary>Provides support for intercepting and modifying Toolbox interactions, including drag and drop.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxActiveUserHook.InterceptDataObject(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.OLE.Interop.IDataObject@)">
      <summary>This method is called by the Toolbox whenever one of its data objects participates in a drag-and-drop operation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIn">[in] An <see cref="T:System.Runtime.InteropServices.ComTypes.IDataObject" /> containing the object being dropped on the Toolbox user.</param>
      <param name="ppOut">[out] An <see cref="T:System.Runtime.InteropServices.ComTypes.IDataObject" /> containing a modified object which will be handled by the Toolbox user.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxActiveUserHook.ToolboxSelectionChanged(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>This method is called by the Toolbox whenever there is a change in which Toolbox item has been selected.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSelected">[in] An <see cref="T:System.Runtime.InteropServices.ComTypes.IDataObject" /> containing the currently selected Toolbox item.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider2">
      <summary>Provides support for additional Toolbox features. In particular, IVsToolboxDataProvider2 is used to implement Toolbox persistence through the vssettings feature. Users will save and retrieve such information through the Import/Export Settings command, found on the IDE's Tools menu.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider2.GetDisplayName(System.String@)">
      <summary>Retrieves the localized name of the data provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrName">[out] The localized name of the data provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider2.GetItemID(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.String@)">
      <summary>Used by the environment to retrieve and saves the canonical ID for the given Toolbox tab when a user selects the export option from the Import/Export Settings feature available on the IDE’s Tools menu.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDO">[in] The data object corresponding to the Toolbox item.</param>
      <param name="pbstrID">[out] The locale-invariant canonical ID of the Toolbox tab.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider2.GetItemTipInfo(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.String,Microsoft.VisualStudio.OLE.Interop.IPropertyBag)">
      <summary>Supplies ToolTip data for a Toolbox item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDO">[in] The data object corresponding to the Toolbox item.</param>
      <param name="lpszCurrentName">[in] The name of the Toolbox item as it is currently displayed on the Toolbox.</param>
      <param name="pStrings">[in] The COM object <see cref="T:Microsoft.VisualStudio.OLE.Interop.IPropertyBag" /> object containing the values that the ToolTip should display.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider2.GetPackageGUID(System.Guid@)">
      <summary>Retrieves the GUID of the VSPackage to which this data provider belongs.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidPkg">[out] The GUID of the VSPackage to which this data provider belongs.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider2.GetProfileData(Microsoft.VisualStudio.OLE.Interop.IDataObject,System.String@)">
      <summary>Obtains any extra information, if needed, about a Toolbox item which can be saved through the settings mechanism using the Import/Export Settings feature available on the IDE’ Tools menu.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDO">[in] The data object corresponding to the Toolbox item.</param>
      <param name="pbstrData">[out] A string containing all the extra information that would be needed to reconstitute the item when imported from Settings.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider2.GetUniqueID(System.Guid@)">
      <summary>Retrieves the unique ID for the given Toolbox tab.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidID">[out] The unique ID of the Toolbox tab.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider2.ReconstituteItem(System.String,System.String,System.String,Microsoft.VisualStudio.OLE.Interop.IDataObject@,Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO[])">
      <summary>Recreates a Toolbox item from data stored using the settings mechanism when a user chooses to retrieve settings using the Import/Export Settings feature available on the IDE’s Tools menu.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszCurrentName">[in] The current (localized) name of the Toolbox item.</param>
      <param name="lpszID">[in] The canonical ID of the Toolbox item.</param>
      <param name="lpszData">[in] A string containing any extra information needed to reconstitute the item.</param>
      <param name="ppDO">[out] A data object corresponding to the Toolbox item.</param>
      <param name="ptif">[out] A <see cref="T:Microsoft.VisualStudio.Shell.Interop.TBXITEMINFO" /> structure containing additional information about the Toolbox item.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProviderRegistry">
      <summary>Registers a Toolbox data provider. Used to register a Toolbox data provider.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProviderRegistry.RegisterDataProvider(Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProvider,System.UInt32@)">
      <summary>Registers a Toolbox data provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDP">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProviderRegistry" />.</param>
      <param name="pdwProvider">[out] Cookie identifying the data provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProviderRegistry.UnregisterDataProvider(System.UInt32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwProvider">[in] Cookie identifying the data provider to unregister Property Value and the Return Value.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsToolsOptions">
      <summary>Manages a Tools Options dialog box. The environment implements this interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolsOptions.IsToolsOptionsOpen(System.Int32@)">
      <summary>Determines if the Tools Options dialog box is open.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfOpen">[out] If true, the Tools Options dialog box is currently open.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsToolsOptions.RefreshPageVisibility">
      <summary>Refreshes the visibility of the Tools Options dialog box.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments3">
      <summary>This interface allows for batch processing, coordination of locks on files, and an advanced <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryAddFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[])" /> method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments3.BeginQueryBatch">
      <summary>Starts a batch query process in which a single dialog box asking the user for an okay is presented instead of multiple dialog boxes, one for each file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments3.CancelQueryBatch">
      <summary>Cancels a batched series of queries. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments3.EndQueryBatch(System.Int32@)">
      <summary>Indicates that a batched query process has been completed and determines whether or not the batched operations should be allowed to proceed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfActionOK">[out] Returns nonzero if it is okay to proceed with the batched operations. Returns 0 if the batched operations should not occur.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments3.HandsOffFiles(System.UInt32,System.Int32,System.String[])">
      <summary>This method is called when a project wants to affect a number of files and wants any locks on those files released.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfRequiredAccess">[in] One of the values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__HANDSOFFMODE" /> enumeration.</param>
      <param name="cFiles">[in] The number of filenames specified in the <paramref name="rgpszMkDocuments" /> array.</param>
      <param name="rgpszMkDocuments">[in] An array of file names that the project wants to affect.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments3.HandsOnFiles(System.Int32,System.String[])">
      <summary>Indicates that a project is done manipulating the specified files.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cFiles">[in] Number of file names given in the <paramref name="rgpszMkDocuments" /> array.</param>
      <param name="rgpszMkDocuments">[in] An array of file names.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments3.OnQueryAddFilesEx(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[])">
      <summary>This method is an extended version of the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments2.OnQueryAddFiles(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[])" /> method and is used when a project will be moving files to a new location in the project directory.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project making the request about adding files.</param>
      <param name="cFiles">[in] The number of files represented in the <paramref name="rgpszNewMkDocuments" />, <paramref name="rgpszSrcMkDocuments" />, <paramref name="rgFlags" />, and <paramref name="rgResults" /> arrays.</param>
      <param name="rgpszNewMkDocuments">[in] An array of file names that indicate the files' final destination.</param>
      <param name="rgpszSrcMkDocuments">[in] An array of file names specifying the source location of the files.</param>
      <param name="rgFlags">[in] An array of values, one element for each file, from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS" /> enumeration.</param>
      <param name="pSummaryResult">[out] Returns an overall status for all files as a value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS" /> enumeration.</param>
      <param name="rgResults">[in, out] An array that is filled in with the status of each file. Each status is a value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS" /> enumeration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents3">
      <summary>Receives calls made to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocuments3" /> interface. It provides support for batch-processing queries and for coordination of file access.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents3.HandsOffFiles(System.UInt32,System.Int32,System.String[])">
      <summary>Accesses a specified set of files and asks all implementers of this method to release any locks that may exist on those files.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfRequiredAccess">[in] A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__HANDSOFFMODE" /> enumeration, indicating the type of access requested. This can be used to optimize the locks that actually need to be released.</param>
      <param name="cFiles">[in] The number of files in the <paramref name="rgpszMkDocuments" /> array.</param>
      <param name="rgpszMkDocuments">[in] If there are any locks on this array of file names, the caller wants them to be released.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents3.HandsOnFiles(System.Int32,System.String[])">
      <summary>Called when a project has completed operations on a set of files.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cFiles">[in] Number of file names given in the <paramref name="rgpszMkDocuments" /> array.</param>
      <param name="rgpszMkDocuments">[in] An array of file names.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents3.OnBeginQueryBatch">
      <summary>Indicates that a project is about start a batch query process.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents3.OnCancelQueryBatch">
      <summary>This method is called to indicate that a batch query process has been canceled.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents3.OnEndQueryBatch(System.Int32@)">
      <summary>Determines whether it is okay to proceed with the actual batch operation after successful completion of a batch query process. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfActionOK">[out] Returns nonzero if it is okay to continue with the proposed batch process. Returns zero if the proposed batch process should not proceed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTrackProjectDocumentsEvents3.OnQueryAddFilesEx(Microsoft.VisualStudio.Shell.Interop.IVsProject,System.Int32,System.String[],System.String[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[],Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS[])">
      <summary>Determines if it is okay to add a collection of files (possibly from source control) whose final destination may be different from a source location.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pProject">[in] Project making the request about adding files.</param>
      <param name="cFiles">[in] The number of files represented in the <paramref name="rgpszNewMkDocuments" />, <paramref name="rgpszSrcMkDocuments" />, <paramref name="rgFlags" />, and <paramref name="rgResults" /> arrays.</param>
      <param name="rgpszNewMkDocuments">[in] An array of file names that indicate the files' final destination.</param>
      <param name="rgpszSrcMkDocuments">[in] An array of file names specifying the source location of the files.</param>
      <param name="rgFlags">[in] An array of values, one element for each file, from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILEFLAGS" /> enumeration.</param>
      <param name="pSummaryResult">[out] Returns an overall status for all files as a value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS" /> enumeration.</param>
      <param name="rgResults">[out] An array that is to be filled in with the status of each file. Each status is a value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSQUERYADDFILERESULTS" /> enumeration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapperBatchSupport">
      <summary>Wraps types in batch mode and processes them for a specific application domain.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapperBatchSupport.StartBatch">
      <summary>Creates an application domain to work in and starts the batch processing of types. Unloads the application domain when finished. Creates an exception if the batch processing failed to perform as expected.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsTypeLibraryWrapperBatchSupport.StopBatch">
      <summary>Unloads the application domain after batch processing is complete. Creates an exception if the batch processing failed to perform as expected.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow2">
      <summary>Implemented by the environment to display the hierarchies that VSPackages write.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow2.AddUIHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32)">
      <summary>Adds an additional root UI hierarchy node to the list managed by the UI hierarchy window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUIH">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> to add.</param>
      <param name="grfAddOptions">[in] Sets selection behavior in the hierarchy window when a new hierarchy is added. For a list of <paramref name="grfAddOptions" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSADDHIEROPTIONS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow2.ExpandItem(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS)">
      <summary>Controls the state or appearance of items in the hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUIH">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> to modify the appearance.</param>
      <param name="itemid">[in] Identifier of the item in the hierarchy. To change the appearance of the hierarchy itself, set <paramref name="itemid" /> to <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />. For a list of <paramref name="itemid" /> values, see VSITEMID.</param>
      <param name="expf">[in] Specifies the state or appearance of the hierarchy or items within the hierarchy, such as whether the hierarchy or item is expanded, highlighted, or shown in bold font. For a list of <paramref name="expf" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow2.FindCommonSelectedHierarchy(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy@)">
      <summary>Finds the lowermost hierarchy that is the nearest ancestor to every selected node.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfOpt">[in] Controls whether this method returns the Solution as the common hierarchy. For a list of <paramref name="grfOpt" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCOMHIEROPTIONS" />.</param>
      <param name="lppCommonUIH">[out, retval] Common <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface for the selected hierarchy.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow2.GetCurrentSelection(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect@)">
      <summary>Gets the alternate itemID of the current selection when an alternate UIHierarchy is used.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppHier">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the current project hierarchy.</param>
      <param name="pitemid">[out] Pointer to the identifier for the current project item. If <paramref name="pitemid" /> is set to <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />, the current selection involves multiple items. These items can be accessed using the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect" /> interface pointed to by <paramref name="ppMIS" />.</param>
      <param name="ppMIS">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsMultiItemSelect" /> interface to be used to access a multiple selection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow2.GetItemState(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.UInt32,System.UInt32@)">
      <summary>Returns the state or appearance of the hierarchy.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHier">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface to determine the state or appearance of.</param>
      <param name="itemid">[in] Identifier of the item in the hierarchy. For a list of <paramref name="itemid" /> values, see VSITEMID.</param>
      <param name="dwStateMask">[in] Mask values used to determine which <paramref name="pdwState" /> values are provided. For a list of <paramref name="dwStateMask" /> values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYITEMSTATE" />.</param>
      <param name="pdwState">[out, retval] Values taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSHIERARCHYITEMSTATE" /> enumeration, which were passed in with <paramref name="expf" /> in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow2.ExpandItem(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,Microsoft.VisualStudio.Shell.Interop.EXPANDFLAGS)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow2.Init(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.Object@)">
      <summary>Initializes a custom use of a UI hierarchy window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUIH">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> to initialize.</param>
      <param name="grfUIHWF">[in] Characteristics of the UI hierarchy window. For a list of values, see the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__UIHWINFLAGS" /> enumeration.</param>
      <param name="ppunkOut">[out] Pointer to the IUnknown interface of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame2" /> object containing the UI hierarchy window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow2.RemoveUIHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy)">
      <summary>Removes a root UI hierarchy node from the UI hierarchy window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUIH">[in] <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy" /> interface representing the UI hierarchy node to remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow2.SetCursor(System.IntPtr,System.IntPtr@)">
      <summary>Sets a new cursor for the UI hierarchy window. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hNewCursor">[in] New cursor to display in the hierarchy window.</param>
      <param name="phOldCursor">[out, retval] Cursor replaced by the new cursor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow2.SetItemAttribute(Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.UInt32,System.Object)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUIH">[in]</param>
      <param name="itemid">[in]</param>
      <param name="attribute">[in]</param>
      <param name="value">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow2.SetWindowHelpTopic(System.String,System.UInt32)">
      <summary>Sets the Help topic for the hierarchy window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lpszHelpFile">[in] Help file name.</param>
      <param name="dwContext">[in] Context for the Help topic.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIShell2">
      <summary>Extends the functionality of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIShell" /> interface by providing access to additional window functionalities.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell2.CreateGlyphImageButton(System.IntPtr,System.UInt16,System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsImageButton@)">
      <summary>Creates a mixed image/text button using the specified glyph as the image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwnd">[in] Handle to the window that is to own the created button. Currently, Visual Studio ignores this value.</param>
      <param name="chGlyph">[in] The character representing the glyph to use.</param>
      <param name="xShift">[in] How far to the right, in logical units, to shift the glyph.</param>
      <param name="yShift">[in] How far down, in logical units, to shift the glyph.</param>
      <param name="bwiPos"></param>
      <param name="ppImageButton">[out] Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsImageButton" /> object representing the new button.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell2.CreateGradient(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsGradient@)">
      <summary>Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsGradient" /> object on which to draw a gradient of a specified type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="GRADIENTTYPE">[in] The type of gradient to be painted, specified by a value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__GRADIENTTYPE" /> enumeration.</param>
      <param name="pGradient">[out] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsGradient" /> object whose member functions can draw the specified gradient type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell2.CreateIconImageButton(System.IntPtr,System.IntPtr,System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsImageButton@)">
      <summary>Creates a mixed image/text button using the specified icon as the image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwnd">[in] Handle to the window that is to own the created button. Currently, Visual Studio ignores this value.</param>
      <param name="hicon">[in] Handle to the icon to be used as the image for the new button.</param>
      <param name="bwiPos"></param>
      <param name="ppImageButton">[out] Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsImageButton" /> object representing the new button.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell2.GetDirectoryViaBrowseDlgEx(Microsoft.VisualStudio.Shell.Interop.VSBROWSEINFOW[],System.String,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.VSNSEBROWSEINFOW[])">
      <summary>Brings up the Browse dialog box to obtain a directory name (possibly in a namespace extension).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBrowse">[in, out] A <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSBROWSEINFOW" /> structure that contains information used to initialize the dialog box. When this method returns, this structure contains information about the directory location selected by the user. These values are defined in <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSBROWSEINFOW" /> structure.</param>
      <param name="pszHelpTopic">[in] A string containing the help topic. This overrides the <paramref name="dwHelpTopic" /> parameter in <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSBROWSEINFOW" /> structure.</param>
      <param name="pszOpenButtonLabel">[in] Caption text for the Open button. </param>
      <param name="pszCeilingDir">[in] Limit browsing to below this location.</param>
      <param name="pNSEBrowseInfo">[in] Optional. Namespace extension information .For a listing of the structure parameters, see the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSNSEBROWSEINFOW" /> structure.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell2.GetOpenFileNameViaDlgEx(Microsoft.VisualStudio.Shell.Interop.VSOPENFILENAMEW[],System.String)">
      <summary>Brings up the File Open dialog box to obtain a specified open file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pOpenFileName">[in, out] A <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOPENFILENAMEW" /> structure that contains information used to initialize the File Open dialog box. When this method returns, this structure contains information about the user's file selection.</param>
      <param name="pszHelpTopic">[in] A string containing the help topic.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell2.GetSaveFileNameViaDlgEx(Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW[],System.String)">
      <summary>Brings up the Save As dialog box to obtain a save file name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSaveFileName">[in, out] A <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW" /> structure that contains information used to initialize the Save As dialog box. When this method returns, this structure contains information about the file name selected by the user.</param>
      <param name="pszHelpTopic">[in] A string containing the help topic. This parameter overrides the <paramref name="dwHelpTopic" /> parameter in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSAVEFILENAMEW" /> structure.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell2.GetVSCursor(System.UInt32,System.IntPtr@)">
      <summary>Returns a handle to a cursor of a specified cursor type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cursor">[in] A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCURSORTYPE" /> enumeration specifying the type of cursor to be returned.</param>
      <param name="phIcon">[out] The 32-bit integer handle (HCURSOR) to the appropriate cursor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell2.GetVSSysColorEx(System.Int32,System.UInt32@)">
      <summary>Returns the RGB settings for the specified system color used by the environment.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="dwSysColIndex">[in] A value from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSSYSCOLOREX" /> enumeration specifying the system color to retrieve.</param>
      <param name="pdwRGBval">[out] A 32-bit word containing the RGB value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell2.IsAutoRecoverSavingCheckpoints(System.Int32@)">
      <summary>Indicates whether unsaved documents are currently being auto-saved.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfARSaving">[out] Returns nonzero (TRUE) if Visual Studio is in the process of auto-saving all open documents that need to be saved; otherwise, returns zero (FALSE).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell2.SaveItemsViaDlg(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSSAVETREEITEM[])">
      <summary>Handles the saving of one or more documents through the Save changes to following items dialog box.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cItems">[in] Count of items.</param>
      <param name="rgSaveItems">[in] Array of <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSAVETREEITEM" /> structures representing the items to be saved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShell2.VsDialogBoxParam(System.UInt32,System.UInt32,System.UInt32,System.Int32)">
      <summary>Loads and displays the specified dialog template using the specified dialog callback procedure.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hinst">[in] 32-bit handle to the module that contains the dialog template as a resource. Cannot be a null value.</param>
      <param name="dwId">[in] The resource ID of the dialog template to load.</param>
      <param name="lpDialogFunc">[in] The dialog procedure to use for the dialog box. Cannot be a null value.</param>
      <param name="lp">[in] The LPARAM value to pass with the WM_INITDIALOG message (which is sent to the dialog procedure).</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument2">
      <summary>Provides the list of default document previewers. Implemented by the Environment. Extends, but does not inherit from <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument2.GetDefaultPreviewers(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSDEFAULTPREVIEWER[],System.UInt32@)">
      <summary>Provides a list of Default Previewers. This is the list of previewers that would be launched if IVsUIShellOpenDocument::OpenStandardPreviewer(NULL) is called.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt"></param>
      <param name="rgDefaultPreviewers">[Out] An array of objects of type VSDEFAULTPREVIEWER. </param>
      <param name="pcActual">[Out] A pointer to an unsigned long value. </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents3">
      <summary>Defines events for changes in the solution configuration. Extends, but does not inherit from, <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents2" /> and <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents" />. To monitor these events, implement the interface and use it as an argument of the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager3.AdviseUpdateSolutionEvents3(Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents3,System.UInt32@)" /> method of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSolutionBuildManager3" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents3.OnAfterActiveSolutionCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pOldActiveSlnCfg">[in]</param>
      <param name="pNewActiveSlnCfg">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpdateSolutionEvents3.OnBeforeActiveSolutionCfgChange(Microsoft.VisualStudio.Shell.Interop.IVsCfg,Microsoft.VisualStudio.Shell.Interop.IVsCfg)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pOldActiveSlnCfg">[in]</param>
      <param name="pNewActiveSlnCfg">[in]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUpgradeLogger">
      <summary>Reports errors and informational messages.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpgradeLogger.Flush">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUpgradeLogger.LogMessage(System.UInt32,System.String,System.String,System.String)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ErrorLevel">[in] </param>
      <param name="bstrProject">[in] </param>
      <param name="bstrSource">[in] </param>
      <param name="bstrDescription">[in ]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUserSettings">
      <summary>Interface implemented by VSPackages needing their state information persisted by the Visual Studio settings mechanism.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserSettings.ExportSettings(System.String,Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter)">
      <summary>Saves a VSPackage's configuration using the Visual Studio settings mechanism when the export option of the Import/Export Settings feature available on the IDE’s Tools menu is selected by a user.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszCategoryGUID">[in] GUID identifying the group of settings to be exported. This is the identifying GUID for the Custom Settings Point. For more information on Custom Settings Points, see Persisting Settings</param>
      <param name="pSettings">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter" /> interface provided by the environment to the VSPackage providing write access to the Visual Studio settings file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserSettings.ImportSettings(System.String,Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader,System.UInt32,System.Int32@)">
      <summary>Retrieves a VSPackage's configuration using the Visual Studio settings mechanism when a user selects the import option of the Import/Export Settings feature on the IDE’s Tools menu.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszCategoryGUID">[in] GUID identifying the group of settings to be imported. This is the identify GUID of the Custom Settings Point. For more information on Custom Settings Points see Persisting Settings.</param>
      <param name="pSettings">[in]An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter" /> interface provided by the environment to the VSPackage providing read access to the Visual Studio settings file.</param>
      <param name="flags">[in] Flag from the system indicating how an implementation of <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUserSettings.ImportSettings(System.String,Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader,System.UInt32,System.Int32@)" /> is supposed to process retrieved settings.The supported values of that are members of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__UserSettingsFlags" /> enumeration. </param>
      <param name="pfRestartRequired">[out] Flag returned to the environment indicating if a restart of the IDE is required to complete environment reconfiguration based on retrieved data. If the value returned by <paramref name="pfRestartRequired" /> is true, the environment should be restarted. </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsUserSettingsQuery">
      <summary>Allows a VSPackage to indicate if its settings need to be saved or not.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsUserSettingsQuery.NeedExport(System.String,System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="szCategoryGUID">[in] GUID identifying the particular settings category (defined by a Custom Settings Point) being queried.</param>
      <param name="pfNeedExport">[out] Boolean value returned to indicate if the IDE should call the VSPackage's export settings implementation.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser2">
      <summary>Enables a client of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowsingService" /> to proffer services to the hosted browser control. Extends, but does not inherit from, <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebBrowserUser2.GetWebBrowserContext(Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
      <summary>Get an instance of a service provider to offer services to the browser.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="ppServiceProvider">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface providing access to the service.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWebProject">
      <summary>Implemented by web project objects that want to use the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsAddNewWebProjectItemDlg" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebProject.AddNewWebItem(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION,System.String,System.String,System.UInt32,System.String,System.IntPtr,Microsoft.VisualStudio.Shell.Interop.VSADDRESULT[])">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemidLoc">[in] Folder to add the item to</param>
      <param name="dwAddItemOperation">[in] <see cref="F:Microsoft.VisualStudio.Shell.Interop.VSADDITEMOPERATION.VSADDITEMOP_RUNWIZARD" /> are valid</param>
      <param name="pszItemName">[in] Name of the item</param>
      <param name="pszFileTemplate">[in] Path to the template the user selected</param>
      <param name="options"></param>
      <param name="pszSelectedLanguage">[in] String selected from the languages dropdown (can be null)</param>
      <param name="hwndDlgOwner">[in] </param>
      <param name="pResult">[out] </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWebService">
      <summary>Represents a single Web service proffered by a project. Managed as part of a collection of Web services held by <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProvider" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebService.AdviseWebServiceEvents(Microsoft.VisualStudio.Shell.Interop.IVsWebServiceEvents,System.UInt32@)">
      <summary>Register callbacks for the Web service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pEvents">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceEvents" /> interface implementing the callback functions.</param>
      <param name="pdwCookie">[out] Pointer to an integer, a VSCOOKIE value uniquely identifying the registered interface. Used in the call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebService.UnadviseWebServiceEvents(System.UInt32)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebService.AppRelativeUrl(System.String@)">
      <summary>Gets the application-relative path to the Web service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrAppUrl">[out] String containing the application-relative path to the Web service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebService.GetProvider(Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProvider@)">
      <summary>Gets the provider of a service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppIVsWebServiceProvider">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProvider" /> interface that is the provider of the Web service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebService.UnadviseWebServiceEvents(System.UInt32)">
      <summary>Unregisters callbacks for this Web service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Integer, a VSCOOKIE value uniquely identifying the registered interface to unregister. Cookie generated by the call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebService.AdviseWebServiceEvents(Microsoft.VisualStudio.Shell.Interop.IVsWebServiceEvents,System.UInt32@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebService.Url(System.String@)">
      <summary>Specifies the URL for the service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrUrl">[out] String containing the URL for the service. This URL may be different from the URL used to discover the service.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceEvents">
      <summary>Defines events called when a Web service is removed, renamed, or changed. Used as an argument to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebService.AdviseWebServiceEvents(Microsoft.VisualStudio.Shell.Interop.IVsWebServiceEvents,System.UInt32@)" /> method of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebService" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceEvents.OnChanged(Microsoft.VisualStudio.Shell.Interop.IVsWebService)">
      <summary>Method called when the Web service changes because of an edit. Your code should refresh references to the Web service after this event.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIVsWebReference">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebService" /> interface describing the Web service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceEvents.OnRemoved(System.String)">
      <summary>Method called when a Web service is removed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszOldURL">[in] Pointer to a string containing the URL to the now removed Web service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceEvents.OnRenamed(System.String,System.String)">
      <summary>Method called when a Web service is renamed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszOldURL">[in] Pointer to a string containing the URL of the old name of the service.</param>
      <param name="pszNewURL">[in] Pointer to a string containing the URL of the new name of the service.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProvider">
      <summary>Maintains a collection of Web services (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebService" />) and calls appropriate methods on events.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProvider.AdviseWebServiceProviderEvents(Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProviderEvents,System.UInt32@)">
      <summary>Registers callbacks for Web service provider events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pEvents">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProviderEvents" /> interface implementation containing the callback functions.</param>
      <param name="pdwCookie">[out] Pointer to an integer uniquely identifying the registered interface. A VSCOOKIE value. Used when unregistering the interface by calling <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProvider.UnadviseWebServiceProviderEvents(System.UInt32)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProvider.ApplicationUrl(System.String@)">
      <summary>Retrieves the URL of the Web service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrUrl">[out] Pointer to a string containing the URL of the Web service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProvider.EnsureServerRunning(System.String@)">
      <summary>Ensures the server is running and retrieves the URL of the server implementing the Web service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrUrl">[out] Pointer to a string containing the URL of the server.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProvider.GetWebService(System.String,Microsoft.VisualStudio.Shell.Interop.IVsWebService@)">
      <summary>Retrieves an interface to a Web service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszUrl">[in] Pointer to a string containing the URL of the Web service.</param>
      <param name="ppIVsWebService">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebService" /> interface defining the Web service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProvider.StartServer">
      <summary>Starts the server for the Web service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProvider.UnadviseWebServiceProviderEvents(System.UInt32)">
      <summary>Unregisters callbacks for Web service provider events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] Integer. A VSCOOKIE value identifying the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProviderEvents" /> interface to unregister. Value comes from the call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProvider.AdviseWebServiceProviderEvents(Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProviderEvents,System.UInt32@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProvider.WebServices(Microsoft.VisualStudio.Shell.Interop.IEnumWebServices@)">
      <summary>Provides an enumerator for the services implemented by the Web service provider.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppIEnumWebServices">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IEnumWebServices" /> enumerator for the Web services.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProviderEvents">
      <summary>Defines methods called when Web services are added or removed from the Web service provider collection. Used as an argument in the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProvider.AdviseWebServiceProviderEvents(Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProviderEvents,System.UInt32@)" /> method of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProvider" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProviderEvents.OnAdded(Microsoft.VisualStudio.Shell.Interop.IVsWebService)">
      <summary>Method called when a Web service is added.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIVsWebReference">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWebService" /> interface of the service added.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWebServiceProviderEvents.OnRemoved(System.String)">
      <summary>Method called when a service is removed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszUrl">[in] Pointer to a string containing the URL of the service removed.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame2">
      <summary>Enables a window frame to send notifications to anyone who wants to be notified of <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify" /> events</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame2.ActivateOwnerDockedWindow">
      <summary>Gives focus to a child IVsWindowFrame.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame2.Advise(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify,System.UInt32@)">
      <summary>Enables a client to be notified of window frame events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pNotify">[in] A <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify" /> interface to an entity to be called for window frame events.</param>
      <param name="pdwCookie">[out] A cookie associated with the given <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame2.Unadvise(System.UInt32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in] The unique value that was return from the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame2.Advise(Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify,System.UInt32@)" /> method.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify3">
      <summary>Notifies a VSPackage when changes are made to one of its window frames.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify3.OnClose(System.UInt32@)">
      <summary>Notifies the VSPackage that a window frame is closing and tells the environment what action to take.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pgrfSaveOptions">[in, out] Specifies options for saving window content. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__FRAMECLOSE" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify3.OnDockableChange(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Notifies the VSPackage that a window's docked state is being altered.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fDockable">[in] true if the window frame is being docked.</param>
      <param name="x"></param>
      <param name="y"></param>
      <param name="w"></param>
      <param name="h"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify3.OnMove(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Notifies the VSPackage that a window is being moved.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="x"></param>
      <param name="y"></param>
      <param name="w"></param>
      <param name="h"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify3.OnShow(System.Int32)">
      <summary>Notifies the VSPackage of a change in the window's display state.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fShow">[in] Specifies the reason for the display state change. Value taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__FRAMESHOW" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrameNotify3.OnSize(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Notifies the VSPackage that a window is being resized.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="x"></param>
      <param name="y"></param>
      <param name="w"></param>
      <param name="h"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowPaneCommitFilter">
      <summary>Enables interception of a command that would commit changes before committing the changes.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsWindowPaneCommitFilter.IsCommitCommand(System.Guid@,System.UInt32,System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidCmdGroup">[in] </param>
      <param name="dwCmdID">[in] </param>
      <param name="pfCommitCommand">[out] </param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData3">
      <summary>Extracts information about a member from an XML representation. Extends, but does not inherit from, <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData" />. Query an object returning <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData" /> to see if it supports <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData3" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData3.GetCompletionListText(System.String@)">
      <summary>Gets the text of a completion list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrCompletionList">[out] The completion list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData3.GetCompletionListTextAt(System.Int32,System.String@)">
      <summary>Gets a value from a completion list</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iParam">[in] The position of the list element.</param>
      <param name="pbstrCompletionList">[out] The value of the list element.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData3.GetExceptionCount(System.Int32@)">
      <summary>Gets the number of exceptions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piExceptions">[out] The number of exceptions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData3.GetExceptionTextAt(System.Int32,System.String@,System.String@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iException">[in] The position of the exception in the collection.</param>
      <param name="pbstrType">[out] The type of the exception.</param>
      <param name="pbstrText">[out] The text of the exception.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData3.GetFilterPriority(System.Int32@)">
      <summary>Gets the priority of a filter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piFilterPriority">[out] The filter priority.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData3.GetParamCount(System.Int32@)">
      <summary>Gets the number of parameters.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piParams">[out] The number of parameters.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData3.GetParamTextAt(System.Int32,System.String@,System.String@)">
      <summary>Gets the text describing a specific parameter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iParam">[in] The position of the parameter in the signature.</param>
      <param name="pbstrName">[out] The name of the parameter.</param>
      <param name="pbstrText">[out] The text describing the parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData3.GetPermissionSet(System.String@)">
      <summary>Gets the permission set.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrPermissionSetXML">[out] The permission set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData3.GetRemarksText(System.String@)">
      <summary>Gets remarks for an item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrRemarks">[out] The remarks.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData3.GetReturnsText(System.String@)">
      <summary>Gets the description of return values for a method.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrReturns">[out] The return value description.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData3.GetSummaryText(System.String@)">
      <summary>Gets the summary text for an item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrSummary">[in] The summary text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData3.GetTypeParamCount(System.Int32@)">
      <summary>Gets the number of parameters for a type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piTypeParams">[out] The number of parameters.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData3.GetTypeParamTextAt(System.Int32,System.String@,System.String@)">
      <summary>Gets the type of a specific parameter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iTypeParam">[in] The position of the parameter in the collection.</param>
      <param name="pbstrName">[out] The name of the parameter.</param>
      <param name="pbstrText">[out] The type name of the parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberData3.SetOptions(System.UInt32)"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberDataCallBack">
      <summary>Provides the display name for a member in XML documentation representing metadata.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberDataCallBack.GetDisplayNameForTag(System.UInt32,System.String,System.String@)">
      <summary>Gets the display name.</summary>
      <param name="nTagType">
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.__XMLMEMBERDATA_TAGTYPE" /> value specifying the tag type</param>
      <param name="wszBufferIn">The tag name</param>
      <param name="pbstrBufferOut">The display name for the tag</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberDataRegisterCallBack">
      <summary>Registers an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberDataCallBack" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberDataRegisterCallBack.RegisterCallBack(Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberDataCallBack)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pIVsXMLMemberDataCallBack">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberDataCallBack" /> Callback to register</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IVsXMLMemberDataRegisterCallBack.UnregisterCallBack">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IWebApplicationCtxSvc">
      <summary>Sets up the IntelliSense infrastructure for a file by returning an <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface you can use with the file. You can get an instance of the interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SWebApplicationCtxSvc" /> (SID_SWebApplicationCtxSvc) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IWebApplicationCtxSvc.GetItemContext(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
      <summary>Retrieve the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface for a file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHier">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface for the item.</param>
      <param name="itemid">[in] Integer. The identifier (VSITEMID) for the item.</param>
      <param name="ppServiceProvider">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface for the item's file.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IWebClassLibProject"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IWebClassLibProject.CloseProject"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IWebClassLibProject.UnloadAppDomain(System.Int32)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IWebClassLibProject.UpdateAnchoredPath(System.String,System.String)"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IWebClassLibProjectEvents"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IWebClassLibProjectEvents.OnFileAdded(System.String,System.Boolean)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IWebClassLibProjectEvents.OnReferenceAdded(System.String)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IWebClassLibProjectEvents.StartWebAdminTool"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IWebClassLibProjectSvc"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IWebClassLibProjectSvc.CreateClassLibProject(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.String,System.UInt32,System.String,Microsoft.VisualStudio.Shell.Interop.IWebClassLibProject@)"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.IWebFileCtxService">
      <summary>Prepares the IntelliSense infrastructure for a given assembly file. You can get an instance of the interface from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.SWebFileCtxService" /> (SID_SWebFileCtxService) service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IWebFileCtxService.AddDependentAssemblyFile(System.String)">
      <summary>Add a dependent assembly to the service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFilePath">[in] Pointer to a string containing the assembly file name. May be relative to the current directory (.).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IWebFileCtxService.AddFileToIntellisense(System.String,System.UInt32@)">
      <summary>Add a file to the Intellisense coverage.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFilePath">[in] Pointer to a string containing the file name. May be relative to the current directory (.).</param>
      <param name="pItemid">[out] Pointer to the item identifier assigned to the file, a VSITEMID.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IWebFileCtxService.CBMCallbackActive">
      <summary>Indicates whether or not a client build manager (CBM) callback is active.</summary>
      <returns>Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_Ok" /> if a CBM callback is active. Otherwise, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IWebFileCtxService.ConvertToAppRelPath(System.String,System.String@)">
      <summary>Converts a path to an application-relative path.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFilePath">[in] Pointer to a string containing the path to convert.</param>
      <param name="pbstrAppRelPath">[out] Pointer to a string containing the calculated application-relative path.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IWebFileCtxService.EnsureFileOpened(System.UInt32,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)">
      <summary>Opens a file by item identifier.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="itemid">[in] Integer. The item identifier (VSITEMID) of the file to open.</param>
      <param name="ppFrame">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> interface of the opened file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IWebFileCtxService.GetIntellisenseProjectName(System.String@)">
      <summary>Retrieves the project name for this Intellisense project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrProjectName">[out] Pointer to a string containing the name of the Intellisense project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IWebFileCtxService.GetWebRootPath(System.String@)">
      <summary>Retrieves the path to the root of the Web site.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrWebRootPath">[out] Pointer to a string containing the path to the root of the Web site.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IWebFileCtxService.IsDocumentInProject(System.String,System.UInt32@)">
      <summary>Adds a file, if it exists, to the project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFilePath">[in] Pointer to a string containing the file name. May be relative to the current directory (.).</param>
      <param name="pItemid">[out] Pointer to the item identifier assigned to the item, a VSITEMID. Set to VSITEMID_NIL if there is an error.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IWebFileCtxService.RemoveDependentAssemblyFile(System.String)">
      <summary>Removes a dependent assembly from the project. The inverse of the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IWebFileCtxService.AddDependentAssemblyFile(System.String)" /> method.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFilePath">[in] Pointer to a string containing the file name. May be relative to the current directory (.).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IWebFileCtxService.RemoveFileFromIntellisense(System.String)">
      <summary>Removes a file from the Intellisense project. The inverse of the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IWebFileCtxService.AddFileToIntellisense(System.String,System.UInt32@)" /> method.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFilePath">[in] Pointer to a string containing the file name. May be relative to the current directory (.).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Interop.IWebFileCtxService.WaitForIntellisenseReady">
      <summary>Wait until the Intellisense project is ready to use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.LogicalViewID">
      <summary>Provides a list of GUIDs that are used to identify views of files or processes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LogicalViewID.Any">
      <summary>Specifies any view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LogicalViewID.Code">
      <summary>Specifies a view displaying source code.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LogicalViewID.Debugging">
      <summary>Specifies a view displaying debugging information.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LogicalViewID.Designer">
      <summary>Specifies a view showing a component designer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LogicalViewID.Primary">
      <summary>Specifies the primary view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LogicalViewID.ProjectSpecificEditor">
      <summary>Specifies a view showing a project specific editor.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LogicalViewID.TextView">
      <summary>Specifies a view displaying text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.LogicalViewID.UserChooseView">
      <summary>Specifies a user-chosen view.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.REFERENCECHANGETYPE"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.REFERENCECHANGETYPE.REFERENCE_Added">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.REFERENCECHANGETYPE.REFERENCE_Removed">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.REFERENCECHANGETYPE.REFERENCE_Changed">
      <summary> </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SBuilderWizardManager"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SccToolsOptionsEnum">
      <summary>Options that can be viewed or updated for source control tools. Used exclusively by the methods on the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSccToolsOptions" /> interface.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.SccToolsOptionsEnum.ksctoAllowReadOnlyFilesNotUnderSccToBeEdited">
      <summary>Nonzero to allow files marked as read-only (but which are not under source control) to be edited.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.SccToolsOptionsEnum.ksctoLast">
      <summary>This value is set to the last option in the enumeration. Do not use as an option.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.SccToolsOptionsEnum.ksctoBad">
      <summary>This value indicates an unrecognized option.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SDirList">
      <summary>Passed to the QueryService method to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IDirList" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SDTE"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SExtensionManager"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.ShellGuids80">
      <summary>Provides a list of GUIDs that are used to identify shell components.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ShellGuids80.SolutionFolderProject">
      <summary>Specifies a project containing a solution folder.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsActivityLog">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsActivityLog" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsAssemblyNameUnification"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsCallBrowser">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCallBrowser" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsCodeDefView">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCodeDefView" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsCommandWindowsCollection">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCommandWindowsCollection" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsComponentSelectorDlg2">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsComponentSelectorDlg2" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsConfigurationManagerDlg">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsConfigurationManagerDlg" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsCreateAggregateProject">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsCreateAggregateProject" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsDetermineWizardTrust"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsErrorList">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsErrorList" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsFontAndColorCacheManager">
      <summary>Object providing access to the Visual Studio SDK implementation of the Font and Color cache manager service.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsIntegratedHelp">
      <summary>Passed to the <see cref="M:Microsoft.VisualStudio.OLE.Interop.IServiceProvider.QueryService(System.Guid@,System.Guid@,System.IntPtr@)" /> method to return a reference to the <see cref="T:Microsoft.VisualStudio.VSHelp.SVsHelp" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsIntellisenseEngine">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsIntellisenseEngine" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsIntellisenseProjectHost">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsIntellisenseProjectHost" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsIntellisenseProjectManager">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsIntellisenseProjectManager" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsMainWindowDropTarget"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVSMDCodeDomProvider">
      <summary>Passed to the <see cref="M:Microsoft.VisualStudio.OLE.Interop.IServiceProvider.QueryService(System.Guid@,System.Guid@,System.IntPtr@)" /> method to return a reference to the IVSMDCodeDomProvider interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVSMDDesignerService">
      <summary>Passed to the <see cref="M:Microsoft.VisualStudio.OLE.Interop.IServiceProvider.QueryService(System.Guid@,System.Guid@,System.IntPtr@)" /> method to return a reference to the IVSMDCodeDomCreator and IVSMDDesignerService interfaces.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVSMDPropertyBrowser">
      <summary>Passed to the <see cref="M:Microsoft.VisualStudio.OLE.Interop.IServiceProvider.QueryService(System.Guid@,System.Guid@,System.IntPtr@)" /> method to return a reference to the IVSMDPropertyBrowser interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVSMDTypeResolutionService">
      <summary>Passed to the <see cref="M:Microsoft.VisualStudio.OLE.Interop.IServiceProvider.QueryService(System.Guid@,System.Guid@,System.IntPtr@)" /> method to return a reference to the IVSMDTypeResolutionService interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsOpenProjectOrSolutionDlg">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOpenProjectOrSolutionDlg" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsPathVariableResolver">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPathVariableResolver" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsPreviewChangesService">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPreviewChangesService" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsProfileDataManager">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProfileDataManager" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsProfilesManagerUI">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsProfilesManagerUI" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsRegisterDebugTargetProvider">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRegisterProjectDebugTargetProvider" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsRegisterNewDialogFilters"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsResourceManager">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsResourceManager" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsSccToolsOptions">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSccToolsOptions" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsSettingsReader">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsSmartOpenScope">
      <summary>Passed to the <see cref="M:Microsoft.VisualStudio.OLE.Interop.IServiceProvider.QueryService(System.Guid@,System.Guid@,System.IntPtr@)" /> method to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSmartOpenScope" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsSourceControl"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsSQLCLRReferences">
      <summary>Passed to the <see cref="M:Microsoft.VisualStudio.OLE.Interop.IServiceProvider.QueryService(System.Guid@,System.Guid@,System.IntPtr@)" /> method to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSQLCLRReferences" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsStartPageDownload">
      <summary>Passed to the <see cref="M:Microsoft.VisualStudio.OLE.Interop.IServiceProvider.QueryService(System.Guid@,System.Guid@,System.IntPtr@)" /> method to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsStartPageDownload" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsStrongNameKeys">
      <summary>Passed to the <see cref="M:Microsoft.VisualStudio.OLE.Interop.IServiceProvider.QueryService(System.Guid@,System.Guid@,System.IntPtr@)" /> method to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsStrongNameKeys" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsThreadedWaitDialog">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsThreadedWaitDialog" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsThreadPool">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsThreadPool" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsToolboxDataProviderRegistry">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolboxDataProviderRegistry" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsToolsOptions">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsToolsOptions" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SVsUpgradeLogger">
      <summary>Passed to <see cref="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetService(System.Guid)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUpgradeLogger" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SWebApplicationCtxSvc"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SWebFileCtxService"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SYMBOL_DESCRIPTION_NODE">
      <summary>To be written.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.SYMBOL_DESCRIPTION_NODE.dwType">
      <summary>To be written.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.SYMBOL_DESCRIPTION_NODE.pszName">
      <summary>To be written.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SymbolScopeGuids80">
      <summary>Defines GUIDs associated with symbol scope.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.SymbolScopeGuids80.All">
      <summary>All symbol scopes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.SymbolScopeGuids80.Frameworks">
      <summary>Framework symbol scope</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.SymbolScopeGuids80.FSSelectedComponents">
      <summary>File system selected component symbol scope.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.SymbolScopeGuids80.OBSelectedComponents">
      <summary>Object browser selected components symbol scope.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.SymbolScopeGuids80.Solution">
      <summary>Solution scope.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.SYSTEMTIME">
      <summary>Represents a date and time using individual members for the month, day, year, weekday, hour, minute, second, and millisecond.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.SYSTEMTIME.wDay">
      <summary>Specifies the current day of the month.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.SYSTEMTIME.wDayOfWeek">
      <summary>Specifies the current day of the week; Sunday = 0, Monday = 1, and so on. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.SYSTEMTIME.wHour">
      <summary>Specifies the current hour.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.SYSTEMTIME.wMilliseconds">
      <summary>Specifies the current millisecond.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.SYSTEMTIME.wMinute">
      <summary>Specifies the current minute. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.SYSTEMTIME.wMonth">
      <summary>Specifies the current month.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.SYSTEMTIME.wSecond">
      <summary>Specifies the current second.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.SYSTEMTIME.wYear">
      <summary>Specifies the current year. The year must be greater than 1601.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.tagCreateClassLibFlags"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagCreateClassLibFlags.CCL_UseAnchorWebConfig">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagCreateClassLibFlags.CCL_CreateP2PReference">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResultFlags2">
      <summary>This enumeration specifies bitflags, returned from the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QueryEditFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@,System.UInt32@)" /> method, that tell whether a file was checked out and/or changed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResultFlags2.QER_Reloaded">
      <summary>The QueryEditFiles operation caused check out from source control, a new version was retrieved from the source control database, and the file was reloaded in memory (editor buffer or project/solution file). The caller may need to abort the initial operation that caused the edit if it cannot tolerate the newly reloaded content of the file—for example, if calculations made based on the content before the QueryEditFiles call may not apply to the new content).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResultFlags2.QER_Changed">
      <summary>The QueryEditFiles operation caused check out from source control and a new version was retrieved. If the file is opened in the IDE, QER_Reloaded will also be retuned.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.TaskListViews">
      <summary>Specifies views used to display the task list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.TaskListViews.All">
      <summary>Indicates all tasks are shown.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.TaskListViews.CheckedTasks">
      <summary>Indicates only checked tasks are shown.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.TaskListViews.CommentTasks">
      <summary>Indicates only comment tasks are shown.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.TaskListViews.CompilerTasks">
      <summary>Indicates only tasks created by the compiler are shown.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.TaskListViews.CurrentFileTasks">
      <summary>Indicates only tasks in the current file are shown.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.TaskListViews.HTMLTasks">
      <summary>Indicates only HTML tasks are shown.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.TaskListViews.ShortcutTasks">
      <summary>Indicates only shortcut tasks are shown.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.TaskListViews.UncheckedTasks">
      <summary>Indicates only unchecked tasks are shown.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.TaskListViews.UserTasks">
      <summary>Indicates only manually entered tasks are shown.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.TaskProviderGuids">
      <summary>Provides a list of GUIDs that are used to identify task providers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.TaskProviderGuids.Comments">
      <summary>Specifies a comment.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids">
      <summary>Provides GUIDs that are used to identify Visual Studio tool windows.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids.BrowserDoc">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids.ClassView">
      <summary>This tool window provides a list of all classes in a solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids.CommandWindow">
      <summary>This tool window provides a way to execute commands directly in the Visual Studio shell.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids.ContextWindow">
      <summary>This tool window provides links to help topics based on the current context.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids.DocOutline">
      <summary>This tool window provides an outline of an HTML file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids.FindAdvanced">
      <summary>This tool window provides the ability to search files for a string.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids.FindReplace">
      <summary>This tool window provides the ability to search and replace on the currently opened file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids.FindResults1">
      <summary>This tool window provides a list of the search results.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids.FindResults2">
      <summary>This tool window provides a second list of search results.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids.MacroExplorer">
      <summary>This tool window provides a list of macros available for use in the Visual Studio shell.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids.ObjectBrowser">
      <summary>This tool window provides a list of components installed on the system.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids.ObjectSearchResultsWindow">
      <summary>This tool window provides the results of searching for a symbol.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids.ObjectSearchWindow">
      <summary>This tool window provides the ability to search for a symbol.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids.Outputwindow">
      <summary>This tool window displays any output generated by a build process or a program being debugged.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids.PropertyBrowser">
      <summary>This tool window provides a list of properties associated with the currently selected file or project in Solution Explorer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids.ResourceView">
      <summary>This tool window provides a list of resources available in a project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids.ServerExplorer">
      <summary>This tool window provides a list of servers used for connecting to databases.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids.SolutionExplorer">
      <summary>This tool window provides a list of projects and their files in a solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids.TaskList">
      <summary>This tool window provides a list of user-specified tasks to be accomplished for a project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids.Toolbox">
      <summary>This tool window provides a list of components that can be added to a project, typically through the Windows Forms designer.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80">
      <summary>Provides additional GUIDs that are used to identify Visual Studio tool windows.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.Autos">
      <summary>This tool window provides a list of recently changed variables and parameters at the current point of execution during debugging.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.BookmarkWindow">
      <summary>This tool window provides a list of bookmarks placed in all files in a solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.Breakpoints">
      <summary>This tool window provides a list of breakpoints in a solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.BrowserDoc">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.CallBrowserSecondaryWindow">
      <summary>This tool window is a second Call Browser window (see <see cref="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.CallBrowserWindow" />).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.CallBrowserWindow">
      <summary>This tool window provides a list of functions or methods in the source file, organized by caller or callee.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.CallStack">
      <summary>This tool window displays the current call stack while debugging.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.ClassDetails">
      <summary>This tool window displays the details of a class selected in a class diagram view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.ClassView">
      <summary>This tool window provides a list of all classes in a solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.CodedefinitionWindow">
      <summary>This tool window provides a read-only view of the source where the symbol under the cursor is defined.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.CommandWindow">
      <summary>This tool window provides a way to execute commands directly in the Visual Studio shell.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.ConsoleIO">
      <summary>Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.ContextWindow">
      <summary>This tool window provides links to help topics based on the current context.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.DataSourceWindow">
      <summary>This tool window displays a list of data sources such as databases for a program.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.DefinitionWindow">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.Disassembly">
      <summary>This tool window displays a disassembly of the source code while debugging.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.DocumentOutline">
      <summary>This tool window provides an outline of an HTML file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.ErrorList">
      <summary>This tool window provides a list of warnings and errors generated during a build process.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.Find1">
      <summary>This tool window provides a list of the search results.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.Find2">
      <summary>This tool window provides a second list of search results.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.FindAdvanced">
      <summary>This tool window provides the ability to search files for a string.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.FindInFiles">
      <summary>This tool window provides the ability to search files for a string.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.FindReplace">
      <summary>This tool window provides the ability to search and replace on the currently opened file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.HelpFavorites">
      <summary>This tool window displays a list of links to favorite topics in the help documentation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.HelpHowDoI">
      <summary>This tool window displays a list of help topics that help answer the question "How do I?"</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.Helpindex">
      <summary>This tool window displays the help documentation index.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.HelpIndexResults">
      <summary>This tool window displays all entries of a selected help index keyword.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.HelpSearch">
      <summary>This tool window displays a search form for searching the help documentation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.ImmediateWindow">
      <summary>This tool window provides a way to enter debugging commands for expression evaluation while debugging.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.IVSMDPropertyBrowser">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.LocalChanges">
      <summary>This tool window displays files that have been changed and that are under source control.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.Locals">
      <summary>This tool window displays a list of all local variables and parameters while debugging.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.MacroExplorer">
      <summary>This tool window provides a list of macros available for use in the Visual Studio shell.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.Memory">
      <summary>This tool window displays the values in a region of memory while debugging.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.Modules">
      <summary>This tool window displays a list of all modules that are loaded during debugging.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.ObjectBrowser">
      <summary>This tool window provides a list of components installed on the system.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.ObjectSearchResultsWindow">
      <summary>This tool window provides the results of searching for a symbol.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.ObjectSearchWindow">
      <summary>This tool window provides the ability to search for a symbol.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.ObjectTestBench">
      <summary>This tool window provides a way to instantiate classes and then interact with them.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.Outputwindow">
      <summary>This tool window displays any output generated by a build process or a program being debugged.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.PortDetails">
      <summary>This tool window displays information about Web services.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.Processes">
      <summary>This tool window displays a list of processes that are running while debugging.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.PropertiesWindow">
      <summary>This tool window provides a list of properties associated with the currently selected file or project in Solution Explorer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.PropertySheetManager">
      <summary>This tool window provides a list of Visual C++ project configurations.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.Registers">
      <summary>This tool window displays a list of CPU registers while debugging.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.ResourceView">
      <summary>This tool window provides a list of resources available in a project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.RunningDocuments">
      <summary>This tool window displays a list of HTML pages that have script running in them.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.SdmDesignerTransactions">
      <summary>For internal debugging use only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.ServerExplorer">
      <summary>This tool window provides a list of servers used for connecting to databases.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.SettingsandConstraints">
      <summary>This tool window displays settings for an item in a distributed system diagram.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.SolutionExplorer">
      <summary>This tool window provides a list of projects and their files in a solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.StartPage">
      <summary>This tool window contains the Start Page that can be the first thing shown when Visual Studio starts.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.StyleOrganizerToolWindow">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.SystemView">
      <summary>This tool window provides a list of elements in a distributed system.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.Tableofcontents">
      <summary>This tool window displays the table of contents for the help documentation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.TaskList">
      <summary>This tool window provides a list of user-specified tasks to be accomplished for a project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.Threads">
      <summary>This tool window displays a list of all threads active while debugging.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.Toolbox">
      <summary>This tool window provides a list of components that can be added to a project, typically through the Windows Forms designer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.TrinityDataWindow">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.UAMSynchronizations">
      <summary>For internal debugging use only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.VCColorPalette">
      <summary>This tool window displays a list of colors that can be used when editing an image.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.VCPropertyManager">
      <summary>This tool window displays configuration properties for Visual C++ projects.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.Watch">
      <summary>This tool window displays user-selected expressions while debugging.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.WebBrowserPreviewWindow">
      <summary>This tool window displays the ASP.NET configuration pages for a Web site project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.ToolWindowGuids80.WebBrowserWindow">
      <summary>This tool window displays a browser in the Visual Studio shell.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.UIContextGuids">
      <summary>Provides a list of GUIDs that are used to identify command contexts.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids.CodeWindow">
      <summary>Specifies a context in which a code window currently has focus.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids.Debugging">
      <summary>Specifies a context in which debugging is active.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids.DesignMode">
      <summary>Specifies a context where the editor is in design mode.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids.Dragging">
      <summary>Specifies a context that occurs while dragging items in Solution Explorer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids.EmptySolution">
      <summary>Specifies a context in which an empty solution has been loaded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids.FullScreenMode">
      <summary>Specifies a context that is active when Visual Studio is in full screen mode.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids.NoSolution">
      <summary>Specifies a context in which no solution is loaded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids.SolutionBuilding">
      <summary>Specifies a context in which a project or solution is currently being built.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids.SolutionExists">
      <summary>Specifies a context in which a solution has been loaded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids.SolutionHasMultipleProjects">
      <summary>Specifies a context in which a loaded solution contains more than one project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids.SolutionHasSingleProject">
      <summary>Specifies a context in which a loaded solution contains a single project.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.UIContextGuids80">
      <summary>Provides more GUIDs that are used to identify command contexts.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids80.CodeWindow">
      <summary>Specifies a context in which a code window currently has focus.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids80.DataSourceWindowAutoVisible">
      <summary>Specifies a context in which a data source window is auto visible.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids80.DataSourceWindowSupported">
      <summary>Specifies a context in which a data source window is supported by the project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids80.Debugging">
      <summary>Specifies a context in which debugging is active.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids80.DesignMode">
      <summary>Specifies a context where the editor is in design mode.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids80.Dragging">
      <summary>Specifies a context that occurs while dragging items in Solution Explorer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids80.EmptySolution">
      <summary>Specifies a context in which an empty solution has been loaded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids80.FullScreenMode">
      <summary>Specifies a context that is active when Visual Studio is in full screen mode.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids80.NoSolution">
      <summary>Specifies a context in which no solution is loaded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids80.NotBuildingAndNotDebugging">
      <summary>Specifies a context in which the solution is not being built or debugged.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids80.SolutionBuilding">
      <summary>Specifies a context in which a project or solution is currently being built.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids80.SolutionExists">
      <summary>Specifies a context in which a solution has been loaded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids80.SolutionExistsAndNotBuildingAndNotDebugging">
      <summary>Specifies a context in which a solution is loaded and is not being built or debugged.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids80.SolutionHasMultipleProjects">
      <summary>Specifies a context in which a loaded solution contains more than one project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids80.SolutionHasSingleProject">
      <summary>Specifies a context in which a loaded solution contains a single project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids80.SolutionOrProjectUpgrading">
      <summary>Specifies a context in which a solution or project is being upgraded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids80.ToolboxInitialized">
      <summary>Specifies a context in which the Toolbox is being initialized.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.UIContextGuids80.WindowsFormsDesigner">
      <summary>Specifies a context in which the Windows Forms designer has focus.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2">
      <summary>Specifies information about a debug target. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.bstrArg">
      <summary>BSTR containing the command line arguments to the exe (<see cref="F:Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION.DLO_CreateProcess" />)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.bstrCurDir">
      <summary>BSTR containing the current directory (<see cref="F:Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION.DLO_CreateProcess" />)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.bstrEnv">
      <summary>BSTR containing the environment settings (<see cref="F:Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION.DLO_CreateProcess" />)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.bstrExe">
      <summary>BSTR containing the name of the executable</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.bstrOptions">
      <summary>BSTR containing custom options, specific to each guidLaunchDebugEngine (NULL is recommended)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.bstrPortName">
      <summary>BSTR containing the name of the port from the supplier specified in <see cref="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.guidPortSupplier" />. (Can be null)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.bstrRemoteMachine">
      <summary>BSTR containing the machine name for a remote machine. Use null for the local machine.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.cbSize">
      <summary>Specifies the size of the VsDebugTargetInfo2 struct.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.dlo">
      <summary>Specifies how this process should be launched or attached.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.dwDebugEngineCount">
      <summary>Specifies the number of debug engine guids in the <see cref="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.guidLaunchDebugEngine" /> array.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.dwProcessId">
      <summary>Specifies the process id (<see cref="F:Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION.DLO_AlreadyRunning" />).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.dwReserved">
      <summary>Reserved for future use - specify null.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.fSendToOutputWindow">
      <summary>Specifies that stdout and stderr are to be routed to the output window</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.guidLaunchDebugEngine">
      <summary>Specifies the guid of the debug engine used for launch, (<see cref="F:Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION.DLO_CreateProcess" />)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.guidPortSupplier">
      <summary>Specifies the port supplier guid</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.guidProcessLanguage">
      <summary>Specifies the language of the hosting process. Used to preload EE's</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.hStdError">
      <summary>Used for file redirection of StdErr.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.hStdInput">
      <summary>Used for file redirection of StdIn.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.hStdOutput">
      <summary>Used for file redirection of StdOut.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.LaunchFlags">
      <summary>Specifies the launch flags that were passed to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsDebuggableProjectCfg.DebugLaunch(System.UInt32)" /></summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.pDebugEngines">
      <summary>Specifies an array of debug engine guids, or null if <see cref="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.dwDebugEngineCount" /> is zero</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsDebugTargetInfo2.pUnknown">
      <summary>Specifies an interface pointer - usage depends on <see cref="T:Microsoft.VisualStudio.Shell.Interop.DEBUG_LAUNCH_OPERATION" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSDEFAULTPREVIEWER"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDEFAULTPREVIEWER.bstrDefBrowserDisplayName"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDEFAULTPREVIEWER.bstrDefBrowserPath"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDEFAULTPREVIEWER.defRes"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDEFAULTPREVIEWER.fIsInternalBrowser"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDEFAULTPREVIEWER.fIsSystemBrowser"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSDRAWITEMSTRUCT"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDRAWITEMSTRUCT.CtlID"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDRAWITEMSTRUCT.CtlType"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDRAWITEMSTRUCT.hdc"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDRAWITEMSTRUCT.hwndItem"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDRAWITEMSTRUCT.itemAction"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDRAWITEMSTRUCT.itemData"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDRAWITEMSTRUCT.itemid"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDRAWITEMSTRUCT.itemState"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSDRAWITEMSTRUCT.rcItem"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSErrorCodes80">
      <summary>Visual Studio error codes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSErrorCodes80.VS_E_MIGRATIONREQUIRESRELOAD">
      <summary>Migration requires a reload.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSErrorCodes80.VS_E_SYNCHRONOUSOPENREQUIRED">
      <summary>A solution or project file cannot be opened asynchronously.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSErrorCodes80.VS_E_VSSETTINGS_INVALIDVERSION">
      <summary>Returned by <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsProfileSettingsFileCollection.AddBrowseFile(System.String,Microsoft.VisualStudio.Shell.Interop.IVsProfileSettingsFileInfo@)" /> if the selected file is of the wrong version.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSErrorCodes80.VS_E_DOCUMENTOPENNOTTRUSTED">
      <summary>Returned by editor invocation if the document cannot be opened safely (template, editor or logical view is untrusted).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSFRAMEMODE2">
      <summary>Specifies additional members for the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSFRAMEMODE" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSFRAMEMODE2.VSFM_AutoHide">
      <summary>Frame mode is autohide, May be combined with other VSFM_ flags.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSNSEBROWSEINFOW">
      <summary>Specifies the namespace extension information for the Browse dialog box.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSNSEBROWSEINFOW.fOnlyShowNSEInTray">
      <summary>Specifies whether the namespace extension icon only is shown in the dialog tray. If set, only the namespace extension icon is shown in the Browse dialog box.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSNSEBROWSEINFOW.lStructSize">
      <summary>DWORD containing the size of the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSNSEBROWSEINFOW" /> struct.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSNSEBROWSEINFOW.pszNamespaceGUID">
      <summary>Specifies the namespace extension GUID as a string</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSNSEBROWSEINFOW.pszProtocolPrefix">
      <summary>Prefix for namespace extension URLs. For example: "msss://".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSNSEBROWSEINFOW.pszTrayDisplayName">
      <summary>Specifies the display name for the namespace extension in dialog tray.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSOBNAVIGATIONINFO3">
      <summary>Specifies information for navigation to an object. Sued in <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList2.LocateNavigationInfo2(Microsoft.VisualStudio.Shell.Interop.VSOBNAVIGATIONINFO3[],Microsoft.VisualStudio.Shell.Interop.VSOBNAVNAMEINFONODE2[],System.Int32,System.Int32@,System.UInt32@)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBNAVIGATIONINFO3.dwCustom">
      <summary>DWORD containing custom information.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBNAVIGATIONINFO3.pguidLib">
      <summary>GUID of the library.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBNAVIGATIONINFO3.pName">
      <summary>Name of the item of interest. The name is in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOBNAVNAMEINFONODE2" /> struct.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBNAVIGATIONINFO3.pszLibName">
      <summary>String containing the library name.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSOBNAVNAMEINFONODE2">
      <summary>Specifies information for navigation to an object. (passed to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList2.GetNavigationInfo2(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSOBNAVIGATIONINFO3[])" /> and <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList2.LocateNavigationInfo2(Microsoft.VisualStudio.Shell.Interop.VSOBNAVIGATIONINFO3[],Microsoft.VisualStudio.Shell.Interop.VSOBNAVNAMEINFONODE2[],System.Int32,System.Int32@,System.UInt32@)" />) </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBNAVNAMEINFONODE2.lltName">
      <summary>Specifies the type of object to navigate to. Values are taken from the LIB_LISTTYPE2 enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBNAVNAMEINFONODE2.pNext"></member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBNAVNAMEINFONODE2.pszName"></member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHCRITERIA2">
      <summary>Specifies search options. Used with <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsObjectList2.GetList2(System.UInt32,System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHCRITERIA2[],Microsoft.VisualStudio.Shell.Interop.IVsObjectList2@)" /> and:<see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsLibrary2.GetList2(System.UInt32,System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHCRITERIA2[],Microsoft.VisualStudio.Shell.Interop.IVsObjectList2@)" /> calls</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHCRITERIA2.dwCustom">
      <summary>DWORD specifying a custom search criteria.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHCRITERIA2.eSrchType">
      <summary>Specifies the type of search to perform. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHTYPE" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHCRITERIA2.grfOptions">
      <summary>Specifies search options. Values are taken from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSOBSEARCHOPTIONS2" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHCRITERIA2.pIVsNavInfo">
      <summary>Specifies an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsNavInfo" /> object to search.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSOBSEARCHCRITERIA2.szName">
      <summary>String containing the object name.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSSAVETREEITEM">
      <summary>Specifies save options for a tree-view item. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSAVETREEITEM.docCookie">
      <summary>Handle of the document in the Running Document Table.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSAVETREEITEM.grfSave">
      <summary>Specifies save options for a document in the running document table (RDT). For a list of values, see <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSRDTSAVEOPTIONS" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSAVETREEITEM.itemid">
      <summary>Identifier of the hierarchy item. For a list of <paramref name="itemid" /> values, see VSITEMID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSAVETREEITEM.pHier">
      <summary>An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSSCCENLISTMENTCHOICE">
      <summary>These values indicate a project's willingness to work with choosing an enlistment (a local working copy of a project or solution that is under source control). Being able to choose an enlistment allows the user to change the location of a stored project when it is pulled from source control.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSCCENLISTMENTCHOICE.VSSCC_EC_NEVER">
      <summary>This project does not support enlistment choice. This is the same as if the project didn't implement the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSccProjectEnlistmentChoice" /> interface.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSCCENLISTMENTCHOICE.VSSCC_EC_OPTIONAL">
      <summary>This project allows enlistment choice but does not require it.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSCCENLISTMENTCHOICE.VSSCC_EC_COMPULSORY">
      <summary>This project requires the user to pick an enlistment.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSSCCPROVIDERBINDING">
      <summary>These are the options a project can return indicating its willingness to work with a custom source control package.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSCCPROVIDERBINDING.VSSCC_PB_STANDARD">
      <summary>This project does not have a custom source control package (this value is the same as not implementing the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSccProjectProviderBinding" /> interface at all).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSCCPROVIDERBINDING.VSSCC_PB_CUSTOM_DISABLED">
      <summary>This project cannot be put under source control because the required custom source control package is not installed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSCCPROVIDERBINDING.VSSCC_PB_CUSTOM">
      <summary>This project not only has a custom source control package, it also can be used immediately.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSCCPROVIDERBINDING.VSSCC_PB_STANDARD_DISABLED">
      <summary>This project is offline and therefore cannot be added to source control at this time.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS2">
      <summary>Provides additional members for the <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS2.SBF_OPERATION_PUBLISHUI">
      <summary>Publish solution (can OR with other flags)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSSOLNBUILDUPDATEFLAGS2.SBF_OPERATION_PUBLISH">
      <summary>Publish the solution (can OR with other flags)</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN">
      <summary>Column definitions for tasks.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN.bstrCanonicalName">
      <summary>String containing the non-localized name of the column header. It must be unique within this provider's column list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN.bstrHeading">
      <summary>String containing the text in header. bstrHeading may be null to indicate an image.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN.bstrLocalizedName">
      <summary>String containing the localized name for the column header.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN.bstrTip">
      <summary>String containing the tooltip for the column header.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN.cxDefaultWidth">
      <summary>The default column width in pixels.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN.cxMinWidth">
      <summary>The minimum column width in pixels.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN.fAllowHide">
      <summary>Flag indicating whether the user is allowed to change the column's visibility.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN.fAllowUserSort">
      <summary>Flag indicating whether the user is allowed to sort by clicking on the column's header.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN.fDescendingSort">
      <summary>Flag indicating the column is sorted in descending order (default is ascending).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN.fDynamicSize">
      <summary>Flag indicating whether the task list is allowed to resize the column automatically to make content fit better.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN.fFitContent">
      <summary>Column will be automatically resized to fit whenever its content changes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN.fMoveable">
      <summary>Flag indicating whether the column may be dragged to another position by the user.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN.fShowSortArrow">
      <summary>Flag indicating whether a sort arrow is shown in the header when the list is sorted by this column.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN.fSizeable">
      <summary>Flag indicating whether the column may be resized by the user.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN.fVisibleByDefault">
      <summary>Flag indicating whether this column is visible by default.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN.iDefaultSortPriority">
      <summary>Specifies if a column is sorted by default.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN.iField">
      <summary>The field index designated by the task provider.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VSTASKCOLUMN.iImage">
      <summary>Index into the provider's image list.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Interop.VsUpToDateCheckFlags">
      <summary>Specifies the reason for checking flags.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.Interop.VsUpToDateCheckFlags.VSUTDCF_DTEEONLY">
      <summary>Design time expression evaluation only</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.VSHelp.SVsHelp">
      <summary>Passed to the <see cref="M:Microsoft.VisualStudio.OLE.Interop.IServiceProvider.QueryService(System.Guid@,System.Guid@,System.IntPtr@)" /> method to return a reference to the SVsHelp interface.</summary>
    </member>
    <member name="T:VSLangProj.SVsProjectItem"></member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v2.0\Microsoft.VisualStudio.TextManager.Interop.9.0.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.TextManager.Interop.9.0</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.AfterCompletorCommit"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.BeforeCompletorCommit"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <param name="pguidCmdGroup"></param>
      <param name="nCmdID"></param>
      <param name="nCmdexecopt"></param>
      <param name="pvaIn"></param>
      <param name="pvaOut"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.GetContextBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <param name="ppCtxBuffer"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.GetContextCaretPos(System.Int32@,System.Int32@)">
      <param name="piLine"></param>
      <param name="piIndex"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.GetContextFocalPoint(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32@)">
      <param name="pSpan"></param>
      <param name="piLen"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.GetContextLocation(System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Int32@)">
      <param name="iPos"></param>
      <param name="iLen"></param>
      <param name="fUseCaretPosition"></param>
      <param name="prc"></param>
      <param name="piTopX"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.GetContextSelection(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <param name="pSelectionSpan"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.GetHostFlags(System.UInt32@)">
      <param name="pdwFlags"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.GetHostWindow(System.IntPtr@)">
      <param name="hwnd"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.GetServiceProvider(Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
      <param name="ppSP"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.GetSmartTagRect(Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <param name="rcSmartTag"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.GetSubjectCaretPos(System.Int32@)">
      <param name="piIndex"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.GetSubjectSelection(System.Int32@,System.Int32@)">
      <param name="piAnchorIndex"></param>
      <param name="piEndIndex"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.GetSubjectText(System.String@)">
      <param name="pbstrSubjectText"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.HighlightMatchingBrace(System.UInt32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <param name="dwFlags"></param>
      <param name="cSpans"></param>
      <param name="rgBaseSpans"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
      <param name="pguidCmdGroup"></param>
      <param name="cCmds"></param>
      <param name="prgCmds"></param>
      <param name="pCmdText"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.ReplaceSubjectTextSpan(System.Int32,System.Int32,System.String)">
      <param name="iStartIndex"></param>
      <param name="iEndIndex"></param>
      <param name="pszText"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.SetContextCaretPos(System.Int32,System.Int32)">
      <param name="iLine"></param>
      <param name="iIndex"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.SetContextSelection(System.Int32,System.Int32,System.Int32,System.Int32)">
      <param name="iStartLine"></param>
      <param name="iStartIndex"></param>
      <param name="iEndLine"></param>
      <param name="iEndIndex"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.SetSubjectCaretPos(System.Int32)">
      <param name="iIndex"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.SetSubjectSelection(System.Int32,System.Int32)">
      <param name="iAnchorIndex"></param>
      <param name="iEndIndex"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.UpdateCompletionStatus(Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet,System.UInt32)">
      <param name="pCompSet"></param>
      <param name="dwFlags"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.UpdateSmartTagWindow(Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow,System.UInt32)">
      <param name="pSmartTagWnd"></param>
      <param name="dwFlags"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost_Corrected.UpdateTipWindow(Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow,System.UInt32)">
      <param name="pTipWindow"></param>
      <param name="dwFlags"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfoRemap">
      <summary>Allows a language service to remap a pending breakpoint from one location to another.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfoRemap.RemapBreakpoint(System.Object,System.Object@)">
      <summary>Remaps a breakpoint.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUserBreakpointRequest"></param>
      <param name="ppMappedBreakpointRequest"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.AfterCompletorCommit"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.BeforeCompletorCommit"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.Exec(System.Guid@,System.UInt32,System.UInt32,System.IntPtr,System.IntPtr)">
      <param name="pguidCmdGroup"></param>
      <param name="nCmdID"></param>
      <param name="nCmdexecopt"></param>
      <param name="pvaIn"></param>
      <param name="pvaOut"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.GetContextBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <param name="ppCtxBuffer"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.GetContextCaretPos(System.Int32@,System.Int32@)">
      <param name="piLine"></param>
      <param name="piIndex"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.GetContextFocalPoint(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32@)">
      <param name="pSpan"></param>
      <param name="piLen"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.GetContextLocation(System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Int32@)">
      <param name="iPos"></param>
      <param name="iLen"></param>
      <param name="fUseCaretPosition"></param>
      <param name="prc"></param>
      <param name="piTopX"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.GetContextSelection(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <param name="pSelectionSpan"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.GetHostFlags(System.UInt32@)">
      <param name="pdwFlags"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.GetHostWindow(System.IntPtr@)">
      <param name="hwnd"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.GetServiceProvider(Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
      <param name="ppSP"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.GetSmartTagRect(Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <param name="rcSmartTag"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.GetSubjectCaretPos(System.Int32@)">
      <param name="piIndex"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.GetSubjectSelection(System.Int32@,System.Int32@)">
      <param name="piAnchorIndex"></param>
      <param name="piEndIndex"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.GetSubjectText(System.String@)">
      <param name="pbstrSubjectText"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.HighlightMatchingBrace(System.UInt32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <param name="dwFlags"></param>
      <param name="cSpans"></param>
      <param name="rgBaseSpans"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],System.IntPtr)">
      <param name="pguidCmdGroup"></param>
      <param name="cCmds"></param>
      <param name="prgCmds"></param>
      <param name="pCmdText"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.ReplaceSubjectTextSpan(System.Int32,System.Int32,System.String)">
      <param name="iStartIndex"></param>
      <param name="iEndIndex"></param>
      <param name="pszText"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.SetContextCaretPos(System.Int32,System.Int32)">
      <param name="iLine"></param>
      <param name="iIndex"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.SetContextSelection(System.Int32,System.Int32,System.Int32,System.Int32)">
      <param name="iStartLine"></param>
      <param name="iStartIndex"></param>
      <param name="iEndLine"></param>
      <param name="iEndIndex"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.SetSubjectCaretPos(System.Int32)">
      <param name="iIndex"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.SetSubjectFromPrimaryBuffer(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <param name="pSpanInPrimary"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.SetSubjectSelection(System.Int32,System.Int32)">
      <param name="iAnchorIndex"></param>
      <param name="iEndIndex"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.UpdateCompletionStatus(Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet,System.UInt32)">
      <param name="pCompSet"></param>
      <param name="dwFlags"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.UpdateSmartTagWindow(Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow,System.UInt32)">
      <param name="pSmartTagWnd"></param>
      <param name="dwFlags"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost_Corrected.UpdateTipWindow(Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow,System.UInt32)">
      <param name="pTipWindow"></param>
      <param name="dwFlags"></param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.VisualStudio.CoreUtility.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.CoreUtility</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Utilities.SingletonBaseMetadataAttribute">
            <summary>
            A base class for attributes that can appear only once on a single component part.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.MultipleBaseMetadataAttribute">
            <summary>
            A base class for attributes that can appear multiple times on a single component part.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.BaseDefinitionAttribute">
            <summary>
            Represents a base definition of the current definition.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.BaseDefinitionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Utilities.BaseDefinitionAttribute"/>.
            </summary>
            <param name="name">The base definition name. Definition names are case-insensitive.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>is null or an empty string.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.BaseDefinitionAttribute.BaseDefinition">
            <summary>
            Gets the base definition name.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.DisplayNameAttribute">
            <summary>
            Provides a display name for an editor component part.
            </summary>    
            <remarks>
            This attribute should be localized wherever it is used.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.DisplayNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Utilities.DisplayNameAttribute"/>.
            </summary>
            <param name="displayName">The display name of an editor component part.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.DisplayNameAttribute.DisplayName">
            <summary>
            Gets the display name of an editor component part.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.IOrderable">
            <summary>
            Associated with an orderable part. 
            </summary>
            <remarks>This interface is helpful when importing orderable parts.</remarks> 
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IOrderable.Name">
            <summary>
            Uniquely identifies a part with respect to parts of the same type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IOrderable.Before">
            <summary>
            The parts before which this part should appear in the list.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IOrderable.After">
            <summary>
            The parts after which this part should appear in the list.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.IPropertyOwner">
            <summary>
            Provides ownership of an arbitrary set of properties.
            </summary>
            <remarks>This interface should be implemented for classes that need to control the lifetimes of their properties.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IPropertyOwner.Properties">
            <summary>
            The collection of properties controlled by the property owner.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.NameAttribute">
            <summary>
            Associates a name with an editor extension part.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.NameAttribute.#ctor(System.String)">
            <summary>
            Constructs a new instance of the attribute.
            </summary>
            <param name="name">The name of the editor extension part.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is an empty string.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.NameAttribute.Name">
            <summary>
            The name of the editor extension part.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.Node`1">
            <summary>
            Holds information about a node of an order graph. Used internally by the orderer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Node`1.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="name">The item's name</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Node`1.OriginalIndex">
            <summary>
            The original index of the item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Node`1.Name">
            <summary>
            Name of the node.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Node`1.Item">
            <summary>
            The item that being sorted the node represents.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Node`1.ComesBeforeNodes">
            <summary>
            Nodes that come later in the list.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.Node`1.ComesAfterNodes">
            <summary>
            Nodes that come earlier in the list.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.OrderAttribute">
            <summary>
            Orders multiple instances of an extension part.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.OrderAttribute.Before">
            <summary>
            The extension part to which this attribute is applied should be ordered before 
            the extension part with the name specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value is null.</exception>
            <exception cref="T:System.ArgumentException">The value is an empty string.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.OrderAttribute.After">
            <summary>
            The extension part to which this attribute is applied should be ordered after
            the extension part with the name specified.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value is null.</exception>
            <exception cref="T:System.ArgumentException">The value is an empty string.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.Orderer">
            <summary>
            Performs a topological sort of orderable extension parts.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Orderer.Order``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})">
            <summary>
            Orders a list of items that are all orderable, that is, items that implement the IOrderable interface. 
            </summary>
            <param name="itemsToOrder">The list of items to sort.</param>
            <returns>The list of sorted items.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="itemsToOrder"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Orderer.TopologicalSort``2(System.Collections.Generic.Dictionary{Microsoft.VisualStudio.Utilities.Node{System.Lazy{``0,``1}},System.Int32})">
            <summary>
            Orders nodes of the graph using a topological sort algorithm.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Orderer.RemoveIncomingEdgesFromChildNodes``2(Microsoft.VisualStudio.Utilities.Node{System.Lazy{``0,``1}},System.Collections.Generic.List{Microsoft.VisualStudio.Utilities.Node{System.Lazy{``0,``1}}})">
            <summary>
            Removes references to the root from all the nodes that follow it.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Orderer.BuildGraphData``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})">
            <summary>
            Builds a graph that represents relationships between the items.
            </summary>
            <param name="itemsToOrder">The list of items that are being ordered.</param>
            <returns>Set of graph nodes for the given items.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Orderer.TryGetNodeDetails``2(System.Lazy{``0,``1},System.String@,System.Collections.Generic.IEnumerable{System.String}@,System.Collections.Generic.IEnumerable{System.String}@)">
            <summary>
            Check the node and try to extract its ordering details.
            </summary>
            <param name="item">The item to interrogate</param>
            <param name="name">The name of the item if s available</param>
            <param name="comesBeforeItem">The list of names items this one comes before</param>
            <param name="comesAfterItem">The list of names of items this one comes after</param>
            <returns>true if the item needs to be a part of the ordering, false if it should be skipped</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Orderer.UpdateReferenceToLaterNode``2(System.Collections.Generic.Dictionary{Microsoft.VisualStudio.Utilities.Node{System.Lazy{``0,``1}},System.Int32},System.Collections.Generic.Dictionary{System.String,Microsoft.VisualStudio.Utilities.Node{System.Lazy{``0,``1}}},Microsoft.VisualStudio.Utilities.Node{System.Lazy{``0,``1}},System.String)">
            <summary>
            Fix up references between the node that is being added to graph and the one that comes after it.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Orderer.UpdateReferenceToEarlierNode``2(System.Collections.Generic.Dictionary{Microsoft.VisualStudio.Utilities.Node{System.Lazy{``0,``1}},System.Int32},System.Collections.Generic.Dictionary{System.String,Microsoft.VisualStudio.Utilities.Node{System.Lazy{``0,``1}}},Microsoft.VisualStudio.Utilities.Node{System.Lazy{``0,``1}},System.String)">
            <summary>
            Fix up references between the node that is being added to graph and the one that comes before it.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Orderer.FindRoots``2(System.Collections.Generic.Dictionary{Microsoft.VisualStudio.Utilities.Node{System.Lazy{``0,``1}},System.Int32})">
            <summary>
            Finds all nodes with no incoming edges 
            (which represent items that don't have any other ones before them).
            The returned list contains item sorted in the order corresponding to their position in the original list. 
            This is done to make this topological sort implementation into a stable sort.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Orderer.AddRoot``2(System.Collections.Generic.List{Microsoft.VisualStudio.Utilities.Node{System.Lazy{``0,``1}}},Microsoft.VisualStudio.Utilities.Node{System.Lazy{``0,``1}})">
            <summary>
            Add a new root to the list of current roots while keeping the list sorted based on the original index positions
            (this is done to make this sort implementation stable).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Orderer.BreakCircularReference``2(System.Collections.Generic.Dictionary{Microsoft.VisualStudio.Utilities.Node{System.Lazy{``0,``1}},System.Int32})">
            <summary>
            Break a circular reference in the graph.
            </summary>
            <returns>Returns a new root node.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Orderer.RemoveNodeFromList``2(System.Collections.Generic.List{Microsoft.VisualStudio.Utilities.Node{System.Lazy{``0,``1}}},Microsoft.VisualStudio.Utilities.Node{System.Lazy{``0,``1}})">
            <summary>
             Removes a node from the list. The node MUST exist in the list.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.Orderer.CompareTwoRootsByOrigIndex``2(Microsoft.VisualStudio.Utilities.Node{System.Lazy{``0,``1}},Microsoft.VisualStudio.Utilities.Node{System.Lazy{``0,``1}})">
            <summary>
            Compares two nodes by their original index.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.PropertyCollection">
            <summary>
            Allows property owners to control the lifetimes of the properties in the collection. 
            </summary>
            <remarks>This collection is synchronized in order to allow access by multiple threads.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.PropertyCollection.AddProperty(System.Object,System.Object)">
            <summary>
            Adds a new property to the collection.
            </summary>
            <param name="key">The key by which the property can be retrieved. Must be non-null.</param>
            <param name="property">The property to associate with the key.</param>
            <exception cref="T:System.ArgumentException">An element with the same key already exists in the PropertyCollection.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.PropertyCollection.RemoveProperty(System.Object)">
            <summary>
            Removes the property associated with the specified key.
            </summary>
            <param name="key">The key of the property to remove.</param>
            <returns><c>true</c> if the property was found and removed, <c>false</c> if the property was not found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.PropertyCollection.GetOrCreateSingletonProperty``1(System.Object,System.Func{``0})">
            <summary>
            Gets or creates a property of type <typeparamref name="T"/> from the property collection. If
            there is already a property with the specified <paramref name="key"/>, returns the existing property. Otherwise,
            uses <paramref name="creator"/> to create an instance of that type and add it to the collection with the specified <paramref name="key"/>.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="key">The key of the property to get or create.</param>
            <param name="creator">The delegate used to create the property (if needed).</param>
            <returns>The property that was requested.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.PropertyCollection.GetOrCreateSingletonProperty``1(System.Func{``0})">
            <summary>
            Gets or creates a property of type <typeparamref name="T"/> from the property collection. If
            there is already a property of that type, it returns the existing property. Otherwise, it
            uses <paramref name="creator"/> to create an instance of that type.
            </summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="creator">The delegate used to create the property (if needed).</param>
            <returns>An instance of the property.</returns>
            <remarks>The key used in the property collection will be typeof(T).</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.PropertyCollection.GetProperty``1(System.Object)">
            <summary>
            Gets the property associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The property value, or null if the property is not set.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/> does not exist in the property collection.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.PropertyCollection.GetProperty(System.Object)">
            <summary>
            Gets the property associated with the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>The property value, or null if the property is not set.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"><paramref name="key"/> does not exist in the property collection.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.PropertyCollection.TryGetProperty``1(System.Object,``0@)">
            <summary>
            Gets the property associated with the specified key.
            </summary>
            <typeparam name="TProperty">The type of the property associated with the specified key.</typeparam>
            <param name="key">The key.</param>
            <param name="property">The retrieved property, or default(TValue) if there is
            no property associated with the specified key.</param>
            <returns><c>true</c> if the property was found, otherwise <c>false</c>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.PropertyCollection.ContainsProperty(System.Object)">
            <summary>
            Determines whether the property collection contains a property for the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns><c>true</c> if the property exists, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.PropertyCollection.SetProperty(System.Object,System.Object)">
            <summary>
            Sets the property value for a given key.
            </summary>
            <param name="key">The key.</param>
            <param name="property">The property to set.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="key"/> is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.PropertyCollection.Item(System.Object)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> with the specified key.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.PropertyCollection.PropertyList">
            <summary>
            Returns the property collection as a read-only collection.
            </summary>
            <value>The read-only collection.</value>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.FileExtensionToContentTypeDefinition">
            <summary>
            Specifies a mapping between a content type and a file extension.
            </summary>
            <remarks> 
            Because you cannot subclass this type, you can use the [Export] attribute with no type.
            </remarks>
            <example>
            internal sealed class Components
            {
               [Export]
               [FileExtension(".abc")]
               [ContentType("alphabet")]
               internal FileExtensionToContentTypeDefinition abcFileExtensionDefinition;
               
               { other components }
            }
            </example>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.FileExtensionAttribute">
            <summary>
            Identifies a file extension.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.FileExtensionAttribute.#ctor(System.String)">
            <summary>
            Constructs a new instance of the attribute.
            </summary>
            <param fileExtension="fileExtension">The file extension.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileExtension"/> is null or empty.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.FileExtensionAttribute.FileExtension">
            <summary>
            Gets the file extension.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.IContentTypeDefinition">
            <summary>
            Describes a content type that is being introduced using <see cref="T:Microsoft.VisualStudio.Utilities.IContentTypeDefinitionSource"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IContentTypeDefinition.Name">
            <summary>
            The case-insensitive name of the content type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IContentTypeDefinition.BaseDefinitions">
            <summary>
            The case-insensitive names of the base types of the content type. May be of zero length.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.IContentTypeDefinitionSource">
            <summary>
            Defines an alternate source for content type definitions that should be processed together
            with content types introduced statically using <see cref="T:Microsoft.VisualStudio.Utilities.ContentTypeDefinition"/>. This is intended
            primarily for legacy VS content types.
            This is a MEF contract type. There is no associated metadata.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IContentTypeDefinitionSource.Definitions">
            <summary>
            Content type definitions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.IContentTypeRegistryService">
            <summary>
            The service that maintains the collection of content types.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IContentTypeRegistryService))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IContentTypeRegistryService.GetContentType(System.String)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"></see> object with the specified <paramref name="typeName"/>.
            </summary>
            <param name="typeName">The name of the content type. Name comparisons are case-insensitive.</param>
            <returns>The content type, or null if no content type is found.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IContentTypeRegistryService.AddContentType(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates and adds a new content type.
            </summary>
            <param name="typeName">The name of the content type.</param>
            <param name="baseTypeNames">The list of content type names to be used as base content types. Optional.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"></see>.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="typeName"/> is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="typeName"/> or one of the <paramref name="baseTypeNames"/> 
            is the name of <see cref="P:Microsoft.VisualStudio.Utilities.IContentTypeRegistryService.UnknownContentType"/>, or the content type already exists, or one of the base types would
            introduce a cyclic base type relationship.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IContentTypeRegistryService.RemoveContentType(System.String)">
            <summary>
            Removes a content type.
            </summary>
            <remarks>The "unknown" content type cannot be removed. Any content type that is used for file extension 
            mapping or as a base for other content types cannot be removed.</remarks>
            <param name="typeName">The content type to be removed. </param>
            <exception cref="T:System.InvalidOperationException">The specified content type cannot be removed.</exception>
            <remarks>Has no effect if <paramref name="typeName"/> is not the name of a registered content type.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IContentTypeRegistryService.UnknownContentType">
            <summary>
            Gets the "unknown" content type.
            </summary>
            <remarks>The "unknown" content type indicates that the content type cannot be determined.</remarks>
            <value>This value is never null.</value>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IContentTypeRegistryService.ContentTypes">
            <summary>Gets an enumeration of all content types, including the "unknown" content type.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.IFileExtensionRegistryService">
            <summary>
            The service that manages associations between file extensions and content types.
            </summary>
            <remarks>This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IFileExtensionRegistryService))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IFileExtensionRegistryService.GetContentTypeForExtension(System.String)">
            <summary>
            Gets the content type associated with the given file extension.
            </summary>
            <param name="extension">The file extension.  It cannot be null, and it should not contain a period.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"></see> associated with this extension. If no association exists, it returns the "unknown" content type. It never returns null.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IFileExtensionRegistryService.GetExtensionsForContentType(Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Gets the list of file extensions associated with the specified content type.
            </summary>
            <param name="contentType">The content type. It cannot be null.</param>
            <returns>The list of file extensions associated with the content type.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IFileExtensionRegistryService.AddFileExtension(System.String,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Adds a new file extension to the registry.
            </summary>
            <param name="extension">The file extension (the period is optional).</param>
            <param name="contentType">The content type for the file extension.</param>
            <exception cref="T:System.InvalidOperationException"><see paramref="extension"/> is already present in the registry.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IFileExtensionRegistryService.RemoveFileExtension(System.String)">
            <summary>
            Removes the specified file extension from the registry.
            </summary>
            <remarks>If the specified extension does not exist, then the method does nothing.</remarks>
            <param name="extension">The file extension (the period is optional).</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ContentTypeAttribute">
            <summary>
            Declares an association between an extension part and a particular content type.
            </summary>
            <seealso cref="T:Microsoft.VisualStudio.Utilities.IContentType"></seealso>
            <seealso cref="T:Microsoft.VisualStudio.Utilities.IContentTypeRegistryService"></seealso>
            <seealso cref="T:Microsoft.VisualStudio.Utilities.ContentTypeDefinition"></seealso>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.ContentTypeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Utilities.ContentTypeAttribute"/>.
            </summary>
            <param name="name">The content type name. 
            Content type names are case-insensitive.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/>is null or an empty string.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.ContentTypeAttribute.ContentTypes">
            <summary>
            The content type name.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.ContentTypeDefinition">
            <summary>
            Defines a content type.
            </summary>
            <remarks> 
            Because you cannot subclass this type, you can use the [Export] attribute with no type.
            </remarks>
            <example>
            internal sealed class Components
            {
               [Export]
               [Name("Example")]            // required
               [BaseDefinition("text")]     // zero or more BaseDefinitions are allowed
               internal ContentTypeDefinition exampleDefinition;
               
               { other components }
            }
            </example>
        </member>
        <member name="T:Microsoft.VisualStudio.Utilities.IContentType">
            <summary>
            The content type of an object.
            </summary>
            <remarks>All content types are identified by a unique name. 
            The <see cref="T:Microsoft.VisualStudio.Utilities.IContentTypeRegistryService"></see> can return an <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"></see> object to allow clients to access additional information.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Utilities.IContentType.IsOfType(System.String)">
            <summary>
            Returns <c>true</c> if this <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"></see>
            derives from the content type specified by <paramref name="type"/>.
            </summary>
            <param name="type">The name of the base content type.</param>
            <returns><c>true</c> if this content type derives from the one specified by <paramref name="type"/>otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IContentType.TypeName">
            <summary>
            The name of the content type.
            </summary>
            <value>This name must be unique, and must not be null.</value>
            <remarks>Comparisons performed on this name are case-insensitive.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IContentType.DisplayName">
            <summary>
            The display name of the content type.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Utilities.IContentType.BaseTypes">
            <summary>
            The set of all content types from which the current <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"></see> is derived.
            </summary>
            <value>This value is never null, though it may be the empty set.</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v2.0\Microsoft.VisualStudio.Shell.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Shell</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.VSConstants">
      <summary>Use this class to access common Visual Studio constants.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.ALL"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.BuildOrder">
      <summary>Use this legacy GUID to access a specific output pane.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.BuildOutput">
      <summary>Use this legacy GUID to access a specific output pane.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CEF_CLONEFILE">
      <summary>An obsolete flag combined bitwise as the first parameter of the method <see cref="M:Microsoft.VisualStudio.Package.EditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CEF_OPENASNEW">
      <summary>Combined bitwise as the first parameter of the method <see cref="M:Microsoft.VisualStudio.Package.EditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)" />, this indicates the editor factory should perform necessary corrections.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CEF_OPENFILE">
      <summary>Combined bitwise as the first parameter of the method <see cref="M:Microsoft.VisualStudio.Package.EditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)" />, this flag is mutually exclusive with <see cref="F:Microsoft.VisualStudio.VSConstants.CEF_CLONEFILE" />. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CEF_SILENT">
      <summary>Indicates the editor factory should create the editor silently. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID_ComPlusOnlyDebugEngine"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID_HtmDocData">
      <summary>The document's data is HTML format.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID_HtmedPackage">
      <summary>GUID of the HTML package.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID_HtmlLanguageService">
      <summary>GUID of the HTML language service.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID_MiscellaneousFilesProject">
      <summary>CLSID for Miscellaneous Files project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID_SolutionItemsProject">
      <summary>Project type CLSID for Solution Items project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsCfgProviderEventsHelper">
      <summary>Provide notifications when configuration-related events are fired. Implemented by the environment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsDocOutlinePackage">
      <summary>The CLSID of the document outline package window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsEnvironmentPackage">
      <summary>The CLSID for Visual Studio Environment Package.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsTaskList">
      <summary>The CLSID for Visual Studio Environment Task List.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsTaskListPackage">
      <summary>The CLSID for Visual Studio Environment Task List Package.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CLSID_VsUIHierarchyWindow">
      <summary>The CLSID for Visual Studio Environment Hierarchy Window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.cmdidToolsOptions">
      <summary>On the Tools menu, the command for options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CPDN_SELCHANGED">
      <summary>Sent from a page dialog to Component Selector dialog, informs of selection change on page.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CPDN_SELDBLCLICK">
      <summary>Sent from a page dialog to Component Selector dialog, informs of a double click on a selected item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CPPM_CLEARSELECTION">
      <summary>Resets and clears selection in list of available components on the Component Selector dialog.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CPPM_GETSELECTION">
      <summary>Retrieves information about selection on the Component Selector dialog.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CPPM_INITIALIZELIST">
      <summary>Initializes the list of available components on the Component Selector dialog.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CPPM_INITIALIZETAB">
      <summary>Initializes a tab with <see cref="T:Microsoft.VisualStudio.Package.Variant" /> in <see cref="T:Microsoft.VisualStudio.Shell.Interop.VSCOMPONENTSELECTORTABINIT" /> on the Component Selector dialog.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CPPM_QUERYCANSELECT">
      <summary>Determine whether the Select button should be enabled on the Component Selector dialog.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.CPPM_SETMULTISELECT">
      <summary>Sets the multiple-selection mode on the Component Selector dialog.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DebugOutput">
      <summary>Use this legacy GUID to access a specific output pane.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_ARRAYISLOCKED">
      <summary>An HRESULT that indicates that the array is currently locked.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_BADCALLEE">
      <summary>A COM return value.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_BADINDEX">
      <summary>A return value that indicates subscript out of range.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_BADPARAMCOUNT">
      <summary>An error return value that indicates that the number of elements provided to the method is different from the number of arguments accepted by the method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_BADVARTYPE">
      <summary>One of the method arguments is not a valid variant type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_BUFFERTOOSMALL">
      <summary>A return error that indicates the destination token buffer is too small.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_DIVBYZERO">
      <summary>A return error that indicates a divide by zero error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_EXCEPTION">
      <summary>This return value indicates that the call generated an exception.  The usual implementation is to specify that an argument of the method that returned this error is a pointer to a structure that contains exception information.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_MEMBERNOTFOUND">
      <summary>A return value indicating that the requested member does not exist, or the call to <paramref name="Invoke" /> tried to set the value of a read-only property.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_NONAMEDARGS">
      <summary>A return value indicating that the invoked implementation of IDispatch does not support named arguments.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_NOTACOLLECTION">
      <summary>A return value indicating an unexpected argument type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_OVERFLOW">
      <summary>An error that indicates that a value could not be coerced to its expected representation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_PARAMNOTFOUND">
      <summary>A return value that indicates that one of the parameter DISPIDs does not correspond to a parameter on the method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_PARAMNOTOPTIONAL">
      <summary>A return value that indicates that a required parameter was omitted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_TYPEMISMATCH">
      <summary>A return value that indicates that one or more of the parameters could not be coerced.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_UNKNOWNINTERFACE">
      <summary>A return value that indicates that the interface identifier passed in <paramref name="riid" /> is not equal to IID_NULL.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_UNKNOWNLCID">
      <summary>A return value that indicates that the member being invoked interprets string arguments according to the Locale ID (LCID), and the LCID is not recognized.  If the LCID is not needed to interpret arguments, this error should not be returned.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DISP_E_UNKNOWNNAME">
      <summary>A return value that indicates that one or more of the names were not known. The returned DISPIDs contain DISPID_UNKNOWN for each entry that corresponds to an unknown name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.DocumentFrame">
      <summary>A constant referenced in selection events to describe which component of the shell has just been selected.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.E_ABORT">
      <summary>A return value that may indicate an explicit cancellation action or some process that could no longer proceed after (for instance) both undo and rollback failed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.E_ACCESSDENIED">
      <summary>A return value that describes a general access denied error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.E_FAIL">
      <summary>Error HRESULT for a generic failure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.E_HANDLE">
      <summary>A return value that indicates an invalid handle.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.E_INVALIDARG">
      <summary>Error HRESULT for an invalid argument.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.E_NOINTERFACE">
      <summary>Error HRESULT for the request of a not implemented interface.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL">
      <summary>Error HRESULT for the call to a method that is not implemented.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.E_OUTOFMEMORY">
      <summary>Error HRESULT for out of memory.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.E_PENDING">
      <summary>A return value that indicates the availability of an asynchronously accessed interface.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.E_POINTER">
      <summary>A return value that indicates that an invalid pointer, usually null, was passed as a parameter.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.E_UNEXPECTED">
      <summary>A return value that indicates that the result of the method call is outside of the error cases the client code can readily handle.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_BrowseFilePage">
      <summary>The BrowseFile page.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_BuildOutputWindowPane">
      <summary>This constant represents the GUID for the interface <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsOutputWindowPane" /> which is implemented by the shell's OutputWindow tool window.  It is used by client code to display messages in the output window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_COMClassicPage">
      <summary>A Visual Studio component selector page GUID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_COMPlusPage">
      <summary>A Visual Studio component selector page GUID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_DefaultEditor">
      <summary>A common system defined editor GUID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_ExternalEditor">
      <summary>A common editor GUID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_HTMEDAllowExistingDocData">
      <summary>GUID used to mark a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VsTextBuffer" /> in order to tell to the HTML editor factory to accept preexisting doc data.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_HtmlEditorFactory">
      <summary>GUID of the HTML editor factory.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_ItemType_PhysicalFile">
      <summary>A GUID constant used to specify that the type is a physical file on disk or the Web.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_ItemType_PhysicalFolder">
      <summary>A GUID constant used to specify that the type is a physical folder on disk or the Web.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_ItemType_SubProject">
      <summary>A GUID constant used to specify that the type is a nested hierarchy project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_ItemType_VirtualFolder">
      <summary>A GUID constant used to specify that the type is a non-physical folder.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_OutWindowDebugPane">
      <summary>A GUID constant used to specify the debug pane inside the output window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_OutWindowGeneralPane">
      <summary>The GUID of the pseudo service that returns the General output pane <see cref="F:Microsoft.VisualStudio.VSConstants.SID_SVsGeneralOutputWindowPane" /> in the VS environment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_ProjectDesignerEditor">
      <summary>The propejct designer guid.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_SolutionPage">
      <summary>A Visual Studio component selector page GUID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_TextEditorFactory">
      <summary>GUID of the Text editor factory.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VS_DEPTYPE_BUILD_PROJECT"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsNewProjectPseudoFolder">
      <summary>String resource ID for Visual Studio pseudo-folder.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VSStandardCommandSet97">
      <summary>This GUID identifies the standard set of commands known by Visual Studio 97 (version 6).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewAll">
      <summary>The GUID for the highest abstraction task lists.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewCheckedTasks">
      <summary>The GUID for a certain flavor or task lists.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewCommentTasks">
      <summary>The GUID for a certain flavor or task lists.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewCompilerTasks">
      <summary>The GUID for a certain flavor or task lists.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewCurrentFileTasks">
      <summary>The GUID for a certain flavor or task lists.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewHTMLTasks">
      <summary>The GUID for a certain flavor or task lists.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewShortcutTasks">
      <summary>The GUID for a certain flavor or task lists.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewUncheckedTasks">
      <summary>The GUID for a certain flavor or task lists.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsTaskListViewUserTasks">
      <summary>The GUID for a certain flavor or task lists.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.GUID_VsUIHierarchyWindowCmds">
      <summary>A GUID that defines the command group related to the hierarchy window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.guidCOMPLUSLibrary"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.IID_IUnknown">
      <summary>GUID of the IUnknown COM interface.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Code">
      <summary>
        <see cref="F:Microsoft.VisualStudio.VSConstants.GUID_VSStandardCommandSet97" />cmdidOpenWith handlers should pass this value to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> method to get the Open With dialog, in this case on possible Code Views.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Debugging">
      <summary>
        <see cref="F:Microsoft.VisualStudio.VSConstants.GUID_VSStandardCommandSet97" />cmdidOpenWith handlers should pass this value to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> method to get the Open With dialog, in this case populated with possible <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Debugging" /> debugging views which map to the same view as <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Code" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Designer">
      <summary>
        <see cref="F:Microsoft.VisualStudio.VSConstants.GUID_VSStandardCommandSet97" />cmdidOpenWith handlers should pass this value to the <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> method to get the Open With dialog, in this case to View Form designer views.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_Primary">
      <summary>
        <see cref="F:Microsoft.VisualStudio.VSConstants.GUID_VSStandardCommandSet97" />cmdidOpenWith handlers should pass this value to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> method to get the Open With dialog, in this case the default/primary view of the editor factory.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView">
      <summary>
        <see cref="F:Microsoft.VisualStudio.VSConstants.GUID_VSStandardCommandSet97" />cmdidOpenWith handlers should pass this value to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> method to get the Open With dialog, in this for a document or data text editor view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_UserChooseView">
      <summary>
        <see cref="F:Microsoft.VisualStudio.VSConstants.GUID_VSStandardCommandSet97" />cmdidOpenWith handlers should pass this value to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsUIShellOpenDocument.OpenStandardEditor(System.UInt32,System.String,System.Guid@,System.String,Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchy,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame@)" /> method which prompts the user to choose which user-defined view to use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_ADVF">
      <summary>A legacy OLE error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_ADVISENOTSUPPORTED">
      <summary>A legacy OLE error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_BLANK">
      <summary>A legacy OLE error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_CANT_BINDTOSOURCE">
      <summary>A legacy OLE error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_CANT_GETMONIKER">
      <summary>A legacy OLE error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_CANTCONVERT">
      <summary>A legacy OLE error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_CLASSDIFF">
      <summary>A legacy OLE error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_ENUM_NOMORE">
      <summary>A legacy OLE error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_INVALIDHWND">
      <summary>A legacy OLE error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_INVALIDRECT">
      <summary>A legacy OLE error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_NOCACHE">
      <summary>A legacy OLE error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_NOCONNECTION">
      <summary>A legacy OLE error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_NOSTORAGE">
      <summary>A legacy OLE error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_NOT_INPLACEACTIVE">
      <summary>A legacy OLE error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_NOTRUNNING">
      <summary>A legacy OLE error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_OLEVERB">
      <summary>A legacy OLE error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_PROMPTSAVECANCELLED">
      <summary>The user was prompted to save but chose the Cancel button from the prompt message box.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_STATIC">
      <summary>The cache is for a static object and it already has a cache node.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.OLE_E_WRONGCOMPOBJ">
      <summary>The versions of COMPOBJ.DLL and OLE2.DLL on your machine are incompatible with each other.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.PropertyBrowserSID">
      <summary>Describes what component of the shell has just been selected.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.S_FALSE">
      <summary>HRESULT for false.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.S_OK">
      <summary>Generic HRESULT for success.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.SELECTED"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.SID_SUIHostCommandDispatcher">
      <summary>The name of the Visual Studio service that implements <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.SID_SVsGeneralOutputWindowPane">
      <summary>Returns an IID_IVsOutputWindowPane interface of the General output pane in the Visual Studio environment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.SID_SVsToolboxActiveXDataProvider">
      <summary>A Visual Studio toolbox service.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.StartupProject">
      <summary>A constant referenced in selection events to describe which component of the shell has just been selected, in this case in response to project startup.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_CodeWindow">
      <summary>Returns the GUID of the command associated with a change in UI context.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_Debugging">
      <summary>Specifies that UI context is the switch to a debugging window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_DesignMode">
      <summary>Returns the GUID of the command associated with a change to design mode in UI context.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_Dragging">
      <summary>Returns the GUID of the command associated with the UI drag/drop operation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_EmptySolution">
      <summary>Packages may define a command that is associated with a change in UI context.  Use UICONTEXT_EmptySolution to return the GUID of the command associated with this UI state.  In this case the UI context is an empty solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_FullScreenMode">
      <summary>Packages may define a command that is associated with a change in UI context.  Use UICONTEXT_FullScreenMode to return the GUID of the command associated with this UI state.  In this case the UI context is that the Full Screen command from the View menu has been selected.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_NoSolution">
      <summary>Packages may define a command that is associated with a change in UI context.  Use UICONTEXT_NoSolution to return the GUID of the command associated with this UI state.  In this case the UI context is that there is no solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_SolutionBuilding">
      <summary>Packages may define a command that is associated with a change in UI context.  Use UICONTEXT_SolutionBuilding to return the GUID of the command associated with this UI state.  In this case the UI context is Build solution or build project mode is in effect.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_SolutionExists">
      <summary>Packages may define a command that is associated with a change in UI context.  Use UICONTEXT_SolutionExists to return the GUID of the command associated with this UI state.  In this case the UI context is that a solution exists, though the number of projects loaded is not pertinent to this call.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_SolutionHasMultipleProjects">
      <summary>Packages may define a command that is associated with a change in UI context. Use UICONTEXT_SolutionHasMultipleProjects to return the GUID of the command associated with this UI state. In this case the UI context is that a solution exists and has multiple projects loaded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UICONTEXT_SolutionHasSingleProject">
      <summary>Packages may define a command that is associated with a change in UI context. Use UICONTEXT_SolutionHasMultipleProjects to return the GUID of the command associated with this UI state. In this case the UI context is that a solution exists and has a single project loaded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UNDO_E_CLIENTABORT">
      <summary>Error HRESULT for a client abort.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UndoManager">
      <summary>A constant referenced in selection events to describe which component of the shell has just been selected.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.UserContext">
      <summary>A constant referenced in selection events to describe which component of the shell has just been selected.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VS_BUILDABLEPROJECTCFGOPTS_BUILD_ACTIVE_DOCUMENT_ONLY"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VS_BUILDABLEPROJECTCFGOPTS_BUILD_SELECTION_ONLY"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VS_BUILDABLEPROJECTCFGOPTS_PRIVATE"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VS_BUILDABLEPROJECTCFGOPTS_REBUILD"></member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_BUSY">
      <summary>A constant returned by interfaces to asynchronous behavior when the object in question in already busy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_INCOMPATIBLEDOCDATA">
      <summary>A Visual Studio specific error HRESULT for "Incompatible document data".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_PACKAGENOTLOADED">
      <summary>A Visual Studio specific error HRESULT that indicates "Package not loaded."</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_PROJECTALREADYEXISTS">
      <summary>A Visual Studio-specific error HRESULT that indicates that the "Project already exists."</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_PROJECTMIGRATIONFAILED">
      <summary>A Visual Studio specific error HRESULT that indicates "Project configuration failed."</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_PROJECTNOTLOADED">
      <summary>A Visual Studio-specific error HRESULT that indicates "Project not loaded."</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_SOLUTIONALREADYOPEN">
      <summary>A Visual Studio-specific error HRESULT that indicates "Solution already open."</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_SOLUTIONNOTOPEN">
      <summary>A Visual Studio-specific error HRESULT that indicates "Solution not open."</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_SPECIFYING_OUTPUT_UNSUPPORTED">
      <summary>Returned by build interfaces that have parameters for specifying an array of IVsOutput's but the implementation can only apply the method to all outputs.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_UNSUPPORTEDFORMAT">
      <summary>
        <see cref="M:Microsoft.VisualStudio.Package.EditorFactory.CreateEditorInstance(System.UInt32,System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr,System.IntPtr@,System.IntPtr@,System.String@,System.Guid@,System.Int32@)" /> returns this value if the document has a format that cannot be opened in the editor.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VS_E_WIZARDBACKBUTTONPRESS">
      <summary>An HRESULT value that indicates that the user hit the back button in a Visual Studio wizard.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VS_S_PROJECTFORWARDED">
      <summary>A Visual Studio-specific error HRESULT that indicates "Project forwarded."</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VS_S_TBXMARKER">
      <summary>A Visual Studio-specific constant for a "Toolbox marker."</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSCOOKIE_NIL">
      <summary>A Visual Studio-specific constant that indicates that a cookie has not been set.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL">
      <summary>A Visual Studio item identifier that represents the absence of a project item. This value is used when there is no current selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT">
      <summary>A Visual Studio item identifier that represents the root of a project hierarchy and is used to identify the entire hierarchy, as opposed to a single item.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION">
      <summary>A Visual Studio item identifier that represents the currently selected item or items, which can include the root of the hierarchy.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSM_ENTERMODAL">
      <summary>A Visual Studio-specific constant for broadcasting a notification message via <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsBroadcastMessageEvents.OnBroadcastMessage(System.UInt32,System.IntPtr,System.IntPtr)" /> that indicates the beginning of modality.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSM_EXITMODAL">
      <summary>A Visual Studio-specific constant for broadcasting a notification message via <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsBroadcastMessageEvents.OnBroadcastMessage(System.UInt32,System.IntPtr,System.IntPtr)" /> that indicates the end of modality.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSM_TOOLBARMETRICSCHANGE">
      <summary>A Visual Studio-specific constant for broadcasting a notification message via <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsBroadcastMessageEvents.OnBroadcastMessage(System.UInt32,System.IntPtr,System.IntPtr)" /> indicating that the command bar metrics have changed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2K">
      <summary>GUID for the Windows 2000 command set. This is a set of standard editor commands.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.WindowFrame">
      <summary>A constant referenced in selection events to describe which component of the shell has just been selected.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID">
      <summary>These constants make some basic menu commands available to managed code.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TYPECHAR">
      <summary> Type character</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BACKSPACE">
      <summary>Delete Backwards; Delete the current selection, or if no selection, the previous character.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RETURN">
      <summary>Break Line; Insert a line break at the current caret position.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TAB">
      <summary>Insert Tab; Insert a tab character at the current caret position.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BACKTAB">
      <summary>Tab Left; Move the caret back one tab stop.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETE">
      <summary>Delete; Delete the current selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LEFT">
      <summary>Char Left; Move the caret left one character.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LEFT_EXT">
      <summary>Char Left Extend; Move the caret left one character, extending the selection..</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RIGHT">
      <summary>Char Right; Move the caret right one character.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RIGHT_EXT">
      <summary>Char Right Extend; Move the caret right one character, extending the selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UP">
      <summary>Line Up.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UP_EXT">
      <summary>Line Up Extend; Move the caret up one line, extending the selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DOWN">
      <summary>Line Down; Move the caret down one line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DOWN_EXT">
      <summary>Line Down Extend; Move the caret down one line, extending the selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.HOME">
      <summary>Document Start; Move the caret to the start of the document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.HOME_EXT">
      <summary>Document Start Extend; Move the caret to the start of the document, extending the selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.END">
      <summary>Document End; Move the caret to the end of the document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.END_EXT">
      <summary>Document End Extend; Move the caret to the end of the document, extending the selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BOL">
      <summary>Line Start; Move the caret to the start of the line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BOL_EXT">
      <summary>Line Start Extend; Move the caret to the start of the line, extending the selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FIRSTCHAR">
      <summary>Line Start After Indentation; Move the caret to first non-white space character on the line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FIRSTCHAR_EXT">
      <summary>Line Start After Indentation Extend; Move the caret to first non-white space character on the line, extending the selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EOL">
      <summary>Line End; Move the caret to the end of the line..</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EOL_EXT">
      <summary>Line End Extend; Move the caret to the end of the line, extending the selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LASTCHAR">
      <summary>Line Last Char; Move the caret after the last non-white space character on the line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LASTCHAR_EXT">
      <summary>Line Last Char Extend; Move the caret after the last non-white space character on the line, extending the selection..</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PAGEUP">
      <summary>Page Up; Move the caret up one page.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PAGEUP_EXT">
      <summary>Page Up Extend; Move the caret up one page, extending the selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PAGEDN">
      <summary>Page Down; Move the caret down one page. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PAGEDN_EXT">
      <summary>Page Down Extend; Move the caret down one page, extending the selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOPLINE">
      <summary>View Top; Move the caret to the top line in view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOPLINE_EXT">
      <summary>View Top Extend; Move the caret to the top line in view, extending the selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BOTTOMLINE">
      <summary>View Bottom; Move the caret to the last line in view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BOTTOMLINE_EXT">
      <summary>View Bottom Extend; Move the caret to the last line in view, extending the selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLUP">
      <summary>Scroll Line Up: Scroll the document up one line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLDN">
      <summary>Scroll Line Down; Scroll the document down one line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLPAGEUP">
      <summary>Scroll Page Up: Scroll the document up one page..</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLPAGEDN">
      <summary>Scroll Page Down: Scroll the document down one page.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLLEFT">
      <summary>Scroll Column Left; Scroll the document left one column.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLRIGHT">
      <summary>Scroll Column Right; Scroll the document right one column.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLBOTTOM">
      <summary>Scroll Line Bottom; Scroll the current line to the bottom of the view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLCENTER">
      <summary>Scroll Line Center; Scroll the current line to the center of the view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SCROLLTOP">
      <summary>Scroll Line Top: Scroll the current line to the top of the view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELECTALL">
      <summary>Select All; Select all of the document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELTABIFY">
      <summary>Tabify Selection: Replace spaces in the current selection with tabs.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELUNTABIFY">
      <summary>Untabify Selection; Replace tabs in the current selection with spaces.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELLOWCASE">
      <summary>Make Lowercase; Change the text in the current selection to all lower case.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELUPCASE">
      <summary>Make Uppercase; Change the text in the current selection to all upper case.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELTOGGLECASE">
      <summary>Toggle Case: Toggle the case of the text in the current selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELTITLECASE">
      <summary>Capitalize; Capitalize the first letter of words in the selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELSWAPANCHOR">
      <summary>Swap Anchor; Swap the anchor and end points of the current selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GOTOLINE">
      <summary>Go To Line; Go to the indicated line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GOTOBRACE">
      <summary>Goto Brace; Move the caret forward to the matching brace.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GOTOBRACE_EXT">
      <summary>Goto Brace Extend; Move the caret forward to the matching brace, extending the selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GOBACK">
      <summary>Go Back; Go back one character.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELECTMODE">
      <summary>Select Mode; Toggle the selection mode.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOGGLE_OVERTYPE_MODE">
      <summary>Overtype Mode; Toggle between insert and overtype insertion modes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CUT">
      <summary>Cut; Cut the current selection to the clipboard.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COPY">
      <summary>Copy; Copy the current selection to the clipboard.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PASTE">
      <summary>Paste; Paste the selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CUTLINE">
      <summary>Line Cut; Cut all selected lines, or the current line if no selection, to the clipboard.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETELINE">
      <summary>Delete Line; Delete all selected lines, or the current line if no selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETEBLANKLINES">
      <summary>Delete Blank Lines; Delete all blank lines in the selection, or the current blank line if no selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETEWHITESPACE">
      <summary>Delete Horizontal White Space; Collapse white space in the selection, or delete white space adjacent to the caret if no selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETETOEOL">
      <summary>Delete To EOL; Delete from the caret position to the end of the line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETETOBOL">
      <summary>Delete To BOL; Delete from the caret position to the beginning of the line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OPENLINEABOVE">
      <summary>Line Open Above; Open a new line above the current line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OPENLINEBELOW">
      <summary>Line Open Below: Open a new line below the current line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INDENT">
      <summary>Increase Line Indent; Increase Indent.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UNINDENT">
      <summary>Decrease Line Indent; Line Unindent.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UNDO">
      <summary>Undo; Undo the last operation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UNDONOMOVE">
      <summary>Undo no move</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.REDO">
      <summary>Redo; Repeat the operation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.REDONOMOVE">
      <summary> Redo without move</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETEALLTEMPBOOKMARKS">
      <summary>Clear Bookmarks; Clear all unnamed bookmarks in the current document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOGGLETEMPBOOKMARK">
      <summary>Toggle Bookmark; Toggle an unnamed bookmark on the current line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GOTONEXTBOOKMARK">
      <summary>Next Bookmark; Move the caret to the next unnamed bookmark.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GOTOPREVBOOKMARK">
      <summary>Previous Bookmark; Move the caret to the previous unnamed bookmark.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FIND">
      <summary>Find; Find the occurrence.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.REPLACE">
      <summary>Replace; Replace the occurrence.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.REPLACE_ALL">
      <summary>Replace All; Replace all instances of the occurrence.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FINDNEXT">
      <summary>Find Next; Find the next occurrence</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FINDNEXTWORD">
      <summary>Find Next Word; Find the next occurrence of word.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FINDPREV">
      <summary>Find Prev; Find the previous occurrence </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FINDPREVWORD">
      <summary>Find Prev Word; Find the previous occurrence of word.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FINDAGAIN">
      <summary>Find Again; Repeat the find operation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TRANSPOSECHAR">
      <summary>Char Transpose: Transpose the characters on either side of the caret.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TRANSPOSEWORD">
      <summary>Word Transpose; Transpose the words on either side of the caret.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TRANSPOSELINE">
      <summary>Line Transpose; Transpose the current line and the line below.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELECTCURRENTWORD">
      <summary>Select Current Word; Select the word under the caret.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETEWORDRIGHT">
      <summary>Word Delete To End; Delete the word to the right of the caret.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETEWORDLEFT">
      <summary>Word Delete To Start; Delete the word to the left of the caret.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WORDPREV">
      <summary>Word Previous; Move the caret left one word.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WORDPREV_EXT">
      <summary>Word Previous Extend; Move the caret left one word, extending the selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WORDNEXT">
      <summary>Word Next; Move the caret right one word.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WORDNEXT_EXT">
      <summary>Word Next Extend; Move the caret right one word, extending the selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COMMENTBLOCK">
      <summary>Comment Block; Comment out the selected block.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UNCOMMENTBLOCK">
      <summary>Uncomment Block; Uncomment the selected block. If the block is not commented, make no change.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SETREPEATCOUNT">
      <summary> Set repeat count</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WIDGETMARGIN_LBTNDOWN">
      <summary> Widget Margin Left Button Down; A left button down event in the widget margin. The widget margin is used to set breakpoints or bookmarks.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SHOWCONTEXTMENU">
      <summary>Displays a context menu.  If unhandled this most editors display a default context menu without any language-specific commands.  If you want your own commands on this menu, handle the command and bring up a context menu yourself.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CANCEL">
      <summary>Selection Cancel; Cancel the current selection moving the caret to the anchor point.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PARAMINFO">
      <summary>Parameter Info; Display Parameter Info based on the current language.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOGGLEVISSPACE">
      <summary>View White Space; Toggle the visibility of white space characters.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOGGLECARETPASTEPOS">
      <summary>Paste Moves Caret; Toggle where the caret is positioned after a paste operation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COMPLETEWORD">
      <summary>Complete Word; Display Word Completion based on the current language.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SHOWMEMBERLIST">
      <summary>Show Member List; Display an object Member List based on the current language.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FIRSTNONWHITEPREV">
      <summary>Line Start After Indentation Next; Move the caret to the first non-white-space character on the previous line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FIRSTNONWHITENEXT">
      <summary>Line Start After Indentation Next; Move the caret to the first non-white-space character on the next line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.HELPKEYWORD">
      <summary>Help Keyword</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FORMATSELECTION">
      <summary>Format Selection; Format the currently selected text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OPENURL">
      <summary>Open URL; Invoke the default browser and opens the URL under the caret.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INSERTFILE">
      <summary>Insert File As Text; Insert a file into the current document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOGGLESHORTCUT">
      <summary>Toggle Task List Shortcut; Toggle a task list shortcut on the current line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.QUICKINFO">
      <summary>Quick Info; Display Quick Info based on the current language.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LEFT_EXT_COL">
      <summary>Char Left Extend Column; Move the caret left one character, extending the column selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RIGHT_EXT_COL">
      <summary>Char Right Extend Column; Move the caret right one character, extending the column selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UP_EXT_COL">
      <summary>Line Up Extend Column; Move the caret up one line, extending the column selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DOWN_EXT_COL">
      <summary>Line Down Extend Column; Move the caret down one line, extending the column selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOGGLEWORDWRAP">
      <summary>Toggle Word Wrap; Toggle Word Wrap mode.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ISEARCH">
      <summary>Incremental Search; Reverse Incremental Search.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ISEARCHBACK">
      <summary>Reverse Incremental Search.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BOL_EXT_COL">
      <summary>Line Start Extend Column; Move the caret to the start of the line, extending the column selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EOL_EXT_COL">
      <summary>Line End Extend Column; Move the caret to the end of the line, extending the column selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WORDPREV_EXT_COL">
      <summary>Word Previous Extend Column; Move the caret left one word, extending the column selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WORDNEXT_EXT_COL">
      <summary>Word Next Extend Column; Move the caret right one word, extending the column selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OUTLN_HIDE_SELECTION">
      <summary>Hide Selection; Outline Hide Selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OUTLN_TOGGLE_CURRENT">
      <summary>Toggle Outlining Expansion; Outline Toggle Current.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OUTLN_TOGGLE_ALL">
      <summary>Toggle All Outlining; Toggle all hidden regions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OUTLN_STOP_HIDING_ALL">
      <summary>Stop Outlining; Outline Stop Hiding All.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OUTLN_STOP_HIDING_CURRENT">
      <summary>Stop Hiding Current; Outline Stop Hiding Current.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OUTLN_COLLAPSE_TO_DEF">
      <summary>Collapse to Definitions; Outline Collapse To Definitions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DOUBLECLICK">
      <summary>Double Click.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EXTERNALLY_HANDLED_WIDGET_CLICK">
      <summary>Externally handled widget click; A mouse click event in the widget margin passed to an external handler. The widget margin is used to set breakpoints or bookmarks.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COMMENT_BLOCK">
      <summary>Comment Block; Comment out the selected block.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UNCOMMENT_BLOCK">
      <summary>Uncomment Selection; Uncomment the selected lines.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OPENFILE">
      <summary>Open File; Open file under caret.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NAVIGATETOURL">
      <summary>Open URL; Invoke the default browser and opens the URL under the caret.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.HANDLEIMEMESSAGE">
      <summary>Handle IME message</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELTOGOBACK">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COMPLETION_HIDE_ADVANCED">
      <summary>Completion hide advanced</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FORMATDOCUMENT">
      <summary>Format document</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OUTLN_START_AUTOHIDING">
      <summary>Start Autohiding outline</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FINAL">
      <summary>Final</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_DECREASEFILTER">
      <summary>Editor command: Decrease filter</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_COPYTIP">
      <summary>Editor command: Copy tip</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_PASTETIP">
      <summary>Editor command: Paste tip</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_LEFTCLICK">
      <summary>Editor command: Left click</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_GOTONEXTBOOKMARKINDOC">
      <summary>Editor command: Go to next bookmark in document</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_GOTOPREVBOOKMARKINDOC">
      <summary>Editor command: Go to previous bookmark in document</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_INVOKESNIPPETFROMSHORTCUT">
      <summary>Editor command: Invoke snippet from shortcut</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AUTOCOMPLETE">
      <summary>Auto complete</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_INVOKESNIPPETPICKER2">
      <summary>Editor command: Invoke snippet picker 2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_DELETEALLBOOKMARKSINDOC">
      <summary>Editor command: Delete all bookmarks in document</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_CONVERTTABSTOSPACES">
      <summary>Editor command: Convert tabs to spaces</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_CONVERTSPACESTOTABS">
      <summary>Editor command: Convert spaces to tabs</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_FINAL">
      <summary>Editor command: Final</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.STOP">
      <summary>STOP command created during CTC file rationalization</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.REVERSECANCEL">
      <summary>Reverse Cancel command created during CTC file rationalization</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SLNREFRESH">
      <summary>Solution Refresh command created during CTC file rationalization</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SAVECOPYOFITEMAS">
      <summary>Save Copy of Item As command created during CTC file rationalization</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NEWELEMENT">
      <summary>HTML editor command: New element</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NEWATTRIBUTE">
      <summary>HTML editor command: New attribute</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NEWCOMPLEXTYPE">
      <summary>HTML editor command: New complex type</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NEWSIMPLETYPE">
      <summary>HTML editor command: New simple type</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NEWGROUP">
      <summary>HTML editor command: New group</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NEWATTRIBUTEGROUP">
      <summary>HTML editor command: New attribute group</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NEWKEY">
      <summary>HTML editor command: New key</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NEWRELATION">
      <summary>HTML editor command: New relation</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EDITKEY">
      <summary>HTML editor command: Edit key</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EDITRELATION">
      <summary>HTML editor command: Edit relation</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.MAKETYPEGLOBAL">
      <summary>HTML editor command: Make type global</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PREVIEWDATASET">
      <summary>HTML editor command: Preview dataset</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GENERATEDATASET">
      <summary>HTML editor command: Generate data set</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CREATESCHEMA">
      <summary>HTML editor command: Create schema</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LAYOUTINDENT">
      <summary>HTML editor command: Layout indent</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LAYOUTUNINDENT">
      <summary>HTML editor command: Layout unindent</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.REMOVEHANDLER">
      <summary>HTML editor command: Remove handler</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EDITHANDLER">
      <summary>HTML editor command: Edit handler</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDHANDLER">
      <summary>HTML editor command: Add handler</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.STYLE">
      <summary>HTML editor command: Style</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.STYLEGETLIST">
      <summary>Get style list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FONTSTYLE">
      <summary>HTML editor command: Font style</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FONTSTYLEGETLIST">
      <summary>HTML editor command: Get font style list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PASTEASHTML">
      <summary>HTML editor command: Paste as HTML</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VIEWBORDERS">
      <summary>HTML editor command: View borders</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VIEWDETAILS">
      <summary>HTML editor command: View details</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EXPANDCONTROLS">
      <summary>HTML editor command: Expand controls</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COLLAPSECONTROLS">
      <summary>HTML editor command: Collapse controls</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SHOWSCRIPTONLY">
      <summary>HTML editor command: Show script only</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INSERTTABLE">
      <summary>HTML editor command: Insert table</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INSERTCOLLEFT">
      <summary>HTML editor command: Insert column on the left</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INSERTCOLRIGHT">
      <summary>HTML editor command: Insert column on the right</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INSERTROWABOVE">
      <summary>HTML editor command: Insert row above</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INSERTROWBELOW">
      <summary>HTML editor command: Insert row below</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETETABLE">
      <summary>HTML editor command: Delete table</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETECOLS">
      <summary>HTML editor command: Delete columns</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETEROWS">
      <summary>HTML editor command: Delete rows</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELECTTABLE">
      <summary>HTML editor command: Select table</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELECTTABLECOL">
      <summary>HTML editor command: Select table column</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELECTTABLEROW">
      <summary>HTML editor command: Select table row</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELECTTABLECELL">
      <summary>HTML editor command: Select table cell</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.MERGECELLS">
      <summary>HTML editor command: Merge cells</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SPLITCELL">
      <summary>HTML editor command: Split cell</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INSERTCELL">
      <summary>HTML editor command: Insert cell</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETECELLS">
      <summary>HTML editor command: Delete cells</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SEAMLESSFRAME">
      <summary>HTML editor command: Seamless frame</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VIEWFRAME">
      <summary>HTML editor command: View frame</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETEFRAME">
      <summary>HTML editor command: Delete frame</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SETFRAMESOURCE">
      <summary>HTML editor command: Set frame source</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NEWLEFTFRAME">
      <summary>HTML editor command: New left frame</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NEWRIGHTFRAME">
      <summary>HTML editor command: New right frame</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NEWTOPFRAME">
      <summary>HTML editor command: New top frame</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NEWBOTTOMFRAME">
      <summary>HTML editor command: New bottom frame</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SHOWGRID">
      <summary>HTML editor command: Show grid</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SNAPTOGRID">
      <summary>HTML editor command: Snap to grid</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BOOKMARK">
      <summary>HTML editor command: Bookmark</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.HYPERLINK">
      <summary>HTML editor command: Hyperlink</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.IMAGE">
      <summary>HTML editor command: Image</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INSERTFORM">
      <summary>HTML editor command: Insert form</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INSERTSPAN">
      <summary>HTML editor command: Insert span</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DIV">
      <summary>HTML editor command: Div</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.HTMLCLIENTSCRIPTBLOCK">
      <summary>HTML editor command: HTML client script block</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.HTMLSERVERSCRIPTBLOCK">
      <summary>HTML editor command: HTML server script block</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BULLETEDLIST">
      <summary>HTML editor command: Bulleted list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NUMBEREDLIST">
      <summary>HTML editor command: Numbered list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EDITSCRIPT">
      <summary>HTML editor command: Edit script</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EDITCODEBEHIND">
      <summary>HTML editor command: Edit code behind</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DOCOUTLINEHTML">
      <summary>HTML editor command: Document outline HTML</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DOCOUTLINESCRIPT">
      <summary>HTML editor command: Document outline script</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RUNATSERVER">
      <summary>HTML editor command: Run at server</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WEBFORMSVERBS">
      <summary>HTML editor command: Web forms verbs</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WEBFORMSTEMPLATES">
      <summary>HTML editor command: Web forms templates</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ENDTEMPLATE">
      <summary>HTML editor command: End template</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EDITDEFAULTEVENT">
      <summary>HTML editor command: Edit default event</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SUPERSCRIPT">
      <summary>HTML editor command: Superscript</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SUBSCRIPT">
      <summary>HTML editor command: Subscript</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EDITSTYLE">
      <summary>HTML editor command: Edit style</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDIMAGEHEIGHTWIDTH">
      <summary>HTML editor command: Add image height width</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.REMOVEIMAGEHEIGHTWIDTH">
      <summary>HTML editor command: Remove image height and width</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LOCKELEMENT">
      <summary>HTML editor command: Lock element</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VIEWSTYLEORGANIZER">
      <summary>View style organizer</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_AUTOCLOSEOVERRIDE">
      <summary>Editor and HTML editor command: ECMD Auto-close override</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NEWANY">
      <summary>HTML editor command: New any</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NEWANYATTRIBUTE">
      <summary>HTML editor command: New any attribute</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETEKEY">
      <summary>HTML editor command: Delete key</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AUTOARRANGE">
      <summary>HTML editor command: Auto arrange</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VALIDATESCHEMA">
      <summary>HTML editor command: Validate schema</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NEWFACET">
      <summary>HTML editor command: New facet</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VALIDATEXMLDATA">
      <summary>HTML editor command: Validate XML data</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DOCOUTLINETOGGLE">
      <summary>HTML editor command: Document outline toggle</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VALIDATEHTMLDATA">
      <summary>HTML editor command: Validate HTML data</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VIEWXMLSCHEMAOVERVIEW">
      <summary>HTML editor command: View XML schema overview</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SHOWDEFAULTVIEW">
      <summary>HTML editor command: Show default view</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EXPAND_CHILDREN">
      <summary>HTML editor command: Expand children</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COLLAPSE_CHILDREN">
      <summary>HTML editor command: Collapse children</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOPDOWNLAYOUT">
      <summary>HTML editor command: Top down layout</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LEFTRIGHTLAYOUT">
      <summary>HTML editor command: Left to right layout</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INSERTCELLRIGHT">
      <summary>HTML editor command: Insert cell on the right</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EDITMASTER">
      <summary>HTML editor command: Edit master</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INSERTSNIPPET">
      <summary>HTML editor command: Insert snippet</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FORMATANDVALIDATION">
      <summary>HTML editor command: Format and validation</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COLLAPSETAG">
      <summary>HTML editor command: Collapse tag</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELECT_TAG">
      <summary>HTML editor command: Select tag</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELECT_TAG_CONTENT">
      <summary>HTML editor command: Select tag content</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CHECK_ACCESSIBILITY">
      <summary>HTML editor command: Check accessibility</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UNCOLLAPSETAG">
      <summary>HTML editor command: expand tag</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GENERATEPAGERESOURCE">
      <summary>HTML editor command: Generate page resource</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SHOWNONVISUALCONTROLS">
      <summary>HTML editor command: Show only non-visual controls</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RESIZECOLUMN">
      <summary>HTML editor command: Resize column</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RESIZEROW">
      <summary>HTML editor command: Resize row</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.MAKEABSOLUTE">
      <summary>HTML editor command: Make absolute</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.MAKERELATIVE">
      <summary>HTML editor command: Make relative</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.MAKESTATIC">
      <summary>HTML editor command: Make static</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INSERTLAYER">
      <summary>HTML editor command: Insert layer</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UPDATEDESIGNVIEW">
      <summary>HTML editor command: Update design view</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UPDATESOURCEVIEW">
      <summary>HTML editor command: Update source view</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INSERTCAPTION">
      <summary>HTML editor command: Insert caption</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETECAPTION">
      <summary>HTML editor command: Delete caption</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.MAKEPOSITIONNOTSET">
      <summary>HTML editor command: Make position not set</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AUTOPOSITIONOPTIONS">
      <summary>HTML editor command: Auto position options</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EDITIMAGE">
      <summary>HTML editor command: Edit image</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COMPILE">
      <summary>Project command: Compile</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PROJSETTINGS">
      <summary>Project command: Project settings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LINKONLY">
      <summary>Project command: Link only</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.REMOVE">
      <summary>Project command: Remove</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PROJSTARTDEBUG">
      <summary>Project command: Project start debugging</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PROJSTEPINTO">
      <summary>Project command: Project step into</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UPDATEWEBREF">
      <summary>Project command: Update web reference</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDRESOURCE">
      <summary>Project command: Add resource</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WEBDEPLOY">
      <summary>Project command: Web deployment</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDHTMLPAGE">
      <summary>Visual Basic Project command: Add HTML page</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDHTMLPAGECTX">
      <summary>Visual Basic Project command: Add HTML page control</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDMODULE">
      <summary>Visual Basic Project command: Add module</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDMODULECTX">
      <summary>Visual Basic Project command: Add module control</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDWFCFORM">
      <summary>Visual Basic Project command: Add WFC form</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDWEBFORM">
      <summary>Visual Basic Project command: Add web form</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDUSERCONTROL">
      <summary>Visual Basic Project command: Add user control</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDDHTMLPAGE">
      <summary>Visual Basic Project command: Add DHTML page</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDIMAGEGENERATOR">
      <summary>Visual Basic Project command: Add image generator</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDINHERWFCFORM">
      <summary>Visual Basic Project command: Add inherited WCF form</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDINHERCONTROL">
      <summary>Visual Basic Project command: Add inherited control</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDWEBUSERCONTROL">
      <summary>Visual Basic Project command: Add web user control</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BUILDANDBROWSE">
      <summary>Visual Basic Project command: Build and browse</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDTBXCOMPONENT">
      <summary>Visual Basic Project command: Add tab grid component</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDWEBSERVICE">
      <summary>Visual Basic Project command: Add web service</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDVFPPAGE">
      <summary>Visual FoxPro Project command: Add Visual FoxPro page</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SETBREAKPOINT">
      <summary>Visual FoxPro Project command: Set breakpoint</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SHOWALLFILES">
      <summary>Help Workshop project command: Show all files</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDTOPROJECT">
      <summary>Help Workshop project command: Add to project</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDBLANKNODE">
      <summary>Help Workshop project command: Add blank node</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDNODEFROMFILE">
      <summary>Help Workshop project command: Add node from file</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CHANGEURLFROMFILE">
      <summary>Help Workshop project command: Change URL from file</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EDITTOPIC">
      <summary>Help Workshop project command: Edit topic</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EDITTITLE">
      <summary>Help Workshop project command: Edit title</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.MOVENODEUP">
      <summary>Help Workshop project command: Move node up</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.MOVENODEDOWN">
      <summary>Help Workshop project command: Move node down</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.MOVENODELEFT">
      <summary>Help Workshop project command: Move node left</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.MOVENODERIGHT">
      <summary>Help Workshop project command: Move node right</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDOUTPUT">
      <summary>Deploy project command: Add output</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDFILE">
      <summary>Deploy project command: Add file</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.MERGEMODULE">
      <summary>Deploy project command: Merge module</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDCOMPONENTS">
      <summary>Deploy project command: Add components</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LAUNCHINSTALLER">
      <summary>Deploy project command: Launch installer</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LAUNCHUNINSTALL">
      <summary>Deploy project command: Launch uninstall</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LAUNCHORCA">
      <summary>Deploy project command: Launch Anchor A</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FILESYSTEMEDITOR">
      <summary>Deploy project command: File system editor</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.REGISTRYEDITOR">
      <summary>Deploy project command: Registry editor</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FILETYPESEDITOR">
      <summary>Deploy project command: File types editor</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.USERINTERFACEEDITOR">
      <summary>Deploy project command: User's Interface editor</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CUSTOMACTIONSEDITOR">
      <summary>Deploy project command: Custom actions editor</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LAUNCHCONDITIONSEDITOR">
      <summary>Deploy project command: Launch conditions editor</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EDITOR">
      <summary>Deploy project command: Editor</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EXCLUDE">
      <summary>Deploy project command: Exclude</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.REFRESHDEPENDENCIES">
      <summary>Deploy project command: Refresh dependencies</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VIEWOUTPUTS">
      <summary>Deploy project command: View outputs</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VIEWDEPENDENCIES">
      <summary>Deploy project command: View dependencies</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VIEWFILTER">
      <summary>Deploy project command: View filter</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.KEY">
      <summary>Deploy project command: Key</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.STRING">
      <summary>Deploy project command: String</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BINARY">
      <summary>Deploy project command: Binary</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DWORD">
      <summary>Deploy project command: DWORD</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.KEYSOLO">
      <summary>Deploy project command: Key solo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.IMPORT">
      <summary>Deploy project command: Import</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FOLDER">
      <summary>Deploy project command: Folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PROJECTOUTPUT">
      <summary>Deploy project command: Project output</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FILE">
      <summary>Deploy project command: File</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDMERGEMODULES">
      <summary>Deploy project command: Add merge modules</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CREATESHORTCUT">
      <summary>Deploy project command: Create shortcut</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LARGEICONS">
      <summary>Deploy project command: Large icons</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SMALLICONS">
      <summary>Deploy project command: Small icons</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LIST">
      <summary>Deploy project command: List</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DETAILS">
      <summary>Deploy project command: Details</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDFILETYPE">
      <summary>Add file type</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDACTION">
      <summary>Deploy project command: Add action</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SETASDEFAULT">
      <summary>Deploy project command: Set as default</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.MOVEUP">
      <summary>Deploy project command:</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.MOVEDOWN">
      <summary>Deploy project command: Move down</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDDIALOG">
      <summary>Add dialog</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.IMPORTDIALOG">
      <summary>Deploy project command: Import dialog</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDFILESEARCH">
      <summary>Deploy project command: Add file search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDREGISTRYSEARCH">
      <summary>Deploy project command: Add registry search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDCOMPONENTSEARCH">
      <summary>Deploy project command: Add components search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDLAUNCHCONDITION">
      <summary>Deploy project command: Add launch condition</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDCUSTOMACTION">
      <summary>Deploy project command: Add custom action</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OUTPUTS">
      <summary>Deploy project command: Outputs</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DEPENDENCIES">
      <summary>Deploy project command: Dependencies</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FILTER">
      <summary>Deploy project command: Filter</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COMPONENTS">
      <summary>Deploy project command: Components</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ENVSTRING">
      <summary>Deploy project command: Environment string</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CREATEEMPTYSHORTCUT">
      <summary>Deploy project command: Create empty shortcut</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDFILECONDITION">
      <summary>Deploy project command: Add file condition</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDREGISTRYCONDITION">
      <summary>Deploy project command: Add registry condition</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDCOMPONENTCONDITION">
      <summary>Deploy project command: Add component condition</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDURTCONDITION">
      <summary>Deploy project command: Add URT condition</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDIISCONDITION">
      <summary>Deploy project command: Add IIS condition</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SPECIALFOLDERBASE">
      <summary>Deploy project command: Base special folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.USERSAPPLICATIONDATAFOLDER">
      <summary>Deploy project command: User's Application Data folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COMMONFILES64FOLDER">
      <summary>Deploy project command: Common files64 folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COMMONFILESFOLDER">
      <summary>Deploy project command: Common files folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CUSTOMFOLDER">
      <summary>Deploy project command: Custom folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.USERSDESKTOP">
      <summary>Deploy project command: User's Desktop</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.USERSFAVORITESFOLDER">
      <summary>Deploy project command: User's Favorites folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FONTSFOLDER">
      <summary>Deploy project command: Fonts folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GLOBALASSEMBLYCACHEFOLDER">
      <summary>Deploy project command: Global assembly cache folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.MODULERETARGETABLEFOLDER">
      <summary>Deploy project command: Re-targetable module folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.USERSPERSONALDATAFOLDER">
      <summary>Deploy project command: User's Personal Data folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PROGRAMFILES64FOLDER">
      <summary>Deploy project command: Program Files64 folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PROGRAMFILESFOLDER">
      <summary>Deploy project command: Program Files folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.USERSPROGRAMSMENU">
      <summary>Deploy project command: User's Programs menu</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.USERSSENDTOMENU">
      <summary>Deploy project command: User's send to menu</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SHAREDCOMPONENTSFOLDER">
      <summary>Deploy project command: Shared Components folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.USERSSTARTMENU">
      <summary>Deploy project command: User's start menu</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.USERSSTARTUPFOLDER">
      <summary>Deploy project command: User's startup folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SYSTEM64FOLDER">
      <summary>Deploy project command: System64 folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SYSTEMFOLDER">
      <summary>Deploy project command: System folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.APPLICATIONFOLDER">
      <summary>Deploy project command: Application folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.USERSTEMPLATEFOLDER">
      <summary>Deploy project command: User template folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WEBCUSTOMFOLDER">
      <summary>Deploy project command: Custom web folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WINDOWSFOLDER">
      <summary>Deploy project command: Windows folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SPECIALFOLDERLAST">
      <summary>Deploy project command: Last special folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EXPORTEVENTS">
      <summary>Analyzer project command: Export events </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.IMPORTEVENTS">
      <summary>Analyzer project command: Import events</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VIEWEVENT">
      <summary>Analyzer project command: View event</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VIEWEVENTLIST">
      <summary>Analyzer project command: View event list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VIEWCHART">
      <summary>Analyzer project command: View chart</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VIEWMACHINEDIAGRAM">
      <summary>Analyzer project command: View machine diagram</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VIEWPROCESSDIAGRAM">
      <summary>Analyzer project command: View process diagram</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VIEWSOURCEDIAGRAM">
      <summary>Analyzer project command: View source diagram</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VIEWSTRUCTUREDIAGRAM">
      <summary>Analyzer project command: View structure diagram</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VIEWTIMELINE">
      <summary>Analyzer project command: View timeline</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VIEWSUMMARY">
      <summary>Analyzer project command: View summary</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.APPLYFILTER">
      <summary>Analyzer project command: Apply filter</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CLEARFILTER">
      <summary>Analyzer project command: Clear filter</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.STARTRECORDING">
      <summary>Analyzer project command: Start recording</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.STOPRECORDING">
      <summary>Analyzer project command: Stop recording</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PAUSERECORDING">
      <summary>Analyzer project command: Pause recording</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ACTIVATEFILTER">
      <summary>Analyzer project command: Activate filter </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SHOWFIRSTEVENT">
      <summary>Analyzer project command: Show first event</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SHOWPREVIOUSEVENT">
      <summary>Analyzer project command: Show previous event</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SHOWNEXTEVENT">
      <summary>Analyzer project command: Show next event</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SHOWLASTEVENT">
      <summary>Analyzer project command: Show last event</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.REPLAYEVENTS">
      <summary>Analyzer project command: Replay events</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.STOPREPLAY">
      <summary>Analyzer project command: Stop replay</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INCREASEPLAYBACKSPEED">
      <summary>Analyzer project command: Increase playback speed</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DECREASEPLAYBACKSPEED">
      <summary>Analyzer project command: Decrease playback speed</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDMACHINE">
      <summary>Analyzer project command: Add machine</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDREMOVECOLUMNS">
      <summary>Analyzer project command: Add or remove columns</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SORTCOLUMNS">
      <summary>Analyzer project command: Sort columns</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SAVECOLUMNSETTINGS">
      <summary>Analyzer project command: Save column settings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RESETCOLUMNSETTINGS">
      <summary>Analyzer project command: Reset column settings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SIZECOLUMNSTOFIT">
      <summary>Analyzer project command: Size columns to fit</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AUTOSELECT">
      <summary>Analyzer project command: Auto select</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AUTOFILTER">
      <summary>Autofilter</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AUTOPLAYTRACK">
      <summary>Analyzer project command: Autoplay track</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GOTOEVENT">
      <summary>Analyzer project command: Go to event</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ZOOMTOFIT">
      <summary>Analyzer project command: Zoom to fit</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDGRAPH">
      <summary>Analyzer project command: Add graph</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.REMOVEGRAPH">
      <summary>Analyzer project command: Remove graph</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CONNECTMACHINE">
      <summary>Analyzer project command: Connect machine</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DISCONNECTMACHINE">
      <summary>Analyzer project command: Disconnect machine</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EXPANDSELECTION">
      <summary>Analyzer project command: Expand selection</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COLLAPSESELECTION">
      <summary>Analyzer project command: Collapse section</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDFILTER">
      <summary>Add filter</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDPREDEFINED0">
      <summary>Analyzer project command: Add predefined item 0</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDPREDEFINED1">
      <summary>Analyzer project command: Add predefined item 1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDPREDEFINED2">
      <summary>Analyzer project command: Add predefined item 2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDPREDEFINED3">
      <summary>Analyzer project command: Add predefined item 3</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDPREDEFINED4">
      <summary>Analyzer project command: Add predefined item 4</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDPREDEFINED5">
      <summary>Analyzer project command: Add predefined item 5</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDPREDEFINED6">
      <summary>Analyzer project command: Add predefined item 6</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDPREDEFINED7">
      <summary>Analyzer project command: Add predefined item 7</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDPREDEFINED8">
      <summary>Analyzer project command: Add predefined item 8</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TIMELINESIZETOFIT">
      <summary>Analyzer project command: Timeline size to fit</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FIELDVIEW">
      <summary>Crystal Reports command: Field view</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SELECTEXPERT">
      <summary>Crystal Reports command: Select expert</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOPNEXPERT">
      <summary>Crystal Reports command: Top N Expert</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SORTORDER">
      <summary>Crystal Reports command: Sort order</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PROPPAGE">
      <summary>Crystal Reports command: Property page</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.HELP">
      <summary>Crystal Reports command: Help</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SAVEREPORT">
      <summary>Crystal Reports command: Save report</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INSERTSUMMARY">
      <summary>Crystal Reports command: Insert summary</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INSERTGROUP">
      <summary>Crystal Reports command: Insert group</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INSERTSUBREPORT">
      <summary>Crystal Reports command: Insert subreport</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INSERTCHART">
      <summary>Crystal Reports command: Insert chart</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INSERTPICTURE">
      <summary>Crystal Reports command: Insert picture</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SETASSTARTPAGE">
      <summary>Common project command: Set as Start page</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RECALCULATELINKS">
      <summary>Common project command: Recalculate links</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WEBPERMISSIONS">
      <summary>Common project command: Web permissions</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COMPARETOMASTER">
      <summary>Common project command: Compare to master</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.WORKOFFLINE">
      <summary>Common project command: Work offline</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SYNCHRONIZEFOLDER">
      <summary>Common project command: Synchronize folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SYNCHRONIZEALLFOLDERS">
      <summary>Common project command: Synchronize all folders</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.COPYPROJECT">
      <summary>Common project command: Copy project</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.IMPORTFILEFROMWEB">
      <summary>Common project command: Import file from web</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INCLUDEINPROJECT">
      <summary>Common project command: Include in project</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EXCLUDEFROMPROJECT">
      <summary>Common project command: Exclude from project</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BROKENLINKSREPORT">
      <summary>Common project command: Broken links report</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDPROJECTOUTPUTS">
      <summary>Common project command: Add project outputs</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDREFERENCE">
      <summary>Common project command: Add reference</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDWEBREFERENCE">
      <summary>Common project command: Add web reference</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDWEBREFERENCECTX">
      <summary>Common project command: Add web reference control</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UPDATEWEBREFERENCE">
      <summary>Common project command: Update web reference</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RUNCUSTOMTOOL">
      <summary>Common project command: Run custom tool</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SETRUNTIMEVERSION">
      <summary>Common project command: Set runtime version</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VIEWREFINOBJECTBROWSER">
      <summary>Common project command: View reference in object browser</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PUBLISH">
      <summary>Common project command: Publish</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PUBLISHCTX">
      <summary>Common project command: Publish control</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.STARTOPTIONS">
      <summary>Common project command: Start options</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDREFERENCECTX">
      <summary>Common project command: Add reference control</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.STARTOPTIONSCTX">
      <summary>Common project command: Start options control</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DETACHLOCALDATAFILECTX">
      <summary>Common project command: Detach local data file control</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DRAG_MOVE">
      <summary>Right mouse button drag move</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DRAG_COPY">
      <summary>Right mouse button drag copy</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DRAG_CANCEL">
      <summary>Right mouse button drag cancel</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TESTDIALOG">
      <summary>Resource Editor command: Test dialog</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SPACEACROSS">
      <summary>Resource Editor command: Space across</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SPACEDOWN">
      <summary>Resource Editor command: Space down</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOGGLEGRID">
      <summary>Resource Editor command: Toggle grid</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOGGLEGUIDES">
      <summary>Resource Editor command: Toggle guides</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SIZETOTEXT">
      <summary>Resource Editor command: Size to text</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CENTERVERT">
      <summary>Resource Editor command: Center vertically</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CENTERHORZ">
      <summary>Resource Editor command: Center horizontally</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FLIPDIALOG">
      <summary>Resource Editor command: Flip dialog</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SETTABORDER">
      <summary>Resource Editor command: Set tab border</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BUTTONRIGHT">
      <summary>Resource Editor command: Right button</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BUTTONBOTTOM">
      <summary>Resource Editor command: Bottom button</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AUTOLAYOUTGROW">
      <summary>Resource Editor command: Enable auto layout grow</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AUTOLAYOUTNORESIZE">
      <summary>Resource Editor command: Disable auto layout resize</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AUTOLAYOUTOPTIMIZE">
      <summary>Resource Editor command: Enable auto layout optimization</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GUIDESETTINGS">
      <summary>Resource Editor command: GUID settings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RESOURCEINCLUDES">
      <summary>Resource Editor command: Resource includes</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RESOURCESYMBOLS">
      <summary>Resource Editor command: Resource symbols</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OPENBINARY">
      <summary>Resource Editor command: Open as binary file</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RESOURCEOPEN">
      <summary>Resource Editor command: Resource open</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RESOURCENEW">
      <summary>Resource Editor command: Resource new</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RESOURCENEWCOPY">
      <summary>Resource Editor command: Resource copy</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INSERT">
      <summary>Resource Editor command: Insert</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EXPORT">
      <summary>Export</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CTLMOVELEFT">
      <summary>Resource Editor command: Move control left</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CTLMOVEDOWN">
      <summary>Resource Editor command: Move control down</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CTLMOVERIGHT">
      <summary>Resource Editor command: Move control right</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CTLMOVEUP">
      <summary>Resource Editor command: Move control up</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CTLSIZEDOWN">
      <summary>Resource Editor command: Resize control down</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CTLSIZEUP">
      <summary>Resource Editor command: Resize control up</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CTLSIZELEFT">
      <summary>Resource Editor command: Resize control left</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CTLSIZERIGHT">
      <summary>Resource Editor command: Resize control right</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NEWACCELERATOR">
      <summary>Resource Editor command: New accelerator</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CAPTUREKEYSTROKE">
      <summary>Resource Editor command: Capture keystroke</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INSERTACTIVEXCTL">
      <summary>Resource Editor command: Insert ActiveX control</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.INVERTCOLORS">
      <summary>Resource Editor command: Invert colors</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FLIPHORIZONTAL">
      <summary>Resource Editor command: Flip horizontal</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FLIPVERTICAL">
      <summary>Resource Editor command: Flip vertical</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ROTATE90">
      <summary>Resource Editor command: Rotate 90 degrees</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SHOWCOLORSWINDOW">
      <summary>Resource Editor command: Show color window</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NEWSTRING">
      <summary>Resource Editor command: New string</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NEWINFOBLOCK">
      <summary>Resource Editor command: New info block</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETEINFOBLOCK">
      <summary>Resource Editor command: Delete info block</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADJUSTCOLORS">
      <summary>Resource Editor command: Adjust colors</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LOADPALETTE">
      <summary>Resource Editor command: Load palette</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SAVEPALETTE">
      <summary>Resource Editor command: Save palette</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CHECKMNEMONICS">
      <summary>Resource Editor command: Check Mnemonics</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DRAWOPAQUE">
      <summary>Resource Editor command: Draw opaque</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TOOLBAREDITOR">
      <summary>Resource Editor command: Toolbar editor</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GRIDSETTINGS">
      <summary>Resource Editor command: Grid settings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NEWDEVICEIMAGE">
      <summary>Resource Editor command: New device image</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OPENDEVICEIMAGE">
      <summary>Resource Editor command: Open device image</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DELETEDEVICEIMAGE">
      <summary>Resource Editor command: Delete device image</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VIEWASPOPUP">
      <summary>Resource Editor command: View as pop-up</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CHECKMENUMNEMONICS">
      <summary>Resource Editor command: Check menu mnemonics</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SHOWIMAGEGRID">
      <summary>Resource Editor command: Show image grid</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SHOWTILEGRID">
      <summary>Resource Editor command: Show tile grid</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.MAGNIFY">
      <summary>Resource Editor command: Magnify</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ResProps">
      <summary>Resource Editor command: Resource properties</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PICKRECTANGLE">
      <summary>Resource Editor command: Pick rectangle</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PICKREGION">
      <summary>Resource Editor command: Pick region</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PICKCOLOR">
      <summary>Resource Editor command: Pick color</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ERASERTOOL">
      <summary>Resource Editor command: Eraser tool</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FILLTOOL">
      <summary>Resource Editor command: Fill tool</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PENCILTOOL">
      <summary>Resource Editor command: Pencil tool</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BRUSHTOOL">
      <summary>Resource Editor command: Brush tool</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AIRBRUSHTOOL">
      <summary>Resource Editor command: Airbrush tool</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LINETOOL">
      <summary>Resource Editor command: Line tool</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CURVETOOL">
      <summary>Resource Editor command: Curve tool</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TEXTTOOL">
      <summary>Resource Editor command: Text tool</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RECTTOOL">
      <summary>Resource Editor command: Rectangle tool</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OUTLINERECTTOOL">
      <summary>Resource Editor command: Rectangle outline tool</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FILLEDRECTTOOL">
      <summary>Resource Editor command: Filled rectangle tool</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ROUNDRECTTOOL">
      <summary>Resource Editor command: Round rectangle tool</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OUTLINEROUNDRECTTOOL">
      <summary>Resource Editor command: Rounded rectangle outline tool</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FILLEDROUNDRECTTOOL">
      <summary>Resource Editor command: Filled round rectangle tool</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ELLIPSETOOL">
      <summary>Resource editor command: Ellipse tool</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OUTLINEELLIPSETOOL">
      <summary>Resource Editor command: Ellipse outline tool</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FILLEDELLIPSETOOL">
      <summary>Resource Editor command: Filled ellipse tool</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SETHOTSPOT">
      <summary>Resource Editor command: Set hotspot</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ZOOMTOOL">
      <summary>Resource Editor command: Zoom tool</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ZOOM1X">
      <summary>Resource Editor command: Zoom factor 1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ZOOM2X">
      <summary>Resource Editor command: Zoom factor 2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ZOOM6X">
      <summary>Resource Editor command: Zoom factor 6</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ZOOM8X">
      <summary>Resource Editor command: Zoom factor 8</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TRANSPARENTBCKGRND">
      <summary>Resource Editor command: Transparent background </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OPAQUEBCKGRND">
      <summary>Resource Editor command: Opaque background</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ERASERSMALL">
      <summary>Resource Editor command: Small eraser</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ERASERMEDIUM">
      <summary>Resource Editor command: Medium eraser</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ERASERLARGE">
      <summary>Resource Editor command: Large eraser</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ERASERLARGER">
      <summary>Resource Editor command: Larger eraser</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CIRCLELARGE">
      <summary>Resource Editor command: Large circle</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CIRCLEMEDIUM">
      <summary>Resource Editor command: Medium circle</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CIRCLESMALL">
      <summary>Resource Editor command: Small circle</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SQUARELARGE">
      <summary>Resource Editor command: Square large</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SQUAREMEDIUM">
      <summary>Resource Editor command: Square medium</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SQUARESMALL">
      <summary>Resource Editor command: Square small</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LEFTDIAGLARGE">
      <summary>Resource Editor command: Left diagonal large</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LEFTDIAGMEDIUM">
      <summary>Resource Editor command: Left diagonal medium</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LEFTDIAGSMALL">
      <summary>Resource Editor command: Left diagonal small</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RIGHTDIAGLARGE">
      <summary>Resource Editor command: Right diagonal large</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RIGHTDIAGMEDIUM">
      <summary>Resource Editor command: Right diagonal medium</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RIGHTDIAGSMALL">
      <summary>Resource Editor command: Right diagonal small</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SPLASHSMALL">
      <summary>Resource Editor command: Splash small</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SPLASHMEDIUM">
      <summary>Resource Editor command: Splash medium</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SPLASHLARGE">
      <summary>Resource Editor command: Splash large</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LINESMALLER">
      <summary>Resource Editor command: Line smaller</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LINESMALL">
      <summary>Resource Editor command: Line small</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LINEMEDIUM">
      <summary>Resource Editor command: Line medium</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LINELARGE">
      <summary>Resource Editor command: Line large</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LINELARGER">
      <summary>Resource Editor command: Line larger</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LARGERBRUSH">
      <summary>Resource Editor command: Larger brush</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.LARGEBRUSH">
      <summary>Resource Editor command: Large brush</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.STDBRUSH">
      <summary>Resource Editor command: Standard brush</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SMALLBRUSH">
      <summary>Resource Editor command: Small brush</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SMALLERBRUSH">
      <summary>Resource Editor command: Smaller brush</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ZOOMIN">
      <summary>Resource Editor command: Zoom in</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ZOOMOUT">
      <summary>Resource Editor command: Zoom out</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PREVCOLOR">
      <summary>Resource Editor command: Previous color</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PREVECOLOR">
      <summary>Resource Editor command: Previous extended palette color</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NEXTCOLOR">
      <summary>Resource Editor command: Next color</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NEXTECOLOR">
      <summary>Resource Editor command: Next extended palette color</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.IMG_OPTIONS">
      <summary>Resource Editor command: Image options</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.STARTWEBADMINTOOL">
      <summary>Start Web site administrator tool</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NESTRELATEDFILES">
      <summary>Nest related files</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CANCELDRAG">
      <summary>WinForm command: Cancel drag</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DEFAULTACTION">
      <summary>WinForm command: Default action</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CTLMOVEUPGRID">
      <summary>Resource Editor command: Move control up to grid</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CTLMOVEDOWNGRID">
      <summary>Resource Editor command: Move control down to grid</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CTLMOVELEFTGRID">
      <summary>Resource Editor command: Move control left to grit</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CTLMOVERIGHTGRID">
      <summary>Resource Editor command: Move control right to grid</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CTLSIZERIGHTGRID">
      <summary>Resource Editor command: Resize control right to grid</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CTLSIZEUPGRID">
      <summary>Resource Editor command: Resize control up to grid</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CTLSIZELEFTGRID">
      <summary>Resource Editor command: Resize control left to grid</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CTLSIZEDOWNGRID">
      <summary>Resource Editor command: Resize control down to grid</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NEXTCTL">
      <summary>WinForms command: Next control</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PREVCTL">
      <summary>WinForms command: Previous control</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RENAME">
      <summary>WinForms command: Rename</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EXTRACTMETHOD">
      <summary>WinForms command: Extract method</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ENCAPSULATEFIELD">
      <summary>WinForms command: Encapsulate field</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EXTRACTINTERFACE">
      <summary>WinForms command: Extract interface</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PROMOTELOCAL">
      <summary>WinForms command: Promote local</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.REMOVEPARAMETERS">
      <summary>WinForms command: Remove parameters</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.REORDERPARAMETERS">
      <summary>WinForms command: Re-order parameters</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GENERATEMETHODSTUB">
      <summary>WinForms command: Generate method stub</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.IMPLEMENTINTERFACEIMPLICIT">
      <summary>WinForms command: Implement implicit interface</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.IMPLEMENTINTERFACEEXPLICIT">
      <summary>WinForms command: Implement explicit interface</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.IMPLEMENTABSTRACTCLASS">
      <summary>WinForms command: Implement abstract class</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SURROUNDWITH">
      <summary>WinForms command: Surround with</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.QUICKOBJECTSEARCH">
      <summary>Quick object search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ToggleWordWrapOW">
      <summary>Toggle word wrap OW</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GotoNextLocationOW">
      <summary>Go to next location OW</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GotoPrevLocationOW">
      <summary>Go to previous location OW</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BuildOnlyProject">
      <summary>Build only project</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RebuildOnlyProject">
      <summary>Rebuild only project</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CleanOnlyProject">
      <summary>Clean only project</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SetBuildStartupsOnlyOnRun">
      <summary>Set build startups only on run</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UnhideAll">
      <summary>Unhide all</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.HideFolder">
      <summary>Hide folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UnhideFolders">
      <summary>Unhide folders</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CopyFullPathName">
      <summary>Copy full path name</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SaveFolderAsSolution">
      <summary>Save folder as solution</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ManageUserSettings">
      <summary>Manage user settings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NewSolutionFolder">
      <summary>New solution folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ClearPaneOW">
      <summary>Clear Pane OW</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GotoErrorTagOW">
      <summary>Go to Error Tag OW</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GotoNextErrorTagOW">
      <summary>Go to next Error Tag OW</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GotoPrevErrorTagOW">
      <summary>Go to previous Error Tag OW</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ClearPaneFR1">
      <summary>Clear Pane FR1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GotoErrorTagFR1">
      <summary>Go to Error Tag FR1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GotoNextErrorTagFR1">
      <summary>Go to next Error Tag FR1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GotoPrevErrorTagFR1">
      <summary>Go to previous Error Tag FR1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ClearPaneFR2">
      <summary>Clear Pane FR2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GotoErrorTagFR2">
      <summary>Go to Error Tag FR2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GotoNextErrorTagFR2">
      <summary>Go to next Error Tag FR2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GotoPrevErrorTagFR2">
      <summary>Go to previous Error Tag FR2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OutputPaneCombo">
      <summary>Output pane combo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OutputPaneComboList">
      <summary>Output pane combo list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DisableDockingChanges">
      <summary>Disable docking changes</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ToggleFloat">
      <summary>Toggle float</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ResetLayout">
      <summary>Reset layout</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NewSolutionFolderBar">
      <summary>New solution folder bar</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DataShortcut">
      <summary>Data shortcut</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NextToolWindow">
      <summary>New tool window</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PrevToolWindow">
      <summary>Previous tool window</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.BrowseToFileInExplorer">
      <summary>Browse to file in Explorer</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ShowEzMDIFileMenu">
      <summary>Show simple MDI file menu</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.PrevToolWindowNav">
      <summary>Previous tool window navigator</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.StaticAnalysisOnlyProject">
      <summary>Static analysis only project</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_RUNFXCOPSEL">
      <summary>Editor command: Run Analyzer on selection</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CloseAllButThis">
      <summary>Close all but this</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ControlGallery">
      <summary>Control gallery</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FullScreen2">
      <summary>Full Screen 2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NavigateBack">
      <summary>Navigate Back</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NavigateForward">
      <summary>Navigate Forward</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_CORRECTION_1">
      <summary>Editor command: Correction 1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_CORRECTION_2">
      <summary>Editor command: Correction 2</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_CORRECTION_3">
      <summary>Editor command: Correction 3</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_CORRECTION_4">
      <summary>Editor command: Correction 4</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_CORRECTION_5">
      <summary>Editor command: Correction 5</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_CORRECTION_6">
      <summary>Editor command: Correction 6</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_CORRECTION_7">
      <summary>Editor command: Correction 7</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_CORRECTION_8">
      <summary>Editor command: Correction 8</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_CORRECTION_9">
      <summary>Editor command: Correction 9</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_CORRECTION_10">
      <summary>Editor command: Correction 10</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBAddReference">
      <summary>OB add Reference</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FindReferences">
      <summary>Find References</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CodeDefView">
      <summary>Default code view</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CodeDefViewGoToPrev">
      <summary>Default code view Go To Next</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CodeDefViewGoToNext">
      <summary>Default code view Go To Next</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CodeDefViewEditDefinition">
      <summary>Default code view editor definition</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CodeDefViewChooseEncoding">
      <summary>Choose encoding for default code view</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ViewInClassDiagram">
      <summary>View in class diagram</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_ADDDBTABLE">
      <summary>Editor command: Add database table</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_ADDDATATABLE">
      <summary>Editor command: Add data table</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_ADDFUNCTION">
      <summary>Editor command: Add function</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_ADDRELATION">
      <summary>Editor command: Add relation</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_ADDKEY">
      <summary>Editor command: Add key</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_ADDCOLUMN">
      <summary>Editor command: Add column</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_CONVERT_DBTABLE">
      <summary>Editor command: Convert database table</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_CONVERT_DATATABLE">
      <summary>Editor command: Convert data table</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_GENERATE_DATABASE">
      <summary>Editor command: Generate database</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_CONFIGURE_CONNECTIONS">
      <summary>Editor command: Configure connections</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_IMPORT_XMLSCHEMA">
      <summary>Editor command: Import XML schema</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_SYNC_WITH_DATABASE">
      <summary>Editor command: Sync with database</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_CONFIGURE">
      <summary>Editor command: Configure</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_CREATE_DATAFORM">
      <summary>Editor command: Create dataform</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_CREATE_ENUM">
      <summary>Editor command: Create enumeration</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_INSERT_FUNCTION">
      <summary>Editor command: Insert function</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_EDIT_FUNCTION">
      <summary>Editor command: Edit function</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_SET_PRIMARY_KEY">
      <summary>Editor command: Set primary key</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_INSERT_COLUMN">
      <summary>Editor command: Insert column</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_AUTO_SIZE">
      <summary>Editor command: Auto size</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_SHOW_RELATION_LABELS">
      <summary>Editor command: Show relation labels</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VSDGenerateDataSet">
      <summary>Generate debugger dataset</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VSDPreview">
      <summary>Debugger preview</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VSDConfigureAdapter">
      <summary>Configure debugger adapter</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VSDViewDatasetSchema">
      <summary>Debugger view dataset schema</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VSDDatasetProperties">
      <summary>Debugger dataset properties</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VSDParameterizeForm">
      <summary>Debugger parameterize form</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VSDAddChildForm">
      <summary>Add debugger child form</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_EDITCONSTRAINT">
      <summary>Editor command: Edit constraint</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_DELETECONSTRAINT">
      <summary>Editor command: Delete constraint</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_EDITDATARELATION">
      <summary>Editor command: Edit data relation</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CloseProject">
      <summary>Close project</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ReloadCommandBars">
      <summary>Reload command bars</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SolutionPlatform">
      <summary>Solution platform</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SolutionPlatformGetList">
      <summary>Get Solution platform list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_DATAACCESSOR">
      <summary>Editor command: Data accessor</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_ADD_DATAACCESSOR">
      <summary>Editor command: Add data accessor</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_QUERY">
      <summary>Editor command: Query</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_ADD_QUERY">
      <summary>Editor command: Add query</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_PUBLISHSELECTION">
      <summary>Editor command: Publish selection</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_PUBLISHSLNCTX">
      <summary>Editor command: Publish solution control</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowserShowCallsTo">
      <summary>Call browser show calls to</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowserShowCallsFrom">
      <summary>Call browser show calls from</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowserShowNewCallsTo">
      <summary>Call browser show new calls to</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowserShowNewCallsFrom">
      <summary>Call browser show new calls from</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser1ShowCallsTo">
      <summary>Call browser 1 show calls to</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser2ShowCallsTo">
      <summary>Call browser 2 show full names</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser3ShowCallsTo">
      <summary>Call browser 3 show full names</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser4ShowCallsTo">
      <summary>Call browser 4 show full names</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser5ShowCallsTo">
      <summary>Call browser 5 show full names</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser6ShowCallsTo">
      <summary>Call browser 6 show full names</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser7ShowCallsTo">
      <summary>Call browser 7 show full names</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser8ShowCallsTo">
      <summary>Call browser 8 show full names</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser9ShowCallsTo">
      <summary>Call browser 9 show full names</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser10ShowCallsTo">
      <summary>Call browser 10 show calls to</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser11ShowCallsTo">
      <summary>Call browser 11 show calls to</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser12ShowCallsTo">
      <summary>Call browser 12 show calls to</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser13ShowCallsTo">
      <summary>Call browser 13 show calls to</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser14ShowCallsTo">
      <summary>Call browser 14 show calls to</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser15ShowCallsTo">
      <summary>Call browser 15 show calls to</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser16ShowCallsTo">
      <summary>Call browser 16 show calls from</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser1ShowCallsFrom">
      <summary>Call browser 1 show calls from</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser2ShowCallsFrom">
      <summary>Call browser 2 show calls to</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser3ShowCallsFrom">
      <summary>Call browser 3 show calls to</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser4ShowCallsFrom">
      <summary>Call browser 4 show calls to</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser5ShowCallsFrom">
      <summary>Call browser 5 show calls to</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser6ShowCallsFrom">
      <summary>Call browser 6 show calls to</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser7ShowCallsFrom">
      <summary>Call browser 7 show calls to</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser8ShowCallsFrom">
      <summary>Call browser 8 show calls to</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser9ShowCallsFrom">
      <summary>Call browser 9 show calls to</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser10ShowCallsFrom">
      <summary>Call browser 10 show calls from</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser11ShowCallsFrom">
      <summary>Call browser 11 show calls from</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser12ShowCallsFrom">
      <summary>Call browser 12 show calls from</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser13ShowCallsFrom">
      <summary>Call browser 13 show calls from</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser14ShowCallsFrom">
      <summary>Call browser 14 show calls from</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser15ShowCallsFrom">
      <summary>Call browser 15 show calls from</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser16ShowCallsFrom">
      <summary>Call browser 16 settings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser1ShowFullNames">
      <summary>Call browser 1 show full names</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser2ShowFullNames">
      <summary>Call browser 2 sort by access</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser3ShowFullNames">
      <summary>Call browser 3 sort by access</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser4ShowFullNames">
      <summary>Call browser 4 sort by access</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser5ShowFullNames">
      <summary>Call browser 5 sort by access</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser6ShowFullNames">
      <summary>Call browser 6 sort by access</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser7ShowFullNames">
      <summary>Call browser 7 sort by access</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser8ShowFullNames">
      <summary>Call browser 8 sort by access</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser9ShowFullNames">
      <summary>Call browser 9 sort by access</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser10ShowFullNames">
      <summary>Call browser 10 show full names</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser11ShowFullNames">
      <summary>Call browser 11 show full names</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser12ShowFullNames">
      <summary>Call browser 12 show full names</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser13ShowFullNames">
      <summary>Call browser 13 show full names</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser14ShowFullNames">
      <summary>Call browser 14 show full names</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser15ShowFullNames">
      <summary>Call browser 15 show full names</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser16ShowFullNames">
      <summary>Call browser 16 show calls to</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser1Settings">
      <summary>Call browser 1 settings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser2Settings">
      <summary>Call browser 2 show calls from</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser3Settings">
      <summary>Call browser 3 show calls from</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser4Settings">
      <summary>Call browser 4 show calls from</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser5Settings">
      <summary>Call browser 5 show calls from</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser6Settings">
      <summary>Call browser 6 show calls from</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser7Settings">
      <summary>Call browser 7 show calls from</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser8Settings">
      <summary>Call browser 8 show calls from</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser9Settings">
      <summary>Call browser 9 show calls from</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser10Settings">
      <summary>Call browser 10 settings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser11Settings">
      <summary>Call browser 11 settings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser12Settings">
      <summary>Call browser 12 settings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser13Settings">
      <summary>Call browser 13 settings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser14Settings">
      <summary>Call browser 14 settings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser15Settings">
      <summary>Call browser 15 settings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser16Settings">
      <summary>Call browser 16 search combo list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser1SortAlpha">
      <summary>Call browser 1 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser2SortAlpha">
      <summary>Call browser 2 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser3SortAlpha">
      <summary>Call browser 3 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser4SortAlpha">
      <summary>Call browser 4 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser5SortAlpha">
      <summary>Call browser 5 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser6SortAlpha">
      <summary>Call browser 6 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser7SortAlpha">
      <summary>Call browser 7 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser8SortAlpha">
      <summary>Call browser 8 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser9SortAlpha">
      <summary>Call browser 9 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser10SortAlpha">
      <summary>Call browser 10 sort alphabetically</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser11SortAlpha">
      <summary>Call browser 11 sort alphabetically</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser12SortAlpha">
      <summary>Call browser 12 sort alphabetically</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser13SortAlpha">
      <summary>Call browser 13 sort alphabetically</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser14SortAlpha">
      <summary>Call browser 14 sort alphabetically</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser15SortAlpha">
      <summary>Call browser 15 sort alphabetically</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser16SortAlpha">
      <summary>Call browser 16 sort by access</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser1SortAccess">
      <summary>Call browser 1 sort by access</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser2SortAccess">
      <summary>Call browser 2 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser3SortAccess">
      <summary>Call browser 3 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser4SortAccess">
      <summary>Call browser 4 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser5SortAccess">
      <summary>Call browser 5 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser6SortAccess">
      <summary>Call browser 6 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser7SortAccess">
      <summary>Call browser 7 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser8SortAccess">
      <summary>Call browser 8 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser9SortAccess">
      <summary>Call browser 9 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser10SortAccess">
      <summary>Call browser 10 sort by access</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser11SortAccess">
      <summary>Call browser 11 sort by access</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser12SortAccess">
      <summary>Call browser 12 sort by access</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser13SortAccess">
      <summary>Call browser 13 sort by access</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser14SortAccess">
      <summary>Call browser 14 sort by access</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser15SortAccess">
      <summary>Call browser 15 sort by access</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser16SortAccess">
      <summary>Call browser 16 show full names</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ShowCallBrowser">
      <summary>Show call browser</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser1">
      <summary>Call browser 1</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser2">
      <summary>Call browser 2 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser3">
      <summary>Call browser 3 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser4">
      <summary>Call browser 4 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser5">
      <summary>Call browser 5 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser6">
      <summary>Call browser 6 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser7">
      <summary>Call browser 7 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser8">
      <summary>Call browser 8 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser9">
      <summary>Call browser 9 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser10">
      <summary>Call browser 10</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser11">
      <summary>Call browser 11</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser12">
      <summary>Call browser 12</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser13">
      <summary>Call browser 13</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser14">
      <summary>Call browser 14</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser15">
      <summary>Call browser 15</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser16">
      <summary>Call browser 15</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser17">
      <summary>Call browser 17</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GlobalUndo">
      <summary>Global Undo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GlobalRedo">
      <summary>Global Re-do</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowserShowCallsToCmd">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowserShowCallsFromCmd">
      <summary>Call browser show calls from command</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowserShowNewCallsToCmd">
      <summary>Call browser show new calls to command</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowserShowNewCallsFromCmd">
      <summary>Call browser show new calls from command</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser1Search">
      <summary>Call browser 1 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser2Search">
      <summary>Call browser 2 search combo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser3Search">
      <summary>Call browser 3 search combo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser4Search">
      <summary>Call browser 4 search combo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser5Search">
      <summary>Call browser 5 search combo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser6Search">
      <summary>Call browser 6 search combo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser7Search">
      <summary>Call browser 7 search combo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser8Search">
      <summary>Call browser 8 search combo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser9Search">
      <summary>Call browser 9 search combo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser10Search">
      <summary>Call browser 10 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser11Search">
      <summary>Call browser 11 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser12Search">
      <summary>Call browser 12 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser13Search">
      <summary>Call browser 13 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser14Search">
      <summary>Call browser 14 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser15Search">
      <summary>Call browser 15 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser16Search">
      <summary>Call browser 16 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser1Refresh">
      <summary>Call browser 1 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser2Refresh">
      <summary>Call browser 2 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser3Refresh">
      <summary>Call browser 3 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser4Refresh">
      <summary>Call browser 4 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser5Refresh">
      <summary>Call browser 5 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser6Refresh">
      <summary>Call browser 6 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser7Refresh">
      <summary>Call browser 7 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser8Refresh">
      <summary>Call browser 8 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser9Refresh">
      <summary>Call browser 9 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser10Refresh">
      <summary>Call browser 10 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser11Refresh">
      <summary>Call browser 11 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser12Refresh">
      <summary>Call browser 12 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser13Refresh">
      <summary>Call browser 13 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser14Refresh">
      <summary>Call browser 14 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser15Refresh">
      <summary>Call browser 15 refresh</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser16Refresh">
      <summary>Call browser 16</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser1SearchCombo">
      <summary>Call browser 1 search combo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser2SearchCombo">
      <summary>Call browser 2 search combo list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser3SearchCombo">
      <summary>Call browser 3 search combo list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser4SearchCombo">
      <summary>Call browser 4 search combo list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser5SearchCombo">
      <summary>Call browser 5 search combo list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser6SearchCombo">
      <summary>Call browser 6 settings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser7SearchCombo">
      <summary>Call browser 7 search combo list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser8SearchCombo">
      <summary>Call browser 8 search combo list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser9SearchCombo">
      <summary>Call browser 9 search combo list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser10SearchCombo">
      <summary>Call browser 10 search combo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser11SearchCombo">
      <summary>Call browser 11 search combo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser12SearchCombo">
      <summary>Call browser 12 search combo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser13SearchCombo">
      <summary>Call browser 13 search combo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser14SearchCombo">
      <summary>Call browser 14 search combo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser15SearchCombo">
      <summary>Call browser 15 search combo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser16SearchCombo">
      <summary>Call browser 16 search</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TaskListProviderCombo">
      <summary>Task list provider combo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.TaskListProviderComboList">
      <summary>Task list provider combo list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CreateUserTask">
      <summary>Create user task</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ErrorListShowErrors">
      <summary>Error list show errors</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ErrorListShowWarnings">
      <summary>Error list show warnings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ErrorListShowMessages">
      <summary>Error list show messages</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.Registration">
      <summary>Registration</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser1SearchComboList">
      <summary>Call browser 1 search combo list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser2SearchComboList">
      <summary>Call browser 2 settings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser3SearchComboList">
      <summary>Call browser 3 settings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser4SearchComboList">
      <summary>Call browser 4 settings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser5SearchComboList">
      <summary>Call browser 5 settings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser6SearchComboList">
      <summary>Call browser 6 search combo list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser7SearchComboList">
      <summary>Call browser 7 settings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser8SearchComboList">
      <summary>Call browser 8 settings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser9SearchComboList">
      <summary>Call browser 9 settings</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser10SearchComboList">
      <summary>Call browser 10 search combo list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser11SearchComboList">
      <summary>Call browser 11 search combo list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser12SearchComboList">
      <summary>Call browser 12 search combo list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser13SearchComboList">
      <summary>Call browser 13 search combo list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser14SearchComboList">
      <summary>Call browser 14 search combo list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser15SearchComboList">
      <summary>Call browser 15 search combo list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CallBrowser16SearchComboList">
      <summary>Call browser 16 search combo</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SnippetProp">
      <summary>Snippet property</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SnippetRef">
      <summary>Snippet reference</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SnippetRepl">
      <summary>Snippet replace</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.StartPage">
      <summary>Start page</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EditorLineFirstColumn">
      <summary>Editor line first column</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EditorLineFirstColumnExtend">
      <summary>Editor line first column extended</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SEServerExplorer">
      <summary>SE Server Explorer</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SEDataExplorer">
      <summary>SE Data explorer</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_UPDATEMGDRES">
      <summary>Editor command: Update managed resources</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_PROJTOOLORDER">
      <summary>Editor command: Project tool order</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_PROJECTTOOLFILES">
      <summary>Editor command: Project tool files</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_OTB_PGO_INSTRUMENT">
      <summary>Editor command: Object test bench / Profile guided optimization instrument</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_OTB_PGO_OPT">
      <summary>Editor command: Object test bench / Profile guided optimization optimize</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_OTB_PGO_UPDATE">
      <summary>Editor command: Object test bench / Profile guided optimization update</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_OTB_PGO_RUNSCENARIO">
      <summary>Editor command: Object test bench / Profile guided optimization run scenario</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_TAB">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_ADDMASTERPAGE">
      <summary>Editor command: Add master page</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_ADDCONTENTPAGE">
      <summary>Editor command: Add content page</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_ADDSTYLESHEET">
      <summary>Editor command: Add stylesheet</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_SETBROWSELOCATION">
      <summary>Editor command: Set browse location</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_REFRESHFOLDER">
      <summary>Editor command: Refresh folder</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_SETBROWSELOCATIONCTX">
      <summary>Editor command: Set browse location control</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_VIEWMARKUP">
      <summary>Editor command: View markup</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_NEXTMETHOD">
      <summary>Editor command: Next method</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_PREVMETHOD">
      <summary>Editor command: Previous method</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_RENAMESYMBOL">
      <summary>Editor command: Rename symbol</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_SHOWREFERENCES">
      <summary>Editor command: Show references</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_CREATESNIPPET">
      <summary>Editor command: Create snippet</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_CREATEREPLACEMENT">
      <summary>Editor command: Create replacement</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_INSERTCOMMENT">
      <summary>Editor command: Insert comment</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_VALIDATION_TARGET">
      <summary>Editor command: Validation target</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_VALIDATION_TARGET_GET_LIST">
      <summary>Editor command: Get validation target list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_CSS_TARGET">
      <summary>Editor command: CSS target</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ECMD_CSS_TARGET_GET_LIST">
      <summary>Editor command: Get CSS target list</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NewDiagram">
      <summary>New diagram</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NewTable">
      <summary>New table</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NewDBItem">
      <summary>New database item</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NewTrigger">
      <summary>New trigger</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.Debug">
      <summary>Debug</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NewProcedure">
      <summary>New package procedure</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NewQuery">
      <summary>New query</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RefreshLocal">
      <summary>Refresh local</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DbAddDataConnection">
      <summary>Add database data connection</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DBDefDBRef">
      <summary>Database ref</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RunCmd">
      <summary>Run command</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RunOn">
      <summary>Run on</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NewDBRef">
      <summary>New database reference</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SetAsDef">
      <summary>Set as definition</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CreateCmdFile">
      <summary>Create command file</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.Cancel">
      <summary>Cancel</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NewDatabase">
      <summary>New database</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NewUser">
      <summary>New user</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NewRole">
      <summary>New role</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ChangeLogin">
      <summary>Change login</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NewView">
      <summary>New view</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ModifyConnection">
      <summary>Modify connection</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.Disconnect">
      <summary>Disconnect</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CopyScript">
      <summary>Copy script</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AddSCC">
      <summary>Add source control</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RemoveSCC">
      <summary>Remove source control</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GetLatest">
      <summary>Get latest</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CheckOut">
      <summary>Check out</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CheckIn">
      <summary>Check in</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UndoCheckOut">
      <summary>Undo checkout </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AddItemSCC">
      <summary>Add source control item</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NewPackageSpec">
      <summary>New package specification</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NewPackageBody">
      <summary>New package body</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.InsertSQL">
      <summary>Insert SQL</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RunSelection">
      <summary>Run selection</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UpdateScript">
      <summary>Update script</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NewScript">
      <summary>New script</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NewFunction">
      <summary>New function</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NewTableFunction">
      <summary>New table function</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.NewInlineFunction">
      <summary>New inline function</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AddDiagram">
      <summary>Add diagram</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AddTable">
      <summary>Add table</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AddSynonym">
      <summary>Add synonym</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AddView">
      <summary>Add view</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AddProcedure">
      <summary>Add procedure</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AddFunction">
      <summary>Add function</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AddTableFunction">
      <summary>Add table function</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AddInlineFunction">
      <summary>Add inline function</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AddPkgSpec">
      <summary>Add package specification</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AddPkgBody">
      <summary>Add package body</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.AddTrigger">
      <summary>Add Trigger</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ExportData">
      <summary>Export data</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DbnsVcsAdd">
      <summary>Database version control add</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DbnsVcsRemove">
      <summary>Database version control remove</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DbnsVcsCheckout">
      <summary>Database version control checkout</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DbnsVcsUndoCheckout">
      <summary>Database version control undo checkout</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DbnsVcsCheckin">
      <summary>Database version control checkin</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SERetrieveData">
      <summary>SE retrieve data</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SEEditTextObject">
      <summary>SE edit text object</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DesignSQLBlock">
      <summary>Design SQL block</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.RegisterSQLInstance">
      <summary>Register SQL instance</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UnregisterSQLInstance">
      <summary>Unregister SQL instance</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CommandWindowSaveScript">
      <summary>Command window save script</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CommandWindowRunScript">
      <summary>Command window run script</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CommandWindowCursorUp">
      <summary>Command window cursor up</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CommandWindowCursorDown">
      <summary>Command window cursor down</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CommandWindowCursorLeft">
      <summary>Command window cursor left</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CommandWindowCursorRight">
      <summary>Command window cursor right</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CommandWindowHistoryUp">
      <summary>Command window history up</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CommandWindowHistoryDown">
      <summary>Command window history down</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.VIEWCOMPONENTDESIGNER">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.GOTOTYPEDEF">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SHOWSNIPPETHIGHLIGHTING">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.HIDESNIPPETHIGHLIGHTING">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDSERVICEREFERENCE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ADDSERVICEREFERENCECTX">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.UPDATESERVICEREFERENCE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CONFIGURESERVICEREFERENCE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.IMPORTICONIMAGE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.EXPORTICONIMAGE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OPENEXTERNALEDITOR">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVShowInheritedMembers">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVShowBaseTypes">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVShowDerivedTypes">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVShowHidden">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVBack">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVForward">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVSearchCombo">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVSearch">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVSortObjectsAlpha">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVSortObjectsType">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVSortObjectsAccess">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVGroupObjectsType">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVSortMembersAlpha">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVSortMembersType">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVSortMembersAccess">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVTypeBrowserSettings">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVViewMembersAsImplementor">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVViewMembersAsSubclass">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVViewMembersAsUser">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVReserved1">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVReserved2">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVShowProjectReferences">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVGroupMembersType">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVClearSearch">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVFilterToType">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVSortByBestMatch">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVSearchMRUList">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVViewOtherMembers">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVSearchCmd">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.CVGoToSearchCmd">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBShowInheritedMembers">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBShowBaseTypes">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBShowDerivedTypes">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBShowHidden">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBBack">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBForward">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBSearchCombo">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBSearch">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBSortObjectsAlpha">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBSortObjectsType">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBSortObjectsAccess">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBGroupObjectsType">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBSortMembersAlpha">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBSortMembersType">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBSortMembersAccess">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBTypeBrowserSettings">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBViewMembersAsImplementor">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBViewMembersAsSubclass">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBViewMembersAsUser">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBNamespacesView">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBContainersView">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBReserved1">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBGroupMembersType">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBClearSearch">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBFilterToType">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBSortByBestMatch">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBSearchMRUList">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBViewOtherMembers">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBSearchCmd">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBGoToSearchCmd">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.OBShowExtensionMembers">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FSRSortObjectsAlpha">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.FSRSortByBestMatch">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.Design">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.DesignOn">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.SEDesign">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VSStd2KCmdID.ToggleConsumeFirstCompletionMode">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds">
      <summary>An enumeration of commands that apply to events unique to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUIHierarchyWindow" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_RightClick">
      <summary>Occurs when the user right clicks the mouse over the tree's pane.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_DoubleClick">
      <summary>Occurs when the user double clicks the mouse on the tree's pane.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_EnterKey">
      <summary>Occurs when the user hits the Enter key while the tree's pane has focus.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_StartLabelEdit">
      <summary>Occurs when tree node text becomes an editable entry field.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_CommitLabelEdit">
      <summary>Occurs when a tree node turns from an editable entry field back into static text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.VSConstants.VsUIHierarchyWindowCmdIds.UIHWCMDID_CancelLabelEdit">
      <summary>Occurs when the user hits the escape key and causes an editable tree node to turn back into static text.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.DialogPage">
      <summary>Provides a standard dialog box functionality for implementing Toolbox property sheets, ToolsOptions pages, or custom UI dialog boxes, with support for the Visual Studio automation model, Windows Forms, and state persistence by using the Visual Studio settings mechanism.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DialogPage.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.DialogPage" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.DialogPage.AutomationObject">
      <summary>Gets the DTE automation model object for a given instance of a dialog page class.</summary>
      <returns>An instance of the automation object, or null if no automation support is available.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DialogPage.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources that are used by a dialog page class and optionally releases the managed resources; the parent class, <see cref="T:System.ComponentModel.Component" /> supports unmanaged resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DialogPage.LoadSettingsFromStorage">
      <summary>Called by Visual Studio to load the settings of a dialog page from local storage, generally the registry.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DialogPage.LoadSettingsFromXml(Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader)">
      <summary>Called by Visual Studio to load the settings of a dialog page from the Visual Studio settings storage on disk.</summary>
      <param name="reader">[in]An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsReader" /> interface that is provided by the environment to the VSPackage to give read access to the Visual Studio settings file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DialogPage.OnActivate(System.ComponentModel.CancelEventArgs)">
      <summary>Handles Windows Activate messages from the Visual Studio environment.</summary>
      <param name="e">[in] Arguments to event handler.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DialogPage.OnApply(Microsoft.VisualStudio.Shell.DialogPage.PageApplyEventArgs)">
      <summary>Handles Apply messages from the Visual Studio environment.</summary>
      <param name="e">[in] Arguments to event handler.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DialogPage.OnClosed(System.EventArgs)">
      <summary>Handles Close messages from the Visual Studio environment.</summary>
      <param name="e">[in] Arguments to event handler.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DialogPage.OnDeactivate(System.ComponentModel.CancelEventArgs)">
      <summary>Handles Deactive messages from the Visual Studio environment.</summary>
      <param name="e">[in] Arguments to event handler.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DialogPage.ResetSettings">
      <summary>Should be overridden to reset settings to their default values.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DialogPage.SaveSettingsToStorage">
      <summary>Called by Visual Studio to store the settings of a dialog page in local storage, typically the registry.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DialogPage.SaveSettingsToXml(Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter)">
      <summary>Called by Visual Studio to store the settings of a dialog page to the Visual Studio settings storage on disk.</summary>
      <param name="writer">[in]A <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsSettingsWriter" /> interface that is provided by the environment to the VSPackage to give write access to the Visual Studio settings file.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.DialogPage.SettingsRegistryPath">
      <summary>Gets or sets the sub-key under the Visual Studio version-specific root for storing settings data for a dialog page.</summary>
      <returns>The sub-key of the Visual Studio version-specific registry tree that contain the settings for a given dialog page.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.DialogPage.Site">
      <summary>Gets or sets the site of the dialog page. Overrides the implementation inherited from <see cref="T:System.ComponentModel.Component" />.</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISite" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.DialogPage.System#Windows#Forms#IWin32Window#Handle">
      <summary>Gets the handle of the window of the dialog page.</summary>
      <returns>A pointer that is the handle of an <see cref="T:System.Windows.Forms.IWin32Window" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.DialogPage.Window">
      <summary>Gets the window that is used as the user interface of the dialog page.</summary>
      <returns>An <see cref="T:System.Windows.Forms.IWin32Window" /> that provides the handle to the window that acts as the user interface for the dialog page.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.DialogPage.PageApplyEventArgs">
      <summary>Event arguments that allow the <see cref="M:Microsoft.VisualStudio.Shell.DialogPage.OnApply(Microsoft.VisualStudio.Shell.DialogPage.PageApplyEventArgs)" /> method to indicate how to handle the apply event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.DialogPage.PageApplyEventArgs.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.DialogPage.PageApplyEventArgs" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.DialogPage.PageApplyEventArgs.ApplyBehavior">
      <summary>Gets or sets the kind of behavior that should take plan on Apply.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.DialogPage.ApplyKind" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ErrorListProvider">
      <summary>This task provider is used to provide tasks for the Visual Studio Error List window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.#ctor(System.IServiceProvider)">
      <summary>Creates an ErrorListProvider object.</summary>
      <param name="provider">
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.BringToFront">
      <summary>Activates the Error List window and makes it visible.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.Dispose(System.Boolean)">
      <summary>Activates the Error List window and makes it visible.</summary>
      <param name="disposing">Parameter is set to true if the task list can be disposed, that is, if the <see cref="T:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection" /> contains tasks.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.Finalize">
      <summary>Destructor for ErrorListProvider.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.ForceShowErrors">
      <summary>Shows the errors in the Error List window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ErrorListProvider.Show">
      <summary>Creates a Error List tool window and shows the errors in it. </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ErrorListProvider.VsTaskList">
      <summary>Returns the service that allows VSPackage implementers to store and manage their tasks as a part of the environment's task list.</summary>
      <returns>Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsTaskList" /> object.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ErrorTask">
      <summary>Represents an error task on the Task List. This class implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsErrorItem" />. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ErrorTask.#ctor">
      <summary>Initializes a new instance of an <see cref="T:Microsoft.VisualStudio.Shell.ErrorTask" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ErrorTask.#ctor(System.Exception)">
      <summary>Initializes a new instance of an <see cref="T:Microsoft.VisualStudio.Shell.ErrorTask" /> for the specified error.</summary>
      <param name="error">
        <see cref="T:System.Exception" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ErrorTask.ErrorCategory">
      <summary>Gets or sets the error category of this task.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.TaskErrorCategory" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ErrorTask.HierarchyItem">
      <summary>Gets or sets the hierarchy item associated with this task.</summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> item associated with the task.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ErrorTask.Microsoft#VisualStudio#Shell#Interop#IVsErrorItem#GetCategory(System.UInt32@)">
      <summary>Gets the category of the error.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="pCategory">[out] Returns the <see cref="T:Microsoft.VisualStudio.Shell.TaskErrorCategory" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ErrorTask.Microsoft#VisualStudio#Shell#Interop#IVsErrorItem#GetHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@)">
      <summary>Gets the hierarchy node associated with the task.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="ppHier">[out] Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the node associated with this task.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute">
      <summary>Provides information for the Visual Studio splash screen and the Help About dialog box when applied to a <see cref="T:Microsoft.VisualStudio.Shell.Package" />-derived class or a class that implements <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.#ctor(System.Boolean,System.String,System.String,System.String)">
      <summary>Initializes a new InstalledProductRegistrationAttribute instance for the specified product.</summary>
      <param name="useInterface">true if the package implements the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsInstalledProduct" /> interface to collect and display the information, otherwise false.</param>
      <param name="productName">The name of the product.</param>
      <param name="productDetails">The detailed description of the product.</param>
      <param name="productId">The product ID.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.IconResourceID">
      <summary>Gets or sets the resource ID of the icon associated with the product.</summary>
      <returns>The resource ID of the icon associated with the product.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.LanguageIndependentName">
      <summary>Gets or sets the (non-localized) name of the product.</summary>
      <returns>The (non-localized) name of the product.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.ProductDetails">
      <summary>Gets or sets the detailed description of the product.</summary>
      <returns>The detailed description of the product.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.ProductDetailsResourceID">
      <summary>Gets or sets the product details resource ID.</summary>
      <returns>The product details resource ID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.ProductId">
      <summary>Gets or sets the product ID.</summary>
      <returns>The ID of the product.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.ProductName">
      <summary>Gets or sets the name of the product.</summary>
      <returns>The name of the product.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.ProductNameResourceID">
      <summary>Gets or sets the resource ID of the product name.</summary>
      <returns>The product name resource ID.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers information about a VSPackage when called by an external registration tool such as regpkg.exe. </summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the registration information about a VSPackage when called by an external registration tool such as regpkg.exe. </summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.UseInterface">
      <summary>Gets or whether the package implements the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsInstalledProduct" /> interface to display a bitmap in the splash screen and information in the About dialog box on the Help menu.</summary>
      <returns>The value is true if the product installation implements the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsInstalledProduct" /> interface and false otherwise.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.InstalledProductRegistrationAttribute.UsePackage">
      <summary>Gets or sets whether the product installation uses the package ID.</summary>
      <returns>The value is true if the product installation uses the package ID, and false otherwise.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.IResXResourceService">
      <summary>An abstraction layer that lets clients control the resx readers and writers used within Visual Studio.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.IResXResourceService.GetResXResourceReader(System.IO.TextReader,System.Boolean,System.String)">
      <summary>Returns a resx resource reader given a <paramref name="basepath" /> and name.</summary>
      <returns>
        <see cref="T:System.Resources.IResourceReader" />.</returns>
      <param name="textReader">The <see cref="T:System.IO.TextReader" /> that is wrapped by the returned <see cref="T:System.Resources.IResourceReader" />.</param>
      <param name="useResXDataNodes">If this value is true the reader returns one or more <see cref="T:System.Resources.ResXDataNode" />s instead of the object type the resource becomes at runtime in order to figure out which files the resx references</param>
      <param name="basePath">The path of the resource file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.IResXResourceService.GetResXResourceReader(System.String,System.Boolean)">
      <summary>Returns a resx resource reader that matches a given a <paramref name="resXFullName" />.</summary>
      <returns>
        <see cref="T:System.Resources.IResourceReader" />.</returns>
      <param name="resXFullName">Creates a reader for the specified file.</param>
      <param name="useResXDataNodes">If this value is true the reader returns one or more <see cref="T:System.Resources.ResXDataNode" />s instead of the object type the resource becomes at runtime in order to figure out which files the resx references</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.IResXResourceService.GetResXResourceWriter(System.IO.TextWriter,System.String)">
      <summary>Returns a resx resource writer given a <paramref name="textWriter" /> and <paramref name="basepath" />.</summary>
      <returns>
        <see cref="T:System.Resources.IResourceWriter" />.</returns>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> that is wrapped by the returned <see cref="T:System.Resources.IResourceWriter" />.</param>
      <param name="basePath">The path of the resource file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.IResXResourceService.GetResXResourceWriter(System.String)">
      <summary>Returns a resx resource writer given resXFullName.</summary>
      <returns>
        <see cref="T:System.Resources.IResourceWriter" />.</returns>
      <param name="resXFullName">Creates a reader for the specified file.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.LocalizableProperties">
      <summary>
        <see cref="T:Microsoft.VisualStudio.Shell.LocalizableProperties" /> provides a class that supplies custom type information on localizable properties for an object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.#ctor">
      <summary>This default constructor creates a <see cref="T:Microsoft.VisualStudio.Shell.LocalizableProperties" /> object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.CreateDesignPropertyDescriptor(System.ComponentModel.PropertyDescriptor)">
      <summary>Returns a <see cref="T:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor" /> wrapper on the given property descriptor.</summary>
      <returns>Returns a <see cref="T:Microsoft.VisualStudio.Shell.DesignPropertyDescriptor" />.</returns>
      <param name="p">Property descriptor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetAttributes">
      <summary>Gets a collection of attributes for this component.</summary>
      <returns>Returns a collection of attributes.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetClassName">
      <summary>Returns the class name of this object.</summary>
      <returns>A string containing the class name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetComponentName">
      <summary>Returns the name of this object.</summary>
      <returns>A string containing the component name.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetConverter">
      <summary>Returns a type converter for this object.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.TypeConverter" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetDefaultEvent">
      <summary>Returns the default event for this object.</summary>
      <returns>Returns an <see cref="T:System.ComponentModel.EventDescriptor" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetDefaultProperty">
      <summary>Gets the default property for a component.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetEditor(System.Type)">
      <summary>Retrieves the editor for this object.</summary>
      <returns>Returns the editor object.</returns>
      <param name="editorBaseType">A <see cref="T:System.Type" /> that represents the base type of the editor you want to find. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetEvents">
      <summary>Gets the collection of events for a specified component.</summary>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> with the events for this component.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetEvents(System.Attribute[])">
      <summary>Gets the collection of events for a specified component using a specified array of attributes as a filter.</summary>
      <returns>An <see cref="T:System.ComponentModel.EventDescriptorCollection" /> with the events that match the specified attributes for this component.</returns>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> to use as a filter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetProperties">
      <summary>Gets the collection of properties.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetProperties(System.Attribute[])">
      <summary>Returns the properties for selected object using the attribute array as a filter.</summary>
      <returns>Returns a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />.</returns>
      <param name="attributes">An array of type <see cref="T:System.Attribute" /> to use as a filter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.LocalizableProperties.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>Returns the brows-able object.</summary>
      <returns>Returns the browsable object.</returns>
      <param name="pd">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> object.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.LogicalView">
      <summary>This enumeration lists the supported logical views.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.LogicalView.Primary">
      <summary>The corresponding GUID value is 00000000-0000-0000-0000-000000000000.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.LogicalView.Any">
      <summary>The corresponding GUID value is FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.LogicalView.Debugging">
      <summary>The corresponding GUID value is 7651A700-06E5-11D1-8EBD-00A0C90F26EA.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.LogicalView.Code">
      <summary>The corresponding GUID value is 7651A701-06E5-11D1-8EBD-00A0C90F26EA.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.LogicalView.Designer">
      <summary>The corresponding GUID value is 7651A702-06E5-11D1-8EBD-00A0C90F26EA.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.LogicalView.Text">
      <summary>The corresponding GUID value is 7651A703-06E5-11D1-8EBD-00A0C90F26EA.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.LogicalView.UserChoose">
      <summary>The corresponding GUID value is 7651A704-06E5-11D1-8EBD-00A0C90F26EA.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.LogicalView.ProjectSpecific">
      <summary>The corresponding GUID value is 80A3471A-6B87-433E-A75A-9D461DE0645F.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.OleDataObject">
      <summary>Provides a managed class that implements the IOleDataObject interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleDataObject.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.OleDataObject" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleDataObject.#ctor(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.OleDataObject" /> for the specified object implementing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" />.</summary>
      <param name="oleData">The underlying <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleDataObject.#ctor(System.Runtime.InteropServices.ComTypes.IDataObject)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.OleDataObject" /> for the specified <see cref="T:System.Runtime.InteropServices.ComTypes.IDataObject" />.</summary>
      <param name="comData">The underlying <see cref="T:System.Runtime.InteropServices.ComTypes.IDataObject" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleDataObject.#ctor(System.Windows.Forms.IDataObject)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.OleDataObject" /> for the specified <see cref="T:System.Windows.Forms.IDataObject" />.</summary>
      <param name="winData">The underlying <see cref="T:System.Windows.Forms.IDataObject" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#DAdvise(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],System.UInt32,Microsoft.VisualStudio.OLE.Interop.IAdviseSink,System.UInt32@)">
      <summary>Establishes a connection between the data object and a caller object implementing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IAdviseSink" />.</summary>
      <returns>If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise an error code.</returns>
      <param name="pFormatetc">Pointer to a FORMATETC structure that defines the format, target device, aspect, and medium that will be used for future notifications. For example, one sink may want to know only when the bitmap representation of the data in the data object changes. Another sink may be interested in only the metafile format of the same object. Each advise sink is notified when the data of interest changes. This data is passed back to the advise sink when notification occurs.</param>
      <param name="ADVF">DWORD that specifies a group of flags for controlling the advisory connection. Valid values are from the enumeration ADVF. However, only some of the possible ADVF values are relevant for this method.</param>
      <param name="pAdvSink">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IAdviseSink" /> interface on the advise sink that will receive the change notification.</param>
      <param name="pdwConnection">Pointer to a DWORD token that identifies this connection. You can use this token later to delete the advisory connection (by passing it to <see cref="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.DUnadvise(System.UInt32)" />. If this value is zero, the connection was not established.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#DUnadvise(System.UInt32)">
      <summary>Terminates an advise connection previously established through <see cref="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.DAdvise(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],System.UInt32,Microsoft.VisualStudio.OLE.Interop.IAdviseSink,System.UInt32@)" />.</summary>
      <param name="dwConnection">DWORD token that specifies the connection to remove. Use the value returned by <see cref="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.DAdvise(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],System.UInt32,Microsoft.VisualStudio.OLE.Interop.IAdviseSink,System.UInt32@)" /> when the connection was originally established.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#EnumDAdvise(Microsoft.VisualStudio.OLE.Interop.IEnumSTATDATA@)">
      <summary>Creates an enumerator to iterate through the current advisory connections.</summary>
      <returns>If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise an error code.</returns>
      <param name="ppenumAdvise">Address of <see cref="T:Microsoft.VisualStudio.OLE.Interop.IEnumSTATDATA" />* pointer variable that receives the interface pointer to the new enumerator object. If the implementation sets *<paramref name="ppenumAdvise" /> to NULL, there are no connections to advise sinks at this time.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#EnumFormatEtc(System.UInt32,Microsoft.VisualStudio.OLE.Interop.IEnumFORMATETC@)">
      <summary>Creates an enumerator to iterate through the <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structures supported by the data object.</summary>
      <returns>If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise an error code.</returns>
      <param name="dwDirection">Direction of the data through a value from the enumeration <see cref="T:Microsoft.VisualStudio.OLE.Interop.DATADIR" />.</param>
      <param name="ppenumFormatEtc">Address of <see cref="T:Microsoft.VisualStudio.OLE.Interop.IEnumFORMATETC" />* pointer variable that receives the interface pointer to the new enumerator object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#GetCanonicalFormatEtc(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.FORMATETC[])">
      <summary>Retrieves a <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure that is logically equivalent to one that is more complex.</summary>
      <returns>If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise an error code.</returns>
      <param name="pformatectIn">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure that defines the format, medium, and target device that the caller would like to use to retrieve data in a subsequent call such as <see cref="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.GetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])" />. The TYMED member is not significant in this case and should be ignored.</param>
      <param name="pformatetcOut">Pointer to a <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure that contains the most general information possible for a specific rendering, making it canonically equivalent to <paramref name="pFormatetcIn" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#GetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])">
      <summary>Transfers data from the data object to the client. The <paramref name="pformatetcIn" /> parameter must specify a storage medium type of <see cref="F:Microsoft.VisualStudio.OLE.Interop.TYMED.TYMED_MFPICT" />.</summary>
      <param name="pformatetcIn">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure that defines the format, medium, and target device to use when passing the data.</param>
      <param name="pRemoteMedium">Pointer to the STGMEDIUM structure that indicates the storage medium containing the returned data through its tymed member, and the responsibility for releasing the medium through the value of its punkOuter member.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#GetDataHere(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])">
      <summary>Similar to <see cref="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.GetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])" />, except the client must allocate the <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM" /> structure.</summary>
      <param name="pFormatetc">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in the tymed member of the FORMATETC structure. These values are valid:TYMED_STORAGETYMED_STREAMTYMED_HGLOBALTYMED_FILE</param>
      <param name="pRemoteMedium">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM" /> structure that defines the storage medium containing the data being transferred.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#QueryGetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[])">
      <summary>Determines whether the data object supports a particular <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure for transferring data.</summary>
      <returns>If the method succeeded, <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />, otherwise an error code.</returns>
      <param name="pFormatetc">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in the tymed member of the FORMATETC structure. These values are valid:TYMED_STORAGETYMED_STREAMTYMED_HGLOBALTYMED_FILE</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft#VisualStudio#OLE#Interop#IDataObject#SetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[],System.Int32)">
      <summary>Transfers data from the client to the data object.</summary>
      <param name="pFormatetc">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.FORMATETC" /> structure that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in the <paramref name="tymed" /> member of the FORMATETC structure. These values are valid:TYMED_STORAGETYMED_STREAMTYMED_HGLOBALTYMED_FILE</param>
      <param name="pmedium">Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.STGMEDIUM" /> structure that defines the storage medium containing the data being transferred. The medium must be allocated by the caller and filled in by <see cref="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.GetDataHere(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[])" />. The caller must also free the medium. The implementation of this method must always supply a value of NULL for the punkForRelease member of the STGMEDIUM structure to which this parameter points.</param>
      <param name="fRelease">If TRUE, the data object called, which implements <see cref="M:Microsoft.VisualStudio.Shell.OleDataObject.Microsoft.VisualStudio.OLE.Interop.IDataObject.SetData(Microsoft.VisualStudio.OLE.Interop.FORMATETC[],Microsoft.VisualStudio.OLE.Interop.STGMEDIUM[],System.Int32)" />, owns the storage medium after the call returns.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideAssemblyFilterAttribute">
      <summary>Describes the assemblies that the <see cref="T:Microsoft.VisualStudio.Shell.IConfigureToolboxItem" /> class supports.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideAssemblyFilterAttribute.#ctor(System.String)">
      <summary>Creates a new instance of a <see cref="T:Microsoft.VisualStudio.Shell.ProvideAssemblyFilterAttribute" /> object with the specified assembly name.</summary>
      <param name="assemblyFilter">[in] The full name of an assembly.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideAssemblyFilterAttribute.AssemblyFilter">
      <summary>Gets the full assembly specification of the filter.</summary>
      <returns>A string containing the full assembly specification of the filter.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute">
      <summary>Associates a file extension to a given editor factory when applied to a class that inherits from <see cref="T:Microsoft.VisualStudio.Shell.Package" /> or implements the interface <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsPackage" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.#ctor(System.Object,System.String,System.Int32)">
      <summary>Initializes an instance of ProvideEditorExtensionAttribute.</summary>
      <param name="factoryType">One of following types:The type of the editor factory expressed as a string.The GUID of the editor factory.The type of the editor factory.</param>
      <param name="extension">The file extension to associate with the editor factory. This extension should include the prefix “.”.</param>
      <param name="priority">The priority of this editor factory. The editors with the higher priority number is given a chance to read a file first. Upon failure, the next editor in priority is used.  </param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.DefaultName">
      <summary>Gets or sets the default name of the editor.</summary>
      <returns>The default name of the editor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.EditorFactoryNotify">
      <summary>Gets or sets the value that determines whether or not the EditorFactoryNotify registry key should be created.</summary>
      <returns>true if the EditorFactoryNotify registry key should be created, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.Extension">
      <summary>Gets the file extension associated with this editor.</summary>
      <returns>The file extension for this editor.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.Factory">
      <summary>Returns the GUID of the associated factory.</summary>
      <returns>The GUID of the editor factory.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.NameResourceID">
      <summary>Gets and sets the integer NameResourceID.</summary>
      <returns>Name resource ID.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.Priority">
      <summary>Gets the editor's priority as set in the constructor.</summary>
      <returns>The priority for this editor for its file extension.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.ProjectGuid">
      <summary>Sets and gets the GUID of the project associated with this editor.</summary>
      <returns>The project GUID.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Called to register this attribute with the given context. The context contains the location where the registration information should be placed. It also contains the type being registered and path information.</summary>
      <param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
      <exception cref="T:System.ArgumentNullException">This method throws an <see cref="T:System.ArgumentNullException" /> if the <paramref name="context" /> argument is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.TemplateDir">
      <summary>Gets or sets the template directory to be used by the editor factory to retrieve its source files.</summary>
      <returns>The template directory.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorExtensionAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the registration information about a VSPackage when called by an external registration tool such as RegPkg.exe. For more information, see Registering VSPackages.</summary>
      <param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
      <exception cref="T:System.ArgumentNullException">This method throws an <see cref="T:System.ArgumentNullException" /> if the <paramref name="context" /> argument is null.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute">
      <summary>Adds a logical view to the editor created by an editor factory.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute.#ctor(System.Object,System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute" /> for the specified factory type and logical view.</summary>
      <param name="factoryType">The type of factory.  This may be a type, a GUID or a string representation of a GUID</param>
      <param name="logicalViewGuid">The GUID of the logical view to register.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute.FactoryType">
      <summary>Gets the GUID of the factory type.</summary>
      <returns>The GUID of the factory type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute.IsTrusted">
      <summary>Gets or sets the trust flag for this logical view. </summary>
      <returns>true if the logical view is trusted, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute.LogicalView">
      <summary>Gets the GUID of the logical view.</summary>
      <returns>The GUID of the logical view.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers this attribute with the given context. </summary>
      <param name="context">
        <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" />. The context contains the location where the registration information should be placed. It also contains other information such as the type being registered and path information.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideEditorLogicalViewAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Unregisters the logical view.</summary>
      <param name="context">
        <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" />. The context contains the location where the registration information should be placed. It also contains other information such as the type being registered and path information.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute">
      <summary>Provides an extender for Visual Studio. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute" /> for the specified extender.</summary>
      <param name="extendeeCatId">The CATID of the element to be extended.</param>
      <param name="extenderGuid">The GUID of the extender.</param>
      <param name="extenderName">The name of the extender.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute.ExtendeeCatId">
      <summary>Gets the GUID category ID of the element to be extended.</summary>
      <returns>The GUID category ID of the element to be extended.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute.Extender">
      <summary>Gets the GUID of the extender.</summary>
      <returns>The GUID of the extender.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute.ExtenderName">
      <summary>Gets the name of the extender.</summary>
      <returns>The name of the extender.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Provides registration information about a VSPackage when called by an external registration tool such as RegPkg.exe.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideExtenderAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes registration information about a VSPackage when called by an external registration tool such as RegPkg.exe.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideLanguageEditorToolsOptionCategoryAttribute">
      <summary>This attribute is used to declare a Tools Option category for a language.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorToolsOptionCategoryAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideLanguageEditorToolsOptionCategoryAttribute" /> for the language and option category.</summary>
      <param name="languageName">The name of the language.</param>
      <param name="categoryName">The name of the category.</param>
      <param name="categoryResourceId">The resource ID of the category.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorToolsOptionCategoryAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers the Tools Option page.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" />  that describes the location of the key and its values in the registry</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideLanguageEditorToolsOptionCategoryAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Unregisters the Tools Option page.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location of the key and its values in the registry.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideObjectAttribute">
      <summary>Informs Visual Studio that the VSPackage provides an object that can be created from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.ILocalRegistry" />interface. This class cannot be inherited.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideObjectAttribute.#ctor(System.Type)">
      <summary>This constructor creates a new <see cref="T:Microsoft.VisualStudio.Shell.ProvideObjectAttribute" /> object with the given object type.</summary>
      <param name="objectType">The type of object that the VSPackage can create. This type can have any scoping (public, internal, etc.) but must have a public constructor that takes no arguments.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideObjectAttribute.ObjectType">
      <summary>The ObjectType property returns the object type set in the constructor.</summary>
      <returns>Returns the object type set in the constructor.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideObjectAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Provides registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see Registering VSPackages.</summary>
      <param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideObjectAttribute.RegisterUsing">
      <summary>Gets or sets the registration method.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.RegistrationMethod" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideObjectAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see Registering VSPackages.</summary>
      <param name="context">A registration context provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideOptionDialogPageAttribute">
      <summary>The base class for all the attributes that are used to register an option page.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideOptionDialogPageAttribute.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideOptionDialogPageAttribute" /> for the specified page.</summary>
      <param name="pageType">The type of the page.</param>
      <param name="pageNameResourceId">The name resource ID of the page.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionDialogPageAttribute.PageNameResourceId">
      <summary>Gets the name resource ID of the page.</summary>
      <returns>The name resource ID of the page.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionDialogPageAttribute.PageType">
      <summary>Gets the type of the page.</summary>
      <returns>The type of the page.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute">
      <summary>Apply this attribute to independent objects to allow users to configure VSPackages through a custom Tools Options page.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.#ctor(System.Type,System.String,System.String,System.Int16,System.Int16,System.Boolean)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute" /> indicating that a particular class implements user configuration support for the VSPackage based on a Tools Options page. </summary>
      <param name="pageType">The <see cref="T:System.Type" /> of the class implementing the Tools Options page.</param>
      <param name="categoryName">The  canonical nonlocalized name of the Tools Options page category.</param>
      <param name="pageName">The canonical nonlocalized name of the Tools Options page subcategory.</param>
      <param name="categoryResourceID">The localized resource ID of the Tools Options page category. </param>
      <param name="pageNameResourceID">The localized resource ID of the Tools Options page subcategory.</param>
      <param name="supportsAutomation">If true, the Tools Options page can be accessed through the Visual Studio automation mechanism.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.CategoryName">
      <summary>Gets the canonical nonlocalized name of the Tools Options page's category.</summary>
      <returns>The canonical nonlocalized name of the Tools Options page category.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.CategoryResourceID">
      <summary>Gets the category resource ID for a Tools Options page.</summary>
      <returns>The category resource ID for the Tools Options page.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.NoShowAllView">
      <summary>Gets or sets whether aggregated Tools Options pages are shown.</summary>
      <returns>true if the Tools Options page is to be displayed in the default (complex) view of Tools Options pages.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.PageName">
      <summary>Gets the canonical nonlocalized name of the Tools Options page.</summary>
      <returns>The canonical nonlocalized name of the Tools Options page.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers the Tools Options page.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> describing the location in the registry and values to be registered.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.SupportsAutomation">
      <summary>Gets whether a Tools Options page implementation supports automation.</summary>
      <returns>true if a Tools Options page supports the Visual Studio automation model and can be accessed through the <see cref="N:EnvDTE" /> mechanism.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.SupportsProfiles">
      <summary>Gets or sets whether a Tools Options page implementation uses the Visual Studio settings mechanism to persist its state.</summary>
      <returns>true if the Tools Options page implementation supports the use of Visual Studio settings to persist its state.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.TypeId">
      <summary>Gets the current instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute" />.</summary>
      <returns>The current instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideOptionPageAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the Tools Options page key from the registry.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> describing the location in the registry and values to be removed.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute">
      <summary>This attribute registers items to be included in the Add New Item dialog for the specified project type. It is placed on a VSPackage.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute.#ctor(System.Object,System.String,System.String,System.Int32)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute" /> for the item.</summary>
      <param name="projectFactoryType">The type of project factory. This can be a <see cref="T:System.Type" /> , a GUID, or the string form of the GUID.</param>
      <param name="itemCategoryName">The display name of the type of item.</param>
      <param name="templatesDir">The directory in which the templates for this project type can be found.</param>
      <param name="priority">The priority of this type (for sorting purposes).</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute.ItemType">
      <summary>Gets the name of this type of item.</summary>
      <returns>The name of this type of item.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute.Priority">
      <summary>Gets the sort priority of this type.</summary>
      <returns>The sort priority of this type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute.ProjectFactoryType">
      <summary>Gets the GUID of the type of project factory.</summary>
      <returns>The GUID of the type of project factory.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers this item type.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" />  that describes the location and values of the registry key.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute.TemplateDir">
      <summary>Gets the directory in which the templates for this project type are found.</summary>
      <returns>The directory in which the templates for this project type are found.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideProjectItemAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the registry key for this item type.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" />  that describes the location and values of the registry key.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideToolboxFormatAttribute">
      <summary>Apply this attribute to classes implementing VSPackages to declare that the VSPackage provides Toolbox items with the specified clipboard format and to enable drag-and-drop support in the Visual Studio Toolbox.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxFormatAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxFormatAttribute" /> for the specified format.</summary>
      <param name="format">The name of a supported format.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="format" /> argument is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxFormatAttribute.Format">
      <summary>Gets the name of a supported clipboard format.</summary>
      <returns>The name of the clipboard format.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute">
      <summary>Registers a VSPackage as supplying a particular implementation of <see cref="T:Microsoft.VisualStudio.Shell.IConfigureToolboxItem" />. Used in conjunction with <see cref="T:Microsoft.VisualStudio.Shell.ProvideAssemblyFilterAttribute" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute" />. </summary>
      <param name="objectType">[in] <see cref="T:System.Type" />.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute.ObjectType">
      <summary>Gets the type of the toolbox item configuration.</summary>
      <returns>The type of the toolbox item configuration.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers the toolbox item configuration.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> describing the location and values of the registry key.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemConfigurationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the registry key.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> describing the location and values of the registry key.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute">
      <summary>Apply this attribute to classes implementing VSPackages to declare if they offer a set of items to the Visual Studio Toolbox.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.#ctor(System.Int32)">
      <summary>Creates a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute" /> which indicates if a class implementing a VSPackage is providing Toolbox items.</summary>
      <param name="version">The version of the Toolbox items a VSPackage supplies.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.#ctor(System.Int32,System.Boolean)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute" /> for the specified version.</summary>
      <param name="version">The version of the items.</param>
      <param name="needsCallbackAfterReset">If true, then set the registry key that forces a <see cref="E:Microsoft.VisualStudio.Shell.Package.ToolboxInitialized" /> event after each toolbox reset.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.NeedsCallBackAfterReset">
      <summary>Gets or sets whether the <see cref="E:Microsoft.VisualStudio.Shell.Package.ToolboxInitialized" /> event should be raised after each toolbox reset.</summary>
      <returns>true if the <see cref="E:Microsoft.VisualStudio.Shell.Package.ToolboxInitialized" /> event should be raised after each toolbox reset, otherwise false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers a VSPackage as a Toolbox item provider for specified formats when called by an external registration tool such as regpkg.exe. For more information, see Registering VSPackages.</summary>
      <param name="context">A registration context provided by an external registration tool. The context is used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Reverses the changes that the <see cref="M:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)" /> method had applied to the registry.</summary>
      <param name="context">A registration context provided by an external registration tool. The context is used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideToolboxItemsAttribute.Version">
      <summary>Property returning the version of Toolbox items a VSPackage provides.</summary>
      <returns>An integer value containing the version number of the Toolbox items a VSPackage supports.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute">
      <summary>Notifies Visual Studio that a VSPackage owns a tool window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute" />.</summary>
      <param name="toolType">The type of the tool window.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Height">
      <summary>Gets or sets the default height of the tool window.</summary>
      <returns>The height of the tool window.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.MultiInstances">
      <summary>Determines whether multiple instances of the tool window are allowed.</summary>
      <returns>true if multiple instances are allowed, otherwise false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Orientation">
      <summary>Gets or sets the default orientation for the tool window relative to the window specified by the Window property.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.ToolWindowOrientation" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.PositionX">
      <summary>Gets or sets the default horizontal value of the top left corner of the tool window.</summary>
      <returns>The horizontal value of the top left corner of the tool window.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.PositionY">
      <summary>Gets or sets the vertical value of the top left corner of the tool window.</summary>
      <returns>The vertical value of the top left corner of the tool window.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers the tool window.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> describing the location and values of the registry key.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Style">
      <summary>Gets or sets the default docking style for the tool window.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.VsDockStyle" />.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.ToolType">
      <summary>Gets or sets the type of the tool window.</summary>
      <returns>The type of the tool window.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Transient">
      <summary>Gets or sets whether the tool window should not be reopened when the IDE restarts.</summary>
      <returns>false if the tool window should be displayed when the IDE restarts if it was displayed when the IDE closed, otherwise true.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the registry key for the tool window.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> describing the location and values of the registry key.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Width">
      <summary>Gets or sets the default width of the tool window.</summary>
      <returns>The default width of the tool window.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowAttribute.Window">
      <summary>Gets or sets the GUID of the default window on which the tool window should be docked.</summary>
      <returns>The GUID of the default window on which the tool window should be docked.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute">
      <summary>Maps a tool window to one or more UI contexts, so that the window is displayed when the user switches to one of those contexts and is hidden when the user switches away from one of the contexts.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute.#ctor(System.Object,System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute" /> for the specified type of the tool window and a GUID to associate with its visibility.</summary>
      <param name="toolWindow">The types of the tool window. This can be the type, the GUID, or the string value of the GUID.</param>
      <param name="commandUIGuid">The GUID of the tool window to which the automatic visibility behavior should be applied.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute.CommandUIGuid">
      <summary>Gets the GUID of a command associated with showing or hiding the tool window.</summary>
      <returns>The GUID of a command associated with showing or hiding the tool window.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute.Name">
      <summary>Gets or sets the name of the window.</summary>
      <returns>The name of the tool window.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers the tool window visibility.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of the registry key.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ProvideToolWindowVisibilityAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes the registry key.</summary>
      <param name="context">A <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext" /> that describes the location and values of the registry key.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute">
      <summary>Registers an extender with Visual Studio.  This class cannot be inherited. This class is obsolete. Please use ProvideExtenderAttribute instead.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute.#ctor(System.String,System.String,System.String)">
      <summary>This constructor creates a new <see cref="T:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute" /> object.</summary>
      <param name="extendeeCatId">The CATID of the extendee.</param>
      <param name="extenderGuid">The GUID of the extender.</param>
      <param name="extenderName">The name of the extender.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute.ExtendeeCatId">
      <summary>Gets the CATID of the object to be extended.</summary>
      <returns>The CATID of the object to be extended.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute.Extender">
      <summary>Gets the GUID of the extender.</summary>
      <returns>The GUID of the extender.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute.ExtenderName">
      <summary>Gets the name of the extender.</summary>
      <returns>The name of the extender.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Provides registration information about a VSPackage when called by an external registration tool such as RegPkg.exe.</summary>
      <param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegisterExtenderAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes registration information about a VSPackage when called by an external registration tool such as RegPkg.exe.</summary>
      <param name="context">A registration context provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.RegistrationAttribute">
      <summary>An abstract class for VSPackage registration. The RegistrationAttribute class allows new registration information to be added without changing the registration tools.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.#ctor">
      <summary>Initializes a new instance of the class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Register(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Registers this VSPackage with a given context, when called by an external registration tool such as regpkg.exe. For more information, see Registering VSPackages.</summary>
      <param name="context">A registration context provided by an external registration tool. The context can be used to create registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.RegistrationAttribute.TypeId">
      <summary>Gets the current instance of this attribute.</summary>
      <returns>The current instance of this attribute.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Unregister(Microsoft.VisualStudio.Shell.RegistrationAttribute.RegistrationContext)">
      <summary>Removes registration information about a VSPackage when called by an external registration tool such as regpkg.exe. For more information, see Registering VSPackages. Any class deriving from the RegistrationAttribute class must implement this method.</summary>
      <param name="context">A registration context provided by an external registration tool. The context can be used to remove registry keys, log registration activity, and obtain information about the component being registered.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key">
      <summary>Provides an abstract class that represents a registration key.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.#ctor">
      <summary>Creates a new <see cref="T:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key" /> object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.Close">
      <summary>Closes a key after writing is complete.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.CreateSubkey(System.String)">
      <summary>Creates a new registration key. The new key is a subkey of the current Key.</summary>
      <returns>The newly created Key.</returns>
      <param name="name">The name of the new key. This name is relative to the current key. An empty or null string sets the default value for the key.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.SetValue(System.String,System.Object)">
      <summary>Adds a value to the current registration Key.</summary>
      <param name="valueName">The name of the value to set. If <paramref name="valueName" /> is null or an empty string, SetValue sets the default value for the current Key.</param>
      <param name="value">An object to store in the value. The object cannot be null. If the object is a numeric type that can be converted to an integer, it is stored as a DWORD registry encoding. Otherwise it is stored as a string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RegistrationAttribute.Key.System#IDisposable#Dispose">
      <summary>Disposes the object and its resources.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.RunningDocumentTable">
      <summary>Provides access to the Running Document Table (RDT) that tracks all currently opened documents in Visual Studio.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Package.RunningDocumentTable" /> class.</summary>
      <param name="site">[in] An <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> object used to access services. This cannot be a null value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.Advise(Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents)">
      <summary>Enables the client to receive events about changes to the Running Document Table (RDT).</summary>
      <returns>A cookie associated with the given <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents" /> object. If an error occurs, this method throws an exception.</returns>
      <param name="sink">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents" /> object representing an entity to be called for various running document table events.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.FindDocument(System.String)">
      <summary>Gets an object from the Running Document Table (RDT) that represents the document specified by the given path.</summary>
      <returns>An object that can be cast to an appropriate interface to access the document (see Remarks for details), or null if the document is not registered with Visual Studio.</returns>
      <param name="moniker">[in] Path to the desired document.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.FindDocument(System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@,System.UInt32@,System.UInt32@)">
      <summary>Gets an object, cookie, and owning project type from the Running Document Table (RDT) for the document specified by the given path.</summary>
      <returns>An object that can be cast to an appropriate interface to access the document (see Remarks for details). If a null value is returned, the document is not registered with Visual Studio.</returns>
      <param name="moniker">[in] Path to the desired document.</param>
      <param name="hierarchy">[out] Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object that represents the project that owns the requested document.</param>
      <param name="itemid">[out] Returns the ID of the document in the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object. </param>
      <param name="docCookie">[out] Returns the unique value that represents the requested document in the RDT.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.FindDocument(System.String,System.UInt32@)">
      <summary>Gets a cookie from the Running Document Table (RDT) that represents the document specified by the given path.</summary>
      <returns>An object that can be cast to an appropriate interface to access the document (see Remarks for details), or null if the document is not registered with Visual Studio.</returns>
      <param name="moniker">[in] Path to the desired document.</param>
      <param name="docCookie">[out] Returns the unique value that represents the requested document in the RDT.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.GetDocumentInfo(System.UInt32)">
      <summary>Gets information about a document registered in the Running Document Table, given the identifier of the document. </summary>
      <returns>The <see cref="T:Microsoft.VisualStudio.Shell.RunningDocumentInfo" /> for the specified document.</returns>
      <param name="docCookie">The identifier of the document data object in the Running Document Table.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.GetEnumerator">
      <summary>Gets an enumerator of the documents in the Running Document Table.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> of type <see cref="T:Microsoft.VisualStudio.Shell.RunningDocumentInfo" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.GetHierarchyItem(System.String)">
      <summary>Gets the project that owns the specified document.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" />, otherwise null.</returns>
      <param name="moniker">[in] Path to the desired document.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.GetRunningDocumentContents(System.String)">
      <summary>Uses the Running Document Table (RDT) to obtain the contents of a document given the path to the document.</summary>
      <returns>The contents of the document in a string format, or null if the document is not registered with the RDT.</returns>
      <param name="path">[in] Path to the desired document.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.GetRunningDocumentContents(System.UInt32)">
      <summary>Uses the Running Document Table (RDT) to obtain the contents of a document given the path to the document.</summary>
      <returns>The contents of the document in a string format, or null if the document is not registered with the RDT.</returns>
      <param name="docCookie">[in] The unique value that represents the requested document in the RDT.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.LockDocument(Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS,System.UInt32)">
      <summary>Gets a read or edit lock on the specified document.</summary>
      <param name="lockType">Lock values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration.</param>
      <param name="cookie">The identifier of the document to lock.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.RegisterAndLockDocument(Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,System.IntPtr)">
      <summary>Creates an entry in the running document table when a document is created or opened. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="lockType">Lock values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration. </param>
      <param name="mkDocument">The absolute path of the document.</param>
      <param name="hierarchy">The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> interface of the hierarchy element that owns the document.</param>
      <param name="itemid">The item ID of the node.</param>
      <param name="docData">[out] Returns a pointer to the IUnknown interface of the document data object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.RenameDocument(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32)">
      <summary>Renames a document and optionally gives ownership of the document to the specified project.</summary>
      <param name="oldName">[in] The full path representing the original name.</param>
      <param name="newName">[in] The full path representing the new name.</param>
      <param name="pIVsHierarchy">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object representing the project that is to take ownership of the document. Pass the value (IVsHierarchy)-1 to indicate no change in ownership is to take place</param>
      <param name="itemId">[in] This value can be <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />, or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />. Pass <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" /> to indicate no change in ownership is to take place.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.SaveFileIfDirty(System.String)">
      <summary>Saves the specified file if it has changed since the last save.</summary>
      <returns>The path to which the file was saved. This is either the original path or a new path specified by the user.</returns>
      <param name="fullPath">[in] The full path to the document to be saved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.System#Collections#IEnumerable#GetEnumerator">
      <summary>Enumerates the documents in the Running Document Table.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> of type <see cref="T:Microsoft.VisualStudio.Shell.RunningDocumentInfo" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.Unadvise(System.UInt32)">
      <summary>Indicates the client is no longer interested in receiving Running Document Table (RDT) events.</summary>
      <param name="cookie">[in] A unique value returned from the <see cref="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.Advise(Microsoft.VisualStudio.Shell.Interop.IVsRunningDocTableEvents)" /> method. See Remarks.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.RunningDocumentTable.UnlockDocument(Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS,System.UInt32)">
      <summary>Releases a read or edit lock on the open document. </summary>
      <param name="lockType">Lock values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSRDTFLAGS" /> enumeration.</param>
      <param name="cookie">The identifier of the document data in the Running Document Table.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ServiceProvider">
      <summary>Provides a unified service provider for managed VSPackages.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.#ctor(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Initializes a instance with an existing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface.</summary>
      <param name="sp">A <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.#ctor(Microsoft.VisualStudio.OLE.Interop.IServiceProvider,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Shell.ServiceProvider" /> class with an existing <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> object and optionally passes all requests to the underlying service provider.</summary>
      <param name="sp">An <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> interface used to resolve services.</param>
      <param name="defaultServices">Determines if this service should respond to queries for <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> and <see cref="T:Microsoft.VisualStudio.OLE.Interop.IObjectWithSite" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.Dispose">
      <summary>Releases the resources used by the <see cref="T:Microsoft.VisualStudio.Shell.ServiceProvider" /> object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetService(System.Guid)">
      <summary>Gets the specified service from the unmanaged service provider.</summary>
      <returns>The requested service, or null if the service could not be located.</returns>
      <param name="guid">The GUID of the service to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.GetService(System.Type)">
      <summary>Gets type-based services from the unmanaged service provider.</summary>
      <returns>The requested service, or null if the service could not be located.</returns>
      <param name="serviceType">The type of service to retrieve. The GUID of this type is used to obtain the service from the native service provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#GetSite(System.Guid@,System.IntPtr@)">
      <summary>Gets the current site object to resolve services.</summary>
      <param name="riid">The GUID of the requested interface.</param>
      <param name="ppv">The retrieved interface or null.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ServiceProvider.Microsoft#VisualStudio#OLE#Interop#IObjectWithSite#SetSite(System.Object)">
      <summary>Sets the site object to resolve services.</summary>
      <param name="pUnkSite">The site to be set.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.ServiceProviderHierarchy">
      <summary>A hierarchical service provider that stores <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" /> objects in a sorted collection for an ordered retrieval. When <see cref="M:Microsoft.VisualStudio.Shell.ServiceProviderHierarchy.GetService(System.Type)" /> is called to retrieve a service, the service providers are queried in a specific order. This is useful when multiple service providers are combined, such as in the <see cref="T:Microsoft.VisualStudio.Shell.WindowPane" /> implementation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ServiceProviderHierarchy.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.ServiceProviderHierarchy" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.ServiceProviderHierarchy.GetService(System.Type)">
      <summary>Gets a service of the specified type.</summary>
      <returns>The requested service, or null if the service cannot be found. This service must be cast to the required service type. </returns>
      <param name="serviceType">The type of the service.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.TaskCategory">
      <summary>Provides a set of task categories that specify the kind of task that is to be performed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.TaskCategory.All">
      <summary>All tasks. Not a real category. It is used to allow a task list view to show all of the tasks in the task list. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.TaskCategory.BuildCompile">
      <summary>Build errors and warnings, and possibly deployment errors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.TaskCategory.Comments">
      <summary>Tasks generated by special comments, such as "TODO," "UNDONE," or "TBD." Also used for informational messages. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.TaskCategory.CodeSense">
      <summary>Errors generated as the user types source code.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.TaskCategory.ShortCuts">
      <summary>Short cuts to code. Shortcuts are generated by the user right-clicking the editor window, and choosing Add Task List Shortcut from the pop-up menu.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.TaskCategory.User">
      <summary>User-defined tasks.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.TaskCategory.Misc">
      <summary>Miscellaneous tasks.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Shell.TaskCategory.Html">
      <summary>Tasks which pertain to Web page development. .</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection">
      <summary>A container for <see cref="T:Microsoft.VisualStudio.Shell.Task" /> objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.#ctor(Microsoft.VisualStudio.Shell.TaskProvider)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection" /> for the supplied task provider.</summary>
      <param name="owner">The task provider that owns these tasks.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Add(Microsoft.VisualStudio.Shell.Task)">
      <summary>Adds a task to the collection.</summary>
      <returns>The index of the added task.</returns>
      <param name="task">The task to add.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Clear">
      <summary>Removes all the tasks from the collection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Contains(Microsoft.VisualStudio.Shell.Task)">
      <summary>Gets whether or not the task exists in the collection</summary>
      <returns>true if the task exists in the collection, otherwise false.</returns>
      <param name="task">The task for which to search.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Count">
      <summary>Gets the number of tasks in the collection.</summary>
      <returns>The number of tasks in the collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.GetEnumerator">
      <summary>Gets an enumerator for the collection.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.IndexOf(Microsoft.VisualStudio.Shell.Task)">
      <summary>Gets the index of the specified task in the collection.</summary>
      <returns>The index of the task.</returns>
      <param name="task">The task for which to search.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Insert(System.Int32,Microsoft.VisualStudio.Shell.Task)">
      <summary>Inserts a task in the collection at the specified index.</summary>
      <param name="index">The index at which to insert the task.</param>
      <param name="task">The task to insert.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Item(System.Int32)">
      <summary>Gets or sets the task at the given index.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.Task" />.</returns>
      <param name="index">The index of the task.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.Remove(Microsoft.VisualStudio.Shell.Task)">
      <summary>Removes a task from the collection.</summary>
      <param name="task">The task to remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.RemoveAt(System.Int32)">
      <summary>Removes the task at the specified index.</summary>
      <param name="index">The index at which to remove the task.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the collection to an array, starting at the specified index.</summary>
      <param name="array">The array to which to copy the collection.</param>
      <param name="index">The index of the array at which to start the copy.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets whether or not the collection is synchronized.</summary>
      <returns>By default returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets the object that can be used to synchronize access to the collection.</summary>
      <returns>By default returns the current instance of this collection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#IList#Add(System.Object)">
      <summary>Adds the task to the collection.</summary>
      <returns>The index at which the task was added.</returns>
      <param name="obj">The task object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#IList#Clear">
      <summary>Removes all the tasks from the list.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#IList#Contains(System.Object)">
      <summary>Gets whether or not the specified task exists in the collection.</summary>
      <returns>true if the task exists in the collection, otherwise false.</returns>
      <param name="obj">The task to find.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Gets the index of the collection at which the specified task exists.</summary>
      <returns>The index of the collection at which the task exists.</returns>
      <param name="obj">The task to find.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts a task in the collection at the specified index.</summary>
      <param name="index">The index at which to insert the task.</param>
      <param name="obj">The task to insert.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#IList#IsFixedSize">
      <summary>Gets whether or not the collection is of a fixed size.</summary>
      <returns>By default returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#IList#IsReadOnly">
      <summary>Gets whether or not the collection is read-only.</summary>
      <returns>By default returns false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the task at the specified index.</summary>
      <returns>The specified task.</returns>
      <param name="index">The index of the collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the specified task from the collection.</summary>
      <param name="obj">The task to be removed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.TaskProvider.TaskCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>Removes the task from the specified index of the collection.</summary>
      <param name="index">The index at which to remove the task.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Url">
      <summary>Wraps the <see cref="T:System.Uri" /> class. Provides an unescaped version of <see cref="P:System.Uri.LocalPath" /> for file URL types and <see cref="P:System.Uri.AbsoluteUri" /> for HTTP URL types. Also returns an unescaped result from <see cref="M:System.Uri.MakeRelativeUri(System.Uri)" /> so that it can be presented to the user.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Url.#ctor(Microsoft.VisualStudio.Shell.Url,System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Url" /> that is based on the specified base <see cref="T:Microsoft.VisualStudio.Shell.Url" /> and relative path.</summary>
      <param name="baseUrl">The base <see cref="T:Microsoft.VisualStudio.Shell.Url" />.</param>
      <param name="relpath">The relative path.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Url.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Url" /> for the specified path.</summary>
      <param name="path">The path for which to create the URL.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Url.AbsoluteUrl">
      <summary>Gets the absolute URL as a string.</summary>
      <returns>The string value of the absolute URL.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Url.Directory">
      <summary>Returns the unescaped absolute URL for the parent directory that contains the file that is referenced by this URL object.</summary>
      <returns>The unescaped absolute URL of the parent directory.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Url.GetPartial(System.Int32)">
      <summary>Gets the unescaped path up to the specified index.</summary>
      <returns>The unescaped path up to the specified index of the <see cref="P:Microsoft.VisualStudio.Shell.Url.Segments" /> array.</returns>
      <param name="i">The index of the <see cref="P:Microsoft.VisualStudio.Shell.Url.Segments" /> array up to which to get the path.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Url.GetPartial(System.Int32,System.Int32)"></member>
    <member name="M:Microsoft.VisualStudio.Shell.Url.GetRemainder(System.Int32)">
      <summary>Gets the unescaped remainder of the path, starting at the specified segment.</summary>
      <returns>The unescaped remainder of the path, starting with the specified index of the <see cref="P:Microsoft.VisualStudio.Shell.Url.Segments" /> array.</returns>
      <param name="i">The index of the <see cref="P:Microsoft.VisualStudio.Shell.Url.Segments" /> array at which to start getting the path.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Url.IsFile">
      <summary>Determines whether the URL represents a file (as opposed to an HTTP location).</summary>
      <returns>true if the URL represents a file; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Url.JoinSegments(System.Int32,System.Int32)">
      <summary>Joins the specified segments into a path.</summary>
      <returns>The unescaped path, starting at segment <paramref name="i" /> and not including segment <paramref name="j" /> or higher.</returns>
      <param name="i">The index of the <see cref="P:Microsoft.VisualStudio.Shell.Url.Segments" /> array at which to start the path.</param>
      <param name="j">The index of the <see cref="P:Microsoft.VisualStudio.Shell.Url.Segments" /> array at which to stop adding segments to the path.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Url.MakeRelative(Microsoft.VisualStudio.Shell.Url)">
      <summary>Makes the specified <see cref="T:Microsoft.VisualStudio.Shell.Url" /> relative with respect to the current one.</summary>
      <returns>Using the current <see cref="T:Microsoft.VisualStudio.Shell.Url" /> as the base, the relative path of <paramref name="url" />.</returns>
      <param name="url">The <see cref="T:Microsoft.VisualStudio.Shell.Url" /> to make relative.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Url.Move(Microsoft.VisualStudio.Shell.Url,Microsoft.VisualStudio.Shell.Url)">
      <summary>Moves the URL from the old base to the new one.</summary>
      <returns>The new <see cref="T:Microsoft.VisualStudio.Shell.Url" />.</returns>
      <param name="oldBase">The original <see cref="T:Microsoft.VisualStudio.Shell.Url" /> base.</param>
      <param name="newBase">The new <see cref="T:Microsoft.VisualStudio.Shell.Url" /> base.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Url.Segments">
      <summary>Gets an array of the segments of the URL.</summary>
      <returns>An array of the segments of the URL.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Url.Unescape(System.String,System.Boolean)">
      <summary>Converts an escaped string to an unescaped string.</summary>
      <returns>The unescaped string.</returns>
      <param name="escaped">The string to convert.</param>
      <param name="isFile">true if the string represents a file URL; otherwise, false.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Url.Uri">
      <summary>Gets the URI for this URL.</summary>
      <returns>
        <see cref="T:System.Uri" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory">
      <summary>A factory for creating flavored projects, otherwise known as project subtypes.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory" />. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.CanCreateProject(System.String,System.UInt32)">
      <summary>Determines whether or not the project can be created with the supplied parameters.</summary>
      <returns>true if the project file name is valid, otherwise false.</returns>
      <param name="fileName">The name of the file.</param>
      <param name="flags">Not used.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.CreateProject(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)">
      <summary>Creates a project.</summary>
      <param name="fileName">The name of the project file.</param>
      <param name="location">The path of the project file. </param>
      <param name="name">The name of the project.</param>
      <param name="flags">Values from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS" />.</param>
      <param name="projectGuid">The interface ID of the project.</param>
      <param name="project">[out] Returns a pointer to the project.</param>
      <param name="canceled">[out] Returns true if the operation was canceled, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.Dispose(System.Boolean)">
      <summary>Disposes the service provider.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.Initialize">
      <summary>Initializes the project factory.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.Microsoft#VisualStudio#Shell#Interop#IVsAggregatableProjectFactory#GetAggregateProjectType(System.String,System.String@)">
      <summary>Gets a semicolon-delimited string of project type GUIDs.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="fileName">The name of the project file.</param>
      <param name="projectTypeGuid">[out] Returns the semicolon-delimited string of project type GUIDs.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.Microsoft#VisualStudio#Shell#Interop#IVsAggregatableProjectFactory#PreCreateForOuter(System.Object,System.Object@)">
      <summary>Creates an aggregatable inner project.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="outerProject">The outer project, or null if the outer project is to be created.</param>
      <param name="project">[out] Returns the inner project.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.Microsoft#VisualStudio#Shell#Interop#IVsProjectFactory#CanCreateProject(System.String,System.UInt32,System.Int32@)">
      <summary>Determines whether or not the project can be created.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fileName">The name of the file.</param>
      <param name="flags">If used, values from the <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS" /> enumeration.</param>
      <param name="canCreate">[out] Returns true if the project can be created, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.Microsoft#VisualStudio#Shell#Interop#IVsProjectFactory#Close">
      <summary>Disposes this object.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.Microsoft#VisualStudio#Shell#Interop#IVsProjectFactory#CreateProject(System.String,System.String,System.String,System.UInt32,System.Guid@,System.IntPtr@,System.Int32@)">
      <summary>Creates a flavored project.</summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="fileName">The name of the project file.</param>
      <param name="location">The path of the project file. </param>
      <param name="name">The name of the project.</param>
      <param name="flags">Values from <see cref="T:Microsoft.VisualStudio.Shell.Interop.__VSCREATEPROJFLAGS" />.</param>
      <param name="projectGuid">The interface ID of the project.</param>
      <param name="project">[out] Returns a pointer to the project.</param>
      <param name="canceled">[out] Returns true if the operation was canceled, otherwise false.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.Microsoft#VisualStudio#Shell#Interop#IVsProjectFactory#SetSite(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
      <summary>Initializes the project and allows the project to obtain services proffered by the environment. </summary>
      <returns>
        <see cref="F:Microsoft.VisualStudio.NativeMethods.S_OK" />.</returns>
      <param name="provider">
        <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.PreCreateForOuter(System.Object)">
      <summary>Creates an instance of the project. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="outerProject">The outermost project, or null if the outer project is being created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.ProjectTypeGuids(System.String)">
      <summary>Gets the set of project type GUIDs from the project file.</summary>
      <returns>When implemented by a derived class, a semicolon-delimited string containing the project type GUIDs in the project file.</returns>
      <param name="file">The project file.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Flavor.FlavoredProjectFactory.serviceProvider">
      <summary>Gets the project's service provider.</summary>
      <returns>
        <see cref="T:Microsoft.VisualStudio.Shell.ServiceProvider" />.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Shell.Flavor.ProjectDocumentsChangeEventArgs">
      <summary>Contains event data for events relating to files and folders of the project subtype, for example the <see cref="E:Microsoft.VisualStudio.Shell.Flavor.FlavoredProject.FileAdded" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Shell.Flavor.ProjectDocumentsChangeEventArgs.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Shell.Flavor.ProjectDocumentsChangeEventArgs" />.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Shell.Flavor.ProjectDocumentsChangeEventArgs.MkDocument">
      <summary>Gets or sets the unique name of the project item that was changed.</summary>
      <returns>The unique name of the project item that was changed.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.Data.ConnectionUI.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.Data.ConnectionUI</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Data.ConnectionUI.IDataConnectionProperties">
      <summary>Provides a set of methods and properties that enable the Data Connection dialog box to interact with a specified data provider's connection properties.</summary>
    </member>
    <member name="M:Microsoft.Data.ConnectionUI.IDataConnectionProperties.Add(System.String)">
      <summary>Adds a custom property to the existing set of data connection properties recognized by the data provider.</summary>
      <param name="propertyName">Name of the custom property added to the existing set of connection properties.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The specified connection properties are not extensible.</exception>
    </member>
    <member name="M:Microsoft.Data.ConnectionUI.IDataConnectionProperties.Contains(System.String)">
      <summary>Tests whether a given set of connection properties contains a specified property.</summary>
      <returns>true if the set of connection properties contains the specified property; otherwise, false.</returns>
      <param name="propertyName">Name of the property whose presence is being tested.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.Data.ConnectionUI.IDataConnectionProperties.IsComplete">
      <summary>Retrieves a Boolean value indicating whether the current set of connection property values provides sufficient information to open a connection to the data source.</summary>
      <returns>true if the connection properties are complete; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.ConnectionUI.IDataConnectionProperties.IsExtensible">
      <summary>Retrieves a Boolean value indicating whether the specified set of connection properties is extensible; that is, whether it is possible to add and remove custom properties to the set of connection properties.</summary>
      <returns>true if the connection properties are extensible; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.Data.ConnectionUI.IDataConnectionProperties.Item(System.String)">
      <summary>Represents a property instance of specified type and value.</summary>
      <returns>A property object instance of the specified name.</returns>
      <param name="propertyName">Name of the property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
      <exception cref="T:System.InvalidCastException">When setting a property value, the specified value cannot be converted to the property type.</exception>
    </member>
    <member name="M:Microsoft.Data.ConnectionUI.IDataConnectionProperties.Parse(System.String)">
      <summary>Parses a data connection string that is built from a set of properties into the corresponding set of connection properties.</summary>
      <param name="s">The connection string that is being parsed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="s" /> parameter is null.</exception>
      <exception cref="T:System.FormatException">The format specified for <paramref name="s" /> in not valid.</exception>
    </member>
    <member name="E:Microsoft.Data.ConnectionUI.IDataConnectionProperties.PropertyChanged">
      <summary>Event that is raised when a data provider connection property is changed.</summary>
    </member>
    <member name="M:Microsoft.Data.ConnectionUI.IDataConnectionProperties.Remove(System.String)">
      <summary>Removes a custom property from a specified set of data connection properties.</summary>
      <param name="propertyName">Name of the custom property to be removed.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.Data.ConnectionUI.IDataConnectionProperties.Reset">
      <summary>Resets all connection properties and restores the object to its initial state.</summary>
    </member>
    <member name="M:Microsoft.Data.ConnectionUI.IDataConnectionProperties.Reset(System.String)">
      <summary>Resets a specified connection property to its initial value.</summary>
      <param name="propertyName">Name of the connection property being set to its default value.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="propertyName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.Data.ConnectionUI.IDataConnectionProperties.Test">
      <summary>Tests whether the current set of connection properties can successfully open a connection.</summary>
    </member>
    <member name="M:Microsoft.Data.ConnectionUI.IDataConnectionProperties.ToDisplayString">
      <summary>Retrieves a connection string for on-screen display reflecting the current set of connection properties, minus "sensitive" information that should not be displayed.</summary>
      <returns>The set of connection properties that are suitable for display on-screen.</returns>
    </member>
    <member name="M:Microsoft.Data.ConnectionUI.IDataConnectionProperties.ToFullString">
      <summary>Retrieves the complete connection string representing the current set of connection properties.</summary>
      <returns>The entire connection string, including secure or sensitive information.</returns>
    </member>
    <member name="T:Microsoft.Data.ConnectionUI.IDataConnectionUIControl">
      <summary>Provides a set of methods and properties through which the Data Connection dialog box interacts with a third-party data connection user interface (UI) control, which is shown as the body of the Data Connection dialog box.</summary>
    </member>
    <member name="M:Microsoft.Data.ConnectionUI.IDataConnectionUIControl.Initialize(Microsoft.Data.ConnectionUI.IDataConnectionProperties)">
      <summary>Initializes the data connection user interface (UI) control with an instance of the <see cref="T:Microsoft.Data.ConnectionUI.IDataConnectionProperties" /> interface, which serves as the store for the data shown on the data connection UI control.</summary>
      <param name="connectionProperties">The set of connection properties serving as stores for data shown on the data connection UI control.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionProperties" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="connectionProperties" /> parameter is not a valid implementation of DataConnectionProperties understood by this connection UI control.</exception>
    </member>
    <member name="M:Microsoft.Data.ConnectionUI.IDataConnectionUIControl.LoadProperties">
      <summary>Loads connection property values into the data connection UI controls from an instance of the <see cref="T:Microsoft.Data.ConnectionUI.IDataConnectionProperties" /> interface.</summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v2.0\Microsoft.VisualStudio.WCFReference.Interop.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.WCFReference.Interop</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.CollectionCategory">
      <summary>
                    Provides an enumeration for categorizing collection types.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.WCFReference.Interop.CollectionCategory.CC_Dictionary">
      <summary>
                    The collection is similar to a <see cref="P:System.Collections.DictionaryBase.Dictionary" /> collection type.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.WCFReference.Interop.CollectionCategory.CC_List">
      <summary>
                    The collection is similar to a <see cref="P:System.Collections.CollectionBase.List" /> collection type.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.WCFReference.Interop.CollectionCategory.CC_Unknown">
      <summary>
                    The collection is not similar to either a <see cref="P:System.Collections.DictionaryBase.Dictionary" /> or <see cref="P:System.Collections.CollectionBase.List" /> collection type.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.DiscoveryProtocol">
      <summary>
                    Provides an enumeration to specify the protocol to use for discovery of Windows Communication Foundation (WCF) services.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.WCFReference.Interop.DiscoveryProtocol.DP_DiscoveryClientProtocol">
      <summary>
                    Use the <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol" /> protocol.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.WCFReference.Interop.DiscoveryProtocol.DP_DiscoveryDataServiceProtocol"></member>
    <member name="F:Microsoft.VisualStudio.WCFReference.Interop.DiscoveryProtocol.DP_MetadataExchangeProtocol">
      <summary>
                    Use the <see cref="T:System.ServiceModel.Description.IMetadataExchange" /> protocol.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.DiscoverySessionProtocolPriority">
      <summary>
                    Provides an enumeration for use in discovering Windows Communication Foundation (WCF) services.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.WCFReference.Interop.DiscoverySessionProtocolPriority.DSPP_DiscoveryProtocolFirst">
      <summary>
                    Use the <see cref="T:System.Web.Services.Discovery.DiscoveryClientProtocol" /> protocol first.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.WCFReference.Interop.DiscoverySessionProtocolPriority.DSPP_MetadataExchangeFirst">
      <summary>
                    Use the <see cref="T:System.ServiceModel.Description.IMetadataExchange" /> protocol first.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.WCFReference.Interop.DiscoverySessionProtocolPriority.DSPP_NoPriority">
      <summary>
                    Use either protocol.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IDiscoveryResult3">
      <summary>
                    Provides an interface supported by the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult" /> object to specify which <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.DiscoveryProtocol" /> was used in a discovery session.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IDiscoveryResult3.GetProtocol">
      <summary>
                    Returns a value that specifies which <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.DiscoveryProtocol" /> was used in a discovery session.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.DiscoveryProtocol" /> enumeration
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IDiscoverySession2">
      <summary>
                    Provides an interface for returning Windows Communication Foundation (WCF) metadata by using the metadata exchange protocol.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IDiscoverySession2.DiscoverUrlAsyncWithMetadataExchange(System.String,Microsoft.VisualStudio.WCFReference.Interop.DiscoverySessionProtocolPriority,System.Int32,System.String,Microsoft.VisualStudio.Shell.Interop.IDiscoverUrlCallBack,System.Int32@)">
      <summary>
                    Returns the discovery result (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult" />) interface for a Windows Communication Foundation (WCF) service asynchronously.
                </summary>
      <param name="url">
                    Specifies the URL for the discovery session.
                </param>
      <param name="protocolPriority">
                    A <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.DiscoverySessionProtocolPriority" /> enumeration specifying the preferred protocol.
                </param>
      <param name="resolveAllFiles">
                    0 to skip files that cannot be resolved; otherwise 1.
                </param>
      <param name="toolConfigurationPath">
                    Specifies the location of the configuration file.
                </param>
      <param name="pDiscoverUrlCallBack">
                    Pointer to the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IDiscoverUrlCallBack" /> interface. This interface returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> when the discovery is completed.
                </param>
      <param name="pCookieID">
                    Specifies a cookie that identifies the discovery result.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IDiscoverySession2.DiscoverUrlWithMetadataExchange(System.String,Microsoft.VisualStudio.WCFReference.Interop.DiscoverySessionProtocolPriority,System.Int32,System.String,Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult@)">
      <summary>
                    Returns the discovery result (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult" />) interface for a Windows Communication Foundation (WCF) service.
                </summary>
      <param name="url">
                    Specifies the URL for the discovery session.
                </param>
      <param name="protocolPriority">
                    A <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.DiscoverySessionProtocolPriority" /> enumeration specifying the preferred protocol.
                </param>
      <param name="resolveAllFiles">
                    0 to skip files that cannot be resolved; otherwise 1.
                </param>
      <param name="toolConfigurationPath">
                    Specifies the location of the configuration file.
                </param>
      <param name="ppDiscoverResult">
                    Specifies the <see cref="T:Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult" />.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceContracts">
      <summary>
                    An enumerator for Windows Communication Foundation (WCF) service contracts. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceContracts.Clone(Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceContracts@)">
      <summary>
                    Clones this <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceContracts" /> interface by creating another instance.
                </summary>
      <param name="ppenum">
                    Reference to the cloned <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceContracts" /> interface.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceContracts.Next(System.UInt32,Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceContract[],System.UInt32@)">
      <summary>
                    Retrieves the next <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceContract" />. 
                </summary>
      <param name="celt">
                    Number of contract interfaces to return, or zero to indicate a request for all the objects.
                </param>
      <param name="rgelt">
                    An array of <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceContract" /> objects. Contains <paramref name="pceltFetched" /> objects.
                </param>
      <param name="pceltFetched">
                    Actual number of contract interfaces retrieved.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceContracts.Reset">
      <summary>
                    Returns the enumerator to its initial state.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceContracts.Skip(System.UInt32)">
      <summary>
                    Skips a specified number of <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceContract" /> interfaces.
                </summary>
      <param name="celt">
                    The number of interfaces to skip.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceEndpoints">
      <summary>
                    An enumerator for Windows Communication Foundation (WCF) service endpoints.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceEndpoints.Clone(Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceEndpoints@)">
      <summary>
                    Clones this <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceEndpoints" /> interface by creating another instance.
                </summary>
      <param name="ppenum">
                    Reference to the cloned <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceEndpoints" /> interface.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceEndpoints.Next(System.UInt32,Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceEndpoint[],System.UInt32@)">
      <summary>
                    Retrieves the next <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceEndpoint" />.
                </summary>
      <param name="celt">
                    Number of endpoint interfaces to return, or zero to indicate a request for all the objects.
                </param>
      <param name="rgelt">
                    An array of <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceEndpoint" /> objects. Contains <paramref name="pceltFetched" /> objects.
                </param>
      <param name="pceltFetched">
                    Actual number of endpoint interfaces retrieved.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceEndpoints.Reset">
      <summary>
                    Return the enumerator to its initial state.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceEndpoints.Skip(System.UInt32)">
      <summary>
                    Skips a specified number of <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceEndpoint" /> interfaces.
                </summary>
      <param name="celt">
                    The number of interfaces to skip.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceGroupMetadataItems">
      <summary>
                    An enumerator for Windows Communication Foundation (WCF) service metadata items.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceGroupMetadataItems.Clone(Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceGroupMetadataItems@)">
      <summary>
                    Clones this <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceGroupMetadataItems" /> interface by creating another instance.
                </summary>
      <param name="ppenum">
                    Reference to the cloned <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceGroupMetadataItems" /> interface.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceGroupMetadataItems.Next(System.UInt32,Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupMetadataItem[],System.UInt32@)">
      <summary>
                    Retrieves the next <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupMetadataItem" />.
                </summary>
      <param name="celt">
                    Number of contract interfaces to return, or zero to indicate a request for all the objects.
                </param>
      <param name="rgelt">
                    An array of <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupMetadataItem" /> objects. Contains <paramref name="pceltFetched" /> objects.
                </param>
      <param name="pceltFetched">
                    Actual number of contract interfaces that are retrieved.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceGroupMetadataItems.Reset">
      <summary>
                    Returns the enumerator to its initial state.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceGroupMetadataItems.Skip(System.UInt32)">
      <summary>
                    Skips a specified number of <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupMetadataItem" /> interfaces.
                </summary>
      <param name="celt">
                    The number of interfaces to skip.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IReferenceInfo2">
      <summary>
                    Provides an interface for working with Windows Communication Foundation (WCF) service reference configuration files.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IReferenceInfo2.GetDefaultFileName">
      <summary>
                    Gets the default file name for a configuration file.
                </summary>
      <returns>
                    A String that contains the file name. Can return Null.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IReferenceInfo2.GetDocumentContents">
      <summary>
                    Gets the contents of a configuration file.
                </summary>
      <returns>
                    A Byte array that contains the file contents.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsAddWebReferenceDlg3">
      <summary>
                    Provides an interface for displaying the Add Service Reference dialog box and displaying the results.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsAddWebReferenceDlg3.ShowAddWebReferenceDialog(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,Microsoft.VisualStudio.Shell.Interop.IDiscoverySession,Microsoft.VisualStudio.WCFReference.Interop.ServiceReferenceType,System.String,Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup,System.String,Microsoft.VisualStudio.WCFReference.Interop.IVsAddWebReferenceResult@,System.Int32@)">
      <summary>
                    Displays the Add Service Reference dialog box.
                </summary>
      <param name="pProject">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> for the project where the reference will be added.
                </param>
      <param name="pDiscoverySession">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsDiscoveryService" /> session to use for the metadata download.
                </param>
      <param name="referenceTypesAllowed">
                    The <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.ServiceReferenceType" /> for the reference; either Windows Communication Foundation (WCF) or or Web services (ASMX) that use ASP.NET.
                </param>
      <param name="pszDialogName">
                    A <see cref="T:System.String" /> that contains the title for the dialog box. Can be Null.
                </param>
      <param name="pExistingReferenceGroup">
                    An existing <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup" />. Can be Null.
                </param>
      <param name="pszReferenceConfigContents">
                    A <see cref="T:System.String" /> that contains the configuration contents.
                </param>
      <param name="ppReferenceResult">
                    A <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsAddWebReferenceResult" /> object that contains the results. Can be Null if the dialog box was canceled.
                </param>
      <param name="pfCancelled">
                    An Integer specifying whether the dialog box was canceled.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsAddWebReferenceDlg3.ShowDiscoveredServicesInCurrentDialog(System.Int32,System.String[],System.String[],System.String,System.String)">
      <summary>
                    Displays a list of Windows Communication Foundation (WCF) services in an Add Service Reference dialog box.
                </summary>
      <param name="cItems">
                    A Long that contains the number of items to display.
                </param>
      <param name="ServiceUrls">
                    A <see cref="T:System.String" /> array that contains the URL addresses for the services.
                </param>
      <param name="ServiceDisplayNames">
                    A <see cref="T:System.String" /> array that contains the names of the services.
                </param>
      <param name="pszStatusText">
                    A <see cref="T:System.String" /> that contains the status text. Can be Null for default status.
                </param>
      <param name="pszErrorText">
                    A <see cref="T:System.String" /> that contains the error text. Null if there were no errors.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsAddWebReferenceResult">
      <summary>
                    Contains data gathered by the Add Service Reference dialog box.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsAddWebReferenceResult.GetDetail">
      <summary>
                    Returns an interface that exposes additional properties of a service reference in the Add Service Reference dialog box.
                </summary>
      <returns>
                    An <see cref="T:Microsoft.VisualStudio.ManagedInterfaces9.IVsWCFReferenceGroupDetails" /> interface.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsAddWebReferenceResult.GetReferenceName">
      <summary>
                    Returns the name of a service reference in the Add Service Reference dialog box.
                </summary>
      <returns>
                    A String that contains the name of the service reference.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsAddWebReferenceResult.GetReferenceNamespace">
      <summary>
                    Returns the namespace of a service reference in the Add Service Reference dialog box.
                </summary>
      <returns>
                    A String that contains the namespace of the service reference.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsAddWebReferenceResult.GetReferenceType">
      <summary>
                    Returns the <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.ServiceReferenceType" /> of a service reference in the Add Service Reference dialog box.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.ServiceReferenceType" /> representing the type of the service reference.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsAddWebReferenceResult.GetReferenceUrl">
      <summary>
                    Returns the URL for a service reference in the Add Service Reference dialog box.
                </summary>
      <returns>
                    A String that contains the URL for the service reference.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsAddWebReferenceResult.Save">
      <summary>
                    Saves reference metadata in the project and creates a new Windows Communication Foundation (WCF) service reference.
                </summary>
      <returns>
                    A <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup" /> object.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsASMXMetadataStorageProvider">
      <summary>
                    Provides an interface for saving metadata for Web services (.asmx) that use ASP.NET in the project system.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsASMXMetadataStorageProvider.AddWebReference(System.String,System.String,Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult)">
      <summary>
                    Adds the metadata to a project for reference to a Web service (.asmx) that uses ASP.NET.
                </summary>
      <returns>
                    A string that contains the actual namespace for the reference.
                </returns>
      <param name="pszUrl">
                    A string that contains the URL for the reference.
                </param>
      <param name="pszSuggestName">
                    A string that contains the suggested namespace for the reference.
                </param>
      <param name="pDiscoveryResult">
                    An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IDiscoveryResult" /> that contains the metadata for the reference.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsASMXMetadataStorageProvider.IsValidNewASMXReferenceName(System.String)">
      <summary>
                    Returns a value that determines whether a namespace for a reference to a Web service (asmx) that uses ASP.NET is unique.
                </summary>
      <returns>
                    0 if the namespace already exists; otherwise a non-zero Integer.
                </returns>
      <param name="pszNewName">
                    A string that contains the namespace for the reference.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsEnumServiceReferenceMetadataStorages"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsEnumServiceReferenceMetadataStorages.Clone(Microsoft.VisualStudio.WCFReference.Interop.IVsEnumServiceReferenceMetadataStorages@)"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsEnumServiceReferenceMetadataStorages.Next(System.UInt32,Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage[],System.UInt32@)"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsEnumServiceReferenceMetadataStorages.Reset"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsEnumServiceReferenceMetadataStorages.Skip(System.UInt32)"></member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsEnumWCFMetadataStorages">
      <summary>
                    Provides an enumerator for Windows Communication Foundation (WCF) metadata storages.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsEnumWCFMetadataStorages.Clone(Microsoft.VisualStudio.WCFReference.Interop.IVsEnumWCFMetadataStorages@)">
      <summary>
                    Clones this <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsEnumWCFMetadataStorages" /> interface by creating another instance.
                </summary>
      <param name="ppenum">
                    Reference to the cloned <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsEnumWCFMetadataStorages" /> interface.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsEnumWCFMetadataStorages.Next(System.UInt32,Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage[],System.UInt32@)">
      <summary>
                    Retrieves the next <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage" />.
                </summary>
      <returns>
                    The index of the next storage in <paramref name="rgelt" />.
                </returns>
      <param name="celt">
                    Number of contract interfaces to return, or zero to indicate a request for all the objects.
                </param>
      <param name="rgelt">
                    An array of <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage" /> objects. Contains <paramref name="pceltFetched" /> objects.
                </param>
      <param name="pceltFetched">
                    Actual number of contract interfaces retrieved.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsEnumWCFMetadataStorages.Reset">
      <summary>
                    Returns the enumerator to its initial state.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsEnumWCFMetadataStorages.Skip(System.UInt32)">
      <summary>
                    Skips a specified number of <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage" /> interfaces.
                </summary>
      <param name="celt">
                    The number of interfaces to skip.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage.AdviseServiceReferenceMetadataStorageEvents(Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageEvents,System.UInt32@)"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage.BeginUpdate"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage.CreateMetadataFile(System.String,System.Byte[])"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage.DeleteMetadataFile(System.String)"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage.EndUpdate"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage.FileCodeModel"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage.GetMapFilePath"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage.GetName"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage.GetNamespace"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage.GetStorageType"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage.LoadMapFileData"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage.LoadMetadataFile(System.String)"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage.ProjectItemId"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage.Remove"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage.RunProxyGenerator"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage.SaveMapFileData(System.Byte[])"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage.SaveMetadataFile(System.String,System.Byte[])"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage.SetName(System.String)"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage.SetNamespace(System.String)"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage.UnadviseServiceReferenceMetadataStorageEvents(System.UInt32)"></member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageEvents"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageEvents.OnMapFileUpdated"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageEvents.OnMetadataFileAdded(System.String)"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageEvents.OnMetadataFileDeleted(System.String)"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageEvents.OnMetadataFileRenamed(System.String,System.String)"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageEvents.OnMetadataFileUpdated(System.String)"></member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageProvider"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageProvider.AdviseMetadataStorageProviderEvents(Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageProviderEvents,System.UInt32@)"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageProvider.CreateMetadataStorage(System.String,System.String,System.String,Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage@,Microsoft.VisualStudio.WCFReference.Interop.StorageNameValidationState@)"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageProvider.GetMetadataStorageFromMapFile(System.String)"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageProvider.GetMetadataStorages"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageProvider.IsStorageTypeSupported(System.String)"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageProvider.IsValidNewServiceReferenceName(System.String,System.String,System.String,System.SByte@,Microsoft.VisualStudio.WCFReference.Interop.StorageNameValidationState@,System.String@)"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageProvider.MakeValidServiceReferenceName(System.String,System.String,System.String,System.String@,System.String@)"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageProvider.UnadviseMetadataStorageProviderEvents(System.UInt32)"></member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageProviderEvents"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageProviderEvents.OnAdded(Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorage)"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageProviderEvents.OnMoved(System.String,System.String,System.String)"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageProviderEvents.OnRemoved(System.String,System.String)"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageProviderEvents.OnRemoving(System.String,System.String)"></member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsServiceReferenceMetadataStorageProviderEvents.OnRenamed(System.String,System.String,System.String)"></member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFAsyncResult">
      <summary>
                    Provides an interface for monitoring the progress of asynchronous calls to Windows Communication Foundation (WCF) service providers.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFAsyncResult.Cancel">
      <summary>
                    Cancels an asynchronous method call.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFAsyncResult.GetCustomState">
      <summary>
                    Returns custom state object passed to an asynchronous method
                </summary>
      <returns>
                    A custom state object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFAsyncResult.GetMethodResult">
      <summary>
                    Returns the <see cref="P:System.Exception.HResult" /> returned by the method that was called asynchronously.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFAsyncResult.IsCancelled">
      <summary>
                    Returns a value determining whether an asynchronous method was canceled.
                </summary>
      <returns>
                    0 if the method was canceled; otherwise a non-zero Integer.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFAsyncResult.IsCompleted">
      <summary>
                    Returns a value determining whether an asynchronous method was completed.
                </summary>
      <returns>
                    0 if the method was completed; otherwise a non-zero Integer.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFCompletionCallback">
      <summary>
                    Provides a callback interface for monitoring the progress of asynchronous calls to Windows Communication Foundation (WCF) service providers.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFCompletionCallback.OnFinished(Microsoft.VisualStudio.WCFReference.Interop.IVsWCFAsyncResult)">
      <summary>
                    Provides notification for an asynchronous method call.
                </summary>
      <param name="pResult">
                    A <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFAsyncResult" /> object.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage">
      <summary>
                    Stores the metadata for a Windows Communication Foundation (WCF) service reference group.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage.AdviseWCFMetadataStorageEvents(Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageEvents,System.UInt32@)">
      <summary>
                    Registers the caller for metadata storage event notification.
                </summary>
      <param name="pSink">
                    Reference that provides notifications of metadata storage events.
                </param>
      <param name="pdwCookie">
                    A token representing the completed registration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage.BeginUpdate">
      <summary>
                    Initiates an update to Windows Communication Foundation (WCF) metadata storage files.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage.CreateMetadataFile(System.String,System.Byte[])">
      <summary>
                    Creates a new metadata file in a Windows Communication Foundation (WCF) metadata storage.
                </summary>
      <returns>
                    The name of the new metadata file.
                </returns>
      <param name="pszMetadataSuggestedName">
                    The suggested name for the file. May be overridden if a file that uses the same name already exists.
                </param>
      <param name="content">
                    A Byte array that contains the metadata for the file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage.DeleteMetadataFile(System.String)">
      <summary>
                    Deletes an existing metadata file from a Windows Communication Foundation (WCF) metadata storage.
                </summary>
      <param name="pszMetadataFileName">
                    The name of the metadata file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage.EndUpdate">
      <summary>
                    Concludes an update to Windows Communication Foundation (WCF) metadata storage files.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage.FileCodeModel">
      <summary>
                    Returns the proxy code model for a Windows Communication Foundation (WCF) metadata storage. 
                </summary>
      <returns>
                    A file code model object if one exists; otherwise Null.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage.GetMapFilePath">
      <summary>
                    Returns the path for the .svcmap file in a Windows Communication Foundation (WCF) metadata storage.
                </summary>
      <returns>
                    The path of the .svcmap file.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage.GetName">
      <summary>
                    Returns the name of the .svcmap file in a Windows Communication Foundation (WCF) metadata storage.
                </summary>
      <returns>
                    The name of the file without the extension.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage.GetNamespace">
      <summary>
                    Returns the namespace for a Windows Communication Foundation (WCF) metadata storage.
                </summary>
      <returns>
                    The namespace for the storage.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage.LoadMapFileData">
      <summary>
                    Loads the metadata into a .svcmap file.
                </summary>
      <returns>
                    A Byte array that contains the metadata.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage.LoadMetadataFile(System.String)">
      <summary>
                    Loads the metadata into a metadata file.
                </summary>
      <returns>
                    A Byte array that contains the metadata.
                </returns>
      <param name="pszMetadataFileName">
                    The name of the file to load.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage.ProjectItemId">
      <summary>
                    Returns the <see cref="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage.ProjectItemId" /> for a Windows Communication Foundation (WCF) metadata storage.
                </summary>
      <returns>
                    A ProjectItemID.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage.Remove">
      <summary>
                    Deletes the complete Windows Communication Foundation (WCF) metadata storage.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage.RunProxyGenerator">
      <summary>
                    Runs the code generator to create a Windows Communication Foundation (WCF) service client.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage.SaveMapFileData(System.Byte[])">
      <summary>
                    Saves the .svcmap file in a Windows Communication Foundation (WCF) metadata storage.
                </summary>
      <param name="content">
                    A Byte array that contains the metadata.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage.SaveMetadataFile(System.String,System.Byte[])">
      <summary>
                    Saves a metadata file in a Windows Communication Foundation (WCF) metadata storage.
                </summary>
      <param name="pszMetadataFileName">
                    The name of the metadata file.
                </param>
      <param name="content">
                    A Byte array that contains the metadata.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage.SetName(System.String)">
      <summary>
                    Sets the name of the .svcmap file in a Windows Communication Foundation (WCF) metadata storage.
                </summary>
      <param name="pszName">
                    The name for the file without the extension.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage.SetNamespace(System.String)">
      <summary>
                    Sets the namespace for a Windows Communication Foundation (WCF) metadata storage.
                </summary>
      <param name="pszNamespace">
                    The name to use for the namespace.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage.UnadviseWCFMetadataStorageEvents(System.UInt32)">
      <summary>
                    Cancels registration for metadata storage event notification.
                </summary>
      <param name="dwCookie">
                    A token representing the registration to be canceled.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageEvents">
      <summary>
                    Provides an interface for Windows Communication Foundation (WCF) metadata storage events.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageEvents.OnMapFileUpdated">
      <summary>
                    Raises an event after .svcmap files have been updated.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageEvents.OnMetadataFileAdded(System.String)">
      <summary>
                    Raises an event after a new metadata file has been added.
                </summary>
      <param name="pszFileName">
                    The name of the metadata file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageEvents.OnMetadataFileDeleted(System.String)">
      <summary>
                    Raises an event after a metadata file has been deleted.
                </summary>
      <param name="pszFileName">
                    The name of the metadata file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageEvents.OnMetadataFileRenamed(System.String,System.String)">
      <summary>
                    Raises an event after a metadata file has been renamed.
                </summary>
      <param name="pszFileNameOld">
                    The original name of the metadata file.
                </param>
      <param name="pszFileNameNew">
                    The new name of the metadata file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageEvents.OnMetadataFileUpdated(System.String)">
      <summary>
                    Raises an event after metadata files have been updated.
                </summary>
      <param name="pszFileName">
                    The name of the metadata file.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProvider">
      <summary>
                    Provides an interface for saving Windows Communication Foundation (WCF) service metadata in the project system.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProvider.AdviseWCFMetadataStorageProviderEvents(Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProviderEvents,System.UInt32@)">
      <summary>
                    Registers the caller for metadata storage provider event notification.
                </summary>
      <param name="pSink">
                    Reference that provides notifications of metadata storage events.
                </param>
      <param name="pdwCookie">
                    A token representing the completed registration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProvider.CreateStorage(System.String,System.String,Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage@,Microsoft.VisualStudio.WCFReference.Interop.StorageNameValidationState@)">
      <summary>
                    Creates a new Windows Communication Foundation (WCF) metadata storage.
                </summary>
      <param name="pszNamespace">
                    The namespace for the storage.
                </param>
      <param name="pszReferenceName">
                    The name of the WCF service reference.
                </param>
      <param name="pWCFMetadataStorage">
                    The new <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage" />.
                </param>
      <param name="pNameValidationState">
                    A <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.StorageNameValidationState" /> object.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProvider.GetStorageFromMapFile(System.String)">
      <summary>
                    Returns a Windows Communication Foundation (WCF) metadata storage based on the full path of a .svcmap file.
                </summary>
      <returns>
                    A WCF metadata storage object.
                </returns>
      <param name="pszMapFilePath">
                    The path of the file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProvider.GetStorages">
      <summary>
                    Enumerates Windows Communication Foundation (WCF) metadata storages in a project.
                </summary>
      <returns>
                    A metadata storages enumerator,
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProvider.IsValidNewReferenceName(System.String,System.String,System.SByte@,Microsoft.VisualStudio.WCFReference.Interop.StorageNameValidationState@,System.String@)">
      <summary>
                    Returns a value that determines whether a name for a Windows Communication Foundation (WCF) service reference is unique.
                </summary>
      <param name="pszNamespace">
                    A string that contains the namespace for the reference.
                </param>
      <param name="pszReferenceName">
                    A string that contains the name of the reference.
                </param>
      <param name="pbValid">true if the name is valid; otherwise false.
                </param>
      <param name="pValidationState">
                    A <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.StorageNameValidationState" /> object.
                </param>
      <param name="pbstrMessage">
                    A string that contains an error message. Can be Null.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProvider.MakeValidReferenceName(System.String,System.String,System.String@,System.String@)">
      <summary>
                    Returns a unique name and namespace for a Windows Communication Foundation (WCF) service reference.
                </summary>
      <param name="pszNamespace">
                    A string that contains the namespace for the reference.
                </param>
      <param name="pszReferenceName">
                    A string that contains the name of the reference.
                </param>
      <param name="pbstrSuggestedNamespace">
                    A string that contains the new namespace for the reference.
                </param>
      <param name="pbstrSuggestedReferenceName">
                    A string that contains the new name of the reference.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProvider.UnadviseWCFMetadataStorageProviderEvents(System.UInt32)">
      <summary>
                    Cancels registration for metadata storage provider event notification.
                </summary>
      <param name="dwCookie">
                    A token representing the registration to be canceled.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProviderEvents">
      <summary>
                    Provides an interface for Windows Communication Foundation (WCF) metadata storage provider events.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProviderEvents.OnAdded(Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorage)">
      <summary>
                    Raises an event after a new file or folder has been added.
                </summary>
      <param name="pIVsWCFMetadataStorage">
                    A metadata storage interface.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProviderEvents.OnMoved(System.String,System.String)">
      <summary>
                    Raises an event when a file or folder has been moved.
                </summary>
      <param name="pszOldSvcmapFilePath">
                    The previous path of the .svcmap file.
                </param>
      <param name="pszNewSvcmapFilePath">
                    The new path of the .svcmap file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProviderEvents.OnRemoved(System.String)">
      <summary>
                    Raises an event when a file or folder has been removed.
                </summary>
      <param name="pszOldSvcmapFilePath">
                    The previous path of the .svcmap file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProviderEvents.OnRemoving(System.String)">
      <summary>
                    Raises an event before a file or folder is removed.
                </summary>
      <param name="pszOldSvcmapFilePath">
                    The path of the .svcmap file.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProviderEvents.OnRenamed(System.String,System.String)">
      <summary>
                    Raises an event when a file or folder has been renamed.
                </summary>
      <param name="pszOldSvcmapFilePath">
                    The previous path of the .svcmap file.
                </param>
      <param name="pszNewSvcmapFilePath">
                    The new path of the .svcmap file.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFObject">
      <summary>
                    Provides an interface for validating and reloading Windows Communication Foundation (WCF) service reference objects.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFObject.IsValid">
      <summary>
                    Determines whether a Windows Communication Foundation (WCF) service reference object has been invalidated.
                </summary>
      <returns>false if the object has been invalidated; otherwise true.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFObject.Reload">
      <summary>
                    Reloads a Windows Communication Foundation (WCF) service reference object.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceContract">
      <summary>
                    Represents a Windows Communication Foundation (WCF) reference contract interface generated by the proxy generator.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceContract.GetName">
      <summary>
                    Returns the contract name from the configuration file.
                </summary>
      <returns>
                    A String that contains the contract name.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceContract.GetPortTypeName">
      <summary>
                    Returns the port type name from the Web Services Description Language (WSDL).
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceContract.GetReferenceEndpointEnumerator">
      <summary>
                    Returns the collection of endpoints for the Windows Communication Foundation (WCF) service reference.
                </summary>
      <returns>
                    An <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IEnumWCFReferenceEndpoints" /> enumerator.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceContract.GetReferenceGroup">
      <summary>
                    Returns the reference group that contains the contract.
                </summary>
      <returns>
                    An <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceContract.GetTargetNamespace">
      <summary>
                    Returns the target namespace of the Web Services Description Language (WSDL).
                </summary>
      <returns>
                    A String that contains the target namespace.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceContract.GetTypeName">
      <summary>
                    Returns the full name of the contract <see cref="T:System.Type" />.
                </summary>
      <returns>
                    A String that contains the name.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceEndpoint">
      <summary>
                    Represents an endpoint definition in a configuration file.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceEndpoint.GetAddress">
      <summary>
                    Returns the <see cref="T:System.ServiceModel.EndpointAddress" /> from the configuration file.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the <see cref="T:System.ServiceModel.EndpointAddress" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceEndpoint.GetBehaviorConfiguration">
      <summary>
                    Returns the endpoint <see cref="P:System.ServiceModel.Configuration.ServiceEndpointElement.BehaviorConfiguration" /> from the configuration file.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the <see cref="P:System.ServiceModel.Configuration.ServiceEndpointElement.BehaviorConfiguration" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceEndpoint.GetBinding">
      <summary>
                    Returns the endpoint <see cref="P:System.ServiceModel.Configuration.ServiceEndpointElement.Binding" /> from the configuration file.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the <see cref="P:System.ServiceModel.Configuration.ServiceEndpointElement.Binding" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceEndpoint.GetBindingConfiguration">
      <summary>
                    Returns the endpoint <see cref="P:System.ServiceModel.Configuration.ServiceEndpointElement.BindingConfiguration" /> from the configuration file.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the <see cref="P:System.ServiceModel.Configuration.ServiceEndpointElement.BindingConfiguration" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceEndpoint.GetContract">
      <summary>
                    Returns the endpoint <see cref="P:System.ServiceModel.Description.ServiceEndpoint.Contract" /> from the configuration file.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the <see cref="P:System.ServiceModel.Description.ServiceEndpoint.Contract" />.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceEndpoint.GetName">
      <summary>
                    Returns the endpoint <see cref="P:System.ServiceModel.Description.ServiceEndpoint.Name" /> from the configuration file.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the <see cref="P:System.ServiceModel.Description.ServiceEndpoint.Name" />.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceEvents">
      <summary>
                    Raises events for Windows Communication Foundation (WCF) service references.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceEvents.OnConfigurationChanged">
      <summary>
                    Raises the <see cref="E:Microsoft.VisualStudio.ManagedInterfaces9.IVsApplicationConfiguration.ConfigurationChanged" /> event.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceEvents.OnMetadataChanged(Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup)">
      <summary>
                    Raises the <see cref="E:System.Windows.Forms.CurrencyManager.MetaDataChanged" /> event.
                </summary>
      <param name="pReferenceGroup">
                    The <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup" /> that contains the metadata.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceEvents.OnMetadataChanging(Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup)">
      <summary>
                    Raises the <see cref="E:System.Windows.Forms.CurrencyManager.MetaDataChanged" /> event.
                </summary>
      <param name="pReferenceGroup">
                    The <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup" /> that contains the metadata.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceEvents.OnReferenceGroupCollectionChanged">
      <summary>
                    Raises an event after a new reference is added or an existing reference is deleted.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceEvents.OnReferenceGroupCollectionChanging">
      <summary>
                    Raises an event after a new reference is added or an existing reference is deleted.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceEvents.OnReferenceGroupPropertiesChanged(Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup)">
      <summary>
                    Raises an event after reference group properties (including name, namespace, proxy generation options and URL) for a particular reference group are changed.
                </summary>
      <param name="pReferenceGroup">
                    The <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup" /> that contains the properties.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceEvents.OnReferenceGroupPropertiesChanging(Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup)">
      <summary>
                    Raises an event before reference group properties (including name, namespace, proxy generation options and URL) for a particular reference group are changed.
                </summary>
      <param name="pReferenceGroup">
                    The <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup" /> that contains the properties.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup">
      <summary>
                    Provides an interface for generating Windows Communication Foundation (WCF) service clients.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.AddReference(Microsoft.VisualStudio.Shell.Interop.IDiscoverySession,System.String)">
      <summary>
                    Adds a Windows Communication Foundation (WCF) service reference to a reference group.
                </summary>
      <param name="pDiscoverySession">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IDiscoverySession" /> to use. Can be Null.
                </param>
      <param name="pszUrl">
                    A <see cref="T:System.String" /> that contains the URL for the service.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.AsyncAddReference(Microsoft.VisualStudio.Shell.Interop.IDiscoverySession,System.String,Microsoft.VisualStudio.WCFReference.Interop.IVsWCFCompletionCallback,System.Object,Microsoft.VisualStudio.WCFReference.Interop.IVsWCFAsyncResult@)">
      <summary>
                    Adds a Windows Communication Foundation (WCF) service reference to a reference group asynchronously.
                </summary>
      <param name="pDiscoverySession">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IDiscoverySession" /> to use. Can be Null.
                </param>
      <param name="pszUrl">
                    A <see cref="T:System.String" /> that contains the URL for the service.
                </param>
      <param name="pCallback">
                    A <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFCompletionCallback" /> interface to use for notification.
                </param>
      <param name="punknownCustomState">
                    A custom state object that can be accessed from the <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFAsyncResult" /> interface. Can be Null.
                </param>
      <param name="ppResult">
                    A <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFAsyncResult" /> interface that contains the results.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.AsyncUpdate(Microsoft.VisualStudio.Shell.Interop.IDiscoverySession,Microsoft.VisualStudio.WCFReference.Interop.IVsWCFCompletionCallback,System.Object,Microsoft.VisualStudio.WCFReference.Interop.IVsWCFAsyncResult@)">
      <summary>
                    Updates a Windows Communication Foundation (WCF) service reference asynchronously.
                </summary>
      <param name="pDiscoverySession">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IDiscoverySession" /> to use. Can be Null.
                </param>
      <param name="pCallback">
                    A <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFCompletionCallback" /> interface to use for notification.
                </param>
      <param name="punknownCustomState">
                    A custom state object that can be accessed from the <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFAsyncResult" /> interface. Can be Null.
                </param>
      <param name="ppResult">
                    A <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFAsyncResult" /> interface that contains the results.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.BeginBatch">
      <summary>
                    Begins batch processing of Windows Communication Foundation (WCF) service references in a reference group.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.DeleteReference(System.Int32)">
      <summary>
                    Deletes a Windows Communication Foundation (WCF) service reference from a reference group.
                </summary>
      <param name="index">
                    An Integer representing the index of the reference to delete.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.EndBatch">
      <summary>
                    Ends batch processing of Windows Communication Foundation (WCF) service references in a reference group.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.GetCollection">
      <summary>
                    Returns the reference group collection.
                </summary>
      <returns>
                    The reference group collection.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.GetContractsEnumerator">
      <summary>
                    Returns an enumerator for a Windows Communication Foundation (WCF) service contract in a reference group.
                </summary>
      <returns>
                    An enumerator for a contract in a reference group.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.GetExtensionData(System.String)">
      <summary>
                    Returns the extension data for a Windows Communication Foundation (WCF) service reference.
                </summary>
      <returns>
                    A Byte array that contains the data in <paramref name="name" />.
                </returns>
      <param name="name">
                    A string that contains the file name.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.GetFileCodeModel">
      <summary>
                    Returns a code model for generating a proxy.
                </summary>
      <returns>
                    An object that represents a code model.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.GetID">
      <summary>
                    Returns a GUID for a reference group.
                </summary>
      <returns>
                    A string that contains the GUID.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.GetMapFileProjectItem">
      <summary>
                    Returns the project item with which a service reference is associated.
                </summary>
      <returns>
                    An object that represents a project item.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.GetMetadataItemsEnumerator">
      <summary>
                    Returns an enumerator for the metadata items in a Windows Communication Foundation (WCF) service reference group.
                </summary>
      <returns>
                    An enumerator for metadata items.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.GetName">
      <summary>
                    Returns the name of a .svcmap file for a Windows Communication Foundation (WCF) service reference group.
                </summary>
      <returns>
                    A string that contains the name.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.GetNamespace">
      <summary>
                    Returns the namespace for a Windows Communication Foundation (WCF) service reference group.
                </summary>
      <returns>
                    A string that contains the namespace.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.GetOptions">
      <summary>
                    Returns the code generation options for a Windows Communication Foundation (WCF) reference group.
                </summary>
      <returns>
                    An object that represents code generation options.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.GetProxyNamespace">
      <summary>
                    Returns the namespace for proxy classes generated from a Windows Communication Foundation (WCF) reference group.
                </summary>
      <returns>
                    A string that contains the namespace.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.GetReferenceCount">
      <summary>
                    Returns a count of Windows Communication Foundation (WCF) service references in a WCF reference group.
                </summary>
      <returns>
                    An Integer that contains the number of references.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.GetReferenceUrl(System.Int32)">
      <summary>
                    Returns the URL from which metadata for a Windows Communication Foundation (WCF) service reference is downloaded.
                </summary>
      <returns>
                    A string that contains the URL.
                </returns>
      <param name="index">
                    An Integer that contains the index of the service reference.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.IsValid">
      <summary>
                    Determines whether a Windows Communication Foundation (WCF) service reference group object has been invalidated.
                </summary>
      <returns>false if the object has been invalidated; otherwise true.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.Reload">
      <summary>
                    Reloads a Windows Communication Foundation (WCF) service reference group object.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.SetExtensionData(System.String,System.Byte[])">
      <summary>
                    Sets the extension data for a Windows Communication Foundation (WCF) service reference.
                </summary>
      <param name="name">
                    A <see cref="T:System.String" /> that contains the file name.
                </param>
      <param name="content">
                    A Byte array that contains the extension data.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.SetName(System.String)">
      <summary>
                    Sets the name of a .svcmap file for a Windows Communication Foundation (WCF) service reference group.
                </summary>
      <param name="pszName">
                    A string that contains the name for the file without the extension.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.SetNamespace(System.String)">
      <summary>
                    Sets the namespace for a Windows Communication Foundation (WCF) service reference group.
                </summary>
      <param name="pszNamespace">
                    A string that contains the namespace.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.SetOptions(Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions)">
      <summary>
                    Sets the code generation options for a Windows Communication Foundation (WCF) reference group.
                </summary>
      <param name="pOptions">
                    A <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions" /> object to copy the options from.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.SetReferenceUrl(System.Int32,System.String)">
      <summary>
                    Sets URL from which metadata for a Windows Communication Foundation (WCF) service reference is downloaded.
                </summary>
      <param name="index">
                    An Integer that contains the index of the service reference.
                </param>
      <param name="pszReferenceUrl">
                    A string that contains the URL.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.ShowOptionsDialog">
      <summary>
                    Displays the Configure Service Reference dialog box for the reference group.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.Update(Microsoft.VisualStudio.Shell.Interop.IDiscoverySession)">
      <summary>
                    Updates a Windows Communication Foundation (WCF) service reference group.
                </summary>
      <param name="pDiscoverySession">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IDiscoverySession" /> to use. Can be Null.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup.UpdateConfiguration">
      <summary>
                    Updates the configuration for a Windows Communication Foundation (WCF) service reference group.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupCollection">
      <summary>
                    Provides an interface for managing Windows Communication Foundation (WCF) reference groups.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupCollection.Add(System.String,System.String)">
      <summary>
                    Adds a Windows Communication Foundation (WCF) reference group to the collection.
                </summary>
      <returns>
                    A WCF reference group.
                </returns>
      <param name="pszNamespace">
                    A string that contains the namespace for the reference group.
                </param>
      <param name="pszName">
                    A string that contains the name of the reference group.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupCollection.ContainingProject">
      <summary>
                    Returns the project hierarchy for the project that contains the collection.
                </summary>
      <returns>
                    A project hierarchy interface.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupCollection.Count">
      <summary>
                    Returns a count of Windows Communication Foundation (WCF) reference groups in the collection.
                </summary>
      <returns>
                    The number of reference groups.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupCollection.GetReferenceGroupByName(System.String,System.String)">
      <summary>
                    Returns a specified Windows Communication Foundation (WCF) reference group in the collection.
                </summary>
      <returns>
                    A WCF reference group.
                </returns>
      <param name="pszNamespace">
                    A string that contains the namespace for the reference group.
                </param>
      <param name="pszName">
                    A string that contains the name of the reference group.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupCollection.GetReferenceGroupFromMapFile(System.String)">
      <summary>
                    Returns a specified Windows Communication Foundation (WCF) reference group in the collection.
                </summary>
      <returns>
                    A WCF reference group.
                </returns>
      <param name="pszMapFilePath">
                    A string that contains the path of a .svcmap file for the WCF reference group.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupCollection.IsValid">
      <summary>
                    Determines if the index for a Windows Communication Foundation (WCF) reference group is valid in the collection.
                </summary>
      <returns>
                    0 if the index is not valid; otherwise any non-zero Integer.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupCollection.Item(System.Int32)">
      <summary>
                    Returns a specified Windows Communication Foundation (WCF) reference group in the collection.
                </summary>
      <returns>
                    A WCF reference group.
                </returns>
      <param name="index">
                    An Integer representing the index of a WCF reference group in the collection.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupCollection.Reload">
      <summary>
                    Refreshes a Windows Communication Foundation (WCF) reference group collection.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupCollection.Remove(Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup)">
      <summary>
                    Removes a Windows Communication Foundation (WCF) reference group from the collection.
                </summary>
      <param name="pWCFReferenceGroup">
                    The <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroup" /> to remove.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupCollection.RemoveAt(System.Int32)">
      <summary>
                    Removes a Windows Communication Foundation (WCF) reference group from the collection by index.
                </summary>
      <param name="index">
                    An Integer representing the index of the WCF reference group to remove.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupCollection.UpdateAll(Microsoft.VisualStudio.Shell.Interop.IDiscoverySession)">
      <summary>
                    Updates all Windows Communication Foundation (WCF) reference group in the collection.
                </summary>
      <param name="pDiscoverySession">
                    A <see cref="T:Microsoft.VisualStudio.Shell.Interop.IDiscoverySession" /> interface for the project.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupMetadataItem">
      <summary>
                    Represents a single metadata document related to a particular Windows Communications Foundation (WCF) service reference.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupMetadataItem.GetContent">
      <summary>
                    Returns the contents of a metadata document in a Windows Communications Foundation (WCF) reference group.
                </summary>
      <returns>
                    A Byte array that contains the contents.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupMetadataItem.GetFileName">
      <summary>
                    Returns the file name for a metadata document in a Windows Communications Foundation (WCF) reference group.
                </summary>
      <returns>
                    A string that contains the file name.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupMetadataItem.GetNodeType">
      <summary>
                    Returns the <see cref="T:Microsoft.VisualStudio.Shell.Interop.DiscoveryNodeType" /> for a metadata document in a Windows Communications Foundation (WCF) reference group.
                </summary>
      <returns>
                    A discovery node type object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupMetadataItem.GetSourceUrl">
      <summary>
                    Returns the URL where a metadata document in a Windows Communications Foundation (WCF) reference group originated.
                </summary>
      <returns>
                    A string that contains the URL.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupMetadataItem.GetTargetNamespace">
      <summary>
                    Returns the target namespace for a metadata document in a Windows Communications Foundation (WCF) reference group.
                </summary>
      <returns>
                    A string that contains the namespace.
                </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions">
      <summary>
                    Provides an interface to manage code generation options for Windows Communication Foundation (WCF) service references.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.GetCollectionMappings(Microsoft.VisualStudio.WCFReference.Interop.CollectionCategory,System.Int32,System.String[])">
      <summary>
                    Returns a list of types that will be used for collections when you generate a Windows Communication Foundation (WCF) client.
                </summary>
      <param name="category">
                    A <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.CollectionCategory" /> item.
                </param>
      <param name="cItems">
                    An Integer that represents the number of mappings.
                </param>
      <param name="rgbstrCollectionMappings">
                    A String that contains the mappings.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.GetCollectionMappingsCount(Microsoft.VisualStudio.WCFReference.Interop.CollectionCategory)">
      <summary>
                    Returns a count of collection mappings.
                </summary>
      <returns>
                    An integer that contains the count.
                </returns>
      <param name="category">
                    A <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.CollectionCategory" /> item.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.GetEnableDataBinding">
      <summary>
                    Determines whether data binding is enabled for a Windows Communication Foundation (WCF) service reference.
                </summary>
      <returns>
                    0 if data binding is not enabled; otherwise any non-zero Integer.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.GetExcludedTypes(System.Int32,System.String[])">
      <summary>
                    Returns a list of types that are excluded from type sharing in a Windows Communication Foundation (WCF) service reference.
                </summary>
      <param name="cItems">
                    An Integer that represents the number of types.
                </param>
      <param name="rgbstrExcludedTypes">
                    A String that contains the excluded types.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.GetExcludedTypesCount">
      <summary>
                    Returns a count of excluded types.
                </summary>
      <returns>
                    An integer that contains the count.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.GetGenerateAsynchronousMethods">
      <summary>
                    Determines whether asynchronous methods are supported for a Windows Communication Foundation (WCF) service reference.
                </summary>
      <returns>
                    0 if asynchronous methods are not supported; otherwise any non-zero Integer.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.GetGenerateInternalTypes">
      <summary>
                    Determines whether internal types are generated for a Windows Communication Foundation (WCF) service reference.
                </summary>
      <returns>
                    0 if internal types will not be generated; otherwise any non-zero Integer.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.GetGenerateMessageContracts">
      <summary>
                    Determines whether message contracts are generated for a Windows Communication Foundation (WCF) service reference.
                </summary>
      <returns>
                    0 if message contracts will not be generated; otherwise any non-zero Integer.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.GetGenerateSerializableTypes">
      <summary>
                    Determines whether serializable types are generated for a Windows Communication Foundation (WCF) service reference.
                </summary>
      <returns>
                    0 if serializable types will not be generated; otherwise any non-zero Integer.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.GetImportXmlTypes">
      <summary>
                    Determines whether XML types are imported for a Windows Communication Foundation (WCF) service reference.
                </summary>
      <returns>
                    0 if XML types will not be imported; otherwise any non-zero Integer.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.GetReferenceAllAssemblies">
      <summary>
                    Determines whether type sharing is enabled for all referenced assemblies in a Windows Communication Foundation (WCF) service reference.
                </summary>
      <returns>
                    0 if type sharing is disabled; otherwise any non-zero Integer.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.GetReferencedAssemblies(System.Int32,System.String[])">
      <summary>
                    Returns a list of referenced assemblies in a Windows Communication Foundation (WCF) service reference.
                </summary>
      <param name="cItems">
                    An Integer that represents the number of assemblies.
                </param>
      <param name="rgbstrReferencedAssemblies">
                    A String that contains the assembly names.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.GetReferencedAssembliesCount">
      <summary>
                    Returns a count of referenced assemblies for a Windows Communication Foundation (WCF) service reference.
                </summary>
      <returns>
                    An Integer that contains the count.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.GetSerializer">
      <summary>
                    Returns the serializer to use when you generate code for a Windows Communication Foundation (WCF) client.
                </summary>
      <returns>
                    A proxy serializer type object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.SetCollectionMappings(Microsoft.VisualStudio.WCFReference.Interop.CollectionCategory,System.Int32,System.String[])">
      <summary>
                    Sets a list of types that will be used for collections when you generate a Windows Communication Foundation (WCF) client.
                </summary>
      <param name="category">
                    A <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.CollectionCategory" /> item.
                </param>
      <param name="cItems">
                    An Integer that represents the number of mappings.
                </param>
      <param name="lpstrCollectionMappings">
                    A String that contains the mappings.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.SetEnableDataBinding(System.Int32)">
      <summary>
                    Sets a value that determines whether data binding is enabled for a Windows Communication Foundation (WCF) service reference.
                </summary>
      <param name="bEnableDataBinding">
                    Any non-zero Integer to enable data binding; otherwise 0.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.SetExcludedTypes(System.Int32,System.String[])">
      <summary>
                    Sets a list of types that are excluded from type sharing in a Windows Communication Foundation (WCF) service reference.
                </summary>
      <param name="cItems">
                    An Integer that represents the number of types.
                </param>
      <param name="lpstrExcludedTypes">
                    A String that contains the excluded types.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.SetGenerateAsynchronousMethods(System.Int32)">
      <summary>
                    Sets a value that determines whether asynchronous methods are supported for a Windows Communication Foundation (WCF) service reference.
                </summary>
      <param name="bGenerateAsynchronousMethods">
                    Any non-zero Integer to support asynchronous methods; otherwise 0.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.SetGenerateInternalTypes(System.Int32)">
      <summary>
                    Sets a value that determines whether internal types are generated for a Windows Communication Foundation (WCF) service reference.
                </summary>
      <param name="fGenerateInternalTypes">
                    Any non-zero Integer to generate internal types; otherwise 0.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.SetGenerateMessageContracts(System.Int32)">
      <summary>
                    Sets a value that determines whether message contracts are generated for a Windows Communication Foundation (WCF) service reference.
                </summary>
      <param name="bGenerateMessageContracts">
                    Any non-zero Integer to generate message contracts; otherwise 0.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.SetGenerateSerializableTypes(System.Int32)">
      <summary>
                    Sets a value that determines whether serializable types are generated for a Windows Communication Foundation (WCF) service reference.
                </summary>
      <param name="bGenerateSerializableTypes">
                    Any non-zero Integer to generate serializable types; otherwise 0.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.SetImportXmlTypes(System.Int32)">
      <summary>
                    Sets a value that determines whether XML types are imported for a Windows Communication Foundation (WCF) service reference.
                </summary>
      <param name="bImportXmlTypes">
                    Any non-zero Integer to import XML types; otherwise 0.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.SetReferenceAllAssemblies(System.Int32)">
      <summary>
                    Sets a value that determines whether type sharing is enabled for all referenced assemblies in a Windows Communication Foundation (WCF) service reference.
                </summary>
      <param name="bReferenceAllAssemblies">
                    Any non-zero Integer to reference all assemblies; otherwise 0.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.SetReferencedAssemblies(System.Int32,System.String[])">
      <summary>
                    Sets a list of referenced assemblies in a Windows Communication Foundation (WCF) service reference.
                </summary>
      <param name="cItems">
                    An Integer that represents the number of assemblies.
                </param>
      <param name="lpstrReferencedAssemblies">
                    A String that contains the assembly names.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceGroupOptions.SetSerializer(Microsoft.VisualStudio.WCFReference.Interop.ProxySerializerType)">
      <summary>
                    Sets the serializer to use when you generate code for a Windows Communication Foundation (WCF) client.
                </summary>
      <param name="ProxySerializerType">
                    A <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.ProxySerializerType" /> object.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceManager">
      <summary>
                    Provides an interface for managing Windows Communication Foundation (WCF) service references.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceManager.AdviseWCFReferenceEvents(Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceEvents,System.UInt32@)">
      <summary>
                    Registers the caller for Windows Communication Foundation (WCF) service event notification.
                </summary>
      <param name="pSink">
                    Reference that provides notifications of WCF service reference events.
                </param>
      <param name="pCookie">
                    A token representing the completed registration.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceManager.GetReferenceEndpointEnumerator">
      <summary>
                    Returns an enumerator for endpoints in a Windows Communication Foundation (WCF) service reference.
                </summary>
      <returns>
                    A reference endpoints enumerator that contains all endpoints for the service reference.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceManager.GetReferenceGroupCollection">
      <summary>
                    Returns a collection of reference groups for a Windows Communication Foundation (WCF) service reference.
                </summary>
      <returns>
                    A reference group collection object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceManager.UnadviseWCFReferenceEvents(System.UInt32)">
      <summary>
                    Cancels registration for Windows Communication Foundation (WCF) service reference event notification.
                </summary>
      <param name="cookie">
                    A token representing the registration to be canceled.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceManagerFactory">
      <summary>
                    Provides an interface for creating <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceManager" /> instances.
                </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceManagerFactory.GetReferenceManager(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>
                    Returns a Windows Communication Foundation (WCF) reference manager for a project.
                </summary>
      <returns>
                    A WCF reference manager object.
                </returns>
      <param name="pHierProject">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> for the project.
                </param>
    </member>
    <member name="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceManagerFactory.IsReferenceManagerSupported(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy)">
      <summary>
                    Returns a value that determines whether a project supports Windows Communication Foundation (WCF) service references.
                </summary>
      <returns>
                    0 if WCF service references are not supported; otherwise any non-zero Integer.
                </returns>
      <param name="pHierProject">
                    The <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> for the project.
                </param>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.ProxySerializerType">
      <summary>
                    Provides an enumeration for use in selecting the serializer to use when you generate code.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.WCFReference.Interop.ProxySerializerType.PST_Auto">
      <summary>
                    Automatically choose the serializer.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.WCFReference.Interop.ProxySerializerType.PST_DataContractSerializer">
      <summary>
                    Generate the code based on the data contract.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.WCFReference.Interop.ProxySerializerType.PST_XmlSerializer">
      <summary>
                    Generate the code based on XML.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.ServiceReferenceType">
      <summary>
                    Provides an enumeration for differentiating between references to a Windows Communication Foundation (WCF) service and references to Web services (.asmx) that use ASP.NET.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.WCFReference.Interop.ServiceReferenceType.SRT_ASMXReference">
      <summary>
                    Display only references to Web services (.asmx) that use ASP.NET.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.WCFReference.Interop.ServiceReferenceType.SRT_WCFReference">
      <summary>
                    Display only WCF service references.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.StorageNameValidationState">
      <summary>
                    Provides an enumeration used to validate a new reference name and namespace in an <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProvider" /> object.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.WCFReference.Interop.StorageNameValidationState.SNVS_ExistingNamespace">
      <summary>
                    The namespace is already being used. If the project system supports two storages that share a single namespace, the <see cref="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProvider.IsValidNewReferenceName(System.String,System.String,System.SByte@,Microsoft.VisualStudio.WCFReference.Interop.StorageNameValidationState@,System.String@)" /> method will return true.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.WCFReference.Interop.StorageNameValidationState.SNVS_InvalidNamespace">
      <summary>
                    The namespace is invalid for the project language. The reference name is invalid in the file system. The <see cref="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProvider.IsValidNewReferenceName(System.String,System.String,System.SByte@,Microsoft.VisualStudio.WCFReference.Interop.StorageNameValidationState@,System.String@)" /> method will return false.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.WCFReference.Interop.StorageNameValidationState.SNVS_InvalidReferenceName">
      <summary>
                    The reference name is invalid in the file system. The <see cref="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProvider.IsValidNewReferenceName(System.String,System.String,System.SByte@,Microsoft.VisualStudio.WCFReference.Interop.StorageNameValidationState@,System.String@)" /> method will return false.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.WCFReference.Interop.StorageNameValidationState.SNVS_NewNamespace">
      <summary>
                    The namespace is valid. The <see cref="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProvider.IsValidNewReferenceName(System.String,System.String,System.SByte@,Microsoft.VisualStudio.WCFReference.Interop.StorageNameValidationState@,System.String@)" /> method will return true.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.WCFReference.Interop.StorageNameValidationState.SNVS_ReferenceNameConflicts">
      <summary>
                    A file (<paramref name="referenceName" />.svcmap) already exists in the directory. The <see cref="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProvider.IsValidNewReferenceName(System.String,System.String,System.SByte@,Microsoft.VisualStudio.WCFReference.Interop.StorageNameValidationState@,System.String@)" /> method will return false.
                </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.WCFReference.Interop.StorageNameValidationState.SNVS_UnsupportedNamespace">
      <summary>
                    The namespace is valid for the project language, but it is not supported in the current project system. The <see cref="M:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFMetadataStorageProvider.IsValidNewReferenceName(System.String,System.String,System.SByte@,Microsoft.VisualStudio.WCFReference.Interop.StorageNameValidationState@,System.String@)" /> method will return false.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.SVsAddWebReferenceDlg3">
      <summary>
                    A service that exposes the unmanaged <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsAddWebReferenceDlg3" /> interface.
                </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.WCFReference.Interop.SVsWCFReferenceManagerFactory">
      <summary>
                    A service that exposes the unmanaged <see cref="T:Microsoft.VisualStudio.WCFReference.Interop.IVsWCFReferenceManagerFactory" /> interface.
                </summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v2.0\Microsoft.VisualStudio.TextManager.Interop.8.0.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.TextManager.Interop.8.0</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__tagVSCOLORDATA">
      <summary>Specifies a type of color value: foreground, background, or line color. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__tagVSCOLORDATA.CD_FOREGROUND">
      <summary>Specifies the foreground color.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__tagVSCOLORDATA.CD_BACKGROUND">
      <summary>Specifies the background color.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__tagVSCOLORDATA.CD_LINECOLOR">
      <summary>Specifies the line color (used when the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiColorItem" /> interface is implemented on the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType" /> interface).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSEDITPROPID2">
      <summary>Specifies editor properties. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSEDITPROPID2.VSEDITPROPID_ViewGeneral_AccessibilityStateOverride">
      <summary>Override the default behavior of a text view accessibility implementation.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS2">
      <summary>Provides additional members for <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS2.FR_RegExprLineBreaks">
      <summary>Match line breaks by using regular expressions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS2.FR_BlockThread">
      <summary>Blocks the thread during a search.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS2.FR_DoNotUpdateUI">
      <summary>Do not update visual user interface elements. </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT2">
      <summary>Provides additional members for the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT2.VSFR_ReplaceIncompleteEOL">
      <summary>The user tried to replace only the CR of the LF of a line with a CR-LF ending.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT2.VSFR_CancelledBeforeReplacementsMade">
      <summary>The replace operation was cancelled before any replacement were made.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID2">
      <summary>Provides additional members for the VSFTPROPID enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID2.VSFTPROPID_IsFindInFilesForegroundOnly">
      <summary>VT_BOOL; the Find in Files operation is foreground only.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop._BufferCoordinatorMappingMode">
      <summary>Specifies the buffer coordinator mapping mode for contained languages.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._BufferCoordinatorMappingMode.BCMM_NORMAL">
      <summary>Indicates the default mode, in which the primary span equals the secondary span.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._BufferCoordinatorMappingMode.BCMM_EXTENDEDLEFT">
      <summary>Indicates that the primary span actually has an additional character at the beginning, but only the characters after that additional character are replicated to the secondary span. This mode is used to prevent deletion of text markers when one of the spans collapses into 0 characters, for example, when the user deletes everything in the span range. In the extended left mode, the primary span includes the '&gt;' from the opening &lt;script&gt;tag. Normally this mode should be changed only when there are no mappings. If the mapping mode is changed when the buffer coordinator already has span mappings, the result is unpredictable.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._BufferCoordinatorMappingMode.BCMM_EXTENDEDRIGHT">
      <summary>Indicates that the primary span actually has an additional character at the end, but only the characters before that additional character are replicated to the secondary span. This mode is used to prevent deletion of text markers when one of the spans collapses into 0 characters, for example, when the user deletes everything in the span range. In extended right mode, the primary span includes the '&lt;' from the closing &lt;/script&gt; tag. Normally this mode should be changed only when there are no mappings. If the mapping mode is changed when the buffer coordinator already has span mappings, the result is unpredictable.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._BufferCoordinatorMappingMode.BCMM_EXTENDED">
      <summary>A combination of <see cref="F:Microsoft.VisualStudio.TextManager.Interop._BufferCoordinatorMappingMode.BCMM_EXTENDEDLEFT" /> and <see cref="F:Microsoft.VisualStudio.TextManager.Interop._BufferCoordinatorMappingMode.BCMM_EXTENDEDRIGHT" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._BufferCoordinatorMappingMode.BCMM_ENTIREBUFFER">
      <summary>Indicates that the buffer is a single span, so no markers are required. This is a special mode; if you create a marker to track the entire buffer, the marker will be deleted when the user deletes the contents of the entire buffer, and all subsequent marker events are lost. There is no way to create a marker that is wider than the buffer. This mode supersedes any other bit flags set.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop._codewindowbehaviorflags">
      <summary>Represents the different behaviors of a code window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._codewindowbehaviorflags.CWB_DEFAULT">
      <summary>The default behavior (the window has a dropdown bar and can be split.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._codewindowbehaviorflags.CWB_DISABLEDROPDOWNBAR">
      <summary>The dropdown bar is disabled.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._codewindowbehaviorflags.CWB_DISABLESPLITTER">
      <summary>The window splitter is disabled.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop._EOLTYPE2"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._EOLTYPE2.eolUNI_NEL">
      <summary>UNICODE end of line. This value is also defined as <see cref="F:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE.MAX_EOLTYPES" /></summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._EOLTYPE2.MAX_EOLTYPES2">
      <summary>End of enum marker.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop._ExpansionFunctionType">
      <summary>Specifies the type of an expansion function. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._ExpansionFunctionType.eft_List">
      <summary>The expansion function represents a list of values. This list is typically displayed in an IntelliSense completion list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._ExpansionFunctionType.eft_Value">
      <summary>The expansion function represents a single value.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop._ExpansionToken">
      <summary>Specifies an expansion path typically associated with code snippet locations.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._ExpansionToken.ET_MyDocs">
      <summary>The user document folder where Visual Studio stores user-specific settings, for example, "C:\Documents and Settings\[username]\My Documents\Visual Studio 2005". Code snippets will appear under that path in "Code Snippets\[languageName]\My Code Snippets", where [languageName] is a language name such as "C#".</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._ExpansionToken.ET_InstallRoot">
      <summary>The installation root for Visual Studio, for example, "C:\Program Files\Microsoft Visual Studio 10".</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop._HighlightMatchingBraceFlags">
      <summary>Represents different options for highlighting matching braces.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._HighlightMatchingBraceFlags.HMB_SUPPRESS_STATUS_BAR_UPDATE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._HighlightMatchingBraceFlags.HMB_USERECTANGLEBRACES">
      <summary>Use rectangles for highlighting instead of bold.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop._VIEWFRAMETYPE">
      <summary>Specifies the view frame type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._VIEWFRAMETYPE.vftAny">
      <summary>The view frame type is not specified.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._VIEWFRAMETYPE.vftCodeWindow">
      <summary>The view frame is a code window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._VIEWFRAMETYPE.vftToolWindow">
      <summary>The view frame is a tool window.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.AtomicTextProviderFlags">
      <summary>Specifies options for the atomic text provider.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.AtomicTextProviderFlags.atpDefault">
      <summary>Provides no text attributes or glyphs.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.AtomicTextProviderFlags.atpGlyph">
      <summary>Draws a glyph.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.AtomicTextProviderFlags.atpTextAttributes">
      <summary>Provides text attributes.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.BufferCoordinatorReplicationDirection">
      <summary>Specifies the direction of buffer coordinator replication for contained languages.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BufferCoordinatorReplicationDirection.BCRD_PRIMARY_TO_SECONDARY">
      <summary>Specifies that the direction is from the primary to the secondary buffer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BufferCoordinatorReplicationDirection.BCRD_SECONDARY_TO_PRIMARY">
      <summary>Specifies that the direction is from the secondary to the primary buffer.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags2">
      <summary>Adds flags that indicate the type of changes made to text that triggered the commit gesture.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags2.CCG_REFORMAT">
      <summary>The text has been reformatted.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.CODEMEMBERTYPE">
      <summary>Used to specify the type of code members that are to be returned from a list of code members. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CODEMEMBERTYPE.CODEMEMBERTYPE_EVENTS">
      <summary>Specifies an event type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CODEMEMBERTYPE.CODEMEMBERTYPE_EVENT_HANDLERS">
      <summary>Specifies an event handler type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CODEMEMBERTYPE.CODEMEMBERTYPE_USER_FUNCTIONS">
      <summary>Specifies a user function type.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.COMMONLANGUAGEBLOCK">
      <summary>Represents the kind of code block (try,catch, finally) used in <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo2.QueryCommonLanguageBlock(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,System.UInt32,System.Int32@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COMMONLANGUAGEBLOCK.CLB_TRY_BLOCK">
      <summary>The try block.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COMMONLANGUAGEBLOCK.CLB_EXCEPTION_BLOCK">
      <summary>The exception block.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COMMONLANGUAGEBLOCK.CLB_FINAL_BLOCK">
      <summary>The finally block</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRefreshMode">
      <summary>Used to specify the recompilation mode for a contained language.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRefreshMode.CLRM_COMPILEFILE">
      <summary>Specifies to recompile the file - used when the primary editor replaces the entire buffer and wants a full recompile.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRefreshMode.CLRM_COMPILEPROJECT">
      <summary>Specifies to recompile the entire project, for example, when the compiler options have changed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRenameType">
      <summary>Used to specify the type of element is being renamed in a contained language.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRenameType.CLRT_CLASS">
      <summary>Specifies the rename type is a class.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRenameType.CLRT_CLASSMEMBER">
      <summary>Specifies the rename type is a class member.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRenameType.CLRT_NAMESPACE">
      <summary>Specifies the rename type is a namespace.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRenameType.CLRT_OTHER">
      <summary>Specifies the rename type is something other than a class, class member, or namespace.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.ExternalError">
      <summary>Used to create a new external error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ExternalError.bstrFileName">
      <summary>File name of the file containing the error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ExternalError.bstrText">
      <summary>Error text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ExternalError.fError">
      <summary>Nonzero for error, zero for warning.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ExternalError.iCol">
      <summary>Error column number.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ExternalError.iErrorID">
      <summary>Error ID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ExternalError.iLine">
      <summary>Error line number.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2">
      <summary>Specifies color table preferences to be used when painting text or markers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2.hBoldViewFont">
      <summary>Bold fonts that are used by text views.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2.hRegularViewFont">
      <summary>Regular fonts that are used by text views.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2.pColorTable">
      <summary>COM pointer to the color table for the colorable item provider indicated by *<paramref name="pguidColorService" />. This object is created as a result of this call if it has not been created already. This pointer is guaranteed to be valid if the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES" /> structure is an [in] parameter to a function. If you want to hold onto it beyond that you must AddRef (and later Release) it.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2.pguidColorCategory">
      <summary>GUID of the category to be used for the editor's color settings. The editor can handle separate categories for fonts and colors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2.pguidColorService">
      <summary>CLSID of an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsProvideColorableItems" /> implementor. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2.pguidFontCategory">
      <summary>GUID of the category to be used for the editor's font settings. The editor can handle separate categories for fonts and colors.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2">
      <summary>Provides frame settings that control whether scroll bars are provided for views.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2.fHorzScrollbar">
      <summary>Determines whether the frame should display a horizontal scroll bar for views.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2.fVertScrollbar">
      <summary>Determines whether the frame should display a vertical scroll bar for views.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS2"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS2.gldeUsePaintView">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_BEHAVIOR2">
      <summary>Provides additional members to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_BEHAVIOR" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_BEHAVIOR2.hrbClientDrawn">
      <summary>Client will draw the collapsed region banner, only valid for collapsed regions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_BEHAVIOR2.hrbNoUserControls">
      <summary>User controls (+/- glyph and banner dbl-click) will be disabled, only valid for collapsed regions.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IntellisenseHostFlags">
      <summary>Specifies IntelliSense host flags.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.IntellisenseHostFlags.IHF_READONLYCONTEXT">
      <summary>Indicates the context buffer is read-only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.IntellisenseHostFlags.IHF_NOSEPARATESUBJECT">
      <summary>Indicates that there is no subject and the context buffer contains the IntelliSense target. This flag implies that the <see cref="F:Microsoft.VisualStudio.TextManager.Interop.IntellisenseHostFlags.IHF_READONLYCONTEXT" /> is not specified.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.IntellisenseHostFlags.IHF_SINGLELINESUBJECT">
      <summary>Indicates the subject text must be displayed on a single line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.IntellisenseHostFlags.IHF_FORCECOMMITTOCONTEXT">
      <summary>Indicates that the context text can be committed to a read-only buffer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.IntellisenseHostFlags.IHF_OVERTYPE">
      <summary>Indicates that any editing (in the subject or context fields) should be done in the overwrite mode (otherwise, editing is done in the insert mode).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IPersistFileCheckSum">
      <summary>Calculates the check sum for the file representation of the associated text buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IPersistFileCheckSum.CalculateCheckSum(System.Guid@,System.UInt32,System.Byte[],System.UInt32@)">
      <summary>Calculates the check sum for the file representation of the associated text buffer using the specified algorithm.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidCheckSumAlgorithm">[in] GUID representing the algorithm to use</param>
      <param name="cbBufferSize">[in] Buffer size passed in</param>
      <param name="pbHash">[out] Buffer into which the checksum is written</param>
      <param name="pcbActualSize">[out] Buffer size required</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsAtomicTextProvider"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsAtomicTextProvider.DrawAtomGlyph(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Unused</param>
      <param name="hdc">[in] </param>
      <param name="pRect">[in] </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsAtomicTextProvider.GetAtomAttributes(System.UInt32,System.UInt32[])"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsAtomicTextProvider.GetAtomFlags(System.UInt32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwFlags">[out] </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsAtomicTextProvider.GetAtomGlyphWidth(System.Int32,System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPixSpaceWidth">[in] </param>
      <param name="pGlyphPix">[out] </param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsAutoOutliningClient"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsAutoOutliningClient.QueryWaitForAutoOutliningCallback(System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fWait">[out] </param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsBufferExtraFiles"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsBufferExtraFiles.GetQueryEditFilesDocuments(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.String@)"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsCanCoordinatorClipTextSpan"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCanCoordinatorClipTextSpan.ShouldClipSpanToValidSpanInSecondaryBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32@)">
      <param name="pPrimaryBuffer"></param>
      <param name="pSecondaryBuffer"></param>
      <param name="ptsTextSpanInPrimaryBuffer"></param>
      <param name="pfShouldClipTextSpan"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodePageSelection"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodePageSelection.ShowEncodingDialog(System.String,Microsoft.VisualStudio.TextManager.Interop.IVsUserData)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFileName">[in]</param>
      <param name="pUserData">[in]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowEx"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowEx.Initialize(System.UInt32,Microsoft.VisualStudio.Shell.Interop.VSUSERCONTEXTATTRIBUTEUSAGE,System.String,System.String,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.INITVIEW[])">
      <param name="grfCodeWindowBehaviorFlags"> </param>
      <param name="usageAuxUserContext"> </param>
      <param name="szNameAuxUserContext"> </param>
      <param name="szValueAuxUserContext"> </param>
      <param name="InitViewFlags"> </param>
      <param name="pInitView"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowEx.IsReadOnly"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer2">
      <summary>Extends a language services colorizer by allowing the environment to suspend and restart colorization.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer2.BeginColorization">
      <summary>Starts or resume colorization operations.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer2.EndColorization">
      <summary>Suspends or ends colorization operations.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsCommandWindowCompletion"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCommandWindowCompletion.SetCompletionContext(System.String,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Object)">
      <param name="pszFilePath"></param>
      <param name="pBuffer"></param>
      <param name="ptsCurStatement"></param>
      <param name="punkContext"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetBuilder"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetBuilder.GetBuilderCount(System.Int32@)"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetBuilder.GetBuilderDescriptionText(System.Int32,System.String@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iIndex">[in]</param>
      <param name="pbstrDescription">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetBuilder.GetBuilderDisplayText(System.Int32,System.String@,System.Int32[])">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iIndex">[in]</param>
      <param name="pbstrText"></param>
      <param name="piGlyph">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetBuilder.GetBuilderImageList(System.IntPtr@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="phImages">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetBuilder.GetBuilderItemColor(System.Int32,System.UInt32@,System.UInt32@)">
      <summary>Returns the foreground/background color.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iIndex">[in]</param>
      <param name="dwFGColor">[out]</param>
      <param name="dwBGColor">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetBuilder.OnBuilderCommit(System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iIndex">[in]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetEx">
      <summary>Allows a completion set to provide various kinds of customization.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetEx.CompareItems(System.String,System.String,System.Int32,System.Int32@)">
      <summary>Compares two completor items.</summary>
      <returns>If the method is successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code (in which case the default comparison is used).</returns>
      <param name="bstrSoFar">[in] First string to compare to.</param>
      <param name="bstrOther">[in] Second string to compare to first string.</param>
      <param name="lCharactersToCompare">[in] Number of characters to compare.</param>
      <param name="pLResult"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetEx.DecreaseFilterLevel(System.Int32)">
      <summary>Show in the completion list all common items available.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iSelectedItem">[in] The item of interest.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetEx.GetCompletionItemColor(System.Int32,System.UInt32@,System.UInt32@)">
      <summary>Returns the foreground and background colors for a selected item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iIndex">[in] <see cref="T:Microsoft.VisualStudio.Package.CompletionSet" /> item of interest.</param>
      <param name="dwFGColor">[out] Foreground color. For values, see COLORREF.</param>
      <param name="dwBGColor">[out] Background color. For values, see COLORREF.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetEx.GetFilterLevel(System.Int32@)">
      <summary>Returns the current filter level.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If there is no filter, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />; otherwise, returns an error code.</returns>
      <param name="iFilterLevel">[out] Returns the current filter level.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetEx.IncreaseFilterLevel(System.Int32)">
      <summary>Show in the completion list the members of the specified type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iSelectedItem">[in] The index of the item of interest.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSetEx.OnCommitComplete"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedCode">
      <summary>Implemented by a language to support buffer span mapping.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedCode.EnumOriginalCodeBlocks(Microsoft.VisualStudio.TextManager.Interop.IVsEnumCodeBlocks@)">
      <summary>Returns an enumerator of original code block mappings.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="ppEnum">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumCodeBlocks" /> object that contains a list of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpanAndCookie" /> objects representing all embedded code blocks in the original document.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedCode.HostSpansUpdated">
      <summary>Notifies the provider of the code spans that the buffer coordinator has been updated with new spans.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguage">
      <summary>Provides simplistic contained language service features.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguage.GetColorizer(Microsoft.VisualStudio.TextManager.Interop.IVsColorizer@)">
      <summary>Returns a colorizer object for the language.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="ppColorizer">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer" /> object representing the colorizer to use for the contained language.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguage.GetLanguageServiceID(System.Guid@)">
      <summary>Returns the GUID for the full language service of the contained language.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pguidLangService">[out] Returns the GUID of the language service of the contained language.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguage.GetTextViewFilter(Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget,Microsoft.VisualStudio.TextManager.Interop.IVsTextViewFilter@)">
      <summary>Returns a text view filter to handle delegated text view filtering responsibility.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pISenseHost">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost" /> object representing the IntelliSense host.</param>
      <param name="pNextCmdTarget">[in] An <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> object representing the command target to pass any unhandled commands to.</param>
      <param name="pTextViewFilter">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewFilter" /> object representing the text view filter that is used by the contained language service to receive any commands passed to the text view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguage.Refresh(System.UInt32)">
      <summary>Recompiles the language file, or the entire project.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="dwRefreshMode">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRefreshMode" /> enumeration indicating what should be recompiled (the file or the whole project).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguage.SetBufferCoordinator(Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator)">
      <summary>Allows for a change in buffer coordinators on-the-fly.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pBC">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator" /> object representing the new buffer coordinator.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguage.SetHost(Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost)">
      <summary>Sets the language host for the secondary language.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pHost">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost" /> object representing the new language host. Can be a null value (see Remarks for details).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguage.WaitForReadyState">
      <summary>Called to ensure the contained language is ready.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageCodeSupport">
      <summary>Provides support for code navigation, event generation, and the like.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageCodeSupport.CreateUniqueEventName(System.String,System.String,System.String,System.String@)">
      <summary>Creates a unique event handler name, given the class context, name of the object instance, and the name of event.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pszClassName">[in] Name of the class.</param>
      <param name="pszObjectName">[in] Name of the object.</param>
      <param name="pszNameOfEvent">[in] Name of the event.</param>
      <param name="pbstrEventHandlerName">[out] Returns the new name of an event handler.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageCodeSupport.EnsureEventHandler(System.String,System.String,System.String,System.String,System.UInt32,System.String@,System.String@,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Creates an event handler given the class context, name of the object instance, name of the event, and the (unique) name of event handler, if none exists already.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pszClassName">[in] Name of the class.</param>
      <param name="pszObjectTypeName">[in] Name of the object.</param>
      <param name="pszNameOfEvent">[in] Name of the event.</param>
      <param name="pszEventHandlerName">[in] Name of the event handler.</param>
      <param name="itemidInsertionPoint">[in] The file or buffer where the designer would like to put a new method. This is a unique identifier or it can be one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
      <param name="pbstrUniqueMemberID">[out] Returns a unique member ID for the event handler.</param>
      <param name="pbstrEventBody">[out] Returns the returned event handler body.</param>
      <param name="pSpanInsertionPoint">[out] Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the location in the source code where the event handler was inserted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageCodeSupport.GetBaseClassName(System.String,System.String@)">
      <summary>Returns the base class name for the provided class.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pszClassName">[in] The full name of the class, for example, Namespace1.Namespace2.Class1.</param>
      <param name="pbstrBaseClassName">[out] The full name of the base class, for example, System.Web.UI.Page.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageCodeSupport.GetCompatibleEventHandlers(System.String,System.String,System.String,System.Int32@,System.IntPtr@,System.IntPtr@)">
      <summary>Returns a collection of existing members that match the signature of the provided event description.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pszClassName">[in] The full name of the class from which to get the event handlers.</param>
      <param name="pszObjectTypeName">[in] The object type name for the event.</param>
      <param name="pszNameOfEvent">[in] The name of the event for which to get the event handlers.</param>
      <param name="pcMembers">[out] Returns the number of members in the <paramref name="ppbstrEventHandlerNames" /> and <paramref name="ppbstrMemberIDs" /> arrays.</param>
      <param name="ppbstrEventHandlerNames">[out] Returns an array of event handler names.</param>
      <param name="ppbstrMemberIDs">[out] Returns an array of unique member IDs for each event handler.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageCodeSupport.GetEventHandlerMemberID(System.String,System.String,System.String,System.String,System.String@)">
      <summary>Returns the unique member id of an event handler matching the provided description if exists.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If the event handler does not exist, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />. Otherwise, returns an error code.</returns>
      <param name="pszClassName">[in] The full class name that contains the event handler.</param>
      <param name="pszObjectTypeName">[in] The object type of the event.</param>
      <param name="pszNameOfEvent">[in] The name of the event.</param>
      <param name="pszEventHandlerName">[in] The name of the event handler.</param>
      <param name="pbstrUniqueMemberID">[out] Returns the unique member ID for the event handler.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageCodeSupport.GetMemberNavigationPoint(System.String,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.UInt32@)">
      <summary>Obtains the position (for example the starting character index, starting line, ending character index, ending line, and item ID of file) in the secondary buffer coordinates or partial class file buffer coordinates, of a given a class member, that could be cached and later used to navigate to that member.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pszClassName">[in] Name of the class.</param>
      <param name="pszUniqueMemberID">[in] Unique member identifier (as might be returned from the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageCodeSupport.GetEventHandlerMemberID(System.String,System.String,System.String,System.String,System.String@)" /> method).</param>
      <param name="pSpanNavPoint">[in, out] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that is filled in with the position in the secondary buffer of the specified member.</param>
      <param name="pItemID">[out] Returns the item ID of the parent document. This is a unique identifier or one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageCodeSupport.GetMembers(System.String,System.UInt32,System.Int32@,System.IntPtr@,System.IntPtr@)">
      <summary>Returns a collection of members corresponding to the specified flags.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pszClassName">[in] Class name.</param>
      <param name="dwFlags">[in] A combination of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CODEMEMBERTYPE" /> enumeration specifying the types of members to retrieve.</param>
      <param name="pcMembers">[out] Returns the number of members specified in the returned <paramref name="ppbstrDisplayNames" /> and <paramref name="ppbstrMemberIDs" /> arrays.</param>
      <param name="ppbstrDisplayNames">[out] Returns a list of display names for each member.</param>
      <param name="ppbstrMemberIDs">[out] Returns a list of unique member identifier strings for each member.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageCodeSupport.IsValidID(System.String,System.Boolean@)">
      <summary>Examines the provided ID to see if it is a valid identifier for the contained language.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="bstrID">[in] An identifier of the contained language.</param>
      <param name="pfIsValidID">[out] Returns nonzero (TRUE) indicating the ID is valid; otherwise, returns zero (FALSE). (C++ only: this value is returned as a VARIANT_BOOL object.)</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageCodeSupport.OnRenamed(Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRenameType,System.String,System.String)">
      <summary>Called from a containing <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost" /> object indicating that a rename of a specified type was initiated.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="clrt">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRenameType" /> enumeration specifying what is being renamed.</param>
      <param name="bstrOldID">[in] The old name.</param>
      <param name="bstrNewID">[in] The new name.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageColorizer">
      <summary>Provides colorization for line fragments.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageColorizer.ColorizeLineFragment(System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.UInt32@,System.Int32@)"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageFactory">
      <summary>Provides creation of contained languages.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageFactory.GetLanguage(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator,Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguage@)">
      <summary>Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguage" /> object that a primary language can use to delegate certain responsibilities for managing a contained language.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pHierarchy">[in] An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object representing the hierarchy to which this object belongs.</param>
      <param name="itemid">[in] A unique identifier for a source file or one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" />, or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
      <param name="pBufferCoordinator">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator" /> object representing the buffer coordinator to associate with the contained language.</param>
      <param name="ppLanguage">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguage" /> object representing the contained language for the specified hierarchy item.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost">
      <summary>Represents a host for contained languages.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.Advise(Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHostEvents,System.UInt32@)">
      <summary>Enables a client to receive messages from the source text.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pHost">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHostEvents" /> object representing the entity that is requesting notification of contained language events generated by the editor.</param>
      <param name="pvsCookie">[out] Returns a unique identifier representing the client. This value can later be used in a call to the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.Unadvise(System.UInt32)" /> method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.CanReformatCode(System.Int32@)">
      <summary>Determines if code reformatting is currently allowed.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pfCanReformat">[out] Returns nonzero (TRUE) if the code can be reformatted; otherwise, returns zero (FALSE).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.EnsureSecondaryBufferReady"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.EnsureSpanVisible(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Ensures that span in the primary buffer is visible.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="tsPrimary">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the span of text to make visible.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.GetErrorProviderInformation(System.String@,System.Guid@)">
      <summary>Retrieves information about the error provider.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pbstrTaskProviderName">[out] Name of the task provider.</param>
      <param name="pguidTaskProviderGuid">[out] A GUID identifying the task provider.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.GetLineIndent(System.Int32,System.String@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Provides information on the base indent level and indent settings.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="lLineNumber">[in] The line number for the line of text in question. This is the line number in the secondary buffer (that is, it is typically relative to the first line of code).</param>
      <param name="pbstrIndentString">[out] Returns the exact indent string. This string is to be inserted at the beginning of each line that is reformatted and represents the base level of indentation. See Remarks for more information.</param>
      <param name="plParentIndentLevel">[out] Returns the indent level in spaces. This value should be ignored if the <paramref name="pbstrIndentString" /> parameter returns a non-empty string.</param>
      <param name="plIndentSize">[out] Size of the indent.</param>
      <param name="pfTabs">[out] Returns nonzero (TRUE) if tabs are to be used for line indents; otherwise, returns zero (FALSE), use spaces instead.</param>
      <param name="plTabSize">[out] Size of the tab indent, if present. If the <paramref name="pfTabs" /> parameter returns zero (FALSE), this value is unspecified.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.GetNearestVisibleToken(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the language token that is nearest the requested line.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="tsSecondaryToken">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the position and extent of the token to search near. This position is based on the secondary buffer.</param>
      <param name="ptsPrimaryToken">[out] Returns a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing the position and extent of the token that is nearest the specified token. The position is based on the primary buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.GetVSHierarchy(Microsoft.VisualStudio.Shell.Interop.IVsHierarchy@)">
      <summary>Returns the hierarchy that contains the file displayed in the primary buffer.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="ppVsHierarchy">[out] Returns an <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsHierarchy" /> object representing the hierarchy that owns the file displayed in the primary buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.InsertControl(System.String,System.String)">
      <summary>Sends a request to insert markup.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pwcFullType">[in] The fully qualified type name of the object for which the markup is to be inserted. For example, "System.Web.UI.Page".</param>
      <param name="pwcID">[in] A string containing the ID of the object. See Remarks for an example.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.InsertImportsDirective(System.UInt16@)">
      <summary>Inserts a markup tag that imports the specified namespace.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="__MIDL_0011"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.InsertReference(System.UInt16@)">
      <summary>Adds an assembly that is currently in the global assembly cache (GAC).</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="__MIDL_0010"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.OnContainedLanguageEditorSettingsChange">
      <summary>Called to notify the host when the contained language changes its Fonts and Colors settings.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.OnRenamed(Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRenameType,System.String,System.String)">
      <summary>Called to notify the editor that a name has been changed.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="clrt">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ContainedLanguageRenameType" /> enumeration indicating what type of name was changed.</param>
      <param name="bstrOldID">[in] The fully qualified old name. For example, "MyNamespace.MyClass.MyMethod".</param>
      <param name="bstrNewID">[in] The fully qualified new name. For example, "MyNamespace.MyClass.MyNewMethod".</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.QueryEditFile">
      <summary>Determines if the secondary buffer can be modified.</summary>
      <returns>If the buffer can be modified, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns BUFFER_E_SCC_READONLY.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.Unadvise(System.UInt32)">
      <summary>Called by a client that is no longer interested in receiving notifications from the editor.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="vsCookie">[in] The unique value that was returned from the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHost.Advise(Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHostEvents,System.UInt32@)" /> method.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHostEvents">
      <summary>Receives view change notifications from a contained language host.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageHostEvents.OnViewChange(System.Int32)">
      <summary>Called when the view has changed.</summary>
      <returns>Should always return <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> (the return value is typically ignored by the contained language host).</returns>
      <param name="fTextView">[in] Nonzero (TRUE) if the view is text-based; otherwise, zero (FALSE), the view is graphical (typically a designer window).</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageProjectNameProvider"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageProjectNameProvider.GetProjectName(System.UInt32,System.String@)">
      <param name="itemid"></param>
      <param name="pbstrProjectName"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageStaticEventBinding">
      <summary>Provides support for static event generation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageStaticEventBinding.AddStaticEventBinding(System.String,System.String,System.String,System.String)">
      <summary>Binds a static event to the specified member.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pszClassName">[in] The fully qualified name of the class the member resides in.</param>
      <param name="pszUniqueMemberID">[in] The unique ID of the member that is to handle the event.</param>
      <param name="pszObjectName">[in] The name of the object that contains the event.</param>
      <param name="pszNameOfEvent">[in] The name of the event.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageStaticEventBinding.EnsureStaticEventHandler(System.String,System.String,System.String,System.String,System.String,System.UInt32,System.String@,System.String@,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Creates an event handler given the class context, name of the object type and instance, the name of the event and the (unique) name of the event handler.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pszClassName">[in] The fully qualified name of the class.</param>
      <param name="pszObjectTypeName">[in] The fully qualified name of the object type.</param>
      <param name="pszObjectName">[in] The name of the object.</param>
      <param name="pszNameOfEvent">[in] The name of the event.</param>
      <param name="pszEventHandlerName">[in] The name of the event handler.</param>
      <param name="itemidInsertionPoint">[in] The file to insert into. This is a unique hierarchy identifier or one of the following values: <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_NIL" />, <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_ROOT" /> or <see cref="F:Microsoft.VisualStudio.VSConstants.VSITEMID_SELECTION" />.</param>
      <param name="pbstrUniqueMemberID">[out] Returns a string containing the member ID of the event. Returns a null value if the event handler already exists.</param>
      <param name="pbstrEventBody">[out] Returns a string containing the body of the event handler. Returns a null value if the event handler already exists.</param>
      <param name="pSpanInsertionPoint">[in, out] Fills in a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object with the position where the event handler body was inserted in the primary buffer. This insertion point is in the file specified by the <paramref name="itemidInsertionPoint" /> parameter. This is valid only if the event handler did not already exist.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageStaticEventBinding.GetStaticEventBindingsForObject(System.String,System.String,System.Int32@,System.IntPtr@,System.IntPtr@,System.IntPtr@)">
      <summary>Returns a collection of events that are statically handled.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pszClassName">[in] The fully qualified name of the class.</param>
      <param name="pszObjectName">[in] The fully qualified name of the object that contains the event.</param>
      <param name="pcMembers">[out] Returns the number of event handlers specified in the lists returned in the <paramref name="ppbstrEventNames" />, <paramref name="ppbstrDisplayNames" />, and <paramref name="ppbstrMemberIDs" /> parameters.</param>
      <param name="ppbstrEventNames">[out] Returns a list containing the event handler names.</param>
      <param name="ppbstrDisplayNames">[out] Returns a list containing the display names for the event handlers.</param>
      <param name="ppbstrMemberIDs">[out] Returns a list containing the event member IDs.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsContainedLanguageStaticEventBinding.RemoveStaticEventBinding(System.String,System.String,System.String,System.String)">
      <summary>Removes the event binding from the specified member.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pszClassName">[in] The fully qualified name of the class the member resides in.</param>
      <param name="pszUniqueMemberID">[in] The unique ID of the member that handles the event.</param>
      <param name="pszObjectName">[in] The name of the object that contains the event.</param>
      <param name="pszNameOfEvent">[in] The name of the event.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClientEx">
      <summary>Provides additional drop-down bar client functionality.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClientEx.GetEntryIndent(System.Int32,System.Int32,System.UInt32@)">
      <summary>Returns the indent level for a particular drop-down bar/Window combo item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combo.</param>
      <param name="iIndex">[in] Index of the item of interest.</param>
      <param name="pIndent">[out] Indent level of <paramref name="iIndex" /> item.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBufferCoordinatorSpans">
      <summary>Represents a list of text span mappings between two buffers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBufferCoordinatorSpans.Clone(Microsoft.VisualStudio.TextManager.Interop.IVsEnumBufferCoordinatorSpans@)">
      <summary>Returns a copy of the current enumeration as a separate object.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="ppEnum">[out] Returns a copy of this enumeration as a separate object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBufferCoordinatorSpans.Next(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.NewSpanMapping[],System.UInt32@)">
      <summary>Returns the next set of elements from the enumeration.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if fewer than the requested number of elements could be returned. Otherwise, returns an error code.</returns>
      <param name="celt">[in] The number of elements to retrieve. Also specifies the maximum size of the <paramref name="rgelt" /> array.</param>
      <param name="rgelt">[in, out] An array of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewSpanMapping" /> objects to be filled in.</param>
      <param name="pceltFetched">[out] Returns the number of elements actually returned in the <paramref name="rgelt" /> array.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBufferCoordinatorSpans.Reset">
      <summary>Resets the enumeration to the first element.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBufferCoordinatorSpans.Skip(System.UInt32)">
      <summary>Skips over the specified number of elements.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if the <paramref name="celt" /> parameter is greater than the number of remaining elements. Otherwise, returns an error code.</returns>
      <param name="celt">[in] Number of elements to skip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumCodeBlocks">
      <summary>Represents a list of spans of code blocks.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumCodeBlocks.Clone(Microsoft.VisualStudio.TextManager.Interop.IVsEnumCodeBlocks@)">
      <summary>Returns a copy of the current enumeration as a separate object.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="ppEnum">[out] Returns a copy of this enumeration as a separate object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumCodeBlocks.Next(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpanAndCookie[],System.UInt32@)">
      <summary>Returns the next set of elements from the enumeration.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if fewer than the requested number of elements could be returned. Otherwise, returns an error code.</returns>
      <param name="celt">[in] The number of elements to retrieve. Also specifies the maximum size of the <paramref name="rgelt" /> array.</param>
      <param name="rgelt">[in, out] An array of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpanAndCookie" /> objects to be filled in.</param>
      <param name="pceltFetched">[out] Returns the number of elements actually returned in the <paramref name="rgelt" /> array.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumCodeBlocks.Reset">
      <summary>Resets the enumeration to the first element.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumCodeBlocks.Skip(System.UInt32)">
      <summary>Skips over the specified number of elements.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if the <paramref name="celt" /> parameter is greater than the number of remaining elements. Otherwise, returns an error code.</returns>
      <param name="celt">[in] Number of elements to skip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumExternalErrors">
      <summary>Represents a list of external errors.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumExternalErrors.Clone(Microsoft.VisualStudio.TextManager.Interop.IVsEnumExternalErrors@)">
      <summary>Returns a copy of the current enumeration as a separate object.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="ppErrors">[out] Returns a copy of this enumeration as a separate object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumExternalErrors.Next(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.ExternalError[],System.UInt32@)">
      <summary>Returns the next set of elements from the enumeration.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if fewer than the requested number of elements could be returned. Otherwise, returns an error code.</returns>
      <param name="celt">[in] The number of elements to retrieve. Also specifies the maximum size of the <paramref name="rgelt" /> array.</param>
      <param name="rgelt">[in, out] An array of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ExternalError" /> objects to be filled in.</param>
      <param name="pceltFetched">[out] Returns the number of elements actually returned in the <paramref name="rgelt" /> array.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumExternalErrors.Reset">
      <summary>Resets the enumeration to the first element.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumExternalErrors.Skip(System.UInt32)">
      <summary>Skips over the specified number of elements.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. Returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> if the <paramref name="celt" /> parameter is greater than the number of remaining elements. Otherwise, returns an error code.</returns>
      <param name="celts">[in] Number of elements to skip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansion">
      <summary>Provides a way to insert code snippets into a text buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansion.InsertExpansion(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient,System.Guid,Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession@)"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansion.InsertNamedExpansion(System.String,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient,System.Guid,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession@)"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansion.InsertSpecificExpansion(MSXML.IXMLDOMNode,Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient,System.Guid,System.String,Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession@)"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient">
      <summary>Allows a VSPackage to participate in the code snippet insertion process.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient.EndExpansion">
      <summary>Called to signal the end of the code snippet insertion and editing phase.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient.FormatSpan(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient.GetExpansionFunction(MSXML.IXMLDOMNode,System.String,Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction@)">
      <summary>Called to obtain an expansion function for the specified code snippet.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="xmlFunctionNode">[in] An IXMLDOMNode object that contains the code snippet expansion function definition. </param>
      <param name="bstrFieldName">[in] A string containing the name of the default field (the code snippet field that is first highlighted after the code snippet is inserted).</param>
      <param name="pFunc">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction" /> object representing the expansion function to use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient.IsValidKind(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.String,System.Int32@)"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient.IsValidType(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.String[],System.Int32,System.Int32@)"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient.OnAfterInsertion(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession)">
      <summary>Called after the code snippet has been inserted and formatted.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSession">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession" /> object containing information about the code snippet that has just been inserted. This can be a null value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient.OnBeforeInsertion(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession)">
      <summary>Called before the code snippet has been inserted.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSession">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession" /> object containing information about the code snippet that is about to be inserted. This can be a null value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient.OnItemChosen(System.String,System.String)">
      <summary>Called when a code snippet name has been selected from an IntelliSense menu.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszTitle">[in] A string containing the full name of the code snippet.</param>
      <param name="pszPath">[in] A string containing the full path to the snippet file.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient.PositionCaretForEditing(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionEnumeration">
      <summary>Represents a list of code snippets for a particular language service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionEnumeration.GetCount(System.UInt32@)">
      <summary>Returns the number of objects represented in this enumeration.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCount">[out] Returns the number of objects.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionEnumeration.Next(System.UInt32,System.IntPtr[],System.UInt32@)">
      <summary>Returns the specified number of objects from the enumeration.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The number of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VsExpansion" /> objects to retrieve.</param>
      <param name="rgelt">[out] An array that is filled in with the requested <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VsExpansion" /> objects.</param>
      <param name="pceltFetched">[out] The actual number of objects retrieved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionEnumeration.Reset">
      <summary>Resets the enumeration to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionEvents">
      <summary>Represents a connection point that receives event notifications having to do with code snippets.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionEvents.OnAfterSnippetsKeyBindingChange(System.UInt32,System.UInt32,System.Int32)">
      <summary>Called when there is a change in the key binding that is associated with inserting code snippets.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCmdGuid">[in] The GUID of the command group being bound to.</param>
      <param name="dwCmdId">[in] The ID of the command in the command group being bound to.</param>
      <param name="fBound">[in] Non-zero (TRUE) if the command is being bound; otherwise, zero (FALSE) if the binding is being removed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionEvents.OnAfterSnippetsUpdate">
      <summary>Called whenever a folder that contains snippets has been updated and the snippets from that folder have been read in.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction">
      <summary>Represents an expansion function in a code snippet.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction.FieldChanged(System.String,System.Int32@)">
      <summary>Called when another field in the inserted code snippet is changed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrField">[in] Name of the field that changed.</param>
      <param name="fRequeryFunction">[out] Returns non-zero (true) if this expansion function's value has changed and must be re-obtained; otherwise, returns zero (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction.GetCurrentValue(System.String@,System.Int32@)">
      <summary>Returns the current value of the expansion function.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrValue">[out] Returns a string that contains the value of the expansion function.</param>
      <param name="fHasCurrentValue">[out] Returns non-zero (true) if the expansion function has a current value; otherwise, returns zero (true). See Remarks.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction.GetDefaultValue(System.String@,System.Int32@)">
      <summary>Returns the default string to be inserted before any template is edited.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrValue">[out] Returns a string that contains the default value.</param>
      <param name="fHasDefaultValue">[out] Returns non-zero (true) if the expansion function has a default value; otherwise, returns zero (false). See Remarks.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction.GetFunctionType(System.UInt32@)">
      <summary>Returns the type of this expansion function (value or list of values).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pFuncType">[out] Returns a value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop._ExpansionFunctionType" /> enumeration to identify the  expansion function.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction.GetListCount(System.Int32@)">
      <summary>Returns the number of items in the list of values associated with the expansion function.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCount">[out] Returns the number of values that represent this expansion function.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction.GetListText(System.Int32,System.String@)">
      <summary>Returns the specified value from a list of values associated with the expansion function.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iIndex">[in] The index of the value to retrieve.</param>
      <param name="pbstrText"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionFunction.ReleaseFunction">
      <summary>Called when the expansion function is no longer needed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionIntellisenseHost">
      <summary>Provides Insert Expansion support.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionIntellisenseHost.GetCurrentLevel(System.Int32@)">
      <summary>Returns the current position.</summary>
      <returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
      <param name="pLevel">[out] The current position.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionIntellisenseHost.GetSelection(System.Int32@,System.Int32@)">
      <summary>Retrieves the starting and ending positions of the current expansion selection.</summary>
      <returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
      <param name="iStart">[out] The start position of the expansion text span.</param>
      <param name="iEnd">[out] The end position of the expansion text span.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionIntellisenseHost.GetText(System.String@)">
      <summary>Returns the text of the expansion text span.</summary>
      <returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
      <param name="bstrText">[out] String containing the expansion text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionIntellisenseHost.GetTextLen(System.Int32@)">
      <summary>Returns the length of the expansion text span.</summary>
      <returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
      <param name="iLen">[out] The length of the expansion text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionIntellisenseHost.SetSelection(System.Int32,System.Int32)">
      <summary>Sets the starting and ending position of an expansion text span selection.</summary>
      <returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
      <param name="iStart">[in] The start position of the expansion text span.</param>
      <param name="iEnd">[in] The end position of the expansion text span.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionIntellisenseHost.SetText(System.String,System.Int32)">
      <summary>Replaces the text span within an expansion selection with new text.</summary>
      <returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
      <param name="bstrText"></param>
      <param name="fReplaceAll"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionManager">
      <summary>Represents the expansion manager, which knows how to find and display lists of code snippets for a particular coding language.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionManager.EnumerateExpansions(System.Guid,System.Int32,System.String[],System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsExpansionEnumeration@)">
      <summary>Retrieves a list of code snippets for the specified coding language.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidLang">[in] The GUID of the coding language (typically, this is the language service GUID).</param>
      <param name="fShortCutOnly">[in] Non-zero (TRUE) if to retrieve only the shortcut name for each snippet; otherwise, zero (FALSE) to retrieve all information.</param>
      <param name="bstrTypes">[in] An array strings specifying snippet types to obtain. This can be a null value if <paramref name="iCountTypes" /> is 0. See Remarks.</param>
      <param name="iCountTypes">[in] The number of types specified in the <paramref name="bstrTypes" /> array. If this is 0, all types are returned.</param>
      <param name="fIncludeNULLType">[in] Non-zero (TRUE) if to include code snippets with "empty" types in the <paramref name="bstrTypes" /> list (this parameter is ignored if <paramref name="iCountTypes" /> is 0).</param>
      <param name="fIncludeDuplicates">[in] Non-zero (TRUE) if to include duplicate snippets; otherwise, duplicates are left out.</param>
      <param name="pEnum">[out] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionEnumeration" /> object that contains the desired list of snippets.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionManager.GetExpansionByShortcut(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient,System.Guid,System.String,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32,System.String@,System.String@)"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionManager.GetSnippetShortCutKeybindingState(System.Int32@)">
      <summary>Determines if a key has been bound to the "Invoke Snippet From Shortcut" command.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fBound">[out] Returns non-zero (TRUE) if a key has been bound; otherwise, returns zero (FALSE).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionManager.GetTokenPath(System.UInt32,System.String@)">
      <summary>Returns the path to the specified location.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="token">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop._ExpansionToken" /> enumeration.</param>
      <param name="pbstrPath">[out] Returns a string containing the full path to the specified location.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionManager.InvokeInsertionUI(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient,System.Guid,System.String[],System.Int32,System.Int32,System.String[],System.Int32,System.Int32,System.String,System.String)">
      <summary>Shows an IntelliSense list of code snippets that can be inserted into the source through the provided <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient" /> object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pView">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view in which to present the list.</param>
      <param name="pClient">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient" /> object representing the expansion client that is used to complete the insertion of the code snippet.</param>
      <param name="guidLang">[in] The GUID of the coding language (typically, this is the language service GUID).</param>
      <param name="bstrTypes">[in] An array strings specifying snippet types to display. This can be a null value if <paramref name="iCountTypes" /> is 0. See Remarks.</param>
      <param name="iCountTypes">[in] The number of types specified in the <paramref name="bstrTypes" /> array. If this is 0, all types are displayed.</param>
      <param name="fIncludeNULLType">[in] Non-zero (TRUE) if to include code snippets with "empty" types in the <paramref name="bstrTypes" /> list (this parameter is ignored if <paramref name="iCountTypes" /> is 0).</param>
      <param name="bstrKinds">[in] An array of strings specifying the snippet kinds to display. This can be a null value if <paramref name="iCountKinds" /> is 0. See Remarks.</param>
      <param name="iCountKinds">[in] The number of kinds specified in the <paramref name="bstrKinds" /> array. If this is 0, all kinds are displayed.</param>
      <param name="fIncludeNULLKind">[in] Non-zero (TRUE) if to include code snippets with "empty" kinds in the <paramref name="bstrKinds" /> list (this parameter is ignored if <paramref name="iCountKinds" /> is 0).</param>
      <param name="bstrPrefixText">[in] A string containing the text to show in the prompt.</param>
      <param name="bstrCompletionChar">[in] A character that, when typed, inserts the currently selected snippet and closes the UI. If this is a null value or an empty string, typing the Enter key is the only way to insert a selected snippet.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession">
      <summary>Represents the state of a newly inserted code snippet that is being edited by the user.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession.EndCurrentExpansion(System.Int32)">
      <summary>Called to indicate the end of the current code snippet insertion process.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fLeaveCaret">[in] Non-zero (TRUE) if to leave the edit caret where it is; otherwise, zero (FALSE) if the edit caret should be positioned according to the code snippet template.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession.GetDeclarationNode(System.String,MSXML.IXMLDOMNode@)">
      <summary>Retrieves the declaration node for the specified field.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrNode">[in] A string containing the name of the field. This can be a null value. See Remarks.</param>
      <param name="pNode">[out] Returns an IXMLDOMNode object representing the field's declaration node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession.GetEndSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession.GetFieldSpan(System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession.GetFieldValue(System.String,System.String@)">
      <summary>Retrieves the value of the specified field.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrFieldName">[in] A string containing the name of the field.</param>
      <param name="pbstrValue">[out] Returns a string containing the value of the field.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession.GetHeaderNode(System.String,MSXML.IXMLDOMNode@)">
      <summary>Returns a node from the code snippet &lt;Header&gt; tag.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrNode">[in] A string containing the name of the XML tag to look for. This can be a null value. See Remarks.</param>
      <param name="pNode">[out] Returns an appendChild object representing the specified tag.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession.GetSnippetNode(System.String,MSXML.IXMLDOMNode@)">
      <summary>Returns a node from the code snippet &lt;Snippet&gt; tag.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrNode">[in] A string containing the name of the XML tag to look for. This can be a null value. See Remarks.</param>
      <param name="pNode">[out] Returns an appendChild object representing the specified tag.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession.GetSnippetSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession.GoToNextExpansionField(System.Int32)">
      <summary>Move the highlight to the next field in order.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fCommitIfLast">[in] Non-zero (TRUE) if to commit all changes to the code snippet if moving off the last field; otherwise, zero (FALSE) if to move to the first field.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession.GoToPreviousExpansionField">
      <summary>Move the highlight to the previous field in order.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession.SetEndSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan)"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionSession.SetFieldDefault(System.String,System.String)">
      <summary>Sets the default value for the specified field.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrFieldName">[in] A string containing the name of the field.</param>
      <param name="bstrNewValue">[in] A string containing the default value to use.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsExternalCompletionSet">
      <summary>Enhances IntelliSense completion set functionality for use in a non-text-view editor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExternalCompletionSet.SetIntellisenseHost(Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost)">
      <summary>Set the IntelliSense host that controls the display of the completion list.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pHost">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost" /> object representing the IntelliSense host that displays the completion list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsExternalCompletionSet.UpdateCompSet">
      <summary>Updates the completion set.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsFileExtensionMappingEvents"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFileExtensionMappingEvents.OnFileExtensionsReset"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsFindCancelDialog">
      <summary>Use the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsFindCancelDialog" /> interface to launch a modeless dialog on the background thread that will allow a user to cancel a lengthy background find or find and replace operation.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindCancelDialog.CloseDialog">
      <summary>Dismisses a modeless background dialog opened with <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindCancelDialog.LaunchDialog" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindCancelDialog.LaunchDialog">
      <summary>Launches a modeless dialog on the background thread with which the user can cancel a lengthy find or replace operation</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. Repeated calls to <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindCancelDialog.LaunchDialog" /> close and re-launch the dialog rather than generating an error.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindCancelDialog.QueryDialog(System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfCancel">[out] True if the user has clicked cancel, otherwise false.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget2">
      <summary>Implements Find and Replace capabilities within your editor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget2.NavigateTo2(Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet,Microsoft.VisualStudio.TextManager.Interop.TextSelMode)">
      <summary>Move to a specified location within a document.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSpans">[in] optional - Set of text spans describing the match <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinder.GetTaggedSpans(Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet@)" /></param>
      <param name="iSelMode">[in] Set selection to box or stream. Values are taken from <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSelMode" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiColorItem">
      <summary>Provides support for returning a full 24-bit color value.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiColorItem.GetColorData(System.Int32,System.UInt32@)">
      <summary>Retrieves the RGB value for the specified element.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="cdElement">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__tagVSCOLORDATA" /> enumeration identifying the element for which to get the color.</param>
      <param name="pcrColor">[out] The requested RGB value.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegionEx">
      <summary>Provides additional methods for <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegionEx.GetBannerAttr(System.UInt32,System.UInt32[])"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegionEx.SetBannerAttr(System.UInt32,System.UInt32[])"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClientEx">
      <summary>Supports client drawing of glyphs.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClientEx.DrawBannerGlyph(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Tells client to draw a glyph</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHidReg">[in]</param>
      <param name="dwFlags">[in] Currently unused</param>
      <param name="hdc">[in]</param>
      <param name="pRect">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClientEx.GetBannerGlyphWidth(System.Int32,System.Int32@)">
      <summary>Determines how much space to set aside for banner glyph.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPixSpaceWidth">[in]</param>
      <param name="pGlyphPix">[out]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSessionEx">
      <summary>Allows adding of regions with "Ex" properties.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSessionEx.AddHiddenRegionsEx(System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegionEx[],Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwUpdateFlags">[in] Updates flags. For information on values for <paramref name="dwUpdateFlags" /> see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CHANGE_HIDDEN_REGION_FLAGS" />.</param>
      <param name="cRegions">[in]</param>
      <param name="rgHidReg">[in]</param>
      <param name="ppEnum">[out]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsImmediateStatementCompletion"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsImmediateStatementCompletion.EnableStatementCompletion_Deprecated(System.Int32,System.Int32,System.Int32)">
      <param name="fEnable"></param>
      <param name="iStartIndex"></param>
      <param name="iEndIndex"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsImmediateStatementCompletion.InstallStatementCompletion(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32)">
      <param name="fInstall"></param>
      <param name="pCmdWinView"></param>
      <param name="fInitialEnable"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsImmediateStatementCompletion.SetCompletionContext_Deprecated(System.String,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Object)">
      <param name="pszFilePath"></param>
      <param name="pBuffer"></param>
      <param name="ptsCurStatement"></param>
      <param name="punkContext"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsImmediateStatementCompletion2"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsImmediateStatementCompletion2.EnableStatementCompletion(System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <param name="fEnable"></param>
      <param name="iStartIndex"></param>
      <param name="iEndIndex"></param>
      <param name="pTextView"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsImmediateStatementCompletion2.EnableStatementCompletion_Deprecated(System.Int32,System.Int32,System.Int32)">
      <param name="fEnable"></param>
      <param name="iStartIndex"></param>
      <param name="iEndIndex"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsImmediateStatementCompletion2.GetFilter(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsTextViewFilter@)">
      <param name="pTextView"></param>
      <param name="ppFilter"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsImmediateStatementCompletion2.InstallStatementCompletion(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32)">
      <param name="fInstall"></param>
      <param name="pCmdWinView"></param>
      <param name="fInitialEnable"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsImmediateStatementCompletion2.SetCompletionContext(System.String,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Object,Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <param name="pszFilePath"></param>
      <param name="pBuffer"></param>
      <param name="ptsCurStatement"></param>
      <param name="punkContext"></param>
      <param name="pTextView"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsImmediateStatementCompletion2.SetCompletionContext_Deprecated(System.String,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Object)">
      <param name="pszFilePath"></param>
      <param name="pBuffer"></param>
      <param name="ptsCurStatement"></param>
      <param name="punkContext"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsInsertionUI"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsInsertionUI.GetWindowHandle(System.IntPtr@)">
      <param name="hwnd"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsInsertionUI.Hide"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseCompletor">
      <summary>Used to create and display a completor window</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseCompletor.Exec(System.Guid@,System.UInt32,System.UInt32,System.Object@,System.Object@)">
      <param name="pguidCmdGroup"> </param>
      <param name="nCmdID"> </param>
      <param name="nCmdexecopt"> </param>
      <param name="pvaIn"> </param>
      <param name="pvaOut"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseCompletor.GetCompletionSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the completor span.</summary>
      <returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
      <param name="ts">
        <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> containing the completor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseCompletor.GetHeight(System.UInt32@)">
      <summary>Gets the height of the IntelliSense completor.</summary>
      <returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
      <param name="dwHeight">The height of the completor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseCompletor.GetWidth(System.UInt32@)">
      <summary>Gets the completor width.</summary>
      <returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
      <param name="dwWidth">The width of the completor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseCompletor.GetWindowHandle(System.IntPtr@)"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseCompletor.Hide">
      <summary>Hides the IntelliSense completor.</summary>
      <returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseCompletor.Initialize(Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost,System.IntPtr)">
      <summary>Initializes the IntelliSense completor.</summary>
      <returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
      <param name="pHost">Pointer to IVsIntellisenseHost</param>
      <param name="hwndParent">Handle to the parent window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseCompletor.IsActive(System.Int32@)"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseCompletor.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT[])">
      <param name="pguidCmdGroup"> </param>
      <param name="cCmds"> </param>
      <param name="prgCmds"> </param>
      <param name="pCmdText"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseCompletor.SetLocation(Microsoft.VisualStudio.OLE.Interop.POINT[])">
      <summary>Sets the completor location.</summary>
      <returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
      <param name="p">Pointer to the start of the completor location.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseCompletor.Update(Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet,System.UInt32)">
      <summary>Updates the IntelliSense completor.</summary>
      <returns>If the method succeeds, it returns VSConstants.S_OK. If it fails, it returns an error code.</returns>
      <param name="pCompSet"></param>
      <param name="dwFlags"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost">
      <summary>Implemented by clients (including IVsTextView) to provide IntelliSense hosting functionality.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.AfterCompletorCommit">
      <summary>Handles any cleanup actions after a call to the completor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.BeforeCompletorCommit">
      <summary>Handles actions before committing the completor call.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.Exec(System.Guid@,System.UInt32,System.UInt32,System.Object@,System.Object@)">
      <param name="pguidCmdGroup"> </param>
      <param name="nCmdID"> </param>
      <param name="nCmdexecopt"> </param>
      <param name="pvaIn"> </param>
      <param name="pvaOut"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetContextBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <summary>Gets the context buffer for IntelliSense.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppCtxBuffer">[out, retval] The context buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetContextCaretPos(System.Int32@,System.Int32@)">
      <summary>Sets the caret position relative to the context buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLine">[in] Length of the context buffer.</param>
      <param name="piIndex">[in] Indicates the caret position index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetContextFocalPoint(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32@)">
      <summary>Returns the position in the context buffer that is considered the starting context point.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSpan">[out] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> containing the IntelliSense context.</param>
      <param name="piLen">Length of the buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetContextLocation(System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Int32@)">
      <summary>Gets bounding rectangle for the IntelliSense context.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPos">Gets bounding rectangle for the IntelliSense context.</param>
      <param name="iLen">Gets bounding rectangle for the IntelliSense context.</param>
      <param name="fUseCaretPosition">Gets bounding rectangle for the IntelliSense context.</param>
      <param name="prc">Gets bounding rectangle for the IntelliSense context.</param>
      <param name="piTopX">Gets bounding rectangle for the IntelliSense context.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetContextSelection(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Gets the selection relative to the context buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSelectionSpan">[out] <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> interface defining the context selection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetHostFlags(System.UInt32@)">
      <summary>Gets the IntelliSense host flags from IntellisenseHostFlags enumeration.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwFlags">[out, retval] The IntelliSense host flag from IntellisenseHostFlags enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetHostWindow(System.IntPtr@)">
      <summary>Returns a handle to the host window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwnd">[out] Handle to the host window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetServiceProvider(Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
      <summary>Gets an IntelliSense service object.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppSP">[out] Pointer to <see cref="T:Microsoft.VisualStudio.OLE.Interop.IServiceProvider" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetSmartTagRect(Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Returns the smart tag window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rcSmartTag">[out] Returns the smart tag rectangle.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetSubjectCaretPos(System.Int32@)">
      <summary>Gets the caret position relative to the text upon which IntelliSense operates.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piIndex">[out] The index of the caret position.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetSubjectSelection(System.Int32@,System.Int32@)">
      <summary>Gets the selection relative to the text upon which IntelliSense operates.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piAnchorIndex">[out] Starting index of the subject text selection.</param>
      <param name="piEndIndex">[out] Ending index of the subject text selection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.GetSubjectText(System.String@)">
      <summary>Gets the text upon which IntelliSense operates.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrSubjectText">[out, retval] The string containing the subject text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.HighlightMatchingBrace(System.UInt32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Highlights the matching brace.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Parameter is not used.</param>
      <param name="cSpans">[in] Number of matching pairs to highlight within the text span.</param>
      <param name="rgBaseSpans">[in, size_is(cSpans)] Span of text to highlight within.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT[])">
      <param name="pguidCmdGroup"> </param>
      <param name="cCmds"> </param>
      <param name="prgCmds"> </param>
      <param name="pCmdText"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.ReplaceSubjectTextSpan(System.Int32,System.Int32,System.String)">
      <summary>Edits the text upon which IntelliSense operates.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartIndex">[in] Starting index of the subject text.</param>
      <param name="iEndIndex">[in] Ending index of the subject text.</param>
      <param name="pszText">[in] The subject text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.SetContextCaretPos(System.Int32,System.Int32)">
      <summary>Sets the caret position relative to the context buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Length of the context buffer.</param>
      <param name="iIndex">[in] Indicates the caret position index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.SetContextSelection(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Sets the selection relative to the context buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">Sets the selection relative to the context buffer.</param>
      <param name="iStartIndex">Sets the selection relative to the context buffer.</param>
      <param name="iEndLine">Sets the selection relative to the context buffer.</param>
      <param name="iEndIndex">Sets the selection relative to the context buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.SetSubjectCaretPos(System.Int32)">
      <summary>Sets the caret position relative to the text upon which IntelliSense operates.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iIndex">[in] Indicates the caret position index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.SetSubjectSelection(System.Int32,System.Int32)">
      <summary>Sets the selection relative to the text upon which IntelliSense operates.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iAnchorIndex">[in] Start index number for the text span defining the subject text selection.</param>
      <param name="iEndIndex">[in] End index number for the text span defining the subject text selection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.UpdateCompletionStatus(Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet,System.UInt32)">
      <summary>Updates the completion status user interface (UI).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCompSet">[in] Pointer to the I<see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet" />.</param>
      <param name="dwFlags">[in] Flags whose values are taken from <see cref="T:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.UpdateSmartTagWindow(Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow,System.UInt32)">
      <summary>Updates the smart tag window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSmartTagWnd">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow" /> interface.</param>
      <param name="dwFlags">[in] Flags containing tip window flags. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost.UpdateTipWindow(Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow,System.UInt32)">
      <summary>Updates the tip window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTipWindow">[in] Pointer to <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow" /> interface.</param>
      <param name="dwFlags">[in] Tip window options. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags" /> interface.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseLangTip">
      <summary>Used to expose method tips.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseLangTip.Close(System.Int32)">
      <summary>Destroys the tip window and then deletes the tip.</summary>
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="fDeleteThis"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseLangTip.Create(Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow)">
      <summary>Creates the tool tip window.</summary>
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="pTipWnd">[in] A pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseLangTip.GetOverloadCount(System.Int32@)"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseLangTip.GetSizePreferences(Microsoft.VisualStudio.OLE.Interop.RECT[],Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA[])">
      <summary>Gets the size of the language tip window.</summary>
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="prcCtxBounds"></param>
      <param name="pSizeData"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseLangTip.GetSizeY(System.Int16@)"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseLangTip.Initialize(Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost)">
      <summary>Initializes a language tooltip.</summary>
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="pHost">[in] A pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseLangTip.IsActive(System.Int32@)"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseLangTip.ScrollDown">
      <summary>Scrolls to next overload of the method.</summary>
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseLangTip.ScrollUp">
      <summary>Scrolls to the previous overload of the method.</summary>
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseLangTip.Update(Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow,System.UInt32)">
      <summary>Updates a language tooltip.</summary>
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="pTipWnd">[in] A pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow" /> interface.</param>
      <param name="dwFlags">[in] Tip window flags. Values are taken from <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseLangTip.UpdatePosition">
      <summary>Updates the tip position.</summary>
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseOptions"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseOptions.GetCompletorSize(System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="uSize">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseOptions.SetCompletorSize(System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="uSize">[in]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageClipboardOpsEx"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageClipboardOpsEx.IsTextDataEx(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.Int32@)"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo2">
      <summary>Provides support for exception handlers in a language service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo2.QueryCatchLineSpan(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,System.Int32@,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo2.QueryCommonLanguageBlock(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,System.UInt32,System.Int32@)">
      <summary>Determines whether the specified location is contained within a specified type of exception handler block.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> containing the text to examine.</param>
      <param name="iLine">[in] Line to examine.</param>
      <param name="iCol">[in] Column to examine.</param>
      <param name="dwFlag">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COMMONLANGUAGEBLOCK" /> enumeration specifying which common block to look for.</param>
      <param name="pfInBlock">[out] Returns non-zero if <paramref name="iLine" /> and <paramref name="iCol" /> is inside the specified common language block; otherwise, returns zero.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo2.ValidateInstructionpointLocation(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDragDropOps"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDragDropOps.DragCleanup(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <param name="pBuffer"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDragDropOps.DragSetup(Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.Int32@)">
      <param name="pDO"></param>
      <param name="pBuffer"></param>
      <param name="pfDocumentContainsTextData"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDragDropOps.IsTextDataAtLocation(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.Int32,System.Int32,System.Int32@)">
      <param name="pBuffer"></param>
      <param name="iLine"></param>
      <param name="iCol"></param>
      <param name="pfIsTextDataValidAtLoc"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageLineIndent">
      <summary>Determines the number of "spaces" that should be added to the beginning of the specified line.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageLineIndent.GetIndentPosition(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,System.Int32,System.Int32@)">
      <summary>Determines how many "spaces" to add at the start of a line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBaseLayer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer" /> object.</param>
      <param name="BaseBufferLineIndex">[in] The index of the line that needs to be indented.</param>
      <param name="pIndentPosition">[out] Returns the number of spaces to add to the beginning of the line.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsMethodDataEx">
      <summary>Provides access to the entire text shown for a method in an IntelliSense Parameter Info ToolTip.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodDataEx.GetCopyTipText(System.Int32,System.String@)"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow2">
      <summary>Provides additional methods for the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow2.GetOverloadCount(System.Int32@)"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow2.NextMethod(System.Int32@)"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow2.PrevMethod(System.Int32@)"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsOverrideTextViewAccessibilityState"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsOverrideTextViewAccessibilityState.GetOverrides(System.UInt32@,System.UInt32@)">
      <param name="pdwMask"></param>
      <param name="pdwFlags"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsQueryUndoManager"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsQueryUndoManager.IsLinkedTransactionOpen(System.Int32@)">
      <param name="pbTransactionIsOpen"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsQueryUndoUnit">
      <summary>Queries a linked undo set to determine if an undo action would be aborted.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsQueryUndoUnit.ActionWouldBeAborted(System.Int32@)">
      <summary>Queries each member of a linked undo set to determine if an undo action would be aborted.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbWouldBeAborted">[out] If 1 (TRUE), undo action would be aborted; if 0 (FALSE) undo action would not be aborted.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsReadOnlyViewNotification"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsReadOnlyViewNotification.OnDisabledEditingCommand(System.Guid@,System.UInt32)">
      <param name="pguidCmdGuid"></param>
      <param name="dwCmdId"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsReportExternalErrors">
      <summary>Used to manage a list of error messages associated with a particular project.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsReportExternalErrors.AddNewErrors(Microsoft.VisualStudio.TextManager.Interop.IVsEnumExternalErrors)">
      <summary>Replaces the current list of errors with the specified list.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pErrors">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumExternalErrors" /> object that contains a list of error objects to replace the current error list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsReportExternalErrors.ClearAllErrors">
      <summary>Remove all errors from the list.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsReportExternalErrors.GetErrors(Microsoft.VisualStudio.TextManager.Interop.IVsEnumExternalErrors@)">
      <summary>Retrieves a copy of the list of errors.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pErrors">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumExternalErrors" /> object that contains a list of all errors that have been accumulated in the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsReportExternalErrors" /> object.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsSetSpanMappingEvents"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSetSpanMappingEvents.OnBeginSetSpanMappings(System.Int32,Microsoft.VisualStudio.TextManager.Interop.NewSpanMapping[])">
      <param name="cSpans"></param>
      <param name="rgSpans"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSetSpanMappingEvents.OnEndSetSpanMappings"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSetSpanMappingEvents.OnMarkerInvalidated(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker)">
      <param name="pBuffer"></param>
      <param name="pMarker"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagData">
      <summary>Represents smart tag content.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagData.GetContextMenuInfo(System.Guid@,System.Int32@,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget@)">
      <summary>Gets information about the context menu.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidID">[out] The GUID of the context menu.</param>
      <param name="nMenuID">[out] The menu ID of the context menu.</param>
      <param name="pCmdTarget">[out] The <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget" /> of the context menu.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagData.GetContextStream(System.Int32@,System.Int32@)">
      <summary>Gets the position and length of the stream.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPos">[out] The position in the stream.</param>
      <param name="piLength">[out] The length of the stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagData.GetImageIndex(System.Int32@)"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagData.GetTimerInterval(System.Int32@)">
      <summary>Gets the timer interval.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piTime">[out] The timer interval, in milliseconds.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagData.GetTipText(System.String@)">
      <summary>Gets the tip text that is to be displayed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrTipText">[out] The tip text to be displayed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagData.IsLeftJustified(System.Int32@)"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagData.OnDismiss">
      <summary>Handles the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow.Dismiss" /> event.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagData.OnInvocation">
      <summary>Handles the invocation of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow" /> event.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagData.UpdateView">
      <summary>Updates the view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow">
      <summary>Represents the window in which smart tag content is presented.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow.Dismiss">
      <summary>The window is being dismissed by the view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow.GetContextStream(System.Int32@,System.Int32@)">
      <summary>Returns the context stream. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPos">[out] The position in the stream.</param>
      <param name="piLength">[out] The length of the stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow.GetSizePreferences(Microsoft.VisualStudio.OLE.Interop.RECT[],Microsoft.VisualStudio.TextManager.Interop.SMARTTAGSIZEDATA[])">
      <summary>Returns the size preferences for a tip window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="prcCtxBounds">[in] Coordinates of the bounding rectangle.</param>
      <param name="pSizeData">[out] Size of the tip window. For values see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.SMARTTAGSIZEDATA" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow.Paint(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[],System.UInt32,System.UInt32,System.Int32)">
      <summary>Renders the window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hdc">The window handle.</param>
      <param name="prc">[in] Coordinates of the bounding rectangle.</param>
      <param name="pColor">The color ID.</param>
      <param name="pColorText">The color text ID.</param>
      <param name="fSel"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow.SetSmartTagData(Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagData)">
      <summary>Sets smart tag data.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSmartTagData">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagData" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow.WndProc(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary>Processes Windows messages. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwnd">The window handle.</param>
      <param name="iMsg">The message ID.</param>
      <param name="wParam">Information about the message.</param>
      <param name="lParam">Information needed by the message.</param>
      <param name="pLResult">The result.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator">
      <summary>Provides mapping services between two buffers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator.EnableReplication(System.UInt32,System.Int32)">
      <summary>Enables replication from primary to secondary buffer and replication from the secondary buffer to the primary.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="bcrd">[in] A value from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferCoordinatorReplicationDirection" /> enumeration describing the direction of replication to be enabled/disabled.</param>
      <param name="fEnable">[in] Nonzero (TRUE) to enable replication in the specified direction; otherwise, zero (FALSE) to disable replication.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator.EnumSpans(Microsoft.VisualStudio.TextManager.Interop.IVsEnumBufferCoordinatorSpans@)">
      <summary>Returns a list of span mappings controlled by the buffer coordinator object.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="ppEnum">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBufferCoordinatorSpans" /> object that contains a list of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewSpanMapping" /> objects.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator.GetMappingOfPrimaryPosition(System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Maps the specified position in the primary buffer to the span in the secondary buffer.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="lPosition">[in] A character offset into the primary buffer from the beginning of the buffer.</param>
      <param name="ptsPrimary">[in, out] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that is filled in with the line, offset pair in the primary buffer for the specified position.</param>
      <param name="ptsSecondary">[in, out] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that is filled in with the line, offset pair in the secondary buffer for the corresponding primary position.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator.GetPrimaryBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <summary>Returns the primary language buffer.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="ppBuffer">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object that represents the primary buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator.GetSecondaryBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <summary>Returns the secondary language buffer.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="ppBuffer">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object that represents the secondary buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator.MapPrimaryToSecondarySpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Maps the specified position in the primary buffer to a position in the secondary buffer.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="tsPrimary">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing a position in the primary buffer.</param>
      <param name="ptsSecondary">[in, out] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that is filled in with the corresponding position in the secondary buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator.MapSecondaryToPrimarySpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Maps the specified position in the secondary buffer to a position in the primary buffer.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="tsSecondary">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object describing a position in the secondary buffer.</param>
      <param name="ptsPrimary">[in, out] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object that is filled in with the corresponding position in the primary buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator.SetBufferMappingModes(System.UInt32,System.UInt32)">
      <summary>Establishes the mapping modes for both primary and secondary buffers.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="bcmmPrimary">[in] A combination of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop._BufferCoordinatorMappingMode" /> enumeration that specifies the mapping modes for the primary buffer.</param>
      <param name="bcmmSecondary">[in] A combination of flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop._BufferCoordinatorMappingMode" /> enumeration that specifies the mapping modes for the secondary buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator.SetBuffers(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>Establishes the primary and secondary buffers that are to be managed by the buffer coordinator object.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pPrimaryBuffer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object representing the primary buffer.</param>
      <param name="pSecondaryBuffer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object representing the secondary buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator.SetSpanMappings(System.Int32,Microsoft.VisualStudio.TextManager.Interop.NewSpanMapping[])">
      <summary>Establishes the list of mappings between the primary and secondary buffers.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="cSpans">[in] The number of mappings specified in the <paramref name="rgSpans" /> array.</param>
      <param name="rgSpans">[in] An array of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewSpanMapping" /> structures each of which specify a single mapping between the primary and secondary buffers.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferEx">
      <summary>Adds methods to manage change markers to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferEx.GetTrackChanges(System.Int32@)">
      <summary>Determines the change tracking status of the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfIsTracking">[in] If non-zero (TRUE), changes are being tracked in the text buffer; if zero (FALSE), changes are not being tracked.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferEx.SetTrackChangesSuppression(System.Int32)">
      <summary>Suppresses change marking in the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fSupress">[out] Specify non-zero (TRUE) to suppress change tracking; otherwise specify zero (FALSE)</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage2">
      <summary>Examines end-of-line (EOL) markers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage2.GetEolLengthEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.UInt32@)">
      <summary>Returns the length in characters of the end-of-line (EOL) marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pld">[in] A LINEDATAEX structure.</param>
      <param name="piEolType">[out] A uint valid member of EOLTYPE.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage2.GetEolTextEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.String@)">
      <summary>Returns a string containing the end-of-line (EOL) marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pld">[in] A LINEDATAEX structure.</param>
      <param name="pbstrEolText">[out] Returns a string containing the text of the EOL marker.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage2.GetEolTypeEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.UInt32@)">
      <summary>Returns the EOLTYPE of the end-of-line (EOL) marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pld">[in] A LINEDATAEX structure.</param>
      <param name="piEolType">[out] A uint valid member of EOLTYPE.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer2">
      <summary>Adds methods to examine end-of-line markers to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer2.GetEolLengthEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.UInt32@)">
      <summary>Returns the length in characters of the text line's end-of-line marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pld"></param>
      <param name="piEolType">[out] A uint member of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE" />. Note that <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE" /> has been extended with <see cref="T:Microsoft.VisualStudio.TextManager.Interop._EOLTYPE2" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer2.GetEolTextEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.String@)">
      <summary>Returns a string containing the text line's end-of-line (EOL) marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pld">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure.</param>
      <param name="pbstrEolText">[out] A string containing the text of the end-of-line marker.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer2.GetEolTypeEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.UInt32@)">
      <summary>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE" /> of the text line's end-of-line marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pld"></param>
      <param name="piEolType">[out] A uint member of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE" />. Note that <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE" /> has been extended with <see cref="T:Microsoft.VisualStudio.TextManager.Interop._EOLTYPE2" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarkerEx"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarkerEx.GetClientData(System.UInt32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwData">[out] Returns the <paramref name="dwClient" /> DWORD associated with the marker.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarkerEx.SetClientData(System.UInt32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwData">[in] Changes the <paramref name="dwClient" /> DWORD associated with the marker.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines2">
      <summary>Adds methods to examine end-of-line markers to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines2.GetEolLengthEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.UInt32@)">
      <summary>Returns the length in characters of the text line's end-of-line marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pld">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure containing the text line.</param>
      <param name="piEolType">[out] A uint member of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE" />. Note that <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE" /> has been extended with <see cref="T:Microsoft.VisualStudio.TextManager.Interop._EOLTYPE2" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines2.GetEolTextEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.String@)">
      <summary>Returns a string containing the end-of-line (EOL) marker terminating the text line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pld"></param>
      <param name="pbstrEolText">[out] A string containing the text of the end-of-line (EOL) marker.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines2.GetEolTypeEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.UInt32@)">
      <summary>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE" /> of the text line's end-of-line marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pld">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure containing the text line.</param>
      <param name="piEolType">[out] A uint member of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE" />. Note that <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE" /> has been extended with <see cref="T:Microsoft.VisualStudio.TextManager.Interop._EOLTYPE2" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2">
      <summary>Provides additional methods to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2.AttemptToCheckOutBufferFromScc3(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.String,System.UInt32,System.Int32@,System.Int32@)">
      <summary>Attempts to check a file out of SCC.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> for file.</param>
      <param name="pszFileName">[in] Name of the file to check out.</param>
      <param name="dwQueryEditFlags"> </param>
      <param name="pbCheckoutSucceeded">[out] true if checkout succeeded.</param>
      <param name="piStatusFlags">[out] For more information see <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2.FireReplaceAllInFilesBegin"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2.FireReplaceAllInFilesEnd"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2.GetActiveView2(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
      <summary>Returns the active or previously active view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fMustHaveFocus">[in] If true, then the current UI active view is returned. If false, then the last active view is returned, regardless of whether this view is currently UI active.</param>
      <param name="pBuffer">[in] Pass null for <paramref name="pBuffer" /> to get the previously active code view, regardless of the text buffer that it was associated with. If you pass in a valid pointer to a buffer, then you are returned the last active view for that particular buffer.</param>
      <param name="grfIncludeViewFrameType">[in] View frame type. For more information see <see cref="T:Microsoft.VisualStudio.TextManager.Interop._VIEWFRAMETYPE" />.</param>
      <param name="ppView">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2.GetBufferSccStatus3(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.String,System.Int32@,System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface.</param>
      <param name="pszFileName">[in] File name of interest.</param>
      <param name="pbCheckoutSucceeded">[out] true if checkout succeeded.</param>
      <param name="piStatusFlags">[out] For more information see <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2.GetExpansionManager(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionManager@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pExpansionManager">[out] Pointer to <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsExpansionManager" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2.GetUserPreferences2(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2[])">
      <summary>Returns the user preferences, such as tab usage, indent size and widget margin presence for the view, frame, and language service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pViewPrefs">[out] Pointer to the view preferences. For more information about <paramref name="pViewPrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2" />.</param>
      <param name="pFramePrefs">[out] Pointer to the frame preferences. For more information about <paramref name="pFramePrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2" />.</param>
      <param name="pLangPrefs">[in, out] Pointer to the language preferences. For more information about <paramref name="pLangPrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2" />.</param>
      <param name="pColorPrefs">[in, out] Pointer to the font color preferences.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2.NavigateToLineAndColumn2(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Guid@,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
      <summary>Finds or creates an appropriate view on the specified buffer and places the selection at the specified location.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface.</param>
      <param name="guidDocViewType">[in] GUID identifying the view. This value should always be <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" />.</param>
      <param name="iStartRow">[in] Starting line for the selection to locate.</param>
      <param name="iStartIndex">[in] Starting index for the selection to locate.</param>
      <param name="iEndRow">[in] Ending line for the selection to locate.</param>
      <param name="iEndIndex">[in] Ending index for the selection to locate.</param>
      <param name="grfIncludeViewFrameType">[in] View frame type. For more information see <see cref="T:Microsoft.VisualStudio.TextManager.Interop._VIEWFRAMETYPE" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2.NavigateToPosition2(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Guid@,System.Int32,System.Int32,System.UInt32)">
      <param name="pBuffer"> </param>
      <param name="guidDocViewType"> </param>
      <param name="iPos"> </param>
      <param name="iLen"> </param>
      <param name="grfIncludeViewFrameType"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2.ResetColorableItems(System.Guid)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidLang">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager2.SetUserPreferences2(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2[])">
      <summary>Sets user preferences.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pViewPrefs">[in] Values that describe the desired default view flags for all editor views. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2" />. Can be null if view preferences are not being set.</param>
      <param name="pFramePrefs">[in] Values that describe the desired default flags for all editor frames. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2" />. Can be null if frame preferences are not being set.</param>
      <param name="pLangPrefs">[in] Values that describe the desired flags for the language specified in the structure. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2" />. Can be null if language preferences are not being set.</param>
      <param name="pColorPrefs">[in] Values that describe the color and font preferences for all editor views. This parameter is for internal editor use only. Should be null when this method is called by external packages. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents2">
      <summary>Informs the user about changes in the text manager.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents2.OnRegisterMarkerType(System.Int32)">
      <summary>Fired when an external marker type is registered.</summary>
      <param name="iMarkerType">[in] External marker type that was registered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents2.OnRegisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Fired when a view is registered.</summary>
      <param name="pView">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface identifying the view that was registered. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents2.OnReplaceAllInFilesBegin"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents2.OnReplaceAllInFilesEnd"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents2.OnUnregisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Fired when a view is unregistered.</summary>
      <param name="pView">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface identifying the view that was unregistered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents2.OnUserPreferencesChanged2(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2[])">
      <summary>Fired when the user's global preferences are changed.</summary>
      <param name="pViewPrefs">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" /> structure. This structure provides the current settings for the view. If this is non-null, preferences that specifically affect text view behavior have changed.</param>
      <param name="pFramePrefs">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES" /> structure, which allows the frame to control whether the view shows horizontal or vertical scroll bars. If this is non-NULL, preferences that specifically affect code windows have changed.</param>
      <param name="pLangPrefs">[in] Pointer to the relevant language as specified by the <paramref name="szFileType" /> and <paramref name="guidLang" /> members of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES" /> structure. If this is non-null, preferences that affect a specific language's common settings have changed.</param>
      <param name="pColorPrefs">[in] Specifies color preferences. If non-null, the <paramref name="pguidColorService" /> member of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES" /> structure indicates which colorable item provider is associated with the <paramref name="pColorTable" /> member. If this is non-null, preferences that affect the colors or font used by a text view have changed.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClientAdvanced">
      <summary>Extends the functionality available through the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient" /> interface by providing additional callbacks. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClientAdvanced.OnMarkerTextChanged(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker)">
      <summary>Fires when the text on the same line as the marker has changed.</summary>
      <param name="pMarker">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker" /> interface for the marker.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClientEx">
      <summary>Extends the functionality available through the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient" /> interface by providing additional callbacks. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClientEx.MarkerInvalidated(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker)">
      <summary>Called when the text associated with a marker is deleted by a user action.</summary>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> buffer.</param>
      <param name="pMarker">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker" /> interface for the marker.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClientEx.OnHoverOverMarker(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker,System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pView">[in]</param>
      <param name="pMarker">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker" /> interface for the marker.</param>
      <param name="fShowUI">[in]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage2">
      <summary>Adds methods to examine end-of-line markers to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage2.GetEolLengthEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.UInt32@)">
      <summary>Returns the length in characters of the text line's end-of-line marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pld">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure containing the text line.</param>
      <param name="piEolType">[out] A uint member of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE" />. Note that <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE" /> has been extended with <see cref="T:Microsoft.VisualStudio.TextManager.Interop._EOLTYPE2" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage2.GetEolTextEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.String@)">
      <summary>Returns a string containing the end-of-line (EOL) marker terminating the text line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pld">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure containing the text line.</param>
      <param name="pbstrEolText">[out] A string containing the text of the end-of-line (EOL) marker.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage2.GetEolTypeEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],System.UInt32@)">
      <summary>Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE" /> of the text line's end-of-line marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pld">[in] A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure containing the text line.</param>
      <param name="piEolType">[out] A uint member of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE" />. Note that <see cref="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE" /> has been extended with <see cref="T:Microsoft.VisualStudio.TextManager.Interop._EOLTYPE2" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage2.GetVersionCookie(System.UInt32@)"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx">
      <summary>Adds functionality beyond <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx.AppendViewOnlyMarkerTypes(System.UInt32,System.UInt32[])">
      <param name="iCountViewMarkerOnly"></param>
      <param name="rgViewMarkerOnly"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx.GetClusterRange(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Returns cluster range information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in]</param>
      <param name="iDisplayCol">[in]</param>
      <param name="picCharacter">[out]</param>
      <param name="piStartCol">[out]</param>
      <param name="piEndCol">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx.GetSmartTagRect(Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rcSmartTag">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx.GetWindowFrame(System.Object@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppFrame">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx.InvokeInsertionUI(Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet,System.String,System.String,Microsoft.VisualStudio.TextManager.Interop.IVsInsertionUI@)">
      <param name="pCompSet"></param>
      <param name="bstrPrefixText"></param>
      <param name="bstrCompletionChar"></param>
      <param name="pInsertionUI"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx.IsCompletorWindowActive">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx.IsExpansionUIActive"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx.IsReadOnly"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx.PersistOutliningState">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx.RemoveViewOnlyMarkerTypes(System.UInt32,System.UInt32[])">
      <param name="iCountViewMarkerOnly"></param>
      <param name="rgViewMarkerOnly"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx.SetBackgroundColorIndex(System.Int32)">
      <param name="iBackgroundIndex"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx.SetHoverWaitTimer">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx.SetIgnoreMarkerTypes(System.Int32,System.UInt32[])">
      <param name="iCountMarkerTypes"></param>
      <param name="rgIgnoreMarkerTypes"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEx.UpdateSmartTagWindow(Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow,System.UInt32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSmartTagWnd">[in]</param>
      <param name="dwFlags">[in]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost">
      <summary>Core editor provided intellisense host for standard editor views.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.AfterCompletorCommit">
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.BeforeCompletorCommit">
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.Exec(System.Guid@,System.UInt32,System.UInt32,System.Object@,System.Object@)">
      <param name="pguidCmdGroup"> </param>
      <param name="nCmdID"> </param>
      <param name="nCmdexecopt"> </param>
      <param name="pvaIn"> </param>
      <param name="pvaOut"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetContextBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <summary>The context buffer.</summary>
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="ppCtxBuffer"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetContextCaretPos(System.Int32@,System.Int32@)">
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="piLine"> </param>
      <param name="piIndex"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetContextFocalPoint(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32@)">
      <summary>The "focal point" or position in the context buffer that should be considered the starting context point</summary>
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="pSpan"> </param>
      <param name="piLen"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetContextLocation(System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Int32@)">
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="iPos"> </param>
      <param name="iLen"> </param>
      <param name="fUseCaretPosition"> </param>
      <param name="prc"> </param>
      <param name="piTopX"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetContextSelection(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="pSelectionSpan"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetHostFlags(System.UInt32@)">
      <summary>Host flags (see IntellisenseHostFlags enum above)</summary>
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="pdwFlags"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetHostWindow(System.IntPtr@)">
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="hwnd"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetServiceProvider(Microsoft.VisualStudio.OLE.Interop.IServiceProvider@)">
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="ppSP"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetSmartTagRect(Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="rcSmartTag"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetSubjectCaretPos(System.Int32@)">
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="piIndex"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetSubjectSelection(System.Int32@,System.Int32@)">
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="piAnchorIndex"> </param>
      <param name="piEndIndex"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.GetSubjectText(System.String@)">
      <summary>The text upon which Intellisense should operate.</summary>
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.Returns E_NOTIMPL if GetHostFlags()includes IHF_NOSEPARATESUBJECT. The contents of the context buffer should be considered the subject text.</returns>
      <param name="pbstrSubjectText"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.HighlightMatchingBrace(System.UInt32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="dwFlags"> </param>
      <param name="cSpans"> </param>
      <param name="rgBaseSpans"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT[])">
      <param name="pguidCmdGroup"> </param>
      <param name="cCmds"> </param>
      <param name="prgCmds"> </param>
      <param name="pCmdText"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.ReplaceSubjectTextSpan(System.Int32,System.Int32,System.String)">
      <summary>Editing subject text. Return E_FAIL (or something) if text contains CR/LFs and flags contain IHF_SINGLELINESUBJECT.</summary>
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="iStartIndex"> </param>
      <param name="iEndIndex"> </param>
      <param name="pszText"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.SetContextCaretPos(System.Int32,System.Int32)">
      <summary>Caret/selection setting relative to the context buffer. Any editing should be done via the buffer.</summary>
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="iLine"> </param>
      <param name="iIndex"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.SetContextSelection(System.Int32,System.Int32,System.Int32,System.Int32)">
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="iStartLine"> </param>
      <param name="iStartIndex"> </param>
      <param name="iEndLine"> </param>
      <param name="iEndIndex"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.SetSubjectCaretPos(System.Int32)">
      <summary>Caret/selection management for subject text. All return E_NOTIMPL if IHF_NOSEPARATESUBJECT is set in flags.</summary>
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="iIndex"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.SetSubjectFromPrimaryBuffer(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Sets the span from the primary buffer.</summary>
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="pSpanInPrimary">[in] The primary buffer's <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.SetSubjectSelection(System.Int32,System.Int32)">
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="iAnchorIndex"> </param>
      <param name="iEndIndex"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.UpdateCompletionStatus(Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet,System.UInt32)">
      <summary>Intellisense UI handling.</summary>
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="pCompSet"> </param>
      <param name="dwFlags"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.UpdateSmartTagWindow(Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagTipWindow,System.UInt32)">
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="pSmartTagWnd"> </param>
      <param name="dwFlags"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHost.UpdateTipWindow(Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow,System.UInt32)">
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="pTipWindow"> </param>
      <param name="dwFlags"> </param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHostProvider">
      <summary>Implemented by a text view which provides IvsTextViewIntellisenseHost.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewIntellisenseHostProvider.CreateIntellisenseHost(Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferCoordinator,System.Guid@,System.IntPtr@)">
      <summary>Creates an IntelliSense host.</summary>
      <returns>If the method succeeds, it returns NativeMethods.S_OK. If it fails, it returns an error code.</returns>
      <param name="pBufferCoordinator"></param>
      <param name="riid"></param>
      <param name="ppunkHost"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsWebFormDesignerSupport">
      <summary>Implemented by project to provide single-file web form support.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsWebFormDesignerSupport.AddReference(System.String)">
      <summary>Adds a reference to the specified page.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="pszReference">[in] A string containing the full path to the web page to add.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsWebFormDesignerSupport.GetCodeDomProvider(System.Object@)">
      <summary>Returns the language's code domain object model (DOM) provider.</summary>
      <returns>If successful, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />; otherwise, returns an error code.</returns>
      <param name="ppProvider">[out] Returns an object that represents the code DOM provider.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2">
      <summary>Used to communicate user preferences with the text manager, views, and language services. View settings follow the text manager's settings unless a specific set of forced settings are specified when <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.Initialize(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.IntPtr,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.INITVIEW[])" /> is called.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fAutoListMembers">
      <summary>Determines whether a proposed list of members is produced on the fly.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fAutoListParams">
      <summary>Determines whether a proposed list of parameters is produced on the fly.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fCutCopyBlanks">
      <summary>Determines of blanks are included in cut/copy on a blank line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fDropdownBar">
      <summary>Determines whether language services support the dropdown or navigation bar.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fHideAdvancedAutoListMembers">
      <summary>Hide advanced members. This parameter is irrelevant if the <see cref="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fAutoListMembers" /> parameter is set to false.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fHotURLs">
      <summary>Allows for single-click URL navigation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fInsertTabs">
      <summary>Determines whether the tab character or spaces are inserted for a tab.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fLineNumbers">
      <summary>Determines whether line numbers are shown in the selection margin.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fShowCompletion">
      <summary>Determines whether statement completion is set through the user interface.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fShowSmartIndent">
      <summary>Determines whether the smart indent option is set through the user interface.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fTwoWayTreeview">
      <summary>Determines whether the tree view is shown.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fVirtualSpace">
      <summary>Determines whether virtual space navigation and selection are allowed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fWordWrap">
      <summary>Determines whether word wrap occurs.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.fWordWrapGlyphs">
      <summary>Specifies if a glyph should be shown to indicate a wrapped line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.guidLang">
      <summary>Specifies the Language service GUID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.IndentStyle">
      <summary>Specifies no indenting, block indenting, or smart indenting.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.szFileType">
      <summary>Specifies the file type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.uIndentSize">
      <summary>Limit of MAX_EDITOR_TAB_SIZE.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES2.uTabSize">
      <summary>Limit of MAX_EDITOR_TAB_SIZE.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE2">
      <summary>Provides additional members for the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE2.LI_SMARTTAGFACT">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE2.LI_SMARTTAGFACTSIDE">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE2.LI_SMARTTAGEPHEM">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE2.LI_SMARTTAGEPHEMSIDE">
      <summary> </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags2">
      <summary>Provides additional members to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags2.mdtGlobal">
      <summary>Global (closed file capable) strict transaction.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS2">
      <summary>Provides additional members for the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS2.MB_DONT_DELETE_IF_ZEROLEN">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS2.MB_INHERIT_FOREGROUND">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS2.MB_INHERIT_BACKGROUND">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS2.MB_VIEW_SPECIFIC">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues2">
      <summary>Provides additional members to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues2.mcvRightClickCommand">
      <summary>Fired for a double click on the glyph (if one exists) fired for a right click on the widget margin.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2">
      <summary>Provides additional members to the MARKERTYPE enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_WARNING">
      <summary>Warning. Priority level: 780.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_SPAN_MAPPING">
      <summary>Do not use. For internal use only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_REGION_COLLAPSED_NOGLYPH">
      <summary>A collapsible region is collapsed, with no glyph drawn.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_REGION_EXPANDED_NOGLYPH">
      <summary>A collapsible region is expanded, with no glyph drawn.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_EXSTENCIL">
      <summary>Extensil support 790</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_EXSTENCIL_SELECTED">
      <summary>Extensil support. Priority level: 790.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_SMARTTAG_NONVIS">
      <summary>Invisible smart tag marker.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_SMARTTAG_VIS">
      <summary>Visible smart tag marker. Priority level: 810.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_TRACK_NONSAVE">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_TRACK_SAVE">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_BOOKMARK_DISABLED">
      <summary>Generic bookmark/tag.               Priority level: 200.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_TRACK_PLACEHOLDER">
      <summary>Invisible placeholder used to allow concatenation of adjacent track changes markers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_SMARTTAG_FACTOID">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_SMARTTAG_EPHEMERAL">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_BRACE_MATCHING">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_EXSTENCIL_ENDMARKER">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_CODEDEFWIN_BACKGROUND">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_CODEDEFWIN_SELECTION">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_HIGHLIGHT_PATH">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_BRACE_MATCHING_BOLD">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_REFACTORING_BACKGROUND">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_EXSTENCIL_DEPFIELD">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_REFACTORING_FIELD">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.MARKER_REFACTORING_DEPFIELD">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE2.DEF_MARKER_COUNT_NEW">
      <summary>Represents the last MARKERTYPE2 member.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL2">
      <summary>Provides additional members to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL2.MV_SMARTTAG">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL2.MV_TRACK">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL2.MV_ROUNDEDBORDER">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL2.MV_BOLDTEXT">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL2.MV_DISALLOWBGCHANGE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL2.MV_DISALLOWFGCHANGE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL2.MV_FORCE_CLOSEST_IF_HIDDEN">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL2.MV_SELECT_WHOLE_LINE">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegionEx">
      <summary>Creates a new outline or hidden text region over the specified text span.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegionEx.dwBehavior">
      <summary>Determines whether a region is client- or editor-controlled.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegionEx.dwClient">
      <summary>Client-defined information that is used to uniquely identify the new region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegionEx.dwLength"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegionEx.dwState">
      <summary>Determines whether the new hidden region is expanded or collapsed. For more information see the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_STATE" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegionEx.iType">
      <summary>Specifies whether a hidden (concealed) or outline (collapsible) region is created. This member is a permanent property of the region. For more information, see the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_TYPE" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegionEx.pBannerAttr">
      <summary>Specifies banner attributes (same as colorizer attributes).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegionEx.pszBanner">
      <summary>Banner text displayed when the region is collapsed. This value is ignored unless a value of <see cref="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_BEHAVIOR.hrbClientControlled" /> is specified for <paramref name="dwBehavior" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegionEx.tsHiddenText">
      <summary>Span of text to create the new region for. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.NewSpanMapping">
      <summary>Used to create a new span mapping.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewSpanMapping.tspSpans">
      <summary>Describes the two spans that are to be mapped to each other.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewSpanMapping.varUserData">
      <summary>Any data supplied by the user.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SMARTTAGSIZEDATA">
      <summary>Holds data about smart tag size.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SMARTTAGSIZEDATA.size">
      <summary>Specifies the size of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.SMARTTAGSIZEDATA" /> struct.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.ST_IMAGEINDEX"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ST_IMAGEINDEX.ST_DEFAULTIMAGE">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ST_IMAGEINDEX.ST_ERROR">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ST_IMAGEINDEX.ST_REFACTOR">
      <summary> </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SVsRegisterFindScope">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsRegisterFindScope" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SVsTextImageUtilities">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageUtilities" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SVsTextSpanSet">
      <summary>Passed to the <see cref="M:Microsoft.VisualStudio.OLE.Interop.IServiceProvider.QueryService(System.Guid@,System.Guid@,System.IntPtr@)" /> method to return a reference to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextBufferErrors2"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferErrors2.BUFFER_E_RELOAD_OCCURRED">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextSpanAndCookie">
      <summary>Used to represent a span of code embedded in a document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextSpanAndCookie.CodeSpan">
      <summary>A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object representing the span of embedded source code.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextSpanAndCookie.ulHTMLCookie">
      <summary>Identifies the line the code block starts on.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextSpanPair">
      <summary>Used to express two corresponding spans in two separate buffers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextSpanPair.span1">
      <summary>A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object representing the first span.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextSpanPair.span2">
      <summary>A <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> object representing the second span.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags2">
      <summary>Provides additional members to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags2.VIF_READONLY">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags2.VIF_ACTIVEINMODALSTATE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags2.VIF_SUPPRESS_STATUS_BAR_UPDATE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags2.VIF_SUPPRESSTRACKCHANGES">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags2.VIF_SUPPRESSBORDER">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags2.VIF_SUPPRESSTRACKGOBACK">
      <summary />
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TipSuccesses2"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TipSuccesses2.TIP_S_NODEFAULTTIP">
      <summary> </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags2">
      <summary>Provides additional members for the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags2.UTW_TIMER">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags2.UTW_EXPANDED">
      <summary> </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2">
      <summary>Provides additional members for the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" /> structure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fActiveInModalState"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fAutoDelimiterHighlight">
      <summary>Determines whether automatic delimiter highlighting is allowed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fClientDragDropFeedback">
      <summary>Determines whether drag/drop feedback is enabled.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fDetectUTF8"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fDragDropEditing">
      <summary>Determines whether drag/drop editing is allowed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fDragDropMove">
      <summary>Determines whether drag/drop moves are allowed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fGoToAnchorAfterEscape">
      <summary>Determines whether the user is sent to an anchor after pressing the ESC key.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fOvertype">
      <summary>Determines whether insert or overtype is enabled. This value is not persisted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fReadOnly"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fSelectionMargin">
      <summary>Determines whether the selection margin is displayed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fTrackChanges">
      <summary>Determines whether track changes is enabled.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fUndoCaretMovements">
      <summary>Determines whether caret movements and text selections are included in undo list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fVisibleWhitespace">
      <summary>Determines whether spaces and tabs are shown.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.fWidgetMargin">
      <summary>Determines whether the widget margin is shown.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.lEditorEmulation"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES2.uCompletorSize"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsExpansion">
      <summary>Provides information about a code snippet.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VsExpansion.description">
      <summary>Provides the description for the code snippet.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VsExpansion.path">
      <summary>Provides the path to the code snippet.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VsExpansion.shortcut">
      <summary>Provides the shortcut name for the code snippet.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VsExpansion.title">
      <summary>Provides the full title of the code snippet.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsExpansionManager"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsExpansionManagerClass"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsExpansionManagerClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsExpansionManagerClass.EnumerateExpansions(System.Guid,System.Int32,System.String[],System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsExpansionEnumeration@)"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsExpansionManagerClass.GetExpansionByShortcut(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient,System.Guid,System.String,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32,System.String@,System.String@)"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsExpansionManagerClass.GetSnippetShortCutKeybindingState(System.Int32@)"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsExpansionManagerClass.GetTokenPath(System.UInt32,System.String@)">
      <param name="token"></param>
      <param name="pbstrPath">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsExpansionManagerClass.InvokeInsertionUI(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient,System.Guid,System.String[],System.Int32,System.Int32,System.String[],System.Int32,System.Int32,System.String,System.String)">
      <param name="pView">[in]</param>
      <param name="pClient">[in]</param>
      <param name="guidLang">[in]</param>
      <param name="bstrTypes">[in]</param>
      <param name="iCountTypes">[in]</param>
      <param name="fIncludeNULLType">[in]</param>
      <param name="bstrKinds">[in]</param>
      <param name="iCountKinds">[in]</param>
      <param name="fIncludeNULLKind">[in]</param>
      <param name="bstrPrefixText">[in]</param>
      <param name="bstrCompletionChar">[in]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsExpansionPackage"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsExpansionPackageClass"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsExpansionPackageClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsExpansionPackageClass.EnumerateExpansions(System.Guid,System.Int32,System.String[],System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsExpansionEnumeration@)"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsExpansionPackageClass.GetExpansionByShortcut(Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient,System.Guid,System.String,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32,System.String@,System.String@)"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsExpansionPackageClass.GetSnippetShortCutKeybindingState(System.Int32@)"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsExpansionPackageClass.GetTokenPath(System.UInt32,System.String@)">
      <param name="token"></param>
      <param name="pbstrPath">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsExpansionPackageClass.InvokeInsertionUI(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsExpansionClient,System.Guid,System.String[],System.Int32,System.Int32,System.String[],System.Int32,System.Int32,System.String,System.String)">
      <param name="pView">[in]</param>
      <param name="pClient">[in]</param>
      <param name="guidLang">[in]</param>
      <param name="bstrTypes">[in]</param>
      <param name="iCountTypes">[in]</param>
      <param name="fIncludeNULLType">[in]</param>
      <param name="bstrKinds">[in]</param>
      <param name="iCountKinds">[in]</param>
      <param name="fIncludeNULLKind">[in]</param>
      <param name="bstrPrefixText">[in]</param>
      <param name="bstrCompletionChar">[in]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VSFINDERROR2">
      <summary>Provides additional members for the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDERROR" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSFINDERROR2.VSFE_NoErrorAnsiPattern">
      <summary>Expression found to be zero-extended ANSI characters.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseCompletor"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseCompletorClass"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseCompletorClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseCompletorClass.Exec(System.Guid@,System.UInt32,System.UInt32,System.Object@,System.Object@)">
      <param name="pguidCmdGroup"></param>
      <param name="nCmdID"></param>
      <param name="nCmdexecopt"></param>
      <param name="pvaIn"></param>
      <param name="pvaOut"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseCompletorClass.GetCompletionSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <param name="ts"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseCompletorClass.GetHeight(System.UInt32@)">
      <param name="dwHeight"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseCompletorClass.GetWidth(System.UInt32@)">
      <param name="dwWidth"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseCompletorClass.GetWindowHandle(System.IntPtr@)">
      <param name="phwnd"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseCompletorClass.Hide"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseCompletorClass.Initialize(Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost,System.IntPtr)">
      <param name="pHost"></param>
      <param name="hwndParent"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseCompletorClass.IsActive(System.Int32@)">
      <param name="pfIsActive"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseCompletorClass.QueryStatus(System.Guid@,System.UInt32,Microsoft.VisualStudio.OLE.Interop.OLECMD[],Microsoft.VisualStudio.OLE.Interop.OLECMDTEXT[])">
      <param name="pguidCmdGroup"></param>
      <param name="cCmds"></param>
      <param name="prgCmds"></param>
      <param name="pCmdText"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseCompletorClass.SetLocation(Microsoft.VisualStudio.OLE.Interop.POINT[])">
      <param name="p"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseCompletorClass.Update(Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet,System.UInt32)">
      <param name="pCompSet"></param>
      <param name="dwFlags"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseLangTip"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseLangTipClass"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseLangTipClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseLangTipClass.Close(System.Int32)">
      <param name="fDeleteThis"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseLangTipClass.Create(Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow)">
      <param name="pTipWnd"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseLangTipClass.GetOverloadCount(System.Int32@)">
      <param name="plOverloadCount"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseLangTipClass.GetSizePreferences(Microsoft.VisualStudio.OLE.Interop.RECT[],Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA[])">
      <param name="prcCtxBounds"></param>
      <param name="pSizeData"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseLangTipClass.GetSizeY(System.Int16@)">
      <param name="pSizeY"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseLangTipClass.Initialize(Microsoft.VisualStudio.TextManager.Interop.IVsIntellisenseHost)">
      <param name="pHost"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseLangTipClass.IsActive(System.Int32@)">
      <param name="pfIsActive"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseLangTipClass.ScrollDown"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseLangTipClass.ScrollUp"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseLangTipClass.Update(Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow,System.UInt32)">
      <param name="pTipWnd"></param>
      <param name="dwFlags"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsIntellisenseLangTipClass.UpdatePosition"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsSmartTagTipWindow">
      <summary>Controls interaction with a tip window.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsSmartTagTipWindowClass">
      <summary>Controls interaction with a tip window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSmartTagTipWindowClass.#ctor">
      <summary>Initializes a new instance of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VsSmartTagTipWindowClass" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSmartTagTipWindowClass.Dismiss">
      <summary>The window is being dismissed by the view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSmartTagTipWindowClass.GetContextStream(System.Int32@,System.Int32@)">
      <summary>Returns the context stream (the position and length of text in the buffer that should not be obscured by the tip window, but to which the content of the tip is related).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPos">[out] The position in the stream.</param>
      <param name="piLength">[out] The length of the stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSmartTagTipWindowClass.GetSizePreferences(Microsoft.VisualStudio.OLE.Interop.RECT[],Microsoft.VisualStudio.TextManager.Interop.SMARTTAGSIZEDATA[])">
      <summary>Returns the size preferences for a tip window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="prcCtxBounds">[in] Coordinates of the bounding rectangle.</param>
      <param name="pSizeData">[out] Size of the tip window. For values see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.SMARTTAGSIZEDATA" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSmartTagTipWindowClass.Paint(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[],System.UInt32,System.UInt32,System.Int32)"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSmartTagTipWindowClass.SetSmartTagData(Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagData)">
      <summary>Sets smart tag data.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSmartTagData">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSmartTagData" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSmartTagTipWindowClass.WndProc(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr,System.Int32@)"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferCoordinator"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferCoordinatorClass"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferCoordinatorClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferCoordinatorClass.EnableReplication(System.UInt32,System.Int32)">
      <param name="bcrd"></param>
      <param name="fEnable"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferCoordinatorClass.EnumSpans(Microsoft.VisualStudio.TextManager.Interop.IVsEnumBufferCoordinatorSpans@)">
      <param name="ppEnum"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferCoordinatorClass.GetMappingOfPrimaryPosition(System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <param name="lPosition"></param>
      <param name="ptsPrimary"></param>
      <param name="ptsSecondary"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferCoordinatorClass.GetPrimaryBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <param name="ppBuffer"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferCoordinatorClass.GetSecondaryBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <param name="ppBuffer"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferCoordinatorClass.MapPrimaryToSecondarySpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <param name="tsPrimary"></param>
      <param name="ptsSecondary"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferCoordinatorClass.MapSecondaryToPrimarySpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <param name="tsSecondary"></param>
      <param name="ptsPrimary"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferCoordinatorClass.SetBufferMappingModes(System.UInt32,System.UInt32)">
      <param name="bcmmPrimary"></param>
      <param name="bcmmSecondary"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferCoordinatorClass.SetBuffers(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <param name="pPrimaryBuffer"></param>
      <param name="pSecondaryBuffer"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferCoordinatorClass.SetSpanMappings(System.Int32,Microsoft.VisualStudio.TextManager.Interop.NewSpanMapping[])">
      <param name="cSpans"></param>
      <param name="rgSpans"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VSTFF2">
      <summary>Provides additional members to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSTFF" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSTFF2.VSTFF_NOUTF8_NOSIG">
      <summary>Turn off auto-detection of UTF8 without sig.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSTFF2.VSTFF_KEEPANSI">
      <summary>If text appears to be ANSI (American National Standards Institute), don't convert it.</summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v2.0\Microsoft.VisualStudio.TextManager.Interop.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.TextManager.Interop</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__PROMPTONLOADFLAGS">
      <summary>Flags to prompt user for an encoding on an open with specified codepage.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__PROMPTONLOADFLAGS.codepageNoPrompt">
      <summary>Prompt user.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__PROMPTONLOADFLAGS.codepagePrompt">
      <summary>Do not prompt user.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDBUFFERFLAGS">
      <summary>Indicates that a buffer boundary begins or ends a line, without requiring white space characters in the buffer. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDBUFFERFLAGS.VSFB_StartOfLine">
      <summary>The buffer starts a line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDBUFFERFLAGS.VSFB_EndOfLine">
      <summary>The buffer ends a line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDBUFFERFLAGS.FINDBUFFER_StartOfLine">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDBUFFERFLAGS.FINDBUFFER_EndOfLine">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDERROR">
      <summary>Specifies errors in find operation. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDERROR.VSFE_Syntax">
      <summary>There was a syntax error in expression</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDERROR.VSFE_NotSupported">
      <summary>Options were not supported.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDERROR.VSFE_NotInitialized">
      <summary>Search was not initialized.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDERROR.VSFE_Failure">
      <summary>An error occurred.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDERROR.VSFE_NoError">
      <summary>No error occurred.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW">
      <summary>Specifies how to find a match. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW.VSFH_Ambient">
      <summary>Use ambient/default options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW.VSFH_Wrap">
      <summary>Wrap around image boundary.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW.VSFH_TryMatch">
      <summary>Search for match at span: don't change state (current match span, tags).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW.VSFH_SetMatch">
      <summary>Search for match at span: set match span and tags.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS">
      <summary>Specifies text find options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_OptionMask">
      <summary>Options. FR_MatchCase | FR_WholeWord | FR_Hidden | FR_Backwards | FR_Selection | FR_Block | FR_KeepCase | FR_SubFolders | FR_KeepOpen | FR_NameOnly.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_MatchCase">
      <summary>Match case in search.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_WholeWord">
      <summary>Match whole word.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Hidden">
      <summary>Search hidden text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Backwards">
      <summary>Search in reverse</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Selection">
      <summary>Search selection only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Block">
      <summary>Current procedure/block</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_KeepCase">
      <summary>Keep case on replace.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_SubFolders">
      <summary>Search subfolders.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_KeepOpen">
      <summary>Keep modified files open.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_NameOnly">
      <summary>Display filename only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_SyntaxMask">
      <summary>FR_Plane | FR_Wildcard | FR_RegExpr.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Plain">
      <summary>Match exact string.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Wildcard">
      <summary>Match wild cards.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_RegExpr">
      <summary>Match regular expressions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_TargetMask">
      <summary>FR_Document | FR_OpenDocuments | FR_Files | FR_Project | FR_Solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Document">
      <summary>Search current document</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_OpenDocuments">
      <summary>Search open documents.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Files">
      <summary>Find in files.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Project">
      <summary>Find in project.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Solution">
      <summary>Find in solution.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_ActionMask">
      <summary>Actions. FR_MarkAll | FR_Find | FR_FindAll | FR_Replace | FR_ReplaceAll.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_MarkAll">
      <summary>Mark all matches.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Find">
      <summary>Find next.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_FindAll">
      <summary>Find all (bulk find)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Replace">
      <summary>Replace text found.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_ReplaceAll">
      <summary>Replace all text found.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_InternalMask">
      <summary>Internal options (no UI) FR_ResetPosition | FR_FromStart | FR_OneMatchPerLine | FR_Report | FR_SelectionDefault</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_ResetPosition">
      <summary>Find new.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_FromStart">
      <summary>Search from beginning of doc.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_OneMatchPerLine">
      <summary>Return only one match per line (bulk find).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Report">
      <summary>Generate a results list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_SelectionDefault">
      <summary>GetCapabilities: force selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_BlockThread">
      <summary />
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_NoFind">
      <summary>Suppress find.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_CommonOptions">
      <summary>FR_MatchCase | FR_WholeWord | FR_Hidden | FR_KeepCase</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_DocOptionSet">
      <summary>FR_CommonOptions | FR_Backwards | FR_Selection | FR_Block</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_FIFOptionSet">
      <summary>FR_CommonOptions | FR_SubFolders | FR_KeepOpen | FR_NameOnly</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_OptionSet">
      <summary>FR_CommonOptions | FR_Backwards | FR_Selection | FR_Block</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_SyntaxSet">
      <summary>FR_Plain | FR_Wildcard | FR_RegExpr</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Capabilities">
      <summary>FR_OptionSet | FR_SyntaxSet | FR_ActionMask | FR_SelectionDefault</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_All">
      <summary>All options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_None">
      <summary>No options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Procedure">
      <summary>Same as FR_Block.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS.FR_Pattern">
      <summary>Same as FR_Wildcard.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDPOS">
      <summary>Indicates the search position.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDPOS.VSFP_Start">
      <summary>The start of the search.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDPOS.VSFP_Current">
      <summary>The current position.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDPOS.VSFP_Wrapped">
      <summary>The search should wrap to the start.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDPOS.VSFP_ResetCounts">
      <summary>Clear the match counter.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT">
      <summary>Indicates the result of a find or replace operation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.VSFR_NotFound">
      <summary>The text string was not found.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.VSFR_Found">
      <summary>Text string was found.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.VSFR_Replaced">
      <summary>The text string was found and replaced.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.VSFR_EndOfDoc">
      <summary>Search reached the end of the document</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.VSFR_EndOfSearch">
      <summary>Search reached the start.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.VSFR_FindInFiles">
      <summary>A background Find in Files was started.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.VSFR_NoTarget">
      <summary>No target document was specified or found.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.VSFR_Error">
      <summary>An error occurred.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.VSFR_AndInterrupt">
      <summary>Search was interrupted with ESC/CANCEL.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.VSFR_AndReplace">
      <summary>Returned in combination with Found or NotFound</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.VSFR_FLAGMASK">
      <summary>For internal use only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.FINDREPLACE_RESULT_Failed">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.FINDREPLACE_RESULT_Found">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.FINDREPLACE_RESULT_Replaced">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.FINDREPLACE_RESULT_EndOfDoc">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.FINDREPLACE_RESULT_EndOfSearch">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT.FINDREPLACE_RESULT_FindInFiles">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULTLOC">
      <summary>These values denote the window in which the results of a bulk find operation appear.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULTLOC.VSFRL_FindResultList1">
      <summary>Results go in Find Results 1.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULTLOC.VSFRL_FindResultList2">
      <summary>Results go in Find Results 2.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULTLOC.FINDREPLACE_RESULTLOC_ResultsList1">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULTLOC.FINDREPLACE_RESULTLOC_ResultsList2">
      <summary>Deprecated. Do not use.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDSTATE">
      <summary>Specifies the state of a Find operation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDSTATE.VSFS_Error">
      <summary>An error occurred.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDSTATE.VSFS_Empty">
      <summary>Find was not initialized.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDSTATE.VSFS_Start">
      <summary>Find was initialized, and no action was taken.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDSTATE.VSFS_Found">
      <summary>Find was initialized and the last action was Found.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDSTATE.VSFS_NotFound">
      <summary>Initialized and the last action was Not Found.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDSTATE.VSFS_Wrapped">
      <summary>Find wrapped around to the start.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFTNOTIFY">
      <summary>Provides notifications to find targets. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTNOTIFY.VSFTNOTIFY_CURRENT">
      <summary>This target has become the current target.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTNOTIFY.VSFTNOTIFY_NOTCURRENT">
      <summary>This target is no longer the current target.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTNOTIFY.VSFTNOTIFY_STARTFIND">
      <summary>A find/replace operation is about to start.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTNOTIFY.VSFTNOTIFY_ENDFIND">
      <summary>The find/replace operation is complete.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID">
      <summary>Specifies target properties.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID.VSFTPROPID_DocName">
      <summary>VT_BSTR; the full path of filename/persistence moniker.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID.VSFTPROPID_IsDiskFile">
      <summary>VT_BOOL; VARIANT_TRUE if the object is a file on disk</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID.VSFTPROPID_BlockName">
      <summary>VT_BSTR; the name of current block.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID.VSFTPROPID_InitialPattern">
      <summary>VT_BSTR; the seed Find pattern - the selection is in single line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID.VSFTPROPID_InitialPatternAggressive">
      <summary>VT_BSTR; the seed Find pattern - the selection is in a single line, or text near caret if no selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID.VSFTPROPID_WindowFrame">
      <summary>VT_UNKNOWN; a pointer to the window frame (<see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" />) containing the view being searched.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID.VSFTPROPID_IsFindInFilesForegroundOnly">
      <summary>VT_BOOLEAN; indicates that the document must be searched on the foreground thread (UI thread) only. Normally the environment searches on the background thread. The environment does not marshal pointers on a background thread, so if you require that, specify this value instead.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.__VSTFF">
      <summary>Specifies the format of the text file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSTFF.VSTFF_SIGNATURE">
      <summary>VS Text File Format file signature (Byte Order Mark, UTF-8 sig.).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSTFF.VSTFF_DETECT">
      <summary>Extra analysis to detect encoding.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSTFF.VSTFF_HTML">
      <summary>HTML.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSTFF.VSTFF_XML">
      <summary>XML.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSTFF.VSTFF_BINARY">
      <summary>Binary handling.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSTFF.VSTFF_CPMASK">
      <summary>Mask for the codepage portion of VSTFF.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.__VSTFF.VSTFF_FLAGSMASK">
      <summary>Mask for the flags portion of VSTFF.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop._NavigableLocationResolverFlags">
      <summary>Specifies how a location path should be resolved.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._NavigableLocationResolverFlags.NLR_ABSOLUTEPATH">
      <summary>The absolute path of the location is specified.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._NavigableLocationResolverFlags.NLR_PARTIALPATH">
      <summary>The partial path to location is specified</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._NavigableLocationResolverFlags.NLR_URL">
      <summary>The location is a URL.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop._QuerySendCommitFlags">
      <summary>Specifies whether an ENTER triggers a text change commit event. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._QuerySendCommitFlags.QSCF_DO_SEND_ENTER_COMMIT">
      <summary>CRLF triggers a commit.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._QuerySendCommitFlags.QSCF_DO_NOT_SEND_ENTER_COMMIT">
      <summary>CRLF does not trigger a commit.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop._vsIndentStyle">
      <summary>Specifies the style of indentation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._vsIndentStyle.vsIndentStyleNone">
      <summary>No indent style.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._vsIndentStyle.vsIndentStyleDefault">
      <summary>The default style.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop._vsIndentStyle.vsIndentStyleSmart">
      <summary>Smart indent.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.ADD_OUTLINE_REGION_FLAGS">
      <summary>Specifies how outline regions are added to an existing outline session object (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsOutliningSession" />). </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ADD_OUTLINE_REGION_FLAGS.AOR_DEFAULT">
      <summary>Removes any existing outlining regions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ADD_OUTLINE_REGION_FLAGS.AOR_PRESERVE_EXISTING">
      <summary>Preserves existing outlining regions. New outlining regions are added to those already existing.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ADD_OUTLINE_REGION_FLAGS.AOR_NON_UNDOABLE">
      <summary>Indicates that the action is not part of the undo/redo stack. For example, this case applies if outlining is done when the document is first loaded.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.AtomicText">
      <summary>Describes an embedded object within a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.AtomicText.iIndex">
      <summary>Specifies the index of the position in the line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.AtomicText.pNext">
      <summary>Specifies the next AtomicText structure in the linked list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.AtomicText.pszAtomicText">
      <summary>Specifies the string containing the atomic text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.AtomicText.punkAtom">
      <summary>The IUnknown interface of the originating object, for any custom processing.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERINITEX">
      <summary>Represents buffer initialization parameters.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BUFFERINITEX.dwFlags">
      <summary>A combination of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextBufferInitFlags" /> enumeration members.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BUFFERINITEX.iLength">
      <summary>The buffer length if <see cref="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferInitFlags.BIF_INITTEXT" /> is specified.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BUFFERINITEX.pStorage">
      <summary>The storage, if <see cref="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferInitFlags.BIF_CUSTOMSTORAGE" /> is specified</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BUFFERINITEX.pszText">
      <summary>The buffer text, if <see cref="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferInitFlags.BIF_INITTEXT" /> is specified.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags">
      <summary>Do not use. Deprecated.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ">
      <summary>Do not use. Deprecated.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ_AND_WRITE">
      <summary>Do not use. Deprecated.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS">
      <summary>Sets the state of a text buffer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS.BSF_USER_READONLY">
      <summary>The user marked it as read-only; no editing is allowed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS.BSF_FILESYS_READONLY">
      <summary>Read-only on the file system, possibly under source code control.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS.BSF_MODIFIED">
      <summary>The buffer has been modified.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS.BSF_SUPPRESS_UI">
      <summary>Prevent the buffer from showing the UI (false by default).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS.BSF_RESERVED">
      <summary>Reserved for future use.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.CASESELECTION_TYPE">
      <summary>Specifies the case of selected text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CASESELECTION_TYPE.CASESELECTION_UPPER">
      <summary>The text is upper-case.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CASESELECTION_TYPE.CASESELECTION_LOWER">
      <summary>The text is lower-case.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CASESELECTION_TYPE.CASESELECTION_TITLE">
      <summary>The text is title case.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.CHANGE_HIDDEN_REGION_FLAGS">
      <summary>Specifies whether the region is added to the undo/redo stack.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CHANGE_HIDDEN_REGION_FLAGS.chrDefault">
      <summary>The region can be undone.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CHANGE_HIDDEN_REGION_FLAGS.chrNonUndoable">
      <summary>The region is not added to undo/redo stack (for example, for initial presentation).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.CHANGE_SYNTHETIC_REGION_FLAGS">
      <summary>Specifies whether the region is added to the undo/redo stack.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CHANGE_SYNTHETIC_REGION_FLAGS.CSR_DEFAULT">
      <summary>The default; the region is added to the undo/redo stack.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CHANGE_SYNTHETIC_REGION_FLAGS.CSR_NONUNDOABLE">
      <summary>The region is not added to undo/redo stack (e.g. for initial presentation).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.ChangeClusterFlags">
      <summary>Provides information about a group of undo/redo operations. Used in <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsChangeClusterEvents" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeClusterFlags.CCE_BEFORE_OPEN">
      <summary>Indicates that the notification is being fired before a cluster has opened.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeClusterFlags.CCE_BEFORE_CLOSE">
      <summary>Indicates that the notification is being fired before a cluster has closed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeClusterFlags.CCE_AFTER_CLOSE">
      <summary>Indicates that the notification is being fired after a cluster has closed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeClusterFlags.CCE_UNDO">
      <summary>Indicates that a cluster is an undo operation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeClusterFlags.CCE_REDO">
      <summary>Indicates that a cluster is a redo operation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeClusterFlags.CCE_FLUSH">
      <summary>Indicates that an early notification was prompted by an explicit flush request.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeClusterFlags.CCE_ABORTED">
      <summary>Indicates that a cluster has been aborted.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags">
      <summary>Flags indicating the type of changes made to text that triggered the commit gesture.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags.CCG_SAVE">
      <summary>Occurs when a file is being saved. A language service can perform any final file fix-ups required and the changes will be persisted in the save.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags.CCG_MULTILINE_CHANGE">
      <summary>Occurs when a single change covers multiple lines, for example, a paste operation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags.CCG_CARET_ON_NEW_BUFFER_LINE">
      <summary>Occurs when the caret has moved to a new buffer line. For example, this occurs on a carriage return or when a user clicks on a different line to move the caret.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags.CCG_MASS_REPLACE">
      <summary>Occurs when the commit is being fired for multiple changes within the affected span. For example, committing a large replace operation or running a wizard that affects multiple places in the file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags.CCG_ENTER_COMMAND">
      <summary>Same as CCG_CARET_ON_NEW_BUFFER_LINE.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags.CCG_FIND_STARTING">
      <summary>Fired before a find operation is started.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags.CCG_LOST_FOCUS">
      <summary>Indicates that the editor window has lost focus.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags.CCG_DESTRUCTIVEACTION">
      <summary>Used by the core editor. Editor clients should not use this value.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags.CCG_PROGRAMMATIC_CHANGE">
      <summary>Signals that the commit is being fired while the editor is running an automation function, for example, if a macro is played back.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.ChangeInput">
      <summary>Represents information about a pending change request *before* it has happened.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeInput.m_DelSpan">
      <summary>The span to delete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeInput.m_dwFlags">
      <summary>The flags that describe the change (a combination of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS" /> enumeration values).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeInput.m_iNewLen">
      <summary>The length of the new text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeInput.m_iOldLen">
      <summary>Length of old text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ChangeInput.m_pszNewText">
      <summary>The text to insert.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.CHARFMT">
      <summary>Represents the file encoding.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CHARFMT.CHARFMT_UNI">
      <summary>Unicode encoding.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CHARFMT.CHARFMT_UNI_SWAP">
      <summary>Byte-swapped Unicode encoding.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CHARFMT.CHARFMT_MBCS">
      <summary>MBCS encoding.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CHARFMT.CHARFMT_UTF8">
      <summary>UTF-8 with file signature encoding.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX">
      <summary>Specifies the default foreground, background, or line color.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_USERTEXT_FG">
      <summary>The foreground color for user text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_USERTEXT_BK">
      <summary>The background color for user text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_FIRSTFIXEDCOLOR">
      <summary>The first fixed color. Beginning of fixed color range.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_BLACK">
      <summary>Black.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_WHITE">
      <summary>White.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_MAROON">
      <summary>Maroon.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_DARKGREEN">
      <summary>Dark green.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_BROWN">
      <summary>Brown.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_DARKBLUE">
      <summary>Dark blue.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_PURPLE">
      <summary>Purple.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_AQUAMARINE">
      <summary>Aquamarine.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_LIGHTGRAY">
      <summary>Light gray.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_DARKGRAY">
      <summary>Dark gray.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_RED">
      <summary>Red.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_GREEN">
      <summary>Green.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_YELLOW">
      <summary>Yellow.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_BLUE">
      <summary>Blue.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_MAGENTA">
      <summary>Magenta.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_CYAN">
      <summary>Cyan.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_LASTFIXEDCOLOR">
      <summary>The last fixed color. End of fixed color range.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_SYSSEL_FG">
      <summary>The foreground for selected text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_SYSSEL_BK">
      <summary>The background for selected text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_SYSINACTSEL_FG">
      <summary>The foreground for inactive selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_SYSINACTSEL_BK">
      <summary>The background for inactive selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_SYSWIDGETMGN_BK">
      <summary>The background for widget margin.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_SYSPLAINTEXT_FG">
      <summary>The foreground for plain text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_SYSPLAINTEXT_BK">
      <summary>The background for plain text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_PALETTESIZE">
      <summary>The palette size.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_FORBIDCUSTOMIZATION">
      <summary>Forbid customization.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_SYSTEXT_FG">
      <summary>Obsolete. Use CI_USERTEXT_FG instead.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX.CI_SYSTEXT_BK">
      <summary>Obsolete. Use USERTEXT_BK instead.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.COLORIZER_ATTRIBUTE">
      <summary>Specifies color attributes of the text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORIZER_ATTRIBUTE.COLOR_INDEX_MASK">
      <summary>Indicates the colorable item index to use to render the character.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORIZER_ATTRIBUTE.COLOR_MARKER_MASK">
      <summary>Used internally by the editor. Not used by clients.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORIZER_ATTRIBUTE.LINE_MARKER_MASK">
      <summary>Used internally by the editor. Not used by clients.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORIZER_ATTRIBUTE.PRIVATE_CLIENT_MASK">
      <summary>Reserved for editor-client use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORIZER_ATTRIBUTE.HUMAN_TEXT_ATTR">
      <summary>Text to be treated as natural language text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORIZER_ATTRIBUTE.SEPARATOR_AFTER_ATTR">
      <summary>Indicates that a visual line separator should follow the character's line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.COLORIZER_ATTRIBUTE.PRIVATE_EDITOR_MASK">
      <summary>Top six bits reserved for editor internal use.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.CUSTOM_DROP_HANDLER_FLAGS">
      <summary>Indicates drop status.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CUSTOM_DROP_HANDLER_FLAGS.CDH_DEFAULT">
      <summary>Successful drop. Indicates that the drop can proceed, or already did so successfully.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CUSTOM_DROP_HANDLER_FLAGS.CDH_OVER_SELF">
      <summary>Indicates that the drop would be over the origin, and thus the position would not change.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.CUSTOM_DROP_HANDLER_FLAGS.CDH_INVALID_DEST">
      <summary>Indicates that the destination is unacceptable for a drop.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.DATA_OBJECT_RENDER_HINT">
      <summary>Specifies view or action options for the data object being rendered.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DATA_OBJECT_RENDER_HINT.DORH_DEFAULT">
      <summary>No hint information is available.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DATA_OBJECT_RENDER_HINT.DORH_MOVE_IN_SAME_DOC">
      <summary>Rendering was a Move operation in the same document.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DATA_OBJECT_RENDER_HINT.DORH_DROP">
      <summary>General Drag and Drop operation. This includes Drag and Drop from the Toolbox as well as DORH_MOVE_IN_SAME_DOC.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DATA_OBJECT_RENDER_HINT.DORH_CLIPBOARD">
      <summary>General Paste from the system Clipboard (for example, CTRL+V).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DATA_OBJECT_RENDER_HINT.DORH_TOOLBOX">
      <summary>User double-clicked an item from the Toolbox.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DATA_OBJECT_RENDER_HINT.DORH_PREVIEW">
      <summary>Tentative preview. For example, using CTRL+SHIFT+V to cycle through the contents of the Clipboard.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.DeeperLayerLineIndexToLocalFlags">
      <summary>Specifies how to treat deeper layers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DeeperLayerLineIndexToLocalFlags.DLI_DEFAULT">
      <summary>Return <see cref="F:Microsoft.VisualStudio.TextManager.Interop.TextViewErrors.VIEW_E_LOCATION_HIDDEN" /> if deeper text is hidden.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DeeperLayerLineIndexToLocalFlags.DLI_CLOSEST">
      <summary>Send back the closest available local coordinates</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DeeperLayerLineIndexToLocalFlags.DLI_RIGHTMOST">
      <summary>Opts for rightmost in case of ambiguity; by default we opt for leftmost in case of ambiguity.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DeeperLayerLineIndexToLocalFlags.DLI_AVOID_OUTER_EDGE">
      <summary>A "request", not a "requirement" flag. This member is used to tell a layer that during the conversion it should avoid converting the coordinate to a local coordinate that is on the "outer" edge of a visible region ("outer" meaning the right edge if DLI_RIGHTMOST is specified, and meaning the left edge otherwise). try to enclose outer edge</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DeeperLayerLineIndexToLocalFlags.dliDefault">
      <summary>Same as DLE_DEFAULT.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DeeperLayerLineIndexToLocalFlags.dliClosest">
      <summary>Same as DLE_CLOSEST.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DeeperLayerLineIndexToLocalFlags.dliRightmost">
      <summary>Same as DLE_RIGHTMOST.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.DEFAULTITEMS">
      <summary>Specifies default types that identify items in the core editor view for colorizing.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DEFAULTITEMS.COLITEM_TEXT">
      <summary>Default value for plain text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DEFAULTITEMS.COLITEM_KEYWORD">
      <summary>Denotes a language keyword.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DEFAULTITEMS.COLITEM_COMMENT">
      <summary>Denotes a language comment.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DEFAULTITEMS.COLITEM_IDENTIFIER">
      <summary>Denotes a language identifier. For example, in int MyVariable, MyVariable is an identifier, while int is a keyword.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DEFAULTITEMS.COLITEM_STRING">
      <summary>Denotes a string.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DEFAULTITEMS.COLITEM_NUMBER">
      <summary>Denotes a number.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DEFAULTITEMS.DEFAULT_ITEM_COUNT">
      <summary>This is the last enumeration value.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNENTRYTYPE">
      <summary>Specifies the drawing protocol requested for a combo. Used in <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNENTRYTYPE.ENTRY_TEXT">
      <summary>plain text only (<see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.GetEntryText(System.Int32,System.Int32,System.String@)" /> will be called)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNENTRYTYPE.ENTRY_ATTR">
      <summary>Text that may have bold/italic/underline attributes (<see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.GetComboAttributes(System.Int32,System.UInt32@,System.UInt32@,System.IntPtr@)" /> will be called)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNENTRYTYPE.ENTRY_IMAGE">
      <summary>A glyph is drawn to the left of the entries (<see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.GetEntryImage(System.Int32,System.Int32,System.Int32@)" /> will be called)</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR">
      <summary>DROPDOWNFONTATTR is an enum used by IVsDropdownBarClient to describe the appearance of text entries.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR.FONTATTR_PLAIN">
      <summary>plain text</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR.FONTATTR_BOLD">
      <summary>bold text</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR.FONTATTR_ITALIC">
      <summary>italicized text</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR.FONTATTR_UNDERLINE">
      <summary>underlined text</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR.FONTATTR_GRAY">
      <summary>grayed out text</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS">
      <summary>Provides options for enumerating collections of markers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS.EM_DEFAULT">
      <summary>Default settings.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS.EM_ENTIREBUFFER">
      <summary>Ignore <paramref name="iPos" /> and <paramref name="iLen" /> parameters.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS.EM_ALLTYPES">
      <summary>Ignore <paramref name="iMarker" /> parameter.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS.EM_SORTDESCENDING">
      <summary>Sort in descending order.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS.EM_SORTPRIORITY">
      <summary>Sort by marker priority.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS.EM_GLYPHINSPAN">
      <summary>Return markers that have a margin glyph and that start on the same line as the specified span.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS.EM_INCLUDEINVISIBLE">
      <summary>Includes invisible markers, which are normally excluded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS.EM_CONTAINED">
      <summary>Excludes any marker whose span is not fully contained within the given span. For example, say that you have a marker from column 0 to column 1 and a marker from column 1 to column 3. Given a span of 0-1, you return only the first marker; given span of 1-2, you return only the second marker. However, given a span of 0-2, you return both markers.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE">
      <summary>Enumerates end of line markers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE.eolCRLF">
      <summary>MS-DOS: \r\n carriage-return/linefeed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE.eolCR">
      <summary>Mac: \r.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE.eolLF">
      <summary>Unix: \n.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE.eolUNI_LINESEP">
      <summary>Unicode line separator.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE.eolUNI_PARASEP">
      <summary>Unicode paragraph separator.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE.eolEOF">
      <summary>End of file.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE.eolNONE">
      <summary>Artificial ending point (e.g. word-wrapped line).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.EOLTYPE.MAX_EOLTYPES">
      <summary>End of enum marker. This value has been redefined in <see cref="T:Microsoft.VisualStudio.TextManager.Interop._EOLTYPE2" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS">
      <summary>Specifies options for finding hidden regions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_ALL_REGIONS">
      <summary>Specify only this flag to find all hidden regions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_BY_CLIENT_DATA">
      <summary>Find region by matching client-specified value in <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSession.EnumHiddenRegions(System.UInt32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions@)" /> with the <paramref name="dwClient" /> member value specified in the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion" /> structure for each hidden region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_BY_TYPE">
      <summary>Find region by type. Casts marker type to DWORD and puts in <paramref name="dwCookie" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_INTERSECTS_SPAN">
      <summary>Finds all regions intersecting the given span.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_EXACT_SPAN">
      <summary>Finds only regions whose base span exactly matches the specified span.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_EDITOR_CONTROLLED_ONLY">
      <summary>Finds only regions that are controlled by the active editor.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_CLIENT_CONTROLLED_ONLY">
      <summary>Finds only regions that are controlled by the <paramref name="dwClient" /> member value specified in the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion" /> structure for each hidden region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_ENTIRELY_WITHIN_SPAN">
      <summary>Finds regions that are entirely within the given span, not simply intersecting the span.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_INNERMOST">
      <summary>Finds one region that is the most deeply nested region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_VISIBLE_ONLY">
      <summary>Excludes regions inside a collapsed region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_PREFER_START_IN_SPAN">
      <summary>Gives a region starting within the span higher priority than one ending in the span. Only has an effect when FHR_INNERMOST is specified.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.FHR_MUST_START_IN_SPAN">
      <summary>Like FHR_PREFER_START_IN_SPAN, except that only regions starting within spans will be returned</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.fhrAllRegions">
      <summary>Compatibility member. Use FHR_ALL_REGIONS.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.fhrByClientData">
      <summary>Compatibility member. Use FHR_BY_CLIENT_DATA.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.fhrByType">
      <summary>Compatibility member. Use FHR_BY_TYPE.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.fhrWithinSpan">
      <summary>Compatibility member. Use FHR_WITHIN_SPAN.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.fhrExactSpan">
      <summary>Compatibility member. Use FHR_EXACT_SPAN.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.fhrEditorControlledOnly">
      <summary>Compatibility member. Use FHR_EDITOR_CONTROLLED_ONLY.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS.fhrClientControlledOnly">
      <summary>Compatibility member. Use FHR_CLIENT_CONTROLLED_ONLY.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.FIND_SYNTHETIC_REGION_FLAGS">
      <summary>Specifies how to find a synthetic region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_SYNTHETIC_REGION_FLAGS.FSR_ALL_REGIONS">
      <summary>To find every region, specify *ONLY* this flag</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_SYNTHETIC_REGION_FLAGS.FSR_BY_CLIENT_DATA">
      <summary>dwCookie group. Find region with matching client DWORD</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_SYNTHETIC_REGION_FLAGS.FSR_WITHIN_SPAN">
      <summary>Span param group (mutually exclusive). Find all regions within the given span.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FIND_SYNTHETIC_REGION_FLAGS.FSR_EXACT_SPAN">
      <summary>find only those regions whose base span exactly matches the given span</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.FINDMARKERFLAGS">
      <summary>Specifies directional options for locating markers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FINDMARKERFLAGS.FM_FORWARD">
      <summary>Searches for markers in the forward direction (implicit).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FINDMARKERFLAGS.FM_BACKWARD">
      <summary>Searches for markers in the backward direction.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES">
      <summary>Specifies color table preferences to be used when painting text or markers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES.hBoldViewFont">
      <summary>Bold fonts that are used by text views.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES.hRegularViewFont">
      <summary>Regular fonts that are used by text views.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES.pColorTable">
      <summary>COM pointer to the color table for the colorable item provider indicated by *<paramref name="pguidColorService" />. This object is created as a result of this call if it has not been created already. This pointer is guaranteed to be valid if the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES" /> structure is an [in] parameter to a function. If you want to hold onto it beyond that you must AddRef (and later Release) it.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES.pguidColorCategory">
      <summary>GUID of the category to be used for the editor's color settings. The editor can handle separate categories for fonts and colors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES.pguidColorService">
      <summary>CLSID of an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsProvideColorableItems" /> implementor. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES.pguidFontCategory">
      <summary>GUID of the category to be used for the editor's font settings. The editor can handle separate categories for fonts and colors.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS">
      <summary>Provides additional marker options for modifying the font used to display text appearance.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS.FF_DEFAULT">
      <summary>Plain text. Marker does not modify text appearance in terms of bold or strikethrough options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS.FF_BOLD">
      <summary>Bold text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS.FF_STRIKETHROUGH">
      <summary>Strikethrough text.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES">
      <summary>Provides frame settings that control whether scroll bars are provided for views.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES.fHorzScrollbar">
      <summary>Determines whether the frame should display a horizontal scroll bar for views.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES.fVertScrollbar">
      <summary>Determines whether the frame should display a vertical scroll bar for views.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.GetSelectedAtomFlags">
      <summary>Specifies when to match a selected atom.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GetSelectedAtomFlags.gsaDefault">
      <summary>Matches an atom when the selection is 1) empty and to the left of it, or 2) exactly selecting it.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS">
      <summary>Provides information about a line in the buffer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS.gldeDefault">
      <summary>Default behavior: whole line, no attributes, regular locking.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS.gldeSubset">
      <summary>Returns information only for the line subset defined by the <paramref name="iStartIndex" /> and <paramref name="iEndIndex" /> parameters.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS.gldeColorizerState">
      <summary>Not implemented.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS.gldeSyntaxAttr">
      <summary>Return syntax coloring attributes and the colorizer state.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS.gldeMarkerAttr">
      <summary>Returns marker coloring attributes plus other attributes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS.gldeFullAttr">
      <summary>Combining with a bitwise or of <paramref name="gldeSyntaxAttr" /> and <paramref name="gldeMarkerAttr" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS.gldeNoReadLock">
      <summary>This value tells <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineDataEx(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])" /> or <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.ReleaseLineDataEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])" /> to skip locking entirely. This is only safe to do if you have separately put a read (or read/write) lock on the buffer beforehand, and keep it locked until you've released the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure again using <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.ReleaseLineDataEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])" />. This allows a fast iteration over an entire set of lines, factoring out the locking overhead, which becomes significant if you are iterating over many lines.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS.gldeNoWidgetMargin">
      <summary>Specifies that there is no widget margin, so appropriate markers can color text.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.GLYPHDRAWFLAGS">
      <summary>Provides options for drawing the glyph in the widget margin.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLYPHDRAWFLAGS.GDF_DEFAULT">
      <summary>Single-line glyph.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLYPHDRAWFLAGS.GDF_MULTILINE">
      <summary>Multi-line glyph.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLYPHDRAWFLAGS.GDF_TOPEDGE">
      <summary>Top line glyph specifying the beginning of a multi-line span of text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.GLYPHDRAWFLAGS.GDF_BOTTOMEDGE">
      <summary>Bottom line glyph specifying the ending of a multi-line span of text.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_BEHAVIOR">
      <summary>Specifies whether the hidden region is controlled by the client or the editor. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_BEHAVIOR.hrbClientControlled">
      <summary>Use to get notifications for a variety of events and to fully control every aspect of a hidden text region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_BEHAVIOR.hrbEditorControlled">
      <summary>Use if you just want to do outlining-type hiding of a region and want the editor to take responsibility for the appearance, behavior, and lifetime of the hidden region.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT">
      <summary>Determines the exact user action taken on the hidden text region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT.hreRegionDeleted">
      <summary>Region deleted by a text edit.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT.hreRegionResurrected">
      <summary>Region was deleted, but was restored by an Undo or Redo operation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT.hreRegionReloaded">
      <summary>The text of a hidden region was reloaded and may no longer be at an appropriate location.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT.hreBeforeRegionExpanded">
      <summary>A region with user-controlled visibility will be expanded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT.hreAfterRegionExpanded">
      <summary>A region with user-controlled visibility was expanded.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT.hreBeforeRegionCollapsed">
      <summary>A region with user-controlled visibility will be collapsed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT.hreAfterRegionCollapsed">
      <summary>A region with user-controlled visibility was collapsed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_STATE">
      <summary>Specifies whether the span of text is expanded or collapsed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_STATE.hrsDefault">
      <summary>New outline region is collapsed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_STATE.hrsExpanded">
      <summary>New outline region is expanded.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_TYPE">
      <summary>Specifies whether the new region is a hidden (concealed) or outline (collapsible) region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_TYPE.hrtConcealed">
      <summary>Specifies a hidden region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_TYPE.hrtCollapsible">
      <summary>Specifies an outline region.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.INITVIEW">
      <summary>Specifies view parameters. Used in <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.Initialize(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.IntPtr,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.INITVIEW[])" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.INITVIEW.fDragDropMove"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.INITVIEW.fHotURLs"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.INITVIEW.fOvertype"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.INITVIEW.fSelectionMargin"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.INITVIEW.fStreamSelMode">
      <summary>OBSOLETE: ignored by the core editor.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.INITVIEW.fVirtualSpace"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.INITVIEW.fVisibleWhitespace"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.INITVIEW.fWidgetMargin"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.INITVIEW.IndentStyle"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsAction">
      <summary>Actions placed in the undo history of a text buffer expose this interface .</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsAction.CanMerge(Microsoft.VisualStudio.TextManager.Interop.IVsAction)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pAction">[in] </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsAction.Merge(Microsoft.VisualStudio.TextManager.Interop.IVsAction)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pAction">[in] </param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBar">
      <summary>Provides buttons at the bottom of a code window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBar.Attach(System.IntPtr,System.Int32,System.IntPtr,Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarClient)">
      <summary>Creates window/button combinations.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwndParent">[in] Handle to the parent window.</param>
      <param name="cButtons">[in] </param>
      <param name="hImageList">[in] Handle to an image list.</param>
      <param name="pClient">[in] </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBar.Detach">
      <summary>Breaks the link between a button bar and its client.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBar.GetClient(Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarClient@)">
      <summary>Returns the client associated with a Buttonbar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppClient">[out] Pointer to the Buttonbar client.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBar.GetCurrentSelection(System.Int32@)">
      <summary>Returns which button is currently pressed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piCurButton">[out] Pointer to the button currently pressed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBar.GetSize(System.Int32@,System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piWidth">[out] </param>
      <param name="piHeight">[ref] </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBar.SetCurrentSelection(System.Int32)">
      <summary>Specifies which button is selected.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCurButton">[in] </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBar.SetHeight(System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iHeight">[in] </param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarClient"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarClient.GetButtonTipText(System.Int32,System.String@)">
      <summary>Returns the tooltip for a button</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iButton">[in] </param>
      <param name="pbstrTip">[out] String containing the tooltip text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarClient.OnButtonPressed(System.Int32)">
      <summary>Fired when a new button is pressed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iButton">[in] </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarClient.SetButtonBar(Microsoft.VisualStudio.TextManager.Interop.IVsButtonBar)">
      <summary>Called by the Buttonbar to hook itself up to the client.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pButtonBar">[in] Pointer to the Buttonbar.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarManager"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarManager.AddButtonBar(System.Int32,System.IntPtr,Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarClient)">
      <summary>Adds a set of combo Buttons to a code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cButtons">[in] </param>
      <param name="hImageList">[in] actually an HIMAGELIST.</param>
      <param name="pClient">[in] </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarManager.GetButtonBar(Microsoft.VisualStudio.TextManager.Interop.IVsButtonBar@)">
      <summary>Returns the Button bar associated with a code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppButtonBar">[out] Pointer to a Buttonbar.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsButtonBarManager.RemoveButtonBar">
      <summary>Removes a Button bar from a code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsChangeClusterEvents">
      <summary>Bracket a series of changes from an undo manager.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsChangeClusterEvents.OnChangeClusterClosing(System.UInt32)">
      <param name="dwFlags">[in] Modification flags. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ChangeClusterFlags" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsChangeClusterEvents.OnChangeClusterOpening(System.UInt32)">
      <param name="dwFlags">[in] Modification flags. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ChangeClusterFlags" /> enumeration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsChangeTrackingUndoManager">
      <summary>Provides undo management for an editor that supports multiple views.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsChangeTrackingUndoManager.AdviseTrackingClient(Microsoft.VisualStudio.TextManager.Interop.IVsUndoTrackingEvents)">
      <summary>Advises the Undo Manager that you want to receive notification when the document is clean.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUndoTrackingEvents">[in] Pointer to an undo tracking events object. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsUndoTrackingEvents" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsChangeTrackingUndoManager.MarkCleanState">
      <summary>Tells the Undo Manager that an unmodified state has been reached, for example, following a Save operation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsChangeTrackingUndoManager.QueryCleanState(System.Int32@)">
      <summary>Determines whether the document is in an unmodified state.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfClean">[out] true indicates the document is in an unmodified state.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsChangeTrackingUndoManager.UnadviseTrackingClient">
      <summary>Advises the Undo Manager that you no longer want to receive notification of when the document is clean.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow">
      <summary>Represents a multiple-document interface (MDI) child that contains one or more code views.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow.Close">
      <summary>Closes the code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow.GetBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <summary>Returns the buffer used by all views in the code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppBuffer">[out] Pointer to the text buffer object (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> interface).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow.GetEditorCaption(Microsoft.VisualStudio.TextManager.Interop.READONLYSTATUS,System.String@)">
      <summary>Returns the editor caption to which editors can append custom text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReadOnly">[in] Gets the read and write status of the text buffer. For a list of <paramref name="dwReadOnly" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.READONLYSTATUS" /></param>
      <param name="pbstrEditorCaption">[out] Pointer to a BSTR that contains the caption text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow.GetLastActiveView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
      <summary>Returns the last active view of the code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppView">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface that represents the last active view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow.GetPrimaryView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
      <summary>Returns the top (or primary) view of a split code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppView">[out] Pointer to <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface of the primary text view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow.GetSecondaryView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
      <summary>Returns the bottom (or secondary) view of a split code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppView">[out] Pointer to <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface of the secondary text view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow.GetViewClassID(System.Guid@)">
      <summary>Returns the text view class to change or query.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pclsidView">[out] Pointer to the class identifier (CLSID) of the text view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow.SetBaseEditorCaption(System.String[])">
      <summary>Appends custom text to the editor caption</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszBaseEditorCaption">[in] Pointer to the base editor caption string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow.SetBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>Sets the text buffer for all views in the code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> interface of the text buffer to set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow.SetViewClassID(System.Guid@)">
      <summary>Sets the text view class to change or query.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="clsidView">[in] Class identifier of the text view to change.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowEvents">
      <summary>Allows a VSPackage to listen to certain events associated with the view that contains an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" /> object. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowEvents.OnCloseView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Called when a view has been closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pView">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view that has been closed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowEvents.OnNewView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Called when a view has just been created.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pView">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object representing the view that has been created.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowManager">
      <summary>Allows adornments, such as drop-down bars, to be added to or removed from a code window. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowManager.AddAdornments">
      <summary>Adds adornments, such as drop-down bars, to a code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowManager.OnNewView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Called by the core editor to notify a language that a new view was created.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pView">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> object for the new view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowManager.RemoveAdornments">
      <summary>Removes adornments, such as drop-down bars, from a code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem">
      <summary>Provides default font colors, font style, and item name information for a custom colorable item.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem.GetDefaultColors(Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[],Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[])">
      <summary>Defines the default background and foreground colors for a custom colorable item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piForeground">[out] Returns an integer containing the foreground color. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX" /></param>
      <param name="piBackground">[out] Returns an integer containing the background color. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem.GetDefaultFontFlags(System.UInt32@)">
      <summary>Returns the default font flags for the custom colorable item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwFontFlags">[out] Font flags for the custom colorable item (that is, bold, plain text, and so on). For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem.GetDisplayName(System.String@)">
      <summary>Gets the display name of the custom colorable item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrName">[out] Returns a localized string containing the display name for the custom colorable item.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer">
      <summary>Implemented by the language client to assign color attributes to a span of text.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer.CloseColorizer">
      <summary>Releases any references held on a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VsTextBuffer" /> object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer.ColorizeLine(System.Int32,System.Int32,System.IntPtr,System.Int32,System.UInt32[])">
      <summary>Colorizes the given text.</summary>
      <returns>Returns the colorizer's state at the end of the line.</returns>
      <param name="iLine">[in] Line to be colorized.</param>
      <param name="iLength">[in] Length of the line minus the end-of-line marker (CR, LF, CRLF pair, or 0 (EOF)).</param>
      <param name="pszText">[in] The line's text (examine up to <paramref name="iLength" /> characters).</param>
      <param name="iState">[in] The colorizer's state at the beginning of the line.</param>
      <param name="pAttributes">[out] An array of color attributes to be filled in for the text. The array contains one member for each character in the line colorized, and an additional element which represents the background color of the space to the right of the last character. This array is <paramref name="iLength" /> + 1 characters long.Members of the pAttributes array may contain bits that can be masked with the various values provided in the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORIZER_ATTRIBUTE" /> enumeration to get the information required. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORIZER_ATTRIBUTE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer.GetStartState(System.Int32@)">
      <summary>Determines the state in which colorization of the first line of the buffer should begin.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piStartState">[out] Pointer to a long integer that represents the start state of the colorizer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer.GetStateAtEndOfLine(System.Int32,System.Int32,System.IntPtr,System.Int32)">
      <summary>Determines the end-of-line state for a given line.</summary>
      <returns>Returns the state at the end of the line.</returns>
      <param name="iLine">[in] Line whose state is to be queried.</param>
      <param name="iLength">[in] Length of the line minus the end-of-line marker (CR, LF, CRLF pair, or 0 (EOF)).</param>
      <param name="pText">[in] The line's text (examine only up to <paramref name="iLength" /> characters).</param>
      <param name="iState">[in] The colorizer's state at the beginning of the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer.GetStateMaintenanceFlag(System.Int32@)">
      <summary>Returns the state maintenance requirement for the colorizer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfFlag">[out] true if this colorizer requires per-line state maintenance, otherwise it should be set to false.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsCommitGestureSink">
      <summary>Indicate that some form of UI commit gesture has occurred.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCommitGestureSink.FlushCommitEventIfCurrentClusterIsOutermost"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCommitGestureSink.OnCommitGesture(System.UInt32)">
      <param name="dwGestureFlags">[in]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet">
      <summary>Provides statement completion capabilities for the language service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.Dismiss">
      <summary>Releases the completion set when it is no longer needed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.GetBestMatch(System.String,System.Int32,System.Int32@,System.UInt32@)">
      <summary>Determines the index of the closest matching completion set, given what has been typed so far.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszSoFar">[in] A string containing the text typed by the user.</param>
      <param name="iLength">[in] Integer containing the length of the string.</param>
      <param name="piIndex">[out] Returns an integer specifying the index.</param>
      <param name="pdwFlags">[out] Returns the type of match completed. For a list of <paramref name="pdwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.GetCount">
      <summary>Returns the number of items in the completion set.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.GetDescriptionText(System.Int32,System.String@)">
      <summary>Returns text describing the indicated item in the completion set.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iIndex">[in] Index identifying the item in the completion set to provide description text for.</param>
      <param name="pbstrDescription">[out] Returns a string containing the description text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.GetDisplayText(System.Int32,System.String@,System.Int32[])">
      <summary>Returns the text of a completion set item as it appears in the completion set list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iIndex">[in] Index of completion set item to return display text for.</param>
      <param name="ppszText">[out] Returns a string containing the display text.</param>
      <param name="piGlyph">[out] Returns an integer identifying the glyph to display next to the completion item. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.GetFlags">
      <summary>Returns flags indicating specific behaviors of this completion set.</summary>
      <returns>Returns one or more flags from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags" /> enumeration (specifically, the flags beginning with CSF_).</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.GetImageList(System.IntPtr@)">
      <summary>Returns the list of images (glyphs) supported by the completion set.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="phImages">[out] Returns a handle to the image list associated with the completion set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.GetInitialExtent(System.Int32@,System.Int32@,System.Int32@)">
      <summary>Determines where to display the completion set list in the editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLine">[out] Returns the line number of the characters that should not be obscured.</param>
      <param name="piStartCol">[out] Returns the column number of the first character that should not be obscured.</param>
      <param name="piEndCol">[out] Returns the last character in the span that should not be obscured. This must be on the same line as <paramref name="piLine" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.OnCommit(System.String,System.Int32,System.Int32,System.UInt16,System.String@)">
      <summary>Determines how text is completed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszSoFar">[in] The text typed so far.</param>
      <param name="iIndex">[in] Index identifying the match completion set item.</param>
      <param name="fSelected">[in] Indicates whether a completion item is selected in the completion box. If true, then the value of the <paramref name="pszSoFar" /> parameter is replaced by the text returned by <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.GetDisplayText(System.Int32,System.String@,System.Int32[])" />. If true, this indicates that an <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> return with the value of <paramref name="pbstrCompleteWord" /> equal to <paramref name="pszSoFar" /> is appropriate default behavior. The default value of <paramref name="fSelected" /> is true.</param>
      <param name="cCommit">[in] Last character that was typed.</param>
      <param name="pbstrCompleteWord">[out] Returns the complete word.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsCompoundAction">
      <summary>Enables the creation of compound actions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompoundAction.AbortCompoundAction">
      <summary>Aborts a compound action.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompoundAction.CloseCompoundAction">
      <summary>Closes a compound action and sets the endpoint of a set of actions to be grouped in a single undo/redo unit.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompoundAction.FlushEditActions">
      <summary>Updates the various text layers (outlining, word wrap, and so on) when called.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompoundAction.OpenCompoundAction(System.String)">
      <summary>Opens a compound action and sets the starting point of a set of actions to be grouped in a single undo/redo unit.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszDescription">Pointer to a null terminated string containing the description.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsCompoundActionEvents"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompoundActionEvents.OnAbortAction">
      <summary>Allows clients to discard their cache when a compound action is aborted.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompoundActionEvents.OnBeforeAction">
      <summary>Fired before an action takes place.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsCompoundViewChange">
      <summary>Allows the creation of compound view actions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompoundViewChange.CloseCompoundViewChange">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompoundViewChange.OpenCompoundViewChange">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsDebugName"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDebugName.GetLocation(System.String@,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrMkDoc">[out]</param>
      <param name="pspanLocation">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDebugName.GetName(System.String@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrName">[out]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsDefaultButtonBarImages">
      <summary>Obtains default Buttonbar images.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDefaultButtonBarImages.GetButtonCount(System.Int32@)">
      <summary>Returns the number of buttons on a Buttonbar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcButtons">[out] Number of buttons.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDefaultButtonBarImages.GetImageList(System.IntPtr@)">
      <summary>Returns the Buttonbar image list.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="phImageList">[out] Handle of the image list.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar">
      <summary>Provides control of the drop-down bar at the top of a code window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar.Attach(System.IntPtr,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient)">
      <summary>Creates the window and drop-down combination and sets up a link between the drop-down bar and its client.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hwndParent">[in] Handle to the parent window.</param>
      <param name="cCombos">[in] The Drop-down bar/Window combo.</param>
      <param name="pClient">[in] Pointer to the Drop-down bar client.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar.Detach">
      <summary>Breaks the link between the dropdown bar and its client.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar.GetClient(Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient@)">
      <summary>Returns the client associated with this drop-down bar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppClient">[out] Pointer to the client. See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar.GetCurrentSelection(System.Int32,System.Int32@)">
      <summary>Returns the entry that is currently selected in a given combination.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combination.</param>
      <param name="piCurSel">[out] Currently selected item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar.RefreshCombo(System.Int32,System.Int32)">
      <summary>Force a repaint of a combo, specifying the new selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> OK. If it fails, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combo.</param>
      <param name="iNewSelection">[in] New selected item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar.SetCurrentSelection(System.Int32,System.Int32)">
      <summary>Sets the current selection in the given drop-down combination</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combo.</param>
      <param name="iNewSelection">[in] New selected item.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient">
      <summary>Describes the contents of the drop-down bar combinations.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.GetComboAttributes(System.Int32,System.UInt32@,System.UInt32@,System.IntPtr@)">
      <summary>Returns information about a drop-down bar/Window combination.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combination.</param>
      <param name="pcEntries">[in] Count of entries in the combination.</param>
      <param name="puEntryType">[out] Specifies drawing protocol for a combination. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNENTRYTYPE" /> enumeration.</param>
      <param name="phImageList">[out] Handle to an HIMAGELIST.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.GetComboTipText(System.Int32,System.String@)">
      <summary>Returns the tooltip for an entire drop-down bar combination.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combination.</param>
      <param name="pbstrText">[out] String containing the tooltip text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.GetEntryAttributes(System.Int32,System.Int32,System.UInt32@)">
      <summary>Returns text appearance attributes for a drop-down combination entry.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combo.</param>
      <param name="iIndex">[in] Index of item of interest.</param>
      <param name="pAttr">[out] Font attribute. Values for <paramref name="pAttr" /> are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.DROPDOWNFONTATTR" /> enum.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.GetEntryImage(System.Int32,System.Int32,System.Int32@)">
      <summary>Returns the glyph associated with a combo entry.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combo.</param>
      <param name="iIndex">[in] Index of item of interest.</param>
      <param name="piImageIndex">[out] Index of glyph in the image list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.GetEntryText(System.Int32,System.Int32,System.String@)">
      <summary>Returns the text for a combo entry.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combo.</param>
      <param name="iIndex">[in] Index of item of interest.</param>
      <param name="ppszText">[out] String containing the text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.OnComboGetFocus(System.Int32)">
      <summary>Fires when the combo gets focus.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combo.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.OnItemChosen(System.Int32,System.Int32)">
      <summary>Fires when a combo item is chosen.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combo.</param>
      <param name="iIndex">[in] Index of item of interest.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.OnItemSelected(System.Int32,System.Int32)">
      <summary>Fires when a combo item is selected.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCombo">[in] The drop-down bar/Window combo.</param>
      <param name="iIndex">[in] Index of item of interest.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient.SetDropdownBar(Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar)">
      <summary>Called by the drop-down bar to hook itself up to the client.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDropdownBar">[in] Specifies a drop-down bar object.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarManager">
      <summary>Manages drop-down bars in code windows.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarManager.AddDropdownBar(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient)">
      <summary>Adds a set of combo drop-downs to a code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cCombos">[in] The DropdownBar/Window combo.</param>
      <param name="pClient">[in] DropdownBar client.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarManager.GetDropdownBar(Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBar@)">
      <summary>Returns the drop-down bar associated with the code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppDropdownBar">[out] Pointer to the drop-down bar, null if there isn't one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarManager.RemoveDropdownBar">
      <summary>Removes a drop-down bar from a code window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsDynamicTabProvider"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDynamicTabProvider.GetTabStop(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TabStop[])">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in]</param>
      <param name="iLine">[in]</param>
      <param name="sTabStop">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsDynamicTabProvider.GetTabStopElements(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.Int32,System.UInt32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in]</param>
      <param name="iLine">[in]</param>
      <param name="cEl">[out]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEditorGoBackLocations"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEditorGoBackLocations.SetMergeableGoBackLocation(System.Int32,System.Int32,System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fCurrentCaretPos">[in]</param>
      <param name="iBaseLine">[in]</param>
      <param name="iBaseCol">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEditorGoBackLocations.SetNonMergeableGoBackLocation(System.Int32,System.Int32,System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fCurrentCaretPos">[in]</param>
      <param name="iBaseLine">[in]</param>
      <param name="iBaseCol">[in]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR">
      <summary>Enumerates a collection of BSTRs. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR.Clone(Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR@)">
      <summary>Duplicates a collection of BSTRs.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppEnum">[out] Duplicated <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR.GetCount(System.UInt32@)">
      <summary>Returns the total count of BSTRs in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pceltCount">[out] Number of BSTRs.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR.Next(System.UInt32,System.String[],System.UInt32@)">
      <summary>Retrieves BSTRs from the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The requested number of BSTRs to retrieve.</param>
      <param name="rgelt">[out, size_is(celt)] The list of BSTRs that have been retrieved.</param>
      <param name="pceltFetched">[out] Pointer to the actual number of hidden regions supplied in <paramref name="pceltFetched" />. The caller of this method can set this to null if <paramref name="celt" /> is one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR.Skip(System.UInt32)">
      <summary>Skips BSTRs in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of BSTRs to skip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName">
      <summary>Enumerates a collection of debug names.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName.Clone(Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName@)">
      <summary>Duplicates a collection of debug names.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppEnum">[out] Duplicated <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName.GetCount(System.UInt32@)">
      <summary>Returns the total count of debug names in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pceltCount">[out] Total count of debug names in the enumeration sequence.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName.Next(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsDebugName[],System.UInt32@)">
      <summary>Retrieves debug names from the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The requested number of DebugNames to retrieve.</param>
      <param name="rgelt">[out, size_is(celt)] The list of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsDebugName" /> objects that have been retrieved.</param>
      <param name="pceltFetched">[out] Pointer to the actual number of hidden regions supplied in <paramref name="pceltFetched" />. The caller of this method can set this to null if <paramref name="celt" /> is one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName.Skip(System.UInt32)">
      <summary>Skips debug names in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of debug names to skip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID">
      <summary>Enumerates a collection of GUIDs.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID.Clone(Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID@)">
      <summary>Duplicates a collection of GUIDs.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppEnum">[in] Duplicated <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID.GetCount(System.UInt32@)">
      <summary>Returns the total count of GUIDs in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pceltCount">[out] Number of GUIDs in the enumeration sequence.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID.Next(System.UInt32,System.Guid[],System.UInt32@)">
      <summary>Retrieves GUIDs from the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The requested number of GUIDs to retrieve.</param>
      <param name="rgelt">[out, size_is(celt)] The list of GUIDs that have been retrieved.</param>
      <param name="pceltFetched">[out] Pointer to the actual number of hidden regions supplied in <paramref name="pceltFetched" />. The caller of this method can set this to null if <paramref name="celt" /> is one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID.Skip(System.UInt32)">
      <summary>Skips GUIDs in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of GUIDs to skip.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions">
      <summary>Enumerates existing hidden text sessions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions.GetCount(System.UInt32@)">
      <summary>Returns the total count of hidden regions in the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcRegions">[out] Number of hidden regions in the text buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions.Next(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion[],System.UInt32@)">
      <summary>Retrieves a specified number of hidden regions in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cEl">[in] The requested number of hidden regions to retrieve.</param>
      <param name="ppOut">[out, size_is(cEl)] The list of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion" /> objects that have been retrieved.</param>
      <param name="pcElFetched">[out] Pointer to the actual number of hidden regions supplied in <paramref name="ppOut" />. The caller of this method can set this to null if <paramref name="cEl" /> is one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumIndependentViews">
      <summary>Enumerates a collection of independent views. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumIndependentViews.GetCount(System.UInt32@)">
      <summary>Returns the total count of independent views in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCount">[out] Number of independent views in the enumeration sequence.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumIndependentViews.Next(System.UInt32,System.Object[],System.UInt32@)">
      <summary>Retrieves independent views from the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The requested number of independent views to retrieve.</param>
      <param name="rgelt">[out, size_is(celt)] The list of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> objects that have been retrieved.</param>
      <param name="pceltFetched">[out] Pointer to the actual number of hidden regions supplied in <paramref name="pceltFetched" />. The caller of this method can set this to null if <paramref name="celt" /> is one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumIndependentViews.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumLayerMarkers">
      <summary>Enumerates a collection of layer markers. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumLayerMarkers.GetCount(System.Int32@)">
      <summary>Total count of layer markers in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcMarkers">[out] Count of layer markers in the enumeration sequence.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumLayerMarkers.Next(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker@)">
      <summary>Retrieves the next text layer marker in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppRetval">[out, retval)] Pointer to the next <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumStreamMarkers" /> interface in the enumeration sequence.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumLayerMarkers.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumLineMarkers">
      <summary>Enumerates a collection of line markers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumLineMarkers.GetCount(System.Int32@)">
      <summary>Returns the total count of line markers in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcMarkers">[out] Number of line markers.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumLineMarkers.Next(Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker@)">
      <summary>Retrieves the next line marker in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppRetval">[out, retval)] Pointer to the next <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker" /> interface in the enumeration sequence.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumLineMarkers.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumStreamMarkers">
      <summary>Enumerates a collection of stream markers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumStreamMarkers.GetCount(System.Int32@)">
      <summary>Returns the total count of stream markers in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcMarkers">[out] Pointer to the number of stream markers in the enumeration sequence.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumStreamMarkers.Next(Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker@)">
      <summary>Retrieves the next stream marker in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppRetval">[out, retval)] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumStreamMarkers" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumStreamMarkers.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumSyntheticRegions">
      <summary>Enumerates a collection of synthetic regions. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumSyntheticRegions.GetCount(System.UInt32@)">
      <summary>Returns the total count of synthetic regions in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcRegions">[out] Total count of synthetic regions in the enumeration sequence.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumSyntheticRegions.Next(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion[],System.UInt32@)">
      <summary>Retrieves synthetic regions from the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cEl">[in] The requested number of synthetic regions to retrieve.</param>
      <param name="ppOut">[out, size_is(celt)] The list of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion" /> objects that have been retrieved.</param>
      <param name="pcElFetched">[out] Pointer to the actual number of hidden regions supplied in <paramref name="pceltFetched" />. The caller of this method can set this to null if <paramref name="celt" /> is one.  </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumSyntheticRegions.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextBuffers">
      <summary>Enumerates a collection of test buffers. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextBuffers.Clone(Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextBuffers@)">
      <summary>Duplicates an enumeration of text buffers.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppEnum">[out] Duplicated <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextBuffers" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextBuffers.Next(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer[],System.UInt32@)">
      <summary>Retrieves text buffers from the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The requested number of text buffers to retrieve.</param>
      <param name="rgelt">[out, size_is(celt)] The list of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> objects that have been retrieved.</param>
      <param name="pceltFetched">[out] Pointer to the actual number of hidden regions supplied in <paramref name="pceltFetched" />. The caller of this method can set this to null if <paramref name="celt" /> is one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextBuffers.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextBuffers.Skip(System.UInt32)">
      <summary>Skips text buffers in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] Number of text buffers to skip in the enumeration sequence.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextSpans">
      <summary>Enumerates a collection of text spans.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextSpans.GetCount(System.UInt32@)">
      <summary>Returns the total count of text spans in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcSpans">[out] Total count of text spans in the enumeration sequence.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextSpans.Next(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.UInt32@)">
      <summary>Retrieves text spans from the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cEl">[in] The requested number of text spans to retrieve.</param>
      <param name="ppOut">[out, size_is(celt)] The list of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextSpans" />  objects that have been retrieved.  </param>
      <param name="pcElFetched">[out] Pointer to the actual number of hidden regions supplied in <paramref name="pceltFetched" />. The caller of this method can set this to null if <paramref name="celt" /> is one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextSpans.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextViews">
      <summary>Enumerates a collection of text views.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextViews.GetCount(System.UInt32@)">
      <summary>Returns the total count of text views in the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCount">[out] Total count of text views in the enumeration sequence.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextViews.Next(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextView[],System.UInt32@)">
      <summary>Retrieves text views from the enumeration sequence.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="celt">[in] The requested number of text views to retrieve.</param>
      <param name="rgelt">[out, size_is(celt)] The list of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> objects that have been retrieved.</param>
      <param name="pceltFetched">[out] Pointer to the actual number of hidden regions supplied in <paramref name="pceltFetched" />. The caller of this method can set this to null if <paramref name="celt" /> is one.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextViews.Reset">
      <summary>Resets the enumeration sequence to the beginning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsFileBackup">
      <summary>Implemented by components interested in being backed up.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFileBackup.BackupFile(System.String)">
      <summary>Persists the object to a single file</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszBackupFileName">[in] Filename to persist.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFileBackup.IsBackupFileObsolete(System.Int32@)">
      <summary>Sets a backup dirty bit.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbObsolete">[out] Backup file is dirty</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsFinalTextChangeCommitEvents">
      <summary>Notifies clients of the last commit gesture to trigger the event and provides the range of text changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinalTextChangeCommitEvents.OnChangesCommitted(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Notifies clients of the last commit gesture to trigger the event and provide the range of text changed.</summary>
      <param name="dwGestureFlags">[in] Flags indicating the type of changes made. For a list of <paramref name="dwGestureFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags" />.</param>
      <param name="ptsChanged">[in] Span of text modified.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsFinder">
      <summary>Finds a text image.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinder.AttachTextImage(System.Object)">
      <summary>Attached a text image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTextImage">[in] Object to attach. <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage" /> or <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinder.Detach">
      <summary>Detaches a text image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinder.Find(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.UInt32@)">
      <summary>Finds a text image within a text span.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfFindHow">[in] Instructions for the search. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW" /> enumeration.</param>
      <param name="ptsMatch">[in] </param>
      <param name="pgrfResult">[out] Result flags.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinder.GetMatch(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Gets a textspan match.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pts">[out] Current match. Does not require <see cref="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW.VSFH_SetMatch" /> on <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.Find(System.String,System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsFindHelper,System.UInt32@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinder.GetMatchedSpans(Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet@)">
      <summary>Gets matched textspans.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppSpans">[out] Bulk find list. Requires <see cref="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW.VSFH_SetMatch" /> on Find.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinder.GetState(System.Int32@,System.UInt32@,System.UInt32@)">
      <summary>Gets state.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcFound">[out]</param>
      <param name="pResult">[out]</param>
      <param name="pState">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinder.GetTaggedSpans(Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet@)">
      <summary>Returns tagged textspans.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppTags">[out] Regex tagged expressions. Requires <see cref="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW.VSFH_SetMatch" /> on <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.Find(System.String,System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsFindHelper,System.UInt32@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinder.Init(System.UInt32,System.String,System.Int32,System.UInt32@)">
      <summary>Sets the find string.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfOptions">[in] Flag containing find options. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS" /> enum.</param>
      <param name="pszFindPattern">[in] Pattern to search for.</param>
      <param name="fReinit">[in] true for a new pattern.</param>
      <param name="pResult">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinder.SetPosition(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextAddress)">
      <summary>Sets search positions</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fp">[in] Search position. Values re taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDPOS" /> enum.</param>
      <param name="ta">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFinder.SetScope(Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet)">
      <summary>Restricts search to the span set.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSpanScope">[in] Scope of the search. Specified as an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsFindHelper">
      <summary>Utility for text string matching. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindHelper.FindInText(System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt16[],System.UInt32@,System.UInt32@,System.String@,System.Int32@)">
      <summary>Finds, and optionally replaces, a text pattern in a text string.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFind">[in] Text pattern to find.</param>
      <param name="pszReplace">[in] Replacement text pattern.</param>
      <param name="grfFindOptions">[in] Search options. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS" /> enumeration.</param>
      <param name="grfBufferFlags">[in] Flag indicating that <paramref name="pchText" /> begins or ends a line. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDBUFFERFLAGS" /> enumeration.</param>
      <param name="cchText">[in] Size of text, in Unicode characters.</param>
      <param name="pchText">[in, size_is(cchText)] Text buffer to search for <paramref name="pszFind" />.</param>
      <param name="piFound">[out] Index in buffer pointing to match.</param>
      <param name="pcchFound">[out] Length of match found.</param>
      <param name="pbstrReplaceText">[out] Computed replacement text, if necessary.</param>
      <param name="pfFound">[out, retval] true if pattern was found.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsFindScope">
      <summary>Defines a custom scope that can be chosen in the Find in Files, Look in combo box.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindScope.EnumFilenames(Microsoft.VisualStudio.OLE.Interop.IEnumString@)">
      <summary>Enumerate filenames (full path only).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppEnumString">[out] Enumeration of filenames.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindScope.GetQuery(System.String@,System.String@)">
      <summary>Returns a query string</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrBaseDirectory">[out]</param>
      <param name="pbstrQuery">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindScope.GetUIName(System.String@)">
      <summary>Returns the name displayed in Find UI</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbsName">[out] Displayed name.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget">
      <summary>Implements Find and Replace capabilities within your editor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.Find(System.String,System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsFindHelper,System.UInt32@)">
      <summary>Requests a text string search.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszSearch">[in] Pointer to a null terminated string containing the search text.</param>
      <param name="grfOptions">[in] Specifies the search options. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS" /> enumeration.</param>
      <param name="fResetStartPoint">[in] Flag to reset the search start point.</param>
      <param name="pHelper">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsFindHelper" /> interface.</param>
      <param name="pResult">[out] Pointer to the search result. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDRESULT" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.GetCapabilities(System.Boolean[],System.UInt32[])">
      <summary>Specifies your supported capabilities.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfImage">[out] Set to true if you support <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.GetSearchImage(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet[],Microsoft.VisualStudio.TextManager.Interop.IVsTextImage@)" />.</param>
      <param name="pgrfOptions">[out] Specifies supported options, syntax, and actions. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.GetCurrentSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the coordinates or the caret position of the current selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pts">[out] Specifies the current caret position or highlighted selection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.GetFindState(System.Object@)">
      <summary>Determines the state of a previous Find operation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppunk">[out, retval] Pointer to IUnknown.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.GetMatchRect(Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Return the screen coordinates of the matched string.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="prc">[out] Screen coordinates of the match. Values are returned in a PRECT structure.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.GetProperty(System.UInt32,System.Object@)">
      <summary>Returns the value of a requested property.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="propid">[in] Property identifier of the requested property. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFTPROPID" /> enumeration.</param>
      <param name="pvar">[out, retval] Specified property information returned in a variant.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.GetSearchImage(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet[],Microsoft.VisualStudio.TextManager.Interop.IVsTextImage@)">
      <summary>Returns a text image for the environment to search.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfOptions">[in] Specifies Find and Replace options. For a list of values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS" />.</param>
      <param name="ppSpans">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet" /> interface.</param>
      <param name="ppTextImage"></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.MarkSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Highlight a given text span.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pts">[in] Specifies the text span to highlight. Values are contained in a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.NavigateTo(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Move to a specified location within a document.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pts">[in] Specifies the location of a span of text. Values are contained in a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.NotifyFindTarget(System.UInt32)">
      <summary>Sends notification to a find target of a change in status.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="notification">[in] Specifies notification. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFTNOTIFY" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.Replace(System.String,System.String,System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsFindHelper,System.Int32@)">
      <summary>Requests a text string replace.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszSearch">[in] Pointer to a null terminated string containing the search text.</param>
      <param name="pszReplace">[in] Pointer to a null terminated string containing the replacement text.</param>
      <param name="grfOptions">[in] Specifies the search options. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS" /> enumeration.</param>
      <param name="fResetStartPoint">[in] Flag to reset the search start point.</param>
      <param name="pHelper">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsFindHelper" /> interface.</param>
      <param name="pfReplaced">[out, retval] true if the replacement was successful.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.SetFindState(System.Object)">
      <summary>Determines the state of a find operation.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnk">[in]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsFormatFilterProvider">
      <summary>Interface to provide file extension checking for Save As functionality.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFormatFilterProvider.CurFileExtensionFormat(System.String,System.UInt32@)">
      <summary>Provides the index in the filter list that matches the extension of the file passed in.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrFileName">[in] Filename and extension of interest.</param>
      <param name="pdwExtnIndex">[out] Index in the FormatFilterList (the <paramref name="pbstrFilterList" /> parameter of <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsFormatFilterProvider.GetFormatFilterList(" /><see cref="System.String@)" />.)</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFormatFilterProvider.GetFormatFilterList(System.String@)">
      <summary>Provides the list of available extensions for the Save As dialog.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrFilterList">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFormatFilterProvider.QueryInvalidEncoding(System.UInt32,System.String@)">
      <summary>Supplies a message informing the user that he has chosen encoding that is not supported by the language service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="Format">[in] Type of encoding specified. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSTFF" /> enumeration.</param>
      <param name="pbstrMessage">[out] String containing the message.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsFullTextScanner">
      <summary>Exposed by text buffers and used by compilers and other components that need immediate access to the entire buffer. Special-purpose interface exposed by text buffers and used by compilers and other components that need immediate access to the entire buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFullTextScanner.CloseFullTextScan">
      <summary>Closes the buffer for scanning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.visualstudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFullTextScanner.FullTextRead(System.String@,System.Int32@)">
      <summary>Performs the actual scan.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppszText">[out] Pointer to the contents of the text buffer.</param>
      <param name="piLength">[out] Length of text pointed to by *<paramref name="ppszText" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsFullTextScanner.OpenFullTextScan">
      <summary>Opens the buffer for scanning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.visualstudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion">
      <summary>Manages the hidden region.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.GetBanner(System.String@)">
      <summary>Returns the banner for the hidden region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrBanner">[out] Pointer to the banner for the hidden region.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.GetBaseBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <summary>Provides a pointer to the text buffer from the hidden region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppBuffer">[out] Pointer to the text buffer. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.GetBehavior(System.UInt32@)">
      <summary>Returns the hidden region behavior, that is, client-controlled or editor-controlled.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwBehavior"> [out] Pointer to the hidden region behavior. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_BEHAVIOR" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.GetClientData(System.UInt32@)">
      <summary>Returns the client data for the hidden region. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwData">[out] Pointer to a double word containing the data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.GetSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the text span of the hidden region in the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSpan">[out] Pointer to the text span for the hidden region. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.GetState(System.UInt32@)">
      <summary>Returns the state of the hidden region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwState">[out] Pointer to the state of the hidden region. This value is a combining with the bitwise or of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_STATE" /> and <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CHANGE_HIDDEN_REGION_FLAGS" /> values.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.GetType(System.Int32@)">
      <summary>Returns the hidden region type (that is, concealed or collapsible).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piHiddenRegionType">[out] Pointer to the hidden region type. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_TYPE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.Invalidate(System.UInt32)">
      <summary>Removes the hidden region and exposes the hidden text in the normal view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwUpdate">[in] Combining with the bitwise or of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CHANGE_HIDDEN_REGION_FLAGS" />  values.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.IsValid">
      <summary>Determines whether the hidden region is valid.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.SetBanner(System.String)">
      <summary>Sets the banner for the hidden region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszBanner">[in] Pointer to the banner for the hidden region.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.SetClientData(System.UInt32)">
      <summary>Sets the client data for the hidden region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwData">[in] Double word containing the data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.SetSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Sets the text span of the hidden region in the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSpan">[in] Pointer to the text span for the hidden region. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion.SetState(System.UInt32,System.UInt32)">
      <summary>Sets the state of the hidden region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwState"> [in] State of the hidden region in regards to whether the region is expanded or collapsed. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_STATE" />.</param>
      <param name="dwUpdate"> [in] State of the hidden region in regards to whether the region is added to the Undo/Redo stack. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CHANGE_HIDDEN_REGION_FLAGS" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClient">
      <summary>Provides notification of changes to a newly created hidden text session.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClient.ExecMarkerCommand(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,System.Int32)">
      <summary>Executes a text marker command against a marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHidReg">[in] Pointer to a hidden region object <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion" /></param>
      <param name="iItem">[in] Integer identifying the item number for a marker type's context menu command. Values typically range from 0 to 9, but the marker type may also support command values 101 through 103. For more information about these command values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClient.GetMarkerCommandInfo(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,System.Int32,System.String[],System.UInt32[])">
      <summary>Returns marker command information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHidReg">[in] Pointer to a hidden region object, <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion" /></param>
      <param name="iItem">[in] Integer identifying the item number for a marker type's context menu command. Values typically range from 0 to 9, but the marker type may also support command values 101 through 103. For more information about these command values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" />.</param>
      <param name="pbstrText">[out] Pointer to a string identifying the marker type command text for the context menu.</param>
      <param name="pcmdf">[out] Specifies command flags. Values for <paramref name="pcmdf" /> are taken from the <see cref="T:Microsoft.VisualStudio.OLE.Interop.OLECMDF" /> enumeration in the Platform SDK.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClient.GetTipText(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,System.String[])">
      <summary>Signals that the user has hovered the mouse over a collapsed hidden text region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHidReg">[in] Pointer to a hidden region object, <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion" />  for which tip text is required.</param>
      <param name="pbstrText"> [out] Pointer to a string containing the tip text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClient.MakeBaseSpanVisible(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Called when a particular hidden region needs to be displayed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pHidReg">[in] Pointer to a hidden region object, <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion" /></param>
      <param name="pBaseSpan">[in] Pointer to a base span object. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> .</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClient.OnBeforeSessionEnd">
      <summary>Called before the hidden text session is terminated.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClient.OnHiddenRegionChange(Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion,Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT,System.Int32)">
      <summary>Called when the user expands or collapses a hidden region.</summary>
      <param name="pHidReg">[in] Pointer to a hidden region object, <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenRegion" /> being expanded or collapsed.</param>
      <param name="EventCode"> [in] Indicates the exact user action taken on the hidden text region. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_EVENT" />.</param>
      <param name="fBufferModifiable"> [in] Flag indicating whether the buffer can be modified.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextManager">
      <summary>Determines whether a hidden text session exists for a given text buffer and creates one if it does not.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextManager.CreateHiddenTextSession(System.UInt32,System.Object,Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClient,Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSession@)">
      <summary>Creates a new hidden text session for a text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] This value is reserved for future use.</param>
      <param name="pOwningObject">[in] Text buffer containing the outlining or hidden text session.</param>
      <param name="pClient">[in] Pointer to a hidden text client for the buffer. The hidden text client provides notification of when a hidden text or outlining region is expanded or collapsed by the user. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClient" />.</param>
      <param name="ppState">[out] Pointer to the newly created hidden text session for the text buffer. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSession" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextManager.GetHiddenTextSession(System.Object,Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSession@)">
      <summary>Returns the current hidden text session for the specified text buffer, if one exists.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pOwningObject">[in] Text buffer containing the outlining or hidden text session.</param>
      <param name="ppSession">[out] Pointer to the outlining or hidden text session object (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSession" />) for the referenced text buffer.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSession">
      <summary>Used to add or enumerate hidden text sessions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSession.AddHiddenRegions(System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion[],Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions[])">
      <summary>Adds a new hidden region to the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwUpdateFlags">[in] Specifies whether the hidden region is added to the Undo/Redo stack. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CHANGE_HIDDEN_REGION_FLAGS" /></param>
      <param name="cRegions">[in] Number of hidden regions to add to the text buffer.</param>
      <param name="rgHidReg">[in, size_is (<paramref name="cRegions" />)] Caller-allocated array of outlining regions to add. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion" />.</param>
      <param name="ppEnum">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions" /> object that can be used to enumerate the hidden regions in the text buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSession.EnumHiddenRegions(System.UInt32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions@)">
      <summary>Returns a list of the current hidden regions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFindFlags">[in] Options for finding hidden regions. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS" />. </param>
      <param name="dwCookie">[in] Specifies the client-defined hidden region type to find. Specify a value that matches the client-defined identifier specified during the creation of the new hidden region (that is, the <paramref name="dwClient" /> member in the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion" /> structure).</param>
      <param name="ptsRange">[in] Specifies the range of text over which to enumerate the hidden regions.</param>
      <param name="ppEnum">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions" /> object that is used to enumerate hidden regions of specified type over the specified range in the text buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSession.Terminate">
      <summary>Ends the hidden text session.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextSession.UnadviseClient">
      <summary>Releases the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClient" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsHighlight">
      <summary>Used to move a dialog box to reveal a selection or highlight.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsHighlight.GetHighlightRect(Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Returns the screen coordinates of a highlight rectangle.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="prc">[out] Screen coordinates of highlight or selection.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageBlock">
      <summary>Determines the span of the current language block.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageBlock.GetCurrentBlock(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.String@,System.Int32@)">
      <summary>Determines the current span of the language block.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTextLines">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> object containing the text to examine.</param>
      <param name="iCurrentLine">[in] Current line position of the cursor.</param>
      <param name="iCurrentChar">[in] Current character position of the cursor within the line.</param>
      <param name="ptsBlockSpan">[out] Specifies a span of text representing the current language block. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />.</param>
      <param name="pbstrDescription">[out] Returns a string containing the description of the language block.</param>
      <param name="pfBlockAvailable">[out, retval] Returns non-zero if the block is available. Otherwise, returns zero if the current cursor position does not coincide with a language block.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageClipboardOps">
      <summary>Customizes copy and paste operations.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageClipboardOps.DataObjectRendered(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Allows changes to a data object after it is inserted.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTextLines">[in] Pointer to the text buffer containing the data object.</param>
      <param name="dwHint">[in] Indicates the origin of the text (view or action) for the data object that was just rendered. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.DATA_OBJECT_RENDER_HINT" />.</param>
      <param name="ptsInsertedText">[in] Specifies the span of the newly inserted text, in buffer coordinates.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageClipboardOps.GetDataObject(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,Microsoft.VisualStudio.OLE.Interop.IDataObject@)">
      <summary>Creates an <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" /> with language-specific formats. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pView">[In] Pointer to a view containing the data object <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IvsTextView" />.</param>
      <param name="pTextLayer">[In] pointer to text layer containing the data object <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer" />.</param>
      <param name="ppDO">[out] Pointer to the data object <see cref="T:Microsoft.VisualStudio.OLE.Interop.IDataObject" />. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageClipboardOps.IsTextData(Microsoft.VisualStudio.OLE.Interop.IDataObject)">
      <summary>Determines whether the data object contains data that can be rendered into text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pDO">[in] Pointer to the data object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageClipboardOps.TextFromData(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,Microsoft.VisualStudio.OLE.Interop.IDataObject,Microsoft.VisualStudio.TextManager.Interop.LTE_TEXTDATAFLAGS[],System.String@)">
      <summary>Render this data object to text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTextLayer">[in] Pointer to a text layer object for the referenced data object.</param>
      <param name="pDO">[in] Pointer to the data object.</param>
      <param name="ptdfFlags">[out] Specifies options for how text is being pasted. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LTE_TEXTDATAFLAGS" /> .</param>
      <param name="pbstrText">[out] Text of the data object.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageContextProvider">
      <summary>Connects context-sensitive help for a language service that uses the Visual Studio core editor. Hooks up context-sensitive help for a language service that uses the Visual Studio core editor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageContextProvider.UpdateLanguageContext(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Object)">
      <summary>Provides context from the language service to the Visual Studio core editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwHint">[in] Value indicating whether this is a typical idle-time update of the context bag or a request for F1 Help. For a list of <paramref name="dwHint" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LanguageContextHint" />.</param>
      <param name="pBuffer">[in] Text buffer in question.</param>
      <param name="ptsSelection">[in] Relevant range of text within the buffer (that is, the context).</param>
      <param name="pUC">[in, out] Pointer to the context bag on the Visual Studio core text editor.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo">
      <summary>Implement to support debugging for your language service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo.GetLanguageID(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,System.Guid@)">
      <summary>Returns the corresponding debugger back-end "language ID".</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface for which the language identifier is required.</param>
      <param name="iLine">[in] Integer containing the line index.</param>
      <param name="iCol">[in] Integer containing the column index.</param>
      <param name="pguidLanguageID">[out] Returns a GUID specifying the language identifier.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo.GetLocationOfName(System.String,System.String@,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Deprecated. Do not use.</summary>
      <param name="pszName">Do not use.</param>
      <param name="pbstrMkDoc">Do not use.</param>
      <param name="pspanLocation">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo.GetNameOfLocation(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,System.String@,System.Int32@)">
      <summary>Generates a name for the given location in the file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Returns the text buffer (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> object) that contains the location.</param>
      <param name="iLine">[in] Number of the line containing the location.</param>
      <param name="iCol">[in] Column containing the location in the line.</param>
      <param name="pbstrName">[out] Returns a string containing the name of the location.</param>
      <param name="piLineOffset">[out] Returns an integer containing the line offset from <paramref name="iLine" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo.GetProximityExpressions(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR@)">
      <summary>Generates proximity expressions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface for the text buffer containing the expression.</param>
      <param name="iLine">[in] Number of the line containing the start of the expression.</param>
      <param name="iCol">[in] Column position within the line.</param>
      <param name="cLines">[in] Number of lines within the expression.</param>
      <param name="ppEnum">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumBSTR" /> object that is used to enumerate BSTRs.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo.IsMappedLocation(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32)">
      <summary>Returns whether the location contains code that is mapped to another document, for example, client-side script code.</summary>
      <returns>If the method succeeds, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> indicating the location contains mapped code. If the location does not contain mapped code, returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />. Otherwise, returns an error code.</returns>
      <param name="pBuffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface that contains the location in question.</param>
      <param name="iLine">[in] Integer containing the line index.</param>
      <param name="iCol">[in] Integer containing the column index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo.ResolveName(System.String,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName@)">
      <summary>Disambiguates the given name, providing non-ambiguous names for all entities that "match" the name.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszName">[in] String containing the name.</param>
      <param name="dwFlags">[in] Flags. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.RESOLVENAMEFLAGS" />.</param>
      <param name="ppNames">[out] Returns an object containing a list of names. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo.ValidateBreakpointLocation(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Validates the given position as a place to set a breakpoint.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface for the text buffer containing the breakpoint.</param>
      <param name="iLine">[in] Number of the line containing the breakpoint.</param>
      <param name="iCol">[in] Number of the column containing the breakpoint.</param>
      <param name="pCodeSpan">[out] Returns a span of text containing the extent of the statement at which execution would stop if the breakpoint were set.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageInfo">
      <summary>Retrieves information about a programming or markup language, including language name, associated file extension, and colorizer requirements for code editing.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageInfo.GetCodeWindowManager(Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow,Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowManager@)">
      <summary>Allows a language to add adornments to a code editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCodeWin">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" /> interface for the requested code editor manager.</param>
      <param name="ppCodeWinMgr">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowManager" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageInfo.GetColorizer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.IVsColorizer@)">
      <summary>Returns the colorizer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> interface for the requested colorizer.</param>
      <param name="ppColorizer">[out] Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorizer" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageInfo.GetFileExtensions(System.String@)">
      <summary>Returns the file extensions belonging to this language.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrExtensions">[out] Returns a BSTR that contains the requested file extensions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageInfo.GetLanguageName(System.String@)">
      <summary>Returns the name of the programming language.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="bstrName">[out] Returns a BSTR that contains the language name.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageTextOps">
      <summary>Provides additional IntelliSense features for the language service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageTextOps.Format(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Formats the selected text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTextLayer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer" /> object containing the text to format.</param>
      <param name="ptsSel">[in] Text span to format within the specified layer. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageTextOps.GetDataTip(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.String@)">
      <summary>Displays a tip over a span of text when the mouse hovers over this location.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTextLayer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer" /> object representing the text file.</param>
      <param name="ptsSel">[in] Span of text relevant to the specified text layer. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />.</param>
      <param name="ptsTip">[out] Returns a span of text to center the tip over. For more information, see <see cref="N:Microsoft.VisualStudio.TextManager.Interop" />.</param>
      <param name="pbstrText">[out] Returns the text of the tip to display.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageTextOps.GetPairExtent(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,Microsoft.VisualStudio.TextManager.Interop.TextAddress,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Determines the location of a matching brace, parenthesis, quotation mark, bracket, or any other item the language service wants to match.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTextLayer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer" /> object representing the text file.</param>
      <param name="ta">[in] Specifies the text address of the first item in the pair. The text address is relative to the location of text within the text layer. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextAddress" />.</param>
      <param name="pts">[out] Returns the span of text containing the second item in the pair. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageTextOps.GetWordExtent(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,Microsoft.VisualStudio.TextManager.Interop.TextAddress,Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the extent of a word or token on or near the point.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTextLayer">[in] An <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer" /> object representing the text file.</param>
      <param name="ta">[in] Specifies the text address of the characters to determine the word extent of. The text address is relative to the location of text within the text layer. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextAddress" />.</param>
      <param name="flags">[in] Specifies options for determining the extent of a word. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS" />.</param>
      <param name="pts">[out] Returns the span of text identifying the whole word. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLastChangeTimeProvider">
      <summary>Allows an object to tell clients when its last change occurred.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLastChangeTimeProvider.GetLastChangeTime(Microsoft.VisualStudio.OLE.Interop.FILETIME[])">
      <summary>Gets the time of the last change.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pFileTime">[out] Time change occurred. For more information see <see cref="T:System.Runtime.InteropServices.FILETIME" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLayeredTextView">
      <summary>Helps a view interact with text layers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLayeredTextView.GetRelativeSelectionState(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE[])">
      <summary>Gets the selection relative to a specified layer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Selection state flags. Values are taken from <see cref="T:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags" />.</param>
      <param name="pReferenceLayer">[in] Must be null unless <see cref="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.rssRelativeLayer" /> is specified. If null, specifies the top-most layer.</param>
      <param name="pSelState">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLayeredTextView.GetSelectedAtom(System.UInt32,System.Object@)">
      <summary>Tells a client when the selection is "at" an atomic object.</summary>
      <returns>If an atomic object is found, the method returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If an atomic object is not found, the method returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />.</returns>
      <param name="dwFlags">[in] Selection flags. Values are taken from <see cref="T:Microsoft.VisualStudio.TextManager.Interop.GetSelectedAtomFlags" />.</param>
      <param name="ppunkAtom">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLayeredTextView.GetTopmostLayer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppLayer">[out] The view's top-level layer representation.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLayeredTextView.SetRelativeSelectionState(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE[])">
      <summary>Sets the selection relative to a specified layer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Selection flags. Values are taken from <see cref="T:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags" />.</param>
      <param name="pReferenceLayer">[in] Must be null unless <see cref="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.rssRelativeLayer" /> is specified</param>
      <param name="pSelState">[in] Selection state. For more information see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLifetimeControlledObject">
      <summary>Instructs undo objects to release references to a designer or buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLifetimeControlledObject.SeverReferencesToOwner">
      <summary>Instructs undo objects to release references to a designer or buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLineAttributes"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLineAttributes.SetLineSeparator(System.Int32[],System.Int32,System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rgLines">[in]</param>
      <param name="cLines">[in]</param>
      <param name="fRemoveAll">[in]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLinkCapableUndoManager"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLinkCapableUndoManager.AdviseLinkedUndoClient(Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoClient)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pClient">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoClient" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLinkCapableUndoManager.UnadviseLinkedUndoClient">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoClient">
      <summary>Indicates that one undo manager is blocking another undo manager from executing a linked action.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoClient.OnInterveningUnitBlockingLinkedUndo">
      <summary>Indicates that the undo manager is blocking another undo manager from executing a linked action.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoTransactionManager">
      <summary>Implements the linked undo stack feature.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoTransactionManager.AbortLinkedUndo">
      <summary>Aborts a linked undo transaction.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoTransactionManager.CloseLinkedUndo">
      <summary>Successfully closes a linked undo transaction.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoTransactionManager.CountOpenTransactions(System.Int32@)">
      <summary>Returns the nesting level of the linked undo transactions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCount">Pointer to a count object. The count object indicates the levels of nesting.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoTransactionManager.IsAborted(System.Int32@)">
      <summary>Determines if the linked undo transaction is aborted.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfAborted">Pointer to a flag, true indicating aborted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoTransactionManager.IsStrict(System.Int32@)">
      <summary>Determines if the linked undo transaction is strict.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfStrict">Pointer to a flag, true indicating strict.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoTransactionManager.OpenLinkedUndo(System.UInt32,System.String)">
      <summary>Opens a linked undo transaction parent unit.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Value taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags" /> enumeration. <see cref="F:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags.mdtDefault" /> specifies the transaction to be nonstrict, which is default behavior. The other possible enum values are <see cref="F:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags.mdtStrict" /> which specifies the undo linking behavior as strict, and <see cref="F:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags2.mdtGlobal" />, which specifies the undo linking behavior as global. For more information, see the Remarks section later in this topic.</param>
      <param name="pszDescription">[in] Localized string that describes this action; appears in the undo/redo dropdown menus. This value may not be null.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsMergeableUIItem"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMergeableUIItem.GetCanonicalName(System.String@)">
      <summary>Returns non-localized item name, used for comparison in inter-language merging of items.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrNonLocalizeName">[out] String containing the canonical name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMergeableUIItem.GetDescription(System.String@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrDesc">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMergeableUIItem.GetDisplayName(System.String@)">
      <summary>Returns the localized item name used for display in UI.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrDisplayName">[out] String containing the display name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMergeableUIItem.GetMergingPriority(System.Int32@)">
      <summary>Returns the merging priority.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piMergingPriority">[out] Priority</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData">
      <summary>Sets method data for the tip window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.GetContextStream(System.Int32@,System.Int32@)">
      <summary>Returns the context stream for the tip.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPos">[out] Integer identifying the stream position in the text buffer.</param>
      <param name="piLength">[out] Integer identifying the length of text in the stream past <paramref name="piPos" /> that should not be obscured with the method tip window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.GetCurMethod">
      <summary>Returns the current method number.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.GetCurrentParameter(System.Int32)">
      <summary>Returns the current parameter number.</summary>
      <param name="iMethod">[in] Number of the method that contains the desired parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.GetMethodText(System.Int32,Microsoft.VisualStudio.TextManager.Interop.MethodTextType)">
      <summary>Returns a method return type, method name, or method description.</summary>
      <param name="iMethod">[in] Method number.</param>
      <param name="type">[in] Method text type values to return. For a list of <paramref name="type" /> values see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MethodTextType" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.GetOverloadCount">
      <summary>Returns the number of overloaded methods.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.GetParameterCount(System.Int32)">
      <summary>Returns the total number of parameters in a specified method.</summary>
      <param name="iMethod">[in] Long containing the requested number of parameters.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.GetParameterText(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.ParameterTextType)">
      <summary>Returns the name of a specified parameter for a specified method.</summary>
      <param name="iMethod">[in] Method number for which to obtain parameter information.</param>
      <param name="iParm">[in] Parameter number for which information is required.</param>
      <param name="type">[in] Parameter type. For a list of <paramref name="type" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ParameterTextType" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.NextMethod">
      <summary>Returns the next method number.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.OnDismiss">
      <summary>Dismisses the context.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.PrevMethod">
      <summary>Returns the previous method number.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.UpdateView">
      <summary>Updates the tip window when context or content has changed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow">
      <summary>Provides a method tip window for an item in a language service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow.Dismiss">
      <summary>The window is being dismissed by the view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow.GetContextStream(System.Int32@,System.Int32@)">
      <summary>Returns the context stream. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPos">[out] Starting position of the context stream.</param>
      <param name="piLength">[out] Length of the context stream from the starting position, <paramref name="piPos." /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow.GetSizePreferences(Microsoft.VisualStudio.OLE.Interop.RECT[],Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA[])">
      <summary>Returns the size preferences for the tip window.  </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="prcCtxBounds">[out]The bounding rectangle of the tip window in screen coordinates.</param>
      <param name="pSizeData">[out]Size and position of the tip window. For a list of <paramref name="pSizeData" /> values see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow.Paint(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Paints the tip window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hdc">[in]Handle to the display context in which to draw the tip window.</param>
      <param name="prc">[in] Specifies the bounding rectangle for the tip window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow.SetMethodData(Microsoft.VisualStudio.TextManager.Interop.IVsMethodData)">
      <summary>Sets method data to display in the method tip window and releases previous method data.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pMethodData">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData" /> interface, which is used to set method and parameter information for the method tip window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodTipWindow.WndProc(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Method information not provided. Do not use this method.</summary>
      <param name="hwnd">Do not use.</param>
      <param name="iMsg">Do not use.</param>
      <param name="wParam">Do not use.</param>
      <param name="lParam"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsMouseCursorProvider">
      <summary>Allows a marker to alter the mouse cursor when it is over its glyph.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsMouseCursorProvider.SetMouseCursor(System.UInt32)">
      <summary>Indicates that the text marker client should call the Win 32 API function SetCursor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Currently unused.)</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsNavigableLocationResolver"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsNavigableLocationResolver.GetDisplayText(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.UInt32@,System.String@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Reserved. Set to zero.</param>
      <param name="ptsBase">[in] Current selection or caret location.</param>
      <param name="pBuffer">[in] Base buffer.</param>
      <param name="dwOutFlags">[out] If current location is a URL.</param>
      <param name="pbstrDisplayText">[out] Text to display in context menu.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsNavigableLocationResolver.GetPathFromLocation(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.String,System.UInt32@,System.String@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Reserved. Set to zero.</param>
      <param name="ptsBase">[in] Current selection or caret location.</param>
      <param name="pBuffer">[in] Base buffer.</param>
      <param name="pszDisplayText">[in] Display Text from <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsNavigableLocationResolver.GetDisplayText(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.UInt32@,System.String@)" /></param>
      <param name="dwOutFlags">[out] true if current location is a URL</param>
      <param name="pbstrPath">[out] As much of a path as possible or just the file name.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsOutliningCapableLanguage">
      <summary>Provides support for the Collapse to Definitions command from the outlining menu.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsOutliningCapableLanguage.CollapseToDefinitions(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,Microsoft.VisualStudio.TextManager.Interop.IVsOutliningSession)">
      <summary>Outlines a specific range of text in response to the Collapse to Definitions command.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTextLines">[in] Pointer to the text buffer.</param>
      <param name="pSession">[in] Pointer to the outlining session object for the text buffer.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsOutliningSession">
      <summary>Adds one or more outline regions to a text buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsOutliningSession.AddOutlineRegions(System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.NewOutlineRegion[])">
      <summary>Creates an outlining region over the specified span of text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwOutliningFlags">[in] Outlining flags controlling whether existing outlining regions are removed or preserved. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ADD_OUTLINE_REGION_FLAGS" />.</param>
      <param name="cRegions">[in] Number of outlining regions to add.</param>
      <param name="rgOutlnReg">[in, size_is(cRegions)] Caller-allocated array of outlining regions to add. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewOutlineRegion" />. </param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType">
      <summary>Describes how a custom marker type behaves and appears to the user.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType.DrawGlyphWithColors(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerColorSet,System.UInt32,System.Int32)">
      <summary>Draws a glyph in the given display context and bounding rectangle using the provided colors.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hdc">[in] Handle to a display device context that defines the visible region of interest.</param>
      <param name="pRect">[in] Pointer to a RECT structure that defines the bounding rectangle for the marker.</param>
      <param name="iMarkerType">[in] Integer containing the marker type.</param>
      <param name="pMarkerColors">[in] Pointer to a marker colors object.</param>
      <param name="dwGlyphDrawFlags">[in] Options for drawing the glyph in the widget margin. For a list of <paramref name="dwGlyphDrawFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.GLYPHDRAWFLAGS" /></param>
      <param name="iLineHeight">[in] Integer specifying the line height.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType.GetBehaviorFlags(System.UInt32@)">
      <summary>Controls how the marker tracks text when edits occur.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwFlags">[out] Pointer to flags specifying how the marker tracks text when edits occur. For a list of <paramref name="pdwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType.GetDefaultColors(Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[],Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[])">
      <summary>Returns the default foreground and background colors for a marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piForeground">[out] Pointer to the default foreground color. For a list of <paramref name="piForeground" /> values, see COLORINDEX4C54D3F1-4AEB-497F-8311-2AB027C8BAD8.</param>
      <param name="piBackground">[out] Pointer to the default background color. For a list of <paramref name="piBackground" /> values, see COLORINDEX4C54D3F1-4AEB-497F-8311-2AB027C8BAD8.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType.GetDefaultFontFlags(System.UInt32@)">
      <summary>Specifies additional modifications to text appearance determined by the marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwFontFlags">[out] Pointer to additional font options for markers. For a list of <paramref name="pdwFontFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType.GetDefaultLineStyle(Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[],Microsoft.VisualStudio.TextManager.Interop.LINESTYLE[])">
      <summary>Returns the default line attributes for a custom marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLineColor">[out] Pointer to the default line color. For a list of <paramref name="piLineColor" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX" />. </param>
      <param name="piLineIndex">[out] Pointer to the default line style. For a list of <paramref name="piLineIndex" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType.GetPriorityIndex(System.Int32@)">
      <summary>Returns the priority index for the custom marker type, with the highest priority value receiving the topmost placement.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPriorityIndex">[out] Pointer to the priority index for the type of text marker. For a list of <paramref name="piPriorityIndex" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType.GetVisualStyle(System.UInt32@)">
      <summary>Returns the appearance, location, and coloring of a custom marker type as a bit filed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwVisualFlags">[out] A bitwise OR of flags indicating the appearance, location, and coloring of a marker. For a list of <paramref name="pdwVisualFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL" />. </param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsPersistentTextImage">
      <summary>Represents the image that is persisted and not persisted. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPersistentTextImage.Image_Alloc(System.Int32)">
      <param name="iSize">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPersistentTextImage.Image_CloseFullTextScan">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPersistentTextImage.Image_Free(System.IntPtr)">
      <param name="p">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPersistentTextImage.Image_FullTextRead(System.String@,System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppszText">[out]</param>
      <param name="piLength">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPersistentTextImage.Image_GetLength"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPersistentTextImage.Image_LoadText(System.String,System.Int32,System.UInt32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszText">[in]</param>
      <param name="iLength">[in]</param>
      <param name="dwFlags">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPersistentTextImage.Image_OpenFullTextScan">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPersistentTextImage.Image_Realloc(System.IntPtr@,System.Int32)">
      <param name="p">[in, out]</param>
      <param name="iSize">[in]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsPreliminaryTextChangeCommitEvents">
      <summary>Notifies clients of a commit gesture to trigger a text buffer event, and provides the range of text changed.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsPreliminaryTextChangeCommitEvents.OnChangesCommitted(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <param name="dwGestureFlags">[In] Flags indicating the type of changes made. For a list of <paramref name="dwGestureFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags" />.</param>
      <param name="ptsChanged">[In] Span of text modified.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsProvideColorableItems">
      <summary>Informs the code editor about custom colorable items proffered by the language service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsProvideColorableItems.GetColorableItem(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem@)">
      <summary>Determines the item information for each custom colorable item proffered by the language service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iIndex">[in] Integer containing the index value for the custom colorable item. This value is never zero.</param>
      <param name="ppItem">[out] Custom colorable item object. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsColorableItem" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsProvideColorableItems.GetItemCount(System.Int32@)">
      <summary>Determines the number of custom colorable items proffered by the language service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piCount">[out] The number of custom colorable items provided by the language service.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsQueryLineChangeCommit">
      <summary>Determines if an <see cref="F:Microsoft.VisualStudio.TextManager.Interop.ChangeCommitGestureFlags.CCG_CARET_ON_NEW_BUFFER_LINE" /> commit event should be fired.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsQueryLineChangeCommit.QuerySendEnterLineCommit(System.UInt32,System.Int32,System.Int32,System.UInt32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in]</param>
      <param name="iLineStart">[in]</param>
      <param name="iLineEnd">[in]</param>
      <param name="dwQuerySendCommitFlags">[out]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsRegisterFindScope">
      <summary>Register a find scope for Find in Files.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsRegisterFindScope.RegisterFindScope(Microsoft.VisualStudio.TextManager.Interop.IVsFindScope,System.UInt32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pScope">[in]</param>
      <param name="pdwCookie">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsRegisterFindScope.UnRegisterFindScope(System.UInt32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwCookie">[in]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsShortcutManager"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsShortcutManager.CreateItem(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.String)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iShortcutLine">[in]</param>
      <param name="pBuffer">[in]</param>
      <param name="pszBufMoniker">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsShortcutManager.ReadUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pOptionsStream">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsShortcutManager.RemoveItem(Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pMarker">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsShortcutManager.WriteUserOptions(Microsoft.VisualStudio.OLE.Interop.IStream)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pOptionsStream">[in]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane">
      <summary>Represents the split pane.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane.ClosePane">
      <summary>Closes the pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane.DetachPane">
      <summary>Detaches the pane from its parent splitter, without closing.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane.GetPaneFlags(System.UInt32@)">
      <summary>Returns the pane flags.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwPaneFlags">[out] The flags.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane.GetParentSplitter(Microsoft.VisualStudio.TextManager.Interop.IVsSplitter@)">
      <summary>Gets the parent splitter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppSplitter">[out] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane.GetParentWindow(System.IntPtr@)">
      <summary>Returns the parent window of the pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="phwndParent">[out] Parent window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane.GetPosition(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Gets the position of the pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLeft">[out] The left side of the pane.</param>
      <param name="piTop">[out] The top of the pane.</param>
      <param name="piRight">[out] The right side of the pane.</param>
      <param name="piBottom">[out] The bottom of the pane.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane.GetSizeExtents(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Returns minimum and maximum size values for this pane. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piMinHorz">[out] The minimum horizontal size.</param>
      <param name="piMaxHorz">[out] The maximum horizontal size.</param>
      <param name="piMinVert">[out] The minimum vertical size.</param>
      <param name="piMaxVert">[out] The maximum vertical size.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane.NotifyPane(Microsoft.VisualStudio.TextManager.Interop.SPLITNOTIFYCODE)">
      <summary>Sends notification of splitter adjustment.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCode">[in] <see cref="TheT:Microsoft.VisualStudio.TextManager.Interop.SPLITNOTIFYCODEvalue" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane.SetFocus">
      <summary>Set focus on this pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane.SetParentSplitter(Microsoft.VisualStudio.TextManager.Interop.IVsSplitter)">
      <summary>Sets the parent splitter for this pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSplitter">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Sets the position relative to the parent window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLeft">[in] The left side.</param>
      <param name="iTop">[in] The top.</param>
      <param name="iRight">[in] The right side.</param>
      <param name="iBottom">[in] The bottom.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitRoot">
      <summary>Represents the root of the split pane.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitRoot.GetPane(Microsoft.VisualStudio.TextManager.Interop.PANETYPE,Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane@)">
      <summary>Gets the split pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="PANETYPE">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.PANETYPE" /> that specifies which pane to get.</param>
      <param name="ppPane">[out] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitRoot.GetRootSplitter(Microsoft.VisualStudio.TextManager.Interop.IVsSplitter@)">
      <summary>Gets the root splitter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppPane">[out] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitRoot.GetWindowHandle(System.IntPtr@)">
      <summary>Gets the window handle.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="phwnd">[out] The window handle.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter">
      <summary>Represents the split pane.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.ClosePane">
      <summary>Closes this pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.DetachPane">
      <summary>Detaches this pane from its parent splitter, without closing.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.GetPane(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane@)">
      <summary>Returns the indicated pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iIndex">[in] The index of the pane. <paramref name="iIndex" /> can be 0 (primary) or 1 (secondary)</param>
      <param name="ppPane">[out] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.GetPaneFlags(System.UInt32@)">
      <summary>Returns the pane flags.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwPaneFlags">[out] The pane flags.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.GetParentSplitter(Microsoft.VisualStudio.TextManager.Interop.IVsSplitter@)">
      <summary>Gets the parent splitter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppSplitter">[out] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.GetParentWindow(System.IntPtr@)">
      <summary>Get the parent window of this pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="phwndParent">[out] The window handle of the parent.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.GetPosition(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Gets the position of the splitter relative to its parent.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLeft">[out] The left side.</param>
      <param name="piTop">[out] The top.</param>
      <param name="piRight">[out] The right side.</param>
      <param name="piBottom">[out] The bottom.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.GetSizeExtents(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Returns the minimums and maximums for this pane (<see cref="F:Microsoft.VisualStudio.VSConstants.E_NOTIMPL" /> is allowed; 0 and full screen are defaults).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piMinHorz">[out] The minimum horizontal size.</param>
      <param name="piMaxHorz">[out] The maximum horizontal size.</param>
      <param name="piMinVert">[out] The minimum vertical size.</param>
      <param name="piMaxVert">[out] The maximum vertical size.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.HandleMessage(System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Handles mouse-oriented message.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMsg">[in] The ID of the message.</param>
      <param name="wParam">[in] Information about the message.</param>
      <param name="lParam">[in] Information needed by the message.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.IsPanePrimary(Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane)">
      <summary>Determines if the pane is the primary pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" /> indicating that the pane is the primary. <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> means it is the secondary pane.</returns>
      <param name="pPane">The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.NotifyPane(Microsoft.VisualStudio.TextManager.Interop.SPLITNOTIFYCODE)">
      <summary>Notifies of splitter adjustment.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iCode">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.SPLITNOTIFYCODE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.NotifySplitter(Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane,Microsoft.VisualStudio.TextManager.Interop.PANEEVENTS)">
      <summary>Called by child panes when they get focus, close, or other events.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pPane">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane" />.</param>
      <param name="iEvent">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.PANEEVENTS" /> value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.SetFocus">
      <summary>Sets focus on this pane</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.SetParentSplitter(Microsoft.VisualStudio.TextManager.Interop.IVsSplitter)">
      <summary>Sets/Gets the parent splitter for this pane.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSplitter">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.SetPosition(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Sets the position relative to the parent window..</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLeft">[in] The left side.</param>
      <param name="iTop">[in] The top.</param>
      <param name="iRight">[in] The right side.</param>
      <param name="iBottom">[in] The bottom.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter.SplitPane(Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane,System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsSplitter@)">
      <summary>Splits the indicated pane of this splitter.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pNewPane">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane" /> of the new pane.</param>
      <param name="iIndex">[in] The index of the pane.</param>
      <param name="iSize">[in] The size of the pane.</param>
      <param name="dwFlags">[in] The flags.</param>
      <param name="ppSplitter">[out] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSplitter" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.GetBaseBufferAnchor(System.Int32@,System.Int32@)">
      <summary>Gets the base buffer anchor of the region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piAnchorLine">[out] The index of the base buffer location.</param>
      <param name="piAnchorIndex">[out] The current base buffer location of the region.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.GetBehavior(System.UInt32@)">
      <summary>Gets the behavior of the region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwBehavior">[out] Pointer to a DWORD containing the behavior of the region. For a list of <paramref name="pdwBehavior" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.GetClientData(System.UInt32@)">
      <summary>Gets client data</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwData">[out] The data associated with the region.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.GetMarkerType(System.Int32@)">
      <summary>Gets the marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piMarkerType">[out] See SYNTHETIC_REGION_TYPE enum</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.GetSyntheticLayerSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSpan">[out] The extent of the region in coordinates of the owning layer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.GetText(System.String@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrText">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.GetTextImage(Microsoft.VisualStudio.TextManager.Interop.IVsTextImage@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppImage">[out] A relative text image that encompasses only the synthetic region's text</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.GetTextLayer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppLayer">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.Invalidate(System.UInt32)">
      <summary>Handles deletion management.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwUpdate">[in] </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.IsValid(System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pfValid">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.SetBaseBufferAnchor(System.Int32,System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iAnchorLine">[in]</param>
      <param name="iAnchorIndex">[in] Changes the current base buffer location of the region.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.SetClientData(System.UInt32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwData">[in] Changes the <paramref name="dwClient" /> DWORD associated with the region.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.SetText(System.String)">
      <summary>Sets the text of the region..</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszText">[in] The text.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextClient"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextClient.ExecMarkerCommand(Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion,System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSynthReg">[in] The synthetic region of interest.</param>
      <param name="iItem">[in] The marker command to exec. See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues2" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextClient.GetErrorText(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion,System.String@)">
      <summary>Returns tip text for hovering.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReason">[in] Reason for the call.</param>
      <param name="pSynthReg">[in] The synthetic region of interest.</param>
      <param name="pbstrText">[out] A <paramref name="BSTR" /> containing the text to display.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextClient.GetMarkerCommandInfo(Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion,System.Int32,System.String[],System.UInt32[])">
      <summary>Returns marker command information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSynthReg">[in] The synthetic region of interest.</param>
      <param name="iItem">[in] The marker command to execute. (see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" />)</param>
      <param name="pbstrText">[out] [optional to set] The title for command.</param>
      <param name="pcmdf">[out] Command flags for visibility, being enabled, etc.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextClient.GetTipText(Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion,System.String[])">
      <summary>Returns the tip text for hovering.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSynthReg">[in] The synthetic region of interest.</param>
      <param name="pbstrText">[out] A <paramref name="BSTR" /> that contains the text to display.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextClient.OnBeforeSessionEnd"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextClient.OnSyntheticRegionChange(Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion,Microsoft.VisualStudio.TextManager.Interop.SYNTHETIC_REGION_EVENT)">
      <param name="pSynthReg">[in] The synthetic region of interest.</param>
      <param name="EventCode">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.SYNTHETIC_REGION_EVENT" /> value.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextManager">
      <summary>Immediately stops the synthetic text session.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextManager.CreateSyntheticTextSession(System.UInt32,System.Object,Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextClient,Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextSession@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Unused; must be zero</param>
      <param name="pOwningObject">[in] The owning object (normally the buffer)</param>
      <param name="pClient">[in] The client interface</param>
      <param name="ppState">[out] The new session.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextManager.GetSyntheticTextSession(System.Object,Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextSession@)">
      <summary>Asks the owning object whether a synthetic text session currently exists.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pOwningObject">[in] The owning object (normally the buffer)</param>
      <param name="ppSession">[out] An existing <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextSession" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextSession">
      <summary>Handles the addition of and communication with synthetic text sessions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextSession.AddSyntheticRegions(System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.NewSyntheticRegion[],Microsoft.VisualStudio.TextManager.Interop.IVsEnumSyntheticRegions[])">
      <summary>Adds synthetic text sessions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwUpdateFlags">[in] Update flags. For values of <paramref name="dwUpdateFlags" /> see the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CHANGE_SYNTHETIC_REGION_FLAGS" /> enumeration.</param>
      <param name="cRegions">[in] Number of regions to add.</param>
      <param name="rgSynthReg">[in] An array of <paramref name="cRegions" /> structs defining the new regions.</param>
      <param name="ppEnum">[out] May be null; if non-null, returns an enumeration of the new regions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextSession.EnumSyntheticRegions(System.UInt32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.IVsEnumSyntheticRegions@)">
      <summary>Returns a static snapshot list of synthetic regions.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFindFlags">[in] Indicates how to find the region. For values of <paramref name="dwFindFlags" /> see the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FIND_SYNTHETIC_REGION_FLAGS" /> enumeration.</param>
      <param name="dwCookie">[in] Additional search parameter; can be used to search for a specific client DWORD.</param>
      <param name="ptsRange">[in] Search parameter for finding text.</param>
      <param name="ppEnum">[out] The resulting enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextSession.Terminate">
      <summary>Tells the session to sever its link, and drop its COM reference, to the client.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticTextSession.UnadviseClient">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer">
      <summary>Acts as the base interface for the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VsTextBuffer" /> object and provides general information about the text buffer's properties. Also see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferEx" />, which adds GetTrackChanges and SetTrackChangesSuppression methods.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.GetLanguageServiceID(System.Guid@)">
      <summary>Returns the unique identifier of the language that is providing colorization and other attribute data to this buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidLangService">[out] Pointer to a unique identifier of the language service. Buffers without languages can return CLSID_NULL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.GetLastLineIndex(System.Int32@,System.Int32@)">
      <summary>Returns the last line in the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLine">[out] Pointer to the last line in the text buffer.</param>
      <param name="piIndex">[out] Pointer to the index number of <paramref name="piLine" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.GetLengthOfLine(System.Int32,System.Int32@)">
      <summary>Returns the length of a line in the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose length is requested.</param>
      <param name="piLength">[out] Pointer to the length of the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.GetLineCount(System.Int32@)">
      <summary>Returns the number of lines in the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLineCount">[out] Pointer to the number of lines in the buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.GetLineIndexOfPosition(System.Int32,System.Int32@,System.Int32@)">
      <summary>Returns the line and column numbers in the text buffer, given a position number.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPosition">[in] Position number of the desired line.</param>
      <param name="piLine">[out] Pointer to the line number.</param>
      <param name="piColumn">[out] Pointer to the column position on the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.GetPositionOfLine(System.Int32,System.Int32@)">
      <summary>Returns the position number of a line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose position is requested.</param>
      <param name="piPosition">[out] Pointer to the equivalent position number.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.GetPositionOfLineIndex(System.Int32,System.Int32,System.Int32@)">
      <summary>Returns the position number in the text buffer, given a line and column number.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose position is requested.</param>
      <param name="iIndex">[in] Location of the character on <paramref name="iLine" />.</param>
      <param name="piPosition">[out] Pointer to the equivalent position number.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.GetSize(System.Int32@)">
      <summary>Returns the size in characters of the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLength">[out] Pointer to the size of the buffer, which is not necessarily the same value as the size of the buffer's internally-allocated memory or the size of the file (if any) represented by the buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.GetStateFlags(System.UInt32@)">
      <summary>Returns the state flags of the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwReadOnlyFlags">[out] Bit-wise union of the enumeration <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS" /> values, which can be modified, read-only, or read-only on disk.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.GetUndoManager(Microsoft.VisualStudio.OLE.Interop.IOleUndoManager@)">
      <summary>Returns the undo manager for this buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppUndoManager">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.InitializeContent(System.String,System.Int32)">
      <summary>Initializes the content of the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszText">[in] Text to insert into the buffer.</param>
      <param name="iLength">[in] Number of characters to be inserted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.LockBuffer">
      <summary>Has no effect. Deprecated.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.LockBufferEx(System.UInt32)">
      <summary>Has no effect. Deprecated.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">Has no effect. Deprecated. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.Reload(System.Int32)">
      <summary>Reloads the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fUndoable">[in] Specifies whether the unload action is undoable. Currently, non-undo support is not implemented, so the reload is always undoable.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.Reserved1">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.Reserved10">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.Reserved2">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.Reserved3">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.Reserved4">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.Reserved5">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.Reserved6">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.Reserved7">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.Reserved8">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.Reserved9">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.SetLanguageServiceID(System.Guid@)">
      <summary>Sets the unique identifier of the language that is providing colorization and other attribute data to the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidLangService">[in] Identifier of the language service. Buffers without languages can be CLSID_NULL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.SetStateFlags(System.UInt32)">
      <summary>Sets the state flags of the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReadOnlyFlags">[in] Bitwise union of the enumeration <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS" /> values, which can be modified, read-only, or read-only on disk.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.UnlockBuffer">
      <summary>Has no effect. Deprecated.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.UnlockBufferEx(System.UInt32)">
      <summary>Has no effect. Deprecated.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">Has no effect. Deprecated.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferDataEvents">
      <summary>Notifies clients when a text buffer is initialized and when changes are made to text buffer data.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferDataEvents.OnFileChanged(System.UInt32,System.UInt32)">
      <summary>Forwards the IVsFileChangeEvents::FilesChanged notification that the text buffer monitors to other interested parties.</summary>
      <param name="grfChange">[in] Specifies the type of change made to the file. For more information, see <see cref="T:Microsoft.VisualStudio.Shell.Interop._VSFILECHANGEFLAGS" />.</param>
      <param name="dwFileAttrs">[in] File attributes that changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferDataEvents.OnLoadCompleted(System.Int32)">
      <summary>Notifies client when the buffer is initialized.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fReload">[in] Specifies that the load was a result of a reload and not a "fresh" load.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferEvents">
      <summary>Notifies clients when a new language service is associated with a text buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferEvents.OnNewLanguageService(System.Guid@)">
      <summary>Notifies the client when a new language service is associated with a buffer.</summary>
      <param name="sidLangServiceID">[in] Reference ID of the new language service.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferTempInit">
      <summary>Temporary interface for special initialization.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBufferTempInit.InitializeContentEx(Microsoft.VisualStudio.TextManager.Interop.BUFFERINITEX[])">
      <summary>New initialization methods. </summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pInit">[in]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextColorState">
      <summary>Changes the color state of lines in a text buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextColorState.GetColorStateAtStartOfLine(System.Int32,System.Int32@)">
      <summary>Returns the buffer's cached state for the start of the given line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Line of interest.</param>
      <param name="piState">[out] Current color state.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextColorState.ReColorizeLines(System.Int32,System.Int32)">
      <summary>Recalculates the color state of lines in a text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iTopLine">[in] First line to check.</param>
      <param name="iBottomLine">[in] Last line to check.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextEditorPropertyCategoryContainer">
      <summary>Allows an object to expose a set of text editor properties.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextEditorPropertyCategoryContainer.GetPropertyCategory(System.Guid@,Microsoft.VisualStudio.TextManager.Interop.IVsTextEditorPropertyContainer@)">
      <summary>Returns the specified property category.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="rguidCategory">[in] Specifies the GUID category for the property. Predefined categories for the core text editor are GUID_EditPropCategory_View_MasterSettings and GUID_EditPropCategory_TextMgr_Global, as defined in textmgr.idl. Other objects can define different categories, as required.</param>
      <param name="ppProp">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextEditorPropertyContainer" /> object, which allows you to get, set, and remove editor properties.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextEditorPropertyContainer">
      <summary>Manages properties of text editors.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextEditorPropertyContainer.GetProperty(Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID,System.Object@)">
      <summary>Returns the specified text editor property.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="idProp">[in] Specified property to return. For a list of <paramref name="idprop" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID" />.</param>
      <param name="pvar">[out] Variant containing the returned property information.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextEditorPropertyContainer.RemoveProperty(Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID)">
      <summary>Removes a property for a text editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="idProp">[in] Property to remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextEditorPropertyContainer.SetProperty(Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID,System.Object)">
      <summary>Sets the specified property for the text editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="idProp">[in] Specified property to set. For a list of <paramref name="idprop" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID" />.</param>
      <param name="var">[in] Variant containing the property information to set.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextFind">
      <summary>Finds a given block of text in the buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextFind.Find(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>Finds a given block of text in the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszText">[in] Pointer to a null terminated string containing the text.</param>
      <param name="iStartLine">[in] Integer containing the start line.</param>
      <param name="iStartIndex">[in] Integer index value for the starting character within the line. Must be less than or equal to the length of line.)</param>
      <param name="iEndLine">[in] Integer value for the end of the line.</param>
      <param name="iEndIndex">[in] Integer index value for the ending character in the line. Must be less than or equal to the length of the line.)</param>
      <param name="iFlags">[in] Integer containing the flags.</param>
      <param name="piLine">[out] Pointer to the line number where the desired text is located.</param>
      <param name="piCol">[out] Pointer to the column number on the line where the desired text is located.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextHidingLayerModule">
      <summary>Implemented by any layer module that hides text.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextHidingLayerModule.MakeBaseSpanVisible(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Makes a text span visible.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.<see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />: the span was hidden but is now visible<see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" />: the span wasn't hidden by this layer<see cref="F:Microsoft.VisualStudio.VSConstants.E_FAIL" />: the span is hidden but the layer doesn't know how to unhide it (will result in the layer being destroyed)</returns>
      <param name="pBaseSpan">Make EVERY CHARACTER of the span visible.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage">
      <summary>Supports text string matching.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.AdviseTextImageEvents(Microsoft.VisualStudio.TextManager.Interop.IVsTextImageEvents,System.UInt32@)">
      <summary>Registers the environment to receive notification of text image changes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSink">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageEvents" /> interface on the object requesting notification of text image events.</param>
      <param name="pCookie">[out] Pointer to an abstract handle for the referenced event sink. This value is required to unadvised the event sink using <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.UnadviseTextImageEvents(System.UInt32)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.GetCharSize(System.Int32@)">
      <summary>Returns the number of characters in the text image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcch">[out] Pointer to a character count of the text image.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.GetLine(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])">
      <summary>Provides direct, line-oriented access to the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfGet">[in] Flags providing additional information about the line. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS" />.</param>
      <param name="iLine">[in] Integer containing the line number. This is a zero-based value.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pLineData">[out] Pointer to the filled-in <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure. This is allocated by the environment and filled in by the GetLine method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.GetLineLength(System.Int32,System.Int32@)">
      <summary>Return the length of a line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Integer containing the line number.</param>
      <param name="piLength">[out] Pointer to an integer containing the character count of the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.GetLineSize(System.Int32@)">
      <summary>Returns the number of lines in the text image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcLines">[out] Pointer to a count of lines in the text image.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.GetOffsetOfTextAddress(Microsoft.VisualStudio.TextManager.Interop.TextAddress,System.Int32@)">
      <summary>Return the buffer address of a given text address.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ta">[in] Specifies the requested text address.</param>
      <param name="piOffset">[out] Pointer to an integer containing the offset from the start of the text image buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.GetSpanLength(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32@)">
      <summary>Return the number of characters in a text span.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pts">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
      <param name="pcch">[out] Pointer to a character count of the text span.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.GetText(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32,System.UInt16[])">
      <summary>Return the text of a text span.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pts">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
      <param name="cch">[in] Number of characters to return.</param>
      <param name="psz">[out] Pointer to a null terminated string containing the text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.GetTextAddressOfOffset(System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextAddress[])">
      <summary>Return the text address of a given buffer address.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iOffset">[in] Integer containing the offset from the start of the text image buffer.</param>
      <param name="pta">[out] Pointer to the text address.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.GetTextBSTR(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.String@)">
      <summary>Return the text of a text span as a BSTR</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pts">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
      <param name="pbstrText">[out] Pointer to a BSTR containing the text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.LockImage(System.UInt32)">
      <summary>Notifies that the text image is in use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfLock">[in] Specifies a locking flag. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.ReleaseLine(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])">
      <summary>Releases the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pLineData">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure to be released.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.Replace(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Notification of a text span replacement.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Double word containing flags. For future use. Set to zero.</param>
      <param name="pts">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
      <param name="cch">[in] Count of characters in <paramref name="pchText" />.</param>
      <param name="pchText">[in] Pointer to a text string.</param>
      <param name="ptsChanged">[out] Specifies the modified <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.UnadviseTextImageEvents(System.UInt32)">
      <summary>Cancels the environment's registration to receive notifications of text image changes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="Cookie">[in] Abstract handle for the referenced event sink.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.UnlockImage(System.UInt32)">
      <summary>Notifies that the text image is not in use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfLock">[in] Specifies a locking flag. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" /> enumeration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageEvents">
      <summary>Implemented to notify a client of a text image change.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageEvents.OnTextChange(Microsoft.VisualStudio.TextManager.Interop.TextAddress,Microsoft.VisualStudio.TextManager.Interop.TextAddress,Microsoft.VisualStudio.TextManager.Interop.TextAddress)">
      <summary>Notifies client of a text image change.</summary>
      <param name="taStart">[in] Starting address of text image.</param>
      <param name="taEnd">[in] Ending address of text image.</param>
      <param name="taNewEnd">[in] New ending address of text image.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageUtilities">
      <summary>Provides utilities for loading and saving text files.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageUtilities.GetReplaceText(System.UInt32,System.String,Microsoft.VisualStudio.TextManager.Interop.IVsTextImage,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet,System.String@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="grfOptions">[in] Find options. Values are from the <see cref="T:EnvDTE.vsFindOptions" /> enum.</param>
      <param name="pszReplace">[in] Replacement string.</param>
      <param name="pText">[in] Text image containing string to replace.</param>
      <param name="pMatch">[in] </param>
      <param name="pTags">[in] </param>
      <param name="pbstrComputedText">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageUtilities.GetTextFormat(System.UInt32,System.UInt32,System.Byte[],System.UInt32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="vstffIn">[in]</param>
      <param name="cbData">[in]</param>
      <param name="pData">[in]</param>
      <param name="pvstffOut">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageUtilities.LoadTextFile(System.String,System.UInt32,System.UInt32@,System.String@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFileName">[in] Name of file to load.</param>
      <param name="vstffIn">[in] Instructions for format, detection</param>
      <param name="pvstffOut">[out] Text of file.</param>
      <param name="pbstr">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageUtilities.LoadTextImageFromFile(System.String,Microsoft.VisualStudio.TextManager.Interop.IVsTextImage,System.UInt32,System.UInt32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFileName">[in]</param>
      <param name="pImage">[in]</param>
      <param name="vstffIn">[in]</param>
      <param name="pvstffOut">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageUtilities.LoadTextImageFromMemory(Microsoft.VisualStudio.TextManager.Interop.IVsTextImage,System.UInt32,System.UInt32,System.Byte[],System.UInt32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pImage">[in]</param>
      <param name="vstffIn">[in]</param>
      <param name="cbData">[in]</param>
      <param name="pData">[in]</param>
      <param name="pvstffOut">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageUtilities.SaveTextImageToFile(System.String,Microsoft.VisualStudio.TextManager.Interop.IVsTextImage,System.UInt32,System.UInt32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFileName">[in]</param>
      <param name="pImage">[in]</param>
      <param name="vstffIn">[in]</param>
      <param name="pvstffOut">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageUtilities.SaveTextImageToMemory(Microsoft.VisualStudio.TextManager.Interop.IVsTextImage,System.UInt32,System.UInt32,System.Byte[],System.UInt32@,System.UInt32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pImage">[in]</param>
      <param name="vstffIn">[in]</param>
      <param name="cbData">[in]</param>
      <param name="pData">[out]</param>
      <param name="pcbWritten">[out]</param>
      <param name="pvstffOut">[out]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer">
      <summary>Handles layout between a base buffer and a view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.BaseLineIndexToLocal(System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iBaseLine">[in]</param>
      <param name="iBaseIndex">[in]</param>
      <param name="piLocalLine">[out]</param>
      <param name="piLocalIndex">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.CanReplaceLines(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line (must be &lt;= length of line).</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line (must be &lt;= length of line).</param>
      <param name="iNewLen">[in] Number of chars to insert, if any.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.CopyLineText(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32@)">
      <summary>Puts the specified span of text into a caller-allocated buffer</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line</param>
      <param name="iStartIndex">[in] Starting character index within the line (must be &lt;= length of line)</param>
      <param name="iEndLine">[in] Ending line</param>
      <param name="iEndIndex">[in] Ending character index within the line (must be &lt;= length of line)</param>
      <param name="pszBuf">[in] Text to insert, if any</param>
      <param name="pcchBuf">[in, out] On input, the number of characters to copy. On output, the required size of the buffer. Count is UNICODE characters, not bytes.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.CreateTrackingPoint(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextTrackingPoint@)">
      <summary>Creates a zero-length tracking point that is similar to a zero-length marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Line where tracking point is inserted.</param>
      <param name="iIndex">[in] Character index within the line (must be &lt;= length of line)</param>
      <param name="ppMarker">[out] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextTrackingPoint" /> that is inserted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.DeeperLayerLineIndexToLocal(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] ORing of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.DeeperLayerLineIndexToLocalFlags" /> enumeration.</param>
      <param name="pTargetLayer">[in]</param>
      <param name="iLayerLine">[in]</param>
      <param name="iLayerIndex">[in]</param>
      <param name="piLocalLine">[out]</param>
      <param name="piLocalIndex">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.EnumLayerMarkers(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsEnumLayerMarkers@)">
      <summary>Enumerates all markers.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line (must be &lt;= length of line).</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line (must be &lt;= length of line).</param>
      <param name="iMarkerType">[in]</param>
      <param name="dwFlags">[in] ORing of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS" /> enumeration.</param>
      <param name="ppEnum">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.GetBaseBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppiBuf">[out] Base buffer. <paramref name="ppiBuf" /> is AddRef'd.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.GetLastLineIndex(System.Int32@,System.Int32@)">
      <summary>Returns the length of the last line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLine">[out]</param>
      <param name="piIndex">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.GetLengthOfLine(System.Int32,System.Int32@)">
      <summary>Returns the length of a line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Line of interest.</param>
      <param name="piLength">[out] Length of the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.GetLineCount(System.Int32@)">
      <summary>Returns the number of lines.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLineCount">[out] Count of lines.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.GetLineDataEx(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in]</param>
      <param name="iLine">[in]</param>
      <param name="iStartIndex">[in]</param>
      <param name="iEndIndex">[in]</param>
      <param name="pLineData">[out]</param>
      <param name="pMarkerData">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.GetLineText(System.Int32,System.Int32,System.Int32,System.Int32,System.String@)">
      <summary>Puts the specified span of text into a BSTR.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line (must be &lt;= length of line).</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line (must be &lt;= length of line).</param>
      <param name="pbstrBuf">[out] Text of the span.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.GetMarkerData(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iTopLine">[in]</param>
      <param name="iBottomLine">[in]</param>
      <param name="pMarkerData">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.LocalLineIndexToBase(System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. Returns <see cref="F:Microsoft.VisualStudio.TextManager.Interop.TextViewErrors.VIEW_E_LOCATION_HIDDEN" /> if the coordinates you requested exist, but are hidden in the UI at present</returns>
      <param name="iLocalLine">[in]</param>
      <param name="iLocalIndex">[in]</param>
      <param name="piBaseLine">[out]</param>
      <param name="piBaseIndex">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.LocalLineIndexToDeeperLayer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTargetLayer">[in]</param>
      <param name="iLocalLine">[in]</param>
      <param name="iLocalIndex">[in]</param>
      <param name="piTargetLine">[out]</param>
      <param name="piTargetIndex">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.LockBufferEx(System.UInt32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] ORing of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" /> (currently either <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ" /> or <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ_AND_WRITE" />)</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.MapLocalSpansToTextOriginatingLayer(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextSpans,Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer@,Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextSpans@)">
      <summary>Maps a set of local spans to the shallowest layer that originates text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in]</param>
      <param name="pLocalSpanEnum">[in]</param>
      <param name="ppTargetLayer">[out]</param>
      <param name="ppTargetSpanEnum">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.ReleaseLineDataEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pLineData">[in] Releases <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.ReleaseMarkerData(Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pMarkerData">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.ReplaceLines(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Handles line breaking/joining, etc.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line (must be &lt;= length of line).</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line (must be &lt;= length of line).</param>
      <param name="pszText">[in] Text to insert, if any.</param>
      <param name="iNewLen">[in] Number of chars to insert, if any.</param>
      <param name="pChangedSpan">[out] Range of characters changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.ReplaceLinesEx(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Handles line breaking/joining, etc.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] ORing of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS" /> enum.</param>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line (must be &lt;= length of line).</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line (must be &lt;= length of line).</param>
      <param name="pszText">[in] Text to insert, if any.</param>
      <param name="iNewLen">[in] Number of chars to insert, if any.</param>
      <param name="pChangedSpan">[out] Range of characters changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer.UnlockBufferEx(System.UInt32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] ORing of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" /> (currently either <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ" /> or <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ_AND_WRITE" />)</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerEvents">
      <summary>Notifies a client that a layer's coordinate mapping is changing.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerEvents.OnMappingChange"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerEvents.OnMappingChangeComplete"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.DrawGlyph(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Draws a glyph in the given DC &amp; RECT.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hdc">[in]</param>
      <param name="pRect">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.DrawGlyphEx(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] ORing of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.GLYPHDRAWFLAGS" />.</param>
      <param name="hdc">[in]</param>
      <param name="pRect">[in]</param>
      <param name="iLineHeight">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.ExecMarkerCommand(System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iItem">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.GetBehavior(System.UInt32@)">
      <summary>Returns marker behavior.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwBehavior">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.GetCurrentSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the current span position.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSpan">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.GetMarkerCommandInfo(System.Int32,System.String[],System.UInt32[])">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iItem">[in]</param>
      <param name="pbstrText">[out]</param>
      <param name="pcmdf">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.GetPriorityIndex(System.Int32@)">
      <summary>Returns the priority index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPriorityIndex">[out] Priority.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.GetTextLayer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppLayer">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.GetTipText(System.String[])">
      <summary>Returns tool tip text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrText">[out] Tool tip text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.GetType(System.Int32@)">
      <summary>Returns marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piMarkerType">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.GetVisualStyle(System.UInt32@)">
      <summary>Returns the visual style of a marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwFlags">[out] Visual style of the marker.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.Invalidate">
      <summary>Prevents a marker from appearing in the UI.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.IsInvalidated">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.QueryClientInterface(System.Guid@,System.IntPtr@)">
      <summary>Lets the caller knowwhether the marker was invalidated</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. <see cref="F:Microsoft.VisualStudio.VSConstants.S_FALSE" /> means the marker is invalidated.</returns>
      <param name="iid"> </param>
      <param name="ppClient"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.ResetSpan(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Resets marker position.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line (must be &lt;= length of line).</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line (must be &lt;= length of line).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.SetBehavior(System.UInt32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwBehavior">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.SetType(System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMarkerType">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.SetVisualStyle(System.UInt32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker.UnadviseClient">
      <summary>Unadvise the client, if any.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker">
      <summary>Provides access to and manipulates the positioning of a text marker within a buffer. This interface has methods to retrieve or change two-dimensional coordinates.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.DrawGlyph(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Draws a glyph in the widget margin given a display context and bounding rectangle.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hdc">[in] Handle to a display device context that defines the visible region of interest for the glyph.</param>
      <param name="pRect">[in] Pointer to a RECT structure, which defines the coordinates of the upper-left and lower-right corners of the bounding rectangle for the glyph.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.ExecMarkerCommand(System.Int32)">
      <summary>Executes a text marker against a text marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iItem">[in] Integer identifying the item number for a marker type's context menu command. Values typically range from 0 to 9, but the marker type may also support command values 101 through 103.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.GetBehavior(System.UInt32@)">
      <summary>Returns a text marker behavior set by the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.SetBehavior(System.UInt32)" /> method.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwBehavior">[out] Pointer to a DWORD containing the behavior for the marker type. For a list of <paramref name="pdwBehavior" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.GetCurrentSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the current position of the text marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSpan">[out] Pointer to the range of text that the marker covers. The text span for a marker is a set of two [line, index] coordinates. This structure is allocated by the caller.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.GetLineBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <summary>Provides access to an associated text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppBuffer">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> interface of the associated buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.GetMarkerCommandInfo(System.Int32,System.String[],System.UInt32[])">
      <summary>Returns text marker command information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iItem">[in] Integer identifying the item number for a marker type's context menu command. Values typically range from 0 to 9, but the marker type may also support command values 101 through 103. For more information about these command values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" />.</param>
      <param name="pbstrText">[out] Pointer to a string identifying the marker type command text for the context menu.</param>
      <param name="pcmdf">[out] Specifies command flags.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.GetPriorityIndex(System.Int32@)">
      <summary>Returns the text marker priority index, with the highest value getting the topmost placement.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPriorityIndex">[out] Pointer to an integer containing the priority index. For a list of <paramref name="piPriorityIndex" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.GetTipText(System.String[])">
      <summary>Returns the text to display in a tip for the marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrText">[out] Pointer to the string containing the tip text for the marker type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.GetType(System.Int32@)">
      <summary>Returns a text marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piMarkerType">[out] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.GetVisualStyle(System.UInt32@)">
      <summary>Returns the visual style of a marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwFlags">[out] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.Invalidate">
      <summary>Prevents a text marker from appearing in the user interface.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.ResetSpan(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Resets the position of the text marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Line containing the beginning of the text marker.</param>
      <param name="iStartIndex">[in] Starting character index for the text marker within the line. This value must be less than or equal to the length of line.</param>
      <param name="iEndLine">[in] Line containing the end of the text marker.</param>
      <param name="iEndIndex">[in] Ending character index for the text marker within the line. This value must be length of line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.SetBehavior(System.UInt32)">
      <summary>Sets the behavior of a text marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwBehavior">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.SetType(System.Int32)">
      <summary>Sets a text marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMarkerType">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.SetVisualStyle(System.UInt32)">
      <summary>Sets the visual style of a marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker.UnadviseClient">
      <summary>Unadvises the client, if there is one.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines">
      <summary>Provides read and write access to the text buffer using two-dimensional coordinates.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.AdviseTextLinesEvents(Microsoft.VisualStudio.TextManager.Interop.IVsTextLinesEvents,System.UInt32@)">
      <summary>Method information not provided. Do not use.</summary>
      <param name="pSink">Do not use.</param>
      <param name="pdwCookie">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.CanReplaceLines(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Tests whether a given editing operation such as copy or cut can succeed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iNewLen">[in] Length of the newly inserted text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.CopyLineText(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32@)">
      <summary>Puts the specified span of text into a caller-allocated buffer (an array).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pszBuf">[in] Pointer to a caller-allocated buffer.</param>
      <param name="pcchBuf">[in, out] Pointer to a count of Unicode characters — not bytes.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.CreateEditPoint(System.Int32,System.Int32,System.Object@)">
      <summary>Creates an <see cref="T:EnvDTE.EditPoint" /> object at the given location in the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Line number of the <see cref="T:EnvDTE.EditPoint" /> object in the text buffer.</param>
      <param name="iIndex">[in] Character index of the <see cref="T:EnvDTE.EditPoint" /> object within the line.</param>
      <param name="ppEditPoint">[out] Pointer to the IDispatch interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.CreateLineMarker(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient,Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker[])">
      <summary>Creates a marker of a given type over the specified region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMarkerType">[in] Type of marker to create.</param>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pClient">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient" /> interface. Implement this interface to advise the text buffer that you want to receive notification of marker events.</param>
      <param name="ppMarker">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker" /> interface (that is, the text marker). If this parameter is null, then the marker is owned by the text buffer. An example of a buffer-owned marker is a temporary bookmark.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.CreateTextPoint(System.Int32,System.Int32,System.Object@)">
      <summary>Creates a <see cref="T:EnvDTE.TextPoint" /> object at the given location in the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Specified line to create the <see cref="T:EnvDTE.TextPoint" /> object.</param>
      <param name="iIndex">[in] Specified index position within the line to create the <see cref="T:EnvDTE.TextPoint" /> object.</param>
      <param name="ppTextPoint">[out] Pointer to the <see cref="T:EnvDTE.TextPoint" /> object created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.EnumMarkers(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsEnumLineMarkers@)">
      <summary>Enumerates a specific set of text line markers, based on the criteria specified.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iMarkerType">[in] This parameter is ignored if a value of <see cref="F:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS.EM_ALLTYPES" /> is specified for the <paramref name="dwFlags" /> parameter. Otherwise, this parameter indicates the marker type to find.</param>
      <param name="dwFlags">[in] Enumeration options. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS" />.</param>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumLineMarkers" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.FindMarkerByLineIndex(System.Int32,System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker@)">
      <summary>Locates a marker of a given type based on a line index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMarkerType">[in] Specifies the type of marker to find.</param>
      <param name="iStartingLine">[in] Starting line.</param>
      <param name="iStartingIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="dwFlags">[in] Specifies the direction to search for the marker. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FINDMARKERFLAGS" />.</param>
      <param name="ppMarker">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker" /> interface (that is, the text marker).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLanguageServiceID(System.Guid@)">
      <summary>Returns the unique identifier of the language that is providing colorization and other attribute data to this buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidLangService">[out] Pointer to a unique identifier of the language service. Buffers without languages can return CLSID_NULL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLastLineIndex(System.Int32@,System.Int32@)">
      <summary>Returns the last line in the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLine">[out] Pointer to the last line in the text buffer.</param>
      <param name="piIndex">[out] Pointer to the index number of <paramref name="piLine" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLengthOfLine(System.Int32,System.Int32@)">
      <summary>Returns the length of a line in the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose length is requested.</param>
      <param name="piLength">[out] Pointer to the length of the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineCount(System.Int32@)">
      <summary>Returns the number of lines in the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLineCount">[out] Pointer to the number of lines in the buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineData(System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATA[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])">
      <summary>Provides direct, line-oriented access to the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Buffer line to access. This is a zero-based value.</param>
      <param name="pLineData">[in,out] The filled-in <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure. This is allocated by the caller and filled in by the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineData(System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATA[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])" /> method.</param>
      <param name="pMarkerData">[in, optional] <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure. Use <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetMarkerData(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])" /> to fill the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure for the line range that you specify. If you want syntax coloring and marker attributes to return in the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure (<paramref name="pLineData" />), then you need to pass in this parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineDataEx(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])">
      <summary>Provides direct, line-oriented access to the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Flags providing additional information about the line. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS" />.</param>
      <param name="iLine">[in] The line about which information is requested. This is a zero-based value.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line. This value is ignored unless a value of <see cref="F:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS.gldeSubset" /> is specified for <paramref name="dwFlags" />.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pLineData">[in,out] Pointer to the filled-in <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure. This is allocated by the caller and filled in by the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineDataEx(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])" /> method.</param>
      <param name="pMarkerData">[in, optional] Pointer to a valid <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure. This is allocated by the caller and filled in by the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineDataEx(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])" /> method..</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineIndexOfPosition(System.Int32,System.Int32@,System.Int32@)">
      <summary>Returns the line and column numbers in the text buffer, given a position number.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPosition">[in] Position number of the desired line.</param>
      <param name="piLine">[out] Pointer to the line number.</param>
      <param name="piColumn">[out] Pointer to the column position on the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineText(System.Int32,System.Int32,System.Int32,System.Int32,System.String@)">
      <summary>Returns the specified span of text in a BSTR.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. This value must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. This value must be less than or equal to the length of the line.</param>
      <param name="pbstrBuf">[out] Text to insert, if any.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetMarkerData(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])">
      <summary>Returns text marker data for the specified line range within the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iTopLine">[in] Top line of the marker data.</param>
      <param name="iBottomLine">[in] Bottom line of the marker data.</param>
      <param name="pMarkerData">[out] Pointer to filled <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure for the range indicated.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetPairExtents(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Method information is not provided. Do not use.</summary>
      <param name="pSpanIn">Do not use.</param>
      <param name="pSpanOut">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetPositionOfLine(System.Int32,System.Int32@)">
      <summary>Returns the position number of a line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose position is requested.</param>
      <param name="piPosition">[out] Pointer to the equivalent position number.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetPositionOfLineIndex(System.Int32,System.Int32,System.Int32@)">
      <summary>Returns the position number in the text buffer, given a line and column number.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose position is requested.</param>
      <param name="iIndex">[in] Location of the character on <paramref name="iLine" />.</param>
      <param name="piPosition">[out] Pointer to the equivalent position number.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetSize(System.Int32@)">
      <summary>Returns the size in characters of the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLength">[out] Pointer to the size of the buffer, which is not necessarily the same value as the size of the buffer's internally-allocated memory or the size of the file (if any) represented by the buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetStateFlags(System.UInt32@)">
      <summary>Returns the state flags of the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwReadOnlyFlags">[out] Bit-wise union of the enumeration <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS" /> values, which can be modified, read-only, or read-only on disk.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetUndoManager(Microsoft.VisualStudio.OLE.Interop.IOleUndoManager@)">
      <summary>Returns the undo manager for this buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppUndoManager">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.InitializeContent(System.String,System.Int32)">
      <summary>Initializes the content of the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszText">[in] Text to insert into the buffer.</param>
      <param name="iLength">[in] Number of characters to be inserted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.IVsTextLinesReserved1(System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATA[],System.Int32)">
      <summary>Method information is not provided. Do not use.</summary>
      <param name="iLine">Do not use.</param>
      <param name="pLineData">Do not use.</param>
      <param name="fAttributes">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.LockBuffer">
      <summary>Locks the text buffer for the purpose of access control. Deprecated.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.LockBufferEx(System.UInt32)">
      <summary>Extension of the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.LockBuffer" /> method. Deprecated.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in]Combine with a bitwise or of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" />, presently either BLF_READ or BLF_WRITE.)</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.ReleaseLineData(Microsoft.VisualStudio.TextManager.Interop.LINEDATA[])">
      <summary>Releases the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pLineData">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure to be released.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.ReleaseLineDataEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])">
      <summary>Releases the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pLineData">[in] Pointer or reference to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure to be released.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.ReleaseMarkerData(Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])">
      <summary>Cleans up the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pMarkerData">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure to be released.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.Reload(System.Int32)">
      <summary>Reloads the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fUndoable">[in] Specifies whether the unload action is undoable. Currently, non-undo support is not implemented, so the reload is always undoable.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.ReloadLines(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Replaces text without deleting markers.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be les than or equal to the length of the line.</param>
      <param name="pszText">[in] Pointer or reference to text to insert.</param>
      <param name="iNewLen">[in] Length of the newly inserted text.</param>
      <param name="pChangedSpan">[out] The range of new text inserted. Describes a starting point and an ending point, in terms of a line and index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.ReplaceLines(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Handles stream-like line editing, such as line breaking and line joining.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pszText">[in] Pointer to text to insert.</param>
      <param name="iNewLen">[in] Length of the newly inserted text.</param>
      <param name="pChangedSpan">[out] Pointer to the range of characters changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.ReplaceLinesEx(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Handles stream-like line editing, such as line breaking and line joining.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] ORing of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS" /> enum.</param>
      <param name="iStartLine">[in] Starting line</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pszText">[in] Pointer to text to insert, if any.</param>
      <param name="iNewLen">[in] Number of characters to insert, if any.</param>
      <param name="pChangedSpan">[out] Pointer to the range of characters changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.Reserved1">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.Reserved10">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.Reserved2">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.Reserved3">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.Reserved4">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.Reserved5">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.Reserved6">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.Reserved7">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.Reserved8">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.Reserved9">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.SetLanguageServiceID(System.Guid@)">
      <summary>Sets the unique identifier of the language that is providing colorization and other attribute data to the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidLangService">[in] Identifier of the language service. Buffers without languages can be CLSID_NULL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.SetStateFlags(System.UInt32)">
      <summary>Sets the state flags of the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReadOnlyFlags">[in] Bitwise union of the enumeration <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS" /> values, which can be modified, read-only, or read-only on disk.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.UnadviseTextLinesEvents(System.UInt32)">
      <summary>Not implemented. Do not use.</summary>
      <param name="dwCookie">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.UnlockBuffer">
      <summary>Unlocks a buffer locked with the method <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.LockBuffer" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.UnlockBufferEx(System.UInt32)">
      <summary>Extension of the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.UnlockBuffer" /> method.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Bitwise union of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" /> values, presently either <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ" /> or <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ_AND_WRITE" />.)</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLinesEvents">
      <summary>Notifies clients of changes to the underlying text buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLinesEvents.OnChangeLineAttributes(System.Int32,System.Int32)">
      <summary>Notifies the client when the text line attributes have been changed.</summary>
      <param name="iFirstLine">[in] First affected line, inclusive.</param>
      <param name="iLastLine">[in] Last affected line, inclusive.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLinesEvents.OnChangeLineText(Microsoft.VisualStudio.TextManager.Interop.TextLineChange[],System.Int32)">
      <summary>Notifies the client when the content of a text line in the buffer has changed.</summary>
      <param name="pTextLineChange">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextLineChange" /> structure that defines the shape of the old and new text.</param>
      <param name="fLast">[in] Obsolete; Do not use.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper">
      <summary>Enables macro recording code. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordActivateDocument">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordBookmarkClearAll">
      <summary>Clears all bookmarks.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordBookmarkNextPrev(System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fNext"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordBookmarkSetClear(System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fSet"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordChangeCase(Microsoft.VisualStudio.TextManager.Interop.CASESELECTION_TYPE)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cst">[in] Specifies case. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CASESELECTION_TYPE" /> enum.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordCollapseSelection">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordCopy">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordCut">
      <summary>Cuts action to the clipboard.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordDelete(System.Int32,System.UInt32)">
      <summary>Deletes an action.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fLeft"> </param>
      <param name="uiReps"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordDeleteSpace(System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fVertical"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordEnterBoxMode">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordFormatSelection">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordGotoLine(System.Int32,System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine"> </param>
      <param name="fExtend"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordIndentUnindent(System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fIndent"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordInsertFile(System.String)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pwszName"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordMoveSelectionAbs(Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_ABS_TYPE,System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="mst"> </param>
      <param name="fExtend"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordMoveSelectionRel(Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_REL_TYPE,System.Int32,System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="mst"> </param>
      <param name="fBackwards"> </param>
      <param name="fExtend"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordNewLine">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordPaste">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordRemovePreviousTyping(System.String)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pwszPrevChars"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordSelectAll">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordSwapAnchor">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordTabifyUntabify(System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fTabify"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordTypeChar(System.UInt16,System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="wchChar"> </param>
      <param name="fIsOvertype"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMacroHelper.RecordTypeChars(System.String,System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pwszChars"> </param>
      <param name="fIsOvertype"> </param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager">
      <summary>Provides general services for anyone wanting information about the active text views.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.AdjustFileChangeIgnoreCount(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32)">
      <summary>Increases or decreases the ignore count for file changes.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface for which to set the ignore count.</param>
      <param name="fIgnore">[in] If true, then the ignore count is increased by a value of one. If false, then the ignore count is decreased by a value of one for the referenced buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.AttemptToCheckOutBufferFromScc(Microsoft.VisualStudio.TextManager.Interop.IVsUserData,System.Int32@)">
      <summary>Method information not provided.</summary>
      <param name="pBufData">Do not use.</param>
      <param name="pfCheckoutSucceeded">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.AttemptToCheckOutBufferFromScc2(System.String,System.Int32@,System.Int32@)">
      <summary>Attempts to check out a file from source code control.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFileName">[in] Filename to check out.</param>
      <param name="pfCheckoutSucceeded">[out] Returns true if buffer checkout succeeded.</param>
      <param name="piStatusFlags">[out]Additional status flags. This is the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" /> value returned from a call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QueryEditFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@,System.UInt32@)" />. If you pass in a value of null for this parameter, then a <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" /> flag is not returned.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.CreateSelectionAction(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsTextSelectionAction@)">
      <summary>Method information is not provided. Do not use this method.</summary>
      <param name="pBuffer">Do not use.</param>
      <param name="ppAction">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.EnumBuffers(Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextBuffers@)">
      <summary>Enumerates text buffers. Not yet implemented.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppEnum">[out] Pointer to the IVsEnumBuffers interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.EnumIndependentViews(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsEnumIndependentViews@)">
      <summary>Enumerates the independent views.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface associated with the view.</param>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumIndependentViews" /> interface to enumerate the number of independent views.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.EnumLanguageServices(Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID@)">
      <summary>Enumerates the registered language service IDs.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.EnumViews(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextViews@)">
      <summary>Enumerates views that are provided with the core editor and are associated with a particular text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface for which views should be returned. Pass in a value of null to return all views for all buffers.</param>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextViews" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.GetActiveView(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
      <summary>Returns the active or previously active view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fMustHaveFocus">[in] If true, then the current UI active view is returned. If false, then the last active view is returned, regardless of whether this view is currently UI active.</param>
      <param name="pBuffer">[in] Pass null for <paramref name="pBuffer" /> to get the previously active code view, regardless of the text buffer that it was associated with. If you pass in a valid pointer to a buffer, then you are returned the last active view for that particular buffer.</param>
      <param name="ppView">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.GetBufferSccStatus(Microsoft.VisualStudio.TextManager.Interop.IVsUserData,System.Int32@)">
      <summary>Method information not provided. Do not use this method.</summary>
      <param name="pBufData">Do not use.</param>
      <param name="pbNonEditable">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.GetBufferSccStatus2(System.String,System.Int32@,System.Int32@)">
      <summary>Returns information on whether a buffer is under source code control and, if so, whether the file is checked in.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFileName">[in] Filename of interest.</param>
      <param name="pbNonEditable">[out] If true, then the file can not be modified (for example, if the file is under source control and checked in). If false, then the file can be edited.)</param>
      <param name="piStatusFlags">[out] Returns additional status flags. This is the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" /> value returned from <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QueryEditFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@,System.UInt32@)" />. Pass in a value of null for this parameter if you do not want the return value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.GetMarkerTypeCount(System.Int32@)">
      <summary>Returns the number of registered marker types within all buffers associated with the core text editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piMarkerTypeCount">[out] Pointer to a count of the marker types.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.GetMarkerTypeInterface(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType@)">
      <summary>Maps a numeric marker type ID to an interface that can be used to probe for specific information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMarkerTypeID">[in] The marker type ID, such as from <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.GetType(System.Int32@)" />.</param>
      <param name="ppMarkerType">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType" /> interface, which has been referenced with AddReferernce.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.GetPerLanguagePreferences(Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[])">
      <summary>Method information is not provided.</summary>
      <param name="pLangPrefs">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.GetRegisteredMarkerTypeID(System.Guid@,System.Int32@)">
      <summary>Returns a registered marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidMarker">[in] GUID identifying the caller's implementation of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType" />, which provides information about the new category of markers.</param>
      <param name="piMarkerTypeID">[out] Number of the marker type in the marker type collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.GetShortcutManager(Microsoft.VisualStudio.TextManager.Interop.IVsShortcutManager@)">
      <summary>Returns the shortcut manager.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppShortcutMgr">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsShortcutManager" /> interface, which is used to manage shortcuts in the task list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.GetUserPreferences(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES[])">
      <summary>Returns the user preferences, such as tab usage, indent size and widget margin presence for the view, frame, and language service.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pViewPrefs">[out] Pointer to the view preferences. For more information about <paramref name="pViewPrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" />.</param>
      <param name="pFramePrefs">[out] Pointer to the frame preferences. For more information about <paramref name="pFramePrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES" />.</param>
      <param name="pLangPrefs">[in, out] Pointer to the language preferences. For more information about <paramref name="pLangPrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES" />.</param>
      <param name="pColorPrefs">[in, out] Pointer to the font color preferences.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.IgnoreNextFileChange(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Notifies that the next file change is to be ignored.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.MapFilenameToLanguageSID(System.String,System.Guid@)">
      <summary>Given a file name, determines the registered language service, if one exists, that understands it.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFileName">[in] File name associated with the language service.</param>
      <param name="pguidLangSID">[out] Pointer to the language service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.NavigateToLineAndColumn(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Guid@,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Finds or creates an appropriate view on the specified buffer and places the selection at the specified location.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface.</param>
      <param name="guidDocViewType">[in] GUID identifying the view. This value should always be <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" />.</param>
      <param name="iStartRow">[in] Starting line for the selection to locate.</param>
      <param name="iStartIndex">[in] Starting index for the selection to locate.</param>
      <param name="iEndRow">[in] Ending line for the selection to locate.</param>
      <param name="iEndIndex">[in] Ending index for the selection to locate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.NavigateToPosition(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Guid@,System.Int32,System.Int32)">
      <summary>Finds or creates an appropriate view on the specified buffer and puts the selection on the specified linear position.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface.</param>
      <param name="guidDocViewType">[in] GUID identifying the view. This value should always be <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" />.</param>
      <param name="iPos">[in] Linear position in buffer on which to put the caret.</param>
      <param name="iLen">[in] Length of selection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.RegisterBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Registers a text buffer with the text manager.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface to register.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.RegisterIndependentView(System.Object,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Registers a view from a source other than the core editor.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnk">[in] Pointer to the IUnknown interface. Use this parameter to AddRef and Release the view so that the buffer is not freed in advance of the view.</param>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface associated with the view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.RegisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Method information is not provided.</summary>
      <param name="pView">Do not use.</param>
      <param name="pBuffer">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.SetFileChangeAdvise(System.String,System.Int32)">
      <summary>Method information is not provided.</summary>
      <param name="pszFileName">Do not use.</param>
      <param name="fStart">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.SetPerLanguagePreferences(Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[])">
      <summary>Method information is not provided.</summary>
      <param name="pLangPrefs">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.SetUserPreferences(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES[])">
      <summary>Sets user preferences.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pViewPrefs">[in] Values that describe the desired default view flags for all editor views. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" />. Can be null if view preferences are not being set.</param>
      <param name="pFramePrefs">[in] Values that describe the desired default flags for all editor frames. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES" />. Can be null if frame preferences are not being set.</param>
      <param name="pLangPrefs">[in] Values that describe the desired flags for the language specified in the structure. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES" />. Can be null if language preferences are not being set.</param>
      <param name="pColorPrefs">[in] Values that describe the color and font preferences for all editor views. This parameter is for internal editor use only. Should be null when this method is called by external packages. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.SuspendFileChangeAdvise(System.String,System.Int32)">
      <summary>Suspends file change notifications for a given file.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszFileName">[in] File on which to suspend notification of changes made.</param>
      <param name="fSuspend">[in] true if change notification is suspended on the specified file name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.UnregisterBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Unregisters a buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface that is being unregistered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.UnregisterIndependentView(System.Object,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Unregisters an externally-created view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pUnk">[in] Pointer to the IUnknown interface. Use this parameter to AddRef and Release the view so that the buffer is not freed in advance of the view.</param>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface associated with the view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager.UnregisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Method information is not provided.</summary>
      <param name="pView">Do not use.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents">
      <summary>Informs users about changes in the text manager.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents.OnRegisterMarkerType(System.Int32)">
      <summary>Fired when an external marker type is registered.</summary>
      <param name="iMarkerType">[in] External marker type that was registered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents.OnRegisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Fires when a view is registered.</summary>
      <param name="pView">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface identifying the view that was registered. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents.OnUnregisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Fires when a view is unregistered.</summary>
      <param name="pView">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface identifying the view that was unregistered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextManagerEvents.OnUserPreferencesChanged(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES[])">
      <summary>Fires when the user's global preferences are changed.</summary>
      <param name="pViewPrefs">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" /> structure. This structure provides the current settings for the view. If this is non-null, preferences that specifically affect text view behavior have changed.</param>
      <param name="pFramePrefs">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES" /> structure, which allows the frame to control whether the view shows horizontal or vertical scroll bars. If this is non-NULL, preferences that specifically affect code windows have changed.</param>
      <param name="pLangPrefs">[in] Pointer to the relevant language as specified by the <paramref name="szFileType" /> and <paramref name="guidLang" /> members of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES" /> structure. If this is non-null, preferences that affect a specific language's common settings have changed.</param>
      <param name="pColorPrefs">[in] Specifies color preferences. If non-null, the <paramref name="pguidColorService" /> member of the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES" /> structure indicates which colorable item provider is associated with the <paramref name="pColorTable" /> member. If this is non-null, preferences that affect the colors or font used by a text view have changed.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker">
      <summary>Provides methods for managing text markers.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.DrawGlyph(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Draws a glyph in the widget margin given a display context and bounding rectangle.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hdc">[in] Handle to a display device context that defines the visible region of interest for the glyph.</param>
      <param name="pRect">[in] Pointer to a RECT structure, which defines the coordinates of the upper-left and lower-right corners of the bounding rectangle for the glyph.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.ExecMarkerCommand(System.Int32)">
      <summary>Executes a text marker command against a marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iItem">[in] Integer identifying the item number for a marker type's context menu command. Values typically range from 0 to 9, but the marker type may also support command values 101 through 103. For more information about these command values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues2" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.GetBehavior(System.UInt32@)">
      <summary>Returns a text marker behavior set by the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.SetBehavior(System.UInt32)" /> method.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwBehavior">[out] Pointer to a DWORD containing the behavior for the marker type. For a list of <paramref name="pdwBehavior" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.GetMarkerCommandInfo(System.Int32,System.String[],System.UInt32[])">
      <summary>Returns text marker command information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iItem">[in] Integer identifying the item number for a marker type's context menu command. Values typically range from 0 to 9, but the marker type may also support command values 101 through 103. For more information about these command values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" />.</param>
      <param name="pbstrText">[out] Pointer to a string identifying the marker type command text for the context menu.</param>
      <param name="pcmdf">[out] Specifies command flags. Values for <paramref name="pcmdf" /> are taken from the tagOLECMDF enumeration in the Platform SDK.  </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.GetPriorityIndex(System.Int32@)">
      <summary>Returns the text marker priority index, with the highest value getting the topmost placement.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPriorityIndex">[out] Pointer to an integer containing the priority index. For a list of <paramref name="piPriorityIndex" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.GetTipText(System.String[])">
      <summary>Returns the text to display in a tip for the marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrText">[out] Pointer to the string containing the tip text for the marker type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.GetType(System.Int32@)">
      <summary>Returns a text marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piMarkerType">[out] Pointer to integer value representing the marker type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.GetVisualStyle(System.UInt32@)">
      <summary>Returns the visual style of a marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwFlags">[out] Pointer to a DWORD for the visual style flags. For a list of <paramref name="pdwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.Invalidate">
      <summary>Prevents a text marker from appearing in the user interface.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.SetBehavior(System.UInt32)">
      <summary>Sets the behavior of a text marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwBehavior">[in] Pointer to a DWORD containing the behavior for the marker type. For a list of <paramref name="pdwBehavior" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.SetType(System.Int32)">
      <summary>Sets a text marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMarkerType">[in] Integer containing the marker type to be set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.SetVisualStyle(System.UInt32)">
      <summary>Sets the visual style of a marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] DWORD for the visual style flags. For a list of <paramref name="pdwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.UnadviseClient">
      <summary>Unadvises the client, if there is one.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient">
      <summary>Provides callbacks to the Visual Studio environment and other processes used to manipulate a text marker.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient.ExecMarkerCommand(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker,System.Int32)">
      <summary>Executes a command on a specific marker within the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pMarker">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker" /> interface for the marker.</param>
      <param name="iItem">[in] Command selected by the user from the context menu. For a list of <paramref name="iItem" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient.GetMarkerCommandInfo(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker,System.Int32,System.String[],System.UInt32[])">
      <summary>Queries the marker for the command information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pMarker">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker" /> interface for the marker.</param>
      <param name="iItem">[in] ] Command selected by the user from the context menu. For a list of <paramref name="iItem" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" />.</param>
      <param name="pbstrText">[out] Text of the marker command in the context menu.</param>
      <param name="pcmdf">[out] Pointer to command flags.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient.GetTipText(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker,System.String[])">
      <summary>Returns the tip text for the text marker when the mouse hovers over the marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pMarker">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker" /> interface for the marker.</param>
      <param name="pbstrText">[out] Tip text associated with the marker.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient.MarkerInvalidated">
      <summary>Called when the text associated with a marker is deleted by a user action.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient.OnAfterMarkerChange(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker)">
      <summary>Signals that the marker position has changed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pMarker">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker" /> interface for the marker that was changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient.OnAfterSpanReload">
      <summary>Signals that the text under the marker has been altered but the marker has not been deleted.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient.OnBeforeBufferClose">
      <summary>Sends notification that the text buffer is about to close.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient.OnBufferSave(System.String)">
      <summary>Determines whether the buffer was saved to a different name.</summary>
      <param name="pszFileName">[in] File name associated with the text buffer. Can be null in buffers where the file name cannot change.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerColorSet">
      <summary>Allows a marker type to determine whether other marker types share the same color set.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerColorSet.GetMarkerColors(System.Int32,System.UInt32@,System.UInt32@)">
      <summary>Determines the color set associated with a particular marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMarkerType">[in] Integer containing the marker type.</param>
      <param name="pclrFore">[out] Foreground color of the text marker. For a list of <paramref name="pclrFore" /> values, see COLORREF.</param>
      <param name="pclrBack">[out] Background color of the text marker. For a list of <paramref name="pclrBack" /> values, see COLORREF.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerContextProvider">
      <summary>Provides context for text markers in the core editor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerContextProvider.RemoveLastContext(System.UInt32,System.Object)">
      <summary>Deprecated. Do not use.</summary>
      <param name="dwReserved">Do not use.</param>
      <param name="pUC">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerContextProvider.UpdateContextForMarker(System.UInt32,System.Object)">
      <summary>Called by the language service to indicate that the context for a text marker should be added to the context bag.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">Unused parameter. Must be set to null.</param>
      <param name="pUC">Pointer to the context bag on the Visual Studio core editor.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerGlyphDropHandler">
      <summary>A handler provided for markers whose glyphs (an icon indicating the position of a marker) support drag and drop.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerGlyphDropHandler.DrawCandidateOutlineGlyph(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[],System.UInt32)">
      <summary>Draws a shadow of the glyph in the widget margin at a potential destination line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Do not use.</param>
      <param name="hdc">[in] Handle to the display context in which to draw the glyph.</param>
      <param name="pRect">[in] Pointer to a RECT structure that defines the bounding rectangle for the glyph.</param>
      <param name="clrref">[in] RGB color value for the glyph.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerGlyphDropHandler.DropAtLocation(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.Int32,System.Int32,System.UInt32@)">
      <summary>Tells the client to handle the glyph being dropped at the given location.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Do not use.</param>
      <param name="pDestView">[in] Pointer to the destination view. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" />.</param>
      <param name="pDestBuffer">[in] Pointer to the destination buffer. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" />.</param>
      <param name="iLine">[in] Line within the text buffer.</param>
      <param name="iIndex">[in] Char index position within the line in the text buffer.</param>
      <param name="pdwDropResult">[out] Indicates drop status. Combining with a bitwise or of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CUSTOM_DROP_HANDLER_FLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerGlyphDropHandler.QueryDropLocation(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.Int32,System.Int32,System.UInt32@)">
      <summary>Used to determine whether a given location is a valid drop destination.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReserved">[in] Do not use.</param>
      <param name="pDestView">[in] Pointer to the proposed destination view. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" />.</param>
      <param name="pDestBuffer">[in] Pointer to the proposed destination buffer. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" />.</param>
      <param name="iLine">[in] Proposed line within the text buffer.</param>
      <param name="iIndex">[in] Proposed char index position within the line in the text buffer.</param>
      <param name="pdwDropResult">[out] Indicates drop status. Combing with a bitwise or of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CUSTOM_DROP_HANDLER_FLAGS" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType">
      <summary>Provides a uniform mechanism for obtaining information about a given text marker type, whether predefined by the editor or registered by a package.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType.DrawGlyph(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Determines where a custom marker glyph can be drawn in the widget margin.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hdc">[in] Handle to a display device context that defines the visible region of interest for the glyph. </param>
      <param name="pRect">[in] Pointer to a RECT structure, which defines the coordinates of the upper-left and lower-right corners of the bounding rectangle for the glyph. </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType.DrawGlyphEx(System.UInt32,System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Int32)">
      <summary>Draws a glyph in the widget margin given a display device context and a bounding rectangle.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Options for drawing the glyph in the widget margin. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.GLYPHDRAWFLAGS" />.</param>
      <param name="hdc">[in] Handle to a display device context that defines the visible region of interest.</param>
      <param name="pRect">[in] Pointer to a RECT structure, which defines the coordinates of the upper-left and lower-right corners of the bounding rectangle.</param>
      <param name="iLineHeight">[in] Height of the line, based on font settings.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType.GetBehaviorFlags(System.UInt32@)">
      <summary>Returns marker behavior flags, which define the default marker behavior.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwFlags">[out] Pointer to a DWORD containing the behavior for the marker type. For a list of <paramref name="pdwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType.GetDefaultColors(Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[],Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[])">
      <summary>Returns the default foreground and background colors for a marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piForeground">[out] Pointer to the default foreground color. For a list of <paramref name="piForeground" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX" />.</param>
      <param name="piBackground">[out] Pointer to the default background color. For a list of <paramref name="piBackground" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType.GetDefaultLineStyle(Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[],Microsoft.VisualStudio.TextManager.Interop.LINESTYLE[])">
      <summary>Returns the default line attributes for a custom marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLineColor">[out] Pointer to the default line color. For a list of <paramref name="piLineColor" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.COLORINDEX" />.</param>
      <param name="piLineIndex">[out] Pointer to the default line style. For a list of <paramref name="piLineIndex" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType.GetDisplayName(System.String@)">
      <summary>Returns the display name of the custom marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrName">[out] Pointer to the display name for the custom marker type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType.GetPriorityIndex(System.Int32@)">
      <summary>Returns the priority index for the custom marker type, with the highest priority value receiving the topmost placement.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPriorityIndex">[out] Pointer to the priority index for the type of text marker. For a list of <paramref name="piPriorityIndex" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType.GetVisualStyle(System.UInt32@)">
      <summary>Returns the appearance, location, and coloring of a custom marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwVisualFlags">[out] Flags indicating the appearance, location, and coloring of a marker. For a list of <paramref name="pdwVisualFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerTypeProvider">
      <summary>Returns an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType" /> interface from a service providing a text markers other packages.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerTypeProvider.GetTextMarkerType(System.Guid@,Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType@)">
      <summary>Allows you to return a pointer to your <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType" /> implementation for a custom marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidMarker">[in] Pointer to a GUID identifying the external marker type.</param>
      <param name="ppMarkerType">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType" /> implementation for the external marker type.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextReplaceEvents">
      <summary>Information of a change that is about to occur.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextReplaceEvents.OnReplace(Microsoft.VisualStudio.TextManager.Interop.ChangeInput[])">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCI"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextScanner">
      <summary>A special-purpose interface exposed by text buffers and used to provide fast, stream-oriented, sequential access to the text in the buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextScanner.CloseScan">
      <summary>Closes the buffer for scanning and re-enables writing to the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextScanner.OpenScan">
      <summary>Opens the text buffer for scanning.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextScanner.Read(System.String@,System.Int32@)">
      <summary>Performs a scan of the text buffer, or portion of the text buffer defined by the string length, <paramref name="piLength" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppszText">[out] Range of the text buffer to read.</param>
      <param name="piLength">[out] Length of text to read from the buffer.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextSelectionAction"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSelectionAction.GetDestination(Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE[])">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSelState">[out] Line and column of the destination of text selection. Values are in the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE" /> struct.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSelectionAction.GetOrigin(Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE[])">
      <summary>Sets the selection state for this action.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSelState">[out] Line and column of the origin of text selection. Values are in the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE" /> struct.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSelectionAction.SetDestination(Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE[])">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSelState">[out] Fills the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE" /> struct with the state values of the selected text destination.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSelectionAction.SetOrigin(Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE[])">
      <summary>Retrieve selection data</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSelState">[out] Fills the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE" /> struct with the state values of the selected text destination.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet">
      <summary>Utility for text string matching.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet.Add(System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Do not use this method.</summary>
      <param name="cEl">Do not use.</param>
      <param name="pSpan">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet.AddFromEnum(Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextSpans)">
      <summary>Do not use this method.</summary>
      <param name="pEnum">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet.AttachTextImage(System.Object)">
      <summary>Passes a text image to the environment.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pText">[in] Pointer to a text image.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet.Detach">
      <summary>Release a text image.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet.GetAt(System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns a requested text span.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iEl">[in] Integer containing the text span element number.</param>
      <param name="pSpan">[out] Pointer to a text span object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet.GetCount(System.Int32@)">
      <summary>Returns the number of text spans</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pcel">[out] Specifies the number of text spans in the text image.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet.RemoveAll">
      <summary>Do not use this method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet.ResumeTracking">
      <summary>Do not use this method.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet.Sort(System.UInt32)">
      <summary>Do not use this method.</summary>
      <param name="SortOptions">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet.SuspendTracking">
      <summary>Do not use this method.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage">
      <summary>Represents the range of text that is viewable and editable by text editor views.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_Attach(System.Object)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_CopyText(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iStartLine">[in] Line containing the start of text to be copied.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be &lt;= length of line.</param>
      <param name="iBufMax">[in] Size of <paramref name="pzeDest" /> buffer.</param>
      <param name="pszDest">[in] Destination buffer.</param>
      <param name="pcCharsCopied">[out] Number of characters copied.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_Detach"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_Find(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszText">[in] Text to locate.</param>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line (must be &lt;= length of line).</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line (must be &lt;= length of line).</param>
      <param name="iFlags">[in]</param>
      <param name="piLine">[out] Line containing the start of the located text.</param>
      <param name="piCol">[out] Column of the start of the located text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_GetCharsInSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSpanToMeasure">[in]</param>
      <param name="piChars">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_GetLanguageServiceID(System.Guid@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidLangService">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_GetLength">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_GetLengthOfLine(System.Int32,System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Index of line of interest.</param>
      <param name="piLength">[out] Length of line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_GetLineCount">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_GetLineDataEx(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in]</param>
      <param name="iLine">[in]</param>
      <param name="iStartIndex">[in]</param>
      <param name="iEndIndex">[in]</param>
      <param name="pLineData">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_GetLineIndexOfPosition(System.Int32,System.Int32@,System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPosition">[in]</param>
      <param name="piLine">[out]</param>
      <param name="piIndex">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_GetPositionOfLineIndex(System.Int32,System.Int32,System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in]</param>
      <param name="iIndex">[in]</param>
      <param name="piPosition">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_RefreshColorization(System.Int32,System.Int32,System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iTopLine">[in]</param>
      <param name="iBotLine">[in]</param>
      <param name="piLastAffectedLine">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_ReleaseLineDataEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pLineData">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_Replace(Microsoft.VisualStudio.TextManager.Interop.ChangeInput[],Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCI">[in]</param>
      <param name="ptsOut">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorage.Storage_SetLanguageServiceID(System.Guid@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code. </returns>
      <param name="guidLangService">[in]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorageColorState"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStorageColorState.GetColorStateAtStartOfLine(System.Int32,System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in]</param>
      <param name="piState">[out]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream">
      <summary>Provides reading and writing capabilities using one-dimensional coordinates.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.AdviseTextStreamEvents(Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamEvents,System.UInt32@)">
      <summary>Not implemented.</summary>
      <param name="pSink">Do not use.</param>
      <param name="pdwCookie">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.CanReplaceStream(System.Int32,System.Int32,System.Int32)">
      <summary>Tests whether a given editing operation can succeed (for example, copy or cut).</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPos">[in] Position in the text buffer.</param>
      <param name="iOldLen">[in] Length of text to replace, if any. In an insert operation, this value is zero (0).</param>
      <param name="iNewLen">[in] Length of the newly inserted text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.CreateEditPoint(System.Int32,System.Object@)">
      <summary>Creates an EditPoint object at the given location in the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPosition">[in] Position in the text buffer.</param>
      <param name="ppEditPoint">[out] Pointer to the <see cref="T:EnvDTE.EditPoint" /> object created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.CreateStreamMarker(System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient,Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker[])">
      <summary>Creates a stream marker of a given type over the specified region.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMarkerType">[in] Type of marker to create.</param>
      <param name="iPos">[in] Starting position in the text buffer.</param>
      <param name="iLength">[in] Length of text to create marker over.</param>
      <param name="pClient">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient" /> interface. Implement this interface to advise the text buffer that you want to receive notification of marker events.</param>
      <param name="ppMarker">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker" /> interface. If this parameter is null, then the text marker is owned by the text buffer. An example of a buffer-owned text marker is a temporary bookmark.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.CreateTextPoint(System.Int32,System.Object@)">
      <summary>Creates a TextPoint object at the given location in the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPosition">[in] Starting position in the text buffer to create the <see cref="T:EnvDTE.TextPoint" /> object.</param>
      <param name="ppTextPoint">[out] Pointer to the <see cref="T:EnvDTE.TextPoint" /> object created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.EnumMarkers(System.Int32,System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsEnumStreamMarkers@)">
      <summary>Enumerates s specific set of text stream markers, based on the criteria specified.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPos">[in] Starting position in the text buffer.</param>
      <param name="iLen">[in] Length of text to enumerate marker over.</param>
      <param name="iMarkerType">[in] Type of markers to enumerate. This parameter is ignored if a value of <see cref="F:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS.EM_ALLTYPES" /> is specified for the <paramref name="dwFlags" /> parameter.</param>
      <param name="dwFlags">[in] Enumeration options. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS" />.</param>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumStreamMarkers" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.FindMarkerByPosition(System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker@)">
      <summary>Locates a marker of a given type based on a position in the text stream.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMarkerType">[in] Specifies the type of marker to find.</param>
      <param name="iStartingPos">[in] Starting position in the text stream. </param>
      <param name="dwFlags">[in] Specifies the direction to search for a marker. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FINDMARKERFLAGS" />.</param>
      <param name="ppMarker">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker" /> interface (that is, the text marker).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.GetLanguageServiceID(System.Guid@)">
      <summary>Returns the unique identifier of the language that is providing colorization and other attribute data to this buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pguidLangService">[out] Pointer to a unique identifier of the language service. Buffers without languages can return CLSID_NULL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.GetLastLineIndex(System.Int32@,System.Int32@)">
      <summary>Returns the last line in the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLine">[out] Pointer to the last line in the text buffer.</param>
      <param name="piIndex">[out] Pointer to the index number of <paramref name="piLine" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.GetLengthOfLine(System.Int32,System.Int32@)">
      <summary>Returns the length of a line in the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose length is requested.</param>
      <param name="piLength">[out] Pointer to the length of the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.GetLineCount(System.Int32@)">
      <summary>Returns the number of lines in the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLineCount">[out] Pointer to the number of lines in the buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.GetLineIndexOfPosition(System.Int32,System.Int32@,System.Int32@)">
      <summary>Returns the line and column numbers in the text buffer, given a position number.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPosition">[in] Position number of the desired line.</param>
      <param name="piLine">[out] Pointer to the line number.</param>
      <param name="piColumn">[out] Pointer to the column position on the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.GetPositionOfLine(System.Int32,System.Int32@)">
      <summary>Returns the position number of a line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose position is requested.</param>
      <param name="piPosition">[out] Pointer to the equivalent position number.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.GetPositionOfLineIndex(System.Int32,System.Int32,System.Int32@)">
      <summary>Returns the position number in the text buffer, given a line and column number.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Number of the line whose position is requested.</param>
      <param name="iIndex">[in] Location of the character on <paramref name="iLine" />.</param>
      <param name="piPosition">[out] Pointer to the equivalent position number.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.GetSize(System.Int32@)">
      <summary>Returns the size in characters of the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLength">[out] Pointer to the size of the buffer, which is not necessarily the same value as the size of the buffer's internally-allocated memory or the size of the file (if any) represented by the buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.GetStateFlags(System.UInt32@)">
      <summary>Returns the state flags of the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwReadOnlyFlags">[out] Bit-wise union of the enumeration <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS" /> values, which can be modified, read-only, or read-only on disk.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.GetStream(System.Int32,System.Int32,System.IntPtr)">
      <summary>Provides direct, stream-oriented access to the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPos">[in] Starting position in the text buffer</param>
      <param name="iLength">[in] Length of the text stream to access. </param>
      <param name="pszDest">[in] The caller-allocated string buffer. This buffer is filled with the requested text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.GetUndoManager(Microsoft.VisualStudio.OLE.Interop.IOleUndoManager@)">
      <summary>Returns the undo manager for this buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppUndoManager">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.InitializeContent(System.String,System.Int32)">
      <summary>Initializes the content of the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pszText">[in] Text to insert into the buffer.</param>
      <param name="iLength">[in] Number of characters to be inserted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.LockBuffer">
      <summary>Locks the text buffer for the purpose of access control.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.LockBufferEx(System.UInt32)">
      <summary>Extension of the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.LockBuffer" /> method.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in]Combine with a bitwise or of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" />, presently either BLF_READ or BLF_WRITE.)</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.Reload(System.Int32)">
      <summary>Reloads the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fUndoable">[in] Specifies whether the unload action is undoable. Currently, non-undo support is not implemented, so the reload is always undoable.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.ReloadStream(System.Int32,System.Int32,System.IntPtr,System.Int32)">
      <summary>Replaces text without deleting markers.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPos">[in] Starting position in the text buffer.</param>
      <param name="iOldLen">[in] Length of text to reload.</param>
      <param name="pszText">[in] Pointer to text to insert.</param>
      <param name="iNewLen">[in] Length of the newly inserted text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.ReplaceStream(System.Int32,System.Int32,System.IntPtr,System.Int32)">
      <summary>Handles editing, such as line breaking, line joining, and so on.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPos">[in] Starting position in the text buffer.</param>
      <param name="iOldLen">[in] Length of text to reload.</param>
      <param name="pszText">[in] Text to insert.</param>
      <param name="iNewLen">[in] Length of the newly inserted text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.ReplaceStreamEx(System.UInt32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32@)">
      <summary>Handles editing, such as line breaking, line joining, and so on.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Options for modifying text during a replace operation. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS" />.</param>
      <param name="iPos">[in] Starting position in the text buffer.</param>
      <param name="iOldLen">[in] Length of text to reload.</param>
      <param name="pszText">[in] Text to insert.</param>
      <param name="iNewLen">[in] Length of the newly inserted text.</param>
      <param name="piActualLen">[out] Number of characters changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.Reserved1">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.Reserved10">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.Reserved2">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.Reserved3">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.Reserved4">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.Reserved5">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.Reserved6">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.Reserved7">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.Reserved8">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.Reserved9">
      <summary>Reserved in the Vtable for future use.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.SetLanguageServiceID(System.Guid@)">
      <summary>Sets the unique identifier of the language that is providing colorization and other attribute data to the buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="guidLangService">[in] Identifier of the language service. Buffers without languages can be CLSID_NULL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.SetStateFlags(System.UInt32)">
      <summary>Sets the state flags of the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwReadOnlyFlags">[in] Bitwise union of the enumeration <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS" /> values, which can be modified, read-only, or read-only on disk.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.UnadviseTextStreamEvents(System.UInt32)">
      <summary>Not implemented.</summary>
      <param name="dwCookie"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.UnlockBuffer">
      <summary>Unlocks a buffer locked with the method <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.LockBuffer" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream.UnlockBufferEx(System.UInt32)">
      <summary>Extension of the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.UnlockBuffer" /> method.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Bitwise union of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" /> values, presently either BLF_READ or BLF_WRITE.)</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamEvents">
      <summary>Notifies clients of changes to the underlying text buffer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamEvents.OnChangeStreamAttributes(System.Int32,System.Int32)">
      <summary>Notifies the client that the text stream attributes have changed.</summary>
      <param name="iPos">[in] Starting position of the affected text.</param>
      <param name="iLength">[in] Length of the text affected in the text stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamEvents.OnChangeStreamText(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Notifies the clients when the content of a text stream in the buffer has changed.</summary>
      <param name="iPos">[in] Starting position of the affected text.</param>
      <param name="iOldLen">[in] Previous length of text.</param>
      <param name="iNewLen">[in] New length of text.</param>
      <param name="fLast">[in] Obsolete; ignore.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker">
      <summary>Provides access to and manipulates the position of a text marker in the text buffer. This interface has methods to retrieve of change one-dimensional, streaming coordinates.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.DrawGlyph(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Draws a glyph in the widget margin given a display context and bounding rectangle.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hdc">[in] Handle to a display device context that defines the visible region of interest for the glyph.</param>
      <param name="pRect">[in] Pointer to a RECT structure, which defines the coordinates of the upper-left and lower-right corners of the bounding rectangle for the glyph.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.ExecMarkerCommand(System.Int32)">
      <summary>Executes a text marker command against a marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iItem">[in] Integer identifying the item number for a marker type's context menu command. Values typically range from 0 to 9, but the marker type may also support command values 101 through 103.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.GetBehavior(System.UInt32@)">
      <summary>Returns a text marker behavior set by the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.SetBehavior(System.UInt32)" /> method.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwBehavior">[out] Pointer to a DWORD containing the behavior for the marker type. For a list of <paramref name="pdwBehavior" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.GetCurrentSpan(System.Int32@,System.Int32@)">
      <summary>Returns current position information of the marker in the text stream.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPos">[out] Position of the text marker.</param>
      <param name="piLen">[out] Length of the text marker.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.GetMarkerCommandInfo(System.Int32,System.String[],System.UInt32[])">
      <summary>Returns text marker command information.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iItem">[in] Integer identifying the item number for a marker type's context menu command. Values typically range from 0 to 9, but the marker type may also support command values 101 through 103. For more information about these command values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues" />.</param>
      <param name="pbstrText">[out] Pointer to a string identifying the marker type command text for the context menu.</param>
      <param name="pcmdf">[out] Specifies command flags.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.GetPriorityIndex(System.Int32@)">
      <summary>Returns the text marker priority index, with the highest value getting the topmost placement.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPriorityIndex">[out] Pointer to an integer containing the priority index. For a list of <paramref name="piPriorityIndex" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.GetStreamBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextStream@)">
      <summary>Provides access to the associated text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppBuffer">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream" /> interface of the associated buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.GetTipText(System.String[])">
      <summary>Returns the text to display in a tip for the marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrText">[out] Pointer to the string containing the tip text for the marker type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.GetType(System.Int32@)">
      <summary>Returns a text marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piMarkerType">[out] Pointer to integer value representing the marker type.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.GetVisualStyle(System.UInt32@)">
      <summary>Returns the visual style of a marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwFlags">[out] Pointer to a DWORD for the visual style flags. For a list of <paramref name="pdwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.Invalidate">
      <summary>Prevents a text marker from appearing in the user interface.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.ResetSpan(System.Int32,System.Int32)">
      <summary>Resets the position and extent of the text marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iNewPos">[in] New position for the text marker in the text stream.</param>
      <param name="iNewLen">[in] New length of the text marker in the text stream.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.SetBehavior(System.UInt32)">
      <summary>Sets the behavior of a text marker.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwBehavior">[in] Pointer to a DWORD containing the behavior for the marker type. For a list of <paramref name="pdwBehavior" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.SetType(System.Int32)">
      <summary>Sets a text marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iMarkerType">[in] Integer containing the marker type to be set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.SetVisualStyle(System.UInt32)">
      <summary>Sets the visual style of a marker type.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] DWORD for the visual style flags. For a list of <paramref name="pdwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker.UnadviseClient">
      <summary>Unadvises the client, if there is one.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData.GetContextStream(System.Int32@,System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPos">[out]</param>
      <param name="piLength">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData.GetTipFontInfo(System.Int32,System.UInt32[])">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="cChars">[in]</param>
      <param name="pdwFontAttr">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData.GetTipText(System.String[],System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrText">[out]</param>
      <param name="pfGetFontInfo">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData.OnDismiss"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData.UpdateView"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipWindow">
      <summary>Provides a tip when the mouse pauses over a particular context stream in the core editor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipWindow.Dismiss">
      <summary>Dismisses the tip window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipWindow.GetContextStream(System.Int32@,System.Int32@)">
      <summary>Returns the context stream.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPos">[out] Starting position of the context stream.</param>
      <param name="piLength">[out] Length of the context stream from the starting position (<paramref name="piPos" />).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipWindow.GetSizePreferences(Microsoft.VisualStudio.OLE.Interop.RECT[],Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA[])">
      <summary>Gets the size preferences for the tip window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="prcCtxBounds">[out] The bounding rectangle of the tip window, in screen coordinates.</param>
      <param name="pSizeData">[out] Size and position of the tip window. For a list of <paramref name="pSizeData" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipWindow.Paint(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Paints the tip window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hdc">[in] Handle to the display context in which to draw the tip window.</param>
      <param name="prc">[in] Specifies the bounding rectangle for the tip window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipWindow.SetTextTipData(Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData)">
      <summary>Sets the text tip.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pMethodData">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipWindow.WndProc(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Method information is not provided.</summary>
      <param name="hwnd"> </param>
      <param name="iMsg"> </param>
      <param name="wParam"> </param>
      <param name="lParam"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextTrackingPoint">
      <summary>Establishes and maintains an internal tracking point.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTrackingPoint.GetBehavior(System.UInt32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pdwBehavior">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTrackingPoint.GetCurrentLineIndex(System.Int32@,System.Int32@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLine">[out]</param>
      <param name="piIndex">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTrackingPoint.GetTextLayer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer@)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppLayer">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextTrackingPoint.SetBehavior(System.UInt32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwBehavior">[in]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView">
      <summary>Manages the text view of an editor window and contains methods to manage the text view. The view is essentially the editor window shown in the user interface (UI). </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.AddCommandFilter(Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget@)">
      <summary>Adds a command filter to the existing chain of command filters.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pNewCmdTarg">[in] Pointer to the new command filter (IOleCommandTarget) to add to the command filter chain.</param>
      <param name="ppNextCmdTarg">[out] Pointer to a command filter used to handle commands not dealt with by the <paramref name="pNewCmdTarg" /> command filter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.CenterColumns(System.Int32,System.Int32,System.Int32)">
      <summary>Places the specified column of text in the center of the view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Integer containing the first line to center.</param>
      <param name="iLeftCol">[in] Integer containing the index of the starting column to center. Viewcol coordinates may include virtual space.</param>
      <param name="iColCount">[in] Integer containing the total number of columns to center within the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.CenterLines(System.Int32,System.Int32)">
      <summary>Places the specified lines of text in the center of the view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iTopLine">[in] First line to place in the center of the view.</param>
      <param name="iCount">[in] Total number of lines to place in the center of the view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.ClearSelection(System.Int32)">
      <summary>Clears the current selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="fMoveToAnchor">[in] If true, the cursor is placed at the anchor after the current selection is cleared. If false, then the cursor is not moved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.CloseView">
      <summary>Closes and unregisters a view with the view manager.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.EnsureSpanVisible(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Ensures that text is in view, both vertically and horizontally.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="span">[in] Specifies the span of text to center. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <summary>Returns the current contents of the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppBuffer">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> interface representing the text buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetCaretPos(System.Int32@,System.Int32@)">
      <summary>Returns the line and column index of the cursor position.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLine">[out] Pointer to an integer containing the line, if the method succeeds.</param>
      <param name="piColumn">[out] Pointer to an integer containing the column, if the method succeeds. Viewcol coordinates may include virtual space.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetLineAndColumn(System.Int32,System.Int32@,System.Int32@)">
      <summary>Converts a text stream position to a line and column index.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iPos">[in] Integer containing the position in the text stream.</param>
      <param name="piLine">[out] Pointer containing the line index corresponding to the stream position.</param>
      <param name="piIndex">[out] Pointer containing the column index corresponding to the stream position.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetLineHeight(System.Int32@)">
      <summary>Returns the pixel height of a line.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piLineHeight">[out, retval] Integer containing the line height, in pixels.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetNearestPosition(System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>Converts a line and column index to a text stream position.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Integer containing the line index.</param>
      <param name="iCol">[in] Integer containing the column index. Viewcol coordinates might include virtual space.</param>
      <param name="piPos">[out] Pointer to an integer containing the position in the text stream.</param>
      <param name="piVirtualSpaces">[out] Pointer to an integer containing the number of virtual spaces.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetPointOfLineColumn(System.Int32,System.Int32,Microsoft.VisualStudio.OLE.Interop.POINT[])">
      <summary>Returns the coordinates for the upper left corner of a particular line and column.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Integer containing the line index.</param>
      <param name="iCol">[in] Integer containing the column index. Viewcol coordinates may include virtual space.</param>
      <param name="ppt">[out, retval] Structure defining the x- and y- coordinates of the upper left corner of the line. For more information, see POINT in the Platform SDK.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetScrollInfo(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Returns the core text editor's scroll bar settings for the specified scroll bar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iBar">[in] Specifies a horizontal or vertical scroll bar. Values may be either SB_HORZ or SB_VERT. For more information, see GetScrollInfo in the Platform SDK.</param>
      <param name="piMinUnit">[out] Minimum scroll bar unit.</param>
      <param name="piMaxUnit">[out] Maximum scroll bar unit.</param>
      <param name="piVisibleUnits">[out] Additional number of visible units in the scroll bar.</param>
      <param name="piFirstVisibleUnit">[out] First visible unit in the scroll bar.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetSelectedText(System.String@)">
      <summary>Returns a copy of the selected text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pbstrText">[out] If the method succeeds, specifies a pointer to a string containing the text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetSelection(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Returns the text span corresponding to the current selection, if there is one.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piAnchorLine">[out] Anchor line position for the selection. Based on user selection, this value is not necessarily the upper line in the selection.</param>
      <param name="piAnchorCol">[out] Anchor column position for the selection. Based on user selection, this value is not necessarily the upper, left column position in the selection. Viewcol coordinates may include virtual space.</param>
      <param name="piEndLine">[out] End line position for the selection. Based on user selection, this value is not necessarily the lower line in the selection.</param>
      <param name="piEndCol">[out] End column position for the selection. Based on user selection, this value is not necessarily the lower, right column position in the selection. Viewcol coordinates may include virtual space.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetSelectionDataObject(Microsoft.VisualStudio.OLE.Interop.IDataObject@)">
      <summary>Returns a copy of the selected text in <see cref="T:System.Windows.Forms.IDataObject" /> interface format.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="ppIDataObject">[out] Pointer to an <see cref="T:System.Windows.Forms.IDataObject" /> object containing the selected text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetSelectionMode">
      <summary>Returns the current selection mode.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetSelectionSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the text span associated with a selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSpan">[out] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure containing the span information.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetTextStream(System.Int32,System.Int32,System.Int32,System.Int32,System.String@)">
      <summary>Returns a specified stream of text in a string.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iTopLine">[in] Top line index defining the text stream.</param>
      <param name="iTopCol">[in]Top line column defining the text stream. Viewcol coordinates may include virtual space.</param>
      <param name="iBottomLine">[in] Bottom line index defining the text stream.</param>
      <param name="iBottomCol">[in] Bottom line column defining the text stream. Viewcol coordinates may include virtual space.</param>
      <param name="pbstrText">[out] Pointer to a string containing the text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetWindowHandle">
      <summary>Returns the window handle for this view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.GetWordExtent(System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the current word extent.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Line index for the lines that contains the word.</param>
      <param name="iCol">[in] Column index for the word.</param>
      <param name="dwFlags">[in] Flags specifying how the word extent is determined. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS" />.</param>
      <param name="pSpan">[out] Span of text identifying the word extent.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.HighlightMatchingBrace(System.UInt32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Highlights the matching brace in a language construct.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Parameter is not used.</param>
      <param name="cSpans">[in] Number of matching pairs to highlight within the text span.</param>
      <param name="rgBaseSpans">[in, size_is(cSpans)] Span of text to highlight within.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.Initialize(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.IntPtr,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.INITVIEW[])">
      <summary>Creates the view and allows clients to specify one or more TextViewInitFlags options.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to a text buffer object to attach the view to.</param>
      <param name="hwndParent">[in] Specifies a handle to the parent window.</param>
      <param name="InitFlags">[in] Specifies view options. For a list of <paramref name="InitFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags" />.</param>
      <param name="pInitView">[in] Pointer to the view you want to initialize.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.PositionCaretForEditing(System.Int32,System.Int32)">
      <summary>Puts the caret in a position suitable for editing a function.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Integer containing the line to position the caret (cursor) on.</param>
      <param name="cIndentLevels">[in] Count of indent levels.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.RemoveCommandFilter(Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget)">
      <summary>Removes a command filter from the chain of command filters.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCmdTarg">[in] Pointer to a command filter to remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.ReplaceTextOnLine(System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
      <summary>Replaces line text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Integer containing the line.</param>
      <param name="iStartCol">[in] Integer containing the starting column.</param>
      <param name="iCharsToReplace">[in] Integer containing the characters to replace.</param>
      <param name="pszNewText">[in] Pointer the new text being passed in.</param>
      <param name="iNewLen">[in] Length of the buffer (number of characters) being passed in.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.RestrictViewRange(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsViewRangeClient)">
      <summary>Method information is not provided. Method is not implemented.</summary>
      <param name="iMinLine"> </param>
      <param name="iMaxLine"> </param>
      <param name="pClient"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.SendExplicitFocus">
      <summary>Sends explicit focus to the window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.SetBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>Associates a text buffer with the view.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pBuffer">[in] Pointer to the text buffer to associate with the view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.SetCaretPos(System.Int32,System.Int32)">
      <summary>Sets the coordinates of the end point of a selection.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Line containing the caret position.</param>
      <param name="iColumn">[in] Column identifying the caret position. Viewcol coordinates may include virtual space.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.SetScrollPosition(System.Int32,System.Int32)">
      <summary>Sets the core text editor's scroll bar settings for the specified scroll bar.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iBar">[in] Specifies a horizontal or vertical scroll bar. Values may be either SB_HORZ or SB_VERT. For more information, see GetScrollInfo in the Platform SDK.</param>
      <param name="iFirstVisibleUnit">[in] First visible unit for the scroll bar.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.SetSelection(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Selects specified text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iAnchorLine">[in] Anchor line position for the selection.</param>
      <param name="iAnchorCol">[in] Anchor column position for the selection. Viewcol coordinates may include virtual space.</param>
      <param name="iEndLine">[in] End line position for the selection.</param>
      <param name="iEndCol">[in] End column position for the selection. Viewcol coordinates may include virtual space.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.SetSelectionMode(Microsoft.VisualStudio.TextManager.Interop.TextSelMode)">
      <summary>Sets the selection mode.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iSelMode">[in] Integer containing the selection mode.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.SetTopLine(System.Int32)">
      <summary>Sets the top line in the view to the baseline.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iBaseLine">[in] Indicates the line that should be set as the baseline.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.UpdateCompletionStatus(Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet,System.UInt32)">
      <summary>Used for word completion control.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pCompSet">[in] Pointer to a completion set object.</param>
      <param name="dwFlags">[in] Flags specifying completion status options. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.UpdateTipWindow(Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow,System.UInt32)">
      <summary>Updates the tip window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pTipWindow">[in] Pointer to a tip window object.</param>
      <param name="dwFlags">[in] Tip window options. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.UpdateViewFrameCaption">
      <summary>Forces the view to update its frame window caption, such as "[Read only]".</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEvents">
      <summary>Notifier of events occurring on the text view object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEvents.OnChangeCaretLine(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32)">
      <summary>Notifies the client when a change of caret line occurs.</summary>
      <param name="pView">[in] Pointer to a view object.</param>
      <param name="iNewLine">[in] Integer containing the new line.</param>
      <param name="iOldLine">[in] Integer containing the old line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEvents.OnChangeScrollInfo(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Notifies a client when the scrolling information is changed.</summary>
      <param name="pView">[in] Pointer to a view object.</param>
      <param name="iBar">[in] Integer value referring to the bar.</param>
      <param name="iMinUnit">[in] Integer value for the minimum units.</param>
      <param name="iMaxUnits">[in] Integer value for the maximum units.</param>
      <param name="iVisibleUnits">[in] Integer value for the visible units.</param>
      <param name="iFirstVisibleUnit">[in] Integer value for the first visible unit.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEvents.OnKillFocus(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Notifies a client when a view loses focus.</summary>
      <param name="pView">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEvents.OnSetBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>Notifies a client when a view is attached to a new buffer.</summary>
      <param name="pView">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface.</param>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewEvents.OnSetFocus(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Notifies a client when a view receives focus.</summary>
      <param name="pView">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewFilter">
      <summary>Allows further modification of the text view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewFilter.GetDataTipText(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.String@)">
      <summary>Provides data-tip support by obtaining the string value of the tip text.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pSpan">[in, out] On input, the parameter specifies the user-selected characters to which the tip should apply. On output, the parameter specifies a pointer to the entire span of text associated with the tip.</param>
      <param name="pbstrText">[out] Pointer to a string containing the tip text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewFilter.GetPairExtents(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the location of a matching pair item, given the location of the first item.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Integer containing the line index of the first item in the pair.</param>
      <param name="iIndex">[in] Integer containing the column index of the first item in the pair.</param>
      <param name="pSpan">[out] Pointer to a text span that identifies the location of the second pair item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewFilter.GetWordExtent(System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Calculates the word extent based on a character position.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Integer containing the line index of the character.</param>
      <param name="iIndex">[in] Integer containing the column index of the character.</param>
      <param name="dwFlags">[in] Options for determining the word extent. For a list of <paramref name="dwFlags" /> options, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS" />.</param>
      <param name="pSpan">[out] Pointer to a span object identifying the word extent.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsThreadSafeTextView">
      <summary>This is a thread-safe subset of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsThreadSafeTextView.ThreadSafeSetCaretPos(System.Int32,System.Int32)">
      <summary>Sends coordinates to.<see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.SetCaretPos(System.Int32,System.Int32)" />.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Line containing the caret position.</param>
      <param name="iColumn">[in] Column identifying the caret position. <paramref name="Viewcol" /> coordinates may include virtual space.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow">
      <summary>Provides a tip when the mouse pauses over a particular context stream in the core editor. </summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow.Dismiss">
      <summary>Closes the ToolTip window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow.GetContextStream(System.Int32@,System.Int32@)">
      <summary>Returns the position of the text the ToolTip should not obscure and over which the cursor can be held before the ToolTip is closed.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="piPos">[out] Starting position of the context stream.</param>
      <param name="piLength">[out] Length of the context stream from the starting position (<paramref name="piPos" />).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow.GetSizePreferences(Microsoft.VisualStudio.OLE.Interop.RECT[],Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA[])">
      <summary>Gets the size preferences for the ToolTip window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="prcCtxBounds">[out] The bounding rectangle of the ToolTip window, in screen coordinates.</param>
      <param name="pSizeData">[out] Size and position of the ToolTip window. For a list of <paramref name="pSizeData" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow.Paint(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Paints the ToolTip window.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="hdc">[in] Handle to the display context in which to draw the ToolTip window.</param>
      <param name="prc">[in] Specifies the bounding rectangle for the ToolTip window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow.WndProc(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Method information is not provided.</summary>
      <param name="hwnd"> </param>
      <param name="iMsg"> </param>
      <param name="wParam"> </param>
      <param name="lParam"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsUndoRedoClusterWithCommitEvents">
      <summary>Fires when an undo or redo cluster is closing.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsUndoRedoClusterWithCommitEvents.OnUndoRedoClusterClosingWithCommitGesture(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <param name="dwGestureFlags">[in]</param>
      <param name="ptsChanged">[in]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsUndoTrackingEvents">
      <summary>An <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager" /> client can expose this interface to be informed when the undo stack has returned to an unmodified state (that is, no data-changing modifications exist) by the undo manager.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsUndoTrackingEvents.OnReturnToCleanState">
      <summary>Informs the client that the document has returned to a clean state.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsUndoUnit">
      <summary>Determines if the undo unit applies to UI items only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsUndoUnit.fChangeData">
      <summary>Indicates whether the undo unit applies to UI only and does not change the document data.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserData">
      <summary>Allows a caller to use a GUID to set or get user data (properties).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsUserData.GetData(System.Guid@,System.Object@)">
      <summary>Returns user data from a buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="riidKey">[in] Unique identifier of the data.</param>
      <param name="pvtData">[out] Pointer to a VARIANT containing the user data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsUserData.SetData(System.Guid@,System.Object)">
      <summary>Sets user data to a buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="riidKey">[in] Unique identifier of the data.</param>
      <param name="vtData">[in] Data to be set.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsUserDataEvents">
      <summary>Notifies clients of changes to the user data.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsUserDataEvents.OnUserDataChange(System.Guid@,System.Object)">
      <summary>Notifies the client of changes to the user data.</summary>
      <param name="riidKey">[in] Unique identifier of the data that has changed.</param>
      <param name="vtNewValue">[in] New value. If a client wants to hold on to the value, they must make a copy of this variant.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.IVsViewRangeClient"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.IVsViewRangeClient.AdjustViewRange(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.TextViewAction,System.Int32,System.Int32)">
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="pView">[in]</param>
      <param name="action">[in]</param>
      <param name="iLine">[in]</param>
      <param name="iCount">[in]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES">
      <summary>Used to communicate user preferences with the text manager, views, and language services. View settings follow the text manager's settings unless a specific set of forced settings are specified when <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.Initialize(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.IntPtr,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.INITVIEW[])" /> is called.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fAutoListMembers">
      <summary>Determines whether a proposed list of members is produced on the fly.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fAutoListParams">
      <summary>Determines whether a proposed list of parameters is produced on the fly.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fDropdownBar">
      <summary>Determines whether language services support the dropdown or navigation bar.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fHideAdvancedAutoListMembers">
      <summary>Hide advanced members. This parameter is irrelevant if the <see cref="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fAutoListMembers" /> parameter is set to false.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fHotURLs">
      <summary>Allows for single-click URL navigation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fInsertTabs">
      <summary>Determines whether the tab character or spaces are inserted for a tab.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fLineNumbers">
      <summary>Determines whether line numbers are shown in the selection margin.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fShowCompletion">
      <summary>Determines whether statement completion is set through the user interface.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fShowSmartIndent">
      <summary>Determines whether the smart indent option is set through the user interface.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fTwoWayTreeview">
      <summary>Determines whether the tree view is shown.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fVirtualSpace">
      <summary>Determines whether virtual space navigation and selection are allowed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.fWordWrap">
      <summary>Determines whether word wrap occurs.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.guidLang">
      <summary>Specifies the Language service GUID.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.IndentStyle">
      <summary>Specifies no indenting, block indenting, or smart indenting.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.szFileType">
      <summary>Specifies the file type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.uIndentSize">
      <summary>Limit of MAX_EDITOR_TAB_SIZE.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES.uTabSize">
      <summary>Limit of MAX_EDITOR_TAB_SIZE.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.LanguageContextHint">
      <summary>Specifies whether the context is an F1 keyword.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LanguageContextHint.LCH_DEFAULT">
      <summary>Typical idle-time update; it should be as fast as possible.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LanguageContextHint.LCH_F1_HELP">
      <summary>Means that the context will be used for F1 handling; Idle time can be longer.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.LAYER_MODULE_CAPABILITIES"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LAYER_MODULE_CAPABILITIES.LMC_TEXTFIND">
      <summary>Shallow text find operations (for example, ISearch)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LAYER_MODULE_CAPABILITIES.LMC_TEXTPRINT">
      <summary>Printing</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LAYER_MODULE_CAPABILITIES.LMC_TEXTORIGINATE">
      <summary>Originates text</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA">
      <summary>Used to pass direct-access to line data in a buffer through <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" />. This structure returns all of the information for a single line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATA.fMarkers">
      <summary>If true, then syntax coloring related to the presence of markers is considered in the coloring information provided in the <paramref name="pAttributes" /> parameter. If null, then the marker data does not affect the syntax coloring returned.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATA.iEolType">
      <summary>Type of the new line character at the end of the line (for example "/n", "/r/n", and so on).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATA.iLength">
      <summary>Number of plain text characters in the line, including the end of line (EOL) character.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATA.pAttributes">
      <summary>An array of ULONG containing a list of syntax coloring attributes for each character in the line. Syntax coloring for a line is affected by the markers present in the line and keyword coloring.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATA.pszText">
      <summary>Array of WCHAR containing all the characters in the line. Use the <paramref name="iLength" /> parameter to determine the end of text in the line. The <paramref name="pszText" /> parameter is not NULL-terminated.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX">
      <summary>Used to pass direct access to line data in a buffer through <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineDataEx(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX.dwFlags">
      <summary>ORing of LINEDATAFLAGS enumORing of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEXFLAGS" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX.dwReserved">
      <summary>Reserved for use by <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> implementation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX.iEolType">
      <summary>Type of the new line character at the end of the line (for example "/n", "/r/n", and so on).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX.iLength">
      <summary>Number of plain text characters, excluding the end of line (EOL) character.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX.pAtomicTextChain">
      <summary>For internal use. Parameter information is not provided.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX.pAttributes">
      <summary>An array of ULONG containing a list of syntax coloring attributes for each character in the line. Syntax coloring for a line is affected by the markers present in the line and keyword coloring.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX.pszText">
      <summary>Array of WCHAR containing all the characters in the line. Use the <paramref name="iLength" /> parameter to determine the end of text in the line. The <paramref name="pszText" /> parameter is not NULL-terminated.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEXFLAGS">
      <summary>Provides additional information about the line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEXFLAGS.ldfDefault">
      <summary>Default value.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEXFLAGS.ldfMarkers">
      <summary>Markers do inline coloring of the text of this line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEXFLAGS.ldfNoReadLock">
      <summary>No locking was done for this line data.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE">
      <summary>Specifies default line style options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE.LI_NONE">
      <summary>No line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE.LI_SOLID">
      <summary>Solid line. This value is only valid for <see cref="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_BORDER" /> markers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE.LI_SQUIGGLY">
      <summary>Squiggly line. This value is only valid for <see cref="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_LINE" /> markers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE.LI_HATCH">
      <summary>Hatched pattern. This value is only valid for <see cref="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_BORDER" /> markers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LINESTYLE.LI_DOTTED">
      <summary>Fifty percent gray dither (dotted when 1 pixel). This value is only valid for <see cref="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_BORDER" /> markers.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags">
      <summary>Specifies whether the linked undo transaction is strict or not.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags.mdtDefault">
      <summary>Specifies the transaction to be non-strict.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags.mdtStrict">
      <summary>Specifies the transaction to be strict.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.LinkedUndoErrors">
      <summary>Undo errors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LinkedUndoErrors.LINKEDUNDO_E_INTERVENING_ACTION">
      <summary>A parent action failed due to another action not being at the top of the stack. This will be returned from <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager" /> when an undo is attempted but fails.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.LTE_TEXTDATAFLAGS">
      <summary>Indicates how a data object is pasted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LTE_TEXTDATAFLAGS.LTE_NORMAL">
      <summary>Normal (stream) mode data.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LTE_TEXTDATAFLAGS.LTE_BOX">
      <summary>Box (column) mode data. Text is inserted as a box.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.LTE_TEXTDATAFLAGS.LTE_LINE">
      <summary>Line mode data. Text is inserted as whole lines only. This option inserts text in the same manner in which it is selected, if it is selected in line mode.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.MapLocalSpanFlags">
      <summary>Specifies mapping conditions for local spans.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MapLocalSpanFlags.MLS_VISIBLE_ONLY">
      <summary>Omit concealed and collapsed text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MapLocalSpanFlags.MLS_INCLUDE_USER_EXPANDABLE">
      <summary>Omit concealed text but include collapsed text (collapsible text that is in the collapsed state).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MapLocalSpanFlags.MLS_NEVER_COMBINE_SPANS">
      <summary>Keep adjacent spans from being combined into a single underlying span.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MapLocalSpanFlags.mlsVisibleOnly">
      <summary>Replaced by MSL_VISIBLE_ONLY.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MapLocalSpanFlags.mlsIncludeUserExpandable">
      <summary>Replaced by MSL_INCLUDE_USER_EXPANDABLE.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MapLocalSpanFlags.mlsNeverCombineSpans">
      <summary>Replaced by MSL_NEVER_COMBINE_SPANS.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS">
      <summary>Provides flags that specify marker behavior.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS.MB_DEFAULT">
      <summary>Default stream behavior.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS.MB_LINESPAN">
      <summary>Marker always adjusts itself to span only one line at a time.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS.MB_LEFTEDGE_LEFTTRACK">
      <summary>If edits occur on the left edge of the marker, then the marker tracks to the left.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS.MB_RIGHTEDGE_RIGHTTRACK">
      <summary>If edits occur on the right edge of the marker, then the marker tracks to the right.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS.MB_MULTILINESPAN">
      <summary>Marker can span multiple lines.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERBEHAVIORFLAGS.MB_TRACK_EDIT_ON_RELOAD">
      <summary>Forces the marker to track every edit as a replace, ignoring any reload semantics. Do not use this value unless you have markers that need to guarantee that they are tracking in response to <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLinesEvents.OnChangeLineText(Microsoft.VisualStudio.TextManager.Interop.TextLineChange[],System.Int32)" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues">
      <summary>Specifies the integer identifying the item number for a marker type's context menu command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues.mcvFirstContextMenuCommand">
      <summary>First command associated with the marker type. The list of commands associated with each marker type varies with the marker type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues.mcvLastContextMenuCommand">
      <summary>Last command associated with the marker type. The list of commands associated with each marker type varies with the marker type.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues.mcvGlyphSingleClickCommand">
      <summary>Fired for a single click on the glyph (if one exists).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues.mcvBodyDoubleClickCommand">
      <summary>Fired for a double click on the body text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MarkerCommandValues.mcvGlyphDoubleClickCommand">
      <summary>Fired for a double click on the glyph (if one exists).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA">
      <summary>Specifies directional options for locating markers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA.iBottomLine">
      <summary>Bottom line of the range.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA.iCount">
      <summary>Number of markers contained in the range.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA.iTopLine">
      <summary>Top line of the range.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA.pLayer">
      <summary>The layer originating this information.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA.pNext">
      <summary>Pointer to the next <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA.rgfLineMarked">
      <summary>Used by <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineData(System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATA[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])" /> for optimization.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA.rgpMarker">
      <summary>Marker instance. Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLayerMarker" /> interface.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE">
      <summary>Sets the characteristics of a text marker.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_INVISIBLE">
      <summary>Invisible marker. Priority Level: 100</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_READONLY">
      <summary>Read-only. Priority Level: 0 (lower priority for performance reasons)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_SHORTCUT">
      <summary>Task list shortcut. Priority Level: 199</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_BOOKMARK">
      <summary>Generic bookmark (or tag). Priority Level: 200</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_COMPILE_ERROR">
      <summary>Compile error. Priority Level: 600</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_CODESENSE_ERROR">
      <summary>CodeSense error. Priority Level: 700</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_OTHER_ERROR">
      <summary>Third party tool error. Priority level: 750.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_REGION_COLLAPSED">
      <summary>Collapsible region is collapsed. Priority Level: 801</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_REGION_EXPANDED">
      <summary>Collapsible region is expanded 800.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_LIST_LOCATION">
      <summary>Current location from result list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.DEF_MARKER_COUNT">
      <summary>Marker count. This should be at the end to define the number of markers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_IDENTERROR">
      <summary>Obsolete. Use MARKER_COMPILE_ERROR.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERTYPE.MARKER_SYNTAXERROR">
      <summary>Obsolete. Use MARKER_COMPILE_ERROR.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL">
      <summary>Determines the visual style of the marker.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_GLYPH">
      <summary>Can show a glyph in the widget margin. This indicates that you want to draw a margin glyph. Draw the glyph using <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType.DrawGlyphWithColors(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerColorSet,System.UInt32,System.Int32)" />. If the widget margin does not exist, depending on the window and on the user's preferences, then the glyph is not visible.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_COLOR_ALWAYS">
      <summary>Indicates that the marked text should always be colored inline. This option is exclusive of the MV_COLOR_LINE_IF_NO_MARGIN option.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_COLOR_LINE_IF_NO_MARGIN">
      <summary>Indicates that the marked text should be colored only if the widget margin is hidden. This option is exclusive of the MV_COLOR_ALWAYS option.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_LINE">
      <summary>Marker is only a line adornment and does not otherwise affect coloring. Thus, the marker is some form of underline style. Currently, the only supported form of this is a wavy line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_TIP_FOR_BODY">
      <summary>Determines whether a tip should be shown for the body of the marker text. The MV_TIP_FOR_BODY and MV_TIP_FOR_GLYPH options are dependant on one another. If this value is set, marked text will trigger a tool tip over the body or glyph. However, as the marker type provider, you are not allowed to specify what text shows up. This is handled by the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient.GetTipText(Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker,System.String[])" />handler of whoever created the given marker instance.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_TIP_FOR_GLYPH">
      <summary>Determines whether a tip should be shown in the widget margin.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_SEL_MARGIN_GLYPH">
      <summary>Similar to MV_GLYPH, but indicates that the glyph lives in the selection margin, not the normal widget margin.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_FORCE_INVISIBLE">
      <summary>Forces the marker to be invisible. Use this setting to toggle a marker between being visible and invisible, which is faster than using <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.SetType(System.Int32)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_BORDER">
      <summary>Indicates that a box is drawn around the marked text. The border is not necessarily a square in the case of a multi-line marker. You can specify either a solid or dashed line. For more information, refer to the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType.GetDefaultLineStyle(Microsoft.VisualStudio.TextManager.Interop.COLORINDEX[],Microsoft.VisualStudio.TextManager.Interop.LINESTYLE[])" /> method.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_GLYPH_HOVER_CURSOR">
      <summary>Indicates that the client has requested a callback (via their client interface) to set the mouse cursor when the user hovers the mouse over the glyph.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_DRAGGABLE_GLYPH">
      <summary>Indicates that a glyph can take part in drag and drop operations. In addition to MV_DRAGGABLE_GLYPH, a marker that allows dragging should also specify MV_GLYPH_HOVER_CURSOR, so that the editor knows to provide a custom cursor for the mouse when it passes over the glyph. These visual styles can either be set for the marker type (if all markers of the given type have the same behavior) or for a given marker instance. The text view negotiates the hover cursor and drag initiation by calling QueryInterface on the marker client provided (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient" />). The client object should implement <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsMouseCursorProvider" /> to handle mouse cursor updates for MV_GLYPH_HOVER_CURSOR and <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerGlyphDropHandler" /> to handle drop negotiation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_MULTILINE_GLYPH">
      <summary>Indicates that a glyph spans multiple lines. This enables the drawing of multi-line glyphs. If you specify this flag, your I<see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsPackageDefinedTextMarkerType.DrawGlyphWithColors(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[],System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerColorSet,System.UInt32,System.Int32)" /> handler is called with the <see cref="F:Microsoft.VisualStudio.TextManager.Interop.GLYPHDRAWFLAGS.GDF_MULTILINE" /> flag, and often with <see cref="F:Microsoft.VisualStudio.TextManager.Interop.GLYPHDRAWFLAGS.GDF_BOTTOMEDGE" />, depending on the scenario.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_CONTEXT_CONTRIBUTION_FOR_BODY">
      <summary>Indicates that the body of a marker wants to contribute context, and thus its client can be queried for <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsUserContextUpdate" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MARKERVISUAL.MV_COLOR_SPAN_IF_ZERO_LENGTH">
      <summary>Indicates that a marker should paint as a solid bar if the text span is of zero length. This setting should not be used for markers such as wavy lines, because the line will appear only as a solid bar.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.MethodTextType">
      <summary>Identifies different portions of the method tip to provide information on.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MethodTextType.MTT_TYPEPREFIX">
      <summary>Return type that is provided before the variable name in code. For example, the "Long" type in Visual C++, which is written as "Long MyVariable" in code.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MethodTextType.MTT_TYPEPOSTFIX">
      <summary>Return type that is provided after the variable name in code. For example, the "Long" type in Visual Basic, which is written as "MyVariable AsLong" in code.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MethodTextType.MTT_NAME">
      <summary>Method name.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MethodTextType.MTT_DESCRIPTION">
      <summary>Description of method, which is provided its own line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MethodTextType.MTT_OPENBRACKET">
      <summary>Open bracket delimiter. Default value is a left parenthesis. To show nothing in the bracket location, return an empty string in <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.GetMethodText(System.Int32,Microsoft.VisualStudio.TextManager.Interop.MethodTextType)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MethodTextType.MTT_CLOSEBRACKET">
      <summary>Closed bracket delimiter. Default value is a right parenthesis. To show nothing in the bracket location, return an empty string in <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData.GetMethodText(System.Int32,Microsoft.VisualStudio.TextManager.Interop.MethodTextType)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MethodTextType.MTT_DELIMITER">
      <summary>Parameter delimiter. default is ", ". You must specify the space if you want it included in your delimiter string.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_ABS_TYPE">
      <summary>Indicates moving a record selection by an absolute amount.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_ABS_TYPE.MOVESELECTION_ABS_FIRSTCOLUMN">
      <summary>Move record selection to first column.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_ABS_TYPE.MOVESELECTION_ABS_FIRSTTEXTCOLUMN">
      <summary>Move record selection to first text column.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_ABS_TYPE.MOVESELECTION_ABS_LASTCOLUMN">
      <summary>Move record selection to last column.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_ABS_TYPE.MOVESELECTION_ABS_FIRSTLINE">
      <summary>Move record selection to first line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_ABS_TYPE.MOVESELECTION_ABS_LASTLINE">
      <summary>Move record selection to last line.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_REL_TYPE">
      <summary>Indicates expanding a selection by a relative amount.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_REL_TYPE.MOVESELECTION_REL_CHARACTER">
      <summary>Move selection one character.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_REL_TYPE.MOVESELECTION_REL_WORD">
      <summary>Move selection one word.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_REL_TYPE.MOVESELECTION_REL_LINE">
      <summary>Move selection one line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.MOVESELECTION_REL_TYPE.MOVESELECTION_REL_PAGE">
      <summary>Move selection one page.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion">
      <summary>Creates a new outline or hidden text region over the specified text span.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion.dwBehavior">
      <summary>Determines whether a region is client- or editor-controlled.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion.dwClient">
      <summary>Client-defined information that is used to uniquely identify the new region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion.dwState">
      <summary>Determines whether the new hidden region is expanded or collapsed. For more information see the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_STATE" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion.iType">
      <summary>Specifies whether a hidden (concealed) or outline (collapsible) region is created. This member is a permanent property of the region. For more information, see the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_TYPE" /> enumeration.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion.pszBanner">
      <summary>Banner text displayed when the region is collapsed. This value is ignored unless a value of <see cref="F:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_BEHAVIOR.hrbClientControlled" /> is specified for <paramref name="dwBehavior" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion.tsHiddenText">
      <summary>Span of text to create the new region for. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.NewOutlineRegion">
      <summary>Specifies the span and state of a new outline region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewOutlineRegion.dwState">
      <summary>State of the text span, that is, whether it is expanded or collapsed. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.HIDDEN_REGION_STATE" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewOutlineRegion.tsHiddenText">
      <summary>Structure identifying the span of hidden text. For more information see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.NewSyntheticRegion">
      <summary>Holds information about a synthetic text region.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewSyntheticRegion.dwBehavior">
      <summary>Currently unused; must be zero.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewSyntheticRegion.dwClient">
      <summary>Client-defined DWORD; this can be retrieved with <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsSyntheticRegion.GetClientData(System.UInt32@)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewSyntheticRegion.iAnchorIndex">
      <summary>Specifies the zero-based character index (must not be in virtual space).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewSyntheticRegion.iAnchorLine">
      <summary>Specifies the zero-based line number.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewSyntheticRegion.iMarkerType">
      <summary>Specifies the display characteristics (coloring, glyph) to show for this region. It has no effect on base buffer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewSyntheticRegion.iSerialValue">
      <summary>Used to sort adjacent regions. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.NewSyntheticRegion.pszText">
      <summary>Specifies the text to display (can be &gt;1 line). </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.PAINTINGRESTRICTIONS"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PAINTINGRESTRICTIONS.PR_NONE">
      <summary>No restrictions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PAINTINGRESTRICTIONS.PR_NO_MARGIN">
      <summary>No widget margin available.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.PANEEVENTS">
      <summary>Specifies events for split window panes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEEVENTS.PE_GOTFOCUS">
      <summary>Pane received focus.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEEVENTS.PE_CLOSED">
      <summary>Pane is closed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEEVENTS.PE_FLAGSCHANGED">
      <summary>
        <see cref="T:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS" /> has changed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEEVENTS.PE_DETACHED">
      <summary>Pane is detached.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEEVENTS.PE_FOCUS_TO_EDIT_PANE">
      <summary>Sets focus on an edit pane.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS">
      <summary>Indicates appearance of split window panes.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS.PF_SUNKEN">
      <summary>Default border style.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS.PF_RAISED">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS.PF_ETCHED">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS.PF_BUMP">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS.PF_SHALLOW">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS.PF_BORDERMASK">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS.PF_BORDER">
      <summary>Border types are ignored unless this is set.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS.PF_ELASTICX">
      <summary>Pane "prefers" elasticity when sized horizontally.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS.PF_ELASTICY">
      <summary>Pane "prefers" elasticity when sized vertically.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANEFLAGS.PF_NOFOCUS">
      <summary>If a pane specifies PF_NOFOCUS it can still get the focus via the mouse, but it will not participate in F6-style pane hopping.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.PANETYPE">
      <summary>Specifies the pane to get with <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsSplitRoot.GetPane(Microsoft.VisualStudio.TextManager.Interop.PANETYPE,Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane@)" /> calls.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANETYPE.GP_FOCUS">
      <summary>Pane with focus.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANETYPE.GP_NEXT">
      <summary>Next pane.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.PANETYPE.GP_PREV">
      <summary>Previous pane.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.ParameterTextType">
      <summary>Specifies parameter information for the method tip window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ParameterTextType.PTT_DECLARATION">
      <summary>Full declaration as it appears in signature (that is, "Long MyVariable" or "MyVariable As Long").</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ParameterTextType.PTT_NAME">
      <summary>Parameter name only (that is, "MyVariable").</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.ParameterTextType.PTT_DESCRIPTION">
      <summary>Description (gets its own line, and is prefixed with NAME: (bolded)).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS">
      <summary>Regular expression evaluation errors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_INTERNALERROR">
      <summary>Internal error.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_SYNTAXERROR">
      <summary>Syntax error in expression.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_STACKOVERFLOW">
      <summary>Evaluation stack overflow.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_MISSINGARG">
      <summary>Missing argument in syntax.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_POWERARGOUTOFRANGE">
      <summary>^n; Power closure argument out of range.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_ESCAPEMISSINGARG">
      <summary>\ or \x or \u; Missing valid argument.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_SPECIALUNKNOWN">
      <summary>:x; Unknown x.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_TAGOUTOFRANGE">
      <summary>\n; n out of range.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_SETMISSINGCLOSE">
      <summary>[]; Missing ].</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_TAGMISSINGCLOSE">
      <summary>{}; Tag missing }.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_TOOMANYTAGS">
      <summary>{}; Too many tagged expressions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_EMPTYSET">
      <summary>[]; Empty set.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_GROUPMISSINGCLOSE">
      <summary>(); Missing ).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RE_ERRORS.RE_E_REPLACETEXT">
      <summary>Unable to create replacement text.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.READONLYSTATUS">
      <summary>Sets the read and write status of a text buffer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.READONLYSTATUS.ROSTATUS_NotReadOnly">
      <summary>Text buffer can be written to.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.READONLYSTATUS.ROSTATUS_ReadOnly">
      <summary>Text buffer is read-only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.READONLYSTATUS.ROSTATUS_Unknown">
      <summary>Determine the read-only status by checking with the associated text buffer.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags">
      <summary>Specifies the state of a selection relative to another layer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.RSS_DEFAULT">
      <summary>Coordinates relative to the top view layer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.RSS_TOP_LAYER">
      <summary>Coordinates relative to the top view layer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.RSS_BUFFER">
      <summary>Coordinates relative to the buffer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.RSS_RELATIVE_LAYER">
      <summary>Coordinates relative to the layer specified in <paramref name="pReference" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.RSS_TRACKSEL">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.RSS_SET_WITHOUT_SCROLLING">
      <summary>Flags for <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsLayeredTextView.SetRelativeSelectionState(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextLayer,Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE[])" /> tells the view to not scroll to force the selection to be visible.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.RSS_SET_TO_NEAREST_LOCAL">
      <summary>For RSS_BUFFER or RSS_RELATIVE_LAYER, tells the view to put the caret at the nearest local position.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.rssDefault">
      <summary>Same as RSS_DEFAULT. For compatibility.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.rssTopLayer">
      <summary>Same as RSS_TOP_LAYER. For compatibility.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.rssBuffer">
      <summary>Same as RSS_BUFFER. For compatibility.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.rssRelativeLayer">
      <summary>Same as RSS_RELATIVE_LAYER. For compatibility.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RelativeSelectionStateFlags.rssTrackSel">
      <summary>Same as RSS_TRACKSEL. For compatibility.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS">
      <summary>Specifies options for modifying text during a replace operation.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS.rtfDefault">
      <summary>New line normalization.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS.rtfKeepMarkers">
      <summary>Retain existing markers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS.rtfDoNotNormalizeNewlines">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS.rtfNormalizeTabsAndSpaces">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS.rtfSyntacticReformat">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS.rtfClientSuppressFormatting">
      <summary>Stop <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextReplaceEvents.OnReplace(Microsoft.VisualStudio.TextManager.Interop.ChangeInput[])" /> listeners from formatting code.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS.rtfInterimText">
      <summary>This flag communicates to <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.ReplaceLinesEx(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])" /> that the inserted text is interim text from the Input Method Editor (IME). This affects undo item merging. Subsequent text overwrites the interim text and the undo items need to be merged in a way that reflects this.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.RESOLVENAMEFLAGS">
      <summary>Provides flags for <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsLanguageDebugInfo.ResolveName(System.String,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsEnumDebugName@)" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.RESOLVENAMEFLAGS.RNF_BREAKPOINT">
      <summary>Resolve names for the breakpoint.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE">
      <summary>Represents the state of a selection so that it can be restored to that state.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE.dwFlags">
      <summary>Combination of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATEFLAGS" /> enumeration values.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE.dwReserved">
      <summary>Reserved for future use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE.iActiveCol">
      <summary>Index of the active column.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE.iActiveLine">
      <summary>Index of the active line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE.iAnchorCol">
      <summary>Index of the anchor column.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATE.iAnchorLine">
      <summary>Index of the anchor line.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATEFLAGS"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATEFLAGS.ssfDefault">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SELECTIONSTATEFLAGS.ssfColumn">
      <summary> </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SPLITFLAGS">
      <summary>Specifies how a window pane is to be split.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SPLITFLAGS.SF_HORIZONTAL">
      <summary>Split is horizontal. (default)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SPLITFLAGS.SF_VERTICAL">
      <summary>Split is vertical.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SPLITFLAGS.SF_MAKESECONDARY">
      <summary>Split pane is the secondary pane. (default)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SPLITFLAGS.SF_MAKEPRIMARY">
      <summary>Split pane is the primary pane.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SPLITFLAGS.SF_ADJUSTABLE">
      <summary>Split pane is adjustable. (default)</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SPLITFLAGS.SF_FIXED">
      <summary>Split pane is fixed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SPLITNOTIFYCODE">
      <summary>Represents different changes to the splitter. </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SPLITNOTIFYCODE.SNC_BEGINSIZE">
      <summary>The initial size of the split pane.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SPLITNOTIFYCODE.SNC_ENDSIZE">
      <summary>The final size of the split pane.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SPLITNOTIFYCODE.SNC_ANCESTORDETACHED">
      <summary>The splitter is detached from its parent.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SPLITNOTIFYCODE.SNC_ANCESTORATTACHED">
      <summary>The split pane is attached to its parent.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SPLITNOTIFYCODE.SNC_LBUTTONDBLCLK">
      <summary>The split pane was double-clicked</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.StorageLoadFlags"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.StorageLoadFlags.slfDefault">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.StorageLoadFlags.slfReload">
      <summary> </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SVsCodeWindow">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindow" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SVsCodeWindowManager">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsCodeWindowManager" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SVsLanguageFilter">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextViewFilter" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SVsLinkedUndoTransactionManager">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsLinkedUndoTransactionManager" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SVsTextManager">
      <summary>Passed to <see cref="M:System.IServiceProvider.GetService(System.Type)" /> to return a reference to <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextManager" /> and <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextManager" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.SYNTHETIC_REGION_EVENT">
      <summary>Specifies a synthetic region event.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.SYNTHETIC_REGION_EVENT.sreRegionReloaded">
      <summary>The text of a Synthetic region was reloaded and may no longer be at an appropriate location.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TabStop">
      <summary>Holds information about tab stops.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TabStop.cEl"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TabStop.dwFlags">
      <summary>Specifies tab stop flags. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TabStopFlags" /> enumeration..</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TabStop.iCol"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TabStop.iRepeatWidth"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TabStopFlags"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TabStopFlags.USE_DEFAULT_REPEAT">
      <summary> </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextAddress">
      <summary>Defines a text address in terms of a character and a line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextAddress.index">
      <summary>Character position defining the text address.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextAddress.line">
      <summary>Line position defining the text address.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextBufferErrors">
      <summary>General definitions for text buffer errors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferErrors.BUFFER_E_READONLY">
      <summary>The buffer has been marked as read-only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferErrors.BUFFER_E_READONLY_REGION">
      <summary>A region has been marked as read-only.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferErrors.BUFFER_E_TIMEOUT">
      <summary>Timed out waiting for access.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferErrors.BUFFER_E_LOCKED">
      <summary>The buffer was locked for writing.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferErrors.BUFFER_E_SCC_READONLY">
      <summary>The file backing the buffer is under source code control and checked in.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferErrors.BUFFER_E_DEST_TOO_SMALL">
      <summary>The memory block passed in was too small.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferErrors.MARKER_E_INVALIDATED">
      <summary>You are trying to manipulate an invalid marker.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferErrors.MARKER_E_BUFFERDESTROYED">
      <summary>You are trying to manipulate a marker whose buffer has been destroyed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextBufferInitFlags">
      <summary>Specifies text buffer initialization flags.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferInitFlags.BIF_DEFAULT">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferInitFlags.BIF_CUSTOMSTORAGE">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextBufferInitFlags.BIF_INITTEXT">
      <summary> </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextFindMode">
      <summary>Specifies text find / replace flags shared by both the buffer and view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextFindMode.TFIND_BACKWARDS">
      <summary>Search backwards.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextFindMode.TFIND_MATCH_CASE">
      <summary>Match text case.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextFindMode.TFIND_WHOLE_WORD">
      <summary>Search only for the whole word.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextFindMode.TFIND_REG_EXPR">
      <summary>Search involves a regular expression.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextFindMode.TFIND_WRAP_SEARCH">
      <summary>Search even if target text wraps.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextFindMode.TFIND_IN_SELECTION">
      <summary>Search within the current selection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextFindMode.TFIND_NEW_SEARCH">
      <summary>Start a new search.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextLineChange">
      <summary>Provides settings for tracking changes to any text line in the buffer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextLineChange.iNewEndIndex">
      <summary>Endpoint of the inserted text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextLineChange.iNewEndLine">
      <summary>End line of the inserted text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextLineChange.iOldEndIndex">
      <summary>End point of the deleted text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextLineChange.iOldEndLine">
      <summary>End line of deleted text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextLineChange.iStartIndex">
      <summary>Start point of the old and new text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextLineChange.iStartLine">
      <summary>Start line of the old and new text.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextSelMode">
      <summary>Determines whether stream or box selection mode is being used.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextSelMode.SM_STREAM">
      <summary>Specifies a stream selection. To create a stream selection in the core text editor, simply select text with your mouse.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextSelMode.SM_BOX">
      <summary>Specifies a box selection. To create a box selection in the core text editor, press the ALT key while you select text with your mouse.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan">
      <summary>Defines a span of text based on character and line index.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextSpan.iEndIndex">
      <summary>Ending character index within the line. This value must be less than or equal to the length of the line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextSpan.iEndLine">
      <summary>Ending line index.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextSpan.iStartIndex">
      <summary>Starting character index within the line. This value must be less than or equal to the length of line.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextSpan.iStartLine">
      <summary>Starting line index.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextViewAction">
      <summary>Specifies text positioning within a view.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewAction.TVA_SETCARETPOS">
      <summary>Caret (insertion point) management.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewAction.TVA_CENTERLINES">
      <summary>Place the specified lines of text in the center of the view.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextViewErrors">
      <summary>General definitions for text view errors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewErrors.VIEW_E_NO_BOOKMARKS">
      <summary>There are no bookmarks to navigate to or delete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewErrors.VIEW_E_NO_DEBUGGER">
      <summary>There is no debugger available to handle the requested command.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewErrors.VIEW_E_USERREADONLY">
      <summary>This file cannot be modified in the editor.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewErrors.VIEW_E_LOCATION_HIDDEN">
      <summary>The location you referenced (moving selection to, scrolling into view, etc.) is not presently visible in this view.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags">
      <summary>Specifies view options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_DEFAULT">
      <summary>No view-owned scrollbars, and no forced settings.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_HSCROLL">
      <summary>Indicates that the view should have a horizontal scrollbar. This value is equivalent to WS_HSCROLL from the Platform SDK. Note that this setting is different from the MDI child scrollbars used by the text editor.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_VSCROLL">
      <summary>Indicates that the view should have a vertical scrollbar. This value is equivalent to WS_VSCROLL from the Platform SDK.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_UPDATE_STATUS_BAR">
      <summary>Tells the view to update the status bar.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_SET_WIDGET_MARGIN">
      <summary>If you wish to force a certain setting upon a view, regardless of the user's editor preference settings, use these flags along with a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" /> pointer into <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextView.Initialize(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.IntPtr,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.INITVIEW[])" /> method to force a given setting. Use the widget margin setting from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" /> structure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_SET_SELECTION_MARGIN">
      <summary>Use the selection margin setting from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" /> structure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_SET_VIRTUAL_SPACE">
      <summary>Use the virtual space setting from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" /> structure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_SET_INDENT_MODE">
      <summary>Use the auto-indent suppression setting from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" /> structure.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_SET_STREAM_SEL_MODE">
      <summary>Obsolete.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_SET_VISIBLE_WHITESPACE">
      <summary>Use visible white space setting.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_SET_OVERTYPE">
      <summary>Use overtype mode setting.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_SET_DRAGDROPMOVE">
      <summary>Use drag and drop move setting</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags.VIF_SET_HOTURLS">
      <summary>Use the Hot URLs setting</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TipPosPreference">
      <summary>Determines where the tip window is placed relative to the context stream.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TipPosPreference.TPP_ABOVE">
      <summary>Tip window is positioned above the context stream.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TipPosPreference.TPP_BELOW">
      <summary>Tip window is positioned below the context stream.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TipPosPreference.TPP_LEFT">
      <summary>Tip window is positioned to the left of the context stream.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TipPosPreference.TPP_RIGHT">
      <summary>Tip window is positioned to the right of the context stream.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TipPosPreference.TPP_DOCKED">
      <summary>Not implemented. This value defaults to TPP_ABOVE.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA">
      <summary>Sets the size and position of a tip window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA.dwPosition">
      <summary>Position of the tip window relative to the context stream. For a list of <paramref name="dwPosition" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TipPosPreference" />.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA.size">
      <summary>Dimensions of the tip window.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TipSuccesses"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TipSuccesses.TIP_S_ONLYIFNOMARKER">
      <summary> </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags">
      <summary>Specifies tip window options.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags.UTW_CONTEXTCHANGED">
      <summary>Context stream is different.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags.UTW_CONTENTCHANGED">
      <summary>Data displayed in window has changed (size will be re-queried).</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags.UTW_DISMISS">
      <summary>Tip window should be dismissed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.UndoErrors">
      <summary>General definitions for undo errors.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UndoErrors.UNDO_E_CLIENTABORT">
      <summary>Undo action terminated with client abort.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags">
      <summary>Specifies completion set flags.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.UCS_NAMESCHANGED">
      <summary>Names or name count has changed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.UCS_EXTENTCHANGED">
      <summary>Extent changed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.UCS_FLAGSCHANGED">
      <summary>Flags have changed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.UCS_COMPLETEWORD">
      <summary>Attempt word completion.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.CSF_CUSTOMMATCHING">
      <summary>Indicates that the language service handles custom completion matching of text typed by the user. Use IVsCompletionSet::<see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.GetBestMatch(System.String,System.Int32,System.Int32@,System.UInt32@)" /> to manage selections. If you do not specify CSF_CUSTOMMATCHING, then the view handles matching text to the available options in the completion set.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.CSF_CUSTOMCOMMIT">
      <summary>Indicates that the language service handles how an item selected from the completion box is entered into the text editor. Use <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.OnCommit(System.String,System.Int32,System.Int32,System.UInt16,System.String@)" /> to commit completions.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.CSF_HAVEDESCRIPTIONS">
      <summary>Provides a tip for items in the completion box. Use <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.GetDescriptionText(System.Int32,System.String@)" /> to provide text for at least some of the entries.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.CSF_INITIALEXTENTKNOWN">
      <summary>Indicates that the language service knows where on a line it wants to display items, and where the word boundaries are. Use <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet.GetInitialExtent(System.Int32@,System.Int32@,System.Int32@)" /> to determine the initial word extent.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.CSF_NOCASEMATCHING">
      <summary>Do not apply case sensitive matching.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.CSF_NOCASEUNIQUENESS">
      <summary>Do not apply case or character matching to determine uniqueness (for word completion). For example, "WEAR" could be matched to "year" using this setting, if "year" was the closest character match.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.GBM_SELECT">
      <summary>The returned index should be selected.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags.GBM_UNIQUE">
      <summary>The returned index is the only appropriate match.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES">
      <summary>Supplies settings for all text views.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES.fAutoDelimiterHighlight">
      <summary>Determines whether automatic delimiter highlighting is allowed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES.fDragDropEditing">
      <summary>Determines whether drag/drop editing is allowed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES.fDragDropMove">
      <summary>Determines whether drag/drop moves are allowed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES.fGoToAnchorAfterEscape">
      <summary>Determines whether the user is sent to an anchor after pressing the ESC key.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES.fOvertype">
      <summary>Determines whether insert or overtype is enabled. This value is not persisted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES.fSelectionMargin">
      <summary>Determines whether the selection margin is displayed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES.fUndoCaretMovements">
      <summary>Determines whether caret movements and text selections are included in undo list.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES.fVisibleWhitespace">
      <summary>Determines whether spaces and tabs are shown.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES.fWidgetMargin">
      <summary>Determines whether the widget margin is shown.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindow">
      <summary>Allows manipulation of a code window.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass">
      <summary>Allows manipulation of a code window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass.Close">
      <summary>Closes the code window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass.GetBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <summary>Returns the buffer used by all views in the code window.</summary>
      <param name="ppBuffer">[out] Pointer to the text buffer object (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> interface).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass.GetEditorCaption(Microsoft.VisualStudio.TextManager.Interop.READONLYSTATUS,System.String@)">
      <summary>Returns the editor caption to which editors can append custom text.</summary>
      <param name="dwReadOnly">[in] Gets the read and write status of the text buffer. For a list of <paramref name="dwReadOnly" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.READONLYSTATUS" /></param>
      <param name="pbstrEditorCaption">[out] Pointer to a BSTR that contains the caption text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass.GetLastActiveView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
      <summary>Returns the last active view of the code window.</summary>
      <param name="ppView">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface that represents the last active view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass.GetPrimaryView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
      <summary>Returns the top (or primary) view of a split code window.</summary>
      <param name="ppView">[out] Pointer to <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface of the primary text view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass.GetSecondaryView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
      <summary>Returns the bottom (or secondary) view of a split code window.</summary>
      <param name="ppView">[out] Pointer to <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface of the secondary text view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass.GetViewClassID(System.Guid@)">
      <summary>Returns the text view class to change or query.</summary>
      <param name="pclsidView">[out] Pointer to the class identifier (CLSID) of the text view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass.SetBaseEditorCaption(System.String[])">
      <summary>Appends custom text to the editor caption.</summary>
      <param name="pszBaseEditorCaption">[in] Pointer to the base editor caption string.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass.SetBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>Sets the text buffer for all views in the code window.</summary>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> interface of the text buffer to set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsCodeWindowClass.SetViewClassID(System.Guid@)">
      <summary>Sets the text view class to change or query.</summary>
      <param name="clsidView">[in] Class identifier of the text view to change.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsDefaultButtonBarImages">
      <summary>Obtains default Buttonbar images.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsDefaultButtonBarImagesClass">
      <summary>Obtains default Buttonbar images.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsDefaultButtonBarImagesClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsDefaultButtonBarImagesClass.GetButtonCount(System.Int32@)">
      <summary>Returns the number of buttons on a Buttonbar.</summary>
      <param name="pcButtons">[out] Number of buttons.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsDefaultButtonBarImagesClass.GetImageList(System.IntPtr@)">
      <summary>Returns the Buttonbar image list.</summary>
      <param name="phImageList">[out] Handle of the image list.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsDiffLayer"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsDiffLayerClass"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsDiffLayerClass.#ctor"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsDropdownBar">
      <summary>Provides control of the drop-down bar at the top of a code window.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsDropdownBarClass">
      <summary>Provides control of the drop-down bar at the top of a code window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsDropdownBarClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsDropdownBarClass.Attach(System.IntPtr,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient)">
      <summary>Creates the window and drop-down combination and sets up a link between the drop-down bar and its client.</summary>
      <param name="hwndParent">[in] Handle to the parent window.</param>
      <param name="cCombos">[in] The Drop-down bar/Window combo.</param>
      <param name="pClient">[in] Pointer to the Drop-down bar client.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsDropdownBarClass.Detach">
      <summary>Brakes the link between the drop-down bar and its client.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsDropdownBarClass.GetClient(Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient@)">
      <summary>Returns the client associated with this drop-down bar.</summary>
      <param name="ppClient">[out] Pointer to the client. See <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsDropdownBarClient" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsDropdownBarClass.GetCurrentSelection(System.Int32,System.Int32@)">
      <summary>Returns the entry that is currently selected in a given combination.</summary>
      <param name="iCombo">[in] The drop-down bar/Window combination.</param>
      <param name="piCurSel">[out] Currently selected item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsDropdownBarClass.RefreshCombo(System.Int32,System.Int32)">
      <summary>Forces a repaint of a combo, specifying the current selection.</summary>
      <param name="iCombo">[in] The drop-down bar/Window combo.</param>
      <param name="iNewSelection">[in] New selected item.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsDropdownBarClass.SetCurrentSelection(System.Int32,System.Int32)">
      <summary>Sets the current selection in the given drop-down combination.</summary>
      <param name="iCombo">[in] The drop-down bar/Window combo.</param>
      <param name="iNewSelection">[in] New selected item.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID">
      <summary>Sets options for text editor property containers.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_LAST">
      <summary>Last VSEDITPROPID_ value.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ViewComposite_AllCodeWindowDefaults">
      <summary>BOOLEAN. Must be TRUE. Initial settings to code window defaults.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ViewGeneral_FontCategory">
      <summary>BSTR. Category from which to load font info.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ViewGeneral_ColorCategory">
      <summary>BSTR. Category from which to load color info.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ViewGlobalOpt_VisibleWhitespace">
      <summary>BOOLEAN. Show spaces, tabs, and so on.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ViewGlobalOpt_Overtype">
      <summary>BOOLEAN. Overtype or insert. NOT persisted.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ViewGlobalOpt_SelectionMargin">
      <summary>BOOLEAN. Display selection margin. The selection margin is located between the widget margin and text.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ViewGlobalOpt_AutoScrollCaretOnTextEntry">
      <summary>BOOLEAN. Determines whether the caret scrolls based on the last line of the buffer.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ViewLangOpt_WordWrap">
      <summary>BOOLEAN. Specifies whether word wrap is on.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ViewLangOpt_VirtualSpace">
      <summary>BOOLEAN. Specifies whether virtual space navigation or selection is active.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ViewLangOpt_RawTextDisplay">
      <summary>BOOLEAN. Text is displayed in raw mode. No bi-directional layout, shaping, or combining.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_FrameOpt_SuppressResizeWidget">
      <summary>BOOLEAN. Specifies whether frame has a resize widget in the bottom right corner of the window.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ProgLang_DebuggerLanguages">
      <summary>UNK. Query IUnknown for <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID" /> for the associated debugger languages.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ProgLang_SuppressMultipleCodeWindows">
      <summary>BOOLAN. Specifies whether the Window/NewWindow command is disabled.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ProgLang_SupportCF_HTML">
      <summary>BOOLEAN. Specifies whether the language service supports the <see cref="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_ProgLang_SupportCF_HTML" /> clipboard format.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.VSEDITPROPID.VSEDITPROPID_FIRST">
      <summary>First VSEDITPROPID_ value.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsFinder">
      <summary>Finds a text image.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass">
      <summary>Finds a text image.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass.AttachTextImage(System.Object)">
      <summary>Attaches a text image.</summary>
      <param name="pTextImage">[in] Object to attach. <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage" /> or <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass.Detach">
      <summary>Detaches a text image.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass.Find(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.UInt32@)">
      <summary>Finds a text image within a text span.</summary>
      <param name="grfFindHow">[in] Instructions for the search. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW" /> enumeration.</param>
      <param name="ptsMatch">[in] </param>
      <param name="pgrfResult">[out] Result flags.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass.GetMatch(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Gets a text span match.</summary>
      <param name="pts">[out] Current match. Does not require <see cref="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW.VSFH_SetMatch" /> on <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.Find(System.String,System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsFindHelper,System.UInt32@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass.GetMatchedSpans(Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet@)">
      <summary>Gets matched text spans.</summary>
      <param name="ppSpans">[out] Bulk find list. Requires <see cref="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW.VSFH_SetMatch" /> on Find.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass.GetState(System.Int32@,System.UInt32@,System.UInt32@)">
      <summary>Gets state.</summary>
      <param name="pcFound">[out]</param>
      <param name="pResult">[out]</param>
      <param name="pState">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass.GetTaggedSpans(Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet@)">
      <summary>Returns tagged text spans.</summary>
      <param name="ppTags">[out] Regex tagged expressions. Requires <see cref="F:Microsoft.VisualStudio.TextManager.Interop.__VSFINDHOW.VSFH_SetMatch" /> on <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsFindTarget.Find(System.String,System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsFindHelper,System.UInt32@)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass.Init(System.UInt32,System.String,System.Int32,System.UInt32@)">
      <summary>Sets the find string.</summary>
      <param name="grfOptions">[in] Flag containing find options. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDOPTIONS" /> enum.</param>
      <param name="pszFindPattern">[in] Pattern to search for.</param>
      <param name="fReinit">[in] true for a new pattern.</param>
      <param name="pResult">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass.SetPosition(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextAddress)">
      <summary>Sets search position.</summary>
      <param name="fp">[in] Search position. Values re taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.__VSFINDPOS" /> enum.</param>
      <param name="ta">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsFinderClass.SetScope(Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet)">
      <summary>Restricts search to the span set.</summary>
      <param name="pSpanScope">[in] Scope of the search. Specified as an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextSpanSet" />.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsHiddenTextLayer">
      <summary>Adds or enumerates hidden text sessions.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsHiddenTextLayerClass">
      <summary>Adds or enumerates hidden text sessions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsHiddenTextLayerClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsHiddenTextLayerClass.AddHiddenRegions(System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion[],Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions[])">
      <summary>Adds a new hidden region to the text buffer.</summary>
      <param name="dwUpdateFlags">[in] Specifies whether the hidden region is added to the Undo/Redo stack. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CHANGE_HIDDEN_REGION_FLAGS" /></param>
      <param name="cRegions">[in] Number of hidden regions to add to the text buffer.</param>
      <param name="rgHidReg">[in, size_is (<paramref name="cRegions" />)] Caller-allocated array of outlining regions to add. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion" />.</param>
      <param name="ppEnum">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions" /> object that can be used to enumerate the hidden regions in the text buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsHiddenTextLayerClass.EnumHiddenRegions(System.UInt32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions@)">
      <summary>Returns a list of the current hidden regions.</summary>
      <param name="dwFindFlags">[in] Options for finding hidden regions. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FIND_HIDDEN_REGION_FLAGS" />.</param>
      <param name="dwCookie">[in] Specifies the client-defined hidden region type to find. Specify a value that matches the client-defined identifier specified during the creation of the new hidden region (that is, the <paramref name="dwClient" /> member in the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.NewHiddenRegion" /> structure).</param>
      <param name="ptsRange">[in] Specifies the range of text over which to enumerate the hidden regions.</param>
      <param name="ppEnum">[out] Pointer to an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumHiddenRegions" /> object that is used to enumerate hidden regions of specified type over the specified range in the text buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsHiddenTextLayerClass.Terminate">
      <summary>Ends the hidden text session.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsHiddenTextLayerClass.UnadviseClient">
      <summary>Releases the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsHiddenTextClient" />.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.vsIndentStyle"></member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.vsIndentStyle.vsIndentStyleNone">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.vsIndentStyle.vsIndentStyleDefault">
      <summary> </summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.vsIndentStyle.vsIndentStyleSmart">
      <summary> </summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsLocalUserData">
      <summary>Allows a caller to use a GUID to set or get user data (properties).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsLocalUserDataClass">
      <summary>Allows a caller to use a GUID to set or get user data (properties).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsLocalUserDataClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsLocalUserDataClass.GetData(System.Guid@,System.Object@)">
      <summary>Returns user data from a buffer.</summary>
      <param name="riidKey">[in] Unique identifier of the data.</param>
      <param name="pvtData">[out] Pointer to a VARIANT containing the user data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsLocalUserDataClass.SetData(System.Guid@,System.Object)">
      <summary>Set user data to a buffer.</summary>
      <param name="riidKey">[in] Unique identifier of the data.</param>
      <param name="vtData">[in] Data to be set.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsMethodTipWindow">
      <summary>Provides a method tip window for an item in a language service.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsMethodTipWindowClass">
      <summary>Provides a method tip window for an item in a language service.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsMethodTipWindowClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsMethodTipWindowClass.Dismiss">
      <summary>The window is being dismissed by the view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsMethodTipWindowClass.GetContextStream(System.Int32@,System.Int32@)">
      <summary>Returns the context stream.</summary>
      <param name="piPos">[out] Starting position of the context stream.</param>
      <param name="piLength">[out] Length of the context stream from the starting position, <paramref name="piPos." /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsMethodTipWindowClass.GetSizePreferences(Microsoft.VisualStudio.OLE.Interop.RECT[],Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA[])">
      <summary>Returns the preferred sizes for the tip window.</summary>
      <param name="prcCtxBounds">[out]The bounding rectangle of the tip window in screen coordinates.</param>
      <param name="pSizeData">[out]Size and position of the tip window. For a list of <paramref name="pSizeData" /> values see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsMethodTipWindowClass.Paint(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Paints the tip  window.</summary>
      <param name="hdc">[in]Handle to the display context in which to draw the tip window.</param>
      <param name="prc">[in] Specifies the bounding rectangle for the tip window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsMethodTipWindowClass.SetMethodData(Microsoft.VisualStudio.TextManager.Interop.IVsMethodData)">
      <summary>Sets method data to display in the method tip window and releases previous method data.</summary>
      <param name="pMethodData">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsMethodData" /> interface, which is used to set method and parameter information for the method tip window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsMethodTipWindowClass.WndProc(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Method information not provided.</summary>
      <param name="hwnd"> </param>
      <param name="iMsg"> </param>
      <param name="wParam"> </param>
      <param name="lParam"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsSplitRoot"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsSplitRootClass"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSplitRootClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSplitRootClass.GetPane(Microsoft.VisualStudio.TextManager.Interop.PANETYPE,Microsoft.VisualStudio.TextManager.Interop.IVsSplitPane@)">
      <param name="PANETYPE">[in]</param>
      <param name="ppPane">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSplitRootClass.GetRootSplitter(Microsoft.VisualStudio.TextManager.Interop.IVsSplitter@)">
      <param name="ppPane">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSplitRootClass.GetWindowHandle(System.IntPtr@)">
      <param name="phwnd">[out]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsSyntheticTextLayer">
      <summary>Handles the addition of and communication with synthetic text sessions.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsSyntheticTextLayerClass">
      <summary>Handles the addition of and communication with synthetic text sessions.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSyntheticTextLayerClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSyntheticTextLayerClass.AddSyntheticRegions(System.UInt32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.NewSyntheticRegion[],Microsoft.VisualStudio.TextManager.Interop.IVsEnumSyntheticRegions[])">
      <summary>Adds synthetic text sessions.</summary>
      <param name="dwUpdateFlags">[in] Update flags. For values of <paramref name="dwUpdateFlags" /> see the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.CHANGE_SYNTHETIC_REGION_FLAGS" /> enum.</param>
      <param name="cRegions">[in] Number of regions to add.</param>
      <param name="rgSynthReg">[in] array of <paramref name="cRegions" /> structs defining the new regions.</param>
      <param name="ppEnum">[out] May be null; if non-null, returns an enum of the new regions.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSyntheticTextLayerClass.EnumSyntheticRegions(System.UInt32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.IVsEnumSyntheticRegions@)">
      <summary>Returns a static snapshot list of synthetic regions.</summary>
      <param name="dwFindFlags">[in] Indicates how to find the region. For values of <paramref name="dwFindFlags" /> see the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FIND_SYNTHETIC_REGION_FLAGS" /> enum.</param>
      <param name="dwCookie">[in] Additional search parameter; can be used to search for a specific client DWORD.</param>
      <param name="ptsRange">[in] Search parameter for finding text.</param>
      <param name="ppEnum">[out] The resulting enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSyntheticTextLayerClass.Terminate">
      <summary>Tells the session to sever its link (and drop its COM reference) to the client.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsSyntheticTextLayerClass.UnadviseClient"></member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextBuffer">
      <summary>Acts as the base interface for the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VsTextBuffer" /> object and provides general information about the text buffer's properties. Provides read and write access to the text buffer using two-dimensional coordinates.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass">
      <summary>Acts as the base interface for the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VsTextBuffer" /> object and provides general information about the text buffer's properties. Provides read and write access to the text buffer using two-dimensional coordinates.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.AdviseTextLinesEvents(Microsoft.VisualStudio.TextManager.Interop.IVsTextLinesEvents,System.UInt32@)">
      <summary>Method information not provided. Do not use this method.</summary>
      <param name="pSink">Do not use.</param>
      <param name="pdwCookie">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.CanReplaceLines(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Tests whether a given editing operation such as copy or cut can succeed.</summary>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iNewLen">[in] Length of the newly inserted text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.CopyLineText(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32@)">
      <summary>Puts the specified span of text into a caller-allocated buffer (an array).</summary>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pszBuf">[in] Pointer to a caller-allocated buffer.</param>
      <param name="pcchBuf">[in, out] Pointer to a count of Unicode characters — not bytes.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.CreateEditPoint(System.Int32,System.Int32,System.Object@)">
      <summary>Creates an <see cref="T:EnvDTE.EditPoint" /> object at the given location in the text buffer.</summary>
      <param name="iLine">[in] Line number of the <see cref="T:EnvDTE.EditPoint" /> object in the text buffer.</param>
      <param name="iIndex">[in] Character index of the <see cref="T:EnvDTE.EditPoint" /> object within the line.</param>
      <param name="ppEditPoint">[out] Pointer to the IDispatch interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.CreateLineMarker(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient,Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker[])">
      <summary>Creates a marker of a given type over the specified region.</summary>
      <param name="iMarkerType">[in] Type of marker to create.</param>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pClient">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerClient" /> interface. Implement this interface to advise the text buffer that you want to receive notification of marker events.</param>
      <param name="ppMarker">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker" /> interface (that is, the text marker). If this parameter is null, then the marker is owned by the text buffer. An example of a buffer-owned marker is a temporary bookmark.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.CreateTextPoint(System.Int32,System.Int32,System.Object@)">
      <summary>Creates a <see cref="T:EnvDTE.TextPoint" /> object at the given location in the text buffer.</summary>
      <param name="iLine">[in] Specified line to create the <see cref="T:EnvDTE.TextPoint" /> object.</param>
      <param name="iIndex">[in] Specified index position within the line to create the <see cref="T:EnvDTE.TextPoint" /> object.</param>
      <param name="ppTextPoint">[out] Pointer to the <see cref="T:EnvDTE.TextPoint" /> object created.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.EnumMarkers(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsEnumLineMarkers@)">
      <summary>Enumerates a specific set of text line markers, based on the criteria specified.</summary>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iMarkerType">[in] This parameter is ignored if a value of <see cref="F:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS.EM_ALLTYPES" /> is specified for the <paramref name="dwFlags" /> parameter. Otherwise, this parameter indicates the marker type to find.</param>
      <param name="dwFlags">[in] Enumeration options. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.ENUMMARKERFLAGS" />.</param>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumLineMarkers" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.FindMarkerByLineIndex(System.Int32,System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker@)">
      <summary>Locates a marker of a given type based on a line index.</summary>
      <param name="iMarkerType">[in] Specifies the type of marker to find.</param>
      <param name="iStartingLine">[in] Starting line.</param>
      <param name="iStartingIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="dwFlags">[in] Specifies the direction to search for the marker. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FINDMARKERFLAGS" />.</param>
      <param name="ppMarker">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker" /> interface (that is, the text marker).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetLanguageServiceID(System.Guid@)">
      <summary>Returns the unique identifier of the language that is providing colorization and other attribute data to this buffer.</summary>
      <param name="pguidLangService">[out] Pointer to a unique identifier of the language service. Buffers without languages can return CLSID_NULL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetLastLineIndex(System.Int32@,System.Int32@)">
      <summary>Returns the last line in the text buffer.</summary>
      <param name="piLine">[out] Pointer to the last line in the text buffer.</param>
      <param name="piIndex">[out] Pointer to the index number of <paramref name="piLine" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetLengthOfLine(System.Int32,System.Int32@)">
      <summary>Returns the length of a line in the buffer.</summary>
      <param name="iLine">[in] Number of the line whose length is requested.</param>
      <param name="piLength">[out] Pointer to the length of the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetLineCount(System.Int32@)">
      <summary>Returns the number of lines in the buffer.</summary>
      <param name="piLineCount">[out] Pointer to the number of lines in the buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetLineData(System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATA[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])">
      <summary>Provides direct, line-oriented access to the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="iLine">[in] Buffer line to access. This is a zero-based value.</param>
      <param name="pLineData">[in,out] The filled-in <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure. This is allocated by the caller and filled in by the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineData(System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATA[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])" /> method.</param>
      <param name="pMarkerData">[in, optional] <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure. Use <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetMarkerData(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])" /> to fill the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure for the line range that you specify. If you want syntax coloring and marker attributes to return in the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure (<paramref name="pLineData" />), then you need to pass in this parameter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetLineDataEx(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])">
      <summary>Provides direct, line-oriented access to the text buffer.</summary>
      <returns>If the method succeeds, it returns <see cref="F:Microsoft.VisualStudio.VSConstants.S_OK" />. If it fails, it returns an error code.</returns>
      <param name="dwFlags">[in] Flags providing additional information about the line. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS" />.</param>
      <param name="iLine">[in] The line about which information is requested. This is a zero-based value.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line. This value is ignored unless a value of <see cref="F:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS.gldeSubset" /> is specified for <paramref name="dwFlags" />.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pLineData">[in,out] Pointer to the filled-in <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure. This is allocated by the caller and filled in by the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines.GetLineDataEx(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])" /> method.</param>
      <param name="pMarkerData">[in,out] Pointer to a valid <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure. This is allocated by the caller and filled in by the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetLineDataEx(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[],Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])" /> method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetLineIndexOfPosition(System.Int32,System.Int32@,System.Int32@)">
      <summary>Returns the line and column numbers in the text buffer, given a position number.</summary>
      <param name="iPosition">[in] Position number of the desired line.</param>
      <param name="piLine">[out] Pointer to the line number.</param>
      <param name="piColumn">[out] Pointer to the column position on the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetLineText(System.Int32,System.Int32,System.Int32,System.Int32,System.String@)">
      <summary>Returns the specified span of text in a BSTR.</summary>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. This value must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. This value must be less than or equal to the length of the line.</param>
      <param name="pbstrBuf">[out] Text to insert, if any.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetMarkerData(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])">
      <summary>Returns text marker data for the specified line range within the text buffer.</summary>
      <param name="iTopLine">[in] Top line of the marker data.</param>
      <param name="iBottomLine">[in] Bottom line of the marker data.</param>
      <param name="pMarkerData">[out] Pointer to filled <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure for the range indicated.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetPairExtents(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Method information not provided. Do not use this method.</summary>
      <param name="pSpanIn">Do not use.</param>
      <param name="pSpanOut">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetPositionOfLine(System.Int32,System.Int32@)">
      <summary>Returns the position number of a line.</summary>
      <param name="iLine">[in] Number of the line whose position is requested.</param>
      <param name="piPosition">[out] Pointer to the equivalent position number.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetPositionOfLineIndex(System.Int32,System.Int32,System.Int32@)">
      <summary>Returns the position number in the text buffer, given a line and column number.</summary>
      <param name="iLine">[in] Number of the line whose position is requested.</param>
      <param name="iIndex">[in] Location of the character on <paramref name="iLine" />.</param>
      <param name="piPosition">[out] Pointer to the equivalent position number.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetSize(System.Int32@)">
      <param name="piLength">[out] Pointer to the size of the buffer, which is not necessarily the same value as the size of the buffer's internally-allocated memory or the size of the file (if any) represented by the buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetStateFlags(System.UInt32@)">
      <summary>Returns the state flags of the text buffer.</summary>
      <param name="pdwReadOnlyFlags">[out] Bit-wise union of the enumeration <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS" /> values, which can be modified, read-only, or read-only on disk.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.GetUndoManager(Microsoft.VisualStudio.OLE.Interop.IOleUndoManager@)">
      <summary>Returns the undo manager for this buffer.</summary>
      <param name="ppUndoManager">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.InitializeContent(System.String,System.Int32)">
      <summary>Initializes the content of the text buffer.</summary>
      <param name="pszText">[in] Text to insert into the buffer.</param>
      <param name="iLength">[in] Number of characters to be inserted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_GetLanguageServiceID(System.Guid@)">
      <summary>Returns the unique identifier of the language that is providing colorization and other attribute data to this buffer.</summary>
      <param name="pguidLangService">[out] Pointer to a unique identifier of the language service. Buffers without languages can return CLSID_NULL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_GetLastLineIndex(System.Int32@,System.Int32@)">
      <summary>Returns the last line in the text buffer.</summary>
      <param name="piLine">[out] Pointer to the last line in the text buffer.</param>
      <param name="piIndex">[out] Pointer to the index number of <paramref name="piLine" /></param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_GetLengthOfLine(System.Int32,System.Int32@)">
      <summary>Returns the length of a line in the buffer.</summary>
      <param name="iLine">[in] Number of the line whose length is requested.</param>
      <param name="piLength">[out] Pointer to the length of the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_GetLineCount(System.Int32@)">
      <summary>Returns the number of lines in the buffer.</summary>
      <param name="piLineCount">[out] Pointer to the number of lines in the buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_GetLineIndexOfPosition(System.Int32,System.Int32@,System.Int32@)">
      <summary>Returns the line and column numbers in the text buffer, given a position number.</summary>
      <param name="iPosition">[in] Position number of the desired line.</param>
      <param name="piLine">[out] Pointer to the line number.</param>
      <param name="piColumn">[out] Pointer to the column position on the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_GetPositionOfLine(System.Int32,System.Int32@)">
      <summary>Returns the position number of a line.</summary>
      <param name="iLine">[in] Number of the line whose position is requested.</param>
      <param name="piPosition">[out] Pointer to the equivalent position number.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_GetPositionOfLineIndex(System.Int32,System.Int32,System.Int32@)">
      <summary>Returns the position number in the text buffer, given a line and column number.</summary>
      <param name="iLine">[in] Number of the line whose position is requested.</param>
      <param name="iIndex">[in] Location of the character on <paramref name="iLine" />.</param>
      <param name="piPosition">[out] Pointer to the equivalent position number.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_GetSize(System.Int32@)">
      <summary>Returns the size in characters of the buffer.</summary>
      <param name="piLength">[out] Pointer to the size of the buffer, which is not necessarily the same value as the size of the buffer's internally-allocated memory or the size of the file (if any) represented by the buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_GetStateFlags(System.UInt32@)">
      <summary>Returns the state flags of the text buffer.</summary>
      <param name="pdwReadOnlyFlags">[out] Bit-wise union of the enumeration <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS" /> values, which can be modified, read-only, or read-only on disk.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_GetUndoManager(Microsoft.VisualStudio.OLE.Interop.IOleUndoManager@)">
      <summary>Returns the undo manager for this buffer.</summary>
      <param name="ppUndoManager">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.OLE.Interop.IOleUndoManager" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_InitializeContent(System.String,System.Int32)">
      <summary>Initializes the content of the text buffer.</summary>
      <param name="pszText">[in] Text to insert into the buffer.</param>
      <param name="iLength">[in] Number of characters to be inserted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_LockBuffer">
      <summary>Locks the text buffer for the purpose of access control.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_LockBufferEx(System.UInt32)">
      <summary>Extension of the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.LockBuffer" /> method.</summary>
      <param name="dwFlags">[in]Combine with a bitwise or of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" />, presently either <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ" /> or <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ_AND_WRITE" />.)</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_Reload(System.Int32)">
      <summary>Reloads the text buffer.</summary>
      <param name="fUndoable">[in] Specifies whether the unload action is undoable. Currently, non-undo support is not implemented, so the reload is always undoable.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_Reserved1">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_Reserved10">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_Reserved2">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_Reserved3">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_Reserved4">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_Reserved5">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_Reserved6">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_Reserved7">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_Reserved8">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_Reserved9">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_SetLanguageServiceID(System.Guid@)">
      <summary>Sets the unique identifier of the language that is providing colorization and other attribute data to the buffer.</summary>
      <param name="guidLangService">[in] Identifier of the language service. Buffers without languages can be CLSID_NULL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_SetStateFlags(System.UInt32)">
      <summary>Sets the state flags of the text buffer.</summary>
      <param name="dwReadOnlyFlags">[in] Bitwise union of the enumeration <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS" /> values, which can be modified, read-only, or read-only on disk.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_UnlockBuffer">
      <summary>Unlocks a buffer locked with the method <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.LockBuffer" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLines_UnlockBufferEx(System.UInt32)">
      <summary>Extension of the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.UnlockBuffer" /> method.</summary>
      <param name="dwFlags">[in] Bitwise union of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" /> values, presently either <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ" /> or <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ_AND_WRITE" />.)</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.IVsTextLinesReserved1(System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATA[],System.Int32)">
      <summary>Method information not provided. Do not use this method.</summary>
      <param name="iLine">Do not use.</param>
      <param name="pLineData">Do not use.</param>
      <param name="fAttributes">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.LockBuffer">
      <summary>Locks the text buffer for the purpose of access control.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.LockBufferEx(System.UInt32)">
      <summary>Extension of the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.LockBuffer" /> method.</summary>
      <param name="dwFlags">[in]Combine with a bitwise or of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" />, presently either BLF_READ or BLF_WRITE.)</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.ReleaseLineData(Microsoft.VisualStudio.TextManager.Interop.LINEDATA[])">
      <summary>Releases the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure.</summary>
      <param name="pLineData">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure to be released.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.ReleaseLineDataEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])">
      <summary>Releases the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure.</summary>
      <param name="pLineData">[in] Pointer or reference to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure to be released.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.ReleaseMarkerData(Microsoft.VisualStudio.TextManager.Interop.MARKERDATA[])">
      <summary>Cleans up the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure.</summary>
      <param name="pMarkerData">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.MARKERDATA" /> structure to be released.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.Reload(System.Int32)">
      <summary>Reloads the text buffer.</summary>
      <param name="fUndoable">[in] Specifies whether the unload action is undoable. Currently, non-undo support is not implemented, so the reload is always undoable.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.ReloadLines(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Replaces text without deleting markers.</summary>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be les than or equal to the length of the line.</param>
      <param name="pszText">[in] Pointer or reference to text to insert.</param>
      <param name="iNewLen">[in] Length of the newly inserted text.</param>
      <param name="pChangedSpan">[out] The range of new text inserted. Describes a starting point and an ending point, in terms of a line and index.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.ReplaceLines(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Handles stream-like line editing, such as line breaking and line joining.</summary>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pszText">[in] Pointer to text to insert.</param>
      <param name="iNewLen">[in] Length of the newly inserted text.</param>
      <param name="pChangedSpan">[out] Pointer to the range of characters changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.ReplaceLinesEx(System.UInt32,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Handles stream-like line editing, such as line breaking and line joining.</summary>
      <param name="dwFlags">[in] ORing of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.REPLACE_TEXT_FLAGS" /> enum.</param>
      <param name="iStartLine">[in] Starting line</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pszText">[in] Pointer to text to insert, if any.</param>
      <param name="iNewLen">[in] Number of characters to insert, if any.</param>
      <param name="pChangedSpan">[out] Pointer to the range of characters changed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.Reserved1">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.Reserved10">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.Reserved2">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.Reserved3">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.Reserved4">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.Reserved5">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.Reserved6">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.Reserved7">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.Reserved8">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.Reserved9">
      <summary>Reserved in the Vtable for future use.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.SetLanguageServiceID(System.Guid@)">
      <summary>Sets the unique identifier of the language that is providing colorization and other attribute data to the buffer.</summary>
      <param name="guidLangService">[in] Identifier of the language service. Buffers without languages can be CLSID_NULL.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.SetStateFlags(System.UInt32)">
      <summary>Sets the state flags of the text buffer.</summary>
      <param name="dwReadOnlyFlags">[in] Bitwise union of the enumeration <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BUFFERSTATEFLAGS" /> values, which can be modified, read-only, or read-only on disk.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.UnadviseTextLinesEvents(System.UInt32)">
      <summary>Method information not provided. Do not use this method.</summary>
      <param name="dwCookie">Do not use.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.UnlockBuffer">
      <summary>Unlocks a buffer locked with the method <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.LockBuffer" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextBufferClass.UnlockBufferEx(System.UInt32)">
      <summary>Extension of the <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer.UnlockBuffer" /> method.</summary>
      <param name="dwFlags">[in] Bitwise union of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" /> values, presently either <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ" /> or <see cref="F:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags.BLF_READ_AND_WRITE" />.)</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextImage">
      <summary>Represents the image that is persisted and unpersisted. Represents the range of text that is viewable and editable by text editor views.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass">
      <summary>Supports text string matching.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.AdviseTextImageEvents(Microsoft.VisualStudio.TextManager.Interop.IVsTextImageEvents,System.UInt32@)">
      <summary>Registers the environment to receive notification of text image changes.</summary>
      <param name="pSink">[in] The <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextImageEvents" /> interface on the object requesting notification of text image events.</param>
      <param name="pCookie">[out] Pointer to an abstract handle for the referenced event sink. This value is required to unadvised the event sink using <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextImage.UnadviseTextImageEvents(System.UInt32)" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.GetCharSize(System.Int32@)">
      <summary>Returns the number of characters in the text image.</summary>
      <param name="pcch">[out] Pointer to a character count of the text image.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.GetLine(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])">
      <summary>Provides direct, line-oriented access to the text buffer.</summary>
      <param name="grfGet">[in] Flags providing additional information about the line. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.GLDE_FLAGS" />.</param>
      <param name="iLine">[in] Integer containing the line number. This is a zero-based value.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="iEndIndex">[in] Ending character index within the line. Must be less than or equal to the length of the line.</param>
      <param name="pLineData">[out] Pointer to the filled-in <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATA" /> structure. This is allocated by the environment and filled in by the GetLine method.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.GetLineLength(System.Int32,System.Int32@)">
      <summary>Returns the length of a line.</summary>
      <param name="iLine">[in] Integer containing the line number.</param>
      <param name="piLength">[out] Pointer to an integer containing the character count of the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.GetLineSize(System.Int32@)">
      <summary>Returns the number of lines in the text image.</summary>
      <param name="pcLines">[out] Pointer to a count of lines in the text image.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.GetOffsetOfTextAddress(Microsoft.VisualStudio.TextManager.Interop.TextAddress,System.Int32@)">
      <summary>Return the buffer address of a given text address.</summary>
      <param name="ta">[in] Specifies the requested text address.</param>
      <param name="piOffset">[out] Pointer to an integer containing the offset from the start of the text image buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.GetSpanLength(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32@)">
      <summary>Returns the number of characters in a text span.</summary>
      <param name="pts">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
      <param name="pcch">[out] Pointer to a character count of the text span.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.GetText(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32,System.UInt16[])">
      <summary>Returns the text of a text span.</summary>
      <param name="pts">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
      <param name="cch">[in] Number of characters to return.</param>
      <param name="psz">[out] Pointer to a null terminated string containing the text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.GetTextAddressOfOffset(System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextAddress[])">
      <summary>Returns the text address of a given buffer address.</summary>
      <param name="iOffset">[in] Integer containing the offset from the start of the text image buffer.</param>
      <param name="pta">[out] Pointer to the text address.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.GetTextBSTR(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.String@)">
      <summary>Returns the text of a text span as a BSTR</summary>
      <param name="pts">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
      <param name="pbstrText">[out] Pointer to a BSTR containing the text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.LockImage(System.UInt32)">
      <summary>Notifies that the text image is in use.</summary>
      <param name="grfLock">[in] Specifies a locking flag. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.ReleaseLine(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])">
      <summary>Releases the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure.</summary>
      <param name="pLineData">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX" /> structure to be released.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.Replace(System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32,System.String,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Notification of a text span replacement.</summary>
      <param name="dwFlags">[in] Double word containing flags. For future use. Set to zero.</param>
      <param name="pts">[in] Pointer to a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
      <param name="cch">[in] Count of characters in <paramref name="pchText" />.</param>
      <param name="pchText">[in] Pointer to a text string.</param>
      <param name="ptsChanged">[out] Specifies the modified <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextSpan" /> structure.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.UnadviseTextImageEvents(System.UInt32)">
      <summary>Cancels the environment's registration to receive notifications of text image changes.</summary>
      <param name="Cookie">[in] Abstract handle for the referenced event sink.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextImageClass.UnlockImage(System.UInt32)">
      <summary>Notifies that the text image is not in use.</summary>
      <param name="grfLock">[in] Specifies a locking flag. Values are taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.BufferLockFlags" /> enumeration.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorage">
      <summary>Represents the image that is persisted and unpersisted. Represents the range of text that is viewable and editable by text editor views.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass">
      <summary>Represents the image that is persisted and unpersisted. Represents the range of text that is viewable and editable by text editor views.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Image_Alloc(System.Int32)">
      <param name="iSize">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Image_CloseFullTextScan"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Image_Free(System.IntPtr)">
      <param name="p">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Image_FullTextRead(System.String@,System.Int32@)">
      <param name="ppszText">[out]</param>
      <param name="piLength">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Image_GetLength"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Image_LoadText(System.String,System.Int32,System.UInt32)">
      <param name="pszText">[in]</param>
      <param name="iLength">[in]</param>
      <param name="dwFlags">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Image_OpenFullTextScan"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Image_Realloc(System.IntPtr@,System.Int32)">
      <param name="p">[in, out]</param>
      <param name="iSize">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_Attach(System.Object)">
      <param name="pBuffer">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_CopyText(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32@)">
      <param name="iStartLine">[in] Line containing the start of text to be copied.</param>
      <param name="iStartIndex">[in] Starting character index within the line. Must be &lt;= length of line.</param>
      <param name="iBufMax">[in] Size of <paramref name="pzeDest" /> buffer.</param>
      <param name="pszDest">[in] Destination buffer.</param>
      <param name="pcCharsCopied">[out] Number of characters copied.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_Detach"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_Find(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <param name="pszText">[in] Text to locate.</param>
      <param name="iStartLine">[in] Starting line.</param>
      <param name="iStartIndex">[in] Starting character index within the line (must be &lt;= length of line).</param>
      <param name="iEndLine">[in] Ending line.</param>
      <param name="iEndIndex">[in] Ending character index within the line (must be &lt;= length of line).</param>
      <param name="iFlags">[in]</param>
      <param name="piLine">[out] Line containing the start of the located text.</param>
      <param name="piCol">[out] Column of the start of the located text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_GetCharsInSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[],System.Int32@)">
      <param name="pSpanToMeasure">[in]</param>
      <param name="piChars">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_GetLanguageServiceID(System.Guid@)">
      <param name="pguidLangService">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_GetLength"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_GetLengthOfLine(System.Int32,System.Int32@)">
      <param name="iLine">[in] Index of line of interest.</param>
      <param name="piLength">[out] Length of line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_GetLineCount"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_GetLineDataEx(System.UInt32,System.Int32,System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])">
      <param name="dwFlags">[in]</param>
      <param name="iLine">[in]</param>
      <param name="iStartIndex">[in]</param>
      <param name="iEndIndex">[in]</param>
      <param name="pLineData">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_GetLineIndexOfPosition(System.Int32,System.Int32@,System.Int32@)">
      <param name="iPosition">[in]</param>
      <param name="piLine">[out]</param>
      <param name="piIndex">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_GetPositionOfLineIndex(System.Int32,System.Int32,System.Int32@)">
      <param name="iLine">[in]</param>
      <param name="iIndex">[in]</param>
      <param name="piPosition">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_RefreshColorization(System.Int32,System.Int32,System.Int32@)">
      <param name="iTopLine">[in]</param>
      <param name="iBotLine">[in]</param>
      <param name="piLastAffectedLine">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_ReleaseLineDataEx(Microsoft.VisualStudio.TextManager.Interop.LINEDATAEX[])">
      <param name="pLineData">[in]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_Replace(Microsoft.VisualStudio.TextManager.Interop.ChangeInput[],Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <param name="pCI">[in]</param>
      <param name="ptsOut">[out]</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextLineStorageClass.Storage_SetLanguageServiceID(System.Guid@)">
      <param name="guidLangService">[in]</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextManager">
      <summary>Provides general services for anyone wanting information about the active text views.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass">
      <summary>Provides general services for anyone wanting information about the active text views.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.AdjustFileChangeIgnoreCount(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32)">
      <summary>Increases or decreases the ignore count for file changes.</summary>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface for which to set the ignore count.</param>
      <param name="fIgnore">[in] If true, then the ignore count is increased by a value of one. If false, then the ignore count is decreased by a value of one for the referenced buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.AttemptToCheckOutBufferFromScc(Microsoft.VisualStudio.TextManager.Interop.IVsUserData,System.Int32@)">
      <summary>Method information not provided.</summary>
      <param name="pBufData"> </param>
      <param name="pfCheckoutSucceeded"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.AttemptToCheckOutBufferFromScc2(System.String,System.Int32@,System.Int32@)">
      <summary>Attempts to check out a file from source code control.</summary>
      <param name="pszFileName">[in] Filename to check out.</param>
      <param name="pfCheckoutSucceeded">[out] Returns true if buffer checkout succeeded.</param>
      <param name="piStatusFlags">[out]Additional status flags. This is the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" /> value returned from a call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QueryEditFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@,System.UInt32@)" />. If you pass in a value of null for this parameter, then a <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" /> flag is not returned.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.CreateSelectionAction(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsTextSelectionAction@)">
      <summary>Method information not provided.</summary>
      <param name="pBuffer"> </param>
      <param name="ppAction"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.EnumBuffers(Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextBuffers@)">
      <summary>Enumerate text buffers. Not yet implemented.</summary>
      <param name="ppEnum">[out] Pointer to the IVsEnumBuffers interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.EnumIndependentViews(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsEnumIndependentViews@)">
      <summary>Enumerates independent views.</summary>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface associated with the view.</param>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumIndependentViews" /> interface to enumerate the number of independent views.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.EnumLanguageServices(Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID@)">
      <summary>Enumerates the registered language services ids.</summary>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.EnumViews(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextViews@)">
      <summary>Enumerates views that are provided with the core editor and are associated with a particular text buffer.</summary>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface for which views should be returned. Pass in a value of null to return all views for all buffers.</param>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextViews" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.GetActiveView(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
      <summary>Returns the active or previously active view.</summary>
      <param name="fMustHaveFocus">[in] If true, then the current UI active view is returned. If false, then the last active view is returned, regardless of whether this view is currently UI active.</param>
      <param name="pBuffer">[in] Pass null for <paramref name="pBuffer" /> to get the previously active code view, regardless of the text buffer that it was associated with. If you pass in a valid pointer to a buffer, then you are returned the last active view for that particular buffer.</param>
      <param name="ppView">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.GetBufferSccStatus(Microsoft.VisualStudio.TextManager.Interop.IVsUserData,System.Int32@)">
      <summary>Method information not provided.</summary>
      <param name="pBufData"> </param>
      <param name="pbNonEditable"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.GetBufferSccStatus2(System.String,System.Int32@,System.Int32@)">
      <summary>Returns information on whether a buffer is under source code control and, if so, whether the file is checked in.</summary>
      <param name="pszFileName">[in] Filename of interest.</param>
      <param name="pbNonEditable">[out] If true, then the file can not be modified (for example, if the file is under source control and checked in). If false, then the file can be edited.)</param>
      <param name="piStatusFlags">[out] Returns additional status flags. This is the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" /> value returned from <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QueryEditFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@,System.UInt32@)" />. Pass in a value of null for this parameter if you do not want the return value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.GetMarkerTypeCount(System.Int32@)">
      <summary>Returns the number of registered marker types within all buffers associated with the core text editor.</summary>
      <param name="piMarkerTypeCount">[out] Pointer to a count of the marker types.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.GetMarkerTypeInterface(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType@)">
      <summary>Maps a numeric marker type ID to an interface that can be used to probe for specific information.</summary>
      <param name="iMarkerTypeID">[in] The marker type ID, such as from <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.GetType(System.Int32@)" />.</param>
      <param name="ppMarkerType">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType" /> interface, which has been referenced with AddReferernce.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.GetPerLanguagePreferences(Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[])">
      <summary>Method information not provided.</summary>
      <param name="pLangPrefs"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.GetRegisteredMarkerTypeID(System.Guid@,System.Int32@)">
      <summary>Returns a registered marker type.</summary>
      <param name="pguidMarker">[in] GUID identifying the caller's implementation of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType" />, which provides information about the new category of markers.</param>
      <param name="piMarkerTypeID">[out] Number of the marker type in the marker type collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.GetShortcutManager(Microsoft.VisualStudio.TextManager.Interop.IVsShortcutManager@)">
      <summary>Returns the shortcut manager.</summary>
      <param name="ppShortcutMgr">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsShortcutManager" /> interface, which is used to manage shortcuts in the task list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.GetUserPreferences(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES[])">
      <summary>Returns the user preferences, such as tab usage, indent size and widget margin presence for the view, frame, and language service.</summary>
      <param name="pViewPrefs">[out] Pointer to the view preferences. For more information about <paramref name="pViewPrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" />.</param>
      <param name="pFramePrefs">[out] Pointer to the frame preferences. For more information about <paramref name="pFramePrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES" />.</param>
      <param name="pLangPrefs">[in, out] Pointer to the language preferences. For more information about <paramref name="pLangPrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES" />.</param>
      <param name="pColorPrefs">[in, out] Pointer to the font color preferences. For more information about <paramref name="pCOlorPrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.IgnoreNextFileChange(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Notifies that the next file change is to be ignored.</summary>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.MapFilenameToLanguageSID(System.String,System.Guid@)">
      <summary>Given a file name, determines the registered language service, if one exists, that understands it.</summary>
      <param name="pszFileName">[in] File name associated with the language service.</param>
      <param name="pguidLangSID">[out] Pointer to the language service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.NavigateToLineAndColumn(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Guid@,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Finds or creates an appropriate view on the specified buffer and places the selection at the specified location.</summary>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface.</param>
      <param name="guidDocViewType">[in] GUID identifying the view. This value should always be <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" />.</param>
      <param name="iStartRow">[in] Starting line for the selection to locate.</param>
      <param name="iStartIndex">[in] Starting index for the selection to locate.</param>
      <param name="iEndRow">[in] Ending line for the selection to locate.</param>
      <param name="iEndIndex">[in] Ending index for the selection to locate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.NavigateToPosition(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Guid@,System.Int32,System.Int32)">
      <summary>Finds or creates an appropriate view on the specified buffer and puts the selection on the specified linear position.</summary>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface.</param>
      <param name="guidDocViewType">[in] GUID identifying the view. This value should always be <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" />.</param>
      <param name="iPos">[in] Linear position in buffer on which to put the caret.</param>
      <param name="iLen">[in] Length of selection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.RegisterBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Registers a text buffer with the text manager.</summary>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface to register.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.RegisterIndependentView(System.Object,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Registers a view from a source other than the core editor.</summary>
      <param name="pUnk">[in] Pointer to the IUnknown interface. Use this parameter to AddRef and Release the view so that the buffer is not freed in advance of the view.</param>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface associated with the view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.RegisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Method information not provided.</summary>
      <param name="pView"> </param>
      <param name="pBuffer"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.SetFileChangeAdvise(System.String,System.Int32)">
      <summary>Method information not provided.</summary>
      <param name="pszFileName"> </param>
      <param name="fStart"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.SetPerLanguagePreferences(Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[])">
      <summary>Method information not provided.</summary>
      <param name="pLangPrefs"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.SetUserPreferences(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES[])">
      <summary>Sets user preferences.</summary>
      <param name="pViewPrefs">[in] Values that describe the desired default view flags for all editor views. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" />. Can be null if view preferences are not being set.</param>
      <param name="pFramePrefs">[in] Values that describe the desired default flags for all editor frames. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES" />. Can be null if frame preferences are not being set.</param>
      <param name="pLangPrefs">[in] Values that describe the desired flags for the language specified in the structure. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES" />. Can be null if language preferences are not being set.</param>
      <param name="pColorPrefs">[in] Values that describe the color and font preferences for all editor views. This parameter is for internal editor use only. Should be null when this method is called by external packages. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.SuspendFileChangeAdvise(System.String,System.Int32)">
      <summary>Suspends file change notifications for a given file.</summary>
      <param name="pszFileName">[in] File on which to suspend notification of changes made.</param>
      <param name="fSuspend">[in] true if change notification is suspended on the specified file name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.UnregisterBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Unregisters a buffer.</summary>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface that is being unregistered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.UnregisterIndependentView(System.Object,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Unregisters an externally-created view.</summary>
      <param name="pUnk">[in] Pointer to the IUnknown interface. Use this parameter to AddRef and Release the view so that the buffer is not freed in advance of the view.</param>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface associated with the view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextManagerClass.UnregisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Method information not provided.</summary>
      <param name="pView"> </param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextPackage">
      <summary>Provides general services for anyone wanting information about the active text views.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass">
      <summary>Provides general services for anyone wanting information about the active text views.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.AdjustFileChangeIgnoreCount(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Int32)">
      <summary>Increases or decreases the ignore count for file changes.</summary>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface for which to set the ignore count.</param>
      <param name="fIgnore">[in] If true, then the ignore count is increased by a value of one. If false, then the ignore count is decreased by a value of one for the referenced buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.AttemptToCheckOutBufferFromScc(Microsoft.VisualStudio.TextManager.Interop.IVsUserData,System.Int32@)">
      <summary>Method information not provided.</summary>
      <param name="pBufData"> </param>
      <param name="pfCheckoutSucceeded"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.AttemptToCheckOutBufferFromScc2(System.String,System.Int32@,System.Int32@)">
      <summary>Attempts to check out a file from source code control.</summary>
      <param name="pszFileName">[in] Filename to check out.</param>
      <param name="pfCheckoutSucceeded">[out] Returns true if buffer checkout succeeded.</param>
      <param name="piStatusFlags">[out]Additional status flags. This is the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" /> value returned from a call to <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QueryEditFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@,System.UInt32@)" />. If you pass in a value of null for this parameter, then a <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" /> flag is not returned.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.CreateSelectionAction(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsTextSelectionAction@)">
      <summary>Method information not provided.</summary>
      <param name="pBuffer"> </param>
      <param name="ppAction"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.EnumBuffers(Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextBuffers@)">
      <summary>Enumerates text buffers. Not yet implemented.</summary>
      <param name="ppEnum">[out] Pointer to the IVsEnumBuffers interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.EnumIndependentViews(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsEnumIndependentViews@)">
      <summary>Enumerates independent view.</summary>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface associated with the view.</param>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumIndependentViews" /> interface to enumerate the number of independent views.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.EnumLanguageServices(Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID@)">
      <summary>Enumerates the registered language service ids.</summary>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumGUID" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.EnumViews(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextViews@)">
      <summary>Enumerates views that are provided with the core editor and are associated with a particular text buffer.</summary>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface for which views should be returned. Pass in a value of null to return all views for all buffers.</param>
      <param name="ppEnum">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextViews" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.GetActiveView(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.TextManager.Interop.IVsTextView@)">
      <summary>Returns the active or previously active view.</summary>
      <param name="fMustHaveFocus">[in] If true, then the current UI active view is returned. If false, then the last active view is returned, regardless of whether this view is currently UI active.</param>
      <param name="pBuffer">[in] Pass null for <paramref name="pBuffer" /> to get the previously active code view, regardless of the text buffer that it was associated with. If you pass in a valid pointer to a buffer, then you are returned the last active view for that particular buffer.</param>
      <param name="ppView">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.GetBufferSccStatus(Microsoft.VisualStudio.TextManager.Interop.IVsUserData,System.Int32@)">
      <summary>Method information not provided.</summary>
      <param name="pBufData"> </param>
      <param name="pbNonEditable"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.GetBufferSccStatus2(System.String,System.Int32@,System.Int32@)">
      <summary>Returns information on whether a buffer is under source code control and, if so, whether the file is checked in.</summary>
      <param name="pszFileName">[in] File name of interest.</param>
      <param name="pbNonEditable">[out] If true, then the file can not be modified (for example, if the file is under source control and checked in). If false, then the file can be edited.)</param>
      <param name="piStatusFlags">[out] Returns additional status flags. This is the <see cref="T:Microsoft.VisualStudio.Shell.Interop.tagVSQueryEditResult" /> value returned from <see cref="M:Microsoft.VisualStudio.Shell.Interop.IVsQueryEditQuerySave2.QueryEditFiles(System.UInt32,System.Int32,System.String[],System.UInt32[],Microsoft.VisualStudio.Shell.Interop.VSQEQS_FILE_ATTRIBUTE_DATA[],System.UInt32@,System.UInt32@)" />. Pass in a value of null for this parameter if you do not want the return value.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.GetMarkerTypeCount(System.Int32@)">
      <summary>Returns the number of registered marker types within all buffers associated with the core text editor.</summary>
      <param name="piMarkerTypeCount">Returns the number of registered marker types within all buffers associated with the core text editor.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.GetMarkerTypeInterface(System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType@)">
      <summary>Maps a numeric marker type ID to an interface that can be used to probe for specific information.</summary>
      <param name="iMarkerTypeID">[in] The marker type ID, such as from <see cref="M:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarker.GetType(System.Int32@)" />.</param>
      <param name="ppMarkerType">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType" /> interface, which has been referenced with AddReferernce.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.GetPerLanguagePreferences(Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[])">
      <summary>Method information not provided.</summary>
      <param name="pLangPrefs"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.GetRegisteredMarkerTypeID(System.Guid@,System.Int32@)">
      <summary>Returns a registered marker type.</summary>
      <param name="pguidMarker">[in] GUID identifying the caller's implementation of <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType" />, which provides information about the new category of markers.</param>
      <param name="piMarkerTypeID">[out] Number of the marker type in the marker type collection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.GetShortcutManager(Microsoft.VisualStudio.TextManager.Interop.IVsShortcutManager@)">
      <summary>Returns the shortcut manager.</summary>
      <param name="ppShortcutMgr">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsShortcutManager" /> interface, which is used to manage shortcuts in the task list.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.GetUserPreferences(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES[])">
      <summary>Returns the user preferences, such as tab usage, indent size and widget margin presence for the view, frame, and language service.</summary>
      <param name="pViewPrefs">[out] Pointer to the view preferences. For more information about <paramref name="pViewPrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" />.</param>
      <param name="pFramePrefs">[out] Pointer to the frame preferences. For more information about <paramref name="pFramePrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES" />.</param>
      <param name="pLangPrefs">[in, out] Pointer to the language preferences. For more information about <paramref name="pLangPrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES" />.</param>
      <param name="pColorPrefs">[in, out] Pointer to the font color preferences. For more information about <paramref name="pCOlorPrefs" />, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.IgnoreNextFileChange(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface.</summary>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.MapFilenameToLanguageSID(System.String,System.Guid@)">
      <summary>Given a file name, determines the registered language service, if one exists, that understands it.</summary>
      <param name="pszFileName">[in] File name associated with the language service.</param>
      <param name="pguidLangSID">[out] Pointer to the language service.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.NavigateToLineAndColumn(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Guid@,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Finds or creates an appropriate view on the specified buffer and places the selection at the specified location.</summary>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface.</param>
      <param name="guidDocViewType">[in] GUID identifying the view. This value should always be <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" />.</param>
      <param name="iStartRow">[in] Starting line for the selection to locate.</param>
      <param name="iStartIndex">[in] Starting index for the selection to locate.</param>
      <param name="iEndRow">[in] Ending line for the selection to locate.</param>
      <param name="iEndIndex">[in] Ending index for the selection to locate.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.NavigateToPosition(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,System.Guid@,System.Int32,System.Int32)">
      <summary>Finds or creates an appropriate view on the specified buffer and puts the selection on the specified linear position.</summary>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface.</param>
      <param name="guidDocViewType">[in] GUID identifying the view. This value should always be <see cref="F:Microsoft.VisualStudio.VSConstants.LOGVIEWID_TextView" />.</param>
      <param name="iPos">[in] Linear position in buffer on which to put the caret.</param>
      <param name="iLen">[in] Length of selection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.RegisterBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Registers a text buffer with the text manager.</summary>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface to register.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.RegisterIndependentView(System.Object,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Registers a view from a source other than the core editor.</summary>
      <param name="pUnk">[in] Pointer to the IUnknown interface. Use this parameter to AddRef and Release the view so that the buffer is not freed in advance of the view.</param>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface associated with the view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.RegisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Method information not provided.</summary>
      <param name="pView"> </param>
      <param name="pBuffer"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.SetFileChangeAdvise(System.String,System.Int32)">
      <summary>Method information not provided.</summary>
      <param name="pszFileName"> </param>
      <param name="fStart"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.SetPerLanguagePreferences(Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[])">
      <summary>Method information not provided.</summary>
      <param name="pLangPrefs"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.SetUserPreferences(Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES[],Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES[])">
      <summary>Sets user preferences.</summary>
      <param name="pViewPrefs">[in] Values that describe the desired default view flags for all editor views. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.VIEWPREFERENCES" />. Can be null if view preferences are not being set.</param>
      <param name="pFramePrefs">[in] Values that describe the desired default flags for all editor frames. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FRAMEPREFERENCES" />. Can be null if frame preferences are not being set.</param>
      <param name="pLangPrefs">[in] Values that describe the desired flags for the language specified in the structure. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LANGPREFERENCES" />. Can be null if language preferences are not being set.</param>
      <param name="pColorPrefs">[in] Values that describe the color and font preferences for all editor views. This parameter is for internal editor use only. Should be null when this method is called by external packages. For more information, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.SuspendFileChangeAdvise(System.String,System.Int32)">
      <summary>Suspends file change notifications for a given file.</summary>
      <param name="pszFileName">[in] File on which to suspend notification of changes made.</param>
      <param name="fSuspend">[in] true if change notification is suspended on the specified file name.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.UnregisterBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Unregisters a buffer.</summary>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface that is being unregistered.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.UnregisterIndependentView(System.Object,Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
      <summary>Unregisters an externally-created view.</summary>
      <param name="pUnk">[in] Pointer to the IUnknown interface. Use this parameter to AddRef and Release the view so that the buffer is not freed in advance of the view.</param>
      <param name="pBuffer">[in] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer" /> interface associated with the view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextPackageClass.UnregisterView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
      <summary>Method information not provided.</summary>
      <param name="pView"> </param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSet">
      <summary>Utility for text string matching.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass">
      <summary>Utility for text string matching.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass.Add(System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Method information not provided.</summary>
      <param name="cEl"> </param>
      <param name="pSpan"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass.AddFromEnum(Microsoft.VisualStudio.TextManager.Interop.IVsEnumTextSpans)">
      <summary>Method information not provided.</summary>
      <param name="pEnum"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass.AttachTextImage(System.Object)">
      <summary>Passes a text image to the environment.</summary>
      <param name="pText">[in] Pointer to a text image.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass.Detach">
      <summary>Releases a text image.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass.GetAt(System.Int32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns a requested text span.</summary>
      <param name="iEl">[in] Integer containing the text span element number.</param>
      <param name="pSpan">[out] Pointer to a text span object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass.GetCount(System.Int32@)">
      <summary>Returns the number of text spans.</summary>
      <param name="pcel">[out] Specifies the number of text spans in the text image.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass.RemoveAll">
      <summary>Method information not provided.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass.ResumeTracking">
      <summary>Method information not provided.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass.Sort(System.UInt32)">
      <summary>Method information not provided.</summary>
      <param name="SortOptions"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextSpanSetClass.SuspendTracking">
      <summary>Method information not provided.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextTipWindow">
      <summary>Provides a tip when the mouse pauses over a particular context stream in the core editor.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextTipWindowClass">
      <summary>Provides a tip when the mouse pauses over a particular context stream in the core editor.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextTipWindowClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextTipWindowClass.Dismiss">
      <summary>Dismisses the tip window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextTipWindowClass.GetContextStream(System.Int32@,System.Int32@)">
      <summary>Returns the context stream.</summary>
      <param name="piPos">[out] Starting position of the context stream.</param>
      <param name="piLength">[out] Length of the context stream from the starting position (<paramref name="piPos" />).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextTipWindowClass.GetSizePreferences(Microsoft.VisualStudio.OLE.Interop.RECT[],Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA[])">
      <summary>Gets the size preferences for the tip window.</summary>
      <param name="prcCtxBounds">[out] The bounding rectangle of the tip window, in screen coordinates.</param>
      <param name="pSizeData">[out] Size and position of the tip window. For a list of <paramref name="pSizeData" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TIPSIZEDATA" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextTipWindowClass.Paint(System.IntPtr,Microsoft.VisualStudio.OLE.Interop.RECT[])">
      <summary>Paints the tip window.</summary>
      <param name="hdc">[in] Handle to the display context in which to draw the tip window.</param>
      <param name="prc">[in] Specifies the bounding rectangle for the tip window.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextTipWindowClass.SetTextTipData(Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData)">
      <summary>Sets the text tip.</summary>
      <param name="pMethodData">[in] Pointer to an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextTipData" /> object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextTipWindowClass.WndProc(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
      <summary>Method information not provided.</summary>
      <param name="hwnd"> </param>
      <param name="iMsg"> </param>
      <param name="wParam"> </param>
      <param name="lParam"></param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextView">
      <summary>Manages the text view of an editor window. Contains methods to manage the text view. The view is essentially the editor window shown in the UI.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass">
      <summary>Manages the text view of an editor window. Contains methods to manage the text view. The view is essentially the editor window shown in the UI.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.AddCommandFilter(Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget,Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget@)">
      <summary>Adds a command filter to the existing chain of command filters.</summary>
      <param name="pNewCmdTarg">[in] Pointer to the new command filter (IOleCommandTarget) to add to the command filter chain.</param>
      <param name="ppNextCmdTarg">[out] Pointer to a command filter used to handle commands not dealt with by the <paramref name="pNewCmdTarg" /> command filter.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.CenterColumns(System.Int32,System.Int32,System.Int32)">
      <summary>Places the specified column of text in the center of the view.</summary>
      <param name="iLine">[in] Integer containing the first line to center.</param>
      <param name="iLeftCol">[in] Integer containing the index of the starting column to center. Viewcol coordinates may include virtual space.</param>
      <param name="iColCount">[in] Integer containing the total number of columns to center within the line.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.CenterLines(System.Int32,System.Int32)">
      <summary>Places the specified lines of text in the center of the view.</summary>
      <param name="iTopLine">[in] First line to place in the center of the view.</param>
      <param name="iCount">[in] Total number of lines to place in the center of the view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.ClearSelection(System.Int32)">
      <summary>Clears the current selection.</summary>
      <param name="fMoveToAnchor">[in] If true, the cursor is placed at the anchor after the current selection is cleared. If false, then the cursor is not moved.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.CloseView">
      <summary>Closes and unregisters a view with the view manager.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.EnsureSpanVisible(Microsoft.VisualStudio.TextManager.Interop.TextSpan)">
      <summary>Ensures that text is in view, both vertically and horizontally.</summary>
      <param name="span">[in] Specifies the span of text to center.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines@)">
      <summary>Returns the current contents of the text buffer.</summary>
      <param name="ppBuffer">[out] Pointer to the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines" /> interface representing the text buffer.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetCaretPos(System.Int32@,System.Int32@)">
      <summary>Returns the line and column index of the cursor position.</summary>
      <param name="piLine">[out] Pointer to an integer containing the line, if the method succeeds.</param>
      <param name="piColumn">[out] Pointer to an integer containing the column, if the method succeeds. Viewcol coordinates may include virtual space.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetLineAndColumn(System.Int32,System.Int32@,System.Int32@)">
      <summary>Converts a text stream position to a line and column index.</summary>
      <param name="iPos">[in] Integer containing the position in the text stream.</param>
      <param name="piLine">[out] Pointer containing the line index corresponding to the stream position.</param>
      <param name="piIndex">[out] Pointer containing the column index corresponding to the stream position.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetLineHeight(System.Int32@)">
      <summary>Returns the pixel height of a line.</summary>
      <param name="piLineHeight">[out, retval] Integer containing the line height, in pixels.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetNearestPosition(System.Int32,System.Int32,System.Int32@,System.Int32@)">
      <summary>Converts a line and column index to a text stream position.</summary>
      <param name="iLine">[in] Integer containing the line index.</param>
      <param name="iCol">[in] Integer containing the column index. Viewcol coordinates might include virtual space.</param>
      <param name="piPos">[out] Pointer to an integer containing the position in the text stream.</param>
      <param name="piVirtualSpaces">[out] Pointer to an integer containing the number of virtual spaces.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetPointOfLineColumn(System.Int32,System.Int32,Microsoft.VisualStudio.OLE.Interop.POINT[])">
      <summary>Returns the coordinates for the upper left corner of a particular line and column.</summary>
      <param name="iLine">[in] Integer containing the line index.</param>
      <param name="iCol">[in] Integer containing the column index. Viewcol coordinates may include virtual space.</param>
      <param name="ppt">[out, retval] Structure defining the x- and y- coordinates of the upper left corner of the line. For more information, see POINT in the Platform SDK.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetScrollInfo(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Returns the core text editor's scroll bar settings for the specified scroll bar.</summary>
      <param name="iBar">[in] Specifies a horizontal or vertical scroll bar. Values may be either SB_HORZ or SB_VERT. For more information, see GetScrollInfo in the Platform SDK.</param>
      <param name="piMinUnit">[out] Minimum scroll bar unit.</param>
      <param name="piMaxUnit">[out] Maximum scroll bar unit.</param>
      <param name="piVisibleUnits">[out] Additional number of visible units in the scroll bar.</param>
      <param name="piFirstVisibleUnit">[out] First visible unit in the scroll bar.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetSelectedText(System.String@)">
      <summary>Returns a copy of the selected text.</summary>
      <param name="pbstrText">[out] If the method succeeds, specifies a pointer to a string containing the text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetSelection(System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Returns the text span corresponding to the current selection, if there is one.</summary>
      <param name="piAnchorLine">[out] Anchor line position for the selection. Based on user selection, this value is not necessarily the upper line in the selection.</param>
      <param name="piAnchorCol">[out] Anchor column position for the selection. Based on user selection, this value is not necessarily the upper, left column position in the selection. Viewcol coordinates may include virtual space.</param>
      <param name="piEndLine">[out] End line position for the selection. Based on user selection, this value is not necessarily the lower line in the selection.</param>
      <param name="piEndCol">[out] End column position for the selection. Based on user selection, this value is not necessarily the lower, right column position in the selection. Viewcol coordinates may include virtual space.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetSelectionDataObject(Microsoft.VisualStudio.OLE.Interop.IDataObject@)">
      <summary>Returns a copy of the selected text in <see cref="T:System.Windows.Forms.IDataObject" /> interface format.</summary>
      <param name="ppIDataObject">[out] Pointer to an <see cref="T:System.Windows.Forms.IDataObject" /> object containing the selected text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetSelectionMode">
      <summary>Returns the current selection mode.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetSelectionSpan(Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the text span associated with a selection.</summary>
      <param name="pSpan">[out] </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetTextStream(System.Int32,System.Int32,System.Int32,System.Int32,System.String@)">
      <summary>Returns a specified stream of text in a string.</summary>
      <param name="iTopLine">[in] Top line index defining the text stream.</param>
      <param name="iTopCol">[in]Top line column defining the text stream. Viewcol coordinates may include virtual space.</param>
      <param name="iBottomLine">[in] Bottom line index defining the text stream.</param>
      <param name="iBottomCol">[in] Bottom line column defining the text stream. Viewcol coordinates may include virtual space.</param>
      <param name="pbstrText">[out] Pointer to a string containing the text.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetWindowHandle">
      <summary>Returns the window handle for this view.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.GetWordExtent(System.Int32,System.Int32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Returns the current word extent.</summary>
      <param name="iLine">[in] Line index for the lines that contains the word.</param>
      <param name="iCol">[in] Column index for the word.</param>
      <param name="dwFlags">[in] Flags specifying how the word extent is determined. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS" />.</param>
      <param name="pSpan">[out] Span of text identifying the word extent.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.HighlightMatchingBrace(System.UInt32,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.TextSpan[])">
      <summary>Highlights the matching brace in a language construct.</summary>
      <param name="dwFlags">[in] Parameter is not used.</param>
      <param name="cSpans">[in] Number of matching pairs to highlight within the text span.</param>
      <param name="rgBaseSpans">[in, size_is(cSpans)] Span of text to highlight within.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.Initialize(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines,System.IntPtr,System.UInt32,Microsoft.VisualStudio.TextManager.Interop.INITVIEW[])">
      <summary>Creates the view and allows clients to specify one or more <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags" /> options.</summary>
      <param name="pBuffer">[in] Pointer to a text buffer object to attach the view to.</param>
      <param name="hwndParent">[in] Specifies a handle to the parent window.</param>
      <param name="InitFlags">[in] Specifies view options. For a list of <paramref name="InitFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TextViewInitFlags" />.</param>
      <param name="pInitView">[in] Pointer to the view you want to initialize.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.PositionCaretForEditing(System.Int32,System.Int32)">
      <summary>Puts the caret in a position suitable for editing a function.</summary>
      <param name="iLine">[in] Integer containing the line to position the caret (cursor) on.</param>
      <param name="cIndentLevels">[in] Count of indent levels.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.RemoveCommandFilter(Microsoft.VisualStudio.OLE.Interop.IOleCommandTarget)">
      <summary>Removes a command filter from the chain of command filters.</summary>
      <param name="pCmdTarg">[in] Pointer to a command filter to remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.ReplaceTextOnLine(System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
      <summary>Replaces a line of text.</summary>
      <param name="iLine">[in] Integer containing the line.</param>
      <param name="iStartCol">[in] Integer containing the starting column.</param>
      <param name="iCharsToReplace">[in] Integer containing the characters to replace.</param>
      <param name="pszNewText">[in] Pointer the new text being passed in.</param>
      <param name="iNewLen">[in] Length of the buffer (number of characters) being passed in.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.RestrictViewRange(System.Int32,System.Int32,Microsoft.VisualStudio.TextManager.Interop.IVsViewRangeClient)">
      <summary>Method information is not provided. Method is not implemented.</summary>
      <param name="iMinLine"> </param>
      <param name="iMaxLine"> </param>
      <param name="pClient"> </param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.SendExplicitFocus">
      <summary>Sends explicit focus to the window.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.SetBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextLines)">
      <summary>Associates a text buffer with the view.</summary>
      <param name="pBuffer">[in] Pointer to the text buffer to associate with the view.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.SetCaretPos(System.Int32,System.Int32)">
      <summary>Sets the coordinates of the end point of a selection.</summary>
      <param name="iLine">[in] Line containing the caret position.</param>
      <param name="iColumn">[in] Column identifying the caret position. Viewcol coordinates may include virtual space.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.SetScrollPosition(System.Int32,System.Int32)">
      <summary>Sets the core text editor's scroll bar settings for the specified scroll bar.</summary>
      <param name="iBar">[in] Specifies a horizontal or vertical scroll bar. Values may be either SB_HORZ or SB_VERT. For more information, see GetScrollInfo in the Platform SDK.</param>
      <param name="iFirstVisibleUnit">[in] First visible unit for the scroll bar.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.SetSelection(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Selects specified text.</summary>
      <param name="iAnchorLine">[in] Anchor line position for the selection.</param>
      <param name="iAnchorCol">[in] Anchor column position for the selection. Viewcol coordinates may include virtual space.</param>
      <param name="iEndLine">[in] End line position for the selection.</param>
      <param name="iEndCol">[in] End column position for the selection. Viewcol coordinates may include virtual space.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.SetSelectionMode(Microsoft.VisualStudio.TextManager.Interop.TextSelMode)">
      <summary>Sets the selection mode.</summary>
      <param name="iSelMode">[in] Integer containing the selection mode.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.SetTopLine(System.Int32)">
      <summary>Sets the top line in the view to the baseline.</summary>
      <param name="iBaseLine">[in] Indicates the line that should be set as the baseline.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.UpdateCompletionStatus(Microsoft.VisualStudio.TextManager.Interop.IVsCompletionSet,System.UInt32)">
      <summary>Used for word completion control.</summary>
      <param name="pCompSet">[in] Pointer to a completion set object.</param>
      <param name="dwFlags">[in] Flags specifying completion status options. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.UpdateCompletionFlags" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.UpdateTipWindow(Microsoft.VisualStudio.TextManager.Interop.IVsTipWindow,System.UInt32)">
      <summary>Updates the tip window.</summary>
      <param name="pTipWindow">[in] Pointer to a tip window object.</param>
      <param name="dwFlags">[in] Tip window options. For a list of <paramref name="dwFlags" /> values, see <see cref="T:Microsoft.VisualStudio.TextManager.Interop.TipWindowFlags" />.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsTextViewClass.UpdateViewFrameCaption">
      <summary>Forces the view to update its frame window caption, such as "[Read only]".</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsUndoPackage">
      <summary>Implements the linked undo stack feature.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsUndoPackageClass">
      <summary>Implements the linked undo stack feature.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUndoPackageClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUndoPackageClass.AbortLinkedUndo">
      <summary>Aborts a linked undo transaction.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUndoPackageClass.CloseLinkedUndo">
      <summary>Successfully closes a linked undo transaction.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUndoPackageClass.CountOpenTransactions(System.Int32@)">
      <summary>Returns the nesting level of the linked undo transactions.</summary>
      <param name="pCount">Pointer to a count object. The count object indicates the levels of nesting.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUndoPackageClass.IsAborted(System.Int32@)">
      <summary>Determines if the linked undo transaction is aborted.</summary>
      <param name="pfAborted">Pointer to a flag, true indicating aborted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUndoPackageClass.IsStrict(System.Int32@)">
      <summary>Determines if the linked undo transaction is strict.</summary>
      <param name="pfStrict">Pointer to a flag, true indicating strict.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUndoPackageClass.OpenLinkedUndo(System.UInt32,System.String)">
      <summary>Opens a linked undo transaction parent unit.</summary>
      <param name="dwFlags">[in] Value taken from the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags" /> enumeration. <paramref name="mdtDefault" /> specifies the transaction to be nonstrict, which is default behavior. The other possible enum value is <see cref="F:Microsoft.VisualStudio.TextManager.Interop.LinkedTransactionFlags.mdtStrict" /> that specifies the undo linking behavior as strict.</param>
      <param name="pszDescription">[in] Localized string that describes this action; appears in the undo/redo dropdown menus. This value may not be null.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsUndoUnit">
      <summary>Determines if the undo unit applies to UI items only.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsUndoUnitClass">
      <summary>Determines if the undo unit applies to UI items only.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUndoUnitClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUndoUnitClass.fChangeData">
      <summary>Indicates whether the undo unit applies to UI only and does not change the document data.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsUserData">
      <summary>Allows a caller to use a GUID to set or get user data (properties).</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.VsUserDataClass">
      <summary>Allows a caller to use a GUID to set or get user data (properties).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUserDataClass.#ctor"></member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUserDataClass.GetData(System.Guid@,System.Object@)">
      <summary>Returns user data from a buffer.</summary>
      <param name="riidKey">[in] Unique identifier of the data.</param>
      <param name="pvtData">[out] Pointer to a VARIANT containing the user data.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.TextManager.Interop.VsUserDataClass.SetData(System.Guid@,System.Object)">
      <summary>Sets user data to a buffer.</summary>
      <param name="riidKey">[in] Unique identifier of the data.</param>
      <param name="vtData">[in] Data to be set.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS">
      <summary>Specifies options for determining the extent of a word.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS.WORDEXT_MOVETYPE_MASK">
      <summary>Flag to mask WORDEXT_PREVIOUS and WORDEXT_NEXT.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS.WORDEXT_CURRENT">
      <summary>Finds a word or token containing a specified position, if any such word or token exists.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS.WORDEXT_PREVIOUS">
      <summary>Finds the nearest word or token whose last character is less than a specified position.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS.WORDEXT_NEXT">
      <summary>Finds the nearest word or token whose first character is greater than a specified position.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS.WORDEXT_NEAREST">
      <summary>Finds the word or token nearest to a specified position.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS.WORDEXT_FINDWORD">
      <summary>Finds words only. See Remarks.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS.WORDEXT_FINDTOKEN">
      <summary>Finds words and tokens. See Remarks.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.TextManager.Interop.WORDEXTFLAGS.WORDEXT_FINDEXPRESSION">
      <summary>Find simple expressions, like *pFoo.</summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.VisualStudio.Editor.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Editor</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.VisualStudio.Editor.FontsAndColorsCategory" -->
        <member name="M:Microsoft.VisualStudio.Editor.FontsAndColorsCategory.#ctor(System.Guid,System.Guid,System.Guid)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Editor.FontsAndColorsCategory"/>.
            </summary>
            <param name="languageService">The language service guid for this <see cref="T:Microsoft.VisualStudio.Editor.FontsAndColorsCategory"/>.</param>
            <param name="fontCategory">The font category guid for this <see cref="T:Microsoft.VisualStudio.Editor.FontsAndColorsCategory"/>.</param>
            <param name="colorCategory">The color category guid for this <see cref="T:Microsoft.VisualStudio.Editor.FontsAndColorsCategory"/>.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.FontsAndColorsCategory.SetColorCategory(System.Guid)">
            <summary>
            Sets the color category Guid.
            </summary>
            <param name="newColorCategory">The color category Guid.</param>
            <returns>A new <see cref="T:Microsoft.VisualStudio.Editor.FontsAndColorsCategory"/> with the color category guid set to be <paramref name="newColorCategory"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.FontsAndColorsCategory.SetFontCategory(System.Guid)">
            <summary>
            Sets the font category Guid.
            </summary>
            <param name="newFontCategory">The font category Guid.</param>
            <returns>A new <see cref="T:Microsoft.VisualStudio.Editor.FontsAndColorsCategory"/> with the font category guid set to be <paramref name="newFontCategory"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.FontsAndColorsCategory.SetLanguageService(System.Guid)">
            <summary>
            Sets the language service Guid. 
            </summary>
            <param name="newLanguageService">The language service Guid.</param>
            <returns>A new <see cref="T:Microsoft.VisualStudio.Editor.FontsAndColorsCategory"/> with the font category guid set to be <paramref name="newLanguageService"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.FontsAndColorsCategory.Equals(System.Object)">
            <summary>
            Determines whether two <see cref="T:Microsoft.VisualStudio.Editor.FontsAndColorsCategory"/>s are the same.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>True if the two <see cref="T:Microsoft.VisualStudio.Editor.FontsAndColorsCategory"/>s are the same, false otherwise</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.FontsAndColorsCategory.GetHashCode">
            <summary>
            Serves as a hash function for this type.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Editor.FontsAndColorsCategory.AppearanceCategory">
            <summary>
            Returns a string representating the textual key that's used in the editor's (platform side)
            EditorFormatMap and ClassificationFormatMap groupings.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Editor.IVsFontsAndColorsInformation">
            <summary>
            Encapsulates information about a language's color information.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.IVsFontsAndColorsInformation.GetClassificationType(System.Int32)">
            <summary>
            Returns a <see cref="T:Microsoft.VisualStudio.Text.Classification.IClassificationType"/>s that is created to be used by the language service classifier 
            for the colorable item at index colorableItemIndex.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.IVsFontsAndColorsInformation.GetFontAndColorPreferences">
            <summary>
            Returns the <see cref="T:Microsoft.VisualStudio.TextManager.Interop.FONTCOLORPREFERENCES2"/> of the language service. This corresponds to the color definitions
            inside Visual Studio (not the information available in the classification format map, editor format map, etc.)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.IVsFontsAndColorsInformation.AddLanguageService(System.Guid)">
            <summary>
            Adds an additional language service that contributes to coloring information of this class. This method can be
            used to add additional color sources where multiple buffers of the same font and color category guid have 
            varying language service GUIDs.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Editor.IVsFontsAndColorsInformation.Updated">
            <summary>
            Raised when information about the language service's colors is changed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Editor.IVsFontsAndColorsInformationService">
            <summary>
            Provides <see cref="T:Microsoft.VisualStudio.Editor.IVsFontsAndColorsInformation"/>s for given languages and <see cref="T:Microsoft.VisualStudio.Editor.FontsAndColorsCategory"/>ies.
            </summary>
            <remarks>
            This is a MEF Component, and should be imported with the following attribute:
            [Import(typeof(IFontsAndColorsInformationService))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.IVsFontsAndColorsInformationService.GetFontAndColorInformation(Microsoft.VisualStudio.Editor.FontsAndColorsCategory)">
            <summary>
            Returns an <see cref="T:Microsoft.VisualStudio.Editor.IVsFontsAndColorsInformation"/> which represents the coloring information for the provided
            <see cref="T:Microsoft.VisualStudio.Editor.FontsAndColorsCategory"/>.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.CLSID_VsTextBufferString">
            <summary>
            String representing the Guid used to co-create a VsTextBuffer
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.CLSID_SecondaryVsTextBufferAdapterString">
            <summary>
            String representing the Guid used to co-create a SecondaryVsTextBufferAdapter
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.CLSID_VsTextViewString">
            <summary>
            String representing the Guid used to co-create a VsTextView
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.CLSID_VsDocDataAdapterString">
            <summary>
            String representing the Guid used to co-create a VsDocDataAdapter
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.CLSID_VsCodeWindowString">
            <summary>
            String representing the Guid used to co-create a VsCodeWindow
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.CLSID_VsTextBufferCoordinatorAdapterString">
            <summary>
            String representing the Guid used to co-create a VsTextBufferCoordinatorAdapter
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.CLSID_VsHiddenTextManagerAdapterString">
            <summary>
            String representing the Guid used to co-create a VsHiddenTextManagerAdapter
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.CLSID_PlatformFactoryString">
            <summary>
            String representing the Guid used to co-create a PlatformFactory
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.CLSID_TextEditorFactoryString">
            <summary>
            String representing the Guid used to co-create a TextEditorFactory
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.CLSID_TextEditorFactoryWithEncodingString">
            <summary>
            String representing the Guid used to co-create a TextEditorFactoryWithEncoding
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.CLSID_PrimeEditorString">
            <summary>
            String representing the Guid used to co-create a PrimeEditor
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.guidEditorPkgString">
            <summary>
            String representing the Guid for the editor package
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.guidTextEditorFontCategory">
            <summary>
            Guid for the code editor font and color category.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.guidOutputWindowFontCategory">
            <summary>
            Guid for the ouput window's font and color category.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.guidPrinterFontCategory">
            <summary>
            Guid for the printer font and color category.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.guidToolTipFontCategory">
            <summary>
            Guid for the tooltip font and color category.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.guidStatementCompletionFontCategory">
            <summary>
            Guid for the statement completion font and color category.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.guidFindResultsFontCategory">
            <summary>
            Guid for the find results font and color category.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.guidCommandWindowFontCategory">
            <summary>
            Guid for the command window's font and color category.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.guidSystemWindowFontCategory">
            <summary>
            Guid for the system window font and color category.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.guidImmediateWindowFontCategory">
            <summary>
            Guid for the immediate window's font and color category.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.guidEditPropCategoryViewMasterSettings">
            <summary>
            Guid for the master settings for a certain TextView
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.CLSID_VsTextBuffer">
            <summary>
            Guid used to co-create a VsTextBuffer
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.CLSID_VsTextView">
            <summary>
            Guid used to co-create a VsTextView
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.CLSID_SecondaryVsTextViewAdapter">
            <summary>
            Guid used to co-create a SecondaryVsTextViewAdapter
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.CLSID_VsDocDataAdapter">
            <summary>
            Guid used to co-create a VsDocDataAdapter
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.CLSID_VsCodeWindow">
            <summary>
            Guid used to co-create a VsCodeWindow
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.CLSID_VsTextBufferCoordinatorAdapter">
            <summary>
            Guid used to co-create a VsTextBufferCoordinatorAdapter
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.CLSID_VsHiddenTextManagerAdapter">
            <summary>
            Guid used to co-create a VsHiddenTextManagerAdapter
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.CLSID_PlatformFactory">
            <summary>
            Guid used to co-create a PlatformFactory
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.CLSID_TextEditorFactory">
            <summary>
            Guid used to co-create a TextEditorFactory
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.CLSID_TextEditorFactoryWithEncoding">
            <summary>
            Guid used to co-create a TextEditorFactoryWithEncoding
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.CLSID_PrimeEditor">
            <summary>
            Guid used to co-create a PrimeEditor
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.guidIVxTextBuffer">
            <summary>
            Guid used to get an IVxTextBuffer from an ITextBuffer
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.guidIWpfTextViewHost">
            <summary>
            Guid used to get an IWpfTextViewHost from an IWpfTextView
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Editor.DefGuidList.guidEditorPkg">
            <summary>
            Guid for the editor package
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService">
            <summary>
            A factory service for creating Editor Adapter objects and mapping between such objects and
            the underlying new editor objects.
            </summary>
            <remarks>This is a MEF Component, and should be exported with the following attribute:
            [Export(NameSource=typeof(IVsCodeWindowFactoryService))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService.CreateVsTextBufferAdapter(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
            <summary>
            Create an IVsTextBuffer.
            </summary>
            <param name="serviceProvider">The IServiceProvider with which to site the IVsTextBuffer.</param>
            <returns>The new IVsTextBuffer.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService.CreateVsTextBufferAdapter(Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Utilities.IContentType)">
            <summary>
            Create an IVsTextBuffer with a specified content type.
            </summary>
            <param name="serviceProvider">The IServiceProvider with which to site the IVsTextBuffer.</param>
            <param name="contentType">The <see cref="T:Microsoft.VisualStudio.Utilities.IContentType"/> for the underlying <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.</param>
            <returns>The new IVsTextBuffer.</returns>
            <remarks>This operation is intended for text buffers that will be initialized by IVsTextBuffer.InitializeContent.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService.CreateVsTextBufferAdapterForSecondaryBuffer(Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Create an IVsTextBuffer for the SecondaryBuffer (used in BufferCoordinator) given an <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>
            </summary>
            <param name="serviceProvider">The IServiceProvider with which to site the IVsTextBuffer.</param>
            <param name="secondaryBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> with which to create the IVsTextBuffer.</param>
            <returns>The new IVsTextBuffer.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService.CreateVsTextViewAdapter(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
            <summary>
            Create an IVsTextView.
            </summary>
            <param name="serviceProvider">The IServiceProvider with which to site the IVsTextView.</param>
            <returns>The new IVsTextView.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService.CreateVsTextViewAdapter(Microsoft.VisualStudio.OLE.Interop.IServiceProvider,Microsoft.VisualStudio.Text.Editor.ITextViewRoleSet)">
            <summary>
            Create an IVsTextView with a specified set of text view roles.
            </summary>
            <param name="serviceProvider">The IServiceProvider with which to site the IVsTextView.</param>
            <param name="roles">The roles with which to initialize the text view.</param>
            <returns>The new IVsTextView.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService.CreateVsCodeWindowAdapter(Microsoft.VisualStudio.OLE.Interop.IServiceProvider)">
            <summary>
            Create an IVsCodeWindow.
            </summary>
            <param name="serviceProvider">The IServiceProvider with which to site the IVsCodeWindow.</param>
            <returns>The new IVsCodeWindow.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService.CreateVsTextBufferCoordinatorAdapter">
            <summary>
            Create an IVsTextBuffercoordinator.
            </summary>
            <returns>The new IVsTextBufferCoordinator.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService.GetDataBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
            <summary>
            Get the DataBuffer of an IVsTextBuffer adapter (this is the top buffer of
            the data model buffer graph). This buffer will be
            the same as the DocumentBuffer except in BufferCoordinator scenarios.
            </summary>
            <param name="bufferAdapter">The text buffer adapter of interest.</param>
            <returns>Null if this method is called before content has been established for 
            the adapter, otherwise the DataBuffer that is presented to the view model.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bufferAdapter"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="bufferAdapter"/> was not produced
            by this factory.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService.GetDocumentBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer)">
            <summary>
            Get the DocumentBuffer of an IVsTextBuffer adapter (this is the bottom buffer
            of the data model buffer graph). This buffer will be
            the same as the DataBuffer except in BufferCoordinator scenarios.
            </summary>
            <param name="bufferAdapter">The text buffer adapter of interest.</param>
            <returns>Null if this method is called before content has been established for 
            the adapter, otherwise the DocumentBuffer that is presented to the view model.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="bufferAdapter"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="bufferAdapter"/> was not produced
            by this factory.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService.GetWpfTextView(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <summary>
            Get the WpfTextView of an IVsTextView adapter. 
            </summary>
            <param name="viewAdapter">The text view adapter of interest.</param>
            <returns>Null if this method is called before content has been established for the 
            adapter, otherwise the IWpfTextView that presents the text in the UI.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="viewAdapter"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="viewAdapter"/> was not produced
            by this factory.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService.GetWpfTextViewHost(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <summary>
            Get the WpfTextViewHost of an IVsTextView adapter. 
            </summary>
            <param name="viewAdapter">The text view adapter of interest.</param>
            <returns>Null if this method is called before content has been established for the 
            adapter, otherwise the IWpfTextViewHost that presents the text in the UI.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="viewAdapter"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="viewAdapter"/> was not produced
            by this factory.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService.SetDataBuffer(Microsoft.VisualStudio.TextManager.Interop.IVsTextBuffer,Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Set the DataBuffer of an IVsTextBuffer adapter that is being used together
            with an IVsTextBufferCoordinator adapter.
            </summary>
            <param name="bufferAdapter">The buffer adapter of interest.</param>
            <param name="dataBuffer">The new data buffer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="bufferAdapter"/> is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="dataBuffer"/>is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="bufferAdapter"/> was not produced
            by this factory.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService.GetBufferAdapter(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Get the IVsTextBuffer adapter for this text buffer (if it exists).
            </summary>
            <param name="textBuffer">The text buffer of interest.</param>
            <returns>Null if no adapter exists, or else the adapter.</returns>
            <remarks>Adapters are generally built only for document windows.</remarks>
            <exception cref="T:System.ArgumentNullException">textBuffer is null.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.IVsEditorAdaptersFactoryService.GetViewAdapter(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Get the IVsTextView adapter for this text view (if it exists).
            </summary>
            <param name="textView">The text view of interest.</param>
            <returns>Null if no adapter exists, or else the adapter.</returns>
            <remarks>Adapters are generally built only for document windows.</remarks>
            <exception cref="T:System.ArgumentNullException">textView is null.</exception>
        </member>
        <member name="T:Microsoft.VisualStudio.Editor.IVsTextViewCreationListener">
            <summary>
            A listener for when a text view adapter (<see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"/>) is created and initialized that 
            has matching roles and was created over a text data model having a matching content type.
            Exporters must specify at least one ContentTypeAttribute and one TextViewRole, and should mark their export using the following attribute:
            [Export(typeof(IVsTextViewCreationListener))], along with [ContentType] and [TextViewRole].
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Editor.IVsTextViewCreationListener.VsTextViewCreated(Microsoft.VisualStudio.TextManager.Interop.IVsTextView)">
            <summary>
            Called when a <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextView"/> adapter has been created and initialized.
            </summary>
            <param name="textViewAdapter">The newly created and initialized text view
            adapter.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Editor.IVsVisibleTextMarkerTag">
            <summary>
            These tags are generated from the visible legacy markers created using <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLines"/>.CreateLineMarker and <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStream"/>.CreateStreamMarker.
            </summary>
            <remarks>No extension should produce these tags.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Editor.IVsVisibleTextMarkerTag.Type">
            <summary>
            The integer type of the marker.
            </summary>
            <remarks>This is equivalent to the type produced by IVsTextLineMarker.GetType().</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Editor.IVsVisibleTextMarkerTag.MarkerType">
            <summary>
            The marker's <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextMarkerType"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Editor.IVsVisibleTextMarkerTag.LineMarker">
            <summary>
            The marker as an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextLineMarker"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Editor.IVsVisibleTextMarkerTag.StreamMarker">
            <summary>
            The marker as an <see cref="T:Microsoft.VisualStudio.TextManager.Interop.IVsTextStreamMarker"/>.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.VisualStudio.Language.StandardClassification.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Language.StandardClassification</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Language.StandardClassification.IStandardClassificationService">
            <summary>
            Provides access to standard classifications.
            </summary>
            <remarks>This is a MEF Component, and should be imported with the following attribute:
            [Import(typeof(IStandardClassificationService))]
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.StandardClassification.IStandardClassificationService.NaturalLanguage">
            <summary>
            Gets a classification type representing a natural language.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.StandardClassification.IStandardClassificationService.FormalLanguage">
            <summary>
            Gets a classification type representing a formal language.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.StandardClassification.IStandardClassificationService.Comment">
            <summary>
            Gets a classification type representing comments in a formal language.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.StandardClassification.IStandardClassificationService.Identifier">
            <summary>
            Gets a classification type representing identifiers in a formal language.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.StandardClassification.IStandardClassificationService.Keyword">
            <summary>
            Gets a classification type representing keywords in a formal language.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.StandardClassification.IStandardClassificationService.WhiteSpace">
            <summary>
            Gets a classification type representing whitespace in a formal language.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.StandardClassification.IStandardClassificationService.Operator">
            <summary>
            Gets a classification type representing whitespace in a formal language.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.StandardClassification.IStandardClassificationService.Literal">
            <summary>
            Gets a classification type representing literals in a formal language.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.StandardClassification.IStandardClassificationService.NumberLiteral">
            <summary>
            Gets a classification type representing numerical literals which derives from the literal classification type in a formal language.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.StandardClassification.IStandardClassificationService.StringLiteral">
            <summary>
            Gets a classification type representing string literals which derives from the literal classification type in a formal language.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.StandardClassification.IStandardClassificationService.CharacterLiteral">
            <summary>
            Gets a classification type representing character literals which derives from the literal classification type in a formal language.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.StandardClassification.IStandardClassificationService.Other">
            <summary>
            Gets a classification type representing anything in a formal language.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.StandardClassification.IStandardClassificationService.ExcludedCode">
            <summary>
            Gets a classification type representing blocks excluded by the preprocessor or other means in a formal language.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.StandardClassification.IStandardClassificationService.PreprocessorKeyword">
            <summary>
            Gets a classification type representing preprocessor keywords in a formal language.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.StandardClassification.IStandardClassificationService.SymbolDefinition">
            <summary>
            Gets a classification type representing the definition of a symbol in a formal language.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.StandardClassification.IStandardClassificationService.SymbolReference">
            <summary>
            Gets a classification type representing the reference to a symbol in a formal language.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.StandardClassification.LanguagePriority">
            <summary>
            Represents the built-in priorities for language classifications.
            </summary>
            <remarks>
            <para>
            The set of default classification types and format definitions provided by the <see cref="T:Microsoft.VisualStudio.Language.StandardClassification.IStandardClassificationService"/> define
            natural language and formal language classification types. These classification types act as classification types upon which other
            classification types are based.
            </para>
            <para>
            Formal language classifications have higher priority than natural language classification types (and by definition all derivatives of
            formal language classifications have higher priority than derivatives of the natural language classification types).
            </para>
            <para>
            Both the formal and natural language classification types fall between the <see cref="F:Microsoft.VisualStudio.Text.Classification.Priority.Default"/> and <see cref="F:Microsoft.VisualStudio.Text.Classification.Priority.High"/>
            generic priorities.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.StandardClassification.LanguagePriority.NaturalLanguage">
            <summary>
            Priority for the natural language classification definitions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.StandardClassification.LanguagePriority.FormalLanguage">
            <summary>
            Priority for the formal language classificaiton definitions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.StandardClassification.PredefinedClassificationTypeNames">
            <summary>
            Defines a list of predefined classification type names.
            </summary>
            <remarks>
            The classification type names defined herein are used by the <see cref="T:Microsoft.VisualStudio.Language.StandardClassification.IStandardClassificationService"/> to create the set of pre-existing classification types.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.StandardClassification.PredefinedClassificationTypeNames.Comment">
            <summary>
            Name of the classification type representing comments.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.StandardClassification.PredefinedClassificationTypeNames.Identifier">
            <summary>
            Name of the classification type representing identifiers. In C# for instance, these would be variable names.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.StandardClassification.PredefinedClassificationTypeNames.Keyword">
            <summary>
            Name of the classification type representing keywords. In C# for instance, foreach would be a keyword.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.StandardClassification.PredefinedClassificationTypeNames.WhiteSpace">
            <summary>
            Name of the classification type representing white space.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.StandardClassification.PredefinedClassificationTypeNames.Operator">
            <summary>
            Name of the classification type representing operators. In C# for instance, + would be an operator.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.StandardClassification.PredefinedClassificationTypeNames.Literal">
            <summary>
            Name of the classification type representing literals.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.StandardClassification.PredefinedClassificationTypeNames.String">
            <summary>
            Name of the classification type representing strings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.StandardClassification.PredefinedClassificationTypeNames.Character">
            <summary>
            Name of the classification type representing characters.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.StandardClassification.PredefinedClassificationTypeNames.Number">
            <summary>
            Name of the classification type representing numbers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.StandardClassification.PredefinedClassificationTypeNames.Other">
            <summary>
            Name of the classification type representing all other types of classifications.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.StandardClassification.PredefinedClassificationTypeNames.ExcludedCode">
            <summary>
            Name of the classification type representing items that are excluded via a preprocessor macro or other means.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.StandardClassification.PredefinedClassificationTypeNames.PreprocessorKeyword">
            <summary>
            Name of the classification type representing preprocessor keywords.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.StandardClassification.PredefinedClassificationTypeNames.SymbolDefinition">
            <summary>
            Name of the classification type representing definition of symbols.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.StandardClassification.PredefinedClassificationTypeNames.SymbolReference">
            <summary>
            Name of the classification type representing symbol references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.StandardClassification.PredefinedClassificationTypeNames.NaturalLanguage">
            <summary>
            Name of the classification type representing a natural language classification. This classification type is intended to be used
            as a base classification type for other classification types belonging to a set of natural language classifications.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.StandardClassification.PredefinedClassificationTypeNames.FormalLanguage">
            <summary>
            Name of the classification type representing a formal language. This classification type is intended to be used as a base
            classification type for all classification types belonging to a set of formal langauge classifications. For example literals
            and keywords.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.VisualStudio.Language.Intellisense.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Language.Intellisense</name>
    </assembly>
    <members>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1">
            <summary>
            Represents an ObservableCollection that allows the AddRange operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.#ctor">
            <summary>
            Initializes a new instance of a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds a list of items to the ObservableCollection without firing an event for each item.
            </summary>
            <param name="items">A list of items to add.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.BeginBulkOperation">
            <summary>
            Suspends change events on the collection in order to perform a bulk change operation.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.EndBulkOperation">
            <summary>
            Restores change events on the collection after a bulk change operation has been completed.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.AsReadOnly">
            <summary>
            Gets a read-only version of the collection.
            </summary>
            <returns>A read-only version of the collection.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Occurs when the collection has changed.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.SetItem(System.Int32,`0)">
            <summary>
            Replaces the item at the specified index.
            </summary>
            <param name="index">The place at which to replace the item.</param>
            <param name="item">The item to replace.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an item at the specified index.
            </summary>
            <param name="index">The location at which to insert the item.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.MoveItem(System.Int32,System.Int32)">
            <summary>
            Moves the item from one location to another.
            </summary>
            <param name="oldIndex">The original location.</param>
            <param name="newIndex">The new location.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.RemoveItem(System.Int32)">
            <summary>
            Removes an item from the collection at the specified location.
            </summary>
            <param name="index">The location at which to remove the item.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.BulkObservableCollection`1.ClearItems">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.Completion">
            <summary>
            Represents an item in a completion set. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.Completion.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.Completion.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion"/> with the specified text and description.
            </summary>
            <param name="displayText">The text that is to be displayed by an IntelliSense presenter.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.Completion.#ctor(System.String,System.String,System.String,System.Windows.Media.ImageSource,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion"/> with the specified text and description.
            </summary>
            <param name="displayText">The text that is to be displayed by an IntelliSense presenter.</param>
            <param name="insertionText">The text that is to be inserted into the buffer if this completion is committed.</param>
            <param name="description">A description that could be displayed with the display text of the completion.</param>
            <param name="iconSource">The icon to describe the completion item.</param>
            <param name="iconAutomationText">The automation name for the icon.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion.DisplayText">
            <summary>
            Gets/Sets the text that is to be displayed by an IntelliSense presenter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion.InsertionText">
            <summary>
            Gets/Sets the text that is to be inserted into the buffer if this completion is committed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion.Description">
            <summary>
            Gets/Sets a description that could be displayed with the display text of the completion.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion.IconSource">
            <summary>
            Gets/Sets an icon that could be used to describe the completion.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion.IconAutomationText">
            <summary>
            Gets/Sets the text to be used as the automation name for the icon when it's displayed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.Completion.Properties">
            <summary>
            Gets the properties of the completion.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType">
            <summary>
            Defines the types of matching that can be done on completion items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType.MatchDisplayText">
            <summary>
            Match the display text of the completion.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType.MatchInsertionText">
            <summary>
            Match the insertion text of the completion.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus">
            <summary>
            Represents the full selection status of a completion set. 
            </summary>
            <remarks>
            Completion sets maintain their own selection status, which is a
            combination of a completion item, a value indicating whether or not the completion is fully selected, and a value
            indicating whether or not the completion is a unique match.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.#ctor(Microsoft.VisualStudio.Language.Intellisense.Completion,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus"/>.
            </summary>
            <param name="completion">The selected completion in this selection status.</param>
            <param name="isSelected"><c>true</c> if the completion is fully-selected, <c>false</c> otherwise.</param>
            <param name="isUnique"><c>true</c> if the completion is a unique match, <c>false</c> otherwise.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.Equals(System.Object)">
            <summary>
            Determines whether two instances of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus"/> are the same.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.GetHashCode">
            <summary>
            Gets the hash code of this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.op_Equality(Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus,Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus)">
            <summary>
            Determines whether two instances of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus"/> are the same.
            </summary>
            <param name="status1">The first instance.</param>
            <param name="status2">The second instance.</param>
            <returns><c>true</c> if the instances are the same, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.op_Inequality(Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus,Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus)">
            <summary>
            Determines whether two instances of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus"/> are different.
            </summary>
            <param name="status1">The first instance.</param>
            <param name="status2">The second instance.</param>
            <returns><c>true</c> if the instances are different, otherwise <c>false</c>.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.Completion">
            <summary>
            Gets the selected completion represented by this selection status instance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.IsSelected">
            <summary>
            Determines whether the completion is fully-selected.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus.IsUnique">
            <summary>
            Determines whether the completion is a unique match.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet">
            <summary>
            Represents a set of completions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.#ctor(System.String,System.String,Microsoft.VisualStudio.Text.ITrackingSpan,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.Completion},System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Language.Intellisense.Completion})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet"/> with the specified name and text.
            </summary>
            <param name="moniker">The unique, non-localized identifier for the completion set.</param>
            <param name="displayName">The localized name of the completion set.</param>
            <param name="applicableTo">The tracking span to which the completions apply.</param>
            <param name="completions">The list of completions.</param>
            <param name="completionBuilders">The list of completion builders.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.SelectBestMatch">
            <summary>
            Determines the best match in the completion set.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.Filter">
            <summary>
            Filters the set of completions to those that match the applicability text of the completion
            set and determines the best match.
            </summary>
            <exception cref="T:System.InvalidOperationException">Both the completions and the completion builders have been overridden.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.Recalculate">
            <summary>
            Recalculates the set of completions for this completion set. 
            </summary>
            <remarks>
            The base implementation of Recalculate() does nothing.  
            Derived classes should override this method to implement custom
            recalculation behavior.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.Filter(Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType,System.Boolean)">
            <summary>
            Filters the set of completions to those that match the applicability text of the completion
            set and determines the best match.
            </summary>
            <param name="matchType">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType"/>.</param>
            <param name="caseSensitive"><c>true</c> if the match is case-sensitive, otherwise <c>false</c>.</param>
            <exception cref="T:System.InvalidOperationException">Both the completions and the completion builders have been overridden.</exception>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.SelectBestMatch(Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType,System.Boolean)">
            <summary>
            Redetermines the best matching completion in the completion set.
            </summary>
            <param name="matchType">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType"/>.</param>
            <param name="caseSensitive"><c>true</c> if the match is case-sensitive, otherwise <c>false</c>.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.MatchCompletionList(System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.Completion},Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType,System.Boolean)">
            <summary>
            Matches the completion list.
            </summary>
            <param name="completionList">The list of completions.</param>
            <param name="matchType">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionMatchType"/>.</param>
            <param name="caseSensitive"><c>true</c> if the match is case-sensitive, otherwise <c>false</c>.</param>
            <returns>A <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.CompletionMatchResult"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The span to which this completion applies is null.</exception>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.Moniker">
            <summary>
            The unique, non-localized identifier for the completion set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.DisplayName">
            <summary>
            Gets or sets the localized name of this completion set.  
            </summary>
            <remarks>In the default presenter, the display name
            appears as the header of a tab item in a WPF TabControl.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.ApplicableTo">
            <summary>
            Gets or sets the text tracking span to which this completion applies.  
            </summary>
            <remarks>If this completion is committed to the buffer, the
            span will be replaced with the completion insertion text.</remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.Completions">
            <summary>
            Gets or sets the list of completions that are part of this completion set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.CompletionBuilders">
            <summary>
            Gets or sets the list of completion builders that are part of this completion set.  
            </summary>
            <remarks>
            Completion builders are completions that are displayed separately from the other completions in the completion set.
            In the default presentation, completion builders appear in a non-scrolled list above the scrolled list of completions.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.SelectionStatus">
            <summary>
            Gets or sets the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException">The value is null.</exception>
            <exception cref="T:System.ArgumentException">The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSelectionStatus"/> is not contained in either the 
            completions or the completion builders.</exception>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.SelectionStatusChanged">
            <summary>
            Occurs when the selection status has changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.WritableCompletions">
            <summary>
            Gets the ObservableCollection of writable completions.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.WritableCompletionBuilders">
            <summary>
            Gets the ObservableCollection of writable completion builders.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.CompletionMatchResult">
            <summary>
            Stores information about the completion match result.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.CompletionMatchResult.SelectionStatus">
            <summary>
            The selection status of the completion set.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionSet.CompletionMatchResult.CharsMatchedCount">
            <summary>
            The number of characters matched in the completion set.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CurrentParameterChangedEventArgs">
            <summary>
            Provides information about the change of the current parameter in a signature help session.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.CurrentParameterChangedEventArgs.#ctor(Microsoft.VisualStudio.Language.Intellisense.IParameter,Microsoft.VisualStudio.Language.Intellisense.IParameter)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CurrentParameterChangedEventArgs"/>.
            </summary>
            <param name="previousCurrentParameter">The parameter that was previously the current parameter.</param>
            <param name="newCurrentParameter">The parameter that is now the current parameter.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CurrentParameterChangedEventArgs.PreviousCurrentParameter">
            <summary>
            Gets the parameter that was previously the current parameter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CurrentParameterChangedEventArgs.NewCurrentParameter">
            <summary>
            Gets the parameter that is now the current parameter.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle">
            <summary>
             Defines a set of properties that will be used to style the default completion presenter.
            </summary>
             <remarks>
             This is a MEF component part, and should be exported with the following attributes:
             [Export(typeof(CompletionPresenterStyle))]
             [ContentType]
             [Name]
             [Order]
             All exports of this component part should be ordered after the "default" completion presenter style.  At a minimum,
             this means adding [Order(After="default")] to the export metadata.
             </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.CompletionTextRunProperties">
            <summary>
            Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> that will be used to format the text of the individual completion items.
            </summary>
            <remarks>
            The individual completion items may override this value by implementing the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ITextFormattable"/> interface.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.BorderBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the borders in the completion presenter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.BackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the background of the completion presenter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.SelectionBorderBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the border rectangle around the selected completion item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.SelectionBackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the background of the selected completion item.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.SelectionTextRunProperties">
            <summary>
            Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> that will be used to paint the text of the selected completion item.
            </summary>
            <remarks>
            This <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> object should be constructed so as to keep from clashing with the
            SelectionBackgroundBrush.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.TooltipBorderBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the border around the completion tooltip.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.TooltipBackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the background of the completion tooltip.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.TooltipTextRunProperties">
            <summary>
            Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> that will be used to format the text in the completion tooltip.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.TabPanelBackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the background of the completion tab panel.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.TabItemHotBorderBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the border of a completion tab item when the mouse is
            hovering over it.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.TabItemHotBackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the background of a completion tab item when the mouse is
            hovering over it.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.TabItemHotTextRunProperties">
            <summary>
            Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> that will be used to format the text of a completion tab item when the mouse is
            hovering over it.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.CompletionPresenterStyle.AreGradientsAllowed">
            <summary>
            Gets a value determining whether or not gradients should be used in the presentation of a
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionBroker">
            <summary>
            Represents the central broker responsible for statement completion.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionBroker.TriggerCompletion(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Starts the process of statement completion, assuming the caret position to be the position at which completions should
            be inserted.  
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> over which to trigger statement completion.</param>
            <returns>A valid statement completion session. May be null if no session could be created.</returns>
            <remarks>When the caret leaves the
            applicability span of all the completions in this session, the session will be automatically dismissed.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionBroker.TriggerCompletion(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.Boolean)">
            <summary>
            Starts the process of statement completion at a particular position. When called with a specific trigger point, caret
            movements will be ignored and the broker will not be responsible for dismissing the session.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> over which to trigger statement completion.</param>
            <param name="triggerPoint">The point in the text buffer at which statement completion is requested.</param>
            <param name="trackCaret">
            <c>true</c> if this session should track the caret, <c>false</c> otherwise. When the caret is tracked, only completion items whose
            applicability span contains the caret will be displayed.
            </param>
            <returns>A valid statement completion session.  May be null if no session could be created.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionBroker.CreateCompletionSession(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.Boolean)">
            <summary>
            Creates a completion session, but does not start it.  
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> over which to create a completion session.</param>
            <param name="triggerPoint">The point in the text buffer at which statement completion is requested.</param>
            <param name="trackCaret">
            <c>true</c> if this session should track the caret, <c>false</c> otherwise. When the caret is tracked, only completion items whose
            applicability span contains the caret will be displayed.
            </param>
            <returns>A valid statement completion session.  May be null if no session could be created.</returns>
            <remarks>This method is useful if you want to set some properties on the session
            before starting it.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionBroker.DismissAllSessions(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Dismisses all active statement completion sessions.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> over which to dismiss all sessions.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionBroker.IsCompletionActive(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Determines whether or not statement completion is active over the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> for which to determine if statement completion is active.</param>
            <remarks>This property is <c>true</c> when Sessions.Count &gt; 0 and <c>false</c>
            otherwise.</remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionBroker.GetSessions(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets the list of active statement completion sessions.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> for which to get completions.</param>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession">
            <summary>
            Defines a statement completion session, which is a type of IntelliSense session.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession">
            <summary>
            Represents an IntelliSense session, or a single instance of the IntelliSense process.  
            </summary>
            <remarks>
            A session is returned by each
            IntelliSense triggering operation, and can be used to control the process of IntelliSense operations. IntelliSense sessions
            are aggregated into a stack, managed by an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack"/> instance.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.GetTriggerPoint(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint"/> at which this IntelliSense session was triggered in terms of the specified
            <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <remarks>
            Callers should take care to pass only <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>s that are part of the session.TextView.BufferGraph
            </remarks>
            <param name="textBuffer">The <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> for which a trigger point should be returned.</param>
            <returns>
            The trigger point of the session as a <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> in terms of the specified <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.GetTriggerPoint(Microsoft.VisualStudio.Text.ITextSnapshot)">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> at which this IntelliSense session was triggered in terms of the specified
            <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/>.
            </summary>
            <remarks>
            Callers should take care to pass only <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/>s that are part of the session.TextView.BufferGraph
            </remarks>
            <param name="textSnapshot">The <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/> for which a trigger point should be returned.</param>
            <returns>
            The trigger point of the session as a <see cref="T:Microsoft.VisualStudio.Text.SnapshotPoint"/> in terms of the specified <see cref="T:Microsoft.VisualStudio.Text.ITextSnapshot"/>.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Start">
            <summary>
            Starts the session.  
            </summary>
            <remarks>
            Before this method is called, the session is in an initialization state. It begins processing only when Start()
            is called.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Dismiss">
            <summary>
            Dismisses the session, causing the presenter to be destroyed and the session to be removed from the session stack.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Recalculate">
            <summary>
            Recalculates the underlying IntelliSense items pertaining to this session, using the same trigger point.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Match">
            <summary>
            Determines the best matching item in the session and sets the selection to this item.  
            </summary>
            <remarks>
            The best match is determined by
            querying the highest-priority provider for the buffer over which this session is running.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Collapse">
            <summary>
            Collapses the session to an unobtrusive state in which it doesn't get in the way of the user.  If the session has no
            such state, the session will be dismissed.
            </summary>
            <remarks>
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession"/>s are the only default <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession"/>s that have a collapsed state.
            All other default sessions (<see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession"/>s, <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession"/>s, and
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession"/>s) will be dismissed when collapsed.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.TextView">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> inside of which this IntelliSense session was triggered.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Presenter">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisensePresenter"/> that is used to render IntelliSense for this session.  
            </summary>
            <remarks>This property can
            change due to session updates.</remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.PresenterChanged">
            <summary>
            Occurs when the IntelliSense presenter for this session changes.  
            </summary>
            <remarks>
            Any consumers of the presenter should re-render the presenter at this time.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Dismissed">
            <summary>
            Occurs when the session is dismissed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.IsDismissed">
            <summary>
            Determines whether the session is dismissed.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Recalculated">
            <summary>
            Occurs when the session is recalculated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession.Filter">
            <summary>
            Filters the session's completion items, based on the current state of the text buffer.  
            </summary>
            <remarks>
            If a completion's display text
            or insertion text contains the text in its applicability span, it remains part of the CompletionSets
            collection, otherwise it will be removed. The underlying providers will not be asked for additional completion
            information because of this call.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession.Commit">
            <summary>
            Commits a completion session. The selected completion's insertion text is inserted into the buffer in place of
            its applicability span.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession.CompletionSets">
            <summary>
            Gets the collection of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet"/> objects.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession.SelectedCompletionSet">
            <summary>
            Gets or sets the selected <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet"/>.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession.SelectedCompletionSetChanged">
            <summary>
            Occurs when the SelectedCompletionSet property changes.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession.Committed">
            <summary>
            Occurs after a completion session is committed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession.IsStarted">
            <summary>
            Determines whether the completion session has been started.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSource">
            <summary>
            Provides completions for a given content type.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionSource.AugmentCompletionSession(Microsoft.VisualStudio.Language.Intellisense.ICompletionSession,System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.CompletionSet})">
            <summary>
            Determines which <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet"/>s should be part of the specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession"/>.
            </summary>
            <param name="session">The session for which completions are to be computed.</param>
            <param name="completionSets">The set of the completionSets to be added to the session.</param>
            <remarks>
            Each applicable <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionSource.AugmentCompletionSession(Microsoft.VisualStudio.Language.Intellisense.ICompletionSession,System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.CompletionSet})"/> instance will be called in-order to
            (re)calculate a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSession"/>.  <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet"/>s can be added to the session by adding
            them to the completionSets collection passed-in as a parameter.  In addition, by removing items from the collection, a
            source may filter <see cref="T:Microsoft.VisualStudio.Language.Intellisense.CompletionSet"/>s provided by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSource"/>s earlier in the calculation
            chain.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSourceProvider">
            <summary>
            Provides completion sources.  
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(ICompletionSourceProvider))]
            You must provide the ContentType and Order
            attributes.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICompletionSourceProvider.TryCreateCompletionSource(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates a completion provider for the given context.
            </summary>
            <param name="textBuffer">The text buffer over which to create a provider.</param>
            <returns>A valid <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ICompletionSource"/> instance, or null if none could be created.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IconDescription">
            <summary>
            Describes the icon to use for displaying items in statement completion.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IconDescription.#ctor(Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup,Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem)">
            <summary>
            Initializes a new instance of an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IconDescription"/> from a group and an item within the group.
            </summary>
            <param name="group">The icon group of the icon to be displayed.</param>
            <param name="item">The specific icon within the icon group to be displayed.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IconDescription.ToString">
            <summary>
            Provides a description of the specific icon. 
            </summary>
            <returns>Group.Item</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IconDescription.Group">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup"/> of the icon to be displayed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IconDescription.Item">
            <summary>
            Gets the specific <see cref="T:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem"/> within the icon group to be displayed.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICustomCommit">
            <summary>
            Provides custom commit operations for completions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICustomCommit.Commit">
            <summary>
            Commits the completion using the completion's own commit logic.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICustomIntellisensePresenter">
            <summary>
            Defines a custom IntelliSense presenter.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisensePresenter">
            <summary>
            Defines a presenter of IntelliSense information.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisensePresenter.Session">
            <summary>
            Gets the session that this presenter is rendering.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICustomIntellisensePresenter.Render">
            <summary>
            Renders the IntelliSense session.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ICustomKeyboardHandler">
            <summary>
            Defines a custom handler of keyboard events
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICustomKeyboardHandler.CaptureKeyboard">
            <summary>
            Signals the handler that it's ok to begin capturing keyboard events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ICustomKeyboardHandler.ReleaseKeyboard">
            <summary>
            Signals the handler that it should cease capturing keyboard events.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IGlyphService">
            <summary>
            Gets a standard set of glyphs.
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IGlyphService))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IGlyphService.GetGlyph(Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup,Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem)">
            <summary>
            Gets a glyph in the form of a WPF <see cref="T:System.Windows.Media.ImageSource"/>.
            </summary>
            <param name="group">The group description for this glyph.</param>
            <param name="item">The item description for this glyph.</param>
            <returns>A valid WPF <see cref="T:System.Windows.Media.ImageSource"/> that contains the requested glyph.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseCommandTarget">
            <summary>
            Provides a way to intercede in the command-handling chain to handle keyboard commands.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseCommandTarget.ExecuteKeyboardCommand(Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand)">
            <summary>
            Executes a user-initiated keyboard command.  
            </summary>
            <param name="command">The keyboard command to execute.</param>
            <returns><c>true</c> if the command was handled, <c>false</c> otherwise.</returns>
            <remarks>
            Keyboard commands are normally handled by the underlying view, but
            IntelliSense presenters may intercede in the command-handling chain in order to handle certain keyboard commands.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseController">
            <summary>
            Controls the IntelliSense process for one or more subject <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> objects
            exposed through a single <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseController.Detach(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Detaches the controller from the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> from which the controller should detach.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseController.ConnectSubjectBuffer(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Called when a new subject <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> appears in the graph of buffers associated with
            the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>, due to a change in projection or content type.
            </summary>
            <param name="subjectBuffer">The newly-connected text buffer.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseController.DisconnectSubjectBuffer(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Called when a subject <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> is removed from the graph of buffers associated with
            the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>, due to a change in projection or content type. 
            </summary>
            <param name="subjectBuffer">The disconnected text buffer.</param>
            <remarks>
            It is not guaranteed that
            the subject buffer was previously connected to this controller.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseControllerProvider">
            <summary>
            Creates IntelliSense controllers for individual <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> instances.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseControllerProvider.TryCreateIntellisenseController(Microsoft.VisualStudio.Text.Editor.ITextView,System.Collections.Generic.IList{Microsoft.VisualStudio.Text.ITextBuffer})">
            <summary>
            Attempts to create an IntelliSense controller for a specific text view opened in a specific context.
            </summary>
            <param name="textView">The text view for which a controller should be created.</param>
            <param name="subjectBuffers">The set of text buffers with matching content types that are potentially visible in the view.</param>
            <returns>A valid IntelliSense controller, or null if none could be created.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisensePresenterProvider">
            <summary>
            Creates IntelliSense presenters over a given IntelliSense session.  
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IIntellisensePresenterProvider))]
            Component exporters must add the Order attribute to define the order of the presenter in the presenter chain.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisensePresenterProvider.TryCreateIntellisensePresenter(Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession)">
            <summary>
            Attempts to create an IntelliSense presenter for a given IntelliSense session.
            </summary>
            <param name="session">The session for which a presenter should be created.</param>
            <returns>A valid IntelliSense presenter, or null if none could be created.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack">
            <summary>
            Defines a stack of IntelliSense sessions that manages session activation and currency.  
            </summary>
            <remarks>
            Each IntelliSense session is
            part of the stack, whether or not it appears in a TextView popup. The topmost session on the stack has
            special privileges, such as being able to capture the keyboard.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack.PushSession(Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession)">
            <summary>
            Adds a session to the top of the stack.
            </summary>
            <param name="session">An <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession"/> to add to the top of the stack.</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack.PopSession">
            <summary>
            Removes the topmost session from the stack and returns it.
            </summary>
            <returns>The session that was removed.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack.MoveSessionToTop(Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession)">
            <summary>
            Moves a session already in the session stack to the top of the stack.  The keyboard session will be re-evaluated.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack.CollapseAllSessions">
            <summary>
            Reduces all sessions in the session stack to their collapsed state, or dismisses them if they have no such state.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack.Sessions">
            <summary>
            Gets the list of sessions in the stack, ordered from bottom to top.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack.TopSession">
            <summary>
            Gets the topmost session in the stack.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStackMapService">
            <summary>
            Provides access to all the IntelliSense session stacks created for all the different
            <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> instances in the application.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStackMapService.GetStackForTextView(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets an <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack"/> for a specific <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> instance.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSessionStack"/>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand">
            <summary>
            Represents the set of keyboard commands that can be issued to IntelliSense presenters.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.Up">
            <summary>
            The up arrow command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.Down">
            <summary>
            The down arrow command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.PageUp">
            <summary>
            The page up command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.PageDown">
            <summary>
            The page down command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.TopLine">
            <summary>
            The go to the top line command
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.BottomLine">
            <summary>
            The go to the bottom line command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.Home">
            <summary>
            The home command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.End">
            <summary>
            The end command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.Enter">
            <summary>
            The enter, or return, command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.Escape">
            <summary>
            The escape command.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.IncreaseFilterLevel">
            <summary>
            The increase filter level command. 
            </summary>
            <remarks>
             This command is most often used in tabbed completion to switch between the completion tabs.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseKeyboardCommand.DecreaseFilterLevel">
            <summary>
            The decrease filter level command.  
            </summary>
            <remarks>
            This command is most often used in tabbed completion to switch between the completion tabs.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IntellisenseSpaceReservationManagerNames">
            <summary>
            Defines the names of the space reservation managers used by the default IntelliSense presenters.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseSpaceReservationManagerNames.CompletionSpaceReservationManagerName">
            <summary>
            The space reservation manager name for statement completion.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseSpaceReservationManagerNames.SignatureHelpSpaceReservationManagerName">
            <summary>
            The space reservation manager name for signature help.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseSpaceReservationManagerNames.QuickInfoSpaceReservationManagerName">
            <summary>
            The space reservation manager name for Quick Info.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.IntellisenseSpaceReservationManagerNames.SmartTagSpaceReservationManagerName">
            <summary>
            The space reservation manager name for smart tags.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IParameter">
            <summary>
            Represents an individual parameter description inside the description of a signature.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IParameter.Signature">
            <summary>
            Gets the signature of which this parameter is a part.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IParameter.Name">
            <summary>
            Gets the name of this parameter. 
            </summary>
            <remarks>
            This is displayed to identify the parameter.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IParameter.Documentation">
            <summary>
            Gets the documentation associated with the parameter.  
            </summary>
            <remarks>
            This is displayed to describe
            the parameter.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IParameter.Locus">
            <summary>
            Gets the text location of this parameter relative to the signature's content.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IParameter.PrettyPrintedLocus">
            <summary>
            Gets the text location of this parameter relative to the signature's pretty-printed content.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter">
            <summary>
            Defines an IntelliSense presenter that is rendered as a popup within an
            <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.SurfaceElement">
            <summary>
            Gets the WPF <see cref="T:System.Windows.UIElement"/> that the presenter wants to be displayed inside a
            <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> popup.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.SurfaceElementChanged">
            <summary>
            Occurs when the WPF SurfaceElement is changed.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.PresentationSpan">
            <summary>
            Gets the <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> to which this presenter is related.  
            </summary>
            <remarks>
            This property is used to determine where to
            place the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> popup inside of which the presenter's
            SurfaceElement is hosted.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.PresentationSpanChanged">
            <summary>
            Occurs when the PresentationSpan property changes.  
            </summary>
            <remarks>
            This is the way popup presenters signal that they should be moved.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.PopupStyles">
            <summary>
            Gets a set of flags that determine the popup style.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.PopupStylesChanged">
            <summary>
            Occurs when the PopupStyles property changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.SpaceReservationManagerName">
            <summary>
            Gets the name of the space reservation manager that should be used to create popups for this presenter.  
            </summary>
            <remarks>
            Space reservation
            managers can be ordered, thus ensuring predictable popup placement.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IPopupIntellisensePresenter.Opacity">
            <summary>
            Gets or sets the opacity of this popup presenter.  
            </summary>
            <remarks>
            The presenter should use this property to set the
            opacity of its surface element and of any other text-obscuring UI elements it has provided.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoBroker">
            <summary>
            Defines a Quick Info broker.  
            </summary>
            <remarks>
            The broker is responsible for triggering Quick Info sessions
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoBroker.IsQuickInfoActive(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Determines whether there is at least one active Quick Info session in the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> for which Quick Info session status is to be determined.</param>
            <returns>
            <c>true</c> if there is at least one active Quick Info session over the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>, <c>false</c>
            otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoBroker.TriggerQuickInfo(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Triggers Quick Info at the position of the caret in the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.  
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> for which Quick Info is to be triggered.</param>
            <returns>A valid Quick Info session, or null if none could be created.</returns>
            <remarks>
            Quick Info is triggered in the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> to which this
            broker is attached.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoBroker.TriggerQuickInfo(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.Boolean)">
            <summary>
            Triggers Quick Info at the specified position in the buffer, either tracking or not tracking the mouse.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> for which Quick Info is to be triggered.</param>
            <param name="triggerPoint">
            The <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint"/> in the text buffer at which Quick Info should be triggered.
            </param>
            <param name="trackMouse">
            <c>true</c> if the session should be dismissed when the mouse leaves the applicability span of the session,
            <c>false</c> otherwise.
            </param>
            <returns>A valid Quick Info session, or null if none could be created.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoBroker.CreateQuickInfoSession(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.Boolean)">
            <summary>
            Creates but does not start a Quick Info session at the specified location in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/>.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> for which a Quick Info should be created.</param>
            <param name="triggerPoint">
            The <see cref="T:Microsoft.VisualStudio.Text.ITrackingPoint"/> in the text buffer at which Quick Info should be triggered.
            </param>
            <param name="trackMouse">
            <c>true</c> if the session should be auto-dismissed when the mouse leaves the applicability span of the session,
            otherwise <c>false</c>.
            </param>
            <returns>A valid Quick Info session, or null if none could be created.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoBroker.GetSessions(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets the set of active Quick Info sessions for the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> in which this broker operates.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> for which Quick Info sessions should be returned.</param>
            <returns>The list of valid Quick Info sessions active over the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession">
            <summary>
            Defines an IntelliSense session used to display Quick Info information.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession.QuickInfoContent">
            <summary>
            Gets the content that will be displayed by this session.  
            </summary>
            <remarks>
            Several types of content are supported, including strings,
            <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> instances, and <see cref="T:System.Windows.UIElement"/> instances.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession.ApplicableToSpan">
            <summary>
            Gets the applicability span for this session.  
            </summary>
            <remarks>
            The applicability span is the span of text in the <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> to which this
            session pertains. The default Quick Info presenter renders a popup near this location. If this session tracks the
            mouse, the session will be dismissed when the mouse leaves this <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/>.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession.ApplicableToSpanChanged">
            <summary>
            Occurs when the ApplicableToSpan property on this session changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession.TrackMouse">
            <summary>
            Determines whether this session tracks the mouse.  
            </summary>
            <remarks>
            When the session tracks the mouse, it will be dismissed
            when the mouse pointer leaves the applicability span for this session.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSource">
            <summary>
            Defines a QuickInfo provider, which acts as a provider of QuickInfo information over a text buffer.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSource.AugmentQuickInfoSession(Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession,System.Collections.Generic.IList{System.Object},Microsoft.VisualStudio.Text.ITrackingSpan@)">
            <summary>
            Determines which pieces of QuickInfo content should be part of the specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession"/>.
            </summary>
            <param name="session">The session for which completions are to be computed.</param>
            <param name="quickInfoContent">The QuickInfo content to be added to the session.</param>
            <param name="applicableToSpan">The <see cref="T:Microsoft.VisualStudio.Text.ITrackingSpan"/> to which this session applies.</param>
            <remarks>
            Each applicable <see cref="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSource.AugmentQuickInfoSession(Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession,System.Collections.Generic.IList{System.Object},Microsoft.VisualStudio.Text.ITrackingSpan@)"/> instance will be called in-order to (re)calculate a
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession"/>. Objects can be added to the session by adding them to the quickInfoContent collection
            passed-in as a parameter.  In addition, by removing items from the collection, a source may filter content provided by
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSource"/>s earlier in the calculation chain.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSourceProvider">
            <summary>
            Describes a factory of Quick Info providers.  
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IQuickInfoSourceProvider))]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSourceProvider.TryCreateQuickInfoSource(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Creates a Quick Info provider for the specified context.
            </summary>
            <param name="textBuffer">The text buffer for which to create a provider.</param>
            <returns>A valid <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSource"/> instance, or null if none could be created.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISignature">
            <summary>
            Represents an individual signature displayed in a tool, such as the signature help tool.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignature.ApplicableToSpan">
            <summary>
            Gets the span of text in the buffer to which this signature help is applicable.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignature.Content">
            <summary>
            Gets the content of the signature, including all the characters to be displayed.  
            </summary>
            <remarks>
            This text may appear in a text view, and can be colored using a standard classifier mechanism.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignature.PrettyPrintedContent">
            <summary>
            Gets the content of the signature, pretty-printed into a form suitable for display on-screen.
            </summary>
            <remarks>
            Pretty-printed signatures are usually displayed in width-constrained environments when the regular signature content
            cannot be displayed on one line.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignature.Documentation">
            <summary>
            Gets the content of the documentation associated with this signature.  
            </summary>
            <remarks>
            This text may appear
            alongside the signature in an IntelliSense tool.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignature.Parameters">
            <summary>
            Gets the list of parameters that this signature knows about.  
            </summary>
            <remarks>
            Each parameter has information relating to its text position
            within the signature string.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignature.CurrentParameter">
            <summary>
            Gets the current parameter for this signature.  
            </summary>
            <remarks>
            When the caret is within the signature's applicability
            span, this value is the parameter over which the caret is positioned. When the caret is not within the signature's
            applicability span, this value is undefined.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.ISignature.CurrentParameterChanged">
            <summary>
            Occurs when the current parameter changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpBroker">
            <summary>
            Defines the signature help broker, which is the primary component of the signature help process.  
            </summary>
            <remarks>
            The broker is responsible for
            handling each signature help session from beginning to end. IntelliSense controllers
            request this broker to trigger or dismiss signature help. The broker can also be used by other components to determine the
            state of signature help or to trigger the process.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpBroker.TriggerSignatureHelp(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Begins the process of signature help at the position of the caret.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> over which to trigger signature help.</param>
            <returns>A valid signature help session. May be null if no session could be created.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpBroker.TriggerSignatureHelp(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.Boolean)">
            <summary>
            Starts the process of signature help at the specified point.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> over which to trigger signature help.</param>
            <param name="triggerPoint">The point in the text buffer at which signature help is requested.</param>
            <param name="trackCaret">
            <c>true</c> if this session should track the caret, <c>false</c> otherwise. When the caret is tracked,
            the only items to be displayed are those whose applicability
            span contains the caret.
            </param>
            <returns>A valid signature help session. May be null if no session could be created.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpBroker.CreateSignatureHelpSession(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Text.ITrackingPoint,System.Boolean)">
            <summary>
            Creates a signature help session without starting it.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> over which signature help is requested.</param>
            <param name="triggerPoint">The point in the text buffer at which signature help is requested.</param>
            <param name="trackCaret">
            <c>true</c> if this session should track the caret, <c>false</c> otherwise. When the caret is tracked,
            the only items to be displayed are those whose applicability
            span contains the caret.
            </param>
            <returns>A valid, unstarted signature help session. May be null if no session could be created.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpBroker.DismissAllSessions(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Dismisses any active signature help sessions in this broker's <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>. 
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> over which all signature help sessions should be dismissed.</param>
            <remarks>
            This method is valid only when called while signature help is active.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpBroker.IsSignatureHelpActive(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Determines whether signature help is active.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> over signature help status should be determined.</param>
            <returns>
            <c>true</c> if there is at least one signature help session over the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>, <c>false</c>
            otherwise.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpBroker.GetSessions(Microsoft.VisualStudio.Text.Editor.ITextView)" -->
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession">
            <summary>
            Defines an IntelliSense session used for displaying signature help.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession.Signatures">
            <summary>
            Gets the set of valid signatures for this session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession.SelectedSignature">
            <summary>
            Gets the signature from among the set of valid signatures that is currently selected.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession.SelectedSignatureChanged">
            <summary>
            Occurs when the SelectedSignature property changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSource">
            <summary>
            Defines a provider of signature help information that is used in the IntelliSense process.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSource.AugmentSignatureHelpSession(Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession,System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.ISignature})">
            <summary>
            Determines which <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignature"/>s should be part of the specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession"/>.
            </summary>
            <param name="session">The session for which completions are to be computed.</param>
            <param name="signatures">The set of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignature"/>s to be added to the session.</param>
            <remarks>
            Each applicable <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSource.AugmentSignatureHelpSession(Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession,System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.ISignature})"/> instance will be called in-order to
            (re)calculate a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession"/>.  <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignature"/>s can be added to the session by adding
            them to the signatures collection passed-in as a parameter.  In addition, by removing items from the collection, a
            source may filter <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignature"/>s provided by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSource"/>s earlier in the calculation
            chain.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSource.GetBestMatch(Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession)">
            <summary>
            Computes the best matching <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignature"/> instance for the given signature help session. Only the highest-
            priority signature help provider is asked for this information.
            </summary>
            <param name="session">
            The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession"/> for which the best matching <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignature"/> should be determined.
            </param>
            <returns>
            A valid <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignature"/> that is also a member of the Signatures collection of the specified
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession"/>. It can return null if no best match could be determined, 
            and the next highest-priority signature help provider will be asked to determine the best match.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSourceProvider">
            <summary>
            Defines an extension used to create signature help providers from a given <see cref="T:Microsoft.VisualStudio.Text.ITextBuffer"/> opened in a given
            context.
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(ISignaturehelpSourceProvider))]
            Component exporters must add at least one ContentType attribute to specify the
            content types for which the component is valid, and an Order to specify its order in the chain of signature help providers.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSourceProvider.TryCreateSignatureHelpSource(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Attempts to create a signature help provider for the given text buffer opened in the given context.
            </summary>
            <param name="textBuffer">The text buffer for which to create a signature help provider.</param>
            <returns>A valid signature help provider, or null if none could be created.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISmartTagAction">
            <summary>
            Defines a smart tag action.  
            </summary>
            <remarks>
            Smart tag sessions contain zero or more actions, which are provided by smart tag sources.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISmartTagAction.Invoke">
            <summary>
            A callback used to invoke the smart tag action.  
            </summary>
            <remarks>
            You should implement this method to perform the action
            when this method is called.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagAction.ActionSets">
            <summary>
            Gets the list of smart tag action sets contained inside this smart tag action.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagAction.Icon">
            <summary>
            Gets image information that is displayed as an icon alongside the display text in the default smart tag.
            presenter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagAction.DisplayText">
            <summary>
            Gets the text that is displayed in the default smart tag presenter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagAction.IsEnabled">
            <summary>
            Determines whether the smart tag action is enabled. By default, disabled smart tags are
            rendered but not invokable.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ITextFormattable">
            <summary>
            Defines a contract for implementors to override the text formatting properties for an object.
            </summary>
            <remarks>
            This will mainly be implemented by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.Completion"/> instances that wish to override their textual presentation in
            the statement completion presenter.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ITextFormattable.GetTextRunProperties(System.Windows.Media.TextFormatting.TextRunProperties)">
            <summary>
            Gets a set of <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> that will override the "default" <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> used to
            display this object's text.
            </summary>
            <param name="defaultTextRunProperties">
            The set of <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> that would have been used to present this object had no overriding taken
            place.
            </param>
            <returns>A set of <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> that should be used to display this object's text.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Microsoft.VisualStudio.Language.Intellisense.ITextFormattable.GetHighlightedTextRunProperties(System.Windows.Media.TextFormatting.TextRunProperties)" -->
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.QuickInfoPresenterStyle">
            <summary>
             Defines a set of properties that will be used to style the default QuickInfo presenter.
            </summary>
             <remarks>
             This is a MEF component part, and should be exported with the following attributes:
             [Export(typeof(QuickInfoPresenterStyle))]
             [ContentType]
             [Name]
             [Order]
             All exports of this component part should be ordered after the "default" QuickInfo presenter style.  At a minimum, this
             means adding [Order(After="default")] to the export metadata.
             </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.QuickInfoPresenterStyle.BorderBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the borders in the completion presenter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.QuickInfoPresenterStyle.BackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the background of the completion presenter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.QuickInfoPresenterStyle.QuickInfoAppearanceCategory">
            <summary>
            Gets a string that identifies the appearance category for the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>s displayed in the default
            QuickInfo presenter.
            </summary>
            <remarks>
            Manipulating this value will change the classification format map used in the translation of classification types to
            classification formats in the QuickInfo <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.QuickInfoPresenterStyle.AreGradientsAllowed">
            <summary>
            Gets a value determining whether or not gradients should be used in the presentation of a
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.IQuickInfoSession"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle">
            <summary>
             Defines a set of properties that will be used to style the default signature help presenter.
            </summary>
             <remarks>
             This is a MEF component part, and should be exported with the following attributes:
             [Export(typeof(SignatureHelpPresenterStyle))]
             [ContentType]
             [Name]
             [Order]
             All exports of this component part should be ordered after the "default" signature help presenter style.  At a minimum,
             this means adding [Order(After="default")] to the export metadata.
             </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.ForegroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the foreground of the signature help presenter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.BorderBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the borders in the signature help presenter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.BackgroundBrush">
            <summary>
            Gets a <see cref="T:System.Windows.Media.Brush"/> that will be used to paint the background of the signature help presenter.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.SignatureAppearanceCategory">
            <summary>
            Gets a string that identifies the appearance category for the <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>s displayed in the default
            signature help presenter.
            </summary>
            <remarks>
            Manipulating this value will change the classification format map used in the translation of classification types to
            classification formats in the signature <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.UpDownSignatureTextRunProperties">
            <summary>
            Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> that will be used to format the text of up/down signature spinner.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.SignatureDocumentationTextRunProperties">
            <summary>
            Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> that will be used to format the text of the signature documentation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.CurrentParameterNameTextRunProperties">
            <summary>
            Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> that will be used to format the text of the current parameter name.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.CurrentParameterDocumentationTextRunProperties">
            <summary>
            Gets a <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties"/> that will be used to format the text of the current parameter documentation.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SignatureHelpPresenterStyle.AreGradientsAllowed">
            <summary>
            Gets a value determining whether or not gradients should be used in the presentation of a
            <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISignatureHelpSession"/>.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.SmartTag">
            <summary>
            A tag used to contain actions that may be performed on a span of text. This tag is consumed by the Intellisense
            infrastructure and will spawn smart tag Intellisense sessions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.SmartTag.#ctor(Microsoft.VisualStudio.Language.Intellisense.SmartTagType,System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Language.Intellisense.SmartTagActionSet})">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SmartTag"/>.
            </summary>
            <param name="smartTagType">The type of smart tag session that should be created.</param>
            <param name="actionSets">The set of actions that should be a part of the smart tag session.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SmartTag.SmartTagType">
            <summary>
            The type of smart tag session that should be created.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SmartTag.ActionSets">
            <summary>
            The set of actions that should be a part of the smart tag session.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.SmartTagActionSet">
            <summary>
            Represents a set of smart tag actions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.SmartTagActionSet.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{Microsoft.VisualStudio.Language.Intellisense.ISmartTagAction})">
            <summary>
            Constructions a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SmartTagActionSet"/>.
            </summary>
            <param name="actions"></param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SmartTagActionSet.Actions">
            <summary>
            The collection of smart tag actions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISmartTagBroker">
            <summary>
            Defines a smart tag broker, which is responsible for triggering smart tags. Components call methods on the
            broker in order to trigger smart tags.
            </summary>
            <remarks>
            To create a smart tag session, use <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ISmartTagBroker.CreateSmartTagSession(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Language.Intellisense.SmartTagType,Microsoft.VisualStudio.Text.ITrackingPoint,Microsoft.VisualStudio.Language.Intellisense.SmartTagState)"/>,
            add some context data into the session's property bag, and call <see cref="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Start"/>.
            During the <see cref="M:Microsoft.VisualStudio.Language.Intellisense.IIntellisenseSession.Start"/> call, the session is calculated
            for the first time, and in <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSource.AugmentSmartTagSession(Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession,System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.SmartTagActionSet})"/> the smart tag source
            can return actions that will be added to the <see cref="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.ActionSets"/>.  <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSource"/>s
            should also set the <see cref="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.ApplicableToSpan"/> property based on the context data that was earlier added
            to the session's property bag. If, during any smart tag session calculation,
            the session doesn't get any actions or an applicability span, then the session will be immediately dismissed.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISmartTagBroker.CreateSmartTagSession(Microsoft.VisualStudio.Text.Editor.ITextView,Microsoft.VisualStudio.Language.Intellisense.SmartTagType,Microsoft.VisualStudio.Text.ITrackingPoint,Microsoft.VisualStudio.Language.Intellisense.SmartTagState)">
            <summary>
            Creates a smart tag session for smart tags of the specified type at the specified location.
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> over which to create a smart tag session.</param>
            <param name="type">The type of smart tag that should be created.</param>
            <param name="triggerPoint">The location in the buffer where the smart tag session should be created.</param>
            <param name="state">The initial state of the smart tag session.</param>
            <returns>A valid smart tag session or null.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISmartTagBroker.GetSessions(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Gets the list of currently-active smart tag sessions for the textview and subject buffer over which the broker is active
            </summary>
            <param name="textView">The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> over which to retrieve a list of smart tag sessions.</param>
            <returns>A list of smart tag sessions for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISmartTagBroker.IsSmartTagActive(Microsoft.VisualStudio.Text.Editor.ITextView)">
            <summary>
            Determines whether a smart tag is active.
            </summary>
            <param name="textView">
            The <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/> over which to determine if there are any active smart tag sessions.
            </param>
            <returns>
            <c>true</c> if there is at least one smart tag session for the specified <see cref="T:Microsoft.VisualStudio.Text.Editor.ITextView"/>, <c>false</c>otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession">
            <summary>
            Defines a smart tag session, which encapsulates all the information about a particular invocation of the smart tag system.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.ApplicableToSpan">
            <summary>
            Gets or sets the span to which this session is applicable in the text buffer. This is used to position any popups that are rendered by smart tag
            presenters.
            </summary>
            <remarks>
            If, during smart tag session calculation, no smart tag source sets this property then the session will be dismissed.
            </remarks>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.ApplicableToSpanChanged">
            <summary>
            Occurs when the <see cref="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.ApplicableToSpan"/> property changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.TagSpan">
            <summary>
            The span over which the tag should be rendered
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.TagSpanChanged">
            <summary>
            Raised when the TagSpan property changes.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.ActionSets">
            <summary>
            Gets the collection of actions that this session displays.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.TagText">
            <summary>
            Gets or sets the text to be displayed with the tag.  
            </summary>
            <remarks>
            This text is independent of any individual action. The default presenter
            displays this text as a tooltip alongside the tag in its intermediate state.
            </remarks>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.Type">
            <summary>
            The type of this smart tag session.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.State">
            <summary>
            Gets or sets the current state of this session. Collapsed sessions are rendered as a small colored rectangle by the
            default presenter. Expanded sessions are rendered as a menu containing all of the valid actions.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.StateChanged">
            <summary>
            Fired when the state of this session changes
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.IconSource">
            <summary>
            Gets/Sets an icon that could be used in the display of this session.  The default presenter renders this icon in the
            smart tag button which appears when hovering over the tag.
            </summary>
        </member>
        <member name="E:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession.IconSourceChanged">
            <summary>
            Fired when the session's icon changes.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSource">
            <summary>
            Defines a provider of smart tag data.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSource.AugmentSmartTagSession(Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession,System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.SmartTagActionSet})">
            <summary>
            Determines which <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SmartTagActionSet"/>s should be part of the specified <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession"/>.
            </summary>
            <param name="session">The session for which completions are to be computed.</param>
            <param name="smartTagActionSets">The set of the <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SmartTagActionSet"/>s to be added to the session.</param>
            <remarks>
            Each applicable <see cref="M:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSource.AugmentSmartTagSession(Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession,System.Collections.Generic.IList{Microsoft.VisualStudio.Language.Intellisense.SmartTagActionSet})"/> instance will be called in-order to (re)calculate
            a <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSession"/>.  <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SmartTagActionSet"/>s can be added to the session by adding them to the
            smartTagActionSets collection passed-in as a parameter.  In addition, by removing items from the collection, a source
            may filter <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SmartTagActionSet"/>s provided by <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSource"/>s earlier in the calculation chain.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSourceProvider">
            <summary>
            Defines a provider of a smart tag source. 
            </summary>
            <remarks>
            This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(ISmartTagSourceProvider))]
            [Order]
            [Name]
            [ContentType]
            You must specify the ContentType so that the source provider creates sources for buffers of content types that it
            recognizes, and Order to specify the order in which the sources are called.
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSourceProvider.TryCreateSmartTagSource(Microsoft.VisualStudio.Text.ITextBuffer)">
            <summary>
            Attempts to create a smart tag source for the specified buffer.
            </summary>
            <param name="textBuffer">The text buffer for which to create a smart tag source.</param>
            <returns>The <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ISmartTagSource"/>, or null if no smart tag source could be created.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IUIElementProvider`2">
            <summary>
            Defines the provider of WPF UIElements for objects of a certain type, for a specified context.
            </summary>
            <typeparam name="TItem">The type of the item.</typeparam>
            <typeparam name="TContext">The type of the context.</typeparam>
            <remarks>
            This is a MEF component part, and should be exported with the following attribute:
            [Export(typeof(IUIElementProvider&lt;T&gt;))]
            [Name("")]
            [Order()]
            [ContentType("")]
            </remarks>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IUIElementProvider`2.GetUIElement(`0,`1,Microsoft.VisualStudio.Language.Intellisense.UIElementType)">
            <summary>
            Gets a UIElement to display an item for teh specified the context.
            </summary>
            <param name="itemToRender">The item for which to return a UIElement.</param>
            <param name="context">The context in which the item is to be rendered.</param>
            <param name="elementType">The type of UIElement to be returned.</param>
            <returns>A valid WPF UIElement, or null if none could be created.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.IWpfKeyboardTrackingService">
            <summary>
            Defines a MEF service responsible for tracking the keyboard in hosts of the WPF editor.  Keyboard tracking is necessary as
            some hosts (such as VisualStudio) do their own keyboard handling, causing inconsistent behavior of WPF elements, even when
            they have keyboard focus.  By tracking the keyboard, all keyboard events will be routed to WPF first, giving focused WPF
            controls a shot at handling keyboard events.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IWpfKeyboardTrackingService.BeginTrackingKeyboard(System.IntPtr,System.Collections.Generic.IList{System.UInt32})">
            <summary>
            Starts tracking the keyboard.  Once called, all keyboard events will be routed to WPF first, before the host application
            sees them.
            </summary>
            <param name="handle">A valid Win32 window handle (HWND) to which messages should be redirected</param>
            <param name="messagesToCapture">A list of Win32 messages to redirect to the specified window handle</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.IWpfKeyboardTrackingService.EndTrackingKeyboard">
            <summary>
            Stops tracking the keyboard.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.SelectedSignatureChangedEventArgs">
            <summary>
            Provides information about selected signature changes in signature help IntelliSense sessions.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.SelectedSignatureChangedEventArgs.#ctor(Microsoft.VisualStudio.Language.Intellisense.ISignature,Microsoft.VisualStudio.Language.Intellisense.ISignature)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.SelectedSignatureChangedEventArgs"/>.
            </summary>
            <param name="previousSelectedSignature">The signature that was previously selected.</param>
            <param name="newSelectedSignature">The signature that is currently selected.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SelectedSignatureChangedEventArgs.PreviousSelectedSignature">
            <summary>
            Gets the signature that was previously selected.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.SelectedSignatureChangedEventArgs.NewSelectedSignature">
            <summary>
            Gets the signature that is currently selected.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.SmartTagState">
            <summary>
            The set of smart tag session states.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.SmartTagState.Collapsed">
            <summary>
            The session is rendered in collapsed mode, which in the default presenter is indicated by a small colored rectangle
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.SmartTagState.Intermediate">
            <summary>
            The session is neither collapsed nor expanded. In the default presenter, this is indicated by a button
            but no action menu.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.SmartTagState.Expanded">
            <summary>
            The session is rendered in expanded mode, which in the default presenter is indicated by a menu from which the user
            can select actions.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.SmartTagType">
            <summary>
            The set of smart tag session types.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.SmartTagType.Factoid">
            <summary>
            A general tag that is valid for a long period of time.  
            </summary>
            <remarks>
            This type of tag indicates 
            that an action may be performed on a region of text, and is displayed independently of user action.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.SmartTagType.Ephemeral">
            <summary>
            A tag that is valid only for a specific period of time.  
            </summary>
            <remarks>
            This type of tag is displayed in response to a modification of the
            buffer that could trigger additional actions, such as refactorings.
            </remarks>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup">
            <summary>
            Describes the different types of glyphs that can be displayed in the default completion tool implementation.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupClass">
            <summary>
            Describes symbols for classes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupConstant">
            <summary>
            Describes symbols for constants.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupDelegate">
            <summary>
            Describes symbols for delegates.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupEnum">
            <summary>
            Describes symbols for enumerations.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupEnumMember">
            <summary>
            Describes symbols for enumeration members.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupEvent">
            <summary>
            Describes symbols for events.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupException">
            <summary>
            Describes symbols for exceptions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupField">
            <summary>
            Describes symbols for fields.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupInterface">
            <summary>
            Describes symbols for interfaces.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupMacro">
            <summary>
            Describes symbols for macros.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupMap">
            <summary>
            Describes symbols for maps.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupMapItem">
            <summary>
            Describes symbols for map items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupMethod">
            <summary>
            Describes symbols for methods.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupOverload">
            <summary>
            Describes symbols for overloads.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupModule">
            <summary>
            Describes symbols for modules.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupNamespace">
            <summary>
            Describes symbols for namespaces.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupOperator">
            <summary>
            Describes symbols for operators.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupProperty">
            <summary>
            Describes symbols for properties.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupStruct">
            <summary>
            Describes symbols for structs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupTemplate">
            <summary>
            Describes symbols for templates.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupTypedef">
            <summary>
            Describes symbols for typedefs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupType">
            <summary>
            Describes symbols for types.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupUnion">
            <summary>
            Describes symbols for unions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupVariable">
            <summary>
            Describes symbols for variables.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupValueType">
            <summary>
            Describes symbols for value types.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupIntrinsic">
            <summary>
            Describes intrinsic symbols.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupJSharpMethod">
            <summary>
            Describes symbols for J# methods.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupJSharpField">
            <summary>
            Describes symbols for J# fields.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupJSharpClass">
            <summary>
            Describes symbols for J# classes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupJSharpNamespace">
            <summary>
            Describes symbols for J# namespaces.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupJSharpInterface">
            <summary>
            Describes symbols for J# interfaces.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupError">
            <summary>
            Describes symbols for errors.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphBscFile">
            <summary>
            Describes symbols for BSC files.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphAssembly">
            <summary>
            Describes symbols for assemblies.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphLibrary">
            <summary>
            Describes symbols for libraries.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphVBProject">
            <summary>
            Describes symbols for VB projects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphCoolProject">
            <summary>
            Describes symbols for C# projects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphCppProject">
            <summary>
            Describes symbols for C++ projects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphDialogId">
            <summary>
            Describes symbols for dialog identifiers.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphOpenFolder">
            <summary>
            Describes symbols for open folders.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphClosedFolder">
            <summary>
            Describes symbols for closed folders.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphArrow">
            <summary>
            Describes arrow symbols.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphCSharpFile">
            <summary>
            Describes symbols for C# files.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphCSharpExpansion">
            <summary>
            Describes symbols for C# expansions.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphKeyword">
            <summary>
            Describes symbols for keywords.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphInformation">
            <summary>
            Describes symbols for information.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphReference">
            <summary>
            Describes symbols for references.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphRecursion">
            <summary>
            Describes symbols for recursion.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlItem">
            <summary>
            Describes symbols for XML items.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphJSharpProject">
            <summary>
            Describes symbols for J# projects.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphJSharpDocument">
            <summary>
            Describes symbols for J# documents.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphForwardType">
            <summary>
            Describes symbols for forwarded types.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphCallersGraph">
            <summary>
            Describes symbols for callers graphs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphCallGraph">
            <summary>
            Describes symbols for call graphs.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphWarning">
            <summary>
            Describes symbols for build warnings.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphMaybeReference">
            <summary>
            Describes symbols for something that may be a reference.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphMaybeCaller">
            <summary>
            Describes symbols for something that may be a caller.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphMaybeCall">
            <summary>
            Describes symbols for something that may be a call.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphExtensionMethod">
            <summary>
            Describes symbols for extension methods.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphExtensionMethodInternal">
            <summary>
            Describes symbols for internal extension methods.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphExtensionMethodFriend">
            <summary>
            Describes symbols for friend extension methods.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphExtensionMethodProtected">
            <summary>
            Describes symbols for protected extension methods.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphExtensionMethodPrivate">
            <summary>
            Describes symbols for private extension methods.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphExtensionMethodShortcut">
            <summary>
            Describes symbols for extension method shortcuts.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlAttribute">
            <summary>
            Describes symbols for XML attributes.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlChild">
            <summary>
            Describes symbols for child XML elements.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlDescendant">
            <summary>
            Describes symbols for descendant XML elements.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlNamespace">
            <summary>
            Describes symbols for XML namespaces.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlAttributeQuestion">
            <summary>
            Describes symbols with a question mark for XML attributes. 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlAttributeCheck">
            <summary>
            Describes symbols with a check mark for XML attributes. 
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlChildQuestion">
            <summary>
            Describes symbols with a question mark for XML child elements.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlChildCheck">
            <summary>
            Describes symbols with a check mark for XML child elements.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlDescendantQuestion">
            <summary>
            Describes symbols with a question mark for XML descendant elements.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphXmlDescendantCheck">
            <summary>
            Describes symbols with a check mark for XML descendant elements.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphGroup.GlyphGroupUnknown">
            <summary>
            Describes symbols for unknown types.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem">
            <summary>
            Describes icons or glyphs that are used in statement completion.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem.GlyphItemPublic">
            <summary>
            Describes a public symbol.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem.GlyphItemInternal">
            <summary>
            Describes an internal symbol.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem.GlyphItemFriend">
            <summary>
            Describes a friend symbol.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem.GlyphItemProtected">
            <summary>
            Describes a protected symbol.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem.GlyphItemPrivate">
            <summary>
            Describes a private symbol.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem.GlyphItemShortcut">
            <summary>
            Describes a shortcut symbol.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.StandardGlyphItem.TotalGlyphItems">
            <summary>
            Describes a symbol that has all (or none) of the standard attributes.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Microsoft.VisualStudio.Language.Intellisense.UIElementType" -->
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.UIElementType.Small">
            <summary>
            Small UIElement representing the object in question.
            </summary>
            <remarks>Small UIElements will most likely be placed in a list alongside other small UIElements.</remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.UIElementType.Large">
            <summary>
            Large UIElement representing the object in question.
            </summary>
            <remarks>
            Large UIElements will most likely be displayed on their own and should present detailed information about the object in
            question.
            </remarks>
        </member>
        <member name="F:Microsoft.VisualStudio.Language.Intellisense.UIElementType.Tooltip">
            <summary>
            UIElement to be hosted in a tooltip representing the object in question.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Language.Intellisense.ValueChangedEventArgs`1">
            <summary>
            Provides information about value changes of all kinds.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
        </member>
        <member name="M:Microsoft.VisualStudio.Language.Intellisense.ValueChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of <see cref="T:Microsoft.VisualStudio.Language.Intellisense.ValueChangedEventArgs`1"/> with the new and old values of a property.
            </summary>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ValueChangedEventArgs`1.OldValue">
            <summary>
            Gets the old value.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Language.Intellisense.ValueChangedEventArgs`1.NewValue">
            <summary>
            Gets the new value.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\VisualStudio\VS10RTM\VisualStudioIntegration\Common\Assemblies\v4.0\Microsoft.VisualStudio.Data.Services.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualStudio.Data.Services</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualStudio.Data.Services.DataConnectionDialogFilterCallback">
      <summary>Represents the method that is called when data sources and providers are being filtered in the data connection dialog box.</summary>
      <returns>true if the data provider is available for the data source; false if the data provider is not available and should be filtered out for the data source.</returns>
      <param name="source">The GUID of the data source.</param>
      <param name="provider">The GUID of the data provider.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.DataConnectionMessageReceivedEventArgs">
      <summary>Encapsulates the event data for the <see cref="E:Microsoft.VisualStudio.Data.Services.IVsDataConnectionEvents.MessageReceived" /> event for a data connection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.DataConnectionMessageReceivedEventArgs.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.DataConnectionMessageReceivedEventArgs" /> class with a message text.</summary>
      <param name="message">The text of the message.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.DataConnectionMessageReceivedEventArgs.Message">
      <summary>Gets the text message.</summary>
      <returns>A <see cref="T:System.String" /> value representing the text message.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.DataConnectionOpenCanceledException">
      <summary>Represents the exception thrown when a data connection open call is canceled.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.DataConnectionOpenCanceledException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.DataConnectionOpenCanceledException" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.DataConnectionOpenCanceledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.DataConnectionOpenCanceledException" /> class with serialized data.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.DataConnectionOpenCanceledException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.DataConnectionOpenCanceledException" /> class with the specified error message.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.DataConnectionOpenCanceledException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.DataConnectionOpenCanceledException" /> class with the specified error message and the inner exception.</summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or null if no inner exception is specified.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.DataConnectionState">
      <summary>Specifies the current state of the data connection.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.DataConnectionState.Closed">
      <summary>The data connection is closed.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.DataConnectionState.Open">
      <summary>The data connection is open.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.DataConnectionState.Broken">
      <summary>The data connection was previously open, but has been broken for unknown reasons.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.DataConnectionStateChangedEventArgs">
      <summary>Encapsulates event data for the <see cref="E:Microsoft.VisualStudio.Data.Services.IVsDataConnectionEvents.StateChanged" /> event for a data connection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.DataConnectionStateChangedEventArgs.#ctor(Microsoft.VisualStudio.Data.Services.DataConnectionState,Microsoft.VisualStudio.Data.Services.DataConnectionState)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.DataConnectionStateChangedEventArgs" /> class with the old and new connection states.</summary>
      <param name="oldState">A value from <see cref="T:Microsoft.VisualStudio.Data.Services.DataConnectionState" /> representing the state the data connection was in before the last state change.</param>
      <param name="newState">A value from <see cref="T:Microsoft.VisualStudio.Data.Services.DataConnectionState" /> representing the new state of the data connection.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.DataConnectionStateChangedEventArgs.NewState">
      <summary>Gets the new state of the data connection.</summary>
      <returns>A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.DataConnectionState" /> enumeration indicating the new state of the data connection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.DataConnectionStateChangedEventArgs.OldState">
      <summary>Gets the state the data connection was in before the last state change.</summary>
      <returns>A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.DataConnectionState" /> enumeration indicating the state the data connection was in before the last state change.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.DataExplorerNodeEventArgs">
      <summary>Encapsulates the event data for the following events: <see cref="E:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection.NodeInserted" />, <see cref="E:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection.NodeChanged" />, <see cref="E:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection.NodeRemoving" />, and <see cref="E:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection.NodeExpandedOrRefreshed" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.DataExplorerNodeEventArgs.#ctor(Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.DataExplorerNodeEventArgs" /> class with a data explorer node.</summary>
      <param name="node">An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode" /> object representing a node in the data explorer.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.DataExplorerNodeEventArgs.Node">
      <summary>Gets an object representing a node in the data explorer.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode" /> object representing a node in the data explorer.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.DataMappedObjectTypeAttribute">
      <summary>Specifies that an interface or class represents a mapped object type. A mapped object type is an API that exposes a strongly-typed view of a particular underlying data source–specific object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.DataMappedObjectTypeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.DataMappedObjectTypeAttribute" /> class, specifying the type name.</summary>
      <param name="typeName">The name of the generic type that is mapped.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.DataMappedObjectTypeAttribute.AvailableRestrictions">
      <summary>Gets or sets all the restrictions that are available for the current type.</summary>
      <returns>A string value containing all the restrictions that are available for the current type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.DataMappedObjectTypeAttribute.AvailableRestrictionsList">
      <summary>Gets a list of all the restrictions that are available for the current type.</summary>
      <returns>A list of strings containing all the restrictions that are available for the current type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.DataMappedObjectTypeAttribute.ClassId">
      <summary>Gets or sets the class ID of the attribute.</summary>
      <returns>The class ID of this attribute.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.DataMappedObjectTypeAttribute.Identifier">
      <summary>Gets or sets the identifier name that uniquely identifies the current type.</summary>
      <returns>The identifier name that uniquely identifies the current type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.DataMappedObjectTypeAttribute.IdentifierList">
      <summary>Gets a list of identifiers that uniquely identify the current type.</summary>
      <returns>A list of identifier strings that uniquely identify the current type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.DataMappedObjectTypeAttribute.RequiredOrdering">
      <summary>Gets or sets the required ordering for the current mapped type.</summary>
      <returns>The required ordering for the current mapped type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.DataMappedObjectTypeAttribute.TypeName">
      <summary>Gets the name of the mapped type.</summary>
      <returns>The name of the mapped type.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.DataObjectAddedEventArgs">
      <summary>Encapsulates event data for the <see cref="E:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEvents.ObjectAdded" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.DataObjectAddedEventArgs.#ctor(System.String,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.DataObjectAddedEventArgs" /> class with the object type name and an array of identifier parts representing this data object.</summary>
      <param name="typeName">The name of the data object's type.</param>
      <param name="identifier">An array of identifier parts that identify the data object.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.DataObjectChangedEventArgs">
      <summary>Encapsulates event data for the <see cref="E:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEvents.ObjectChanged" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.DataObjectChangedEventArgs.#ctor(System.String,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.DataObjectChangedEventArgs" /> class with the object type name and an array of identifier parts representing the data object.</summary>
      <param name="typeName">The name of the data object's type.</param>
      <param name="identifier">An array of identifier parts that identify the data object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.DataObjectChangedEventArgs.#ctor(System.String,System.Object[],System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.DataObjectChangedEventArgs" /> class with the object type name, an array of identifier parts representing the data object, a collection of name/value pairs of property names and values, and another collection of name/value pairs for new property names and values.</summary>
      <param name="typeName">The name of the data object's type.</param>
      <param name="identifier">An array of identifier parts that identify the data object.</param>
      <param name="propertyValues">A collection of name/value pairs of property names and values. </param>
      <param name="newPropertyValues">A collection of name/value pairs for new property names and values</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.DataObjectChangedEventArgs.#ctor(System.String,System.Object[],System.Collections.Generic.IDictionary{System.String,System.Object},System.Object[],System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.DataObjectChangedEventArgs" /> class with the object type name, an array of identifier parts representing the data object, a collection of name/value pairs of property names and values, an array of new identifier parts representing the data object, and another collection of name/value pairs for new property names and values.</summary>
      <param name="typeName">The name of the data object's type.</param>
      <param name="identifier">An array of identifier parts that identify the data object.</param>
      <param name="propertyValues">A collection of name/value pairs of property names and values.</param>
      <param name="newIdentifier">An array of identifier parts that identify the new data object.</param>
      <param name="newPropertyValues">A collection of name/value pairs for new property names and values.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.DataObjectChangedEventArgs.#ctor(System.String,System.Object[],System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.DataObjectChangedEventArgs" /> class with the object type name, an array of identifier parts, and another array of new identifier parts representing this data object.</summary>
      <param name="typeName">The name of the data object's type.</param>
      <param name="identifier">An array of identifier parts that identify the data object.</param>
      <param name="newIdentifier">An array of new identifier parts that identify the data object.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.DataObjectChangedEventArgs.NewIdentifier">
      <summary>Gets a list of all new identifier parts that represent the data object.</summary>
      <returns>A list of objects representing all new identifier parts that represent the data object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.DataObjectChangedEventArgs.NewPropertyValues">
      <summary>Gets a collection of name/value pairs containing the new property names and values.</summary>
      <returns>A collection of name/value pairs containing the new property names and values.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.DataObjectChangedEventArgs.PropertyValues">
      <summary>Gets a collection of name/value pairs containing the existing property names and values.</summary>
      <returns>A collection of name/value pairs containing the existing property names and values.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.DataObjectDeletedEventArgs">
      <summary>Encapsulates event data for the <see cref="E:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEvents.ObjectDeleted" /> event.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.DataObjectDeletedEventArgs.#ctor(System.String,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.DataObjectDeletedEventArgs" /> class with the object type name and a list of identifier parts representing the data object.</summary>
      <param name="typeName">The name of the data object's type.</param>
      <param name="identifier">An array of identifier parts that identify the data object.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.DataObjectEventArgs">
      <summary>Represents the base class for the following other classes that contain data object event data: <see cref="T:Microsoft.VisualStudio.Data.Services.DataObjectAddedEventArgs" />, <see cref="T:Microsoft.VisualStudio.Data.Services.DataObjectChangedEventArgs" />, and <see cref="T:Microsoft.VisualStudio.Data.Services.DataObjectDeletedEventArgs" />.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.DataObjectEventArgs.#ctor(System.String,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.DataObjectEventArgs" /> class, specifying the object type name and a list of identifier parts representing the data object.</summary>
      <param name="typeName">The name of the data object's type.</param>
      <param name="identifier">An array of identifier parts that identify the data object.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.DataObjectEventArgs.Identifier">
      <summary>Gets a list of identifier parts for the data object.</summary>
      <returns>A list of identifier objects for the data object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.DataObjectEventArgs.TypeName">
      <summary>Gets the name of the data object type.</summary>
      <returns>A <see cref="T:System.String" /> value representing the name of the data object type.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat">
      <summary>Specifies the type of formatting required for the data object identifier string value. The formatting of the identifier depends on its intended use.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat.None">
      <summary>Specifies that no formatting is required.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat.Default">
      <summary>Specifies the default format.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat.WithQuotes">
      <summary>Specifies that quotation marks are required.</summary>
    </member>
    <member name="F:Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat.ForDisplay">
      <summary>Specifies the formatting suitable for the identifier's display as a label on a control.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.DataProtection">
      <summary>Represents the ability to encrypt and decrypt strings by using the Windows Data Protection API (DPAPI).</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.DataProtection.DecryptString(System.String)">
      <summary>Decrypts a specified string.</summary>
      <returns>The decrypted string.</returns>
      <param name="s">A string previously encrypted with a call to <see cref="M:Microsoft.VisualStudio.Data.DataProtection.EncryptString(System.String)" />.</param>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter is not in a valid format.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The decryption failed.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.DataProtection.EncryptString(System.String)">
      <summary>Encrypts a specified string.</summary>
      <returns>Returns the encrypted string.</returns>
      <param name="s">A string to encrypt.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The encryption failed.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection">
      <summary>Represents the interface for a data connection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnection.Clone">
      <summary>Creates a copy of the current data connection.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object representing an identical copy of the current instance of the data connection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnection.Clone(System.Boolean)">
      <summary>Creates a copy of the current data connection.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object representing an identical copy of the current instance of the data connection.</returns>
      <param name="suppressLocking">A Boolean value indicating whether the cloned data connection is a non-locking connection.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnection.Close">
      <summary>Closes the current data connection.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnection.ConnectionTimeout">
      <summary>Gets or sets the amount of time to wait to establish a connection before terminating the attempt and generating a time-out error.</summary>
      <returns>An integer representation of the allowable time-out period.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnection.CurrentThreadHasLock">
      <summary>Gets a value indicating whether the current thread has a lock on the data connection object.</summary>
      <returns>true if the current thread has a lock on the data connection object; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnection.DisplayConnectionString">
      <summary>Gets the connection string in which sensitive information, if present, is formatted for secure display.</summary>
      <returns>A <see cref="T:System.String" /> value representing the connection string in a format suitable for display purposes.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnection.EncryptedConnectionString">
      <summary>Gets an encrypted version of the connection string.</summary>
      <returns>A <see cref="T:System.String" /> value representing the connection string in encrypted form.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnection.EnsureConnected">
      <summary>Determines whether the current data connection is connected, and, if not, opens it.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnection.EquivalentTo(System.Guid,System.String,System.Boolean)">
      <summary>Indicates whether the given data connection information, as represented by the provider GUID and a connection string, is equivalent to the current instance of the data connection.</summary>
      <returns>true if the given data connection information is equivalent to the current instance; otherwise, false.</returns>
      <param name="provider">The GUID of the data provider.</param>
      <param name="connectionString">The connection string containing connection properties and values.</param>
      <param name="encryptedString">A Boolean value indicating whether the connection string is encrypted.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnection.GetLockedProviderObject">
      <summary>Retrieves the underlying locked data provider that supports the current data connection.</summary>
      <returns>The underlying locked data provider object for the current data connection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnection.GetLockedProviderObject(System.Int32)">
      <summary>Retrieves the underlying data provider after locking the current data connection.</summary>
      <returns>The underlying data provider object for the current data connection, or null if the data connection could not be locked within the specified time-out period.</returns>
      <param name="lockTimeout">The amount of time, in seconds, to wait for the data connection to lock before returning.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnection.IsLocked">
      <summary>Gets a value indicating whether the current data connection is locked.</summary>
      <returns>true if locked, otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnection.IsNonLocking">
      <summary>Gets a value indicating whether the data connection supports automatic locking.</summary>
      <returns>true if the data connection supports automatic locking; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnection.Lock">
      <summary>Locks the current data connection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnection.Lock(System.Int32)">
      <summary>Locks the current data connection.</summary>
      <returns>A <see cref="T:System.Boolean" /> value indicating whether the lock was successful within the specified time-out period.</returns>
      <param name="lockTimeout">The amount of time, in seconds, to wait for the data connection to lock before returning.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnection.Open">
      <summary>Opens the current data connection.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnection.Provider">
      <summary>Gets the GUID of the data provider.</summary>
      <returns>A <see cref="T:System.Guid" /> object representing the GUID of the data provider.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnection.ReleaseExclusiveAccessProxy">
      <summary>Releases an existing exclusive access proxy.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnection.SafeConnectionString">
      <summary>Gets the connection string, excluding sensitive information.</summary>
      <returns>A <see cref="T:System.String" /> value representing the connection string that excludes sensitive information.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnection.Source">
      <summary>Gets the GUID of the data source for the current data connection, if any.</summary>
      <returns>A <see cref="T:System.Guid" /> object representing the data source for the current data connection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnection.State">
      <summary>Gets the current state of the data connection.</summary>
      <returns>A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.DataConnectionState" /> enumeration specifying the current state of the data connection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnection.Unlock">
      <summary>Unlocks the current data connection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnection.UnlockProviderObject">
      <summary>Unlocks the underlying provider object for the current data connection.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog">
      <summary>Provides access to the Add Connection dialog box, with which you can obtain data connection information from users.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.AcceptButtonText">
      <summary>Gets or sets the text displayed on the button the user clicks to accept the contents of the Add Connection dialog box, and then returns from the <see cref="M:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.ShowDialog" /> method.</summary>
      <returns>The string value displayed on the button the user clicks to accept the contents of the dialog box.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.AddAllSources">
      <summary>Adds all registered data sources for display in the Choose/Change Data Source dialog box.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.AddSources(Microsoft.VisualStudio.Data.Services.DataConnectionDialogFilterCallback)">
      <summary>Enumerates all registered data sources and their associated data providers, and conditionally adds source/provider combinations to the Choose/Change Data Source dialog box, depending on logic in the supplied callback.</summary>
      <param name="callback">A delegate called for each data source/provider combination to determine whether the combination should be added.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.AddSources(System.Guid)">
      <summary>Enumerates through all registered data sources and associated data providers, and adds those that have a matching provider technology.</summary>
      <param name="providerTechnology">A GUID specifying a data provider technology.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.AvailableProviders">
      <summary>Gets a collection of unique identifiers for DDEX providers that are currently available for selection in the Choose/Change Data Source dialog box.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object that contains a collection of unique identifiers for the current set of available DDEX providers.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.AvailableSources">
      <summary>A collection of GUIDs representing DDEX data sources that should be available for display in the Choose/Change Data Source dialog box.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> object containing available GUIDs.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.ChangeSourceHeaderLabel">
      <summary>Gets or sets a summary description appearing on the Change Data Source dialog box header when the user clicks the Change button.</summary>
      <returns>A string literal value represented on the dialog box header.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.ChangeSourceTitle">
      <summary>Gets or sets the title of the Change Data Source dialog box, which can be shown when the user clicks the Change button.</summary>
      <returns>The string literal value for the dialog box title.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.ChooseSourceAcceptText">
      <summary>Gets or sets text that appears on the Continue button of the Choose Data Source dialog box when it appears before the Add Connection dialog box.</summary>
      <returns>The string literal value of the Continue button text.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.ChooseSourceHeaderLabel">
      <summary>Gets or sets the text of the description that appears on the header of the Choose Data Source dialog box when it appears before the Add Connection dialog box.</summary>
      <returns>The string literal value of the header text.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.ChooseSourceTitle">
      <summary>Gets or sets the title of the Choose Data Source dialog box when it appears before the Add Connection dialog box.</summary>
      <returns>The string literal text value.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.CreateNewConnection">
      <summary>Gets or sets a Boolean value indicating whether a new connection should be created.</summary>
      <returns>A <see cref="T:System.Boolean" /> value indicating whether a new connection should be created.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.DisplayConnectionString">
      <summary>Gets or sets unencrypted connection information for display in the Add Connection dialog box for the specified data provider.</summary>
      <returns>Returns string representing unencrypted connection information for the connection dialog box.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.EncryptedConnectionString">
      <summary>Gets or sets encrypted connection information for the dialog box for the specified data provider.</summary>
      <returns>Returns encrypted connection information represented by the dialog box for the selected provider.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.HeaderLabel">
      <summary>Gets or sets a summary description that appears in the header of the Add Connection dialog box.</summary>
      <returns>The string literal value of the dialog box header label, or null if no value is set.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.LoadExistingConfiguration(System.Guid,System.String,System.Boolean)">
      <summary>Configures the Add Connection dialog box with the specified existing DDEX provider and connection string, deriving the correct data source when possible.</summary>
      <param name="provider">A <see cref="T:System.Guid" /> object specifying a DDEX provider.</param>
      <param name="connectionString">A connection string recognized by the data provider.</param>
      <param name="encryptedString">A Boolean value indicating whether the connection string parameter is encrypted.</param>
      <exception cref="T:System.ArgumentNullException">The provider is an empty GUID and/or <paramref name="connectionString" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The specified provider is unknown to the dialog box.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.LoadProviderSelections">
      <summary>Loads information about which DDEX provider is selected by default for each data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.LoadSourceSelection">
      <summary>Loads information about which data source is currently selected.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.SafeConnectionString">
      <summary>Gets or sets the connection string that excludes sensitive data.</summary>
      <returns>A string value containing the connection string that excludes sensitive data.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.SaveProviderSelections">
      <summary>Saves information about which DDEX provider is selected by default for each data source.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.SaveSelection">
      <summary>Gets or sets a value indicating whether the caller of the dialog box should persist the currently selected data source and DDEX provider combination.</summary>
      <returns>true if the dialog box should persist the currently selected data source and DDEX provider combination; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.SaveSourceSelection">
      <summary>Saves information about which data source is currently selected.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.SelectedProvider">
      <summary>Gets or sets the data provider currently selected in the connection dialog box, using the data provider's GUID.</summary>
      <returns>The <see cref="T:System.Guid" /> of the data provider currently selected in the dialog box.</returns>
      <exception cref="T:System.InvalidOperationException">The value of <see cref="P:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.SelectedSource" /> for the selected provider is an empty GUID, and the specified GUID is not empty.</exception>
      <exception cref="T:System.ArgumentException">The GUID specified for the selected provider is not a registered DDEX provider.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.SelectedSource">
      <summary>Gets or sets a GUID value indicating the current selected data source.</summary>
      <returns>Returns a <see cref="T:System.Guid" /> object reflecting the current data source.</returns>
      <exception cref="T:System.ArgumentException">The GUID specified for the selected provider is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.ShowDialog">
      <summary>Shows the Add Connection dialog box pre-populated with the data provider and connection string settings.</summary>
      <returns>true if the dialog returned <see cref="F:System.Windows.Forms.DialogResult.OK" />; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.ShowDialog(System.Boolean)">
      <summary>Shows the Add Connection dialog box pre-populated with the data provider and connection string settings.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object representing an open connection based on the connection string settings.</returns>
      <param name="connect">A Boolean value indicating whether the dialog box should attempt to open the connection before returning.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.Title">
      <summary>Gets or sets the string representing the text shown in the connection dialog box title bar.</summary>
      <returns>The string representing the text shown in the title bar of the dialog box.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.UnspecifiedSource">
      <summary>Gets a GUID representing an unspecified data source.</summary>
      <returns>A GUID representing an unspecified data source.</returns>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog.VerifyConfiguration">
      <summary>Occurs when the OK button is clicked in the Add Connection dialog box. Clients can use this event to perform configuration checking.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialogFactory">
      <summary>Represents the interface that provides the ability to create an instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialogFactory.CreateConnectionDialog">
      <summary>Creates a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog" /> class.</summary>
      <returns>A new instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnectionDialog" /> class.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataConnectionEvents">
      <summary>Represents basic events for a data connection.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Services.IVsDataConnectionEvents.MessageReceived">
      <summary>Occurs when a message is received from the data source.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Services.IVsDataConnectionEvents.StateChanged">
      <summary>Occurs when the state of the data connection is changed.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataConnectionFactory">
      <summary>Provides the ability to create stand-alone instances of the <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> class.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnectionFactory.CreateConnection(System.Guid,System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> class with the specified connection information.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object representing a data connection.</returns>
      <param name="provider">The unique identifier of a DDEX provider.</param>
      <param name="connectionString">An unencrypted or encrypted string containing connection information.</param>
      <param name="encryptedString">Indicates whether the <paramref name="connectionString" /> parameter is unencrypted or encrypted. Specify true if encrypted.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="cconnectionString" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="provider" /> is not a registered DDEX provider.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnectionFactory.MakeConnectionFrom(System.Guid,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> class for the specified provider from an existing underlying provider object.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object representing a data connection.</returns>
      <param name="provider">The unique identifier of a DDEX provider.</param>
      <param name="providerObj">An existing underlying provider object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="providerObj" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="provider" /> is not a registered DDEX provider.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataConnectionManager">
      <summary>Represents a shared set of data connection objects that are created on demand and managed by Visual Studio.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnectionManager.GetConnection(System.Guid,System.String,System.Boolean)">
      <summary>Retrieves an existing data connection or creates a new data connection that matches the specified provider GUID and connection string.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object representing the data connection.</returns>
      <param name="provider">The GUID of the DDEX provider.</param>
      <param name="connectionString">The connection string in unencrypted or encrypted form.</param>
      <param name="encryptedString">A Boolean value indicating whether the connection string is encrypted (true) or unencrypted (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnectionManager.GetConnection(System.Guid,System.String,System.Boolean,System.Boolean)">
      <summary>Retrieves an existing data connection or creates a new data connection that matches the specified provider GUID and connection string. Also, optionally updates the connection string of the returned connection.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object representing the data connection.</returns>
      <param name="provider">The GUID of the DDEX provider.</param>
      <param name="connectionString">The connection string in unencrypted or encrypted form.</param>
      <param name="encryptedString">A Boolean value indicating whether the connection string is encrypted (true) or unencrypted (false).</param>
      <param name="update">A Boolean value indicating whether the data connection's connection string value should be updated with the specified connection string (true) or not (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnectionManager.InvalidateConnection(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Removes the specified data connection if it exists and is a weak reference.</summary>
      <returns>true if the specified data connection is found and removed; otherwise, false.</returns>
      <param name="connection">The data connection object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnectionManager.InvalidateConnection(System.Guid,System.String,System.Boolean)">
      <summary>Removes the specified data connection if it exists and is a weak reference.</summary>
      <returns>true if the specified data connection is found and removed; otherwise, false.</returns>
      <param name="provider">The GUID of the DDEX provider.</param>
      <param name="connectionString">The connection string in unencrypted or encrypted form.</param>
      <param name="encryptedString">A Boolean value indicating whether the connection string is encrypted (true) or unencrypted (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnectionManager.IsManaging(Microsoft.VisualStudio.Data.Services.IVsDataConnection)">
      <summary>Indicates whether the connection manager is managing the specified data connection.</summary>
      <returns>true if the connection manager is managing the specified data connection; otherwise, false.</returns>
      <param name="connection">The data connection object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataConnectionManager.IsManaging(System.Guid,System.String,System.Boolean)">
      <summary>Indicates whether the connection manager is managing the data connection specified by the provider, the connection string, and the encrypted connection string.</summary>
      <returns>true if the connection manager is managing the specified data connection; otherwise, false.</returns>
      <param name="provider">The GUID of the DDEX provider.</param>
      <param name="connectionString">The connection string in unencrypted or encrypted form.</param>
      <param name="encryptedString">A Boolean value indicating whether the connection string is encrypted (true) or unencrypted (false).</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerChildNodeCollection">
      <summary>Represents the collection of connection node objects in Server Explorer in Visual Studio.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerChildNodeCollection.Contains(Microsoft.VisualStudio.Data.Services.IVsDataObject)">
      <summary>Indicates whether Server Explorer contains a connection node corresponding to the specified data object.</summary>
      <returns>true if Server Explorer contains the specified connection node; otherwise, false.</returns>
      <param name="obj">The data object representing the connection node to look for.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerChildNodeCollection.Contains(System.Int32)">
      <summary>Indicates whether Server Explorer contains a connection node corresponding to the specified data object identifier.</summary>
      <returns>true if Server Explorer contains the specified connection node; otherwise, false.</returns>
      <param name="itemId">An integer value representing the ID of the data object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerChildNodeCollection.Contains(System.String)">
      <summary>Indicates whether Server Explorer contains a connection node corresponding to the specified name.</summary>
      <returns>true if Server Explorer contains the specified connection node; otherwise, false.</returns>
      <param name="name">The name of the connection node to look for.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerChildNodeCollection.Contains(System.String,System.Object[])">
      <summary>Indicates whether Server Explorer contains a connection node corresponding to the specified type name and identifiers.</summary>
      <returns>true if Server Explorer contains the specified connection node; otherwise, false.</returns>
      <param name="typeName">The name of the requested data object's type.</param>
      <param name="identifier">An array of identifier parts that uniquely identify the requested data object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> or <paramref name="identifier" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerChildNodeCollection.Find(Microsoft.VisualStudio.Data.Services.IVsDataObject)">
      <summary>Retrieves the specified connection node.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode" /> object representing the connection node in Server Explorer, or null if the connection node is not found.</returns>
      <param name="obj">An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObject" /> object that identifies the connection node to look for.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="obj" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerChildNodeCollection.Find(System.String,System.Object[])">
      <summary>Retrieves a connection node corresponding to the specified type name and identifiers.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode" /> object representing the connection node in Server Explorer, or null if the node is not found.</returns>
      <param name="typeName">The name of the requested data object's type.</param>
      <param name="identifier">An array of identifier parts that uniquely identify the requested data object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> or <paramref name="identifier" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerChildNodeCollection.IndexOf(Microsoft.VisualStudio.Data.Services.IVsDataObject)">
      <summary>Retrieves the index of the connection node corresponding to the specified data object.</summary>
      <returns>The index of the connection node in Server Explorer, if found; otherwise, -1.</returns>
      <param name="obj">The data object to get the index for.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerChildNodeCollection.IndexOf(System.Int32)">
      <summary>Retrieves the index of the connection node corresponding to the specified data object identifier.</summary>
      <returns>The index of the connection node in Server Explorer, if found; otherwise, -1.</returns>
      <param name="itemId">An integer value representing the ID of the data object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerChildNodeCollection.IndexOf(System.String)">
      <summary>Retrieves the index of the connection node corresponding to the specified name.</summary>
      <returns>The index of the connection node in Server Explorer, if found; otherwise, -1.</returns>
      <param name="name">The name of the connection node to get the index for.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerChildNodeCollection.IndexOf(System.String,System.Object[])">
      <summary>Retrieves the index of the connection node corresponding to the specified name type name and identifiers.</summary>
      <returns>The index of the connection node in Server Explorer, if found; otherwise, -1.</returns>
      <param name="typeName">The name of the requested data object's type.</param>
      <param name="identifier">An array of identifier parts that uniquely identify the requested data object.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerChildNodeCollection.Item(System.String)">
      <summary>Gets the connection node with the specified name in Server Explorer.</summary>
      <returns>A <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode" /> object containing the connection node requested, or null if the connection node is not found.</returns>
      <param name="name">The name of the connection node to retrieve in Server Explorer.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection">
      <summary>Represents a connection that exists in the Visual Studio Server Explorer.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection.Connection">
      <summary>Gets the data connection corresponding to the current connection node in Server Explorer.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataConnection" /> object representing the data connection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection.ConnectionNode">
      <summary>Gets the current connection node in Server Explorer.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode" /> object representing the current connection node.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection.DisplayName">
      <summary>Gets or sets the display name of the root node for the data connection.</summary>
      <returns>The string literal display name of the root node for the connection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection.EncryptedConnectionString">
      <summary>Gets an encrypted string containing information about the data connection.</summary>
      <returns>An encrypted string containing information about the connection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection.FindDocumentNode(System.String)">
      <summary>Gets the specified connection node through the data view hierarchy.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode" /> object representing the requested node in Server Explorer.</returns>
      <param name="documentMoniker">The moniker for the node to find.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection.FindDocumentNode(System.String,System.Boolean)">
      <summary>Gets the specified connection node through the data view hierarchy. Optionally, searches unexpanded nodes that are not populated.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode" /> object representing the requested connection node in Server Explorer.</returns>
      <param name="documentMoniker">The moniker for the node to find.</param>
      <param name="searchUnpopulatedChildren">A Boolean value indicating whether to search nodes that have never been expanded and are thus not populated.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection.FindNode(System.Int32)">
      <summary>Retrieves the connection node from Server Explorer based on its ID.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode" /> object representing the requested connection node in Server Explorer.</returns>
      <param name="itemId">An integer value identifying the connection node to get.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection.FindNode(System.String)">
      <summary>Retrieves the connection node from Server Explorer based on its name.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode" /> object representing the requested connection node in Server Explorer.</returns>
      <param name="fullName">The name of the requested connection node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection.FindNode(System.String,System.Boolean)">
      <summary>Retrieves the connection node from Server Explorer based on its name. Optionally, searches unexpanded nodes that are not populated.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode" /> object representing the requested connection node in Server Explorer.</returns>
      <param name="fullName">The name of the connection node to get.</param>
      <param name="searchUnpopulatedChildren">A Boolean value indicating whether to search nodes that have never been expanded and are thus not populated.</param>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection.NodeChanged">
      <summary>Occurs when a node has changed.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection.NodeExpandedOrRefreshed">
      <summary>Occurs when a node is expanded or refreshed in Server Explorer.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection.NodeInserted">
      <summary>Occurs when a node is inserted in Server Explorer.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection.NodeRemoving">
      <summary>Occurs just before a node removal from Server Explorer.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection.Provider">
      <summary>Gets the unique identifier of the DDEX provider for the Server Explorer connection.</summary>
      <returns>The unique identifier of the DDEX provider for the connection.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection.SelectedNodes">
      <summary>Gets the currently selected nodes in Server Explorer for a single Server Explorer connection.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection" /> object representing the currently selected nodes in Server Explorer.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection.Source">
      <summary>Gets the data source of the current connection node.</summary>
      <returns>The <see cref="T:System.Guid" /> of the data source.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnectionManager">
      <summary>Provides the ability to perform common tasks with data connections in Server Explorer, such as adding, removing, or finding a connection, among others.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnectionManager.AddConnection(System.String,System.Guid,System.String,System.Boolean)">
      <summary>Adds a new data connection with the specified properties.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection" /> object representing the new data connection.</returns>
      <param name="connectionName">The name of the data connection.</param>
      <param name="provider">The GUID of the DDEX provider.</param>
      <param name="connectionString">The connection string, in unencrypted or encrypted form, containing the connection properties.</param>
      <param name="encryptedString">A Boolean value indicating whether the <paramref name="connectionString" /> parameter is encrypted (true) or not (false).</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnectionManager.Connections">
      <summary>Gets a collection of key/value pairs containing all existing data connections.</summary>
      <returns>A <see cref="T:System.IDictionary" /> object that contains a collection of key/value pairs containing all existing data connections. The key holds the name of the connection, and the value holds the corresponding <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection" /> connection object.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnectionManager.FindConnection(System.Guid,System.String,System.Boolean)">
      <summary>Searches for an existing data connection that matches the specified properties.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection" /> object representing an existing data connection that matches the specified properties, or null if none is found.</returns>
      <param name="provider">The GUID of the DDEX provider for the associated data connection.</param>
      <param name="connectionString">The connection string, in unencrypted or encrypted form, containing the connection properties.</param>
      <param name="encryptedString">A Boolean value indicating whether the <paramref name="connectionString" /> parameter is encrypted (true) or not (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnectionManager.PromptAndAddConnection">
      <summary>Prompts the user with the connection dialog box to add a new connection in Server Explorer.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection" /> object representing the new data connection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnectionManager.RemoveConnection(Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection)">
      <summary>Removes an existing data connection from Server Explorer.</summary>
      <param name="explorerConnection">The data connection to remove.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="explorerConnection" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnectionManager.SelectConnection(Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection)">
      <summary>Selects the specified data connection in Server Explorer.</summary>
      <param name="explorerConnection">The data connection to select.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode">
      <summary>Represents any node in the Visual Studio Server Explorer that appears as a child to the Data Connections node.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.AddToSelection">
      <summary>Adds the current node to a group of selected nodes. </summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.CanCopy">
      <summary>Gets a value indicating whether the copy command is supported on the node.</summary>
      <returns>true if the copy command is supported; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.CanCut">
      <summary>Gets a value indicating whether the cut command is supported on the node.</summary>
      <returns>true if the cut command is supported; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.CanDelete">
      <summary>Gets a value indicating whether the delete command is supported on the node.</summary>
      <returns>true if the delete command is supported; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.CanOpen">
      <summary>Gets a value indicating whether the open command is supported on the node.</summary>
      <returns>true if the open command is supported; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.CanOpenSpecificDocumentView(System.Guid)">
      <summary>Indicates whether a document view window can be opened for the current node.</summary>
      <returns>true if a document view window can be opened; otherwise, false.</returns>
      <param name="logicalView">A GUID value for the logical view obtained from the <see cref="T:Microsoft.VisualStudio.Shell.LogicalView" /> enumeration.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.CanPaste">
      <summary>Gets a value indicating whether the paste command is supported on the node.</summary>
      <returns>true if the paste command is supported; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.CanRename">
      <summary>Gets a value indicating whether the rename command is supported on the node.</summary>
      <returns>true if the rename command is supported; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.Caption">
      <summary>Gets the caption of the node.</summary>
      <returns>A <see cref="T:System.String" /> value holding the caption text.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.Children">
      <summary>Gets a collection of all child nodes that appear under this node in Server Explorer.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerChildNodeCollection" /> object containing the child nodes.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.Collapse">
      <summary>Collapses the current node in order to hide its child nodes in Server Explorer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.Copy">
      <summary>Creates a copy of the current node.</summary>
      <returns>An <see cref="T:System.Windows.Forms.IDataObject" /> object representing a copy of the current node.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.Cut">
      <summary>Creates a copy of the current node and then deletes the node.</summary>
      <returns>An <see cref="T:System.Windows.Forms.IDataObject" /> object representing a copy of the current node.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.Delete">
      <summary>Deletes the current node from Server Explorer.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.DocumentMoniker">
      <summary>Gets the document moniker for this node through the data view hierarchy.</summary>
      <returns>A <see cref="T:System.String" /> value holding the document moniker for this node, or null if the moniker could not be obtained.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.DoDefaultAction">
      <summary>Executes the default command, if any, on the current node.</summary>
      <returns>true if this method executed the default command; false if there is no default command that can be executed on this node.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.Expand">
      <summary>Expands the current node in Server Explorer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.ExpandToShow">
      <summary>Expands the parent nodes in order to show the current node in Server Explorer.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.ExplorerConnection">
      <summary>Gets the data explorer connection that is currently being used.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerConnection" /> object representing the data connection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.ExtendSelectionToNode">
      <summary>Extends the selected items in the UI up to the current node, resulting in multiple node selection.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.FullName">
      <summary>Gets the full name of the node.</summary>
      <returns>A <see cref="T:System.String" /> value holding the full name of the current node.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.FullNameEquals(System.String)">
      <summary>Verifies the full name of the current node.</summary>
      <returns>true if the current node's full name matches the specified full name; otherwise, false.</returns>
      <param name="otherFullName">The node full name to check for.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.GetChildren(System.Boolean)">
      <summary>Retrieves a collection of all child nodes for the current node.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerChildNodeCollection" /> object containing the child nodes of this node.</returns>
      <param name="allowAsync">A Boolean value indicating whether to allow an asynchronous execution (true) or not (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.GetCommand(System.ComponentModel.Design.CommandID)">
      <summary>Gets a menu command corresponding to the specified <see cref="T:System.ComponentModel.Design.CommandID" /> value.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.MenuCommand" /> object as the menu command.</returns>
      <param name="commandId">A <see cref="T:System.ComponentModel.Design.CommandID" /> object containing a numeric command ID and a GUID menu group identifier.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.HasBeenExpanded">
      <summary>Gets a value indicating whether the current node has been expanded.</summary>
      <returns>true if the node has been expanded; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.IsDiscarded">
      <summary>Gets a value indicating whether the current node is discarded.</summary>
      <returns>true if the current node is discarded; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.IsExpandable">
      <summary>Gets a value indicating whether the current node can be expanded to show lower-level child nodes.</summary>
      <returns>true if the node is expandable; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.IsExpanded">
      <summary>Gets a value indicating whether the current node is expanded.</summary>
      <returns>true if the node is expanded; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.IsExpanding">
      <summary>Gets a value indicating whether the current node is in the process of being expanded.</summary>
      <returns>true if node is being expanded; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.IsPlaced">
      <summary>Gets a value indicating whether the current node has been inserted into the Server Explorer tree.</summary>
      <returns>true if node is placed; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.IsRefreshing">
      <summary>Gets a value indicating whether the current node is in the process of being refreshed.</summary>
      <returns>true if the node is being refreshed; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.IsVisible">
      <summary>Gets a value indicating whether the current node is visible in the Server Explorer window.</summary>
      <returns>true if the current node is visible; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.ItemId">
      <summary>Gets a numerical value that identifies the current node.</summary>
      <returns>An <see cref="T:System.Int32" /> value that identifies the current node.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.Name">
      <summary>Gets the name of the current node.</summary>
      <returns>A <see cref="T:System.String" /> value holding the name of the node.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.NameEquals(System.String)">
      <summary>Verifies the name of the current node.</summary>
      <returns>true if the current node's name matches the specified name; otherwise, false.</returns>
      <param name="otherName">The node name to check for.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.NextSibling">
      <summary>Gets the next node that is a sibling to the current node in Server Explorer.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode" /> object representing the next node that is a sibling to the current node.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.Object">
      <summary>Gets the data object associated with the current Server Explorer node.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObject" /> object containing the data object associated with the current Server Explorer node.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.OpenDocument">
      <summary>Opens the current node as a document window frame in the Visual Studio environment.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> object representing the opened document window.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.OpenSpecificDocumentView(System.Guid)">
      <summary>Opens the current node as a document window frame in the Visual Studio environment.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> object representing the opened document window.</returns>
      <param name="logicalView">A GUID value for the logical view obtained from the <see cref="T:Microsoft.VisualStudio.Shell.LogicalView" /> enumeration.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.OpenSpecificDocumentView(System.Guid,System.Object)">
      <summary>Opens the current node as a document window frame in the Visual Studio environment.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> object representing the opened document window.</returns>
      <param name="logicalView">A GUID value for the logical view obtained from the <see cref="T:Microsoft.VisualStudio.Shell.LogicalView" /> enumeration.</param>
      <param name="existingDocumentData">Object containing any existing data in the document.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.OpenSpecificDocumentView(System.Guid,System.Object,System.Boolean)">
      <summary>Opens the current node as a document window frame in the Visual Studio environment.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Shell.Interop.IVsWindowFrame" /> object representing the opened document window.</returns>
      <param name="logicalView">A GUID value for the logical view obtained from the <see cref="T:Microsoft.VisualStudio.Shell.LogicalView" /> enumeration.</param>
      <param name="existingDocumentData">Object containing any existing data in the document.</param>
      <param name="doNotShowWindow">A Boolean value indicating whether to hide the open window (true) or not (false).</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.Parent">
      <summary>The parent node of the current node in Server Explorer.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode" /> object representing the parent node.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.Paste">
      <summary>Pastes the node from the Clipboard to Server Explorer.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.PreviousSibling">
      <summary>Gets a node that is a sibling to the current node and that is immediately before the current node.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode" /> object representing the previous node that is a sibling to the current node.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.Refresh">
      <summary>Refreshes the current node and its child nodes asynchronously, if any are expanded in Server Explorer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.Refresh(System.Boolean)">
      <summary>Refreshes the current node and its child nodes, if any are expanded in Server Explorer.</summary>
      <param name="noAsync">A Boolean value indicating whether to execute the refresh synchronously (true) or asynchronously (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.Rename(System.String)">
      <summary>Replaces the caption of the current node with a new name.</summary>
      <param name="newCaption">The new caption name to set.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.Select">
      <summary>Selects the current node in Server Explorer.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode.Unselect">
      <summary>Deselects the current node in Server Explorer.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection">
      <summary>Represents a group of currently selected nodes in the Visual Studio Server Explorer, together with a set of properties and actions.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.CanCopyAll">
      <summary>Gets a value indicating whether the group of currently selected nodes in Server Explorer can be copied to the Clipboard.</summary>
      <returns>true if the node selection can be copied; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.CanCutAll">
      <summary>Gets a value indicating whether the group of currently selected nodes in Server Explorer can be cut.</summary>
      <returns>true if the node selection can be cut; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.CanDeleteAll">
      <summary>Gets a value indicating whether the group of currently selected nodes in Server Explorer can be deleted.</summary>
      <returns>true if the node selection can be deleted; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.CanOpenAll">
      <summary>Gets a value indicating whether the group of currently selected nodes in Server Explorer can be opened.</summary>
      <returns>true if the node selection can be opened; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.CollapseAll">
      <summary>Collapses all the nodes present in the node selection.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.Contains(Microsoft.VisualStudio.Data.Services.IVsDataObject)">
      <summary>Indicates whether the group of selected nodes contains the node specified as a data object.</summary>
      <returns>true if the specified node is present in the node selection; otherwise, false.</returns>
      <param name="obj">A data object containing the properties that identify the node to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.Contains(System.Int32)">
      <summary>Indicates whether the group of selected nodes contains the node specified by its numerical identifier value.</summary>
      <returns>true if the specified node is present in the node selection; otherwise, false.</returns>
      <param name="itemId">A numerical value that identifies the node to check the presence of.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.Contains(System.String)">
      <summary>Indicates whether the group of selected nodes contains the node specified by its full name.</summary>
      <returns>true if the specified node is present in the node selection; otherwise, false.</returns>
      <param name="fullName">The full name of the node to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.Contains(System.String,System.Object[])">
      <summary>Indicates whether the group of selected nodes contains the node specified by its full name.</summary>
      <returns>true if the specified node is present in the node selection; otherwise, false.</returns>
      <param name="typeName">The name of the data object type that is represented in the node to retrieve.</param>
      <param name="identifier">An array of data object identifier parts that represent the node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.CopyAll">
      <summary>Copies all the nodes present in the group of selected nodes to the Clipboard.</summary>
      <returns>An <see cref="T:System.Windows.Forms.IDataObject" /> object containing the copied nodes.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.CutAll">
      <summary>Copies all the nodes present in the group of selected nodes to the Clipboard, and then deletes them.</summary>
      <returns>An <see cref="T:System.Windows.Forms.IDataObject" /> object containing the copied nodes.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.DeleteAll">
      <summary>Deletes all the nodes present in the group of selected nodes.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.DoDefaultActionOnAll">
      <summary>Executes the default command, if any, on the group of selected nodes.</summary>
      <returns>true if the default command was executed on all nodes in the selection, false if this method failed to execute the default command on at least one node in the selection.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.ExpandAll">
      <summary>Expands all the nodes present in the group of selected nodes.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.Find(Microsoft.VisualStudio.Data.Services.IVsDataObject)">
      <summary>Retrieves the specified node from the group of selected nodes.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode" /> object representing the requested node.</returns>
      <param name="obj">A data object containing the properties that identify the node to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.Find(System.String,System.Object[])">
      <summary>Retrieves the specified node from the group of selected nodes.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode" /> object representing the requested node.</returns>
      <param name="typeName">The name of the data object type that is represented in the node to retrieve.</param>
      <param name="identifier">An array of data object identifier parts that represent the node.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.GetCommand(System.ComponentModel.Design.CommandID)">
      <summary>Gets a menu command corresponding to the specified <see cref="T:System.ComponentModel.Design.CommandID" /> value for the group of selected nodes.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.MenuCommand" /> object as the menu command.</returns>
      <param name="commandId">A <see cref="T:System.ComponentModel.Design.CommandID" /> object containing a numeric command ID and a GUID menu group identifier.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.Item(System.Int32)">
      <summary>Gets the node specified by its numerical identifier from the group of selected nodes in Server Explorer.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode" /> object representing the specified node, or null if not found.</returns>
      <param name="itemId">A numerical value identifying the node to retrieve.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.Item(System.String)">
      <summary>Gets the node specified by its full name from the group of selected nodes in Server Explorer.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNode" /> object representing the specified node, or null if not found.</returns>
      <param name="fullName">The full name of the node to retrieve.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.OpenAllDocuments">
      <summary>Opens all the nodes in the group of selected nodes as document window frames in the Visual Studio environment.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.RefreshAll">
      <summary>Refreshes all the nodes in the group node selection (and their child nodes if any are expanded in Server Explorer) asynchronously.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.RefreshAll(System.Boolean)">
      <summary>Refreshes all the nodes in the group node selection (and their child nodes if any are expanded in Server Explorer).</summary>
      <param name="noAsync">A Boolean value indicating whether to execute the refresh synchronously (true) or asynchronously (false).</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.Remove(Microsoft.VisualStudio.Data.Services.IVsDataObject)">
      <summary>Removes the node specified by a data object from the node selection group.</summary>
      <returns>true if the node was removed; otherwise, false.</returns>
      <param name="obj">A data object containing the properties that identify the node to remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.Remove(System.Int32)">
      <summary>Removes the node specified by its numerical identifier value from the node selection group.</summary>
      <returns>true if the node was removed; otherwise, false.</returns>
      <param name="itemId">A numerical value that identifies the node to be removed.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.Remove(System.String)">
      <summary>Removes the node specified by its full name from the node selection group.</summary>
      <returns>true if the node was removed; otherwise, false.</returns>
      <param name="fullName">The full name of the node to remove.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataExplorerNodeSelection.Remove(System.String,System.Object[])">
      <summary>Removes the specified node from the node selection group.</summary>
      <returns>true if the node was removed; otherwise, false.</returns>
      <param name="typeName">The name of the data object type that is represented in the node to remove.</param>
      <param name="identifier">An array of data object identifier parts that represent the node.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObject">
      <summary>Represents a well-known concept for use by a generic designer.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataMappedObject.Identifier">
      <summary>Gets the list of identifier parts that uniquely identify the current generic mapped type.</summary>
      <returns>The list of identifier parts that uniquely identify the current generic mapped type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataMappedObject.IsDeleted">
      <summary>Gets a value indicating whether the current generic mapped type is deleted.</summary>
      <returns>true if the generic mapped type is deleted; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataMappedObject.Name">
      <summary>Gets the name of the generic mapped type.</summary>
      <returns>The name of the generic mapped type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataMappedObject.Properties">
      <summary>Gets name/value pairs containing the property names and values associated with the current generic mapped type.</summary>
      <returns>A collection of name/value pairs containing the property names and values associated with the current generic mapped type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataMappedObject.Selector">
      <summary>Gets a selector object that enables the retrieval of data source–specific metadata from the data object support XML file.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectSelector" /> object that allows the retrieval of data source–specific metadata from the data object support XML file.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataMappedObject.Type">
      <summary>Gets the type name as a string for the current generic mapped type.</summary>
      <returns>The type name as a string for the current generic mapped type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataMappedObject.UnderlyingObject">
      <summary>Gets the underlying object that is contained by the current generic mapped type.</summary>
      <returns>The underlying object that is contained by the current generic mapped type.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectCallMapperConversionStep">
      <summary>Represents a call mapper conversion step for a data object support mapped type.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectCallMapperConversionStep.GetParameters">
      <summary>Returns the parameters used in this conversion step.</summary>
      <returns>An array containing the parameters used in this conversion step.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectCallMapperConversionStep.ImplementationType">
      <summary>Gets the class as a <see cref="T:System.Type" /> that implements the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataMappedObjectConverter" /> support entity. The provider supplies this implementation.</summary>
      <returns>A <see cref="T:System.Type" /> representing the class that implements the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataMappedObjectConverter" /> support entity.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectConversion">
      <summary>Represents a conversion for a data object support mapped type and contains the conversion steps needed to convert a data source–specific object to a mapped object.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectConversion.CallMapperStep">
      <summary>Gets a conversion step that is part of the conversion from a data source–specific type to a mapped type.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectCallMapperConversionStep" /> object representing one conversion step.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectConversion.Steps">
      <summary>Returns all the conversion steps that are necessary to convert a data source–specific type to a mapped type.</summary>
      <returns>A collection of <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectCallMapperConversionStep" /> objects representing all the conversion steps.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectConversionStep">
      <summary>Represents a conversion step for a data object support mapped type.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectConversionStep.Apply(System.Object[])">
      <summary>Applies the conversion specified by the parameters and returns the converted values.</summary>
      <returns>An array containing converted values.</returns>
      <param name="values">The underlying values used in the conversion.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectSelection">
      <summary>Represents the Selection XML tag corresponding to this mapped type in the data object support XML file.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectSelection.Filter">
      <summary>Gets the filter.</summary>
      <returns>A string representing the filter.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectSelection.Ordering">
      <summary>Gets the ordering as a string containing a comma-delimited sequence of data objects.</summary>
      <returns>A comma-delimited sequence of data objects</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectSelection.Restrictions">
      <summary>Gets a list of restrictions.</summary>
      <returns>A list of string values representing the restrictions present in the current Selection tag.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectSelection.SubstitutionValues">
      <summary>Gets a list of substitution values.</summary>
      <returns>A list of <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectSubstitutionValue" /> objects representing the substitution values.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectSelector">
      <summary>Represents a selector of mapped objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectSelector.SelectMappedObjects``1">
      <summary>Retrieves a list of mapped data objects from the object store.</summary>
      <returns>A list of <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObject" /> objects representing the mapped objects.</returns>
      <typeparam name="T">The type of the parameter.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectSelector.SelectMappedObjects``1(System.Object[])">
      <summary>Retrieves a list of mapped data objects, filtered by the specified restrictions.</summary>
      <returns>A list of <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObject" /> objects, filtered by the specified restrictions.</returns>
      <param name="restrictions">An array of restrictions that restrict the objects returned from the object store to the ones matching these restrictions.</param>
      <typeparam name="T">The type of the parameter.</typeparam>
      <exception cref="T:System.ArgumentException">The restrictions are not valid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectSelector.SelectMappedObjects``1(System.Object[],System.Boolean)">
      <summary>Retrieves a list of mapped data objects filtered by the specified restrictions.</summary>
      <returns>A list of <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObject" /> objects matching the specified restrictions.</returns>
      <param name="restrictions">A list of identifiers that restrict the objects returned from the object store to the ones matching these restrictions.</param>
      <param name="refresh">A Boolean value indicating whether to update the list of required restrictions and properties.</param>
      <typeparam name="T">The type of the parameter.</typeparam>
      <exception cref="T:System.ArgumentException">The restrictions are not valid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectSelector.SelectMappedObjects``1(System.String)">
      <summary>Retrieves a list of mapped data objects of the specified type.</summary>
      <returns>A list of <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObject" /> objects representing the mapped objects for the specified type.</returns>
      <param name="specificTypeName">The name of the type to retrieve mapped data objects for. This is the generic data type name, which is found in the data object store XML in the &lt;MappedType&gt; element.</param>
      <typeparam name="T">The type of the parameter.</typeparam>
      <exception cref="T:System.ArgumentException">The type name is not valid.</exception>
      <exception cref="T:System.NotSupportedException">The type name is not supported.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectSelector.SelectMappedObjects``1(System.String,System.Object[])">
      <summary>Retrieves a list of mapped data objects for the specified type name, filtered by the specified restrictions.</summary>
      <returns>A list of <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObject" /> objects for the specified type, matching the specified restrictions.</returns>
      <param name="specificTypeName">The name of the type to retrieve mapped data objects for. This is the generic data type name, which is found in the data object store XML in the &lt;MappedType&gt; element.</param>
      <param name="restrictions">A list of identifiers that restrict the objects returned from the object store to the ones matching these restrictions.</param>
      <typeparam name="T">The type of the parameter.</typeparam>
      <exception cref="T:System.ArgumentException">The type name is invalid.</exception>
      <exception cref="T:System.NotSupportedException">The type name is not supported.</exception>
      <exception cref="T:System.ArgumentException">The restrictions are invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectSelector.SelectMappedObjects``1(System.String,System.Object[],System.Boolean)">
      <summary>Retrieves a list of mapped data objects for the specified type name, filtered by the specified restrictions.</summary>
      <returns>A list of <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObject" /> objects for the specified type, matching the specified restrictions.</returns>
      <param name="specificTypeName">The name of the type to retrieve mapped data objects for. This is the generic data type name, which is found in the data object store XML in the &lt;MappedType&gt; element.</param>
      <param name="restrictions">A list of identifiers that restrict the objects returned from the object store to the ones matching these restrictions.</param>
      <param name="refresh">A Boolean value indicating whether to update the list of required restrictions and properties.</param>
      <typeparam name="T">The type of the parameter.</typeparam>
      <exception cref="T:System.ArgumentException">The type name is invalid.</exception>
      <exception cref="T:System.NotSupportedException">The type name is not supported.</exception>
      <exception cref="T:System.ArgumentException">The restrictions are invalid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectSelector.SupportsType``1">
      <summary>Indicates whether the mapped object selector can map the relational object type represented by the generic type T to an underlying type.</summary>
      <returns>true if the type is supported; otherwise, false.</returns>
      <typeparam name="T">The type of the parameter.</typeparam>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectSelector.SupportsType``1(System.String)">
      <summary>Indicates whether the mapped object selector can map the relational object type represented by the generic type T and the specific type name to an underlying type.</summary>
      <returns>true if the type is supported; otherwise, false.</returns>
      <param name="specificTypeName">The specific type name of the relational object to examine.</param>
      <typeparam name="T">The type of the parameter.</typeparam>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectSubstitutionValue">
      <summary>Represents a substitution value for a data object support mapped type.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectSubstitutionValue.Conversion">
      <summary>Gets an <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectConversion" /> object containing the conversion steps.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectConversion" /> object containing the conversion steps.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectSubstitutionValue.MappedRestrictions">
      <summary>Gets the mapped restrictions that are to be converted to underlying restrictions.</summary>
      <returns>A collection of string values representing the restrictions that are to be converted to the underlying restrictions.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectType">
      <summary>Represents a data object support mapped type, that is, the generic type that is converted from the underlying data source–specific types.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectType.GetIdentifier(Microsoft.VisualStudio.Data.Services.IVsDataObjectType)">
      <summary>Returns the identifier for this mapped type as a collection of identifier parts.</summary>
      <returns>A collection of identifier parts represented as name/value pairs containing the identifier part names and their corresponding <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectTypeMember" /> objects.</returns>
      <param name="underlyingType">The underlying type to which this mapped type corresponds. This is necessary because the mapped type can map to several underlying types.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectType.GetProperties(Microsoft.VisualStudio.Data.Services.IVsDataObjectType)">
      <summary>Returns the properties of this mapped type.</summary>
      <returns>A collection of name/value pairs containing the mapped properties as the property names and their corresponding <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectTypeMember" /> objects</returns>
      <param name="underlyingType">The underlying type to which this mapped type corresponds. This is necessary because the mapped type can map to several underlying types.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectType.GetSelection(Microsoft.VisualStudio.Data.Services.IVsDataObjectType)">
      <summary>Returns an <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectSelection" /> object representing the content of the Selection XML tag corresponding to this mapped type.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectSelection" /> object representing the content of the Selection XML tag corresponding to this mapped type.</returns>
      <param name="underlyingType">The underlying type to which this mapped type corresponds. This is necessary because the mapped type can map to several underlying types.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectType.Name">
      <summary>Gets the name of the current mapped type.</summary>
      <returns>The name of the current mapped type.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectType.UnderlyingTypes">
      <summary>Gets the data source–specific underlying types that correspond to the mapped type.</summary>
      <returns>A collection of <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectType" /> objects representing the underlying types that correspond to the mapped type.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectTypeMember">
      <summary>Represents a member of a data object support mapped type.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectTypeMember.Conversion">
      <summary>Gets the current instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectConversion" /> stored in this class.</summary>
      <returns>The current instance of the <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectConversion" /> stored in this class.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectTypeMember.Name">
      <summary>Gets the name of the mapped type member.</summary>
      <returns>The name of the mapped type member.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataMappedObjectTypeMember.UnderlyingMembers">
      <summary>Gets the data source–specific underlying members corresponding to this mapped type member as a collection of <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectTypeMember" /> objects.</summary>
      <returns>A collection of <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectTypeMember" /> objects representing the data source–specific underlying members corresponding to this mapped type member.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataObject">
      <summary>Represents a data object.</summary>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataObject.Identifier">
      <summary>Gets an <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectIdentifier" /> object that identifies the current data object.</summary>
      <returns>The current object's identifier.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataObject.IsDeleted">
      <summary>Gets a value indicating whether the data object has been deleted.</summary>
      <returns>true if the data object has been deleted; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataObject.Name">
      <summary>Gets the name of the data object.</summary>
      <returns>The name of the data object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataObject.Properties">
      <summary>Gets an <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectPropertyDictionary" /> object containing the properties of this data object.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectPropertyDictionary" /> object containing the properties of this data object.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataObject.Store">
      <summary>Gets an <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectStore" /> object representing the object store, that is, a cache of data source–specific data objects.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectStore" /> object representing the object store, that is, a cache of data source–specific data objects.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataObject.Type">
      <summary>Gets an <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectType" /> object representing a data object support type that is data source specific.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectType" /> object representing a data object support type that is data source specific.</returns>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEvents">
      <summary>Represents a set of events that are raised when data objects are added to, changed in, or deleted from a data source.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEvents.EventGroupEnded">
      <summary>Occurs when an event group has ended.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEvents.EventGroupStarted">
      <summary>Occurs when an event group starts.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEvents.ObjectAdded">
      <summary>Occurs when a data object is added.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEvents.ObjectChanged">
      <summary>Occurs when a data object is changed.</summary>
    </member>
    <member name="E:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEvents.ObjectDeleted">
      <summary>Occurs when a data object is deleted.</summary>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEventsBroker">
      <summary>Represents the ability to raise events when data objects are added, changed, or deleted on a data source.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEventsBroker.EndEventGroup(System.Int32)">
      <summary>Removes the specified event group.</summary>
      <param name="groupId">A numerical value representing the ID of the event group to end.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="groupId" /> parameter is less than zero, or is different than zero and greater than the count of existing event groups.</exception>
      <exception cref="T:System.ArgumentException">The group ID is not valid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEventsBroker.RaiseObjectAdded(System.Int32,System.String,System.Object[])">
      <summary>Raises the ObjectAdded event or adds the event to the specified event group.</summary>
      <param name="groupId">A numerical value representing the event group identifier. Specify 0 to avoid event groups and raise the event immediately.</param>
      <param name="typeName">The name of the type of the data object for which to raise the event.</param>
      <param name="identifier">An array containing identifier parts that uniquely identify the data object.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="groupId" /> parameter is less than zero, or is different than zero and greater than the count of existing event groups.</exception>
      <exception cref="T:System.ArgumentException">Invalid group ID. The group ID could not be validated.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEventsBroker.RaiseObjectAdded(System.String,System.Object[])">
      <summary>Raises the ObjectAdded event.</summary>
      <param name="typeName">The name of the type of the data object for which to raise the event.</param>
      <param name="identifier">An array containing identifier parts that uniquely identify the data object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEventsBroker.RaiseObjectChanged(System.Int32,System.String,System.Object[])">
      <summary>Raises the ObjectChanged event or adds the event to the specified event group.</summary>
      <param name="groupId">A numerical value representing the event group identifier. Specify 0 to avoid event groups and raise the event immediately.</param>
      <param name="typeName">The name of the type of the data object for which to raise the event.</param>
      <param name="identifier">An array containing identifier parts that uniquely identify the data object.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="groupId" /> parameter is less than zero, or is different than zero and greater than the count of existing event groups.</exception>
      <exception cref="T:System.ArgumentException">Invalid group ID. The group ID could not be validated.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEventsBroker.RaiseObjectChanged(System.Int32,System.String,System.Object[],System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Raises the ObjectChanged event or adds the event to the specified event group.</summary>
      <param name="groupId">A numerical value representing the event group identifier. Specify 0 to avoid event groups and raise the event immediately.</param>
      <param name="typeName">The name of the type of the data object for which to raise the event.</param>
      <param name="identifier">An array containing identifier parts that uniquely identify the data object.</param>
      <param name="propertyValues">The old property values of the changed data object.</param>
      <param name="newPropertyValues">The new property values of the changed data object.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="groupId" /> parameter is less than zero, or is different than zero and greater than the count of existing event groups.</exception>
      <exception cref="T:System.ArgumentException">Invalid group ID. The group ID could not be validated.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEventsBroker.RaiseObjectChanged(System.Int32,System.String,System.Object[],System.Collections.Generic.IDictionary{System.String,System.Object},System.Object[],System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Raises the ObjectChanged event or adds the event to the specified event group.</summary>
      <param name="groupId">A numerical value representing the event group identifier. Specify 0 to avoid event groups and raise the event immediately.</param>
      <param name="typeName">The name of the type of the data object for which to raise the event.</param>
      <param name="identifier">An array containing identifier parts that uniquely identify the old data object.</param>
      <param name="propertyValues">The old property values of the changed data object.</param>
      <param name="newIdentifier">An array containing identifier parts that uniquely identify the new data object.</param>
      <param name="newPropertyValues">The new property values of the changed data object.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="groupId" /> parameter is less than zero, or is different than zero and greater than the count of existing event groups.</exception>
      <exception cref="T:System.ArgumentException">Invalid group ID. The group ID could not be validated.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEventsBroker.RaiseObjectChanged(System.Int32,System.String,System.Object[],System.Object[])">
      <summary>Raises the ObjectChanged event or adds the event to the specified event group.</summary>
      <param name="groupId">A numerical value representing the event group identifier. Specify 0 to avoid event groups and raise the event immediately.</param>
      <param name="typeName">The name of the type of the data object for which to raise the event.</param>
      <param name="identifier">An array containing identifier parts that uniquely identify the old data object.</param>
      <param name="newIdentifier">An array containing identifier parts that uniquely identify the new data object.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="groupId" /> parameter is less than zero, or is different than zero and greater than the count of existing event groups.</exception>
      <exception cref="T:System.ArgumentException">Invalid group ID. The group ID could not be validated.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEventsBroker.RaiseObjectChanged(System.String,System.Object[])">
      <summary>Raises the ObjectChanged event.</summary>
      <param name="typeName">The name of the type of the data object for which to raise the event.</param>
      <param name="identifier">An array containing identifier parts that uniquely identify the data object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEventsBroker.RaiseObjectChanged(System.String,System.Object[],System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Raises the ObjectChanged event.</summary>
      <param name="typeName">The name of the type of the data object for which to raise the event.</param>
      <param name="identifier">An array containing identifier parts that uniquely identify the data object.</param>
      <param name="propertyValues">The old property values of the changed data object.</param>
      <param name="newPropertyValues">The new property values of the changed data object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEventsBroker.RaiseObjectChanged(System.String,System.Object[],System.Collections.Generic.IDictionary{System.String,System.Object},System.Object[],System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>Raises the ObjectChanged event.</summary>
      <param name="typeName">The name of the type of the data object for which to raise the event.</param>
      <param name="identifier">An array containing identifier parts that uniquely identify the old data object.</param>
      <param name="propertyValues">The old property values of the changed data object.</param>
      <param name="newIdentifier">An array containing identifier parts that uniquely identify the new data object.</param>
      <param name="newPropertyValues">The new property values of the changed data object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEventsBroker.RaiseObjectChanged(System.String,System.Object[],System.Object[])">
      <summary>Raises the ObjectChanged event.</summary>
      <param name="typeName">The name of the type of the data object for which to raise the event.</param>
      <param name="identifier">An array containing identifier parts that uniquely identify the old data object.</param>
      <param name="newIdentifier">An array containing identifier parts that uniquely identify the new data object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEventsBroker.RaiseObjectDeleted(System.Int32,System.String,System.Object[])">
      <summary>Raises the ObjectDeleted event or adds the event to the specified event group.</summary>
      <param name="groupId">A numerical value representing the event group identifier. Specify 0 to avoid event groups and raise the event immediately.</param>
      <param name="typeName">The name of the type of the data object for which to raise the event.</param>
      <param name="identifier">An array containing identifier parts that uniquely identify the data object.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="groupId" /> parameter is less than zero, or is different than zero and greater than the count of existing event groups.</exception>
      <exception cref="T:System.ArgumentException">Invalid group ID. The group ID could not be validated.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEventsBroker.RaiseObjectDeleted(System.String,System.Object[])">
      <summary>Raises the ObjectDeleted event.</summary>
      <param name="typeName">The name of the type of the data object for which to raise the event.</param>
      <param name="identifier">An array containing identifier parts that uniquely identify the data object.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEventsBroker.RollbackEventGroup(System.Int32)">
      <summary>Removes the specified event group.</summary>
      <param name="groupId">A numerical value representing the event group identifier. Specify 0 to avoid event groups and raise the event immediately.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="groupId" /> parameter is less than zero, or is different than zero and greater than the count of existing event groups.</exception>
      <exception cref="T:System.ArgumentException">The group ID is not valid.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectChangeEventsBroker.StartEventGroup(System.Int32)">
      <summary>Start a new event group.</summary>
      <returns>The group ID of the new event group.</returns>
      <param name="groupId">A numerical value representing the parent event group ID. Specify 0 to start a top-level event group, or specify a value greater than zero to start an event group beneath this group.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="groupId" /> parameter is less than zero, or is different than zero and greater than the count of existing event groups.</exception>
      <exception cref="T:System.ArgumentException">The group ID is not valid.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectCollection">
      <summary>Represents a collection of data objects that are selected from an object store.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectCollection.Contains(System.Object[])">
      <summary>Indicates whether the collection of data objects contains a data object corresponding to the specified identifier.</summary>
      <returns>true if the specified data object exists in the collection; otherwise, false.</returns>
      <param name="identifier">An array containing the identifier parts that uniquely identify the data object requested.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectCollection.Contains(System.String)">
      <summary>Indicates whether the collection of data objects contains a data object corresponding to the specified identifier.</summary>
      <returns>true if the specified data object exists in the collection; otherwise, false.</returns>
      <param name="identifier">A string containing the identifier parts that uniquely identify the data object requested, separated by a delimiter character.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectCollection.IndexOf(System.Object[])">
      <summary>Returns the index of the data object in the collection that matches the specified identifier.</summary>
      <returns>An integer value, greater than or equal to 0, representing the index of the data object in the collection that matches the specified identifier, or -1 if the data object is not found.</returns>
      <param name="identifier">An array containing the identifier parts that uniquely identify the data object requested.</param>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectCollection.IndexOf(System.String)">
      <summary>Returns the index of the data object in the collection that matches the specified identifier.</summary>
      <returns>An integer value, greater than or equal to 0, representing the index of the data object in the collection that matches the specified identifier, or -1 if the data object is not found.</returns>
      <param name="identifier">A string containing the identifier parts that uniquely identify the data object requested, separated by a delimiter character.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataObjectCollection.Item(System.Object[])">
      <summary>Gets from the collection, the data object that matches the specified identifier.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObject" /> object corresponding to the specified identifier.</returns>
      <param name="identifier">An array containing the identifier parts that uniquely identify the data object requested.</param>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataObjectCollection.Item(System.String)">
      <summary>Gets from the collection the data object that matches the specified identifier.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObject" /> object corresponding to the specified identifier.</returns>
      <param name="identifier">A string containing the identifier parts that uniquely identify the data object requested, separated by a delimiter character.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectIdentifier">
      <summary>Represents the identifier of a data object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectIdentifier.ToArray">
      <summary>Converts the current <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectIdentifier" /> object to an array of identifier parts representing the identifier.</summary>
      <returns>An array of identifier parts representing the identifier.</returns>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectIdentifier.ToString(Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat)">
      <summary>Converts the current <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectIdentifier" /> object to a string that contains the identifier parts, which are separated by a delimiter character.</summary>
      <returns>A string representation of the identifier. The string contains the identifier parts separated by a delimiter character and in the specified format.</returns>
      <param name="format">A value from the <see cref="T:Microsoft.VisualStudio.Data.Services.DataObjectIdentifierFormat" /> enumeration that specifies the type of formatting to use for the data object identifier string value.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectPropertyDictionary">
      <summary>Represents the properties of a data object.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectPropertyDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.String[],System.Int32)">
      <summary>Copies the specified properties from the current collection of properties to the specified array of <see cref="T:System.Collections.Generic.KeyValuePair{System.String,System.Object}" /> objects.</summary>
      <param name="array">The array to copy the properties into.</param>
      <param name="properties">The specific properties to copy. Specify null to copy all the properties.</param>
      <param name="arrayIndex">The index of where to start copying in the destination array.</param>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectService">
      <summary>Represents a service of a data object support type.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectService.GetParameters(System.String)">
      <summary>Returns the parameters of the specified method.</summary>
      <returns>An array containing the parameters of the specified method.</returns>
      <param name="method">The name of the method to get parameters for.</param>
      <exception cref="T:System.ArgumentNullException">The<paramref name=" method" /> parameter is null.</exception>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataObjectService.ImplementationType">
      <summary>Gets the class as a <see cref="T:System.Type" /> that implements the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataObjectSelector" /> support entity. The provider supplies this implementation.</summary>
      <returns>A <see cref="T:System.Type" /> as the class as that implements the <see cref="T:Microsoft.VisualStudio.Data.Services.SupportEntities.IVsDataObjectSelector" /> support entity.</returns>
    </member>
    <member name="P:Microsoft.VisualStudio.Data.Services.IVsDataObjectService.TypeName">
      <summary>Gets the type name associated with the current instance of the data object service.</summary>
      <returns>A string representing the type name associated with the current instance of the data object service.</returns>
      <exception cref="T:System.TypeLoadException">The specified type cannot be loaded from the provider.</exception>
    </member>
    <member name="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectStore">
      <summary>Represents a store, that is, a cache, of data source–specific data objects.</summary>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectStore.CanSelectObjects(System.String)">
      <summary>Indicates whether the specified type can be selected from the data object support XML stream.</summary>
      <returns>true if the type can be selected; otherwise, false.</returns>
      <param name="typeName">The name of the data source–specific type to examine.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectStore.GetDefaultOrdering(System.String)">
      <summary>Returns the default ordering that is used to sort the data source objects selected from the object store.</summary>
      <returns>A string of comma-delimited values representing the data objects that specify the sort order.</returns>
      <param name="typeName">The name of the data source–specific type to get the default ordering for.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectStore.GetExpensiveProperties(System.String)">
      <summary>Retrieves the expensive properties of the specified type.</summary>
      <returns>A list of strings representing the expensive properties for the specified type.</returns>
      <param name="typeName">The name of the data source–specific type to get properties for.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectStore.GetObject(System.String,System.Object[])">
      <summary>Retrieves the specified data object from the object store.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObject" /> representing the data object to retrieve.</returns>
      <param name="typeName">The data source–specific type name of the data object to retrieve.</param>
      <param name="identifier">An array containing the identifier parts that uniquely identify the data object in the object store.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectStore.GetObject(System.String,System.Object[],System.Boolean)">
      <summary>Retrieves the specified data object from the object store.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObject" /> representing the data object to retrieve.</returns>
      <param name="typeName">The data source–specific type name of the data object to retrieve.</param>
      <param name="identifier">An array containing the identifier parts that uniquely identify the data object in the object store.</param>
      <param name="refresh">A Boolean value indicating whether to update the list of required restrictions and properties for the specified type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectStore.GetObject(System.String,System.Object[],System.String[])">
      <summary>Retrieves the specified data object from the object store.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObject" /> representing the data object to retrieve.</returns>
      <param name="typeName">The data source–specific type name of the data object to retrieve.</param>
      <param name="identifier">An array containing the identifier parts that uniquely identify the data object in the object store.</param>
      <param name="properties">Specifies the requested property values of the data object. The current version of DDEX does not support properties.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectStore.GetObject(System.String,System.Object[],System.String[],System.Boolean)">
      <summary>Retrieves the specified data object from the object store.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObject" /> representing the data object to retrieve.</returns>
      <param name="typeName">The data source–specific type name of the data object to retrieve.</param>
      <param name="identifier">An array containing the identifier parts that uniquely identify the data object in the object store.</param>
      <param name="properties">Specifies the requested property values of the data object. The current version of DDEX does not support properties.</param>
      <param name="refresh">A Boolean value indicating whether to update the list of required restrictions and properties for the specified type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectStore.GetRequiredRestrictions(System.String)">
      <summary>Returns the restrictions that are required for selecting objects of the specified type from the object store.</summary>
      <returns>A list of string values representing the required restrictions.</returns>
      <param name="typeName">The data source–specific name of the type for which to retrieve the required restrictions.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectStore.GetSupportedRestrictions(System.String)">
      <summary>Returns all the restrictions that are supported for selecting objects of the specified type from the object store.</summary>
      <returns>A list of string values representing the supported restrictions.</returns>
      <param name="typeName">The data source–specific name of the type for which to retrieve the supported restrictions.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectStore.InvalidateObjects(System.String)">
      <summary>Invalidates the data objects corresponding to the specified type, forcing the data objects to be selected from the data source for future requests, as opposed to retrieving them from the object store cache.</summary>
      <param name="typeName">The data source–specific name of the type to invalidate.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectStore.InvalidateObjects(System.String,System.Object[])">
      <summary>Invalidates the data objects corresponding to the specified type and restrictions, forcing the data objects to be selected from the data source for future requests, as opposed to retrieving them from the object store cache.</summary>
      <param name="typeName">The data source–specific name of the type to invalidate.</param>
      <param name="restrictions">An array containing the restrictions associated with the specified type to invalidate.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectStore.SelectObjects(System.String)">
      <summary>Returns a collection of data objects for the specified type from the object store.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectCollection" /> containing the data objects.</returns>
      <param name="typeName">The data source–specific name of the specified type to retrieve data objects for.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectStore.SelectObjects(System.String,System.Object[])">
      <summary>Returns a collection of data objects for the specified type from the object store, filtered by the specified restrictions.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectCollection" /> containing the data objects.</returns>
      <param name="typeName">The data source–specific name of the specified type to retrieve data objects for.</param>
      <param name="restrictions">The restrictions for filtering the data objects returned.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The required restriction is missing.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectStore.SelectObjects(System.String,System.Object[],System.Boolean)">
      <summary>Returns a collection of data objects for the specified type from the object store, filtered by the specified restrictions.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectCollection" /> containing the data objects.</returns>
      <param name="typeName">The data source–specific name of the specified type to retrieve data objects for.</param>
      <param name="restrictions">The restrictions for filtering the data objects returned.</param>
      <param name="refresh">A Boolean value indicating whether to update the list of required restrictions and properties for the specified type.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The required restriction is missing.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectStore.SelectObjects(System.String,System.Object[],System.String)">
      <summary>Returns a collection of data objects for the specified type from the object store, filtered by the specified restrictions and filter.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectCollection" /> containing the data objects.</returns>
      <param name="typeName">The data source–specific name of the specified type to retrieve data objects for.</param>
      <param name="restrictions">The restrictions for filtering the data objects returned.</param>
      <param name="filter">A filter to further narrow down the selection of data objects when there is no one-to-one mapping between the mapped type and the data source–specific type. The format of the filter is identical to the format of the <see cref="T:System.Data.DataColumn" /> expression.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The required restriction is missing.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectStore.SelectObjects(System.String,System.Object[],System.String,System.String)">
      <summary>Returns a collection of data objects for the specified type from the object store, filtered by the specified restrictions and filter, and sorted according to the specified ordering.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectCollection" /> containing the data objects.</returns>
      <param name="typeName">The data source–specific name of the specified type to retrieve data objects for.</param>
      <param name="restrictions">The restrictions for filtering the data objects returned.</param>
      <param name="filter">A filter to further narrow down the selection of data objects when there is no one-to-one mapping between the mapped type and the data source–specific type. The format of the filter is identical to the format of the <see cref="T:System.Data.DataColumn" /> expression.</param>
      <param name="ordering">A string of comma-delimited data objects representing the sort ordering of the returned data objects.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The required restriction is missing.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectStore.SelectObjects(System.String,System.Object[],System.String[])">
      <summary>Returns a collection of data objects for the specified type from the object store, filtered by the specified restrictions and properties.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectCollection" /> containing the data objects.</returns>
      <param name="typeName">The data source–specific name of the specified type to retrieve data objects for.</param>
      <param name="restrictions">The restrictions for filtering the data objects returned.</param>
      <param name="properties">Specifies the requested property values of the data objects. The current version of DDEX does not support properties.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The required restriction is missing.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectStore.SelectObjects(System.String,System.Object[],System.String[],System.String)">
      <summary>Returns a collection of data objects for the specified type from the object store, filtered by the specified restrictions, properties, and filter.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectCollection" /> containing the data objects.</returns>
      <param name="typeName">The data source–specific name of the specified type to retrieve data objects for.</param>
      <param name="restrictions">The restrictions for filtering the data objects returned.</param>
      <param name="properties">Specifies the requested property values of the data objects. The current version of DDEX does not support properties.</param>
      <param name="filter">A filter to further narrow down the selection of data objects when there is no one-to-one mapping between the mapped type and the data source–specific type. The format of the filter is identical to the format of the <see cref="T:System.Data.DataColumn" /> expression.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="typeName" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The required restriction is missing.</exception>
    </member>
    <member name="M:Microsoft.VisualStudio.Data.Services.IVsDataObjectStore.SelectObjects(System.String,System.Object[],System.String[],System.String,System.String)">
      <summary>Returns a collection of data objects for the specified type from the object store, filtered by the specified restrictions, properties, and filter, and sorted according to the specified ordering.</summary>
      <returns>An <see cref="T:Microsoft.VisualStudio.Data.Services.IVsDataObjectCollection" /> containing the data objects.</returns>
      <param name="typeName">The data source–specific name of the specified type to retrieve data objects for.</param>
      <param name="restrictions">The restrictions for filtering the data objects returned.</param>
      <param name="properties">Specifies the requested property values of the data objects. The current version of DDEX does not support properties.</param>
      <param name="