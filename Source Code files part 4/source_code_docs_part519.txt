    <summary>Returns true if the value of the <see cref="P:System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames.KeyFrames" /> property of this instance of <see cref="T:System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames" /> should be value-serialized.</summary>
      <returns>true if the property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="child"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="childText"></param>
    </member>
    <member name="P:System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames.System#Windows#Media#Animation#IKeyFrameAnimation#KeyFrames">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.QuaternionKeyFrame">
      <summary>Abstract class that, when implemented, defines an animation segment with its own target value and interpolation method for a <see cref="T:System.Windows.Media.Animation.QuaternionAnimationUsingKeyFrames" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrame.#ctor(System.Windows.Media.Media3D.Quaternion)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> class that has the specified target <see cref="P:System.Windows.Media.Animation.QuaternionKeyFrame.Value" />.  </summary>
      <param name="value">The <see cref="P:System.Windows.Media.Animation.QuaternionKeyFrame.Value" /> of the new <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> instance.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrame.#ctor(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> class that has the specified target <see cref="P:System.Windows.Media.Animation.QuaternionKeyFrame.Value" /> and <see cref="P:System.Windows.Media.Animation.QuaternionKeyFrame.KeyTime" />.  </summary>
      <param name="value">The <see cref="P:System.Windows.Media.Animation.QuaternionKeyFrame.Value" /> of the new <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> instance.</param>
      <param name="keyTime">The <see cref="P:System.Windows.Media.Animation.QuaternionKeyFrame.KeyTime" /> of the new <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> instance.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrame.InterpolateValue(System.Windows.Media.Media3D.Quaternion,System.Double)">
      <summary>Returns the interpolated value of a specific key frame at the progress increment provided. </summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Occurs if <paramref name="keyFrameProgress" /> is not between 0.0 and 1.0, inclusive.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrame.InterpolateValueCore(System.Windows.Media.Media3D.Quaternion,System.Double)">
      <summary>Calculates the value of a key frame at the progress increment provided. </summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from; typically the value of the previous key frame.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.QuaternionKeyFrame.KeyTime">
      <summary> Gets or sets the time at which the key frame's target <see cref="P:System.Windows.Media.Animation.QuaternionKeyFrame.Value" /> should be reached.  </summary>
      <returns>The time at which the key frame's current value should be equal to its <see cref="P:System.Windows.Media.Animation.QuaternionKeyFrame.Value" /> property. The default value is <see cref="P:System.Windows.Media.Animation.KeyTime.Uniform" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.QuaternionKeyFrame.KeyTimeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.QuaternionKeyFrame.KeyTime" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.QuaternionKeyFrame.KeyTime" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.QuaternionKeyFrame.System#Windows#Media#Animation#IKeyFrame#Value">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.QuaternionKeyFrame.Value">
      <summary> Gets or sets the key frame's target value.  </summary>
      <returns>The key frame's target value, which is the value of this key frame at its specified <see cref="P:System.Windows.Media.Animation.QuaternionKeyFrame.KeyTime" />. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.QuaternionKeyFrame.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.QuaternionKeyFrame.Value" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.QuaternionKeyFrame.Value" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.QuaternionKeyFrameCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> objects. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrameCollection" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.Add(System.Windows.Media.Animation.QuaternionKeyFrame)">
      <summary>Adds a <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> to the end of the collection. </summary>
      <returns>The index at which the <paramref name="keyFrame" /> was added.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> to add to the end of the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.Clear">
      <summary>Removes all <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> objects from the collection. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrameCollection" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.CloneCore(System.Windows.Freezable)">
      <summary>Makes this instance a deep copy of the specified <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrameCollection" />. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrameCollection" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes this instance a modifiable deep copy of the specified <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrameCollection" /> using current property values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrameCollection" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.Contains(System.Windows.Media.Animation.QuaternionKeyFrame)">
      <summary>Gets a value that indicates whether the collection contains the specified <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" />. </summary>
      <returns>true if the collection contains <paramref name="keyFrame" />; otherwise, false.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.CopyTo(System.Windows.Media.Animation.QuaternionKeyFrame[],System.Int32)">
      <summary>Copies all of the <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> objects in a collection to a specified array. </summary>
      <param name="array">Identifies the array to which content is copied.</param>
      <param name="index">Index position in the array to which the contents of the collection are copied.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.QuaternionKeyFrameCollection.Count">
      <summary>Gets the number of key frames contained in the <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrameCollection" />.</summary>
      <returns>The number of key frames contained in the <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrameCollection" />. </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.CreateInstanceCore">
      <summary>Creates a new, frozen instance of <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrameCollection" />.</summary>
      <returns>A frozen instance of <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrameCollection" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.QuaternionKeyFrameCollection.Empty">
      <summary> Gets an empty <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrameCollection" />.  </summary>
      <returns>An empty <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrameCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.FreezeCore(System.Boolean)">
      <summary>Makes this instance of <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrameCollection" /> read-only or determines whether it can be made read-only.</summary>
      <returns>If <paramref name="isChecking" /> is true, this method returns true if this instance can be made read-only, or false if it cannot be made read-only. If <paramref name="isChecking" /> is false, this method returns true if this instance is now read-only, or false if it cannot be made read-only, with the side effect of having begun to change the frozen status of this object.</returns>
      <param name="isChecking">true to check if this instance can be frozen; false to freeze this instance. </param>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrameCollection" /> object. </summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrameCollection" /> object to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a frozen clone of the specified <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrameCollection" />. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrameCollection" /> to copy and freeze.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.GetEnumerator">
      <summary> Returns an enumerator that can iterate through the collection. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.IndexOf(System.Windows.Media.Animation.QuaternionKeyFrame)">
      <summary> Searches for the specified <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> and returns the zero-based index of the first occurrence within the entire collection.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="keyFrame" /> within the entire collection, if found; otherwise, -1.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.Insert(System.Int32,System.Windows.Media.Animation.QuaternionKeyFrame)">
      <summary>Inserts a <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> into a specific location within the collection. </summary>
      <param name="index">The index position at which the <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> is inserted.</param>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> object to insert in the collection.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.QuaternionKeyFrameCollection.IsFixedSize">
      <summary>Gets a value that indicates if the collection size can ever change.</summary>
      <returns>true if the collection is frozen; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.QuaternionKeyFrameCollection.IsReadOnly">
      <summary> Gets a value that indicates if the collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.QuaternionKeyFrameCollection.IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
      <returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.QuaternionKeyFrameCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> at the specified index position.  </summary>
      <returns>The <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> at the specified index.</returns>
      <param name="index">The zero-based index of the <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> to get or set.</param>
      <exception cref="T:System.InvalidOperationException">The attempt to modify the collection is invalid because the collection is frozen (its <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Windows.Media.Animation.QuaternionKeyFrameCollection.Count" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.Remove(System.Windows.Media.Animation.QuaternionKeyFrame)">
      <summary>Removes a <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> object from the collection. </summary>
      <param name="keyFrame">Identifies the <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> to remove from the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> at the specified index position from the collection. </summary>
      <param name="index">Index position of the <see cref="T:System.Windows.Media.Animation.QuaternionKeyFrame" /> to be removed.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.QuaternionKeyFrameCollection.SyncRoot">
      <summary> Gets an object that can be used to synchronize access to the collection. </summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="array"></param>
      <param name="index"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.System#Collections#IList#Add(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.System#Collections#IList#Contains(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code. </summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code. </summary>
      <param name="index"></param>
      <param name="keyFrame"></param>
    </member>
    <member name="P:System.Windows.Media.Animation.QuaternionKeyFrameCollection.System#Collections#IList#Item(System.Int32)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="index"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.QuaternionKeyFrameCollection.System#Collections#IList#Remove(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code. </summary>
      <param name="keyFrame"></param>
    </member>
    <member name="T:System.Windows.Media.Animation.QuinticEase">
      <summary>Represents an easing function that creates an animation that accelerates and/or decelerates using the formula f(t) = t5.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.QuinticEase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.QuinticEase" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.QuinticEase.CreateInstanceCore">
      <summary>Creates a new instance of the <see cref="T:System.Windows.Freezable" /> derived class. When creating a derived class, you must override this method.</summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.QuinticEase.EaseInCore(System.Double)">
      <summary>Provides the logic portion of the easing function that you can override to produce the <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> mode of the custom easing function.</summary>
      <returns>A double that represents the transformed progress.</returns>
      <param name="normalizedTime">Normalized time (progress) of the animation.</param>
    </member>
    <member name="T:System.Windows.Media.Animation.RectAnimation">
      <summary>Animates the value of a <see cref="T:System.Windows.Rect" /> property between two target values using linear interpolation. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimation.#ctor">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.RectAnimation" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimation.#ctor(System.Windows.Rect,System.Windows.Duration)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.RectAnimation" /> class that animates to the specified value over the specified duration. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
      <param name="toValue">The destination value of the animation. </param>
      <param name="duration">The length of time the animation takes to play from start to finish, once. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimation.#ctor(System.Windows.Rect,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.RectAnimation" /> class that animates to the specified value over the specified duration and has the specified fill behavior. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
      <param name="toValue">The destination value of the animation. </param>
      <param name="duration">The length of time the animation takes to play from start to finish, once. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
      <param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimation.#ctor(System.Windows.Rect,System.Windows.Rect,System.Windows.Duration)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.RectAnimation" /> class that animates from the specified starting value to the specified destination value over the specified duration. </summary>
      <param name="fromValue">The starting value of the animation.</param>
      <param name="toValue">The destination value of the animation. </param>
      <param name="duration">The length of time the animation takes to play from start to finish, once. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimation.#ctor(System.Windows.Rect,System.Windows.Rect,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.RectAnimation" /> class that animates from the specified starting value to the specified destination value over the specified duration and has the specified fill behavior. </summary>
      <param name="fromValue">The starting value of the animation.</param>
      <param name="toValue">The destination value of the animation. </param>
      <param name="duration">The length of time the animation takes to play from start to finish, once. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
      <param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.RectAnimation.By">
      <summary> Gets or sets the total amount by which the animation changes its starting value.  </summary>
      <returns>The total amount by which the animation changes its starting value. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.RectAnimation.ByProperty">
      <summary> Identifies the <see cref="P:System.Windows.Media.Animation.RectAnimation.By" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.RectAnimation.By" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimation.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.RectAnimation" />, making deep copies of this object's values. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimation.CreateInstanceCore">
      <summary>Creates a new instance of the <see cref="T:System.Windows.Media.Animation.RectAnimation" />.            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.RectAnimation.EasingFunction">
      <summary>Gets or sets the easing function applied to this animation.</summary>
      <returns>The easing function applied to this animation.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.RectAnimation.EasingFunctionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.RectAnimation.EasingFunction" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.RectAnimation.EasingFunction" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.RectAnimation.From">
      <summary> Gets or sets the animation's starting value.  </summary>
      <returns>The starting value of the animation. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.RectAnimation.FromProperty">
      <summary> Identifies the <see cref="P:System.Windows.Media.Animation.RectAnimation.From" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.RectAnimation.From" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimation.GetCurrentValueCore(System.Windows.Rect,System.Windows.Rect,System.Windows.Media.Animation.AnimationClock)">
      <summary>Calculates a value that represents the current value of the property being animated, as determined by the <see cref="T:System.Windows.Media.Animation.RectAnimation" />.</summary>
      <returns>The calculated value of the property, as determined by the current animation.</returns>
      <param name="defaultOriginValue">The suggested origin value, used if the animation does not have its own explicitly set start value.</param>
      <param name="defaultDestinationValue">The suggested destination value, used if the animation does not have its own explicitly set end value.</param>
      <param name="animationClock">An <see cref="T:System.Windows.Media.Animation.AnimationClock" /> that generates the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> used by the animation.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.RectAnimation.IsAdditive">
      <summary>Gets or sets a value that indicates whether the target property's current value should be added to this animation's starting value.  </summary>
      <returns>true if the target property's current value should be added to this animation's starting value; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.RectAnimation.IsCumulative">
      <summary> Gets or sets a value that specifies whether the animation's value accumulates when it repeats.  </summary>
      <returns>true if the animation accumulates its values when its <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" /> property causes it to repeat its simple duration; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.RectAnimation.To">
      <summary> Gets or sets the animation's ending value.  </summary>
      <returns>The ending value of the animation. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.RectAnimation.ToProperty">
      <summary> Identifies the <see cref="P:System.Windows.Media.Animation.RectAnimation.To" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.RectAnimation.To" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.RectAnimationBase">
      <summary>Abstract class that, when implemented, animates a <see cref="T:System.Windows.Rect" /> value. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimationBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.RectAnimationBase" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimationBase.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.RectAnimationBase" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
      <summary>Gets the current value of the animation.</summary>
      <returns>The current value of the animation.</returns>
      <param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. </param>
      <param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
      <param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock" /> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> value to be used by the animation to generate its output value.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimationBase.GetCurrentValue(System.Windows.Rect,System.Windows.Rect,System.Windows.Media.Animation.AnimationClock)">
      <summary>Gets the current value of the animation.</summary>
      <returns>The current value of this animation. </returns>
      <param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. </param>
      <param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
      <param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock" /> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> value to be used by the animation to generate its output value.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimationBase.GetCurrentValueCore(System.Windows.Rect,System.Windows.Rect,System.Windows.Media.Animation.AnimationClock)">
      <summary>Calculates a value that represents the current value of the property being animated, as determined by the host animation. </summary>
      <returns>The current value of this animation.</returns>
      <param name="defaultOriginValue">The suggested origin value, used if the animation does not have its own explicitly set start value. </param>
      <param name="defaultDestinationValue">The suggested destination value, used if the animation does not have its own explicitly set end value.</param>
      <param name="animationClock">An <see cref="T:System.Windows.Media.Animation.AnimationClock" /> that generates the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> used by the host animation.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.RectAnimationBase.TargetPropertyType">
      <summary>Gets the type of value this animation generates.</summary>
      <returns>The type of value produced by this animation.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames">
      <summary> Animates the value of a property that takes a <see cref="T:System.Windows.Rect" /> along a set of key frames.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.AddChild(System.Object)">
      <summary>Adds a child <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> to this <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" />. </summary>
      <param name="child">The object to add as the child of this <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" />. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="child" /> parameter is not a <see cref="T:System.Windows.Media.Animation.RectKeyFrame" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.AddText(System.String)">
      <summary>Adds a text string as a child of this <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" />.</summary>
      <param name="childText">The text to add to the <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" />.</param>
      <exception cref="T:System.InvalidOperationException">Child text cannot be added because <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" /> does not accept text as a child until a derived class overrides this behavior to allow text to be added.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.CloneCore(System.Windows.Freezable)">
      <summary>Makes this instance a deep copy of the specified <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" />. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes this instance a modifiable deep copy of the specified <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" /> using current property values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.CreateInstanceCore">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" />. </summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.FreezeCore(System.Boolean)">
      <summary>Makes this instance of a <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" /> object read-only (frozen) or determines whether it can be made read-only.</summary>
      <returns>If <paramref name="isChecking" /> is true, this method returns true if this <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" /> can be made read-only, or false if it cannot be made read-only. If <paramref name="isChecking" /> is false, this method returns true if this <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" /> is now read-only, or false if it cannot be made read-only, with the side effect of having begun to change the frozen status of this object.</returns>
      <param name="isChecking">true to check if this instance can be frozen; false to freeze this instance.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" /> object. </summary>
      <param name="source">The <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" /> object to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a frozen clone of the specified <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" />. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="source">The <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" /> to copy and freeze.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.GetCurrentValueCore(System.Windows.Rect,System.Windows.Rect,System.Windows.Media.Animation.AnimationClock)">
      <summary> Calculates a value that represents the current value of the property being animated, as determined by this instance of <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" />.</summary>
      <returns>The calculated value of the property, as determined by the current instance.</returns>
      <param name="defaultOriginValue">The suggested origin value, used if the animation does not have its own explicitly set start value.</param>
      <param name="defaultDestinationValue">The suggested destination value, used if the animation does not have its own explicitly set end value.</param>
      <param name="animationClock">An <see cref="T:System.Windows.Media.Animation.AnimationClock" /> that generates the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> used by the host animation.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
      <summary>Provides a custom natural <see cref="T:System.Windows.Duration" /> when the <see cref="T:System.Windows.Duration" /> property is set to <see cref="P:System.Windows.Duration.Automatic" />. </summary>
      <returns>If the last key frame of this animation is a <see cref="T:System.Windows.Media.Animation.KeyTime" />, then this value is used as the <see cref="P:System.Windows.Media.Animation.Clock.NaturalDuration" />; otherwise it will be one second.</returns>
      <param name="clock">The <see cref="T:System.Windows.Media.Animation.Clock" /> whose natural duration is desired.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.IsAdditive">
      <summary>Gets or sets a value that indicates whether the animation's output value is added to the base value of the property being animated.  </summary>
      <returns>true if the animation adds its output value to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.IsCumulative">
      <summary>Gets or sets a value that indicates whether the animation's value accumulates when it repeats.</summary>
      <returns>true if the animation accumulates its values when it repeats; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.KeyFrames">
      <summary> Gets or sets the collection of <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> objects that define the animation. </summary>
      <returns>The collection of <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> objects that define the animation. The default value is <see cref="P:System.Windows.Media.Animation.RectKeyFrameCollection.Empty" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.OnChanged">
      <summary>Called when the current <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" /> object is modified.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.ShouldSerializeKeyFrames">
      <summary>Indicates whether the <see cref="P:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.KeyFrames" /> property should be persisted.</summary>
      <returns>true if the property value has changed from its default; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="child"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="childText"></param>
    </member>
    <member name="P:System.Windows.Media.Animation.RectAnimationUsingKeyFrames.System#Windows#Media#Animation#IKeyFrameAnimation#KeyFrames">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.RectKeyFrame">
      <summary>Abstract class that, when implemented, defines an animation segment with its own target value and interpolation method for a <see cref="T:System.Windows.Media.Animation.RectAnimationUsingKeyFrames" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrame.#ctor(System.Windows.Rect)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> class that has the specified target <see cref="P:System.Windows.Media.Animation.RectKeyFrame.Value" />.  </summary>
      <param name="value">The <see cref="P:System.Windows.Media.Animation.RectKeyFrame.Value" /> of the new <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> instance.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrame.#ctor(System.Windows.Rect,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> class that has the specified target <see cref="P:System.Windows.Media.Animation.RectKeyFrame.Value" /> and <see cref="P:System.Windows.Media.Animation.RectKeyFrame.KeyTime" />.  </summary>
      <param name="value">The <see cref="P:System.Windows.Media.Animation.RectKeyFrame.Value" /> of the new <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> instance.</param>
      <param name="keyTime">The <see cref="P:System.Windows.Media.Animation.RectKeyFrame.KeyTime" /> of the new <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> instance.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrame.InterpolateValue(System.Windows.Rect,System.Double)">
      <summary>Returns the interpolated value of a specific key frame at the progress increment provided. </summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Occurs if <paramref name="keyFrameProgress" /> is not between 0.0 and 1.0, inclusive.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrame.InterpolateValueCore(System.Windows.Rect,System.Double)">
      <summary>Calculates the value of a key frame at the progress increment provided. </summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from; typically the value of the previous key frame.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.RectKeyFrame.KeyTime">
      <summary> Gets or sets the time at which the key frame's target <see cref="P:System.Windows.Media.Animation.RectKeyFrame.Value" /> should be reached. </summary>
      <returns>The time at which the key frame's current value should be equal to its <see cref="P:System.Windows.Media.Animation.RectKeyFrame.Value" /> property. The default value is <see cref="P:System.Windows.Media.Animation.KeyTime.Uniform" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.RectKeyFrame.KeyTimeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.RectKeyFrame.KeyTime" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.RectKeyFrame.KeyTime" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.RectKeyFrame.System#Windows#Media#Animation#IKeyFrame#Value">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.RectKeyFrame.Value">
      <summary> Gets or sets the key frame's target value. </summary>
      <returns>The key frame's target value, which is the value of this key frame at its specified <see cref="P:System.Windows.Media.Animation.RectKeyFrame.KeyTime" />. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.RectKeyFrame.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.RectKeyFrame.Value" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.RectKeyFrame.Value" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.RectKeyFrameCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> objects. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.RectKeyFrameCollection" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.Add(System.Windows.Media.Animation.RectKeyFrame)">
      <summary>Adds a <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> to the end of the collection. </summary>
      <returns>The index at which the <paramref name="keyFrame" /> was added.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> to add to the end of the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.Clear">
      <summary>Removes all <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> objects from the collection. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.RectKeyFrameCollection" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.CloneCore(System.Windows.Freezable)">
      <summary>Makes this instance a deep copy of the specified <see cref="T:System.Windows.Media.Animation.RectKeyFrameCollection" />. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.RectKeyFrameCollection" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes this instance a modifiable deep copy of the specified <see cref="T:System.Windows.Media.Animation.RectKeyFrameCollection" /> using current property values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.RectKeyFrameCollection" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.Contains(System.Windows.Media.Animation.RectKeyFrame)">
      <summary>Gets a value that indicates whether the collection contains the specified <see cref="T:System.Windows.Media.Animation.RectKeyFrame" />. </summary>
      <returns>true if the collection contains <paramref name="keyFrame" />; otherwise, false.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.CopyTo(System.Windows.Media.Animation.RectKeyFrame[],System.Int32)">
      <summary>Copies all of the <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> objects in a collection to a specified array. </summary>
      <param name="array">Identifies the array to which content is copied.</param>
      <param name="index">Index position in the array to which the contents of the collection are copied.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.RectKeyFrameCollection.Count">
      <summary>Gets the number of key frames contained in the <see cref="T:System.Windows.Media.Animation.RectKeyFrameCollection" />.</summary>
      <returns>The number of key frames contained in the <see cref="T:System.Windows.Media.Animation.RectKeyFrameCollection" />. </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.CreateInstanceCore">
      <summary>Creates a new, frozen instance of <see cref="T:System.Windows.Media.Animation.RectKeyFrameCollection" />.</summary>
      <returns>A frozen instance of <see cref="T:System.Windows.Media.Animation.RectKeyFrameCollection" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.RectKeyFrameCollection.Empty">
      <summary> Gets an empty <see cref="T:System.Windows.Media.Animation.RectKeyFrameCollection" />.  </summary>
      <returns>An empty <see cref="T:System.Windows.Media.Animation.RectKeyFrameCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.FreezeCore(System.Boolean)">
      <summary>Makes this instance of <see cref="T:System.Windows.Media.Animation.RectKeyFrameCollection" /> unmodifiable or determines whether it can be made unmodifiable.</summary>
      <returns>If <paramref name="isChecking" /> is true, this method returns true if this instance can be made read-only, or false if it cannot be made read-only. If <paramref name="isChecking" /> is false, this method returns true if this instance is now read-only, or false if it cannot be made read-only, with the side effect of having begun to change the frozen status of this object.</returns>
      <param name="isChecking">true to check if this instance can be frozen; false to freeze this instance. </param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.RectKeyFrameCollection" /> object. </summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.RectKeyFrameCollection" /> object to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a frozen clone of the specified <see cref="T:System.Windows.Media.Animation.RectKeyFrameCollection" />. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.RectKeyFrameCollection" /> to copy and freeze.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.GetEnumerator">
      <summary> Returns an enumerator that can iterate through the collection. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.IndexOf(System.Windows.Media.Animation.RectKeyFrame)">
      <summary> Searches for the specified <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> and returns the zero-based index of the first occurrence within the entire collection.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="keyFrame" /> within the entire collection, if found; otherwise, -1.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.Insert(System.Int32,System.Windows.Media.Animation.RectKeyFrame)">
      <summary>Inserts a <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> into a specific location within the collection. </summary>
      <param name="index">The index position at which the <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> is inserted.</param>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> object to insert in the collection.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.RectKeyFrameCollection.IsFixedSize">
      <summary>Gets a value that indicates if the collection size can ever change.</summary>
      <returns>true if the collection is frozen; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.RectKeyFrameCollection.IsReadOnly">
      <summary> Gets a value that indicates if the collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.RectKeyFrameCollection.IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
      <returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.RectKeyFrameCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> at the specified index position.  </summary>
      <returns>The <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> at the specified index.</returns>
      <param name="index">The zero-based index of the <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> to get or set.</param>
      <exception cref="T:System.InvalidOperationException">The attempt to modify the collection is invalid because the collection is frozen (its <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Windows.Media.Animation.RectKeyFrameCollection.Count" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.Remove(System.Windows.Media.Animation.RectKeyFrame)">
      <summary>Removes a <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> object from the collection. </summary>
      <param name="keyFrame">Identifies the <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> to remove from the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> at the specified index position from the collection. </summary>
      <param name="index">Index position of the <see cref="T:System.Windows.Media.Animation.RectKeyFrame" /> to be removed.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.RectKeyFrameCollection.SyncRoot">
      <summary> Gets an object that can be used to synchronize access to the collection. </summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="array"></param>
      <param name="index"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.System#Collections#IList#Add(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.System#Collections#IList#Contains(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code. </summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code. </summary>
      <param name="index"></param>
      <param name="keyFrame"></param>
    </member>
    <member name="P:System.Windows.Media.Animation.RectKeyFrameCollection.System#Collections#IList#Item(System.Int32)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="index"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.RectKeyFrameCollection.System#Collections#IList#Remove(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code. </summary>
      <param name="keyFrame"></param>
    </member>
    <member name="T:System.Windows.Media.Animation.RepeatBehavior">
      <summary>Describes how a <see cref="T:System.Windows.Media.Animation.Timeline" /> repeats its simple duration.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.#ctor(System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> structure with the specified iteration count. </summary>
      <param name="count">A number greater than or equal to 0 that specifies the number of iterations to make. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> evaluates to infinity, a value that is not a number, or is negative.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.#ctor(System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> structure with the specified repeat duration. </summary>
      <param name="duration">The total length of time that the <see cref="T:System.Windows.Media.Animation.Timeline" /> should play (its active duration). </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="duration" /> evaluates to a negative number.</exception>
    </member>
    <member name="P:System.Windows.Media.Animation.RepeatBehavior.Count">
      <summary>Gets the number of times a <see cref="T:System.Windows.Media.Animation.Timeline" /> should repeat. </summary>
      <returns>The numeric value representing the number of iterations to repeat.</returns>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> describes a repeat duration, not an iteration count.</exception>
    </member>
    <member name="P:System.Windows.Media.Animation.RepeatBehavior.Duration">
      <summary>Gets the total length of time a <see cref="T:System.Windows.Media.Animation.Timeline" /> should play. </summary>
      <returns>The total length of time a timeline should play. </returns>
      <exception cref="T:System.InvalidOperationException">This <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> does not describe a repeat duration; it describes an iteration count.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.Equals(System.Object)">
      <summary>Indicates whether this instance is equal to the specified object. </summary>
      <returns>true if <paramref name="value" /> is a <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> that represents the same repeat behavior as this instance; otherwise, false.</returns>
      <param name="value">The object to compare with this instance.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.Equals(System.Windows.Media.Animation.RepeatBehavior)">
      <summary>Returns a value that indicates whether this instance is equal to the specified <see cref="T:System.Windows.Media.Animation.RepeatBehavior" />. </summary>
      <returns>true if both the type and repeat behavior of <paramref name="repeatBehavior" /> are equal to this instance; otherwise, false.</returns>
      <param name="repeatBehavior">The value to compare to this instance.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.Equals(System.Windows.Media.Animation.RepeatBehavior,System.Windows.Media.Animation.RepeatBehavior)">
      <summary>Indicates whether the two specified <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> structures are equal. </summary>
      <returns>true if both the type and repeat behavior of <paramref name="repeatBehavior1" /> are equal to that of <paramref name="repeatBehavior2" />; otherwise, false.</returns>
      <param name="repeatBehavior1">The first value to compare.</param>
      <param name="repeatBehavior2">The second value to compare.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.RepeatBehavior.Forever">
      <summary>Gets a <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> that specifies an infinite number of repetitions.  </summary>
      <returns>A <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> that specifies an infinite number of repetitions.   </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.GetHashCode">
      <summary> Returns the hash code of this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.RepeatBehavior.HasCount">
      <summary>Gets a value that indicates whether the repeat behavior has a specified iteration count.    </summary>
      <returns>true if the specified type refers to an iteration count; otherwise, false. </returns>
    </member>
    <member name="P:System.Windows.Media.Animation.RepeatBehavior.HasDuration">
      <summary>Gets a value that indicates whether the repeat behavior has a specified repeat duration. </summary>
      <returns>true if the specified type refers to a repeat duration; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.op_Equality(System.Windows.Media.Animation.RepeatBehavior,System.Windows.Media.Animation.RepeatBehavior)">
      <summary>Indicates whether the two specified <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> instances are equal. </summary>
      <returns>true if both the type and repeat behavior of <paramref name="repeatBehavior1" /> are equal to that of <paramref name="repeatBehavior2" />; otherwise, false.</returns>
      <param name="repeatBehavior1">The first value to compare.</param>
      <param name="repeatBehavior2">The second value to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.op_Inequality(System.Windows.Media.Animation.RepeatBehavior,System.Windows.Media.Animation.RepeatBehavior)">
      <summary>Indicates whether the two <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> instances are not equal. </summary>
      <returns>true if <paramref name="repeatBehavior1" /> and <paramref name="repeatBehavior2" /> are different types or the repeat behavior properties are not equal; otherwise false.</returns>
      <param name="repeatBehavior1">The first value to compare.</param>
      <param name="repeatBehavior2">The second value to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="format"></param>
      <param name="formatProvider"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.ToString">
      <summary>Returns a string representation of this <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> instance. </summary>
      <returns>A string representation of this instance.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehavior.ToString(System.IFormatProvider)">
      <summary>Returns a string representation of this <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> instance with the specified format. </summary>
      <returns>A string representation of this instance.</returns>
      <param name="formatProvider">The format used to construct the return value.</param>
    </member>
    <member name="T:System.Windows.Media.Animation.RepeatBehaviorConverter">
      <summary>Converts instances of <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> to and from other data types.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehaviorConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.RepeatBehaviorConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehaviorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether or not conversion from a specified data type is possible.</summary>
      <returns>true if conversion is supported; otherwise, false.</returns>
      <param name="td">Context information required for conversion.</param>
      <param name="t">Type to evaluate for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehaviorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if conversion to a specified type is possible. </summary>
      <returns>true if conversion is possible; otherwise, false.</returns>
      <param name="context">Context information required for conversion.</param>
      <param name="destinationType">Destination type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehaviorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts a given string value to an instance of <see cref="T:System.Windows.Media.Animation.RepeatBehaviorConverter" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> object based on <paramref name="value" />.</returns>
      <param name="td">Context information required for conversion.</param>
      <param name="cultureInfo">Cultural information to respect during conversion.</param>
      <param name="value">Object being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.RepeatBehaviorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts an instance of <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> to a supported destination type.</summary>
      <returns>The only supported destination types are <see cref="T:System.String" /> and <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" />.</returns>
      <param name="context">Context information required for conversion.</param>
      <param name="cultureInfo">Cultural information to respect during conversion.</param>
      <param name="value">Object being evaluated for conversion.</param>
      <param name="destinationType">Destination type being evaluated for conversion.</param>
    </member>
    <member name="T:System.Windows.Media.Animation.Rotation3DAnimation">
      <summary>Animates the value of a <see cref="T:System.Windows.Media.Media3D.Rotation3D" /> property using linear interpolation between two values determined by the combination of <see cref="P:System.Windows.Media.Animation.Rotation3DAnimation.From" />, <see cref="P:System.Windows.Media.Animation.Rotation3DAnimation.To" />, or <see cref="P:System.Windows.Media.Animation.Rotation3DAnimation.By" /> properties that are set for the animation. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Rotation3DAnimation" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimation.#ctor(System.Windows.Media.Media3D.Rotation3D,System.Windows.Duration)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Rotation3DAnimation" /> class that animates to the specified value over the specified duration. The starting value for the animation is the base value of the property being animated or the output from another animation.</summary>
      <param name="toValue">The destination value of the animation.</param>
      <param name="duration">The length of time the animation takes to play from start to finish, once. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimation.#ctor(System.Windows.Media.Media3D.Rotation3D,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Rotation3DAnimation" /> class that animates to the specified value over the specified duration and has the specified fill behavior. The starting value for the animation is the base value of the property being animated or the output from another animation.</summary>
      <param name="toValue">The destination value of the animation.</param>
      <param name="duration">The length of time the animation takes to play from start to finish, once. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
      <param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimation.#ctor(System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Media3D.Rotation3D,System.Windows.Duration)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Rotation3DAnimation" /> class that animates from the specified starting value to the specified destination value over the specified duration.</summary>
      <param name="fromValue">The starting value of the animation.</param>
      <param name="toValue">The destination value of the animation.</param>
      <param name="duration">The length of time the animation takes to play from start to finish, once. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimation.#ctor(System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Media3D.Rotation3D,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Rotation3DAnimation" /> class that animates from the specified starting value to the specified destination value over the specified duration and has the specified fill behavior.</summary>
      <param name="fromValue">The starting value of the animation.</param>
      <param name="toValue">The destination value of the animation.</param>
      <param name="duration">The length of time the animation takes to play from start to finish, once. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
      <param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.Rotation3DAnimation.By">
      <summary> Gets or sets the total amount by which the animation changes its starting value.  </summary>
      <returns>The total amount by which the animation changes its starting value.     The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Rotation3DAnimation.ByProperty">
      <summary> Identifies the <see cref="P:System.Windows.Media.Animation.Rotation3DAnimation.By" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Rotation3DAnimation.By" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimation.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.Rotation3DAnimation" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimation.CreateInstanceCore">
      <summary>Creates a new instance of the <see cref="T:System.Windows.Media.Animation.Rotation3DAnimation" />.</summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Rotation3DAnimation.EasingFunction">
      <summary>Gets or sets the easing function applied to this animation.</summary>
      <returns>The easing function applied to this animation.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Rotation3DAnimation.EasingFunctionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.Rotation3DAnimation.EasingFunction" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Rotation3DAnimation.EasingFunction" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Rotation3DAnimation.From">
      <summary> Gets or sets the animation's starting value.  </summary>
      <returns>The starting value of the animation. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Rotation3DAnimation.FromProperty">
      <summary> Identifies the <see cref="P:System.Windows.Media.Animation.Rotation3DAnimation.From" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Rotation3DAnimation.From" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimation.GetCurrentValueCore(System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Animation.AnimationClock)">
      <summary>Calculates a value that represents the current value of the property being animated, as determined by the <see cref="T:System.Windows.Media.Animation.Rotation3DAnimation" />. </summary>
      <returns>The calculated value of the property, as determined by the current animation.</returns>
      <param name="defaultOriginValue">The suggested origin value, used if the animation does not have its own explicitly set start value.</param>
      <param name="defaultDestinationValue">The suggested destination value, used if the animation does not have its own explicitly set end value.</param>
      <param name="animationClock">An <see cref="T:System.Windows.Media.Animation.AnimationClock" /> that generates the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> used by the animation.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.Rotation3DAnimation.IsAdditive">
      <summary>Gets or sets a value that indicates whether the target property's current value should be added to this animation's starting value.  </summary>
      <returns>true if the target property's current value should be added to this animation's starting value; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Rotation3DAnimation.IsCumulative">
      <summary>Gets or sets a value that specifies whether the animation's value accumulates when it repeats.   </summary>
      <returns>true if the animation accumulates its values when its <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" /> property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Rotation3DAnimation.To">
      <summary> Gets or sets the animation's ending value.  </summary>
      <returns>A <see cref="T:System.Windows.Media.Media3D.Rotation3D" /> that represents the animation's ending value. </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Rotation3DAnimation.ToProperty">
      <summary> Identifies the <see cref="P:System.Windows.Media.Animation.Rotation3DAnimation.To" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Rotation3DAnimation.To" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.Rotation3DAnimationBase">
      <summary>Abstract class that, when implemented, animates a <see cref="T:System.Windows.Media.Media3D.Rotation3D" /> value.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimationBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationBase" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimationBase.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationBase" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
      <summary>Gets the current value of the animation.</summary>
      <returns>The current value of the animation.</returns>
      <param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
      <param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
      <param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock" /> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> value to be used by the animation to generate its output value.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimationBase.GetCurrentValue(System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Animation.AnimationClock)">
      <summary>Gets the current value of the animation.</summary>
      <returns>The current value of the animation.</returns>
      <param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. If this animation is the first in a composition chain it will be the base value of the property being animated; otherwise it will be the value returned by the previous animation in the chain.</param>
      <param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
      <param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock" /> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> value to be used by the animation to generate its output value.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimationBase.GetCurrentValueCore(System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Animation.AnimationClock)">
      <summary>Calculates a value that represents the current value of the property being animated, as determined by the host animation. </summary>
      <returns>The calculated value of the property, as determined by the current animation.</returns>
      <param name="defaultOriginValue">The suggested origin value, used if the animation does not have its own explicitly set start value.</param>
      <param name="defaultDestinationValue">The suggested destination value, used if the animation does not have its own explicitly set end value.</param>
      <param name="animationClock">An <see cref="T:System.Windows.Media.Animation.AnimationClock" /> that generates the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> used by the host animation.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.Rotation3DAnimationBase.TargetPropertyType">
      <summary>Gets the type of value this animation generates.</summary>
      <returns>The type of value produced by this animation.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames">
      <summary> Animates the value of a <see cref="T:System.Windows.Media.Media3D.Rotation3D" /> property along a set of <see cref="P:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.KeyFrames" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.AddChild(System.Object)">
      <summary>Adds a child <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> to this <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames" />. </summary>
      <param name="child">The object to be added as the child of this <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames" />. </param>
      <exception cref="T:System.ArgumentException">The parameter <paramref name="child" /> is not a <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.AddText(System.String)">
      <summary>Adds a text string as a child of this <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames" />.</summary>
      <param name="childText">The text added to the <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames" />.</param>
      <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames" /> does not accept text as a child, so this method will raise this exception unless a derived class has overridden this behavior which allows text to be added.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.CloneCore(System.Windows.Freezable)">
      <summary>Makes this instance a deep copy of the specified <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames" />. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes this instance a modifiable deep copy of the specified <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames" /> using current property values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.CreateInstanceCore">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames" />. </summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.FreezeCore(System.Boolean)">
      <summary>Makes this instance of <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames" /> object unmodifiable or determines whether it can be made unmodifiable..</summary>
      <returns>If <paramref name="isChecking" /> is true, this method returns true if this instance can be made read-only, or false if it cannot be made read-only. If <paramref name="isChecking" /> is false, this method returns true if this instance is now read-only, or false if it cannot be made read-only, with the side effect of having begun to change the frozen status of this object.</returns>
      <param name="isChecking">true to check if this instance can be frozen; false to freeze this instance. </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames" /> object. </summary>
      <param name="source">The <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames" /> object to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a frozen clone of the specified <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames" />. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="source">The <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames" /> to copy and freeze.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.GetCurrentValueCore(System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Animation.AnimationClock)">
      <summary> Calculates a value that represents the current value of the property being animated, as determined by this instance of <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames" />.</summary>
      <returns>The calculated value of the property, as determined by the current instance.</returns>
      <param name="defaultOriginValue">The suggested origin value, used if the animation does not have its own explicitly set start value.</param>
      <param name="defaultDestinationValue">The suggested destination value, used if the animation does not have its own explicitly set end value.</param>
      <param name="animationClock">An <see cref="T:System.Windows.Media.Animation.AnimationClock" /> that generates the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> used by the host animation.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
      <summary>Provide a custom natural <see cref="T:System.Windows.Duration" /> when the <see cref="T:System.Windows.Duration" /> property is set to <see cref="P:System.Windows.Duration.Automatic" />. </summary>
      <returns>If the last key frame of this animation is a <see cref="T:System.Windows.Media.Animation.KeyTime" />, then this value is used as the <see cref="P:System.Windows.Media.Animation.Clock.NaturalDuration" />; otherwise it will be one second.</returns>
      <param name="clock">The <see cref="T:System.Windows.Media.Animation.Clock" /> whose natural duration is desired.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.IsAdditive">
      <summary>Gets a value that specifies whether the animation's output value is added to the base value of the property being animated.  </summary>
      <returns>true if the animation adds its output value to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.IsCumulative">
      <summary>Gets or sets a value that specifies whether the animation's value accumulates when it repeats.</summary>
      <returns>true if the animation accumulates its values when its <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" /> property causes it to repeat its simple duration; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.KeyFrames">
      <summary> Gets or sets the collection of <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> objects that define the animation. </summary>
      <returns>The collection of <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> objects that define the animation. The default value is <see cref="P:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.Empty" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.OnChanged">
      <summary>Called when the current <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames" /> object is modified.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.ShouldSerializeKeyFrames">
      <summary>Returns true if the value of the <see cref="P:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.KeyFrames" /> property of this instance of <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames" /> should be value-serialized.</summary>
      <returns>true if the property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="child"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="childText"></param>
    </member>
    <member name="P:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames.System#Windows#Media#Animation#IKeyFrameAnimation#KeyFrames">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.Rotation3DKeyFrame">
      <summary>Abstract class that, when implemented, defines an animation segment with its own target value and interpolation method for a <see cref="T:System.Windows.Media.Animation.Rotation3DAnimationUsingKeyFrames" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrame.#ctor(System.Windows.Media.Media3D.Rotation3D)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> class that has the specified target <see cref="P:System.Windows.Media.Animation.Rotation3DKeyFrame.Value" />.  </summary>
      <param name="value">The <see cref="P:System.Windows.Media.Animation.Rotation3DKeyFrame.Value" /> of the new <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> instance.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrame.#ctor(System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> class that has the specified target <see cref="P:System.Windows.Media.Animation.Rotation3DKeyFrame.Value" /> and <see cref="P:System.Windows.Media.Animation.Rotation3DKeyFrame.KeyTime" />.  </summary>
      <param name="value">The <see cref="P:System.Windows.Media.Animation.Rotation3DKeyFrame.Value" /> of the new <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> instance.</param>
      <param name="keyTime">The <see cref="P:System.Windows.Media.Animation.Rotation3DKeyFrame.KeyTime" /> of the new <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> instance.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrame.InterpolateValue(System.Windows.Media.Media3D.Rotation3D,System.Double)">
      <summary>Returns the interpolated value of a specific key frame at the progress increment provided. </summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Occurs if <paramref name="keyFrameProgress" /> is not between 0.0 and 1.0, inclusive.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrame.InterpolateValueCore(System.Windows.Media.Media3D.Rotation3D,System.Double)">
      <summary>Calculates the value of a key frame at the progress increment provided. </summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from; typically the value of the previous key frame.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.Rotation3DKeyFrame.KeyTime">
      <summary> Gets or sets the time at which the key frame's target <see cref="P:System.Windows.Media.Animation.Rotation3DKeyFrame.Value" /> should be reached.  </summary>
      <returns>The time at which the key frame's current value should be equal to its <see cref="P:System.Windows.Media.Animation.Rotation3DKeyFrame.Value" /> property. The default value is <see cref="P:System.Windows.Media.Animation.KeyTime.Uniform" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Rotation3DKeyFrame.KeyTimeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.Rotation3DKeyFrame.KeyTime" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Rotation3DKeyFrame.KeyTime" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Rotation3DKeyFrame.System#Windows#Media#Animation#IKeyFrame#Value">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.Rotation3DKeyFrame.Value">
      <summary> Gets or sets the key frame's target value.  </summary>
      <returns>The key frame's target value, which is the value of this key frame at its specified <see cref="P:System.Windows.Media.Animation.Rotation3DKeyFrame.KeyTime" />. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Rotation3DKeyFrame.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.Rotation3DKeyFrame.Value" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Rotation3DKeyFrame.Value" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.Rotation3DKeyFrameCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> objects. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrameCollection" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.Add(System.Windows.Media.Animation.Rotation3DKeyFrame)">
      <summary>Adds a <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> to the end of the collection. </summary>
      <returns>The index at which the <paramref name="keyFrame" /> was added.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> to add to the end of the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.Clear">
      <summary>Removes all <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> objects from the collection.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrameCollection" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.CloneCore(System.Windows.Freezable)">
      <summary>Makes this instance a deep copy of the specified <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrameCollection" />. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrameCollection" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes this instance a modifiable deep copy of the specified <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrameCollection" /> using current property values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrameCollection" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.Contains(System.Windows.Media.Animation.Rotation3DKeyFrame)">
      <summary>Gets a value that indicates whether the collection contains the specified <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" />. </summary>
      <returns>true if the collection contains <paramref name="keyFrame" />; otherwise, false.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.CopyTo(System.Windows.Media.Animation.Rotation3DKeyFrame[],System.Int32)">
      <summary>Copies all of the <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> objects in a collection to a specified array. </summary>
      <param name="array">Identifies the array to which content is copied.</param>
      <param name="index">Index position in the array to which the contents of the collection are copied.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.Count">
      <summary>Gets the number of key frames contained in the <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrameCollection" />. </summary>
      <returns>The number of key frames contained in the <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrameCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.CreateInstanceCore">
      <summary>Creates a new, frozen instance of <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrameCollection" />.              </summary>
      <returns>A frozen instance of <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrameCollection" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.Empty">
      <summary>Gets an empty <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrameCollection" />. </summary>
      <returns>An empty <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrameCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.FreezeCore(System.Boolean)">
      <summary>Makes this instance of <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrameCollection" /> unmodifiable or determines whether it can be made unmodifiable.</summary>
      <returns>If <paramref name="isChecking" /> is true, this method returns true if this instance can be made read-only, or false if it cannot be made read-only. If <paramref name="isChecking" /> is false, this method returns true if this instance is now read-only, or false if it cannot be made read-only, with the side effect of having begun to change the frozen status of this object.</returns>
      <param name="isChecking">true to check if this instance can be frozen; false to freeze this instance. </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrameCollection" /> object. </summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrameCollection" /> object to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a frozen clone of the specified <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrameCollection" />. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrameCollection" /> to copy and freeze.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the collection. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.IndexOf(System.Windows.Media.Animation.Rotation3DKeyFrame)">
      <summary>Searches for the specified <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> and returns the zero-based index of the first occurrence within the entire collection. </summary>
      <returns>The zero-based index of the first occurrence of <paramref name="keyFrame" /> within the entire collection, if found; otherwise, -1.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.Insert(System.Int32,System.Windows.Media.Animation.Rotation3DKeyFrame)">
      <summary>Inserts a <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> into a specific location within the collection.  </summary>
      <param name="index">The index position at which the <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> is inserted.</param>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> object to insert in the collection.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.IsFixedSize">
      <summary>Gets a value that indicates if the collection is frozen. </summary>
      <returns>true if the collection is frozen; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.IsReadOnly">
      <summary>Gets a value that indicates if the collection is read-only. </summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is synchronized (thread-safe).</summary>
      <returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> at the specified index position. </summary>
      <returns>The <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> at the specified index.</returns>
      <param name="index">The zero-based index of the <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> to get or set.</param>
      <exception cref="T:System.InvalidOperationException">The attempt to modify the collection is invalid because the collection is frozen (its <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Windows.Media.Animation.Vector3DKeyFrameCollection.Count" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.Remove(System.Windows.Media.Animation.Rotation3DKeyFrame)">
      <summary>Removes a <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> object from the collection. </summary>
      <param name="keyFrame">Identifies the <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> to remove from the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> at the specified index position from the collection. </summary>
      <param name="index">Index position of the <see cref="T:System.Windows.Media.Animation.Rotation3DKeyFrame" /> to be removed.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. </summary>
      <param name="array"></param>
      <param name="index"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.System#Collections#IList#Add(System.Object)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. </summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.System#Collections#IList#Contains(System.Object)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. </summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. </summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. </summary>
      <param name="index"></param>
      <param name="keyFrame"></param>
    </member>
    <member name="P:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.System#Collections#IList#Item(System.Int32)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="index"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.Rotation3DKeyFrameCollection.System#Collections#IList#Remove(System.Object)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. </summary>
      <param name="keyFrame"></param>
    </member>
    <member name="T:System.Windows.Media.Animation.SineEase">
      <summary>Represents an easing function that creates an animation that accelerates and/or decelerates using a sine formula (see remarks below).</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SineEase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SineEase" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SineEase.CreateInstanceCore">
      <summary>Creates a new instance of the <see cref="T:System.Windows.Freezable" /> derived class. When creating a derived class, you must override this method.</summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SineEase.EaseInCore(System.Double)">
      <summary>Provides the logic portion of the easing function that you can override to produce the <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> mode of the custom easing function.</summary>
      <returns>A double that represents the transformed progress.</returns>
      <param name="normalizedTime">Normalized time (progress) of the animation.</param>
    </member>
    <member name="T:System.Windows.Media.Animation.SingleAnimation">
      <summary> Animates the value of a  <see cref="T:System.Single" /> property between two target values using      linear interpolation over a specified <see cref="P:System.Windows.Media.Animation.Timeline.Duration" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimation.#ctor">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SingleAnimation" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimation.#ctor(System.Single,System.Single,System.Windows.Duration)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SingleAnimation" /> class that animates from the specified starting value to the specified destination value over the specified duration. </summary>
      <param name="fromValue">The starting value of the animation.</param>
      <param name="toValue">The destination value of the animation. </param>
      <param name="duration">The length of time the animation takes to play from start to finish, once. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimation.#ctor(System.Single,System.Single,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SingleAnimation" /> class that animates from the specified starting value to the specified destination value over the specified duration and has the specified fill behavior. </summary>
      <param name="fromValue">The starting value of the animation.</param>
      <param name="toValue">The destination value of the animation. </param>
      <param name="duration">The length of time the animation takes to play from start to finish, once. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
      <param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimation.#ctor(System.Single,System.Windows.Duration)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SingleAnimation" /> class that animates to the specified value over the specified duration. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
      <param name="toValue">The destination value of the animation. </param>
      <param name="duration">The length of time the animation takes to play from start to finish, once. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimation.#ctor(System.Single,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SingleAnimation" /> class that animates to the specified value over the specified duration and has the specified fill behavior. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
      <param name="toValue">The destination value of the animation. </param>
      <param name="duration">The length of time the animation takes to play from start to finish, once. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
      <param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SingleAnimation.By">
      <summary> Gets or sets the total amount by which the animation changes its starting value.  </summary>
      <returns>The total amount by which the animation changes its starting value.     The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SingleAnimation.ByProperty">
      <summary> Identifies the <see cref="P:System.Windows.Media.Animation.SingleAnimation.By" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SingleAnimation.By" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimation.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.SingleAnimation" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimation.CreateInstanceCore">
      <summary>Creates a new instance of the <see cref="T:System.Windows.Media.Animation.PointAnimationUsingKeyFrames" />.            </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SingleAnimation.EasingFunction">
      <summary>Gets or sets the easing function applied to this animation.</summary>
      <returns>The easing function applied to this animation.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SingleAnimation.EasingFunctionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SingleAnimation.EasingFunction" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SingleAnimation.EasingFunction" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SingleAnimation.From">
      <summary> Gets or sets the animation's starting value.  </summary>
      <returns>The starting value of the animation. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SingleAnimation.FromProperty">
      <summary> Identifies the <see cref="P:System.Windows.Media.Animation.SingleAnimation.From" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SingleAnimation.From" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimation.GetCurrentValueCore(System.Single,System.Single,System.Windows.Media.Animation.AnimationClock)">
      <summary>Calculates a value that represents the current value of the property being animated, as determined by the <see cref="T:System.Windows.Media.Animation.SingleAnimation" />.  </summary>
      <returns>The calculated value of the property, as determined by the current animation.</returns>
      <param name="defaultOriginValue">The suggested origin value, used if the animation does not have its own explicitly set start value.</param>
      <param name="defaultDestinationValue">The suggested destination value, used if the animation does not have its own explicitly set end value.</param>
      <param name="animationClock">An <see cref="T:System.Windows.Media.Animation.AnimationClock" /> that generates the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> used by the animation.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SingleAnimation.IsAdditive">
      <summary> Gets or sets a value that indicates whether the target property's current value should be added to this animation's starting value.  </summary>
      <returns>true if the target property's current value should be added to this animation's starting value; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SingleAnimation.IsCumulative">
      <summary> Gets or sets a value that specifies whether the animation's value accumulates when it repeats.  </summary>
      <returns>true if the animation accumulates its values when its <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" /> property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SingleAnimation.To">
      <summary> Gets or sets the animation's ending value.  </summary>
      <returns>The ending value of the animation. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SingleAnimation.ToProperty">
      <summary> Identifies the <see cref="P:System.Windows.Media.Animation.SingleAnimation.To" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SingleAnimation.To" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SingleAnimationBase">
      <summary>Abstract class that, when implemented, animates a <see cref="T:System.Single" /> value. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimationBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SingleAnimationBase" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimationBase.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.SingleAnimationBase" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
      <summary>Gets the current value of the animation.</summary>
      <returns>The current value of the animation.</returns>
      <param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. </param>
      <param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
      <param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock" /> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> value to be used by the animation to generate its output value.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimationBase.GetCurrentValue(System.Single,System.Single,System.Windows.Media.Animation.AnimationClock)">
      <summary>Gets the current value of the animation.</summary>
      <returns>The current value of the animation.</returns>
      <param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. </param>
      <param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
      <param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock" /> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> value to be used by the animation to generate its output value.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimationBase.GetCurrentValueCore(System.Single,System.Single,System.Windows.Media.Animation.AnimationClock)">
      <summary>Calculates a value that represents the current value of the property being animated, as determined by the host animation. </summary>
      <returns>The calculated value of the property, as determined by the current animation.</returns>
      <param name="defaultOriginValue">The suggested origin value, used if the animation does not have its own explicitly set start value. </param>
      <param name="defaultDestinationValue">The suggested destination value, used if the animation does not have its own explicitly set end value.</param>
      <param name="animationClock">An <see cref="T:System.Windows.Media.Animation.AnimationClock" /> that generates the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> used by the host animation.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SingleAnimationBase.TargetPropertyType">
      <summary>Gets the type of value this animation generates.</summary>
      <returns>The type of value produced by this animation.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames">
      <summary>Animates the value of a <see cref="T:System.Single" /> property along a set of <see cref="P:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.KeyFrames" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.AddChild(System.Object)">
      <summary>Adds a child <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> to this <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames" />. </summary>
      <param name="child">The object to be added as the child of this <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames" />. </param>
      <exception cref="T:System.ArgumentException">The parameter <paramref name="child" /> is not a <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.AddText(System.String)">
      <summary>Adds a text string as a child of this <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames" />.</summary>
      <param name="childText">The text added to the <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames" />.</param>
      <exception cref="T:System.InvalidOperationException">A derived class has not overridden the default behavior, which does not allow text to be added.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.CloneCore(System.Windows.Freezable)">
      <summary>Makes this instance a deep copy of the specified <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames" />. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes this instance a modifiable deep copy of the specified <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames" /> using current property values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.CreateInstanceCore">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames" />. </summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.FreezeCore(System.Boolean)">
      <summary>Makes this instance of <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames" /> object unmodifiable or determines whether it can be made unmodifiable.</summary>
      <returns>If <paramref name="isChecking" /> is true, this method returns true if this instance can be made read-only, or false if it cannot be made read-only. If <paramref name="isChecking" /> is false, this method returns true if this instance is now read-only, or false if it cannot be made read-only, with the side effect of having begun to change the frozen status of this object.</returns>
      <param name="isChecking">true to check if this instance can be frozen; false to freeze this instance. </param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames" /> object. </summary>
      <param name="source">The <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames" /> object to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a frozen clone of the specified <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames" />. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="source">The <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames" /> to copy and freeze.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.GetCurrentValueCore(System.Single,System.Single,System.Windows.Media.Animation.AnimationClock)">
      <summary> Calculates a value that represents the current value of the property being animated, as determined by this instance of <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames" />.</summary>
      <returns>The calculated value of the property, as determined by the current instance.</returns>
      <param name="defaultOriginValue">The suggested origin value, used if the animation does not have its own explicitly set start value.</param>
      <param name="defaultDestinationValue">The suggested destination value, used if the animation does not have its own explicitly set end value.</param>
      <param name="animationClock">An <see cref="T:System.Windows.Media.Animation.AnimationClock" /> that generates the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> used by the host animation.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
      <summary>Provide a custom natural <see cref="T:System.Windows.Duration" /> when the <see cref="T:System.Windows.Duration" /> property is set to <see cref="P:System.Windows.Duration.Automatic" />. </summary>
      <returns>If the last key frame of this animation is a <see cref="T:System.Windows.Media.Animation.KeyTime" />, then this value is used as the <see cref="P:System.Windows.Media.Animation.Clock.NaturalDuration" />; otherwise it will be one second.</returns>
      <param name="clock">The <see cref="T:System.Windows.Media.Animation.Clock" /> whose natural duration is desired.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.IsAdditive">
      <summary>Gets a value that specifies whether the animation's output value is added to the base value of the property being animated.  </summary>
      <returns>true if the animation adds its output value to the base value of the property being animated instead of replacing it; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.IsCumulative">
      <summary>Gets or sets a value that specifies whether the animation's value accumulates when it repeats.</summary>
      <returns>true if the animation accumulates its values when its <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" /> property causes it to repeat its simple duration; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.KeyFrames">
      <summary> Gets or sets the collection of <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> objects that define the animation. </summary>
      <returns>The collection of <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> objects that define the animation. The default value is <see cref="P:System.Windows.Media.Animation.SingleKeyFrameCollection.Empty" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.OnChanged">
      <summary>Called when the current <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames" /> object is modified.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.ShouldSerializeKeyFrames">
      <summary>Returns true if the value of the <see cref="P:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.KeyFrames" /> property of this instance of <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames" /> should be value-serialized.</summary>
      <returns>true if the property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="child"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="childText"></param>
    </member>
    <member name="P:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames.System#Windows#Media#Animation#IKeyFrameAnimation#KeyFrames">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.SingleKeyFrame">
      <summary>Abstract class that, when implemented, defines an animation segment with its own target value and interpolation method for a <see cref="T:System.Windows.Media.Animation.SingleAnimationUsingKeyFrames" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrame.#ctor(System.Single)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> class that has the specified target <see cref="P:System.Windows.Media.Animation.SingleKeyFrame.Value" />.  </summary>
      <param name="value">The <see cref="P:System.Windows.Media.Animation.SingleKeyFrame.Value" /> of the new <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> instance.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrame.#ctor(System.Single,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> class that has the specified target <see cref="P:System.Windows.Media.Animation.SingleKeyFrame.Value" /> and <see cref="P:System.Windows.Media.Animation.SingleKeyFrame.KeyTime" />.  </summary>
      <param name="value">The <see cref="P:System.Windows.Media.Animation.SingleKeyFrame.Value" /> of the new <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> instance.</param>
      <param name="keyTime">The <see cref="P:System.Windows.Media.Animation.SingleKeyFrame.KeyTime" /> of the new <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> instance.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrame.InterpolateValue(System.Single,System.Double)">
      <summary>Returns the interpolated value of a specific key frame at the progress increment provided. </summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Occurs if <paramref name="keyFrameProgress" /> is not between 0.0 and 1.0, inclusive.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrame.InterpolateValueCore(System.Single,System.Double)">
      <summary>Calculates the value of a key frame at the progress increment provided. </summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from; typically the value of the previous key frame.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SingleKeyFrame.KeyTime">
      <summary> Gets or sets the time at which the key frame's target <see cref="P:System.Windows.Media.Animation.SingleKeyFrame.Value" /> should be reached.  </summary>
      <returns>The time at which the key frame's current value should be equal to its <see cref="P:System.Windows.Media.Animation.SingleKeyFrame.Value" /> property. The default value is <see cref="P:System.Windows.Media.Animation.KeyTime.Uniform" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SingleKeyFrame.KeyTimeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SingleKeyFrame.KeyTime" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SingleKeyFrame.KeyTime" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SingleKeyFrame.System#Windows#Media#Animation#IKeyFrame#Value">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.SingleKeyFrame.Value">
      <summary> Gets or sets the key frame's target value.  </summary>
      <returns>The key frame's target value, which is the value of this key frame at its specified <see cref="P:System.Windows.Media.Animation.SingleKeyFrame.KeyTime" />. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SingleKeyFrame.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SingleKeyFrame.Value" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SingleKeyFrame.Value" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SingleKeyFrameCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> objects. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SingleKeyFrameCollection" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.Add(System.Windows.Media.Animation.SingleKeyFrame)">
      <summary>Adds a <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> to the end of the collection. </summary>
      <returns>The index at which the <paramref name="keyFrame" /> was added.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> to add to the end of the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.Clear">
      <summary>Removes all <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> objects from the collection. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.SingleKeyFrameCollection" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.CloneCore(System.Windows.Freezable)">
      <summary>Makes this instance a deep copy of the specified <see cref="T:System.Windows.Media.Animation.SingleKeyFrameCollection" />. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.SingleKeyFrameCollection" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes this instance a modifiable deep copy of the specified <see cref="T:System.Windows.Media.Animation.SingleKeyFrameCollection" /> using current property values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.SingleKeyFrameCollection" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.Contains(System.Windows.Media.Animation.SingleKeyFrame)">
      <summary>Gets a value that indicates whether the collection contains the specified <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" />. </summary>
      <returns>true if the collection contains <paramref name="keyFrame" />; otherwise, false.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.CopyTo(System.Windows.Media.Animation.SingleKeyFrame[],System.Int32)">
      <summary>Copies all of the <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> objects in a collection to a specified array. </summary>
      <param name="array">Identifies the array to which content is copied.</param>
      <param name="index">Index position in the array to which the contents of the collection are copied.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SingleKeyFrameCollection.Count">
      <summary>Gets the number of key frames contained in the <see cref="T:System.Windows.Media.Animation.SingleKeyFrameCollection" />.</summary>
      <returns>The number of key frames contained in the <see cref="T:System.Windows.Media.Animation.SingleKeyFrameCollection" />. </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.CreateInstanceCore">
      <summary>Creates a new, frozen instance of <see cref="T:System.Windows.Media.Animation.SingleKeyFrameCollection" />.</summary>
      <returns>A frozen instance of <see cref="T:System.Windows.Media.Animation.SingleKeyFrameCollection" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SingleKeyFrameCollection.Empty">
      <summary> Gets an empty <see cref="T:System.Windows.Media.Animation.SingleKeyFrameCollection" />.  </summary>
      <returns>An empty <see cref="T:System.Windows.Media.Animation.SingleKeyFrameCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.FreezeCore(System.Boolean)">
      <summary>Makes this instance of <see cref="T:System.Windows.Media.Animation.SingleKeyFrameCollection" /> read-only or determines whether it can be made read-only.</summary>
      <returns>If <paramref name="isChecking" /> is true, this method returns true if this instance can be made read-only, or false if it cannot be made read-only. If <paramref name="isChecking" /> is false, this method returns true if this instance is now read-only, or false if it cannot be made read-only, with the side effect of having begun to change the frozen status of this object.</returns>
      <param name="isChecking">true to check if this instance can be frozen; false to freeze this instance. </param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.SingleKeyFrameCollection" /> object. </summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.SingleKeyFrameCollection" /> object to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a frozen clone of the specified <see cref="T:System.Windows.Media.Animation.SingleKeyFrameCollection" />. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.SingleKeyFrameCollection" /> to copy and freeze.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.GetEnumerator">
      <summary> Returns an enumerator that can iterate through the collection. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.IndexOf(System.Windows.Media.Animation.SingleKeyFrame)">
      <summary> Searches for the specified <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> and returns the zero-based index of the first occurrence within the entire collection.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="keyFrame" /> within the entire collection, if found; otherwise, -1.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.Insert(System.Int32,System.Windows.Media.Animation.SingleKeyFrame)">
      <summary>Inserts a <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> into a specific location within the collection. </summary>
      <param name="index">The index position at which the <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> is inserted.</param>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> object to insert in the collection.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SingleKeyFrameCollection.IsFixedSize">
      <summary>Gets a value that indicates if the collection size can ever change.</summary>
      <returns>true if the collection is frozen; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SingleKeyFrameCollection.IsReadOnly">
      <summary> Gets a value that indicates if the collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SingleKeyFrameCollection.IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
      <returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SingleKeyFrameCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> at the specified index position.  </summary>
      <returns>The <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> at the specified index.</returns>
      <param name="index">The zero-based index of the <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> to get or set.</param>
      <exception cref="T:System.InvalidOperationException">The attempt to modify the collection is invalid because the collection is frozen (its <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Windows.Media.Animation.SingleKeyFrameCollection.Count" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.Remove(System.Windows.Media.Animation.SingleKeyFrame)">
      <summary>Removes a <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> object from the collection. </summary>
      <param name="keyFrame">Identifies the <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> to remove from the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> at the specified index position from the collection. </summary>
      <param name="index">Index position of the <see cref="T:System.Windows.Media.Animation.SingleKeyFrame" /> to be removed.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SingleKeyFrameCollection.SyncRoot">
      <summary> Gets an object that can be used to synchronize access to the collection. </summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="array"></param>
      <param name="index"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.System#Collections#IList#Add(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.System#Collections#IList#Contains(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code. </summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code. </summary>
      <param name="index"></param>
      <param name="keyFrame"></param>
    </member>
    <member name="P:System.Windows.Media.Animation.SingleKeyFrameCollection.System#Collections#IList#Item(System.Int32)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="index"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.SingleKeyFrameCollection.System#Collections#IList#Remove(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code. </summary>
      <param name="keyFrame"></param>
    </member>
    <member name="T:System.Windows.Media.Animation.SizeAnimation">
      <summary> Animates the value of a  <see cref="T:System.Windows.Size" /> property between two target values using      linear interpolation over a specified <see cref="P:System.Windows.Media.Animation.Timeline.Duration" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimation.#ctor">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SizeAnimation" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimation.#ctor(System.Windows.Size,System.Windows.Duration)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SizeAnimation" /> class that animates to the specified value over the specified duration. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
      <param name="toValue">The destination value of the animation. </param>
      <param name="duration">The length of time the animation takes to play from start to finish, once. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimation.#ctor(System.Windows.Size,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SizeAnimation" /> class that animates to the specified value over the specified duration and has the specified fill behavior. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
      <param name="toValue">The destination value of the animation. </param>
      <param name="duration">The length of time the animation takes to play from start to finish, once. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
      <param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimation.#ctor(System.Windows.Size,System.Windows.Size,System.Windows.Duration)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SizeAnimation" /> class that animates from the specified starting value to the specified destination value over the specified duration. </summary>
      <param name="fromValue">The starting value of the animation.</param>
      <param name="toValue">The destination value of the animation. </param>
      <param name="duration">The length of time the animation takes to play from start to finish, once. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimation.#ctor(System.Windows.Size,System.Windows.Size,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SizeAnimation" /> class that animates from the specified starting value to the specified destination value over the specified duration and has the specified fill behavior. </summary>
      <param name="fromValue">The starting value of the animation.</param>
      <param name="toValue">The destination value of the animation. </param>
      <param name="duration">The length of time the animation takes to play from start to finish, once. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
      <param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SizeAnimation.By">
      <summary> Gets or sets the total amount by which the animation changes its starting value.  </summary>
      <returns>The total amount by which the animation changes its starting value.     The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SizeAnimation.ByProperty">
      <summary> Identifies the <see cref="P:System.Windows.Media.Animation.SizeAnimation.By" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SizeAnimation.By" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimation.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.SizeAnimation" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimation.CreateInstanceCore">
      <summary>Creates a new instance of the <see cref="T:System.Windows.Media.Animation.SizeAnimation" />.           </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SizeAnimation.EasingFunction">
      <summary>Gets or sets the easing function applied to this animation.</summary>
      <returns>The easing function applied to this animation.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SizeAnimation.EasingFunctionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SizeAnimation.EasingFunction" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SizeAnimation.EasingFunction" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SizeAnimation.From">
      <summary> Gets or sets the animation's starting value.  </summary>
      <returns>The starting value of the animation. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SizeAnimation.FromProperty">
      <summary> Identifies the <see cref="P:System.Windows.Media.Animation.SizeAnimation.From" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SizeAnimation.From" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimation.GetCurrentValueCore(System.Windows.Size,System.Windows.Size,System.Windows.Media.Animation.AnimationClock)">
      <summary>Calculates a value that represents the current value of the property being animated, as determined by the <see cref="T:System.Windows.Media.Animation.SizeAnimation" />.  </summary>
      <returns>The calculated value of the property, as determined by the current animation.</returns>
      <param name="defaultOriginValue">The suggested origin value, used if the animation does not have its own explicitly set start value.</param>
      <param name="defaultDestinationValue">The suggested destination value, used if the animation does not have its own explicitly set end value.</param>
      <param name="animationClock">An <see cref="T:System.Windows.Media.Animation.AnimationClock" /> that generates the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> used by the animation.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SizeAnimation.IsAdditive">
      <summary>Gets or sets a value that indicates whether the target property's current value should be added to this animation's starting value.  </summary>
      <returns>true if the target property's current value should be added to this animation's starting value; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SizeAnimation.IsCumulative">
      <summary> Gets or sets a value that specifies whether the animation's value accumulates when it repeats.  </summary>
      <returns>true if the animation accumulates its values when its <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" /> property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SizeAnimation.To">
      <summary> Gets or sets the animation's ending value.  </summary>
      <returns>The ending value of the animation. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SizeAnimation.ToProperty">
      <summary> Identifies the <see cref="P:System.Windows.Media.Animation.SizeAnimation.To" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SizeAnimation.To" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SizeAnimationBase">
      <summary>Abstract class that, when implemented, animates a <see cref="T:System.Windows.Size" /> value. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimationBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SizeAnimationBase" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimationBase.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.SizeAnimationBase" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
      <summary>Gets the current value of the animation.</summary>
      <returns>The current value of the animation.</returns>
      <param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. </param>
      <param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
      <param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock" /> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> value to be used by the animation to generate its output value.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimationBase.GetCurrentValue(System.Windows.Size,System.Windows.Size,System.Windows.Media.Animation.AnimationClock)">
      <summary>Gets the current value of the animation.</summary>
      <returns>The current value of this animation.</returns>
      <param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. </param>
      <param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
      <param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock" /> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> value to be used by the animation to generate its output value.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimationBase.GetCurrentValueCore(System.Windows.Size,System.Windows.Size,System.Windows.Media.Animation.AnimationClock)">
      <summary>Calculates a value that represents the current value of the property being animated, as determined by the host animation. </summary>
      <returns>The current value of this animation.</returns>
      <param name="defaultOriginValue">The suggested origin value, used if the animation does not have its own explicitly set start value. </param>
      <param name="defaultDestinationValue">The suggested destination value, used if the animation does not have its own explicitly set end value.</param>
      <param name="animationClock">An <see cref="T:System.Windows.Media.Animation.AnimationClock" /> that generates the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> used by the host animation.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SizeAnimationBase.TargetPropertyType">
      <summary>Gets the type of value this animation generates.</summary>
      <returns>The type of value produced by this animation.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames">
      <summary> Animates the value of a <see cref="T:System.Windows.Size" /> property along a set of <see cref="P:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.KeyFrames" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.AddChild(System.Object)">
      <summary>Adds a child <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> to this <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames" />. </summary>
      <param name="child">The object to be added as the child of this <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames" />. </param>
      <exception cref="T:System.ArgumentException">The parameter <paramref name="child" /> is not a <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.AddText(System.String)">
      <summary>Adds a text string as a child of this <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames" />.</summary>
      <param name="childText">The text added to the <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames" />.</param>
      <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames" /> does not accept text as a child, so this method will raise this exception unless a derived class has overridden this behavior which allows text to be added.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.CloneCore(System.Windows.Freezable)">
      <summary>Makes this instance a deep copy of the specified <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames" />. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes this instance a modifiable deep copy of the specified <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames" /> using current property values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.CreateInstanceCore">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames" />. </summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.FreezeCore(System.Boolean)">
      <summary>Makes this instance of <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames" /> object unmodifiable or determines whether it can be made unmodifiable..</summary>
      <returns>If <paramref name="isChecking" /> is true, this method returns true if this instance can be made read-only, or false if it cannot be made read-only. If <paramref name="isChecking" /> is false, this method returns true if this instance is now read-only, or false if it cannot be made read-only, with the side effect of having begun to change the frozen status of this object.</returns>
      <param name="isChecking">true to check if this instance can be frozen; false to freeze this instance. </param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames" /> object. </summary>
      <param name="source">The <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames" /> object to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a frozen clone of the specified <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames" />. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="source">The <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames" /> to copy and freeze.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.GetCurrentValueCore(System.Windows.Size,System.Windows.Size,System.Windows.Media.Animation.AnimationClock)">
      <summary> Calculates a value that represents the current value of the property being animated, as determined by this instance of <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames" />.</summary>
      <returns>The calculated value of the property, as determined by the current instance.</returns>
      <param name="defaultOriginValue">The suggested origin value, used if the animation does not have its own explicitly set start value.</param>
      <param name="defaultDestinationValue">The suggested destination value, used if the animation does not have its own explicitly set end value.</param>
      <param name="animationClock">An <see cref="T:System.Windows.Media.Animation.AnimationClock" /> that generates the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> used by the host animation.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
      <summary>Provide a custom natural <see cref="T:System.Windows.Duration" /> when the <see cref="T:System.Windows.Duration" /> property is set to <see cref="P:System.Windows.Duration.Automatic" />. </summary>
      <returns>If the last key frame of this animation is a <see cref="T:System.Windows.Media.Animation.KeyTime" />, then this value is used as the <see cref="P:System.Windows.Media.Animation.Clock.NaturalDuration" />; otherwise it will be one second.</returns>
      <param name="clock">The <see cref="T:System.Windows.Media.Animation.Clock" /> whose natural duration is desired.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.IsAdditive">
      <summary>Gets a value that specifies whether the animation's output value is added to the base value of the property being animated.  </summary>
      <returns>true if the animation adds its output value to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.IsCumulative">
      <summary>Gets or sets a value that specifies whether the animation's value accumulates when it repeats.</summary>
      <returns>true if the animation accumulates its values when its <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" /> property causes it to repeat its simple duration; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.KeyFrames">
      <summary> Gets or sets the collection of <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> objects that define the animation. </summary>
      <returns>The collection of <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> objects that define the animation. The default value is <see cref="P:System.Windows.Media.Animation.SizeKeyFrameCollection.Empty" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.OnChanged">
      <summary>Called when the current <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames" /> object is modified.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.ShouldSerializeKeyFrames">
      <summary>Returns true if the value of the <see cref="P:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.KeyFrames" /> property of this instance of <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames" /> should be value-serialized.</summary>
      <returns>true if the property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="child"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="childText"></param>
    </member>
    <member name="P:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames.System#Windows#Media#Animation#IKeyFrameAnimation#KeyFrames">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.SizeKeyFrame">
      <summary>Abstract class that, when implemented, defines an animation segment with its own target value and interpolation method for a <see cref="T:System.Windows.Media.Animation.SizeAnimationUsingKeyFrames" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrame.#ctor(System.Windows.Size)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> class that has the specified target <see cref="P:System.Windows.Media.Animation.SizeKeyFrame.Value" />.  </summary>
      <param name="value">The <see cref="P:System.Windows.Media.Animation.SizeKeyFrame.Value" /> of the new <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> instance.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrame.#ctor(System.Windows.Size,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> class that has the specified target <see cref="P:System.Windows.Media.Animation.SizeKeyFrame.Value" /> and <see cref="P:System.Windows.Media.Animation.SizeKeyFrame.KeyTime" />.  </summary>
      <param name="value">The <see cref="P:System.Windows.Media.Animation.SizeKeyFrame.Value" /> of the new <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> instance.</param>
      <param name="keyTime">The <see cref="P:System.Windows.Media.Animation.SizeKeyFrame.KeyTime" /> of the new <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> instance.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrame.InterpolateValue(System.Windows.Size,System.Double)">
      <summary>Returns the interpolated value of a specific key frame at the progress increment provided. </summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Occurs if <paramref name="keyFrameProgress" /> is not between 0.0 and 1.0, inclusive.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrame.InterpolateValueCore(System.Windows.Size,System.Double)">
      <summary>Calculates the value of a key frame at the progress increment provided. </summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from; typically the value of the previous key frame.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SizeKeyFrame.KeyTime">
      <summary> Gets or sets the time at which the key frame's target <see cref="P:System.Windows.Media.Animation.SizeKeyFrame.Value" /> should be reached.  </summary>
      <returns>The time at which the key frame's current value should be equal to its <see cref="P:System.Windows.Media.Animation.SizeKeyFrame.Value" /> property. The default value is <see cref="P:System.Windows.Media.Animation.KeyTime.Uniform" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SizeKeyFrame.KeyTimeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SizeKeyFrame.KeyTime" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SizeKeyFrame.KeyTime" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SizeKeyFrame.System#Windows#Media#Animation#IKeyFrame#Value">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.SizeKeyFrame.Value">
      <summary> Gets or sets the key frame's target value.  </summary>
      <returns>The key frame's target value, which is the value of this key frame at its specified <see cref="P:System.Windows.Media.Animation.SizeKeyFrame.KeyTime" />. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SizeKeyFrame.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SizeKeyFrame.Value" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SizeKeyFrame.Value" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SizeKeyFrameCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> objects. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SizeKeyFrameCollection" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.Add(System.Windows.Media.Animation.SizeKeyFrame)">
      <summary>Adds a <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> to the end of the collection. </summary>
      <returns>The index at which the <paramref name="keyFrame" /> was added.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> to add to the end of the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.Clear">
      <summary>Removes all <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> objects from the collection. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.SizeKeyFrameCollection" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.CloneCore(System.Windows.Freezable)">
      <summary>Makes this instance a deep copy of the specified <see cref="T:System.Windows.Media.Animation.SizeKeyFrameCollection" />. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.SizeKeyFrameCollection" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes this instance a modifiable deep copy of the specified <see cref="T:System.Windows.Media.Animation.SizeKeyFrameCollection" /> using current property values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.SizeKeyFrameCollection" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.Contains(System.Windows.Media.Animation.SizeKeyFrame)">
      <summary>Gets a value that indicates whether the collection contains the specified <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" />. </summary>
      <returns>true if the collection contains <paramref name="keyFrame" />; otherwise, false.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.CopyTo(System.Windows.Media.Animation.SizeKeyFrame[],System.Int32)">
      <summary>Copies all of the <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> objects in a collection to a specified array. </summary>
      <param name="array">Identifies the array to which content is copied.</param>
      <param name="index">Index position in the array to which the contents of the collection are copied.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SizeKeyFrameCollection.Count">
      <summary>Gets the number of key frames contained in the <see cref="T:System.Windows.Media.Animation.SizeKeyFrameCollection" />.</summary>
      <returns>The number of key frames contained in the <see cref="T:System.Windows.Media.Animation.SizeKeyFrameCollection" />. </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.CreateInstanceCore">
      <summary>Creates a new, frozen instance of <see cref="T:System.Windows.Media.Animation.SizeKeyFrameCollection" />.</summary>
      <returns>A frozen instance of <see cref="T:System.Windows.Media.Animation.SizeKeyFrameCollection" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SizeKeyFrameCollection.Empty">
      <summary> Gets an empty <see cref="T:System.Windows.Media.Animation.SizeKeyFrameCollection" />.  </summary>
      <returns>An empty <see cref="T:System.Windows.Media.Animation.SizeKeyFrameCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.FreezeCore(System.Boolean)">
      <summary>Makes this instance of <see cref="T:System.Windows.Media.Animation.SizeKeyFrameCollection" /> unmodifiable or determines whether it can be made unmodifiable.</summary>
      <returns>If <paramref name="isChecking" /> is true, this method returns true if this instance can be made read-only, or false if it cannot be made read-only. If <paramref name="isChecking" /> is false, this method returns true if this instance is now read-only, or false if it cannot be made read-only, with the side effect of having begun to change the frozen status of this object.</returns>
      <param name="isChecking">true to check if this instance can be frozen; false to freeze this instance. </param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.SizeKeyFrameCollection" /> object. </summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.SizeKeyFrameCollection" /> object to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a frozen clone of the specified <see cref="T:System.Windows.Media.Animation.SizeKeyFrameCollection" />. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.SizeKeyFrameCollection" /> to copy and freeze.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.GetEnumerator">
      <summary> Returns an enumerator that can iterate through the collection. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.IndexOf(System.Windows.Media.Animation.SizeKeyFrame)">
      <summary> Searches for the specified <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> and returns the zero-based index of the first occurrence within the entire collection.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="keyFrame" /> within the entire collection, if found; otherwise, -1.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.Insert(System.Int32,System.Windows.Media.Animation.SizeKeyFrame)">
      <summary>Inserts a <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> into a specific location within the collection. </summary>
      <param name="index">The index position at which the <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> is inserted.</param>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> object to insert in the collection.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SizeKeyFrameCollection.IsFixedSize">
      <summary>Gets a value that indicates if the collection size can ever change.</summary>
      <returns>true if the collection is frozen; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SizeKeyFrameCollection.IsReadOnly">
      <summary> Gets a value that indicates if the collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SizeKeyFrameCollection.IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
      <returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SizeKeyFrameCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> at the specified index position.  </summary>
      <returns>The <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> at the specified index.</returns>
      <param name="index">The zero-based index of the <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> to get or set.</param>
      <exception cref="T:System.InvalidOperationException">The attempt to modify the collection is invalid because the collection is frozen (its <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Windows.Media.Animation.SizeKeyFrameCollection.Count" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.Remove(System.Windows.Media.Animation.SizeKeyFrame)">
      <summary>Removes a <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> object from the collection. </summary>
      <param name="keyFrame">Identifies the <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> to remove from the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> at the specified index position from the collection. </summary>
      <param name="index">Index position of the <see cref="T:System.Windows.Media.Animation.SizeKeyFrame" /> to be removed.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SizeKeyFrameCollection.SyncRoot">
      <summary> Gets an object that can be used to synchronize access to the collection. </summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="array"></param>
      <param name="index"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.System#Collections#IList#Add(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.System#Collections#IList#Contains(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code. </summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code. </summary>
      <param name="index"></param>
      <param name="keyFrame"></param>
    </member>
    <member name="P:System.Windows.Media.Animation.SizeKeyFrameCollection.System#Collections#IList#Item(System.Int32)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="index"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.SizeKeyFrameCollection.System#Collections#IList#Remove(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code. </summary>
      <param name="keyFrame"></param>
    </member>
    <member name="T:System.Windows.Media.Animation.SlipBehavior">
      <summary>Indicates how a <see cref="T:System.Windows.Media.Animation.ParallelTimeline" /> will behave when one or more of its <see cref="T:System.Windows.Media.Animation.Timeline" /> children slips.</summary>
    </member>
    <member name="F:System.Windows.Media.Animation.SlipBehavior.Grow">
      <summary>Indicates that a <see cref="T:System.Windows.Media.Animation.ParallelTimeline" /> will not slip with the child <see cref="T:System.Windows.Media.Animation.Timeline" />, but will expand to fit all slipping <see cref="T:System.Windows.Media.Animation.Timeline" /> children. NOTE: This is only effective when the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> of the <see cref="T:System.Windows.Media.Animation.ParallelTimeline" /> is not explicitly specified.</summary>
    </member>
    <member name="F:System.Windows.Media.Animation.SlipBehavior.Slip">
      <summary>Indicates that a <see cref="T:System.Windows.Media.Animation.ParallelTimeline" /> will slip along with its first child <see cref="T:System.Windows.Media.Animation.Timeline" /> that can slip whenever that child is delayed or accelerated..</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.SplineByteKeyFrame">
      <summary>Animates from the <see cref="T:System.Byte" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.ByteKeyFrame.Value" /> using splined interpolation.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineByteKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineByteKeyFrame" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineByteKeyFrame.#ctor(System.Byte)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineByteKeyFrame" /> class with the specified ending value.  </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineByteKeyFrame.#ctor(System.Byte,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineByteKeyFrame" /> class with the specified ending value and key time. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineByteKeyFrame.#ctor(System.Byte,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineByteKeyFrame" /> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline" />. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
      <param name="keySpline">
        <see cref="T:System.Windows.Media.Animation.KeySpline" /> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline" /> represents a Bezier curve which defines animation progress of the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineByteKeyFrame.CreateInstanceCore">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Animation.SplineByteKeyFrame" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Animation.SplineByteKeyFrame" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineByteKeyFrame.InterpolateValueCore(System.Byte,System.Double)">
      <summary>Uses splined interpolation to transition between the previous key frame value and the value of the current key frame.</summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SplineByteKeyFrame.KeySpline">
      <summary>Gets or sets the two control points that define animation progress for this key frame.  </summary>
      <returns>The two control points that specify the cubic Bezier curve which defines the progress of the key frame.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplineByteKeyFrame.KeySplineProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SplineByteKeyFrame.KeySpline" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SplineByteKeyFrame.KeySpline" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SplineColorKeyFrame">
      <summary>Animates from the <see cref="T:System.Windows.Media.Color" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.ColorKeyFrame.Value" /> using splined interpolation.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineColorKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineColorKeyFrame" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineColorKeyFrame.#ctor(System.Windows.Media.Color)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineColorKeyFrame" /> class with the specified ending value.  </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineColorKeyFrame.#ctor(System.Windows.Media.Color,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineColorKeyFrame" /> class with the specified ending value and key time. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineColorKeyFrame.#ctor(System.Windows.Media.Color,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineColorKeyFrame" /> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline" />. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
      <param name="keySpline">
        <see cref="T:System.Windows.Media.Animation.KeySpline" /> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline" /> represents a Bezier curve which defines animation progress of the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineColorKeyFrame.CreateInstanceCore">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Animation.SplineColorKeyFrame" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Animation.SplineColorKeyFrame" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineColorKeyFrame.InterpolateValueCore(System.Windows.Media.Color,System.Double)">
      <summary>Uses splined interpolation to transition between the previous key frame value and the value of the current key frame.</summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SplineColorKeyFrame.KeySpline">
      <summary>Gets or sets the two control points that define animation progress for this key frame.  </summary>
      <returns>The two control points that specify the cubic Bezier curve which defines the progress of the key frame.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplineColorKeyFrame.KeySplineProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SplineColorKeyFrame.KeySpline" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SplineColorKeyFrame.KeySpline" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SplineDecimalKeyFrame">
      <summary>Animates from the <see cref="T:System.Decimal" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.DecimalKeyFrame.Value" /> using splined interpolation.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineDecimalKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineDecimalKeyFrame" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineDecimalKeyFrame.#ctor(System.Decimal)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineDecimalKeyFrame" /> class with the specified ending value.  </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineDecimalKeyFrame.#ctor(System.Decimal,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineDecimalKeyFrame" /> class with the specified ending value and key time. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineDecimalKeyFrame.#ctor(System.Decimal,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineDecimalKeyFrame" /> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline" />. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
      <param name="keySpline">
        <see cref="T:System.Windows.Media.Animation.KeySpline" /> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline" /> represents a Bezier curve which defines animation progress of the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineDecimalKeyFrame.CreateInstanceCore">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Animation.SplineDecimalKeyFrame" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Animation.SplineDecimalKeyFrame" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineDecimalKeyFrame.InterpolateValueCore(System.Decimal,System.Double)">
      <summary>Uses splined interpolation to transition between the previous key frame value and the value of the current key frame. </summary>
      <returns>The output value of this key frame given the specified base value and progress. </returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SplineDecimalKeyFrame.KeySpline">
      <summary>Gets or sets the two control points that define animation progress for this key frame.  </summary>
      <returns>The two control points that specify the cubic Bezier curve which defines the progress of the key frame.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplineDecimalKeyFrame.KeySplineProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SplineDecimalKeyFrame.KeySpline" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SplineDecimalKeyFrame.KeySpline" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SplineDoubleKeyFrame">
      <summary>Animates from the <see cref="T:System.Double" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.DoubleKeyFrame.Value" /> using splined interpolation.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineDoubleKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineDoubleKeyFrame" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineDoubleKeyFrame.#ctor(System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineDoubleKeyFrame" /> class with the specified ending value.  </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineDoubleKeyFrame.#ctor(System.Double,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineDoubleKeyFrame" /> class with the specified ending value and key time. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineDoubleKeyFrame.#ctor(System.Double,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineDoubleKeyFrame" /> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline" />. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
      <param name="keySpline">
        <see cref="T:System.Windows.Media.Animation.KeySpline" /> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline" /> represents a Bezier curve which defines animation progress of the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineDoubleKeyFrame.CreateInstanceCore">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Animation.SplineDoubleKeyFrame" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Animation.SplineDoubleKeyFrame" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineDoubleKeyFrame.InterpolateValueCore(System.Double,System.Double)">
      <summary>Uses splined interpolation to transition between the previous key frame value and the value of the current key frame.</summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SplineDoubleKeyFrame.KeySpline">
      <summary>Gets or sets the two control points that define animation progress for this key frame.  </summary>
      <returns>The two control points that specify the cubic Bezier curve which defines the progress of the key frame.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplineDoubleKeyFrame.KeySplineProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SplineDoubleKeyFrame.KeySpline" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SplineDoubleKeyFrame.KeySpline" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SplineInt16KeyFrame">
      <summary>Animates from the <see cref="T:System.Int16" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.Int16KeyFrame.Value" /> using splined interpolation.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineInt16KeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt16KeyFrame" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineInt16KeyFrame.#ctor(System.Int16)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt16KeyFrame" /> class with the specified ending value.  </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineInt16KeyFrame.#ctor(System.Int16,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt16KeyFrame" /> class with the specified ending value and key time. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineInt16KeyFrame.#ctor(System.Int16,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt16KeyFrame" /> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline" />. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
      <param name="keySpline">
        <see cref="T:System.Windows.Media.Animation.KeySpline" /> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline" /> represents a Bezier curve which defines animation progress of the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineInt16KeyFrame.CreateInstanceCore">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Animation.SplineInt16KeyFrame" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Animation.SplineInt16KeyFrame" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineInt16KeyFrame.InterpolateValueCore(System.Int16,System.Double)">
      <summary>Uses splined interpolation to transition between the previous key frame value and the value of the current key frame.</summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SplineInt16KeyFrame.KeySpline">
      <summary>Gets or sets the two control points that define animation progress for this key frame.  </summary>
      <returns>The two control points that specify the cubic Bezier curve which defines the progress of the key frame.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplineInt16KeyFrame.KeySplineProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SplineInt16KeyFrame.KeySpline" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SplineInt16KeyFrame.KeySpline" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SplineInt32KeyFrame">
      <summary>Animates from the <see cref="T:System.Int32" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.Int32KeyFrame.Value" /> using splined interpolation.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineInt32KeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt32KeyFrame" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineInt32KeyFrame.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt32KeyFrame" /> class with the specified ending value.  </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineInt32KeyFrame.#ctor(System.Int32,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt32KeyFrame" /> class with the specified ending value and key time. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineInt32KeyFrame.#ctor(System.Int32,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt32KeyFrame" /> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline" />. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
      <param name="keySpline">
        <see cref="T:System.Windows.Media.Animation.KeySpline" /> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline" /> represents a Bezier curve which defines animation progress of the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineInt32KeyFrame.CreateInstanceCore">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Animation.SplineInt32KeyFrame" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Animation.SplineInt32KeyFrame" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineInt32KeyFrame.InterpolateValueCore(System.Int32,System.Double)">
      <summary>Uses splined interpolation to transition between the previous key frame value and the value of the current key frame. </summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SplineInt32KeyFrame.KeySpline">
      <summary>Gets or sets the two control points that define animation progress for this key frame.  </summary>
      <returns>The two control points that specify the cubic Bezier curve which defines the progress of the key frame.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplineInt32KeyFrame.KeySplineProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SplineInt32KeyFrame.KeySpline" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SplineInt32KeyFrame.KeySpline" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SplineInt64KeyFrame">
      <summary>Animates from the <see cref="T:System.Int64" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.Int64KeyFrame.Value" /> using splined interpolation.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineInt64KeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt64KeyFrame" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineInt64KeyFrame.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt64KeyFrame" /> class with the specified ending value.  </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineInt64KeyFrame.#ctor(System.Int64,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt64KeyFrame" /> class with the specified ending value and key time. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineInt64KeyFrame.#ctor(System.Int64,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineInt64KeyFrame" /> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline" />. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
      <param name="keySpline">
        <see cref="T:System.Windows.Media.Animation.KeySpline" /> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline" /> represents a Bezier curve which defines animation progress of the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineInt64KeyFrame.CreateInstanceCore">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Animation.SplineInt64KeyFrame" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Animation.SplineInt64KeyFrame" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineInt64KeyFrame.InterpolateValueCore(System.Int64,System.Double)">
      <summary>Uses splined interpolation to transition between the previous key frame value and the value of the current key frame.</summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SplineInt64KeyFrame.KeySpline">
      <summary>Gets or sets the two control points that define animation progress for this key frame.  </summary>
      <returns>The two control points that specify the cubic Bezier curve which defines the progress of the key frame.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplineInt64KeyFrame.KeySplineProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SplineInt64KeyFrame.KeySpline" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SplineInt64KeyFrame.KeySpline" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SplinePoint3DKeyFrame">
      <summary>Animates from the <see cref="T:System.Windows.Media.Media3D.Point3D" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.Point3DKeyFrame.Value" /> using splined interpolation.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplinePoint3DKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplinePoint3DKeyFrame" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplinePoint3DKeyFrame.#ctor(System.Windows.Media.Media3D.Point3D)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplinePoint3DKeyFrame" /> class with the specified ending value.  </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplinePoint3DKeyFrame.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplinePoint3DKeyFrame" /> class with the specified ending value and key time. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplinePoint3DKeyFrame.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplinePoint3DKeyFrame" /> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline" />. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
      <param name="keySpline">
        <see cref="T:System.Windows.Media.Animation.KeySpline" /> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline" /> represents a Bezier curve which defines animation progress of the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplinePoint3DKeyFrame.CreateInstanceCore">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Animation.SplinePoint3DKeyFrame" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Animation.SplinePoint3DKeyFrame" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SplinePoint3DKeyFrame.InterpolateValueCore(System.Windows.Media.Media3D.Point3D,System.Double)">
      <summary>Uses splined interpolation to transition between the previous key frame value and the value of the current key frame.</summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SplinePoint3DKeyFrame.KeySpline">
      <summary>Gets or sets the two control points that define animation progress for this key frame.  </summary>
      <returns>The two control points that specify the cubic Bezier curve which defines the progress of the key frame.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplinePoint3DKeyFrame.KeySplineProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SplinePoint3DKeyFrame.KeySpline" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SplinePoint3DKeyFrame.KeySpline" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SplinePointKeyFrame">
      <summary>Animates from the <see cref="T:System.Windows.Point" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.PointKeyFrame.Value" /> using splined interpolation.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplinePointKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplinePointKeyFrame" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplinePointKeyFrame.#ctor(System.Windows.Point)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplinePointKeyFrame" /> class with the specified ending value.  </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplinePointKeyFrame.#ctor(System.Windows.Point,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplinePointKeyFrame" /> class with the specified ending value and key time. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached, which is also when the key frame ends.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplinePointKeyFrame.#ctor(System.Windows.Point,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplinePointKeyFrame" /> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline" />. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached, which is also when the key frame ends.</param>
      <param name="keySpline">
        <see cref="T:System.Windows.Media.Animation.KeySpline" /> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline" /> represents a Bezier curve that defines animation progress of the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplinePointKeyFrame.CreateInstanceCore">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Animation.SplinePointKeyFrame" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Animation.SplinePointKeyFrame" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SplinePointKeyFrame.InterpolateValueCore(System.Windows.Point,System.Double)">
      <summary>Uses splined interpolation to transition between the previous key frame value and the value of the current key frame. </summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value from 0.0 through 1.0 that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SplinePointKeyFrame.KeySpline">
      <summary>Gets or sets the two control points that define animation progress for this key frame.  </summary>
      <returns>The two control points that specify the cubic Bezier curve that defines the progress of the key frame.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplinePointKeyFrame.KeySplineProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SplinePointKeyFrame.KeySpline" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SplinePointKeyFrame.KeySpline" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SplineQuaternionKeyFrame">
      <summary>Animates from the <see cref="T:System.Windows.Media.Media3D.Quaternion" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.QuaternionKeyFrame.Value" /> using splined interpolation.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineQuaternionKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineQuaternionKeyFrame" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineQuaternionKeyFrame.#ctor(System.Windows.Media.Media3D.Quaternion)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineQuaternionKeyFrame" /> class with the specified ending value.  </summary>
      <param name="value">The ending value (also known as "target value") for the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineQuaternionKeyFrame.#ctor(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineQuaternionKeyFrame" /> class with the specified ending value and key time. </summary>
      <param name="value">The ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">The key time for the key frame. The key time determines when the target value is reached, which is also when the key frame ends.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineQuaternionKeyFrame.#ctor(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineQuaternionKeyFrame" /> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline" />. </summary>
      <param name="value">The ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">The key time for the key frame. The key time determines when the target value is reached, which is also when the key frame ends.</param>
      <param name="keySpline">A <see cref="T:System.Windows.Media.Animation.KeySpline" /> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline" /> represents a Bezier curve that defines animation progress of the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineQuaternionKeyFrame.CreateInstanceCore">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Animation.SplineQuaternionKeyFrame" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Animation.SplineQuaternionKeyFrame" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineQuaternionKeyFrame.InterpolateValueCore(System.Windows.Media.Media3D.Quaternion,System.Double)">
      <summary>Interpolates, in a splined fashion, between the previous key frame value and the value of the current key frame, using the supplied progress increment.</summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value from 0.0 through 1.0 that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SplineQuaternionKeyFrame.KeySpline">
      <summary>Gets or sets the two control points that define animation progress for this key frame.  </summary>
      <returns>The two control points that specify the cubic Bezier curve that defines the progress of the key frame.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplineQuaternionKeyFrame.KeySplineProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SplineQuaternionKeyFrame.KeySpline" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SplineQuaternionKeyFrame.KeySpline" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.SplineQuaternionKeyFrame.UseShortestPath">
      <summary>Gets or sets a value that indicates whether the animation uses spherical linear interpolation to calculate the shortest arc between positions.  </summary>
      <returns>Boolean value that indicates whether the animation uses spherical linear interpolation to calculate the shortest arc between positions.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplineQuaternionKeyFrame.UseShortestPathProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SplineQuaternionKeyFrame.UseShortestPath" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SplineQuaternionKeyFrame.UseShortestPath" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SplineRectKeyFrame">
      <summary>Animates from the <see cref="T:System.Windows.Rect" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.RectKeyFrame.Value" /> using splined interpolation.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineRectKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineRectKeyFrame" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineRectKeyFrame.#ctor(System.Windows.Rect)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineRectKeyFrame" /> class with the specified ending value.  </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineRectKeyFrame.#ctor(System.Windows.Rect,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineRectKeyFrame" /> class with the specified ending value and key time. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineRectKeyFrame.#ctor(System.Windows.Rect,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineRectKeyFrame" /> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline" />. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
      <param name="keySpline">
        <see cref="T:System.Windows.Media.Animation.KeySpline" /> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline" /> represents a Bezier curve which defines animation progress of the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineRectKeyFrame.CreateInstanceCore">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Animation.SplineRectKeyFrame" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Animation.SplineRectKeyFrame" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineRectKeyFrame.InterpolateValueCore(System.Windows.Rect,System.Double)">
      <summary>Uses splined interpolation to transition between the previous key frame value and the value of the current key frame. </summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SplineRectKeyFrame.KeySpline">
      <summary>Gets or sets the two control points that define animation progress for this key frame.  </summary>
      <returns>The two control points that specify the cubic Bezier curve which defines the progress of the key frame.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplineRectKeyFrame.KeySplineProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SplineRectKeyFrame.KeySpline" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SplineRectKeyFrame.KeySpline" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SplineRotation3DKeyFrame">
      <summary>Animates from the <see cref="T:System.Windows.Media.Media3D.Rotation3D" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.Rotation3DKeyFrame.Value" /> using splined interpolation.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineRotation3DKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineRotation3DKeyFrame" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineRotation3DKeyFrame.#ctor(System.Windows.Media.Media3D.Rotation3D)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineRotation3DKeyFrame" /> class with the specified ending value.  </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineRotation3DKeyFrame.#ctor(System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineRotation3DKeyFrame" /> class with the specified ending value and key time. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineRotation3DKeyFrame.#ctor(System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineRotation3DKeyFrame" /> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline" />. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
      <param name="keySpline">
        <see cref="T:System.Windows.Media.Animation.KeySpline" /> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline" /> represents a Bezier curve which defines animation progress of the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineRotation3DKeyFrame.CreateInstanceCore">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Animation.SplineRotation3DKeyFrame" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Animation.SplineRotation3DKeyFrame" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineRotation3DKeyFrame.InterpolateValueCore(System.Windows.Media.Media3D.Rotation3D,System.Double)">
      <summary>Uses splined interpolation to transition between the previous key frame value and the value of the current key frame. </summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SplineRotation3DKeyFrame.KeySpline">
      <summary>Gets or sets the two control points that define animation progress for this key frame.  </summary>
      <returns>The two control points that specify the cubic Bezier curve which defines the progress of the key frame.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplineRotation3DKeyFrame.KeySplineProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SplineRotation3DKeyFrame.KeySpline" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SplineRotation3DKeyFrame.KeySpline" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SplineSingleKeyFrame">
      <summary>Animates from the <see cref="T:System.Single" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.SingleKeyFrame.Value" /> using splined interpolation.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineSingleKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineSingleKeyFrame" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineSingleKeyFrame.#ctor(System.Single)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineSingleKeyFrame" /> class with the specified ending value.  </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineSingleKeyFrame.#ctor(System.Single,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineSingleKeyFrame" /> class with the specified ending value and key time. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineSingleKeyFrame.#ctor(System.Single,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineSingleKeyFrame" /> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline" />. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
      <param name="keySpline">
        <see cref="T:System.Windows.Media.Animation.KeySpline" /> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline" /> represents a Bezier curve which defines animation progress of the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineSingleKeyFrame.CreateInstanceCore">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Animation.SplineSingleKeyFrame" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Animation.SplineSingleKeyFrame" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineSingleKeyFrame.InterpolateValueCore(System.Single,System.Double)">
      <summary>Uses splined interpolation to transition between the previous key frame value and the value of the current key frame.</summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SplineSingleKeyFrame.KeySpline">
      <summary>Gets or sets the two control points that define animation progress for this key frame.  </summary>
      <returns>The two control points that specify the cubic Bezier curve which defines the progress of the key frame.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplineSingleKeyFrame.KeySplineProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SplineSingleKeyFrame.KeySpline" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SplineSingleKeyFrame.KeySpline" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SplineSizeKeyFrame">
      <summary>Animates from the <see cref="T:System.Windows.Size" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.SizeKeyFrame.Value" /> using splined interpolation.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineSizeKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineSizeKeyFrame" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineSizeKeyFrame.#ctor(System.Windows.Size)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineSizeKeyFrame" /> class with the specified ending value.  </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineSizeKeyFrame.#ctor(System.Windows.Size,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineSizeKeyFrame" /> class with the specified ending value and key time. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineSizeKeyFrame.#ctor(System.Windows.Size,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineSizeKeyFrame" /> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline" />. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
      <param name="keySpline">
        <see cref="T:System.Windows.Media.Animation.KeySpline" /> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline" /> represents a Bezier curve which defines animation progress of the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineSizeKeyFrame.CreateInstanceCore">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Animation.SplineSizeKeyFrame" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Animation.SplineSizeKeyFrame" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineSizeKeyFrame.InterpolateValueCore(System.Windows.Size,System.Double)">
      <summary>Uses splined interpolation to transition between the previous key frame value and the value of the current key frame.</summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SplineSizeKeyFrame.KeySpline">
      <summary>Gets or sets the two control points that define animation progress for this key frame.  </summary>
      <returns>The two control points that specify the cubic Bezier curve which defines the progress of the key frame.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplineSizeKeyFrame.KeySplineProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SplineSizeKeyFrame.KeySpline" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SplineSizeKeyFrame.KeySpline" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SplineVector3DKeyFrame">
      <summary>Animates from the <see cref="T:System.Windows.Media.Media3D.Vector3D" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.Vector3DKeyFrame.Value" /> using splined interpolation.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineVector3DKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineVector3DKeyFrame" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineVector3DKeyFrame.#ctor(System.Windows.Media.Media3D.Vector3D)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineVector3DKeyFrame" /> class with the specified ending value.  </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineVector3DKeyFrame.#ctor(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineVector3DKeyFrame" /> class with the specified ending value and key time. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineVector3DKeyFrame.#ctor(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineVector3DKeyFrame" /> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline" />. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
      <param name="keySpline">
        <see cref="T:System.Windows.Media.Animation.KeySpline" /> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline" /> represents a Bezier curve which defines animation progress of the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineVector3DKeyFrame.CreateInstanceCore">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Animation.SplineVector3DKeyFrame" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Animation.SplineVector3DKeyFrame" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineVector3DKeyFrame.InterpolateValueCore(System.Windows.Media.Media3D.Vector3D,System.Double)">
      <summary>Uses splined interpolation to transition between the previous key frame value and the value of the current key frame.</summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SplineVector3DKeyFrame.KeySpline">
      <summary>Gets or sets the two control points that define animation progress for this key frame.   </summary>
      <returns>The two control points that specify the cubic Bezier curve which defines the progress of the key frame.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplineVector3DKeyFrame.KeySplineProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SplineVector3DKeyFrame.KeySpline" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SplineVector3DKeyFrame.KeySpline" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.SplineVectorKeyFrame">
      <summary>Animates from the <see cref="T:System.Windows.Vector" /> value of the previous key frame to its own <see cref="P:System.Windows.Media.Animation.VectorKeyFrame.Value" /> using splined interpolation.  </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineVectorKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineVectorKeyFrame" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineVectorKeyFrame.#ctor(System.Windows.Vector)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineVectorKeyFrame" /> class with the specified ending value.  </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineVectorKeyFrame.#ctor(System.Windows.Vector,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineVectorKeyFrame" /> class with the specified ending value and key time. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineVectorKeyFrame.#ctor(System.Windows.Vector,System.Windows.Media.Animation.KeyTime,System.Windows.Media.Animation.KeySpline)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.SplineVectorKeyFrame" /> class with the specified ending value, key time, and <see cref="T:System.Windows.Media.Animation.KeySpline" />. </summary>
      <param name="value">Ending value (also known as "target value") for the key frame.</param>
      <param name="keyTime">Key time for the key frame. The key time determines when the target value is reached which is also when the key frame ends.</param>
      <param name="keySpline">
        <see cref="T:System.Windows.Media.Animation.KeySpline" /> for the key frame. The <see cref="T:System.Windows.Media.Animation.KeySpline" /> represents a Bezier curve which defines animation progress of the key frame.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineVectorKeyFrame.CreateInstanceCore">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Animation.SplineVectorKeyFrame" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Animation.SplineVectorKeyFrame" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.SplineVectorKeyFrame.InterpolateValueCore(System.Windows.Vector,System.Double)">
      <summary>Uses splined interpolation to transition between the previous key frame value and the value of the current key frame. </summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.SplineVectorKeyFrame.KeySpline">
      <summary>Gets or sets the two control points that define animation progress for this key frame.  </summary>
      <returns>The two control points that specify the cubic Bezier curve which defines the progress of the key frame.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.SplineVectorKeyFrame.KeySplineProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.SplineVectorKeyFrame.KeySpline" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.SplineVectorKeyFrame.KeySpline" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.StringAnimationBase">
      <summary>Abstract class that, when implemented, animates a <see cref="T:System.String" /> value. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.StringAnimationBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.StringAnimationBase" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.StringAnimationBase.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.StringAnimationBase" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.StringAnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
      <summary>Gets the current value of the animation.</summary>
      <returns>The current value of the animation.</returns>
      <param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. </param>
      <param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
      <param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock" /> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> value to be used by the animation to generate its output value.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringAnimationBase.GetCurrentValue(System.String,System.String,System.Windows.Media.Animation.AnimationClock)">
      <summary>Gets the current value of the animation.</summary>
      <returns>The current value of this animation.</returns>
      <param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. </param>
      <param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
      <param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock" /> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> value to be used by the animation to generate its output value.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringAnimationBase.GetCurrentValueCore(System.String,System.String,System.Windows.Media.Animation.AnimationClock)">
      <summary>Calculates a value that represents the current value of the property being animated, as determined by the host animation. </summary>
      <returns>The calculated value of the property, as determined by the current animation.</returns>
      <param name="defaultOriginValue">The suggested origin value, used if the animation does not have its own explicitly set start value. </param>
      <param name="defaultDestinationValue">The suggested destination value, used if the animation does not have its own explicitly set end value.</param>
      <param name="animationClock">An <see cref="T:System.Windows.Media.Animation.AnimationClock" /> that generates the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> used by the host animation.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.StringAnimationBase.TargetPropertyType">
      <summary>Gets the type of value this animation generates.</summary>
      <returns>The type of value produced by this animation.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames">
      <summary> Animates the value of a <see cref="T:System.String" /> property along a set of <see cref="P:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.KeyFrames" /> over a specified <see cref="P:System.Windows.Media.Animation.Timeline.Duration" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.AddChild(System.Object)">
      <summary>Adds a child <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> to this <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames" />. </summary>
      <param name="child">The object to be added as the child of this <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames" />. </param>
      <exception cref="T:System.ArgumentException">The parameter <paramref name="child" /> is not a <see cref="T:System.Windows.Media.Animation.StringKeyFrame" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.AddText(System.String)">
      <summary>Adds a text string as a child of this <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames" />.</summary>
      <param name="childText">The text added to the <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames" />.</param>
      <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames" /> does not accept text as a child, so this method will raise this exception unless a derived class has overridden this behavior which allows text to be added.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.CloneCore(System.Windows.Freezable)">
      <summary>Makes this instance a deep copy of the specified <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames" />. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes this instance a modifiable deep copy of the specified <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames" /> using current property values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.CreateInstanceCore">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames" />. </summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.FreezeCore(System.Boolean)">
      <summary>Makes this instance of <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames" /> object unmodifiable or determines whether it can be made unmodifiable..</summary>
      <returns>If <paramref name="isChecking" /> is true, this method returns true if this instance can be made read-only, or false if it cannot be made read-only. If <paramref name="isChecking" /> is false, this method returns true if this instance is now read-only, or false if it cannot be made read-only, with the side effect of having begun to change the frozen status of this object.</returns>
      <param name="isChecking">true to check if this instance can be frozen; false to freeze this instance. </param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames" /> object. </summary>
      <param name="source">The <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames" /> object to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a frozen clone of the specified <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames" />. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="source">The <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames" /> to copy and freeze.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.GetCurrentValueCore(System.String,System.String,System.Windows.Media.Animation.AnimationClock)">
      <summary> Calculates a value that represents the current value of the property being animated, as determined by this instance of <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames" />.</summary>
      <returns>The calculated value of the property, as determined by the current instance.</returns>
      <param name="defaultOriginValue">The suggested origin value, used if the animation does not have its own explicitly set start value.</param>
      <param name="defaultDestinationValue">The suggested destination value, used if the animation does not have its own explicitly set end value.</param>
      <param name="animationClock">An <see cref="T:System.Windows.Media.Animation.AnimationClock" /> that generates the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> used by the host animation.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
      <summary>Provide a custom natural <see cref="T:System.Windows.Duration" /> when the <see cref="T:System.Windows.Duration" /> property is set to <see cref="P:System.Windows.Duration.Automatic" />. </summary>
      <returns>If the last key frame of this animation is a <see cref="T:System.Windows.Media.Animation.KeyTime" />, then this value is used as the <see cref="P:System.Windows.Media.Animation.Clock.NaturalDuration" />; otherwise it will be one second.</returns>
      <param name="clock">The <see cref="T:System.Windows.Media.Animation.Clock" /> whose natural duration is desired.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.KeyFrames">
      <summary> Gets or sets the collection of <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> objects that define the animation. </summary>
      <returns>The collection of <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> objects that define the animation. The default value is <see cref="P:System.Windows.Media.Animation.StringKeyFrameCollection.Empty" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.OnChanged">
      <summary>Called when the current <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames" /> object is modified.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.ShouldSerializeKeyFrames">
      <summary>Returns true if the value of the <see cref="P:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.KeyFrames" /> property of this instance of <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames" /> should be value-serialized.</summary>
      <returns>true if the property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="child"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="childText"></param>
    </member>
    <member name="P:System.Windows.Media.Animation.StringAnimationUsingKeyFrames.System#Windows#Media#Animation#IKeyFrameAnimation#KeyFrames">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.StringKeyFrame">
      <summary>Defines an animation segment with its own target value and interpolation method for a <see cref="T:System.Windows.Media.Animation.StringAnimationUsingKeyFrames" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrame.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> class that has the specified target <see cref="P:System.Windows.Media.Animation.StringKeyFrame.Value" />.  </summary>
      <param name="value">The <see cref="P:System.Windows.Media.Animation.StringKeyFrame.Value" /> of the new <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> instance.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrame.#ctor(System.String,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> class that has the specified target <see cref="P:System.Windows.Media.Animation.StringKeyFrame.Value" /> and <see cref="P:System.Windows.Media.Animation.StringKeyFrame.KeyTime" />.  </summary>
      <param name="value">The <see cref="P:System.Windows.Media.Animation.StringKeyFrame.Value" /> of the new <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> instance.</param>
      <param name="keyTime">The <see cref="P:System.Windows.Media.Animation.StringKeyFrame.KeyTime" /> of the new <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> instance.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrame.InterpolateValue(System.String,System.Double)">
      <summary>Returns the interpolated value of a specific key frame at the progress increment provided. </summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Occurs if <paramref name="keyFrameProgress" /> is not between 0.0 and 1.0, inclusive.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrame.InterpolateValueCore(System.String,System.Double)">
      <summary>When overridden in a derived class, calculates the value of a key frame at the progress increment provided. </summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from; typically the value of the previous key frame.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.StringKeyFrame.KeyTime">
      <summary>Gets or sets the time at which the key frame's target <see cref="P:System.Windows.Media.Animation.StringKeyFrame.Value" /> should be reached.  </summary>
      <returns>The time at which the key frame's current value should be equal to its <see cref="P:System.Windows.Media.Animation.StringKeyFrame.Value" /> property. The default is <see cref="P:System.Windows.Media.Animation.KeyTime.Uniform" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.StringKeyFrame.KeyTimeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.StringKeyFrame.KeyTime" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.StringKeyFrame.KeyTime" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.StringKeyFrame.System#Windows#Media#Animation#IKeyFrame#Value">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.StringKeyFrame.Value">
      <summary>Gets or sets the key frame's target value.  </summary>
      <returns>The key frame's target value, which is the value of this key frame at its specified <see cref="P:System.Windows.Media.Animation.StringKeyFrame.KeyTime" />. The default is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.StringKeyFrame.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.StringKeyFrame.Value" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.StringKeyFrame.Value" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.StringKeyFrameCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> objects. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.StringKeyFrameCollection" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.Add(System.Windows.Media.Animation.StringKeyFrame)">
      <summary>Adds a <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> to the end of the collection. </summary>
      <returns>The index at which the <paramref name="keyFrame" /> was added.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> to add to the end of the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.Clear">
      <summary>Removes all <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> objects from the collection. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.StringKeyFrameCollection" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.CloneCore(System.Windows.Freezable)">
      <summary>Makes this instance a deep copy of the specified <see cref="T:System.Windows.Media.Animation.StringKeyFrameCollection" />. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.StringKeyFrameCollection" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes this instance a modifiable deep copy of the specified <see cref="T:System.Windows.Media.Animation.StringKeyFrameCollection" /> using current property values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.StringKeyFrameCollection" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.Contains(System.Windows.Media.Animation.StringKeyFrame)">
      <summary>Gets a value that indicates whether the collection contains the specified <see cref="T:System.Windows.Media.Animation.StringKeyFrame" />. </summary>
      <returns>true if the collection contains <paramref name="keyFrame" />; otherwise, false.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.CopyTo(System.Windows.Media.Animation.StringKeyFrame[],System.Int32)">
      <summary>Copies all of the <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> objects in a collection to a specified array. </summary>
      <param name="array">Identifies the array to which content is copied.</param>
      <param name="index">Index position in the array to which the contents of the collection are copied.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.StringKeyFrameCollection.Count">
      <summary>Gets the number of key frames contained in the <see cref="T:System.Windows.Media.Animation.StringKeyFrameCollection" />.</summary>
      <returns>The number of key frames contained in the <see cref="T:System.Windows.Media.Animation.StringKeyFrameCollection" />. </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.CreateInstanceCore">
      <summary>Creates a new, frozen instance of <see cref="T:System.Windows.Media.Animation.StringKeyFrameCollection" />.</summary>
      <returns>A frozen instance of <see cref="T:System.Windows.Media.Animation.StringKeyFrameCollection" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.StringKeyFrameCollection.Empty">
      <summary> Gets an empty <see cref="T:System.Windows.Media.Animation.StringKeyFrameCollection" />.  </summary>
      <returns>An empty <see cref="T:System.Windows.Media.Animation.StringKeyFrameCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.FreezeCore(System.Boolean)">
      <summary>Makes this instance of <see cref="T:System.Windows.Media.Animation.StringKeyFrameCollection" /> unmodifiable or determines whether it can be made unmodifiable.</summary>
      <returns>If <paramref name="isChecking" /> is true, this method returns true if this instance can be made read-only, or false if it cannot be made read-only. If <paramref name="isChecking" /> is false, this method returns true if this instance is now read-only, or false if it cannot be made read-only, with the side effect of having begun to change the frozen status of this object.</returns>
      <param name="isChecking">true to check if this instance can be frozen; false to freeze this instance. </param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.StringKeyFrameCollection" /> object. </summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.StringKeyFrameCollection" /> object to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a frozen clone of the specified <see cref="T:System.Windows.Media.Animation.StringKeyFrameCollection" />. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.StringKeyFrameCollection" /> to copy and freeze.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.GetEnumerator">
      <summary> Returns an enumerator that can iterate through the collection. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.IndexOf(System.Windows.Media.Animation.StringKeyFrame)">
      <summary> Searches for the specified <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> and returns the zero-based index of the first occurrence within the entire collection.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="keyFrame" /> within the entire collection, if found; otherwise, -1.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.Insert(System.Int32,System.Windows.Media.Animation.StringKeyFrame)">
      <summary>Inserts a <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> into a specific location within the collection. </summary>
      <param name="index">The index position at which the <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> is inserted.</param>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> object to insert in the collection.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.StringKeyFrameCollection.IsFixedSize">
      <summary>Gets a value that indicates if the collection size can ever change.</summary>
      <returns>true if the collection is frozen; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.StringKeyFrameCollection.IsReadOnly">
      <summary> Gets a value that indicates if the collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.StringKeyFrameCollection.IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
      <returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.StringKeyFrameCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> at the specified index position.  </summary>
      <returns>The <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> at the specified index.</returns>
      <param name="index">The zero-based index of the <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> to get or set.</param>
      <exception cref="T:System.InvalidOperationException">The attempt to modify the collection is invalid because the collection is frozen (its <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Windows.Media.Animation.StringKeyFrameCollection.Count" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.Remove(System.Windows.Media.Animation.StringKeyFrame)">
      <summary>Removes a <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> object from the collection. </summary>
      <param name="keyFrame">Identifies the <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> to remove from the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> at the specified index position from the collection. </summary>
      <param name="index">Index position of the <see cref="T:System.Windows.Media.Animation.StringKeyFrame" /> to be removed.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.StringKeyFrameCollection.SyncRoot">
      <summary> Gets an object that can be used to synchronize access to the collection. </summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="array"></param>
      <param name="index"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.System#Collections#IList#Add(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.System#Collections#IList#Contains(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code. </summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code. </summary>
      <param name="index"></param>
      <param name="keyFrame"></param>
    </member>
    <member name="P:System.Windows.Media.Animation.StringKeyFrameCollection.System#Collections#IList#Item(System.Int32)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="index"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.StringKeyFrameCollection.System#Collections#IList#Remove(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code. </summary>
      <param name="keyFrame"></param>
    </member>
    <member name="T:System.Windows.Media.Animation.Timeline">
      <summary>Defines a segment of time. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Timeline.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Timeline" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Timeline.#ctor(System.Nullable{System.TimeSpan})">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Timeline" /> class with the specified <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" />.</summary>
      <param name="beginTime">The time at which this <see cref="T:System.Windows.Media.Animation.Timeline" /> should begin. See the <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> property for more information.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Timeline.#ctor(System.Nullable{System.TimeSpan},System.Windows.Duration)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Timeline" /> class with the specified <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> and <see cref="P:System.Windows.Media.Animation.Timeline.Duration" />.</summary>
      <param name="beginTime">The time at which this <see cref="T:System.Windows.Media.Animation.Timeline" /> should begin. See the <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> property for more information.</param>
      <param name="duration">The length of time for which this timeline plays, not counting repetitions. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Timeline.#ctor(System.Nullable{System.TimeSpan},System.Windows.Duration,System.Windows.Media.Animation.RepeatBehavior)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Timeline" /> class with the specified <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" />, <see cref="P:System.Windows.Media.Animation.Timeline.Duration" />, and <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" />.</summary>
      <param name="beginTime">The time at which this <see cref="T:System.Windows.Media.Animation.Timeline" /> should begin. See the <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> property for more information.</param>
      <param name="duration">The length of time for which this timeline plays, not counting repetitions. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
      <param name="repeatBehavior">The repeating behavior of this timeline, either as an iteration <see cref="P:System.Windows.Media.Animation.RepeatBehavior.Count" /> or a repeat <see cref="P:System.Windows.Media.Animation.RepeatBehavior.Duration" />. See the <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" /> property for more information.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.Timeline.AccelerationRatio">
      <summary>Gets or sets a value specifying the percentage of the timeline's <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> spent accelerating the passage of time from zero to its maximum rate.  </summary>
      <returns>A value between 0 and 1, inclusive, that specifies the percentage of the timeline's <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> spent accelerating the passage of time from zero to its maximum rate. If the timeline's <see cref="P:System.Windows.Media.Animation.Timeline.DecelerationRatio" />  property is also set, the sum of <see cref="P:System.Windows.Media.Animation.Timeline.AccelerationRatio" /> and <see cref="P:System.Windows.Media.Animation.Timeline.DecelerationRatio" /> must be less than or equal to 1. The default value is 0.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Media.Animation.Timeline.AccelerationRatio" /> is less than 0 or greater than 1.</exception>
      <exception cref="T:System.InvalidOperationException">The sum of <see cref="P:System.Windows.Media.Animation.Timeline.AccelerationRatio" /> and <see cref="P:System.Windows.Media.Animation.Timeline.DecelerationRatio" /> exceeds 1.</exception>
    </member>
    <member name="F:System.Windows.Media.Animation.Timeline.AccelerationRatioProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.AccelerationRatio" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.AccelerationRatio" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Timeline.AllocateClock">
      <summary>Creates a <see cref="T:System.Windows.Media.Animation.Clock" /> for this <see cref="T:System.Windows.Media.Animation.Timeline" />. </summary>
      <returns>A clock for this <see cref="T:System.Windows.Media.Animation.Timeline" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Timeline.AutoReverse">
      <summary>Gets or sets a value that indicates whether the timeline plays in reverse after it completes a forward iteration.  </summary>
      <returns>true if the timeline plays in reverse at the end of each iteration; otherwise, false. The default value is false.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Timeline.AutoReverseProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.AutoReverse" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.AutoReverse" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Timeline.BeginTime">
      <summary>Gets or sets the time at which this <see cref="T:System.Windows.Media.Animation.Timeline" /> should begin.  </summary>
      <returns>The time at which this <see cref="T:System.Windows.Media.Animation.Timeline" /> should begin, relative to its parent's <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" />. If this timeline is a root timeline, the time is relative to its interactive begin time (the moment at which the timeline was triggered). This value may be positive, negative, or null; a null value means the timeline never plays. The default value is zero.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Timeline.BeginTimeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Timeline.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.Timeline" />, making deep copies of this object's values. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Timeline.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.Timeline" /> object, making deep copies of this object's current values. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true.</returns>
    </member>
    <member name="E:System.Windows.Media.Animation.Timeline.Completed">
      <summary>Occurs when this timeline has completely finished playing: it will no longer enter its active period. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Timeline.CreateClock">
      <summary>Creates a new, controllable <see cref="T:System.Windows.Media.Animation.Clock" /> from this <see cref="T:System.Windows.Media.Animation.Timeline" />. If this <see cref="T:System.Windows.Media.Animation.Timeline" /> has children, a tree of clocks is created with this <see cref="T:System.Windows.Media.Animation.Timeline" /> as the root. </summary>
      <returns>A new, controllable <see cref="T:System.Windows.Media.Animation.Clock" /> constructed from this <see cref="T:System.Windows.Media.Animation.Timeline" />. If this <see cref="T:System.Windows.Media.Animation.Timeline" /> is a <see cref="T:System.Windows.Media.Animation.TimelineGroup" /> that contains child timelines, a tree of <see cref="T:System.Windows.Media.Animation.Clock" /> objects is created with a controllable <see cref="T:System.Windows.Media.Animation.Clock" /> created from this <see cref="T:System.Windows.Media.Animation.Timeline" /> as the root.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Timeline.CreateClock(System.Boolean)">
      <summary>Creates a new <see cref="T:System.Windows.Media.Animation.Clock" /> from this <see cref="T:System.Windows.Media.Animation.Timeline" /> and specifies whether the new <see cref="T:System.Windows.Media.Animation.Clock" /> is controllable. If this <see cref="T:System.Windows.Media.Animation.Timeline" /> has children, a tree of clocks is created with this <see cref="T:System.Windows.Media.Animation.Timeline" /> as the root. </summary>
      <returns>A new <see cref="T:System.Windows.Media.Animation.Clock" /> constructed from this <see cref="T:System.Windows.Media.Animation.Timeline" />. If this <see cref="T:System.Windows.Media.Animation.Timeline" /> is a <see cref="T:System.Windows.Media.Animation.TimelineGroup" /> that contains child timelines, a tree of <see cref="T:System.Windows.Media.Animation.Clock" /> objects is created with a controllable <see cref="T:System.Windows.Media.Animation.Clock" /> created from this <see cref="T:System.Windows.Media.Animation.Timeline" /> as the root.</returns>
      <param name="hasControllableRoot">true if the root <see cref="T:System.Windows.Media.Animation.Clock" /> returned should return a <see cref="T:System.Windows.Media.Animation.ClockController" /> from its <see cref="P:System.Windows.Media.Animation.Clock.Controller" /> property so that the <see cref="T:System.Windows.Media.Animation.Clock" /> tree can be interactively controlled; otherwise, false.</param>
    </member>
    <member name="E:System.Windows.Media.Animation.Timeline.CurrentGlobalSpeedInvalidated">
      <summary>Occurs when the rate at which time progresses for the timeline's clock changes.</summary>
    </member>
    <member name="E:System.Windows.Media.Animation.Timeline.CurrentStateInvalidated">
      <summary>Occurs when the <see cref="P:System.Windows.Media.Animation.Clock.CurrentState" /> property of the timeline's <see cref="T:System.Windows.Media.Animation.Clock" /> is updated.</summary>
    </member>
    <member name="E:System.Windows.Media.Animation.Timeline.CurrentTimeInvalidated">
      <summary>Occurs when the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> property of the timeline's <see cref="T:System.Windows.Media.Animation.Clock" /> is updated.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.Timeline.DecelerationRatio">
      <summary>Gets or sets a value specifying the percentage of the timeline's <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> spent decelerating the passage of time from its maximum rate to zero.  </summary>
      <returns>A value between 0 and 1, inclusive, that specifies the percentage of the timeline's <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> spent decelerating the passage of time from its maximum rate to zero. If the timeline's <see cref="P:System.Windows.Media.Animation.Timeline.AccelerationRatio" /> property is also set, the sum of <see cref="P:System.Windows.Media.Animation.Timeline.DecelerationRatio" /> and <see cref="P:System.Windows.Media.Animation.Timeline.AccelerationRatio" /> must be less than or equal to 1. The default value is 0.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Media.Animation.Timeline.DecelerationRatio" /> is less than 0 or greater than 1.</exception>
      <exception cref="T:System.InvalidOperationException">The sum of <see cref="P:System.Windows.Media.Animation.Timeline.AccelerationRatio" /> and <see cref="P:System.Windows.Media.Animation.Timeline.DecelerationRatio" /> exceeds 1.</exception>
    </member>
    <member name="F:System.Windows.Media.Animation.Timeline.DecelerationRatioProperty">
      <summary>Identifies for the <see cref="P:System.Windows.Media.Animation.Timeline.DecelerationRatio" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.DecelerationRatio" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Timeline.DesiredFrameRate">
      <summary>Gets or sets the desired frame rate for this timeline and its child timelines. </summary>
      <returns>A value greater than zero that is the desired frame rate for this timeline and its child timelines, or null if the system should automatically determine the frame rate. The default value is null. </returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Timeline.DesiredFrameRateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.DesiredFrameRate" /> attached property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.DesiredFrameRate" /> attached property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Timeline.Duration">
      <summary>Gets or sets the length of time for which this timeline plays, not counting repetitions.  </summary>
      <returns>The timeline's simple duration: the amount of time this timeline takes to complete a single forward iteration. The default value is <see cref="P:System.Windows.Duration.Automatic" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Timeline.DurationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Timeline.FillBehavior">
      <summary>Gets or sets a value that specifies how the <see cref="T:System.Windows.Media.Animation.Timeline" /> behaves after it reaches the end of its active period.  </summary>
      <returns>A value that specifies how the timeline behaves after it reaches the end of its active period but its parent is inside its active or fill period. The default value is <see cref="F:System.Windows.Media.Animation.FillBehavior.HoldEnd" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Timeline.FillBehaviorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.FillBehavior" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.FillBehavior" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Timeline.FreezeCore(System.Boolean)">
      <summary>Makes this <see cref="T:System.Windows.Media.Animation.Timeline" /> unmodifiable or determines whether it can be made unmodifiable.</summary>
      <returns>If <paramref name="isChecking" /> is true, this method returns true if this instance can be made read-only, or false if it cannot be made read-only. If <paramref name="isChecking" /> is false, this method returns true if this instance is now read-only, or false if it cannot be made read-only, with the side effect of having begun to change the frozen status of this object.</returns>
      <param name="isChecking">true to check if this instance can be frozen; false to freeze this instance. </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Timeline.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.Timeline" /> object. </summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.Timeline" /> instance to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Timeline.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a frozen clone of the specified <see cref="T:System.Windows.Media.Animation.Timeline" />. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.Timeline" /> to copy and freeze.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Timeline.GetDesiredFrameRate(System.Windows.Media.Animation.Timeline)">
      <summary>Gets the desired frame rate of the specified <see cref="T:System.Windows.Media.Animation.Timeline" />. </summary>
      <returns>The desired frame rate of this timeline. The default value is null.</returns>
      <param name="timeline">The timeline from which to retrieve the desired frame rate.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Timeline.GetNaturalDuration(System.Windows.Media.Animation.Clock)">
      <summary>Returns the length of a single iteration of this <see cref="T:System.Windows.Media.Animation.Timeline" />. </summary>
      <returns>The length of a single iteration of this <see cref="T:System.Windows.Media.Animation.Timeline" />, or <see cref="P:System.Windows.Duration.Automatic" /> if the natural duration is unknown. </returns>
      <param name="clock">The <see cref="T:System.Windows.Media.Animation.Clock" /> that was created for this <see cref="T:System.Windows.Media.Animation.Timeline" />.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Timeline.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
      <summary>Returns the length of a single iteration of this <see cref="T:System.Windows.Media.Animation.Timeline" />. This method provides the implementation for <see cref="M:System.Windows.Media.Animation.Timeline.GetNaturalDuration(System.Windows.Media.Animation.Clock)" />. </summary>
      <returns>The length of a single iteration of this <see cref="T:System.Windows.Media.Animation.Timeline" />, or <see cref="P:System.Windows.Duration.Automatic" /> if the natural duration is unknown.</returns>
      <param name="clock">The <see cref="T:System.Windows.Media.Animation.Clock" /> that was created for this <see cref="T:System.Windows.Media.Animation.Timeline" />.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.Timeline.Name">
      <summary> Gets or sets the name of this <see cref="T:System.Windows.Media.Animation.Timeline" />. </summary>
      <returns>The name of this timeline. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Timeline.NameProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.Name" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.Name" /> dependency property.</returns>
    </member>
    <member name="E:System.Windows.Media.Animation.Timeline.RemoveRequested">
      <summary>Occurs when the clock created for this timeline or one of its parent timelines is removed.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.Timeline.RepeatBehavior">
      <summary>Gets or sets the repeating behavior of this timeline.  </summary>
      <returns>An iteration <see cref="P:System.Windows.Media.Animation.RepeatBehavior.Count" /> that specifies the number of times the timeline should play, a <see cref="T:System.TimeSpan" /> value that specifies the total the length of this timeline's active period, or the special value <see cref="P:System.Windows.Media.Animation.RepeatBehavior.Forever" />, which specifies that the timeline should repeat indefinitely. The default value is a <see cref="T:System.Windows.Media.Animation.RepeatBehavior" /> with a <see cref="P:System.Windows.Media.Animation.RepeatBehavior.Count" /> of 1, which indicates that the timeline plays once.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Timeline.RepeatBehaviorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Timeline.SetDesiredFrameRate(System.Windows.Media.Animation.Timeline,System.Nullable{System.Int32})">
      <summary>Sets the desired frame rate of the specified <see cref="T:System.Windows.Media.Animation.Timeline" />.</summary>
      <param name="timeline">The <see cref="T:System.Windows.Media.Animation.Timeline" /> to which <paramref name="desiredFrameRate" /> is assigned. </param>
      <param name="desiredFrameRate">The maximum number of frames this timeline should generate each second, or null if the system should control the number of frames.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.Timeline.SpeedRatio">
      <summary>Gets or sets the rate, relative to its parent, at which time progresses for this <see cref="T:System.Windows.Media.Animation.Timeline" />.  </summary>
      <returns>A finite value greater than 0 that describes the rate at which time progresses for this timeline, relative to the speed of the timeline's parent or, if this is a root timeline, the default timeline speed. The default value is 1.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> is less than 0 or is not a finite value.</exception>
    </member>
    <member name="F:System.Windows.Media.Animation.Timeline.SpeedRatioProperty">
      <summary>Identifies for the <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Timeline.SpeedRatio" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.TimelineCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Media.Animation.Timeline" /> objects. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.TimelineCollection" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.Animation.Timeline})">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.TimelineCollection" /> class that includes all of the same elements as an existing collection.</summary>
      <param name="collection">Collection of elements this instance is based on.</param>
      <exception cref="T:System.ArgumentException">Occurs when <paramref name="collection" /> is empty.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.#ctor(System.Int32)">
      <summary>Initializes a new instance of <see cref="T:System.Windows.Media.Animation.TimelineCollection" /> with the specified initial capacity.</summary>
      <param name="capacity">The initial capacity of the <see cref="T:System.Windows.Media.Animation.TimelineCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.Add(System.Windows.Media.Animation.Timeline)">
      <summary>Inserts a new <see cref="T:System.Windows.Media.Animation.Timeline" /> object into the <see cref="T:System.Windows.Media.Animation.TimelineCollection" />. </summary>
      <param name="value">The object to add.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.Clear">
      <summary>Removes all items from the <see cref="T:System.Windows.Media.Animation.TimelineCollection" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.TimelineCollection" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.TimelineCollection" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.Contains(System.Windows.Media.Animation.Timeline)">
      <summary>Determines whether the <see cref="T:System.Windows.Media.Animation.TimelineCollection" /> contains the specified <see cref="T:System.Windows.Media.Animation.Timeline" /> object. </summary>
      <returns>true if <paramref name="value" /> is found; otherwise, false.</returns>
      <param name="value">The object to locate.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.CopyTo(System.Windows.Media.Animation.Timeline[],System.Int32)">
      <summary>Copies the items of the <see cref="T:System.Windows.Media.Animation.TimelineCollection" /> to the passed Timeline array, starting at the specified index position. </summary>
      <param name="array">The destination array.</param>
      <param name="index">The zero-based index position where copying begins.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.TimelineCollection.Count">
      <summary> Gets the number of items contained in this <see cref="T:System.Windows.Media.Animation.TimelineCollection" />.  </summary>
      <returns>The number of items contained in this instance. </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.GetEnumerator">
      <summary>Gets an enumerator that can iterate the members of the collection.</summary>
      <returns>An object that can iterate the members of the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.IndexOf(System.Windows.Media.Animation.Timeline)">
      <summary>Gets the zero-based index position of a Timeline object in the <see cref="T:System.Windows.Media.Animation.TimelineCollection" />. </summary>
      <returns>The index position of <paramref name="value" /> within this list.  If not found, -1 is returned.</returns>
      <param name="value">The object to locate.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.Insert(System.Int32,System.Windows.Media.Animation.Timeline)">
      <summary>Inserts the specified Timeline object into this <see cref="T:System.Windows.Media.Animation.TimelineCollection" /> at the specified index position. </summary>
      <param name="index">The zero-based index position into which <paramref name="value" /> is inserted.</param>
      <param name="value">The object to insert.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.TimelineCollection.Item(System.Int32)">
      <summary> Gets or sets an item at the specified index position within this <see cref="T:System.Windows.Media.Animation.TimelineCollection" />. </summary>
      <returns>The Timeline object at the <paramref name="index" /> position.</returns>
      <param name="index">The index position to access.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or greater than or equal to the size of the <see cref="T:System.Windows.Media.Animation.TimelineCollection" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.Remove(System.Windows.Media.Animation.Timeline)">
      <summary>Removes the first occurrence of a specified <see cref="T:System.Windows.Media.Animation.Timeline" /> from this <see cref="T:System.Windows.Media.Animation.TimelineCollection" />. </summary>
      <returns>true if the operation was successful; otherwise, false.</returns>
      <param name="value">The object to remove.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.RemoveAt(System.Int32)">
      <summary> Removes the <see cref="T:System.Windows.Media.Animation.Timeline" /> at the specified index position from this <see cref="T:System.Windows.Media.Animation.TimelineCollection" />. </summary>
      <param name="index">The zero-based index position of the item to remove.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.TimelineCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.</summary>
      <returns>true if the the <see cref="T:System.Windows.Media.Animation.TimelineCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">A zero-based <see cref="T:System.Array" /> that receives the copied items from the <see cref="T:System.Windows.Media.Animation.TimelineCollection" />.</param>
      <param name="index">The first position in the specified <see cref="T:System.Array" /> to receive the copied contents.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.TimelineCollection.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>true if access to the <see cref="T:System.Windows.Media.Animation.TimelineCollection" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.TimelineCollection.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Windows.Media.Animation.TimelineCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.System#Collections#IList#Add(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Windows.Media.Animation.TimelineCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.System#Collections#IList#Contains(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Windows.Media.Animation.TimelineCollection" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.Animation.TimelineCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.Animation.TimelineCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
      <param name="index">The zero-based index at which to insert the <see cref="T:System.Object" />.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Windows.Media.Animation.TimelineCollection" />.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.TimelineCollection.System#Collections#IList#IsFixedSize">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
      <returns>true if the the <see cref="T:System.Windows.Media.Animation.TimelineCollection" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.TimelineCollection.System#Collections#IList#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsReadOnly" />.</summary>
      <returns>true if the the <see cref="T:System.Windows.Media.Animation.TimelineCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.TimelineCollection.System#Collections#IList#Item(System.Int32)">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.System#Collections#IList#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Windows.Media.Animation.TimelineCollection" />.</param>
    </member>
    <member name="T:System.Windows.Media.Animation.TimelineCollection.Enumerator">
      <summary>Enumerates the members of a <see cref="T:System.Windows.Media.Animation.TimelineCollection" />.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.TimelineCollection.Enumerator.Current">
      <summary>Gets a value that represents the current element in the collection.</summary>
      <returns>The current element in the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element in the collection.</summary>
      <returns>true if the enumerator successfully advanced to the next element in the collection; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.Enumerator.Reset">
      <summary>Resets the enumerator to its initial position.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.TimelineCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineCollection.Enumerator.System#IDisposable#Dispose">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.TimelineGroup">
      <summary>Abstract class that, when implemented represents a <see cref="T:System.Windows.Media.Animation.Timeline" /> that may contain a collection of child <see cref="T:System.Windows.Media.Animation.Timeline" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.TimelineGroup" /> class, with default properties. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineGroup.#ctor(System.Nullable{System.TimeSpan})">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.TimelineGroup" /> class with the specified <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" />.</summary>
      <param name="beginTime">The <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> for this <see cref="T:System.Windows.Media.Animation.TimelineGroup" />.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineGroup.#ctor(System.Nullable{System.TimeSpan},System.Windows.Duration)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.TimelineGroup" /> class with the specified <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> and <see cref="P:System.Windows.Media.Animation.Timeline.Duration" />.</summary>
      <param name="beginTime">The <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> for this <see cref="T:System.Windows.Media.Animation.TimelineGroup" />.</param>
      <param name="duration">The <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> for this <see cref="T:System.Windows.Media.Animation.TimelineGroup" />.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineGroup.#ctor(System.Nullable{System.TimeSpan},System.Windows.Duration,System.Windows.Media.Animation.RepeatBehavior)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.TimelineGroup" /> class with the specified <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" />, <see cref="P:System.Windows.Media.Animation.Timeline.Duration" />, and <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" />.</summary>
      <param name="beginTime">The <see cref="P:System.Windows.Media.Animation.Timeline.BeginTime" /> for this <see cref="T:System.Windows.Media.Animation.TimelineGroup" />.</param>
      <param name="duration">The <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> for this <see cref="T:System.Windows.Media.Animation.TimelineGroup" />.</param>
      <param name="repeatBehavior">The <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" /> for this <see cref="T:System.Windows.Media.Animation.TimelineGroup" />.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineGroup.AddChild(System.Object)">
      <summary>Adds a child <see cref="T:System.Windows.Media.Animation.Timeline" /> to this <see cref="T:System.Windows.Media.Animation.TimelineGroup" />.</summary>
      <param name="child">The object to be added as the child of this <see cref="T:System.Windows.Media.Animation.TimelineGroup" />. If this object is a <see cref="T:System.Windows.Media.Animation.Timeline" /> it will be added to the <see cref="P:System.Windows.Media.Animation.TimelineGroup.Children" /> collection; otherwise, an exception will be thrown.</param>
      <exception cref="T:System.ArgumentException">The parameter <paramref name="child" /> is not a <see cref="T:System.Windows.Media.Animation.Timeline" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineGroup.AddText(System.String)">
      <summary>Adds a text string as a child of this <see cref="T:System.Windows.Media.Animation.Timeline" />.</summary>
      <param name="childText">The text added to the <see cref="T:System.Windows.Media.Animation.Timeline" />.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineGroup.AllocateClock">
      <summary>Creates a type-specific clock for this timeline.</summary>
      <returns>A clock for this timeline.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.TimelineGroup.Children">
      <summary>Gets or sets the collection of direct child <see cref="T:System.Windows.Media.Animation.Timeline" /> objects of the <see cref="T:System.Windows.Media.Animation.TimelineGroup" />.  </summary>
      <returns>Child <see cref="T:System.Windows.Media.Animation.Timeline" /> objects of the <see cref="T:System.Windows.Media.Animation.TimelineGroup" />. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.TimelineGroup.ChildrenProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.TimelineGroup.Children" /> dependency property.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineGroup.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.TimelineGroup" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineGroup.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.TimelineGroup" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineGroup.CreateClock">
      <summary>Instantiates a new <see cref="T:System.Windows.Media.Animation.ClockGroup" /> object, using this instance. </summary>
      <returns>A <see cref="T:System.Windows.Media.Animation.ClockGroup" /> object.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineGroup.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="child"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.TimelineGroup.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="childText"></param>
    </member>
    <member name="T:System.Windows.Media.Animation.TimeSeekOrigin">
      <summary>Indicates the origin of a seek operation. The offset of the seek operation is relative to this origin. </summary>
    </member>
    <member name="F:System.Windows.Media.Animation.TimeSeekOrigin.BeginTime">
      <summary>The offset is relative to the beginning of the activation period of the <see cref="T:System.Windows.Media.Animation.Timeline" />.   </summary>
    </member>
    <member name="F:System.Windows.Media.Animation.TimeSeekOrigin.Duration">
      <summary>The offset is relative to the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> of the <see cref="T:System.Windows.Media.Animation.Timeline" />, the length of a single iteration. This value has no meaning if the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> of the <see cref="T:System.Windows.Media.Animation.Timeline" /> is not resolved. </summary>
    </member>
    <member name="T:System.Windows.Media.Animation.Vector3DAnimation">
      <summary>Animates the value of a Vector3D property using linear interpolation between two values. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimation.#ctor">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Vector3DAnimation" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimation.#ctor(System.Windows.Media.Media3D.Vector3D,System.Windows.Duration)">
      <summary>Initializes a new instance of the Vector3DAnimation class with the specified destination value and <see cref="P:System.Windows.Media.Animation.Timeline.Duration" />.</summary>
      <param name="toValue">The ending value of this animation.</param>
      <param name="duration">The new animation's <see cref="P:System.Windows.Media.Animation.Timeline.Duration" />.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimation.#ctor(System.Windows.Media.Media3D.Vector3D,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Vector3DAnimation" /> class that animates to the specified value over the specified duration and has the specified fill behavior. The starting value for the animation is the base value of the property being animated or the output from another animation.</summary>
      <param name="toValue">The destination value of the animation.</param>
      <param name="duration">The length of time the animation takes to play from start to finish, once. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
      <param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimation.#ctor(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Duration)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Vector3DAnimation" /> class that animates from the specified starting value to the specified destination value over the specified duration.</summary>
      <param name="fromValue">The starting value of the animation.</param>
      <param name="toValue">The destination value of the animation.</param>
      <param name="duration">The length of time the animation takes to play from start to finish, once. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimation.#ctor(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Vector3DAnimation" /> class that animates from the specified starting value to the specified destination value over the specified duration and has the specified fill behavior.</summary>
      <param name="fromValue">The starting value of the animation.</param>
      <param name="toValue">The destination value of the animation.</param>
      <param name="duration">The length of time the animation takes to play from start to finish, once. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
      <param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.Vector3DAnimation.By">
      <summary> Gets or sets the total amount by which the animation changes its starting value.  </summary>
      <returns>The total amount by which the animation changes its starting value.     The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Vector3DAnimation.ByProperty">
      <summary> Identifies the <see cref="P:System.Windows.Media.Animation.Vector3DAnimation.By" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Vector3DAnimation.By" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimation.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.Vector3DAnimation" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimation.CreateInstanceCore">
      <summary>Creates a new instance of the <see cref="T:System.Windows.Media.Animation.Vector3DAnimation" />. </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Vector3DAnimation.EasingFunction">
      <summary>Gets or sets the easing function applied to this animation.</summary>
      <returns>The easing function applied to this animation.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Vector3DAnimation.EasingFunctionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.Vector3DAnimation.EasingFunction" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Vector3DAnimation.EasingFunction" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Vector3DAnimation.From">
      <summary> Gets or sets the animation's starting value.  </summary>
      <returns>The starting value of the animation. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Vector3DAnimation.FromProperty">
      <summary> Identifies the <see cref="P:System.Windows.Media.Animation.Vector3DAnimation.From" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Vector3DAnimation.From" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimation.GetCurrentValueCore(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Animation.AnimationClock)">
      <summary>Calculates a value that represents the current value of the property being animated, as determined by the <see cref="T:System.Windows.Media.Animation.Vector3DAnimation" />. </summary>
      <returns>The calculated value of the property, as determined by the current animation.</returns>
      <param name="defaultOriginValue">The suggested origin value, used if the animation does not have its own explicitly set start value.</param>
      <param name="defaultDestinationValue">The suggested destination value, used if the animation does not have its own explicitly set end value.</param>
      <param name="animationClock">An <see cref="T:System.Windows.Media.Animation.AnimationClock" /> that generates the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> used by the animation.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.Vector3DAnimation.IsAdditive">
      <summary>Gets or sets a value that indicates whether the target property's current value should be added to this animation's starting value.  </summary>
      <returns>true if the target property's current value should be added to this animation's starting value; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Vector3DAnimation.IsCumulative">
      <summary> Gets or sets a value that specifies whether the animation's value accumulates when it repeats.  </summary>
      <returns>true if the animation accumulates its values when its <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" /> property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Vector3DAnimation.To">
      <summary> Gets or sets the animation's ending value.  </summary>
      <returns>The ending value of the animation. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Vector3DAnimation.ToProperty">
      <summary> Identifies the <see cref="P:System.Windows.Media.Animation.Vector3DAnimation.To" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Vector3DAnimation.To" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.Vector3DAnimationBase">
      <summary>Abstract class that represents an animated <see cref="T:System.Windows.Media.Media3D.Vector3D" /> value. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimationBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Vector3DAnimationBase" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimationBase.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.Vector3DAnimationBase" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
      <summary>Gets the current value of the animation.</summary>
      <returns>The current value of the animation.</returns>
      <param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. </param>
      <param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
      <param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock" /> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> value to be used by the animation to generate its output value.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimationBase.GetCurrentValue(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Animation.AnimationClock)">
      <summary>Gets the current value of the animation.</summary>
      <returns>The current value of the animation.</returns>
      <param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. </param>
      <param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
      <param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock" /> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> value to be used by the animation to generate its output value.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimationBase.GetCurrentValueCore(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Animation.AnimationClock)">
      <summary>Calculates a value that represents the current value of the property being animated, as determined by the host animation. </summary>
      <returns>The current value of this animation.</returns>
      <param name="defaultOriginValue">The suggested origin value, used if the animation does not have its own explicitly set start value.</param>
      <param name="defaultDestinationValue">The suggested destination value, used if the animation does not have its own explicitly set end value.</param>
      <param name="animationClock">An <see cref="T:System.Windows.Media.Animation.AnimationClock" /> that generates the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> used by the host animation.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.Vector3DAnimationBase.TargetPropertyType">
      <summary>Gets the type of value this animation generates.</summary>
      <returns>The type of value produced by this animation.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames">
      <summary> Animates the value of a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> property along a set of <see cref="P:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.KeyFrames" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.AddChild(System.Object)">
      <summary>Adds a child <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> to this <see cref="T:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames" />. </summary>
      <param name="child">The object to be added as the child of this <see cref="T:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames" />. </param>
      <exception cref="T:System.ArgumentException">The parameter <paramref name="child" /> is not a <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.AddText(System.String)">
      <summary>Adds a text string as a child of this <see cref="T:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames" />.</summary>
      <param name="childText">The text added to the <see cref="T:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames" />.</param>
      <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames" /> does not accept text as a child, so this method will raise this exception unless a derived class has overridden this behavior which allows text to be added.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.Clone">
      <summary>Returns a modifiable clone of this instance.</summary>
      <returns>A modifiable clone of this instance. The returned clone is effectively a deep copy of the current object, although some copying might be deferred until necessary for improved performance. The copy's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.CloneCore(System.Windows.Freezable)">
      <summary>Makes the specified <see cref="T:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames" /> a modifiable clone (deep copy) of the current object using base (non-animated, non-databound) property values.</summary>
      <param name="sourceFreezable">Destination for the modifiable clone of the current object.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames" /> object, making deep copies of this object's current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes the specified <see cref="T:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames" /> a modifiable clone (deep copy) of the current object using current property values.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames" /> to be cloned.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.CreateInstanceCore">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames" />. </summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.FreezeCore(System.Boolean)">
      <summary>Makes this instance of <see cref="T:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames" /> object unmodifiable or determines whether it can be made unmodifiable..</summary>
      <returns>If <paramref name="isChecking" /> is true, this method returns true if this instance can be made read-only, or false if it cannot be made read-only. If <paramref name="isChecking" /> is false, this method returns true if this instance is now read-only, or false if it cannot be made read-only, with the side effect of having begun to change the frozen status of this object.</returns>
      <param name="isChecking">true to check if this instance can be frozen; false to freeze this instance. </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames" /> object.</summary>
      <param name="source">The <see cref="T:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames" /> object to be cloned.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a copy of the specified <see cref="T:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames" />.</summary>
      <param name="source">The <see cref="T:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames" /> to copy and freeze</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.GetCurrentValueCore(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Animation.AnimationClock)">
      <summary> Calculates a value that represents the current value of the property being animated, as determined by this instance of <see cref="T:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames" />.</summary>
      <returns>The calculated value of the property, as determined by the current instance.</returns>
      <param name="defaultOriginValue">The suggested origin value, used if the animation does not have its own explicitly set start value.</param>
      <param name="defaultDestinationValue">The suggested destination value, used if the animation does not have its own explicitly set end value.</param>
      <param name="animationClock">An <see cref="T:System.Windows.Media.Animation.AnimationClock" /> that generates the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> used by the host animation.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
      <summary>Provide a custom natural <see cref="T:System.Windows.Duration" /> when the <see cref="T:System.Windows.Duration" /> property is set to <see cref="P:System.Windows.Duration.Automatic" />. </summary>
      <returns>If the last key frame of this animation is a <see cref="T:System.Windows.Media.Animation.KeyTime" />, then this value is used as the <see cref="P:System.Windows.Media.Animation.Clock.NaturalDuration" />; otherwise it will be one second.</returns>
      <param name="clock">The <see cref="T:System.Windows.Media.Animation.Clock" /> whose natural duration is desired.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.IsAdditive">
      <summary>Gets a value that specifies whether the animation's output value is added to the base value of the property being animated.  </summary>
      <returns>true if the animation adds its output value to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.IsCumulative">
      <summary>Gets or sets a value that specifies whether the animation's value accumulates when it repeats.</summary>
      <returns>true if the animation accumulates its values when its <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" /> property causes it to repeat its simple duration; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.KeyFrames">
      <summary> Gets or sets the collection of <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> objects that define the animation. </summary>
      <returns>The collection of <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> objects that define the animation. The default value is <see cref="P:System.Windows.Media.Animation.Vector3DKeyFrameCollection.Empty" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.OnChanged">
      <summary>Called when the current <see cref="T:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames" /> object is modified.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.ShouldSerializeKeyFrames">
      <summary>Returns true if the value of the <see cref="P:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.KeyFrames" /> property of this instance of <see cref="T:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames" /> should be value-serialized.</summary>
      <returns>true if the property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="child"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="childText"></param>
    </member>
    <member name="P:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames.System#Windows#Media#Animation#IKeyFrameAnimation#KeyFrames">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.Vector3DKeyFrame">
      <summary>Abstract class that, when implemented, defines an animation segment with its own target value and interpolation method for a <see cref="T:System.Windows.Media.Animation.Vector3DAnimationUsingKeyFrames" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrame.#ctor(System.Windows.Media.Media3D.Vector3D)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> class that has the specified target <see cref="P:System.Windows.Media.Animation.Vector3DKeyFrame.Value" />.  </summary>
      <param name="value">The <see cref="P:System.Windows.Media.Animation.Vector3DKeyFrame.Value" /> of the new <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> instance.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrame.#ctor(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> class that has the specified target <see cref="P:System.Windows.Media.Animation.Vector3DKeyFrame.Value" /> and <see cref="P:System.Windows.Media.Animation.Vector3DKeyFrame.KeyTime" />.  </summary>
      <param name="value">The <see cref="P:System.Windows.Media.Animation.Vector3DKeyFrame.Value" /> of the new <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> instance.</param>
      <param name="keyTime">The <see cref="P:System.Windows.Media.Animation.Vector3DKeyFrame.KeyTime" /> of the new <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> instance.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrame.InterpolateValue(System.Windows.Media.Media3D.Vector3D,System.Double)">
      <summary>Returns the interpolated value of a specific key frame at the progress increment provided. </summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Occurs if <paramref name="keyFrameProgress" /> is not between 0.0 and 1.0, inclusive.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrame.InterpolateValueCore(System.Windows.Media.Media3D.Vector3D,System.Double)">
      <summary>Calculates the value of a key frame at the progress increment provided. </summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from; typically the value of the previous key frame.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.Vector3DKeyFrame.KeyTime">
      <summary> Gets or sets the time at which the key frame's target <see cref="P:System.Windows.Media.Animation.Vector3DKeyFrame.Value" /> should be reached. </summary>
      <returns>The time at which the key frame's current value should be equal to its <see cref="P:System.Windows.Media.Animation.Vector3DKeyFrame.Value" /> property. The default value is <see cref="P:System.Windows.Media.Animation.KeyTime.Uniform" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Vector3DKeyFrame.KeyTimeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.Vector3DKeyFrame.KeyTime" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Vector3DKeyFrame.KeyTime" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Vector3DKeyFrame.System#Windows#Media#Animation#IKeyFrame#Value">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.Vector3DKeyFrame.Value">
      <summary> Gets or sets the key frame's target value. </summary>
      <returns>The key frame's target value, which is the value of this key frame at its specified <see cref="P:System.Windows.Media.Animation.Vector3DKeyFrame.KeyTime" />. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.Vector3DKeyFrame.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.Vector3DKeyFrame.Value" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.Vector3DKeyFrame.Value" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.Vector3DKeyFrameCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> objects. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrameCollection" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.Add(System.Windows.Media.Animation.Vector3DKeyFrame)">
      <summary>Adds a <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> to the end of the collection. </summary>
      <returns>The index at which the <paramref name="keyFrame" /> was added.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> to add to the end of the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.Clear">
      <summary>Removes all <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> objects from the collection. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrameCollection" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.CloneCore(System.Windows.Freezable)">
      <summary>Makes this instance a deep copy of the specified <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrameCollection" />. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrameCollection" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes this instance a modifiable deep copy of the specified <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrameCollection" /> using current property values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrameCollection" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.Contains(System.Windows.Media.Animation.Vector3DKeyFrame)">
      <summary>Gets a value that indicates whether the collection contains the specified <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" />. </summary>
      <returns>true if the collection contains <paramref name="keyFrame" />; otherwise, false.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.CopyTo(System.Windows.Media.Animation.Vector3DKeyFrame[],System.Int32)">
      <summary>Copies all of the <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> objects in a collection to a specified array. </summary>
      <param name="array">Identifies the array to which content is copied.</param>
      <param name="index">Index position in the array to which the contents of the collection are copied.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.Vector3DKeyFrameCollection.Count">
      <summary>Gets the number of key frames contained in the <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrameCollection" />.</summary>
      <returns>The number of key frames contained in the <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrameCollection" />. </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.CreateInstanceCore">
      <summary>Creates a new, frozen instance of <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrameCollection" />.</summary>
      <returns>A frozen instance of <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrameCollection" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Vector3DKeyFrameCollection.Empty">
      <summary> Gets an empty <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrameCollection" />.  </summary>
      <returns>An empty <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrameCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.FreezeCore(System.Boolean)">
      <summary>Makes this instance of <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrameCollection" /> unmodifiable or determines whether it can be made unmodifiable.</summary>
      <returns>If <paramref name="isChecking" /> is true, this method returns true if this instance can be made read-only, or false if it cannot be made read-only. If <paramref name="isChecking" /> is false, this method returns true if this instance is now read-only, or false if it cannot be made read-only, with the side effect of having begun to change the frozen status of this object.</returns>
      <param name="isChecking">true to check if this instance can be frozen; false to freeze this instance. </param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrameCollection" /> object. </summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrameCollection" /> object to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a frozen clone of the specified <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrameCollection" />. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrameCollection" /> to copy and freeze.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.GetEnumerator">
      <summary> Returns an enumerator that can iterate through the collection. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.IndexOf(System.Windows.Media.Animation.Vector3DKeyFrame)">
      <summary> Searches for the specified <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> and returns the zero-based index of the first occurrence within the entire collection.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="keyFrame" /> within the entire collection, if found; otherwise, -1.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.Insert(System.Int32,System.Windows.Media.Animation.Vector3DKeyFrame)">
      <summary>Inserts a <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> into a specific location within the collection. </summary>
      <param name="index">The index position at which the <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> is inserted.</param>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> object to insert in the collection.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.Vector3DKeyFrameCollection.IsFixedSize">
      <summary>Gets a value that indicates if the collection is frozen.</summary>
      <returns>true if the collection is frozen; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Vector3DKeyFrameCollection.IsReadOnly">
      <summary> Gets a value that indicates if the collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Vector3DKeyFrameCollection.IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
      <returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.Vector3DKeyFrameCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> at the specified index position.  </summary>
      <returns>The <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> at the specified index.</returns>
      <param name="index">The zero-based index of the <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> to get or set.</param>
      <exception cref="T:System.InvalidOperationException">The attempt to modify the collection is invalid because the collection is frozen (its <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Windows.Media.Animation.Vector3DKeyFrameCollection.Count" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.Remove(System.Windows.Media.Animation.Vector3DKeyFrame)">
      <summary>Removes a <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> object from the collection. </summary>
      <param name="keyFrame">Identifies the <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> to remove from the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> at the specified index position from the collection. </summary>
      <param name="index">Index position of the <see cref="T:System.Windows.Media.Animation.Vector3DKeyFrame" /> to be removed.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.Vector3DKeyFrameCollection.SyncRoot">
      <summary> Gets an object that can be used to synchronize access to the collection. </summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="array"></param>
      <param name="index"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.System#Collections#IList#Add(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.System#Collections#IList#Contains(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code. </summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code. </summary>
      <param name="index"></param>
      <param name="keyFrame"></param>
    </member>
    <member name="P:System.Windows.Media.Animation.Vector3DKeyFrameCollection.System#Collections#IList#Item(System.Int32)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="index"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.Vector3DKeyFrameCollection.System#Collections#IList#Remove(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code. </summary>
      <param name="keyFrame"></param>
    </member>
    <member name="T:System.Windows.Media.Animation.VectorAnimation">
      <summary> Animates the value of a <see cref="T:System.Windows.Vector" /> property between two target values using linear interpolation over a specified <see cref="P:System.Windows.Media.Animation.Timeline.Duration" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimation.#ctor">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.VectorAnimation" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimation.#ctor(System.Windows.Vector,System.Windows.Duration)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.VectorAnimation" /> class that animates to the specified value over the specified duration. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
      <param name="toValue">The destination value of the animation. </param>
      <param name="duration">The length of time the animation takes to play from start to finish, once. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimation.#ctor(System.Windows.Vector,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.VectorAnimation" /> class that animates to the specified value over the specified duration and has the specified fill behavior. The starting value for the animation is the base value of the property being animated or the output from another animation. </summary>
      <param name="toValue">The destination value of the animation. </param>
      <param name="duration">The length of time the animation takes to play from start to finish, once. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
      <param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimation.#ctor(System.Windows.Vector,System.Windows.Vector,System.Windows.Duration)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.VectorAnimation" /> class that animates from the specified starting value to the specified destination value over the specified duration. </summary>
      <param name="fromValue">The starting value of the animation.</param>
      <param name="toValue">The destination value of the animation. </param>
      <param name="duration">The length of time the animation takes to play from start to finish, once. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimation.#ctor(System.Windows.Vector,System.Windows.Vector,System.Windows.Duration,System.Windows.Media.Animation.FillBehavior)">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.VectorAnimation" /> class that animates from the specified starting value to the specified destination value over the specified duration and has the specified fill behavior. </summary>
      <param name="fromValue">The starting value of the animation.</param>
      <param name="toValue">The destination value of the animation. </param>
      <param name="duration">The length of time the animation takes to play from start to finish, once. See the <see cref="P:System.Windows.Media.Animation.Timeline.Duration" /> property for more information.</param>
      <param name="fillBehavior">Specifies how the animation behaves when it is not active.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.VectorAnimation.By">
      <summary> Gets or sets the total amount by which the animation changes its starting value. </summary>
      <returns>The total amount by which the animation changes its starting value.     The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.VectorAnimation.ByProperty">
      <summary> Identifies the <see cref="P:System.Windows.Media.Animation.VectorAnimation.By" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.VectorAnimation.By" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimation.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.VectorAnimation" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimation.CreateInstanceCore">
      <summary>Creates a new instance of the <see cref="T:System.Windows.Media.Animation.VectorAnimation" />.          </summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.VectorAnimation.EasingFunction">
      <summary>Gets or sets the easing function applied to this animation.</summary>
      <returns>The easing function applied to this animation.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.VectorAnimation.EasingFunctionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.VectorAnimation.EasingFunction" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.VectorAnimation.EasingFunction" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.VectorAnimation.From">
      <summary> Gets or sets the animation's starting value. </summary>
      <returns>The starting value of the animation. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.VectorAnimation.FromProperty">
      <summary> Identifies the <see cref="P:System.Windows.Media.Animation.VectorAnimation.From" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.VectorAnimation.From" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimation.GetCurrentValueCore(System.Windows.Vector,System.Windows.Vector,System.Windows.Media.Animation.AnimationClock)">
      <summary>Calculates a value that represents the current value of the property being animated, as determined by the <see cref="T:System.Windows.Media.Animation.VectorAnimation" />.</summary>
      <returns>The calculated value of the property, as determined by the current animation.</returns>
      <param name="defaultOriginValue">The suggested origin value, used if the animation does not have its own explicitly set start value.</param>
      <param name="defaultDestinationValue">The suggested destination value, used if the animation does not have its own explicitly set end value.</param>
      <param name="animationClock">An <see cref="T:System.Windows.Media.Animation.AnimationClock" /> that generates the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> used by the animation.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.VectorAnimation.IsAdditive">
      <summary> Gets or sets a value that indicates whether the target property's current value should be added to this animation's starting value.  </summary>
      <returns>true if the target property's current value should be added to this animation's starting value; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.VectorAnimation.IsCumulative">
      <summary> Gets or sets a value that specifies whether the animation's value accumulates when it repeats. </summary>
      <returns>true if the animation accumulates its values when its <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" /> property causes it to repeat its simple duration. otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.VectorAnimation.To">
      <summary> Gets or sets the animation's ending value. </summary>
      <returns>The ending value of the animation. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.VectorAnimation.ToProperty">
      <summary> Identifies the <see cref="P:System.Windows.Media.Animation.VectorAnimation.To" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.VectorAnimation.To" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.VectorAnimationBase">
      <summary>Abstract class that, when implemented, animates a <see cref="T:System.Windows.Vector" /> value. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimationBase.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.VectorAnimationBase" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimationBase.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.VectorAnimationBase" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimationBase.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
      <summary>Gets the current value of the animation.</summary>
      <returns>The current value of the animation.</returns>
      <param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. </param>
      <param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
      <param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock" /> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> value to be used by the animation to generate its output value.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimationBase.GetCurrentValue(System.Windows.Vector,System.Windows.Vector,System.Windows.Media.Animation.AnimationClock)">
      <summary>Gets the current value of the animation.</summary>
      <returns>The current value of this animation.</returns>
      <param name="defaultOriginValue">The origin value provided to the animation if the animation does not have its own start value. </param>
      <param name="defaultDestinationValue">The destination value provided to the animation if the animation does not have its own destination value.</param>
      <param name="animationClock">The <see cref="T:System.Windows.Media.Animation.AnimationClock" /> which can generate the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> value to be used by the animation to generate its output value.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimationBase.GetCurrentValueCore(System.Windows.Vector,System.Windows.Vector,System.Windows.Media.Animation.AnimationClock)">
      <summary>Calculates a value that represents the current value of the property being animated, as determined by the host animation. </summary>
      <returns>The calculated value of the property, as determined by the current animation.</returns>
      <param name="defaultOriginValue">The suggested origin value, used if the animation does not have its own explicitly set start value. </param>
      <param name="defaultDestinationValue">The suggested destination value, used if the animation does not have its own explicitly set end value.</param>
      <param name="animationClock">An <see cref="T:System.Windows.Media.Animation.AnimationClock" /> that generates the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> used by the host animation.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.VectorAnimationBase.TargetPropertyType">
      <summary>Gets the type of value this animation generates.</summary>
      <returns>The type of value produced by this animation.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames">
      <summary> Animates the value of a <see cref="T:System.Windows.Vector" /> property along a set of <see cref="P:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.KeyFrames" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.AddChild(System.Object)">
      <summary>Adds a child <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> to this <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames" />. </summary>
      <param name="child">The object to be added as the child of this <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames" />. </param>
      <exception cref="T:System.ArgumentException">The parameter <paramref name="child" /> is not a <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.AddText(System.String)">
      <summary>Adds a text string as a child of this <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames" />.</summary>
      <param name="childText">The text added to the <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames" />.</param>
      <exception cref="T:System.InvalidOperationException">A <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames" /> does not accept text as a child, so this method will raise this exception unless a derived class has overridden this behavior which allows text to be added.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.CloneCore(System.Windows.Freezable)">
      <summary>Makes this instance a deep copy of the specified <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames" />. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes this instance a modifiable deep copy of the specified <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames" /> using current property values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.CreateInstanceCore">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames" />. </summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.FreezeCore(System.Boolean)">
      <summary>Makes this instance of <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames" /> object unmodifiable or determines whether it can be made unmodifiable..</summary>
      <returns>If <paramref name="isChecking" /> is true, this method returns true if this instance can be made read-only, or false if it cannot be made read-only. If <paramref name="isChecking" /> is false, this method returns true if this instance is now read-only, or false if it cannot be made read-only, with the side effect of having begun to change the frozen status of this object.</returns>
      <param name="isChecking">true to check if this instance can be frozen; false to freeze this instance. </param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames" /> object. </summary>
      <param name="source">The <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames" /> object to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a frozen clone of the specified <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames" />. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="source">The <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames" /> to copy and freeze.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.GetCurrentValueCore(System.Windows.Vector,System.Windows.Vector,System.Windows.Media.Animation.AnimationClock)">
      <summary> Calculates a value that represents the current value of the property being animated, as determined by this instance of <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames" />.</summary>
      <returns>The calculated value of the property, as determined by the current instance.</returns>
      <param name="defaultOriginValue">The suggested origin value, used if the animation does not have its own explicitly set start value.</param>
      <param name="defaultDestinationValue">The suggested destination value, used if the animation does not have its own explicitly set end value.</param>
      <param name="animationClock">An <see cref="T:System.Windows.Media.Animation.AnimationClock" /> that generates the <see cref="P:System.Windows.Media.Animation.Clock.CurrentTime" /> or <see cref="P:System.Windows.Media.Animation.Clock.CurrentProgress" /> used by the host animation.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.GetNaturalDurationCore(System.Windows.Media.Animation.Clock)">
      <summary>Provide a custom natural <see cref="T:System.Windows.Duration" /> when the <see cref="T:System.Windows.Duration" /> property is set to <see cref="P:System.Windows.Duration.Automatic" />. </summary>
      <returns>If the last key frame of this animation is a <see cref="T:System.Windows.Media.Animation.KeyTime" />, then this value is used as the <see cref="P:System.Windows.Media.Animation.Clock.NaturalDuration" />; otherwise it will be one second.</returns>
      <param name="clock">The <see cref="T:System.Windows.Media.Animation.Clock" /> whose natural duration is desired.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.IsAdditive">
      <summary>Gets a value that specifies whether the animation's output value is added to the base value of the property being animated.  </summary>
      <returns>true if the animation adds its output value to the base value of the property being animated instead of replacing it; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.IsCumulative">
      <summary>Gets or sets a value that specifies whether the animation's value accumulates when it repeats.</summary>
      <returns>true if the animation accumulates its values when its <see cref="P:System.Windows.Media.Animation.Timeline.RepeatBehavior" /> property causes it to repeat its simple duration; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.KeyFrames">
      <summary> Gets or sets the collection of <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> objects that define the animation. </summary>
      <returns>The collection of <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> objects that define the animation. The default value is <see cref="P:System.Windows.Media.Animation.VectorKeyFrameCollection.Empty" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.OnChanged">
      <summary>Called when the current <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames" /> object is modified.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.ShouldSerializeKeyFrames">
      <summary>Returns true if the value of the <see cref="P:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.KeyFrames" /> property of this instance of <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames" /> should be value-serialized.</summary>
      <returns>true if the property value should be serialized; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="child"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
      <param name="childText"></param>
    </member>
    <member name="P:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames.System#Windows#Media#Animation#IKeyFrameAnimation#KeyFrames">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Windows.Media.Animation.VectorKeyFrame">
      <summary>Abstract class that, when implemented, defines an animation segment with its own target value and interpolation method for a <see cref="T:System.Windows.Media.Animation.VectorAnimationUsingKeyFrames" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrame.#ctor(System.Windows.Vector)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> class that has the specified target <see cref="P:System.Windows.Media.Animation.VectorKeyFrame.Value" />.  </summary>
      <param name="value">The <see cref="P:System.Windows.Media.Animation.VectorKeyFrame.Value" /> of the new <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> instance.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrame.#ctor(System.Windows.Vector,System.Windows.Media.Animation.KeyTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> class that has the specified target <see cref="P:System.Windows.Media.Animation.VectorKeyFrame.Value" /> and <see cref="P:System.Windows.Media.Animation.VectorKeyFrame.KeyTime" />.  </summary>
      <param name="value">The <see cref="P:System.Windows.Media.Animation.VectorKeyFrame.Value" /> of the new <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> instance.</param>
      <param name="keyTime">The <see cref="P:System.Windows.Media.Animation.VectorKeyFrame.KeyTime" /> of the new <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> instance.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrame.InterpolateValue(System.Windows.Vector,System.Double)">
      <summary>Returns the interpolated value of a specific key frame at the progress increment provided. </summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Occurs if <paramref name="keyFrameProgress" /> is not between 0.0 and 1.0, inclusive.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrame.InterpolateValueCore(System.Windows.Vector,System.Double)">
      <summary>Calculates the value of a key frame at the progress increment provided. </summary>
      <returns>The output value of this key frame given the specified base value and progress.</returns>
      <param name="baseValue">The value to animate from; typically the value of the previous key frame.</param>
      <param name="keyFrameProgress">A value between 0.0 and 1.0, inclusive, that specifies the percentage of time that has elapsed for this key frame.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.VectorKeyFrame.KeyTime">
      <summary> Gets or sets the time at which the key frame's target <see cref="P:System.Windows.Media.Animation.VectorKeyFrame.Value" /> should be reached.  </summary>
      <returns>The time at which the key frame's current value should be equal to its <see cref="P:System.Windows.Media.Animation.VectorKeyFrame.Value" /> property. The default value is <see cref="P:System.Windows.Media.Animation.KeyTime.Uniform" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.VectorKeyFrame.KeyTimeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.VectorKeyFrame.KeyTime" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.VectorKeyFrame.KeyTime" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.VectorKeyFrame.System#Windows#Media#Animation#IKeyFrame#Value">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="P:System.Windows.Media.Animation.VectorKeyFrame.Value">
      <summary> Gets or sets the key frame's target value.  </summary>
      <returns>The key frame's target value, which is the value of this key frame at its specified <see cref="P:System.Windows.Media.Animation.VectorKeyFrame.KeyTime" />. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.Animation.VectorKeyFrame.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Animation.VectorKeyFrame.Value" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Animation.VectorKeyFrame.Value" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Animation.VectorKeyFrameCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> objects. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Animation.VectorKeyFrameCollection" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.Add(System.Windows.Media.Animation.VectorKeyFrame)">
      <summary>Adds a <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> to the end of the collection. </summary>
      <returns>The index at which the <paramref name="keyFrame" /> was added.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> to add to the end of the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.Clear">
      <summary>Removes all <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> objects from the collection. </summary>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.VectorKeyFrameCollection" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.CloneCore(System.Windows.Freezable)">
      <summary>Makes this instance a deep copy of the specified <see cref="T:System.Windows.Media.Animation.VectorKeyFrameCollection" />. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.VectorKeyFrameCollection" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes this instance a modifiable deep copy of the specified <see cref="T:System.Windows.Media.Animation.VectorKeyFrameCollection" /> using current property values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.VectorKeyFrameCollection" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.Contains(System.Windows.Media.Animation.VectorKeyFrame)">
      <summary>Gets a value that indicates whether the collection contains the specified <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" />. </summary>
      <returns>true if the collection contains <paramref name="keyFrame" />; otherwise, false.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.CopyTo(System.Windows.Media.Animation.VectorKeyFrame[],System.Int32)">
      <summary>Copies all of the <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> objects in a collection to a specified array. </summary>
      <param name="array">Identifies the array to which content is copied.</param>
      <param name="index">Index position in the array to which the contents of the collection are copied.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.VectorKeyFrameCollection.Count">
      <summary>Gets the number of key frames contained in the <see cref="T:System.Windows.Media.Animation.VectorKeyFrameCollection" />.</summary>
      <returns>The number of key frames contained in the <see cref="T:System.Windows.Media.Animation.VectorKeyFrameCollection" />. </returns>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.CreateInstanceCore">
      <summary>Creates a new, frozen instance of <see cref="T:System.Windows.Media.Animation.VectorKeyFrameCollection" />.</summary>
      <returns>A frozen instance of <see cref="T:System.Windows.Media.Animation.VectorKeyFrameCollection" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.VectorKeyFrameCollection.Empty">
      <summary> Gets an empty <see cref="T:System.Windows.Media.Animation.VectorKeyFrameCollection" />.  </summary>
      <returns>An empty <see cref="T:System.Windows.Media.Animation.VectorKeyFrameCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.FreezeCore(System.Boolean)">
      <summary>Makes this instance of <see cref="T:System.Windows.Media.Animation.VectorKeyFrameCollection" /> read-only or determines whether it can be made read-only.</summary>
      <returns>If <paramref name="isChecking" /> is true, this method returns true if this instance can be made read-only, or false if it cannot be made read-only. If <paramref name="isChecking" /> is false, this method returns true if this instance is now read-only, or false if it cannot be made read-only, with the side effect of having begun to change the frozen status of this object.</returns>
      <param name="isChecking">true to check if this instance can be frozen; false to freeze this instance. </param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Animation.VectorKeyFrameCollection" /> object. </summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.VectorKeyFrameCollection" /> object to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a frozen clone of the specified <see cref="T:System.Windows.Media.Animation.VectorKeyFrameCollection" />. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Animation.VectorKeyFrameCollection" /> to copy and freeze.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.GetEnumerator">
      <summary> Returns an enumerator that can iterate through the collection. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.IndexOf(System.Windows.Media.Animation.VectorKeyFrame)">
      <summary> Searches for the specified <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> and returns the zero-based index of the first occurrence within the entire collection.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="keyFrame" /> within the entire collection, if found; otherwise, -1.</returns>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.Insert(System.Int32,System.Windows.Media.Animation.VectorKeyFrame)">
      <summary>Inserts a <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> into a specific location within the collection. </summary>
      <param name="index">The index position at which the <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> is inserted.</param>
      <param name="keyFrame">The <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> object to insert in the collection.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.VectorKeyFrameCollection.IsFixedSize">
      <summary>Gets a value that indicates if the collection size can ever change.</summary>
      <returns>true if the collection is frozen; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.VectorKeyFrameCollection.IsReadOnly">
      <summary> Gets a value that indicates if the collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.VectorKeyFrameCollection.IsSynchronized">
      <summary>Gets a value that indicates whether access to the collection is synchronized (thread-safe). </summary>
      <returns>true if access to the collection is synchronized (thread-safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Animation.VectorKeyFrameCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> at the specified index position.  </summary>
      <returns>The <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> at the specified index.</returns>
      <param name="index">The zero-based index of the <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> to get or set.</param>
      <exception cref="T:System.InvalidOperationException">The attempt to modify the collection is invalid because the collection is frozen (its <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.-or-<paramref name="index" /> is equal to or greater than <see cref="P:System.Windows.Media.Animation.VectorKeyFrameCollection.Count" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.Remove(System.Windows.Media.Animation.VectorKeyFrame)">
      <summary>Removes a <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> object from the collection. </summary>
      <param name="keyFrame">Identifies the <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> to remove from the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> at the specified index position from the collection. </summary>
      <param name="index">Index position of the <see cref="T:System.Windows.Media.Animation.VectorKeyFrame" /> to be removed.</param>
    </member>
    <member name="P:System.Windows.Media.Animation.VectorKeyFrameCollection.SyncRoot">
      <summary> Gets an object that can be used to synchronize access to the collection. </summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="array"></param>
      <param name="index"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.System#Collections#IList#Add(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.System#Collections#IList#Contains(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code. </summary>
      <param name="keyFrame"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code. </summary>
      <param name="index"></param>
      <param name="keyFrame"></param>
    </member>
    <member name="P:System.Windows.Media.Animation.VectorKeyFrameCollection.System#Collections#IList#Item(System.Int32)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code.</summary>
      <param name="index"></param>
    </member>
    <member name="M:System.Windows.Media.Animation.VectorKeyFrameCollection.System#Collections#IList#Remove(System.Object)">
      <summary>This member supports the WPF infrastructure and is not intended to be used directly from your code. </summary>
      <param name="keyFrame"></param>
    </member>
    <member name="T:System.Windows.Media.Converters.BaseIListConverter">
      <summary>Defines methods used to convert <see cref="T:System.Collections.IList" /> collection members to and from instances of <see cref="T:System.String" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.BaseIListConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Converters.BaseIListConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.BaseIListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if a given type can be converted.</summary>
      <returns>true if this type can be converted; otherwise, false.</returns>
      <param name="td">Provides contextual information required for conversion.</param>
      <param name="t">Type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.BaseIListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines if a given type can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if this type can be converted; otherwise, false.</returns>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="destinationType">Type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.BaseIListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts a <see cref="T:System.String" /> to a supported instance of <see cref="T:System.Collections.IList" />.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the result of the conversion.</returns>
      <param name="td">Provides contextual information required for conversion.</param>
      <param name="ci">Cultural information to respect during conversion.</param>
      <param name="value">String used for conversion.</param>
      <exception cref="T:System.ArgumentException">Occurs if value is null and not a <see cref="T:System.String" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Converters.BaseIListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts a supported instance of <see cref="T:System.Collections.IList" /> to a <see cref="T:System.String" />.</summary>
      <returns>String representation of the <see cref="T:System.Collections.IList" /> collection.</returns>
      <param name="context">Provides contextual information required for conversion.</param>
      <param name="culture">Cultural information to respect during conversion.</param>
      <param name="value">Object being evaluated for conversion.</param>
      <param name="destinationType">Destination type being evaluated for conversion.</param>
    </member>
    <member name="T:System.Windows.Media.Converters.BoolIListConverter">
      <summary>Converts the members of an <see cref="T:System.Collections.IList" /> collection of Boolean values to and from instances of <see cref="T:System.String" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.BoolIListConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Converters.BoolIListConverter" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.Converters.BrushValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Media.Brush" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.BrushValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Converters.BrushValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.BrushValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if conversion from a given <see cref="T:System.String" /> to an instance of <see cref="T:System.Windows.Media.Brush" /> is possible.</summary>
      <returns>true if the value can be converted; otherwise, false. </returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.BrushValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if an instance of <see cref="T:System.Windows.Media.Brush" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Brush" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
      <exception cref="T:System.ArgumentException">Occurs when <paramref name="value" /> is not a <see cref="T:System.Windows.Media.Brush" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Converters.BrushValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Media.Brush" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Brush" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">
        <see cref="T:System.String" /> value to convert into a <see cref="T:System.Windows.Media.Brush" />.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.BrushValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Media.Brush" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.Windows.Media.Brush" /> object.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Brush" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="T:System.Windows.Media.Converters.CacheModeValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Media.CacheMode" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.CacheModeValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Converters.CacheModeValueSerializer" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Converters.CacheModeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified <see cref="T:System.String" /> can be converted to an instance of <see cref="T:System.Windows.Media.CacheMode" />.</summary>
      <returns>true if <paramref name="value" /> can be converted; otherwise, false. </returns>
      <param name="value">A <see cref="T:System.String" /> to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.CacheModeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines whether the specified instance of <see cref="T:System.Windows.Media.CacheMode" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">An instance of <see cref="T:System.Windows.Media.CacheMode" /> to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.CacheModeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Media.CacheMode" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.CacheMode" /> based on the specified <paramref name="value" />.</returns>
      <param name="value">A <see cref="T:System.String" /> value to convert into a <see cref="T:System.Windows.Media.CacheMode" />.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.CacheModeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Media.CacheMode" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the specified <see cref="T:System.Windows.Media.CacheMode" /> object.</returns>
      <param name="value">An instance of <see cref="T:System.Windows.Media.CacheMode" /> to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Windows.Media.Converters.CharIListConverter">
      <summary>Converts the members of an <see cref="T:System.Collections.IList" /> collection of Unicode characters to and from instances of <see cref="T:System.String" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.CharIListConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Converters.CharIListConverter" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.Converters.DoubleCollectionValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Media.DoubleCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.DoubleCollectionValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Converters.DoubleCollectionValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.DoubleCollectionValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if conversion from a given <see cref="T:System.String" /> to an instance of <see cref="T:System.Windows.Media.DoubleCollection" /> is possible.</summary>
      <returns>true if the value can be converted; otherwise, false.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.DoubleCollectionValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if an instance of <see cref="T:System.Windows.Media.DoubleCollection" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.DoubleCollection" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
      <exception cref="T:System.ArgumentException">Occurs when <paramref name="value" /> is not a <see cref="T:System.Windows.Media.DoubleCollection" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Converters.DoubleCollectionValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Media.DoubleCollection" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.DoubleCollection" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">
        <see cref="T:System.String" /> value to convert into a <see cref="T:System.Windows.Media.DoubleCollection" />.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.DoubleCollectionValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Media.DoubleCollection" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.Windows.Media.DoubleCollection" /> object.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.DoubleCollection" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="T:System.Windows.Media.Converters.DoubleIListConverter">
      <summary>Converts members of an <see cref="T:System.Collections.IList" /> collection containing <see cref="T:System.Double" /> numbers to and from instances of <see cref="T:System.String" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.DoubleIListConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Converters.DoubleIListConverter" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.Converters.GeometryValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Media.Geometry" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.GeometryValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Converters.GeometryValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.GeometryValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if conversion from a given <see cref="T:System.String" /> to an instance of <see cref="T:System.Windows.Media.Geometry" /> is possible.</summary>
      <returns>true if the value can be converted; otherwise, false.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.GeometryValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if an instance of <see cref="T:System.Windows.Media.Geometry" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Geometry" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
      <exception cref="T:System.ArgumentException">Occurs when <paramref name="value" /> is not a <see cref="T:System.Windows.Media.Geometry" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Converters.GeometryValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Media.Geometry" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Geometry" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">
        <see cref="T:System.String" /> value to convert into a <see cref="T:System.Windows.Media.Geometry" />.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.GeometryValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Media.Geometry" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.Windows.Media.Geometry" /> object.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Geometry" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="T:System.Windows.Media.Converters.Int32CollectionValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Media.Int32Collection" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.Int32CollectionValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Converters.Int32CollectionValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.Int32CollectionValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Media.Int32Collection" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.Windows.Media.Int32Collection" /> object.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Int32Collection" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.Int32CollectionValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Media.Int32Collection" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Int32Collection" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">
        <see cref="T:System.String" /> value to convert into a <see cref="T:System.Windows.Media.Int32Collection" />.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.Int32CollectionValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if an instance of <see cref="T:System.Windows.Media.Int32Collection" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Int32Collection" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
      <exception cref="T:System.ArgumentException">Occurs when <paramref name="value" /> is not a <see cref="T:System.Windows.Media.Int32Collection" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Converters.Int32CollectionValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if conversion from a given <see cref="T:System.String" /> to an instance of <see cref="T:System.Windows.Media.Int32Collection" /> is possible.</summary>
      <returns>true if the value can be converted; otherwise, false.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="T:System.Windows.Media.Converters.PathFigureCollectionValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Media.PathFigureCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.PathFigureCollectionValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Converters.PathFigureCollectionValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.PathFigureCollectionValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if conversion from a given <see cref="T:System.String" /> to an instance of <see cref="T:System.Windows.Media.PathFigureCollection" /> is possible.</summary>
      <returns>true if the value can be converted; otherwise, false.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.PathFigureCollectionValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if an instance of <see cref="T:System.Windows.Media.PathFigureCollection" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.PathFigureCollection" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
      <exception cref="T:System.ArgumentException">Occurs when <paramref name="value" /> is not a <see cref="T:System.Windows.Media.PathFigureCollection" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Converters.PathFigureCollectionValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Media.PathFigureCollection" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.PathFigureCollection" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">
        <see cref="T:System.String" /> value to convert into a <see cref="T:System.Windows.Media.PathFigureCollection" />.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.PathFigureCollectionValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Media.PathFigureCollection" /> to a <see cref="T:System.String" /></summary>
      <returns>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.Windows.Media.PathFigureCollection" /> object.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.PathFigureCollection" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="T:System.Windows.Media.Converters.PointCollectionValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Media.PointCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.PointCollectionValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Converters.PointCollectionValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.PointCollectionValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if conversion from a given <see cref="T:System.String" /> to an instance of <see cref="T:System.Windows.Media.PointCollection" /> is possible.</summary>
      <returns>true if the value can be converted; otherwise, false. </returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.PointCollectionValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if an instance of <see cref="T:System.Windows.Media.PointCollection" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.PointCollection" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
      <exception cref="T:System.ArgumentException">Occurs when <paramref name="value" /> is not a <see cref="T:System.Windows.Media.PointCollection" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Converters.PointCollectionValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Media.PointCollection" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.PointCollection" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">
        <see cref="T:System.String" /> value to convert into a <see cref="T:System.Windows.Media.PointCollection" />.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.PointCollectionValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Media.PointCollection" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.Windows.Media.PointCollection" /> object.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.PointCollection" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="T:System.Windows.Media.Converters.PointIListConverter">
      <summary>Converts an <see cref="T:System.Collections.IList" /> collection of <see cref="T:System.Windows.Point" /> values to and from instances of <see cref="T:System.String" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.PointIListConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Converters.PointIListConverter" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.Converters.TransformValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Media.Transform" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.TransformValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Converters.TransformValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.TransformValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if conversion from a given <see cref="T:System.String" /> to an instance of <see cref="T:System.Windows.Media.Transform" /> is possible.</summary>
      <returns>true if the value can be converted; otherwise, false. </returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.TransformValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if an instance of <see cref="T:System.Windows.Media.Transform" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Transform" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
      <exception cref="T:System.ArgumentException">Occurs when <paramref name="value" /> is not a <see cref="T:System.Windows.Media.Transform" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Converters.TransformValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Media.Transform" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Transform" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">
        <see cref="T:System.String" /> value to convert into a <see cref="T:System.Windows.Media.Transform" />.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.TransformValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Media.Transform" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.Windows.Media.Transform" /> object.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Transform" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="T:System.Windows.Media.Converters.UShortIListConverter">
      <summary>Converts an <see cref="T:System.Collections.IList" /> collection of UShort number values to and from instances of <see cref="T:System.String" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.UShortIListConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Converters.UShortIListConverter" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.Converters.VectorCollectionValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Media.VectorCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.VectorCollectionValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Converters.VectorCollectionValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.VectorCollectionValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if conversion from a given <see cref="T:System.String" /> to an instance of <see cref="T:System.Windows.Media.VectorCollection" /> is possible.</summary>
      <returns>true if the value can be converted; otherwise, false. </returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.VectorCollectionValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if an instance of <see cref="T:System.Windows.Media.VectorCollection" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.VectorCollection" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
      <exception cref="T:System.ArgumentException">Occurs when <paramref name="value" /> is not a <see cref="T:System.Windows.Media.VectorCollection" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Converters.VectorCollectionValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Media.VectorCollection" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.VectorCollection" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">
        <see cref="T:System.String" /> value to convert into a <see cref="T:System.Windows.Media.VectorCollection" />.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Converters.VectorCollectionValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Media.VectorCollection" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.Windows.Media.VectorCollection" /> object.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.VectorCollection" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="T:System.Windows.Media.Effects.BevelBitmapEffect">
      <summary>Creates a bevel which raises the surface of the image according to a specified curve. </summary>
    </member>
    <member name="M:System.Windows.Media.Effects.BevelBitmapEffect.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.BevelBitmapEffect" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Effects.BevelBitmapEffect.BevelWidth">
      <summary>Gets or sets the width of the bevel. </summary>
      <returns>The width of the bevel. The default value is 5.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.BevelBitmapEffect.BevelWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.BevelBitmapEffect.BevelWidth" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.BevelBitmapEffect.BevelWidth" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.BevelBitmapEffect.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.BevelBitmapEffect" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.BevelBitmapEffect.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.BevelBitmapEffect" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.BevelBitmapEffect.EdgeProfile">
      <summary>Gets or sets the curve of the bevel. </summary>
      <returns>The curve of the bevel. The default value is <see cref="F:System.Windows.Media.Effects.EdgeProfile.Linear" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.BevelBitmapEffect.EdgeProfileProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.BevelBitmapEffect.EdgeProfile" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.BevelBitmapEffect.EdgeProfile" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.BevelBitmapEffect.LightAngle">
      <summary>Gets or sets the direction the "virtual light" is coming from that creates the shadows of the bevel. </summary>
      <returns>The direction of the virtual light source. The valid range is from 0-360 (degrees) with 0 specifying the right-hand side of the object and successive values moving counter-clockwise around the object. The shadows of the bevel are on the opposite side of where the light is cast. The default value is 135.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.BevelBitmapEffect.LightAngleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.BevelBitmapEffect.LightAngle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.BevelBitmapEffect.LightAngle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.BevelBitmapEffect.Relief">
      <summary>Gets or sets the height of the relief of the bevel.  </summary>
      <returns>The height of the relief of the bevel. The valid range is between 0 and 1 with 1 having the most relief (darkest shadows). The default value is 0.3.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.BevelBitmapEffect.ReliefProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.BevelBitmapEffect.Relief" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.BevelBitmapEffect.Relief" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.BevelBitmapEffect.Smoothness">
      <summary>Gets or sets how smooth the shadows of the bevel are.  </summary>
      <returns>Value indicating how smooth the bevel shadows are. The valid range is between 0 and 1 with 1 being the smoothest. The default value is 0.2.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.BevelBitmapEffect.SmoothnessProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.BevelBitmapEffect.Smoothness" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.BevelBitmapEffect.Smoothness" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Effects.BitmapEffect">
      <summary>Defines a bitmap effect. Derived classes define effects that can be applied to a <see cref="T:System.Windows.Media.Visual" /> object, such as a <see cref="T:System.Windows.Controls.Button" /> or an <see cref="T:System.Windows.Controls.Image" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffect.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.BitmapEffect" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffect.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.BitmapEffect" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffect.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.BitmapEffect" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffect.CreateBitmapEffectOuter">
      <summary>Creates a handle to an IMILBitmapEffect object that is used to initialize a custom effect.</summary>
      <returns>A handle to an IMILBitmapEffect object.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffect.CreateUnmanagedEffect">
      <summary>When overridden in a derived class, creates a clone of the unmanaged effect.</summary>
      <returns>A handle to the unmanaged effect clone.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffect.GetOutput(System.Windows.Media.Effects.BitmapEffectInput)">
      <summary>Returns the <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that results when the effect is applied to the specified <see cref="T:System.Windows.Media.Effects.BitmapEffectInput" />.</summary>
      <returns>The <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> with the effect applied to the input.</returns>
      <param name="input">The input to apply the effect to.</param>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffect.InitializeBitmapEffect(System.Runtime.InteropServices.SafeHandle,System.Runtime.InteropServices.SafeHandle)">
      <summary>Initializes an IMILBitmapEffect handle obtained from <see cref="M:System.Windows.Media.Effects.BitmapEffect.CreateBitmapEffectOuter" /> with the given IMILBitmapEffectPrimitive.</summary>
      <param name="outerObject">The outer IMILBitmapEffect wrapper to initialize. </param>
      <param name="innerObject">The inner IMILBitmapEffectPrimitive.</param>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffect.SetValue(System.Runtime.InteropServices.SafeHandle,System.String,System.Object)">
      <summary>Sets the specified property to the given value.</summary>
      <param name="effect">The handle to the effect that contains the property to change.</param>
      <param name="propertyName">The name of the property to change.</param>
      <param name="value">The value to use to set the property.</param>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffect.UpdateUnmanagedPropertyState(System.Runtime.InteropServices.SafeHandle)">
      <summary>When overridden in a derived class, updates the property states of the unmanaged properties of the effect.</summary>
      <param name="unmanagedEffect">The handle to the effect that contains the properties to update.</param>
    </member>
    <member name="T:System.Windows.Media.Effects.BitmapEffectCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Media.Effects.BitmapEffect" /> objects. This collection is used as part of a <see cref="T:System.Windows.Media.Effects.BitmapEffectGroup" /> to apply multiple bitmap effects to visual content.</summary>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.Effects.BitmapEffect})">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection" /> class using the given collection.</summary>
      <param name="collection">The collection used for initialization.</param>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.#ctor(System.Int32)">
      <summary>Initializes a new instance the <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection" /> class with a specified capacity, or the number of <see cref="T:System.Windows.Media.Effects.BitmapEffect" /> objects the collection is initially capable of storing.</summary>
      <param name="capacity">The initial capacity of the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.Add(System.Windows.Media.Effects.BitmapEffect)">
      <summary>Adds a <see cref="T:System.Windows.Media.Effects.BitmapEffect" /> at the end of the collection.</summary>
      <param name="value">The <see cref="T:System.Windows.Media.Effects.BitmapEffect" /> to add to the end of the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.Clear">
      <summary>Removes all effects from the collection.</summary>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.Contains(System.Windows.Media.Effects.BitmapEffect)">
      <summary>Indicates whether the collection contains the specified <see cref="T:System.Windows.Media.Effects.BitmapEffect" />.</summary>
      <returns>true if the collection contains value; otherwise, false.</returns>
      <param name="value">The bitmap effect to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.CopyTo(System.Windows.Media.Effects.BitmapEffect[],System.Int32)">
      <summary>Copies the elements of the collection to an array starting at the given index.</summary>
      <param name="array">The array to copy to.</param>
      <param name="index">The collection index to begin coping.</param>
    </member>
    <member name="P:System.Windows.Media.Effects.BitmapEffectCollection.Count">
      <summary>Gets the number of effects contained in the <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection" />.</summary>
      <returns>The number of effects contained in the <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the collection.</summary>
      <returns>An <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection.Enumerator" /> that can iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.IndexOf(System.Windows.Media.Effects.BitmapEffect)">
      <summary>Retrieves the index of the first instance of the specified <see cref="T:System.Windows.Media.Effects.BitmapEffect" />.</summary>
      <returns>The index of the specified effect.</returns>
      <param name="value">The effect to find in the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.Insert(System.Int32,System.Windows.Media.Effects.BitmapEffect)">
      <summary>Inserts a <see cref="T:System.Windows.Media.Effects.BitmapEffect" /> into this collection at the specified index.</summary>
      <param name="index">The index to insert the effect at.</param>
      <param name="value">The specified effect to insert.</param>
    </member>
    <member name="P:System.Windows.Media.Effects.BitmapEffectCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Effects.BitmapEffect" /> at the specified index.</summary>
      <returns>The <see cref="T:System.Windows.Media.Effects.BitmapEffect" /> at the specified index.</returns>
      <param name="index">The zero-based index of the <see cref="T:System.Windows.Media.Effects.BitmapEffect" /> to get or set.</param>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.Remove(System.Windows.Media.Effects.BitmapEffect)">
      <summary>Removes the first occurrence of the specified <see cref="T:System.Windows.Media.Effects.BitmapEffect" /> for this collection.</summary>
      <returns>true if <paramref name="value" /> was removed; otherwise, false. </returns>
      <param name="value">The effect to remove from the collection</param>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.RemoveAt(System.Int32)">
      <summary>Remove the <see cref="T:System.Windows.Media.Effects.BitmapEffect" /> at the specified index from the collection.</summary>
      <param name="index">The index of the effect to remove.</param>
    </member>
    <member name="P:System.Windows.Media.Effects.BitmapEffectCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.</summary>
      <returns>true if the the <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">A zero-based <see cref="T:System.Array" /> that receives the copied items from the <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection" />.</param>
      <param name="index">The first position in the specified <see cref="T:System.Array" /> to receive the copied contents.</param>
    </member>
    <member name="P:System.Windows.Media.Effects.BitmapEffectCollection.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>true if access to the <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.BitmapEffectCollection.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.System#Collections#IList#Add(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.System#Collections#IList#Contains(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
      <param name="index">The zero-based index at which to insert the <see cref="T:System.Object" />.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection" />.</param>
    </member>
    <member name="P:System.Windows.Media.Effects.BitmapEffectCollection.System#Collections#IList#IsFixedSize">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
      <returns>true if the the <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.BitmapEffectCollection.System#Collections#IList#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsReadOnly" />.</summary>
      <returns>true if the the <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.BitmapEffectCollection.System#Collections#IList#Item(System.Int32)">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.System#Collections#IList#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection" />.</param>
    </member>
    <member name="T:System.Windows.Media.Effects.BitmapEffectCollection.Enumerator">
      <summary>Enumerates <see cref="T:System.Windows.Media.Effects.BitmapEffect" /> objects in a <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection" />.</summary>
    </member>
    <member name="P:System.Windows.Media.Effects.BitmapEffectCollection.Enumerator.Current">
      <summary>Gets the current element in the collection.</summary>
      <returns>The current element in the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.Enumerator.MoveNext">
      <summary>Advanced the enumerator to the next element in the collection.</summary>
      <returns>true if the enumerator successfully advanced to the next element; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.Enumerator.Reset">
      <summary>Resets the enumerator to its initial position, which is before the first element in the collection.</summary>
    </member>
    <member name="P:System.Windows.Media.Effects.BitmapEffectCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>This type or member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectCollection.Enumerator.System#IDisposable#Dispose">
      <summary>This type or member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Windows.Media.Effects.BitmapEffectGroup">
      <summary>Represents a group of <see cref="T:System.Windows.Media.Effects.BitmapEffect" /> objects that is used to apply multiple effects to a visible object.</summary>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.BitmapEffectGroup" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Effects.BitmapEffectGroup.Children">
      <summary>Gets or sets the children of the <see cref="T:System.Windows.Media.Effects.BitmapEffectGroup" />.  </summary>
      <returns>The children of the effects group as a <see cref="T:System.Windows.Media.Effects.BitmapEffectCollection" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.BitmapEffectGroup.ChildrenProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.BitmapEffectGroup.Children" /> dependency property.</summary>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectGroup.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.BitmapEffectGroup" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectGroup.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.BitmapEffectGroup" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="T:System.Windows.Media.Effects.BitmapEffectInput">
      <summary>Applies the <see cref="T:System.Windows.Media.Effects.BitmapEffect" /> given in the <see cref="P:System.Windows.UIElement.BitmapEffect" /> property to a specified region of the visual object.</summary>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectInput.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.BitmapEffectInput" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectInput.#ctor(System.Windows.Media.Imaging.BitmapSource)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.BitmapEffectInput" /> class using the <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> as the source for this input.</summary>
      <param name="input">The bitmap source to be used by this input object.</param>
    </member>
    <member name="P:System.Windows.Media.Effects.BitmapEffectInput.AreaToApplyEffect">
      <summary>Gets or sets a rectangular region on the visual to which the <see cref="T:System.Windows.Media.Effects.BitmapEffect" /> is applied.  </summary>
      <returns>The rectangular region of the visual to which the effect is applied. The default value is <see cref="P:System.Windows.Rect.Empty" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.BitmapEffectInput.AreaToApplyEffectProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.BitmapEffectInput.AreaToApplyEffect" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.BitmapEffectInput.AreaToApplyEffect" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.BitmapEffectInput.AreaToApplyEffectUnits">
      <summary>Gets or sets the method in which to interpret the rectangle provided by <see cref="P:System.Windows.Media.Effects.BitmapEffectInput.AreaToApplyEffect" />.  </summary>
      <returns>The method in which to interpret the rectangle provided by the <see cref="P:System.Windows.Media.Effects.BitmapEffectInput.AreaToApplyEffectUnits" /> property. The default value is <see cref="F:System.Windows.Media.BrushMappingMode.RelativeToBoundingBox" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.BitmapEffectInput.AreaToApplyEffectUnitsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.BitmapEffectInput.AreaToApplyEffectUnits" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.BitmapEffectInput.AreaToApplyEffectUnits" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectInput.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.BitmapEffectInput" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectInput.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.BitmapEffectInput" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.BitmapEffectInput.ContextInputSource">
      <summary>Gets a value representing the <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that is derived from the context.</summary>
      <returns>The <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that is derived from the context.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.BitmapEffectInput.Input">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that is used for the input for the object.  </summary>
      <returns>The <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that is used as the input for the object. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.BitmapEffectInput.InputProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.BitmapEffectInput.Input" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.BitmapEffectInput.Input" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.BitmapEffectInput.ShouldSerializeInput">
      <summary>Determines if <see cref="P:System.Windows.Media.Effects.BitmapEffectInput.Input" /> should be serialized.</summary>
      <returns>true if <see cref="P:System.Windows.Media.Effects.BitmapEffectInput.Input" /> should be serialized; otherwise false.</returns>
    </member>
    <member name="T:System.Windows.Media.Effects.BlurBitmapEffect">
      <summary>Simulates looking at an object through an out-of-focus lens.</summary>
    </member>
    <member name="M:System.Windows.Media.Effects.BlurBitmapEffect.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.BlurBitmapEffect" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Effects.BlurBitmapEffect.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.BlurBitmapEffect" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.BlurBitmapEffect.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.BlurBitmapEffect" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.BlurBitmapEffect.KernelType">
      <summary>Gets or sets the type of blur kernel to use for the <see cref="T:System.Windows.Media.Effects.BlurBitmapEffect" />.  </summary>
      <returns>The type of blur kernel. The default value is <see cref="F:System.Windows.Media.Effects.KernelType.Gaussian" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.BlurBitmapEffect.KernelTypeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.BlurBitmapEffect.KernelType" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.BlurBitmapEffect.KernelType" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.BlurBitmapEffect.Radius">
      <summary>Gets or sets the radius used in the blur kernel. A larger radius implies more blurring.  </summary>
      <returns>The radius used in the blur kernel, in DIU (1/96 of an inch). The default value is 5.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.BlurBitmapEffect.RadiusProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.BlurBitmapEffect.Radius" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.BlurBitmapEffect.KernelType" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Effects.BlurEffect">
      <summary>A bitmap effect that blurs the target texture. </summary>
    </member>
    <member name="M:System.Windows.Media.Effects.BlurEffect.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.BlurEffect" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Effects.BlurEffect.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.Effect" /> object, making deep copies of this object's values. When copying this object's dependency properties, this method copies resource references and data bindings (which may no longer resolve), but not animations or their current values.  </summary>
      <returns>A modifiable clone of this instance. The returned clone is effectively a deep copy of the current object. The clone's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.BlurEffect.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.Effect" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are copied.  </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.BlurEffect.KernelType">
      <summary>Gets or sets a value representing the curve that is used to calculate the blur.</summary>
      <returns>A <see cref="T:System.Windows.Media.Effects.KernelType" /> representing the curve that is used to calculate the blur. The default is <see cref="F:System.Windows.Media.Effects.KernelType.Gaussian" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.BlurEffect.KernelTypeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.BlurEffect.KernelType" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.BlurEffect.KernelType" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.BlurEffect.Radius">
      <summary>Gets or sets a value that indicates the radius of the blur effect's curve. </summary>
      <returns>The radius of the blur effect's curve. The default is 5.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.BlurEffect.RadiusProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.BlurEffect.Radius" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.BlurEffect.Radius" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.BlurEffect.RenderingBias">
      <summary>Gets or sets a value that indicates whether the system renders an effect with emphasis on speed or quality. </summary>
      <returns>A <see cref="T:System.Windows.Media.Effects.RenderingBias" /> value that indicates whether the system renders an effect with emphasis on speed or quality. The default is <see cref="F:System.Windows.Media.Effects.RenderingBias.Performance" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.BlurEffect.RenderingBiasProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.BlurEffect.RenderingBias" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.BlurEffect.RenderingBias" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Effects.DropShadowBitmapEffect">
      <summary>Applies a shadow behind a visual object at a slight offset. The offset is determined by mimicking a casting shadow from an imaginary light source.</summary>
    </member>
    <member name="M:System.Windows.Media.Effects.DropShadowBitmapEffect.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.DropShadowBitmapEffect" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Effects.DropShadowBitmapEffect.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.DropShadowBitmapEffect" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.DropShadowBitmapEffect.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.DropShadowBitmapEffect" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Color">
      <summary>Gets or sets the color of the shadow.  </summary>
      <returns>The color of the shadow. The default value is FF000000 (black). </returns>
    </member>
    <member name="F:System.Windows.Media.Effects.DropShadowBitmapEffect.ColorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Color" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Color" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Direction">
      <summary>Gets or sets the angle at which the shadow is cast. </summary>
      <returns>The angle at which the shadow is cast. The valid range of values is from 0 through 360. The value 0 puts the direction immediately to the right of the object. Subsequent values move the direction around the object in a counter-clockwise direction. For example, a value of 90 indicates the shadow is cast directly upward from the object; a value of 180 is cast directly to the left of the object, and so on. The default value is 315.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.DropShadowBitmapEffect.DirectionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Direction" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Direction" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Noise">
      <summary>Gets or sets the graininess, or "noise level," of the shadow. </summary>
      <returns>The noise level of the shadow. The valid range of values is from 0 through 1. A value of 0 indicates no noise and 1 indicates maximum noise. A value of 0.5 indicates 50 percent noise, a value of 0.75 indicates 75 percent noise, and so on. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.DropShadowBitmapEffect.NoiseProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Noise" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Noise" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Opacity">
      <summary>Gets or sets the degree of opacity of the shadow. </summary>
      <returns>The degree of opacity. The valid range of values is from 0 through 1. A value of 0 indicates that the shadow is completely transparent, and a value of 1 indicates that the shadow is completely opaque. A value of 0.5 indicates the shadow is 50 percent opaque, a value of 0.725 indicates the shadow is 72.5 percent opaque, and so on. Values less than 0 are treated as 0, while values greater than 1 are treated as 1. The default is 1.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.DropShadowBitmapEffect.OpacityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Opacity" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Opacity" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.DropShadowBitmapEffect.ShadowDepth">
      <summary>Gets or sets the distance between the object and the shadow that it casts. </summary>
      <returns>The distance between the plane of the object casting the shadow and the shadow plane measured in device-independent units (1/96th inch per unit). The valid range of values is from 0 through 300. The default is 5.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.DropShadowBitmapEffect.ShadowDepthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.ShadowDepth" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.ShadowDepth" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Softness">
      <summary>Gets or sets the softness of the shadow. </summary>
      <returns>The shadow's softness. The valid range of values is from 0 through 1. A value of 0.0 indicates no softness (a sharply defined shadow) and 1.0 indicates maximum softness (a very diffused shadow). A value of 0.5 indicates 50 percent softness, a value of 0.75 indicates 75 percent softness, and so on. The default is 0.5. </returns>
    </member>
    <member name="F:System.Windows.Media.Effects.DropShadowBitmapEffect.SoftnessProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Softness" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.DropShadowBitmapEffect.Softness" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Effects.DropShadowEffect">
      <summary>A bitmap effect that paints a drop shadow around the target texture. </summary>
    </member>
    <member name="M:System.Windows.Media.Effects.DropShadowEffect.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.DropShadowEffect" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.Effects.DropShadowEffect.BlurRadius">
      <summary>Gets or sets a value that indicates the radius of the shadow's blur effect. </summary>
      <returns>A value that indicates the radius of the shadow's blur effect. The default is 5.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.DropShadowEffect.BlurRadiusProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.DropShadowEffect.BlurRadius" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.DropShadowEffect.BlurRadius" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.DropShadowEffect.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.Effect" /> object, making deep copies of this object's values. When copying this object's dependency properties, this method copies resource references and data bindings (which may no longer resolve), but not animations or their current values.</summary>
      <returns>A modifiable clone of this instance. The returned clone is effectively a deep copy of the current object. The clone's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.DropShadowEffect.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.Effect" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are copied.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.DropShadowEffect.Color">
      <summary>Gets or sets the color of the drop shadow. </summary>
      <returns>The color of the drop shadow. The default is <see cref="P:System.Windows.Media.Colors.Black" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.DropShadowEffect.ColorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.DropShadowEffect.Color" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.DropShadowEffect.Color" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.DropShadowEffect.Direction">
      <summary>Gets or sets the direction of the drop shadow. </summary>
      <returns>The direction of the drop shadow, in degrees. The default is 315.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.DropShadowEffect.DirectionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.DropShadowEffect.Direction" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.DropShadowEffect.Direction" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.DropShadowEffect.Opacity">
      <summary>Gets or sets the opacity of the drop shadow. </summary>
      <returns>The opacity of the drop shadow. The default is 1.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.DropShadowEffect.OpacityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.DropShadowEffect.Opacity" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.DropShadowEffect.Opacity" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.DropShadowEffect.RenderingBias">
      <summary>Gets or sets a value that indicates whether the system renders the drop shadow with emphasis on speed or quality. </summary>
      <returns>A <see cref="T:System.Windows.Media.Effects.RenderingBias" /> value that indicates whether the system renders the drop shadow with emphasis on speed or quality. The default is <see cref="F:System.Windows.Media.Effects.RenderingBias.Performance" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.DropShadowEffect.RenderingBiasProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.DropShadowEffect.RenderingBias" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.DropShadowEffect.RenderingBias" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.DropShadowEffect.ShadowDepth">
      <summary>Gets or sets the distance of the drop shadow below the texture. </summary>
      <returns>The distance of the drop shadow below the texture. The default is 5.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.DropShadowEffect.ShadowDepthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.DropShadowEffect.ShadowDepth" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.DropShadowEffect.ShadowDepth" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Effects.EdgeProfile">
      <summary>Specifies the type of curve to apply to the edge of a bitmap.</summary>
    </member>
    <member name="F:System.Windows.Media.Effects.EdgeProfile.Linear">
      <summary>An edge that is a straight line. </summary>
    </member>
    <member name="F:System.Windows.Media.Effects.EdgeProfile.CurvedIn">
      <summary>A concave edge that curves in.</summary>
    </member>
    <member name="F:System.Windows.Media.Effects.EdgeProfile.CurvedOut">
      <summary>A convex edge that curves out.</summary>
    </member>
    <member name="F:System.Windows.Media.Effects.EdgeProfile.BulgedUp">
      <summary>An edge that curves up and then down, like a ridge. </summary>
    </member>
    <member name="T:System.Windows.Media.Effects.Effect">
      <summary>Provides a custom bitmap effect. </summary>
    </member>
    <member name="M:System.Windows.Media.Effects.Effect.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.Effect" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Effects.Effect.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.Effect" /> object, making deep copies of this object's values. When copying this object's dependency properties, this method copies resource references and data bindings (which may no longer resolve), but not animations or their current values.  </summary>
      <returns>A modifiable clone of this instance. The returned clone is effectively a deep copy of the current object. The clone's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.Effect.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.Effect" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are copied.  </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.Effect.EffectMapping">
      <summary>When overridden in a derived class, transforms mouse input and coordinate systems through the effect. </summary>
      <returns>The transform to apply. The default is the identity transform.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.Effect.ImplicitInput">
      <summary>Gets a <see cref="T:System.Windows.Media.Brush" /> that, when it is used as an input for an <see cref="T:System.Windows.Media.Effects.Effect" />, causes the bitmap of the <see cref="T:System.Windows.UIElement" /> that the <see cref="T:System.Windows.Media.Effects.Effect" /> is applied to be that input. </summary>
      <returns>The <see cref="T:System.Windows.Media.Brush" /> that acts as the input.</returns>
    </member>
    <member name="T:System.Windows.Media.Effects.EmbossBitmapEffect">
      <summary>Creates a bump mapping of the visual object to give the impression of depth and texture from an artificial light source. </summary>
    </member>
    <member name="M:System.Windows.Media.Effects.EmbossBitmapEffect.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.EmbossBitmapEffect" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Effects.EmbossBitmapEffect.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.EmbossBitmapEffect" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.EmbossBitmapEffect.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.EmbossBitmapEffect" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.EmbossBitmapEffect.LightAngle">
      <summary>Gets or sets the direction the artificial light is cast upon the embossed object.  </summary>
      <returns>The direction the artificial light is cast upon the embossed object. The valid range is from 0-360 (degrees) with 0 specifying the right-hand side of the object and successive values moving counter-clockwise around the object. The default value is 45.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.EmbossBitmapEffect.LightAngleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.EmbossBitmapEffect.LightAngle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.EmbossBitmapEffect.LightAngle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.EmbossBitmapEffect.Relief">
      <summary>Gets or sets the amount of relief of the emboss.  </summary>
      <returns>The amount of relief of the emboss. The valid range of values is 0-1 with 0 having the least relief and 1 having the most. The default value is 0.44.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.EmbossBitmapEffect.ReliefProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.EmbossBitmapEffect.Relief" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.EmbossBitmapEffect.Relief" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Effects.KernelType">
      <summary>Describes the kernel used to create the effect.</summary>
    </member>
    <member name="F:System.Windows.Media.Effects.KernelType.Gaussian">
      <summary>A distributed curve that creates a smooth distribution for a blur. </summary>
    </member>
    <member name="F:System.Windows.Media.Effects.KernelType.Box">
      <summary>A simple blur created with a square distribution curve. </summary>
    </member>
    <member name="T:System.Windows.Media.Effects.OuterGlowBitmapEffect">
      <summary>Creates a halo of color around objects or areas of color.</summary>
    </member>
    <member name="M:System.Windows.Media.Effects.OuterGlowBitmapEffect.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.OuterGlowBitmapEffect" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Effects.OuterGlowBitmapEffect.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.OuterGlowBitmapEffect" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.OuterGlowBitmapEffect.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.OuterGlowBitmapEffect" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowColor">
      <summary>Gets or sets the color of the halo glow.  </summary>
      <returns>The color of the halo glow. The default is white. </returns>
    </member>
    <member name="F:System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowColorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowColor" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowColor" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowSize">
      <summary>Gets or sets the thickness of the halo glow.  </summary>
      <returns>The thickness of the halo glow, in device-independent unit (1/96th inch). The valid range of values is from 1 through 199. The default is 20.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowSize" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.GlowSize" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.Noise">
      <summary>Gets or sets the graininess of the halo glow.  </summary>
      <returns>The graininess (noise level) of the halo glow. The valid range of values is from 0.0 through 1.0, with 0.0 specifying no noise and 1.0 specifying maximum noise. A value of 0.5 indicates 50 percent noise, a value of 0.75 indicates 75 percent noise, and so on. The default value is 0.0.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.OuterGlowBitmapEffect.NoiseProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.Noise" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.Noise" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.Opacity">
      <summary>Gets or sets the degree of opacity of the halo glow.  </summary>
      <returns>The opacity level of the glow. A value of 0 indicates that the halo glow is completely transparent, while a value of 1 indicates that the glow is completely opaque. A value of 0.5 indicates the glow is 50 percent opaque, a value of 0.725 indicates the glow is 72.5 percent opaque, and so on. Values less than 0 are treated as 0, while values greater than 1 are treated as 1. The default is 1.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.OuterGlowBitmapEffect.OpacityProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.Opacity" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.OuterGlowBitmapEffect.Opacity" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Effects.PixelShader">
      <summary>Provides a managed wrapper around a High Level Shading Language (HLSL) pixel shader.</summary>
    </member>
    <member name="M:System.Windows.Media.Effects.PixelShader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.PixelShader" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Effects.PixelShader.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.PixelShader" /> object, making deep copies of this object's values. When copying this object's dependency properties, this method copies resource references and data bindings (which may no longer resolve), but not animations or their current values. </summary>
      <returns>A modifiable clone of this instance. The returned clone is effectively a deep copy of the current object. The clone's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.PixelShader.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.PixelShader" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are copied. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="E:System.Windows.Media.Effects.PixelShader.InvalidPixelShaderEncountered">
      <summary>Occurs when the render thread cannot process the pixel shader.  </summary>
    </member>
    <member name="M:System.Windows.Media.Effects.PixelShader.SetStreamSource(System.IO.Stream)">
      <summary>Assigns the <see cref="T:System.IO.Stream" /> to use as the source of HLSL bytecode.</summary>
      <param name="source">The stream to read the HLSL bytecode from.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Media.Effects.PixelShader.ShaderRenderMode">
      <summary>Gets or sets a value indicating whether to use hardware or software rendering. </summary>
      <returns>A <see cref="T:System.Windows.Media.Effects.ShaderRenderMode" /> value that indicates whether to force the use of hardware or software rendering for the effect.</returns>
    </member>
    <member name="F:System.Windows.Media.Effects.PixelShader.ShaderRenderModeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.PixelShader.ShaderRenderMode" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.PixelShader.ShaderRenderMode" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Effects.PixelShader.UriSource">
      <summary>Gets or sets a Pack URI reference to HLSL bytecode in the assembly. </summary>
      <returns>The Pack URI reference to HLSL bytecode in the assembly. </returns>
    </member>
    <member name="F:System.Windows.Media.Effects.PixelShader.UriSourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.PixelShader.UriSource" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.PixelShader.UriSource" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Effects.RenderingBias">
      <summary>Indicates whether the system renders an effect with emphasis on speed or quality. </summary>
    </member>
    <member name="F:System.Windows.Media.Effects.RenderingBias.Performance">
      <summary>The rendering system emphasizes performance.</summary>
    </member>
    <member name="F:System.Windows.Media.Effects.RenderingBias.Quality">
      <summary>The rendering system emphasizes quality.</summary>
    </member>
    <member name="T:System.Windows.Media.Effects.SamplingMode">
      <summary>Indicates the way <see cref="T:System.Windows.Media.Brush" />-valued dependency properties are sampled in a custom shader effect. </summary>
    </member>
    <member name="F:System.Windows.Media.Effects.SamplingMode.NearestNeighbor">
      <summary>Use nearest neighbor sampling.</summary>
    </member>
    <member name="F:System.Windows.Media.Effects.SamplingMode.Bilinear">
      <summary>Use bilinear sampling.</summary>
    </member>
    <member name="F:System.Windows.Media.Effects.SamplingMode.Auto">
      <summary>The system selects the most appropriate sampling mode. </summary>
    </member>
    <member name="T:System.Windows.Media.Effects.ShaderEffect">
      <summary>Provides a custom bitmap effect by using a <see cref="T:System.Windows.Media.Effects.PixelShader" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Effects.ShaderEffect.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Effects.ShaderEffect" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Effects.ShaderEffect.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.ShaderEffect" /> object, making deep copies of this object's values. When copying this object's dependency properties, this method copies resource references and data bindings (which may no longer resolve), but not animations or their current values.  </summary>
      <returns>A modifiable clone of this instance. The returned clone is effectively a deep copy of the current object. The clone's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.ShaderEffect.CloneCore(System.Windows.Freezable)">
      <param name="sourceFreezable">The object to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Effects.ShaderEffect.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Effects.ShaderEffect" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are copied. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Effects.ShaderEffect.CloneCurrentValueCore(System.Windows.Freezable)">
      <param name="sourceFreezable">The <see cref="T:System.Windows.Freezable" /> to be cloned.</param>
    </member>
    <member name="M:System.Windows.Media.Effects.ShaderEffect.CreateInstanceCore"></member>
    <member name="P:System.Windows.Media.Effects.ShaderEffect.DdxUvDdyUvRegisterIndex">
      <summary>Gets or sets a value that indicates the shader register to use for the partial derivatives of the texture coordinates with respect to screen space. </summary>
      <returns>The index of the register that contains the partial derivatives.</returns>
      <exception cref="T:System.InvalidOperationException">An attempt was made to set the <see cref="P:System.Windows.Media.Effects.ShaderEffect.DdxUvDdyUvRegisterIndex" /> property more than one time or after initial processing of the effect. </exception>
    </member>
    <member name="M:System.Windows.Media.Effects.ShaderEffect.GetAsFrozenCore(System.Windows.Freezable)">
      <param name="sourceFreezable">The instance to copy.</param>
    </member>
    <member name="M:System.Windows.Media.Effects.ShaderEffect.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <param name="sourceFreezable">The <see cref="T:System.Windows.Freezable" /> to copy and freeze.</param>
    </member>
    <member name="P:System.Windows.Media.Effects.ShaderEffect.PaddingBottom">
      <summary>Gets or sets a value indicating that the effect's output texture is larger than its input texture along the bottom edge. </summary>
      <returns>The padding along the bottom edge of the effect. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The provided value is less than 0.</exception>
    </member>
    <member name="P:System.Windows.Media.Effects.ShaderEffect.PaddingLeft">
      <summary>Gets or sets a value indicating that the effect's output texture is larger than its input texture along the left edge. </summary>
      <returns>The padding along the left edge of the effect. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The provided value is less than 0.</exception>
    </member>
    <member name="P:System.Windows.Media.Effects.ShaderEffect.PaddingRight">
      <summary>Gets or sets a value indicating that the effect's output texture is larger than its input texture along the right edge.</summary>
      <returns>The padding along the right edge of the effect.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The provided value is less than 0.</exception>
    </member>
    <member name="P:System.Windows.Media.Effects.ShaderEffect.PaddingTop">
      <summary>Gets or sets a value indicating that the effect's output texture is larger than its input texture along the top edge.</summary>
      <returns>The padding along the top edge of the effect.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The provided value is less than 0.</exception>
    </member>
    <member name="P:System.Windows.Media.Effects.ShaderEffect.PixelShader">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Effects.PixelShader" /> to use for the effect. </summary>
      <returns>The <see cref="T:System.Windows.Media.Effects.PixelShader" /> for the effect. </returns>
    </member>
    <member name="M:System.Windows.Media.Effects.ShaderEffect.PixelShaderConstantCallback(System.Int32)">
      <summary>Associates a dependency property value with a pixel shader's float constant register. </summary>
      <returns>A <see cref="T:System.Windows.PropertyChangedCallback" /> delegate that associates a dependency property and the shader constant register specified by <paramref name="floatRegisterIndex" />.</returns>
      <param name="floatRegisterIndex">The index of the shader register associated with the dependency property. </param>
      <exception cref="T:System.InvalidOperationException">The dependency property is an unknown type. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="floatRegisterIndex" /> is greater than or equal to 32, or <paramref name="floatRegisterIndex" /> is less than 0. </exception>
    </member>
    <member name="F:System.Windows.Media.Effects.ShaderEffect.PixelShaderProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Effects.ShaderEffect.PixelShader" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Effects.ShaderEffect.PixelShader" /> dependency property. </returns>
    </member>
    <member name="M:System.Windows.Media.Effects.ShaderEffect.PixelShaderSamplerCallback(System.Int32)">
      <summary>Associates a dependency property value with a pixel shader's sampler register. </summary>
      <returns>A <see cref="T:System.Windows.PropertyChangedCallback" /> delegate that associates a dependency property and the shader sampler register specified by <paramref name="samplerRegisterIndex" />. </returns>
      <param name="samplerRegisterIndex">The index of the shader sampler associated with the dependency property.</param>
    </member>
    <member name="M:System.Windows.Media.Effects.ShaderEffect.PixelShaderSamplerCallback(System.Int32,System.Windows.Media.Effects.SamplingMode)">
      <summary>Associates a dependency property value with a pixel shader's sampler register and a <see cref="T:System.Windows.Media.Effects.SamplingMode" />. </summary>
      <returns>A <see cref="T:System.Windows.PropertyChangedCallback" /> delegate that associates a dependency property and the shader sampler register specified by <paramref name="samplerRegisterIndex" />. </returns>
      <param name="samplerRegisterIndex">The index of the shader sampler associated with the dependency property.</param>
      <param name="samplingMode">The <see cref="T:System.Windows.Media.Effects.SamplingMode" /> for the shader sampler.</param>
    </member>
    <member name="M:System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty(System.String,System.Type,System.Int32)">
      <summary>Associates a dependency property with a shader sampler register.</summary>
      <returns>A dependency property associated with the shader sampler specified by <paramref name="samplerRegisterIndex" />. </returns>
      <param name="dpName">The name of the dependency property.</param>
      <param name="ownerType">The type of the effect that has the dependency property. </param>
      <param name="samplerRegisterIndex">The index of the shader sampler associated with the dependency property.</param>
    </member>
    <member name="M:System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty(System.String,System.Type,System.Int32,System.Windows.Media.Effects.SamplingMode)">
      <summary>Associates a dependency property with a shader sampler register and a <see cref="T:System.Windows.Media.Effects.SamplingMode" />.</summary>
      <returns>A dependency property associated with the shader sampler specified by <paramref name="samplerRegisterIndex" />. </returns>
      <param name="dpName">The name of the dependency property.</param>
      <param name="ownerType">The type of the effect that has the dependency property. </param>
      <param name="samplerRegisterIndex">The index of the shader sampler associated with the dependency property.</param>
      <param name="samplingMode">The <see cref="T:System.Windows.Media.Effects.SamplingMode" /> for the shader sampler.</param>
    </member>
    <member name="M:System.Windows.Media.Effects.ShaderEffect.UpdateShaderValue(System.Windows.DependencyProperty)">
      <summary>Notifies the effect that the shader constant or sampler corresponding to the specified dependency property should be updated. </summary>
      <param name="dp">The dependency property to be updated. </param>
    </member>
    <member name="T:System.Windows.Media.Effects.ShaderRenderMode">
      <summary>Indicates the policy for rendering a <see cref="T:System.Windows.Media.Effects.ShaderEffect" /> in software. </summary>
    </member>
    <member name="F:System.Windows.Media.Effects.ShaderRenderMode.Auto">
      <summary>Allow hardware and software rendering.</summary>
    </member>
    <member name="F:System.Windows.Media.Effects.ShaderRenderMode.SoftwareOnly">
      <summary>Force software rendering.</summary>
    </member>
    <member name="F:System.Windows.Media.Effects.ShaderRenderMode.HardwareOnly">
      <summary>Require hardware rendering, ignore if unavailable.</summary>
    </member>
    <member name="T:System.Windows.Media.Imaging.BitmapCacheOption">
      <summary>Specifies how a bitmap image takes advantage of memory caching.</summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapCacheOption.Default">
      <summary>Caches the entire image into memory. This is the default value.</summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapCacheOption.OnDemand">
      <summary>Creates a memory store for requested data only. The first request loads the image directly; subsequent requests are filled from the cache.</summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapCacheOption.OnLoad">
      <summary>Caches the entire image into memory at load time. All requests for image data are filled from the memory store.</summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapCacheOption.None">
      <summary>Do not create a memory store. All requests for the image are filled directly by the image file.</summary>
    </member>
    <member name="T:System.Windows.Media.Imaging.BitmapCodecInfo">
      <summary>Provides information about an imaging codec.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapCodecInfo.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.BitmapCodecInfo" />.</summary>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.Author">
      <summary>Gets a value that identifies the author of the codec.</summary>
      <returns>The author of the codec.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.ContainerFormat">
      <summary>Gets a value that identifies the container format for the codec.</summary>
      <returns>The container format of the codec.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.DeviceManufacturer">
      <summary>Gets a value that identifies the device manufacturer of the codec.</summary>
      <returns>The device manufacturer of the codec.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.DeviceModels">
      <summary>Gets a value that identifies the device models of the codec.</summary>
      <returns>The device model of the codec.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.FileExtensions">
      <summary>Gets a value that identifies the file extensions associated with the codec.</summary>
      <returns>The file extensions associated with the codec.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.FriendlyName">
      <summary>Gets a value that represents the friendly name of the codec.</summary>
      <returns>The friendly name of the codec.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.MimeTypes">
      <summary>Gets a value that identifies the Multipurpose Internet Mail Extensions (MIME) associated with the codec.</summary>
      <returns>The Multipurpose Internet Mail Extensions (MIME) types associated with the codec.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.SpecificationVersion">
      <summary>Gets a value that identifies the specification version of the codec.</summary>
      <returns>The specification version of the codec.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.SupportsAnimation">
      <summary>Gets a value that indicates whether the codec supports animation.</summary>
      <returns>true if the codec supports animation; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.SupportsLossless">
      <summary>Gets a value that indicates whether the codec supports lossless of images.</summary>
      <returns>true if the codec supports lossless of images; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.SupportsMultipleFrames">
      <summary>Gets a value that identifies whether the codec supports multiple frames.</summary>
      <returns>true if the codec supports multiple frames; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapCodecInfo.Version">
      <summary>Gets a value that identifies the version of the codec.</summary>
      <returns>The version of the codec.</returns>
    </member>
    <member name="T:System.Windows.Media.Imaging.BitmapCreateOptions">
      <summary>Specifies initialization options for bitmap images.</summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapCreateOptions.None">
      <summary>No <see cref="T:System.Windows.Media.Imaging.BitmapCreateOptions" /> are specified. This is the default value.</summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapCreateOptions.PreservePixelFormat">
      <summary>Ensures that the <see cref="T:System.Windows.Media.PixelFormat" /> a file is stored in is the same as it is loaded to.</summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapCreateOptions.DelayCreation">
      <summary>Causes a <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> object to delay initialization until it is necessary. This is useful when dealing with collections of images.</summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapCreateOptions.IgnoreColorProfile">
      <summary>Causes a <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> to ignore an embedded color profile.</summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapCreateOptions.IgnoreImageCache">
      <summary>Loads images without using an existing image cache. This option should only be selected when images in a cache need to be refreshed.</summary>
    </member>
    <member name="T:System.Windows.Media.Imaging.BitmapDecoder">
      <summary>Represents a container for bitmap frames. Each bitmap frame is a <see cref="T:System.Windows.Media.Imaging.BitmapSource" />. This abstract class provides a base set of functionality for all derived decoder objects.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapDecoder.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.BitmapDecoder" />.</summary>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapDecoder.CodecInfo">
      <summary>Gets information that describes this codec. </summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapCodecInfo" />. This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapDecoder.ColorContexts">
      <summary>Gets a value that represents the color profile associated with a bitmap, if one is defined.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.ColorContext" /> that represents the embedded color profile of the bitmap. If no color profile has been defined, this property returns null. This property has no default value.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapDecoder.Create(System.IO.Stream,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
      <summary>Creates a <see cref="T:System.Windows.Media.Imaging.BitmapDecoder" /> from a <see cref="T:System.IO.Stream" /> by using the specified <see cref="T:System.Windows.Media.Imaging.BitmapCreateOptions" /> and <see cref="T:System.Windows.Media.Imaging.BitmapCacheOption" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Imaging.BitmapDecoder" />.</returns>
      <param name="bitmapStream">The file stream that identifies the bitmap to decode.</param>
      <param name="createOptions">Identifies the <see cref="T:System.Windows.Media.Imaging.BitmapCreateOptions" /> for this decoder.</param>
      <param name="cacheOption">Identifies the <see cref="T:System.Windows.Media.Imaging.BitmapCacheOption" /> for this decoder.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapDecoder.Create(System.Uri,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
      <summary>Creates a <see cref="T:System.Windows.Media.Imaging.BitmapDecoder" /> from a <see cref="T:System.Uri" /> by using the specified <see cref="T:System.Windows.Media.Imaging.BitmapCreateOptions" /> and <see cref="T:System.Windows.Media.Imaging.BitmapCacheOption" />. </summary>
      <returns>A new <see cref="T:System.Windows.Media.Imaging.BitmapDecoder" />.</returns>
      <param name="bitmapUri">The <see cref="T:System.Uri" /> of the bitmap to decode.</param>
      <param name="createOptions">Identifies the <see cref="T:System.Windows.Media.Imaging.BitmapCreateOptions" /> for this decoder.</param>
      <param name="cacheOption">Identifies the <see cref="T:System.Windows.Media.Imaging.BitmapCacheOption" /> for this decoder.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bitmapUri" /> is null.</exception>
      <exception cref="T:System.IO.FileFormatException">The <paramref name="bitmapUri" /> specifies a class ID of an unsupported format type.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapDecoder.Create(System.Uri,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption,System.Net.Cache.RequestCachePolicy)">
      <summary>Creates a <see cref="T:System.Windows.Media.Imaging.BitmapDecoder" /> from a <see cref="T:System.Uri" /> by using the specified <see cref="T:System.Windows.Media.Imaging.BitmapCreateOptions" />, <see cref="T:System.Windows.Media.Imaging.BitmapCacheOption" /> and <see cref="T:System.Net.Cache.RequestCachePolicy" />. </summary>
      <returns>A new <see cref="T:System.Windows.Media.Imaging.BitmapDecoder" />.</returns>
      <param name="bitmapUri">The location of the bitmap from which the <see cref="T:System.Windows.Media.Imaging.BitmapDecoder" /> is created.</param>
      <param name="createOptions">The options that are used to create this <see cref="T:System.Windows.Media.Imaging.BitmapDecoder" />.</param>
      <param name="cacheOption">The cache option that is used to create this <see cref="T:System.Windows.Media.Imaging.BitmapDecoder" />.</param>
      <param name="uriCachePolicy">The caching requirements for this <see cref="T:System.Windows.Media.Imaging.BitmapDecoder" />.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapDecoder.CreateInPlaceBitmapMetadataWriter">
      <summary>Creates an instance of <see cref="T:System.Windows.Media.Imaging.InPlaceBitmapMetadataWriter" />, which can be used to update the metadata of a bitmap.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.InPlaceBitmapMetadataWriter" />.</returns>
      <exception cref="T:System.InvalidOperationException">The file original image stream is read only.</exception>
      <exception cref="T:System.NotImplementedException">The decoder is not a built in decoder.</exception>
    </member>
    <member name="E:System.Windows.Media.Imaging.BitmapDecoder.DownloadCompleted">
      <summary>Occurs when a <see cref="T:System.Windows.Media.Imaging.BitmapDecoder" /> has finished downloading bitmap content.</summary>
    </member>
    <member name="E:System.Windows.Media.Imaging.BitmapDecoder.DownloadFailed">
      <summary>Occurs when bitmap content failed to download.</summary>
    </member>
    <member name="E:System.Windows.Media.Imaging.BitmapDecoder.DownloadProgress">
      <summary>Occurs when a <see cref="T:System.Windows.Media.Imaging.BitmapDecoder" /> has made progress downloading bitmap content.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapDecoder.Finalize">
      <summary>Frees resources and performs other cleanup operations before the <see cref="T:System.Windows.Media.Imaging.BitmapDecoder" /> is reclaimed by garbage collection. </summary>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapDecoder.Frames">
      <summary>Gets the content of an individual frame within a bitmap.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />. This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapDecoder.IsDownloading">
      <summary>Gets a value that indicates if the decoder is currently downloading content.</summary>
      <returns>true if the decoder is downloading content; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapDecoder.Metadata">
      <summary>Gets an instance of <see cref="T:System.Windows.Media.Imaging.BitmapMetadata" /> that represents the global metadata associated with this bitmap, if metadata is defined.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapMetadata" /> that represents global metadata associated with a bitmap. If no metadata is defined, this property returns null.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapDecoder.Palette">
      <summary>Gets the <see cref="T:System.Windows.Media.Imaging.BitmapPalette" /> associated with this decoder. </summary>
      <returns>The <see cref="T:System.Windows.Media.Imaging.BitmapPalette" /> associated with this decoder. If the bitmap has no palette, null is returned. This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapDecoder.Preview">
      <summary>Gets a <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that represents the global preview of this bitmap, if one is defined.</summary>
      <returns>A <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that represents the global preview of the bitmap. If no preview is defined, this property returns null. This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapDecoder.Thumbnail">
      <summary>Gets a <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that represents the thumbnail of the bitmap, if one is defined. </summary>
      <returns>A <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that represents a thumbnail of the bitmap. If no thumbnail is defined, this property returns null. This property has no default value.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapDecoder.ToString">
      <summary>Converts the current value of a <see cref="T:System.Windows.Media.Imaging.BitmapDecoder" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the <see cref="T:System.Windows.Media.Imaging.BitmapDecoder" />.</returns>
    </member>
    <member name="T:System.Windows.Media.Imaging.BitmapEncoder">
      <summary>Encodes a collection of <see cref="T:System.Windows.Media.Imaging.BitmapFrame" /> objects to an image stream. </summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapEncoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.BitmapEncoder" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapEncoder.CodecInfo">
      <summary>Gets information that describes this codec. </summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapCodecInfo" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapEncoder.ColorContexts">
      <summary>Gets or sets a value that represents the color profile that is associated with this encoder.</summary>
      <returns>The collection of <see cref="T:System.Windows.Media.ColorContext" /> objects that represents the color profiles that this encoder uses.</returns>
      <exception cref="T:System.InvalidOperationException">The encoder does not support color profiles.</exception>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Windows.Media.ColorContext" /> value that is passed to the encoder is null.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapEncoder.Create(System.Guid)">
      <summary>Creates a <see cref="T:System.Windows.Media.Imaging.BitmapEncoder" /> from a <see cref="T:System.Guid" /> that identifies the desired bitmap format. </summary>
      <returns>A <see cref="T:System.Windows.Media.Imaging.BitmapEncoder" /> that can encode to the specified <paramref name="containerFormat" />.</returns>
      <param name="containerFormat">Identifies the desired bitmap encoding format.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="containerFormat" /> is Empty.</exception>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapEncoder.Frames">
      <summary>Gets or sets the individual frames within an image.</summary>
      <returns>A collection of <see cref="T:System.Windows.Media.Imaging.BitmapFrame" /> objects within the image.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Windows.Media.Imaging.BitmapFrame" /> value that is passed to the encoder is null.</exception>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapEncoder.Metadata">
      <summary>Gets or sets the metadata that will be associated with this bitmap during encoding.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapMetadata" />.</returns>
      <exception cref="T:System.InvalidOperationException">The encoder does not support global metadata.</exception>
      <exception cref="T:System.ArgumentNullException">The metadata value that is passed to the encoder is null.</exception>
      <exception cref="T:System.ArgumentNullException">An attempt is made to write metadata in an incompatible format.</exception>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapEncoder.Palette">
      <summary>Gets or sets a value that represents the <see cref="T:System.Windows.Media.Imaging.BitmapPalette" /> of an encoded bitmap. </summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Windows.Media.Imaging.BitmapPalette" /> value that is passed to the encoder is null.</exception>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapEncoder.Preview">
      <summary>Gets or sets a <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that represents the global preview of a bitmap, if there is one. </summary>
      <returns>A <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that represents the preview of a bitmap.</returns>
      <exception cref="T:System.InvalidOperationException">The bitmap does not support preview.</exception>
      <exception cref="T:System.ArgumentNullException">The value is set to null.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapEncoder.Save(System.IO.Stream)">
      <summary>Encodes a bitmap image to a specified <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">Identifies the file stream that this bitmap is encoded to.</param>
      <exception cref="T:System.InvalidOperationException">The bitmap has already been encoded.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="P:System.Windows.Media.Imaging.BitmapEncoder.Frames" /> value that is passed to the encoder is null.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="P:System.Windows.Media.Imaging.BitmapEncoder.Frames" /> count is less than or equal to zero.</exception>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapEncoder.Thumbnail">
      <summary>Gets or sets a <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that represents the global embedded thumbnail.</summary>
      <returns>A <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that represents the thumbnail of the bitmap.</returns>
      <exception cref="T:System.InvalidOperationException">The bitmap does not support thumbnails.</exception>
      <exception cref="T:System.ArgumentNullException">The value is set to null.</exception>
    </member>
    <member name="T:System.Windows.Media.Imaging.BitmapFrame">
      <summary>Represents image data returned by a decoder and accepted by encoders.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapFrame.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.BitmapFrame" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapFrame.BaseUri">
      <summary>When overridden in a derived class, gets or sets a value that represents the base <see cref="T:System.Uri" /> of the current context.</summary>
      <returns>The <see cref="T:System.Uri" /> of the current context.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapFrame.ColorContexts">
      <summary>When overridden in a derived class, gets a collection of <see cref="T:System.Windows.Media.ColorContext" /> objects that are associated with this <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</summary>
      <returns>A read-only collection of <see cref="T:System.Windows.Media.ColorContext" /> objects that are associated with this <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapFrame.Create(System.IO.Stream)">
      <summary>Creates a new <see cref="T:System.Windows.Media.Imaging.BitmapFrame" /> from a given <see cref="T:System.IO.Stream" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</returns>
      <param name="bitmapStream">The <see cref="T:System.IO.Stream" /> that is used to construct the <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapFrame.Create(System.IO.Stream,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
      <summary>Creates a new <see cref="T:System.Windows.Media.Imaging.BitmapFrame" /> from a given <see cref="T:System.IO.Stream" /> with the specified <see cref="T:System.Windows.Media.Imaging.BitmapCreateOptions" /> and <see cref="T:System.Windows.Media.Imaging.BitmapCacheOption" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</returns>
      <param name="bitmapStream">The stream from which this <see cref="T:System.Windows.Media.Imaging.BitmapFrame" /> is constructed.</param>
      <param name="createOptions">The options that are used to create this <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</param>
      <param name="cacheOption">The cache option that is used to create this <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapFrame.Create(System.Uri)">
      <summary>Creates a new <see cref="T:System.Windows.Media.Imaging.BitmapFrame" /> from a given <see cref="T:System.Uri" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</returns>
      <param name="bitmapUri">The <see cref="T:System.Uri" /> that identifies the source of the <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapFrame.Create(System.Uri,System.Net.Cache.RequestCachePolicy)">
      <summary>Creates a <see cref="T:System.Windows.Media.Imaging.BitmapFrame" /> from a given <see cref="T:System.Uri" /> with the specified <see cref="T:System.Net.Cache.RequestCachePolicy" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</returns>
      <param name="bitmapUri">The location of the bitmap from which the <see cref="T:System.Windows.Media.Imaging.BitmapFrame" /> is created.</param>
      <param name="uriCachePolicy">The caching requirements for this <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapFrame.Create(System.Uri,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
      <summary>Creates a <see cref="T:System.Windows.Media.Imaging.BitmapFrame" /> from a given <see cref="T:System.Uri" /> with the specified <see cref="T:System.Windows.Media.Imaging.BitmapCreateOptions" /> and <see cref="T:System.Windows.Media.Imaging.BitmapCacheOption" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</returns>
      <param name="bitmapUri">The location of the bitmap from which the <see cref="T:System.Windows.Media.Imaging.BitmapFrame" /> is created.</param>
      <param name="createOptions">The options that are used to create this <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</param>
      <param name="cacheOption">The cache option that is used to create this <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapFrame.Create(System.Uri,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption,System.Net.Cache.RequestCachePolicy)">
      <summary>Creates a <see cref="T:System.Windows.Media.Imaging.BitmapFrame" /> from a given <see cref="T:System.Uri" /> with the specified <see cref="T:System.Windows.Media.Imaging.BitmapCreateOptions" />, <see cref="T:System.Windows.Media.Imaging.BitmapCacheOption" />, and <see cref="T:System.Net.Cache.RequestCachePolicy" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</returns>
      <param name="bitmapUri">The location of the bitmap from which the <see cref="T:System.Windows.Media.Imaging.BitmapFrame" /> is created.</param>
      <param name="createOptions">The options that are used to create this <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</param>
      <param name="cacheOption">The cache option that is used to create this <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</param>
      <param name="uriCachePolicy">The caching requirements for this <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapFrame.Create(System.Windows.Media.Imaging.BitmapSource)">
      <summary>Creates a new <see cref="T:System.Windows.Media.Imaging.BitmapFrame" /> from a given <see cref="T:System.Windows.Media.Imaging.BitmapSource" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</returns>
      <param name="source">The <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that is used to construct this <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapFrame.Create(System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapSource)">
      <summary>Creates a new <see cref="T:System.Windows.Media.Imaging.BitmapFrame" /> from a given <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> with the specified thumbnail.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</returns>
      <param name="source">The source from which the <see cref="T:System.Windows.Media.Imaging.BitmapFrame" /> is constructed.</param>
      <param name="thumbnail">A thumbnail image of the resulting <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapFrame.Create(System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapMetadata,System.Collections.ObjectModel.ReadOnlyCollection{System.Windows.Media.ColorContext})">
      <summary>Creates a new <see cref="T:System.Windows.Media.Imaging.BitmapFrame" /> from a given <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> with the specified thumbnail, <see cref="T:System.Windows.Media.Imaging.BitmapMetadata" />, and <see cref="T:System.Windows.Media.ColorContext" />.</summary>
      <returns>A new <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</returns>
      <param name="source">The <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that is used to construct this <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</param>
      <param name="thumbnail">A thumbnail image of the resulting <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</param>
      <param name="metadata">The metadata to associate with this <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</param>
      <param name="colorContexts">The <see cref="T:System.Windows.Media.ColorContext" /> objects that are associated with this <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapFrame.CreateInPlaceBitmapMetadataWriter">
      <summary>When overridden in a derived class, creates an instance of <see cref="T:System.Windows.Media.Imaging.InPlaceBitmapMetadataWriter" />, which can be used to associate metadata with a <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</summary>
      <returns>An <see cref="T:System.Windows.Media.Imaging.InPlaceBitmapMetadataWriter" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapFrame.Decoder">
      <summary>When overridden in a derived class, gets the decoder associated with this instance of <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />. </summary>
      <returns>The <see cref="T:System.Windows.Media.Imaging.BitmapDecoder" /> that is associated with this <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapFrame.Thumbnail">
      <summary>When overridden in a derived class, gets the thumbnail image associated with this <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</summary>
      <returns>The <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that represents a thumbnail of the current <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />.</returns>
    </member>
    <member name="T:System.Windows.Media.Imaging.BitmapImage">
      <summary>Provides a specialized <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that is optimized for loading images using Extensible Application Markup Language (XAML).</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapImage.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.BitmapImage" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapImage.#ctor(System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.BitmapImage" /> class by using the supplied <see cref="T:System.Uri" />.</summary>
      <param name="uriSource">The <see cref="T:System.Uri" /> to use as the source of the <see cref="T:System.Windows.Media.Imaging.BitmapImage" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="uriSource" /> parameter is null.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapImage.#ctor(System.Uri,System.Net.Cache.RequestCachePolicy)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.BitmapImage" /> class with an image whose source is a <see cref="T:System.Uri" />, and is cached according to the provided <see cref="T:System.Net.Cache.RequestCachePolicy" />.</summary>
      <param name="uriSource">The <see cref="T:System.Uri" /> to use as the source of the <see cref="T:System.Windows.Media.Imaging.BitmapImage" />.</param>
      <param name="uriCachePolicy">The <see cref="T:System.Net.Cache.RequestCachePolicy" /> that specifies the caching requirements for images that are obtained using HTTP.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="uriSource" /> parameter is null.</exception>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapImage.BaseUri">
      <summary>Gets or sets a value that represents the base <see cref="T:System.Uri" /> of the current <see cref="T:System.Windows.Media.Imaging.BitmapImage" /> context.</summary>
      <returns>The base <see cref="T:System.Uri" /> of the current context.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapImage.BeginInit">
      <summary>Signals the start of the <see cref="T:System.Windows.Media.Imaging.BitmapImage" /> initialization.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Media.Imaging.BitmapImage" /> is currently being initialized. <see cref="M:System.Windows.Media.Imaging.BitmapImage.BeginInit" /> has already been called.-or-The <see cref="T:System.Windows.Media.Imaging.BitmapImage" /> has already been initialized.</exception>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapImage.CacheOption">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Imaging.BitmapCacheOption" /> to use for this instance of <see cref="T:System.Windows.Media.Imaging.BitmapImage" />.  </summary>
      <returns>The <see cref="T:System.Windows.Media.Imaging.BitmapCacheOption" /> being used for the <see cref="T:System.Windows.Media.Imaging.BitmapImage" />. The default is <see cref="F:System.Windows.Media.Imaging.BitmapCacheOption.Default" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapImage.CacheOptionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.BitmapImage.CacheOption" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.BitmapImage.CacheOption" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapImage.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Imaging.BitmapImage" />, making deep copies of this object's values. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapImage.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Imaging.BitmapImage" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapImage.CreateOptions">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Imaging.BitmapCreateOptions" /> for a <see cref="T:System.Windows.Media.Imaging.BitmapImage" />.  </summary>
      <returns>The <see cref="T:System.Windows.Media.Imaging.BitmapCreateOptions" /> used for this <see cref="T:System.Windows.Media.Imaging.BitmapImage" />. The default is <see cref="F:System.Windows.Media.Imaging.BitmapCreateOptions.None" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapImage.CreateOptionsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.BitmapImage.CreateOptions" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.BitmapImage.CreateOptions" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapImage.DecodePixelHeight">
      <summary>Gets or sets the height, in pixels, that the image is decoded to.  </summary>
      <returns>The height, in pixels, that the image is decoded to. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapImage.DecodePixelHeightProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.BitmapImage.DecodePixelHeight" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.BitmapImage.DecodePixelHeight" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapImage.DecodePixelWidth">
      <summary>Gets or sets the width, in pixels, that the image is decoded to.  </summary>
      <returns>The width, in pixels, that the image is decoded to. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapImage.DecodePixelWidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.BitmapImage.DecodePixelWidth" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.BitmapImage.DecodePixelWidth" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapImage.EndInit">
      <summary>Signals the end of the <see cref="T:System.Windows.Media.Imaging.BitmapImage" /> initialization.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Media.Imaging.BitmapImage.UriSource" /> or <see cref="P:System.Windows.Media.Imaging.BitmapImage.StreamSource" /> properties are null.-or-The <see cref="M:System.Windows.Media.Imaging.BitmapImage.EndInit" /> method is called without first calling <see cref="M:System.Windows.Media.Imaging.BitmapImage.BeginInit" />.</exception>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapImage.IsDownloading">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.Media.Imaging.BitmapImage" /> is currently downloading content.</summary>
      <returns>true if the <see cref="T:System.Windows.Media.Imaging.BitmapImage" /> is downloading content; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapImage.Metadata">
      <summary>Not supported. <see cref="T:System.Windows.Media.Imaging.BitmapImage" /> does not support the <see cref="P:System.Windows.Media.Imaging.BitmapImage.Metadata" /> property and will throw a <see cref="T:System.NotSupportedException" />.</summary>
      <returns>Not supported.</returns>
      <exception cref="T:System.NotSupportedException">An attempt to read the <see cref="P:System.Windows.Media.Imaging.BitmapImage.Metadata" /> occurs.</exception>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapImage.Rotation">
      <summary>Gets or sets the angle that this <see cref="T:System.Windows.Media.Imaging.BitmapImage" /> is rotated to.  </summary>
      <returns>The rotation that is used for the <see cref="T:System.Windows.Media.Imaging.BitmapImage" />. The default is <see cref="F:System.Windows.Media.Imaging.Rotation.Rotate0" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapImage.RotationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.BitmapImage.Rotation" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.BitmapImage.Rotation" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapImage.SourceRect">
      <summary>Gets or sets the rectangle that is used as the source of the <see cref="T:System.Windows.Media.Imaging.BitmapImage" />.  </summary>
      <returns>The rectangle that is used as the source of the <see cref="T:System.Windows.Media.Imaging.BitmapImage" />. The default is <see cref="P:System.Windows.Int32Rect.Empty" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapImage.SourceRectProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.BitmapImage.SourceRect" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.BitmapImage.SourceRect" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapImage.StreamSource">
      <summary>Gets or sets the stream source of the <see cref="T:System.Windows.Media.Imaging.BitmapImage" />.  </summary>
      <returns>The stream source of the <see cref="T:System.Windows.Media.Imaging.BitmapImage" />. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapImage.StreamSourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.BitmapImage.StreamSource" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.BitmapImage.StreamSource" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapImage.UriCachePolicy">
      <summary>Gets or sets a value that represents the caching policy for images that come from an HTTP source. </summary>
      <returns>The base <see cref="T:System.Net.Cache.RequestCachePolicy" /> of the current context. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapImage.UriCachePolicyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.BitmapImage.UriCachePolicy" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.BitmapImage.UriCachePolicy" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapImage.UriSource">
      <summary>Gets or sets the <see cref="T:System.Uri" /> source of the <see cref="T:System.Windows.Media.Imaging.BitmapImage" />.  </summary>
      <returns>The <see cref="T:System.Uri" /> source of the <see cref="T:System.Windows.Media.Imaging.BitmapImage" />. The default is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.BitmapImage.UriSourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.BitmapImage.UriSource" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.BitmapImage.UriSource" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Imaging.BitmapMetadata">
      <summary>Provides support for reading and writing metadata to and from a bitmap image.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapMetadata.#ctor(System.String)">
      <summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.BitmapMetadata" /> for use with the specified image format.</summary>
      <param name="containerFormat">The format of the bitmap image, specified as "gif", "jpeg", "png", or "tiff".</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="containerFormat" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapMetadata.ApplicationName">
      <summary>Gets or sets a value that identifies the name of the application that was used to construct or alter an image file.</summary>
      <returns>The name of the application that was used to construct or alter an image file.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapMetadata.Author">
      <summary>Gets or sets a value that represents the author of an image.</summary>
      <returns>The author of the image.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapMetadata.CameraManufacturer">
      <summary>Gets or sets a value that identifies the camera manufacturer that is associated with an image.</summary>
      <returns>The camera manufacturer that is associated with an image.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapMetadata.CameraModel">
      <summary>Gets or sets a value that identifies the camera model that was used to capture the image.</summary>
      <returns>The camera model that was used to capture the image.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapMetadata.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Imaging.BitmapMetadata" />, making deep copies of this object's values. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapMetadata.CloneCore(System.Windows.Freezable)">
      <summary>Makes this instance a deep copy of the specified <see cref="T:System.Windows.Media.Imaging.BitmapMetadata" />. </summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Imaging.BitmapMetadata" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapMetadata.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes this instance a modifiable deep copy of the specified <see cref="T:System.Windows.Media.Imaging.BitmapMetadata" /> using current property values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Imaging.BitmapMetadata" /> to clone.</param>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapMetadata.Comment">
      <summary>Gets or sets a value that represents a comment that is associated with the image file.</summary>
      <returns>A comment that is associated with the image file.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapMetadata.ContainsQuery(System.String)">
      <summary>Determines whether a given query string exists within a <see cref="T:System.Windows.Media.Imaging.BitmapMetadata" /> object.</summary>
      <returns>true if the query string is found within the metadata store; otherwise, false.</returns>
      <param name="query">Identifies the string that is being queried in the current <see cref="T:System.Windows.Media.Imaging.BitmapMetadata" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="query" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapMetadata.Copyright">
      <summary>Gets or sets a value that indicates copyright information that is associated with the image file.</summary>
      <returns>The copyright information that is associated with the image file.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapMetadata.CreateInstanceCore">
      <summary>An Implementation of <see cref="M:System.Windows.Freezable.CreateInstance" />.</summary>
      <returns>The new instance.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapMetadata.DateTaken">
      <summary>Gets or sets a value that indicates the date that the image was taken.</summary>
      <returns>The date that the image was taken.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapMetadata.Format">
      <summary>Gets a value that identifies the format of the image.</summary>
      <returns>The format of the bitmap image.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapMetadata.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Imaging.BitmapMetadata" /> object. </summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Imaging.BitmapMetadata" /> object to clone and freeze.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapMetadata.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a frozen clone of the specified <see cref="T:System.Windows.Media.Imaging.BitmapMetadata" />. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Imaging.BitmapMetadata" /> to copy and freeze.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapMetadata.GetQuery(System.String)">
      <summary>Provides access to a metadata query reader that can extract metadata from a bitmap image file.</summary>
      <returns>The metadata at the specified query location.</returns>
      <param name="query">Identifies the string that is being queried in the current <see cref="T:System.Windows.Media.Imaging.BitmapMetadata" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="query" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapMetadata.IsFixedSize">
      <summary>Gets a value that determines whether the <see cref="T:System.Windows.Media.Imaging.BitmapMetadata" /> object is a fixed size.</summary>
      <returns>true if the <see cref="T:System.Windows.Media.Imaging.BitmapMetadata" /> is a fixed size; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapMetadata.IsReadOnly">
      <summary>Gets a value that indicates whether the metadata that is associated with an image is read-only.</summary>
      <returns>true if the metadata is read-only; otherwise, false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapMetadata.Keywords">
      <summary>Gets or sets a collection of keywords that describe the bitmap image.</summary>
      <returns>A read-only collection of strings.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapMetadata.Location">
      <summary>Gets a value that identifies the base location of the metadata that is associated with an image.</summary>
      <returns>The base location of the image metadata.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapMetadata.Rating">
      <summary>Gets or sets a value that identifies the image rating.</summary>
      <returns>The rating value between 0 and 5.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapMetadata.RemoveQuery(System.String)">
      <summary>Removes a metadata query from an instance of <see cref="T:System.Windows.Media.Imaging.BitmapMetadata" />.</summary>
      <param name="query">The metadata query to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="query" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">Occurs when image metadata is read-only.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapMetadata.SetQuery(System.String,System.Object)">
      <summary>Provides access to a metadata query writer that can write metadata to a bitmap image file.</summary>
      <param name="query">Identifies the location of the metadata to be written.</param>
      <param name="value">The value of the metadata to be written.</param>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapMetadata.Subject">
      <summary>Gets or sets a value that indicates the subject matter of the bitmap image.</summary>
      <returns>The subject of the bitmap image.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapMetadata.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapMetadata.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapMetadata.Title">
      <summary>Gets or sets a value that identifies the title of an image file.</summary>
      <returns>The title of an image file.</returns>
    </member>
    <member name="T:System.Windows.Media.Imaging.BitmapMetadataBlob">
      <summary>Provides a placeholder for metadata items that cannot be converted from C# to an underlying data type that persists metadata. The blob is converted into an array of bytes to preserve the content.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapMetadataBlob.#ctor(System.Byte[])">
      <summary>Initializes an instance of <see cref="T:System.Windows.Media.Imaging.BitmapMetadataBlob" /> and converts the metadata it holds into an array of bytes to persist its content.</summary>
      <param name="blob">Placeholder metadata.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapMetadataBlob.GetBlobValue">
      <summary>Returns an array of bytes that represents the value of a <see cref="T:System.Windows.Media.Imaging.BitmapMetadataBlob" />.</summary>
      <returns>An array of bytes.</returns>
    </member>
    <member name="T:System.Windows.Media.Imaging.BitmapPalette">
      <summary>Defines the available color palette for a supported image type.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapPalette.#ctor(System.Collections.Generic.IList{System.Windows.Media.Color})">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.BitmapPalette" /> class with the specified colors.</summary>
      <param name="colors">The colors to add to the custom palette.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="colors" /> parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="colors" /> parameter is less than 1 or greater than 256.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapPalette.#ctor(System.Windows.Media.Imaging.BitmapSource,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.BitmapPalette" /> class based on the specified <see cref="T:System.Windows.Media.Imaging.BitmapSource" />. The new <see cref="T:System.Windows.Media.Imaging.BitmapPalette" /> is limited to a specified maximum color count.</summary>
      <param name="bitmapSource">The source bitmap from which the palette is read or constructed.</param>
      <param name="maxColorCount">The maximum number of colors the new <see cref="T:System.Windows.Media.Imaging.BitmapPalette" /> can use.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bitmapSource" /> parameter is null.</exception>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalette.Colors">
      <summary>Get the colors defined in a palette.</summary>
      <returns>The list of colors defined in a palette.</returns>
    </member>
    <member name="T:System.Windows.Media.Imaging.BitmapPalettes">
      <summary>Defines several color palettes that are commonly used by bitmap images.</summary>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.BlackAndWhite">
      <summary>Gets a value that represents a black-and-white color palette. This palette consists of 2 colors total.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.BlackAndWhiteTransparent">
      <summary>Gets a value that represents a black, white, and transparent color palette. This palette consists of 3 colors total.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.Gray16">
      <summary>Gets a value that represents a color palette that contains 16 shades of gray. The palette ranges from black to gray to white. This palette contains 16 total colors.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.Gray16Transparent">
      <summary>Gets a value that represents a color palette that contains 16 shades of gray. The palette ranges from black to gray to white with an additional transparent color. This palette contains 17 total colors.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.Gray256">
      <summary>Gets a value that represents a color palette that contains 256 shades of gray, ranging from black to gray to white. This palette contains 256 total colors.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.Gray256Transparent">
      <summary>Gets a value that represents a color palette that contains 256 shades of gray, ranging from black to gray to white with an additional transparent color. This palette contains 257 total colors.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.Gray4">
      <summary>Gets a value that represents a color palette that contains 4 shades of gray, ranging from black to gray to white. This palette contains 4 total colors.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.Gray4Transparent">
      <summary>Gets a value that represents a color palette that contains 4 shades of gray, ranging from black to gray to white with an additional transparent color. This palette contains 5 total colors.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone125">
      <summary>Gets a value that represents a color palette that contains 125 primary colors and 16 system colors, with duplicate colors removed. There are a total of 133 colors in this palette.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone125Transparent">
      <summary>Gets a value that represents a color palette that contains 125 primary colors, 16 system colors, and 1 additional transparent color. Duplicate colors in the palette are removed. There are a total of 134 colors in this palette.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone216">
      <summary>Gets a value that represents a color palette that contains 216 primary colors and 16 system colors, with duplicate colors removed. There are a total of 224 colors in this palette.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone216Transparent">
      <summary>Gets a value that represents a color palette that contains 216 primary colors, 16 system colors, and 1 additional transparent color. Duplicate colors in the palette are removed. There are a total of 225 colors in this palette.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone252">
      <summary>Gets a value that represents a color palette that contains 252 primary colors and 16 system colors, with duplicate colors removed. There are a total of 256 colors in this palette.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone252Transparent">
      <summary>Gets a value that represents a color palette that contains 252 primary colors, 16 system colors, and 1 additional transparent color. Duplicate colors in the palette are removed. There are a total of 256 colors in this palette.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone256">
      <summary>Gets a value that represents a color palette that contains 256 primary colors and 16 system colors, with duplicate colors removed. There are a total of 256 colors in this palette.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone256Transparent">
      <summary>Gets a value that represents a color palette that contains 256 primary colors, 16 system colors, and 1 additional transparent color that replaces the final color in the sequence. Duplicate colors in the palette are removed. There are a total of 256 colors in this palette.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone27">
      <summary>Gets a value that represents a color palette that contains 27 primary colors and 16 system colors, with duplicate colors removed. There are a total of 35 colors in this palette.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone27Transparent">
      <summary>Gets a value that represents a color palette that contains 27 primary colors and 16 system colors, with duplicate colors removed and 1 additional transparent color. There are a total of 36 colors in this palette.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone64">
      <summary>Gets a value that represents a color palette that contains 64 primary colors and 16 system colors, with duplicate colors removed. There are a total of 72 colors in this palette.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone64Transparent">
      <summary>Gets a value that represents a color palette that contains 64 primary colors and 16 system colors, with duplicate colors removed and 1 additional transparent color. There are a total of 73 colors in this palette.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone8">
      <summary>Gets a value that represents a color palette that contains 8 primary colors and 16 system colors, with duplicate colors removed. There are a total of 16 colors in this palette, which are the same as the system palette.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.Halftone8Transparent">
      <summary>Gets a value that represents a color palette that contains 8 primary colors and 16 system colors, with duplicate colors removed and 1 additional transparent color. There are a total of 17 colors in this palette. </summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.WebPalette">
      <summary>Gets a value that represents a color palette that contains 216 primary colors and 16 system colors, with duplicate colors removed. There are a total of 224 colors in this palette.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapPalettes.WebPaletteTransparent">
      <summary>Gets a value that represents a color palette that contains 216 primary colors and 16 system colors, with duplicate colors removed and 1 additional transparent color. There are a total of 225 colors in this palette.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapPalette" />.</returns>
    </member>
    <member name="T:System.Windows.Media.Imaging.BitmapSizeOptions">
      <summary>Defines size-related attributes of a cached bitmap image. A bitmap is scaled based on values that are defined by this class.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapSizeOptions.FromEmptyOptions">
      <summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.BitmapSizeOptions" /> with empty sizing properties.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapSizeOptions" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapSizeOptions.FromHeight(System.Int32)">
      <summary>Initializes an instance of <see cref="T:System.Windows.Media.Imaging.BitmapSizeOptions" /> that preserves the aspect ratio of the source bitmap and specifies an initial <see cref="P:System.Windows.Media.Imaging.BitmapSizeOptions.PixelHeight" />.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapSizeOptions" />.</returns>
      <param name="pixelHeight">The height, in pixels, of the resulting bitmap.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="pixelHeight" /> is less than zero.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapSizeOptions.FromRotation(System.Windows.Media.Imaging.Rotation)">
      <summary>Initializes an instance of <see cref="T:System.Windows.Media.Imaging.BitmapSizeOptions" /> that preserves the aspect ratio of the source bitmap and specifies an initial <see cref="T:System.Windows.Media.Imaging.Rotation" /> to apply.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Imaging.BitmapSizeOptions" />.</returns>
      <param name="rotation">The initial rotation value to apply. Only 90 degree increments are supported.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapSizeOptions.FromWidth(System.Int32)">
      <summary>Initializes an instance of <see cref="T:System.Windows.Media.Imaging.BitmapSizeOptions" /> that preserves the aspect ratio of the source bitmap and specifies an initial <see cref="P:System.Windows.Media.Imaging.BitmapSizeOptions.PixelWidth" />.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapSizeOptions" />.</returns>
      <param name="pixelWidth">The width, in pixels, of the resulting bitmap.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="pixelWidth" /> is less than zero.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapSizeOptions.FromWidthAndHeight(System.Int32,System.Int32)">
      <summary>Initializes an instance of <see cref="T:System.Windows.Media.Imaging.BitmapSizeOptions" /> that does not preserve the original bitmap aspect ratio.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Imaging.BitmapSizeOptions" />.</returns>
      <param name="pixelWidth">The width, in pixels, of the resulting bitmap.</param>
      <param name="pixelHeight">The height, in pixels, of the resulting bitmap.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="pixelWidth" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Occurs when <paramref name="pixelHeight" /> is less than zero.</exception>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapSizeOptions.PixelHeight">
      <summary>The height, in pixels, of the bitmap image.</summary>
      <returns>The height of the bitmap.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapSizeOptions.PixelWidth">
      <summary>The width, in pixels, of the bitmap image.</summary>
      <returns>The width of the bitmap.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapSizeOptions.PreservesAspectRatio">
      <summary>Gets a value that determines whether the aspect ratio of the original bitmap image is preserved.</summary>
      <returns>true if the original aspect ratio is maintained; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapSizeOptions.Rotation">
      <summary>Gets a value that represents the rotation angle that is applied to a bitmap. </summary>
      <returns>The rotation angle that is applied to the image.</returns>
    </member>
    <member name="T:System.Windows.Media.Imaging.BitmapSource">
      <summary>Represents a single, constant set of pixels at a certain size and resolution.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapSource.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapSource.CheckIfSiteOfOrigin">
      <summary>Checks whether the bitmap source content is from a known site of origin. This method is used to make sure that pixel copying operations are safe. </summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapSource.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Imaging.BitmapSource" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapSource.CloneCore(System.Windows.Freezable)">
      <summary>Makes this instance a deep copy of the specified <see cref="T:System.Windows.Media.Imaging.BitmapSource" />. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> to clone..</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapSource.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapSource.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes this instance a modifiable deep copy of the specified <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> using current property values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapSource.CopyPixels(System.Array,System.Int32,System.Int32)">
      <summary>Copies the bitmap pixel data into an array of pixels with the specified stride, starting at the specified offset.</summary>
      <param name="pixels">The destination array.</param>
      <param name="stride">The stride of the bitmap.</param>
      <param name="offset">The pixel location where copying starts.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapSource.CopyPixels(System.Windows.Int32Rect,System.Array,System.Int32,System.Int32)">
      <summary>Copies the bitmap pixel data within the specified rectangle into an array of pixels that has the specified stride starting at the specified offset.</summary>
      <param name="sourceRect">The source rectangle to copy. An <see cref="P:System.Windows.Int32Rect.Empty" /> value specifies the entire bitmap.</param>
      <param name="pixels">The destination array.</param>
      <param name="stride">The stride of the bitmap.</param>
      <param name="offset">The pixel location where copying begins.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapSource.CopyPixels(System.Windows.Int32Rect,System.IntPtr,System.Int32,System.Int32)">
      <summary>Copies the bitmap pixel data within the specified rectangle </summary>
      <param name="sourceRect">The source rectangle to copy. An <see cref="P:System.Windows.Int32Rect.Empty" /> value specifies the entire bitmap.</param>
      <param name="buffer">A pointer to the buffer.</param>
      <param name="bufferSize">The size of the buffer.</param>
      <param name="stride">The stride of the bitmap.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapSource.Create(System.Int32,System.Int32,System.Double,System.Double,System.Windows.Media.PixelFormat,System.Windows.Media.Imaging.BitmapPalette,System.Array,System.Int32)">
      <summary>Creates a new <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> from an array of pixels.</summary>
      <returns>The <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that is created from the specified array of pixels.</returns>
      <param name="pixelWidth">The width of the bitmap.</param>
      <param name="pixelHeight">The height of the bitmap.</param>
      <param name="dpiX">The horizontal dots per inch (dpi) of the bitmap.</param>
      <param name="dpiY">The vertical dots per inch (dpi) of the bitmap.</param>
      <param name="pixelFormat">The pixel format of the bitmap.</param>
      <param name="palette">The palette of the bitmap.</param>
      <param name="pixels">An array of bytes that represents the content of a bitmap image.</param>
      <param name="stride">The stride of the bitmap.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapSource.Create(System.Int32,System.Int32,System.Double,System.Double,System.Windows.Media.PixelFormat,System.Windows.Media.Imaging.BitmapPalette,System.IntPtr,System.Int32,System.Int32)">
      <summary>Creates a new <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> from an array of pixels that are stored in unmanaged memory.</summary>
      <returns>A <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that is created from the array of pixels in unmanaged memory.</returns>
      <param name="pixelWidth">The width of the bitmap.</param>
      <param name="pixelHeight">The height of the bitmap.</param>
      <param name="dpiX">The horizontal dots per inch (dpi) of the bitmap.</param>
      <param name="dpiY">The vertical dots per inch (dpi) of the bitmap.</param>
      <param name="pixelFormat">The pixel format of the bitmap.</param>
      <param name="palette">The palette of the bitmap.</param>
      <param name="buffer">A pointer to the buffer that contains the bitmap data in memory.</param>
      <param name="bufferSize">The size of the buffer.</param>
      <param name="stride">The stride of the bitmap.</param>
    </member>
    <member name="E:System.Windows.Media.Imaging.BitmapSource.DecodeFailed">
      <summary>Occurs when the image fails to load, due to a corrupt image header.</summary>
    </member>
    <member name="E:System.Windows.Media.Imaging.BitmapSource.DownloadCompleted">
      <summary>Occurs when the bitmap content has been completely downloaded.</summary>
    </member>
    <member name="E:System.Windows.Media.Imaging.BitmapSource.DownloadFailed">
      <summary>Occurs when the bitmap content failed to download.</summary>
    </member>
    <member name="E:System.Windows.Media.Imaging.BitmapSource.DownloadProgress">
      <summary>Occurs when the download progress of the bitmap content has changed.</summary>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapSource.DpiX">
      <summary>Gets the horizontal dots per inch (dpi) of the image. </summary>
      <returns>The horizontal dots per inch (dpi) of the image; that is, the dots per inch (dpi) along the x-axis.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapSource.DpiY">
      <summary>Gets the vertical dots per inch (dpi) of the image. </summary>
      <returns>The vertical dots per inch (dpi) of the image; that is, the dots per inch (dpi) along the y-axis.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapSource.Format">
      <summary>Gets the native <see cref="T:System.Windows.Media.PixelFormat" /> of the bitmap data. </summary>
      <returns>The pixel format of the bitmap data.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapSource.FreezeCore(System.Boolean)">
      <summary>Makes an instance of <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> or a derived class immutable.</summary>
      <returns>If <paramref name="isChecking" /> is true, this method returns true if this <see cref="T:System.Windows.Media.Animation.Animatable" /> can be made unmodifiable, or false if it cannot be made unmodifiable. If <paramref name="isChecking" /> is false, this method returns true if the if this <see cref="T:System.Windows.Media.Animation.Animatable" /> is now unmodifiable, or false if it cannot be made unmodifiable, with the side effect of having begun to change the frozen status of this object.</returns>
      <param name="isChecking">true if this instance should actually freeze itself when this method is called; otherwise, false.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapSource.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a clone of the specified <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> object. </summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> object to clone and freeze.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.BitmapSource.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes this instance a frozen clone of the specified <see cref="T:System.Windows.Media.Imaging.BitmapSource" />. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> to copy and freeze.</param>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapSource.Height">
      <summary>Gets the height of the source bitmap in device-independent units (1/96th inch per unit). </summary>
      <returns>The height of the bitmap in device-independent units (1/96th inch per unit).</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapSource.IsDownloading">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> content is currently downloading. </summary>
      <returns>true if the bitmap source is currently downloading; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapSource.Metadata">
      <summary>Gets the metadata that is associated with this bitmap image. </summary>
      <returns>The metadata that is associated with the bitmap image.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapSource.Palette">
      <summary>Gets the color palette of the bitmap, if one is specified. </summary>
      <returns>The color palette of the bitmap.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapSource.PixelHeight">
      <summary>Gets the height of the bitmap in pixels. </summary>
      <returns>The height of the bitmap in pixels.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapSource.PixelWidth">
      <summary>Gets the width of the bitmap in pixels. </summary>
      <returns>The width of the bitmap in pixels.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.BitmapSource.Width">
      <summary>Gets the width of the bitmap in device-independent units (1/96th inch per unit). </summary>
      <returns>The width of the bitmap in device-independent units (1/96th inch per unit).</returns>
    </member>
    <member name="T:System.Windows.Media.Imaging.BmpBitmapDecoder">
      <summary>Defines a decoder for bitmap (BMP) encoded images.  </summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.BmpBitmapDecoder.#ctor(System.IO.Stream,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
      <summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.BmpBitmapDecoder" /> from the specified file stream with the specified <paramref name="createOptions" /> and <paramref name="cacheOption" />.</summary>
      <param name="bitmapStream">Bitmap stream to decode.</param>
      <param name="createOptions">Initialization options for the bitmap image.</param>
      <param name="cacheOption">The cache method to use for the bitmap image.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bitmapStream" /> value is null.</exception>
      <exception cref="T:System.IO.FileFormatException">The <paramref name="bitmapStream" /> is not a bitmap (BMP) encoded image.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.BmpBitmapDecoder.#ctor(System.Uri,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
      <summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.BmpBitmapDecoder" /> from the specified <see cref="T:System.Uri" /> with the specified <paramref name="createOptions" /> and <paramref name="cacheOption" />.</summary>
      <param name="bitmapUri">
        <see cref="T:System.Uri" /> that identifies the bitmap to decode.</param>
      <param name="createOptions">Initialization options for the bitmap image.</param>
      <param name="cacheOption">The cache method to use for the bitmap image.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bitmapUri" /> value is null.</exception>
      <exception cref="T:System.IO.FileFormatException">The <paramref name="bitmapUri" /> is not a bitmap (BMP) encoded image.</exception>
    </member>
    <member name="T:System.Windows.Media.Imaging.BmpBitmapEncoder">
      <summary>Defines an encoder that is used to encode bitmap (BMP) format images.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.BmpBitmapEncoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.BmpBitmapEncoder" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.Imaging.CachedBitmap">
      <summary>Provides caching functionality for a <see cref="T:System.Windows.Media.Imaging.BitmapSource" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.CachedBitmap.#ctor(System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
      <summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.CachedBitmap" /> that has the specified source, bitmap create options, and bitmap cache option.</summary>
      <param name="source">The source bitmap that is being cached.</param>
      <param name="createOptions">Initialization options for the bitmap image.</param>
      <param name="cacheOption">Specifies how the bitmap is cached to memory.</param>
      <exception cref="T:System.ArgumentNullException">Occurs when <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.CachedBitmap.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Imaging.CachedBitmap" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.CachedBitmap.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Imaging.CachedBitmap" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="T:System.Windows.Media.Imaging.ColorConvertedBitmap">
      <summary>Changes the color space of a <see cref="T:System.Windows.Media.Imaging.BitmapSource" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.ColorConvertedBitmap.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.ColorConvertedBitmap" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.ColorConvertedBitmap.#ctor(System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.ColorContext,System.Windows.Media.ColorContext,System.Windows.Media.PixelFormat)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.ColorConvertedBitmap" /> class by using the specified values.</summary>
      <param name="source">The <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that is converted.</param>
      <param name="sourceColorContext">The <see cref="T:System.Windows.Media.ColorContext" /> of the source bitmap.</param>
      <param name="destinationColorContext">The <see cref="T:System.Windows.Media.ColorContext" /> of the converted bitmap.</param>
      <param name="format">The <see cref="T:System.Windows.Media.PixelFormat" /> of the converted bitmap.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.ColorConvertedBitmap.BeginInit">
      <summary>Signals the start of the <see cref="T:System.Windows.Media.Imaging.ColorConvertedBitmap" /> initialization.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Media.Imaging.ColorConvertedBitmap" /> is currently being initialized. <see cref="M:System.Windows.Media.Imaging.ColorConvertedBitmap.BeginInit" /> has already been called.-or-The <see cref="T:System.Windows.Media.Imaging.ColorConvertedBitmap" /> has already been initialized.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.ColorConvertedBitmap.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Imaging.ColorConvertedBitmap" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.ColorConvertedBitmap.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Imaging.ColorConvertedBitmap" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationColorContext">
      <summary>Gets or sets a value that identifies the color profile, as defined by the <see cref="T:System.Windows.Media.ColorContext" /> class, of the converted bitmap.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.ColorContext" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationColorContextProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationColorContext" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationColorContext" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationFormat">
      <summary>Gets or sets a value that represents the <see cref="T:System.Windows.Media.PixelFormat" /> of the converted bitmap.   </summary>
      <returns>An instance of <see cref="T:System.Windows.Media.PixelFormat" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationFormatProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationFormat" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationFormat" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.ColorConvertedBitmap.EndInit">
      <summary>Signals the end of the <see cref="T:System.Windows.Media.Imaging.ColorConvertedBitmap" /> initialization.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Media.Imaging.ColorConvertedBitmap.Source" />, <see cref="P:System.Windows.Media.Imaging.ColorConvertedBitmap.SourceColorContext" />, or <see cref="P:System.Windows.Media.Imaging.ColorConvertedBitmap.DestinationColorContext" /> property is null.-or-The <see cref="M:System.Windows.Media.Imaging.ColorConvertedBitmap.EndInit" /> method is called without first calling <see cref="M:System.Windows.Media.Imaging.ColorConvertedBitmap.BeginInit" />.</exception>
    </member>
    <member name="P:System.Windows.Media.Imaging.ColorConvertedBitmap.Source">
      <summary>Gets or sets a value that identifies the source bitmap that is converted.  </summary>
      <returns>A <see cref="T:System.Windows.Media.Imaging.BitmapSource" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.ColorConvertedBitmap.SourceColorContext">
      <summary>Gets or sets a value that identifies the color profile of the source bitmap.  </summary>
      <returns>An instance of <see cref="T:System.Windows.Media.ColorContext" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.ColorConvertedBitmap.SourceColorContextProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.ColorConvertedBitmap.SourceColorContext" />  dependency property. </summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.ColorConvertedBitmap.SourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.ColorConvertedBitmap.Source" />  dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.ColorConvertedBitmap.Source" />  dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Imaging.CroppedBitmap">
      <summary>Crops a <see cref="T:System.Windows.Media.Imaging.BitmapSource" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.CroppedBitmap.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.CroppedBitmap" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.CroppedBitmap.#ctor(System.Windows.Media.Imaging.BitmapSource,System.Windows.Int32Rect)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.CroppedBitmap" /> class that has the specified <see cref="P:System.Windows.Media.Imaging.CroppedBitmap.Source" /> and <see cref="P:System.Windows.Media.Imaging.CroppedBitmap.SourceRect" />.</summary>
      <param name="source">The <see cref="P:System.Windows.Media.Imaging.CroppedBitmap.Source" /> of the new <see cref="T:System.Windows.Media.Imaging.CroppedBitmap" /> instance.</param>
      <param name="sourceRect">The <see cref="P:System.Windows.Media.Imaging.CroppedBitmap.SourceRect" /> of the new <see cref="T:System.Windows.Media.Imaging.CroppedBitmap" /> instance.</param>
      <exception cref="T:System.ArgumentNullException">Occurs when s<paramref name="ource" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.CroppedBitmap.BeginInit">
      <summary>Signals the start of the <see cref="T:System.Windows.Media.Imaging.CroppedBitmap" /> initialization.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Media.Imaging.CroppedBitmap" /> is currently being initialized. <see cref="M:System.Windows.Media.Imaging.CroppedBitmap.BeginInit" /> has already been called.-or-The <see cref="T:System.Windows.Media.Imaging.CroppedBitmap" /> has already been initialized.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.CroppedBitmap.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Imaging.CroppedBitmap" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.CroppedBitmap.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Imaging.CroppedBitmap" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.CroppedBitmap.EndInit">
      <summary>Signals the end of the <see cref="T:System.Windows.Media.Imaging.CroppedBitmap" /> initialization.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Media.Imaging.CroppedBitmap.Source" /> property is null.-or-The <see cref="M:System.Windows.Media.Imaging.CroppedBitmap.EndInit" /> method is called without first calling <see cref="M:System.Windows.Media.Imaging.CroppedBitmap.BeginInit" />.</exception>
    </member>
    <member name="P:System.Windows.Media.Imaging.CroppedBitmap.Source">
      <summary>Gets or sets the source for the bitmap.   </summary>
      <returns>The source for the bitmap. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.CroppedBitmap.SourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.CroppedBitmap.Source" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.CroppedBitmap.Source" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.CroppedBitmap.SourceRect">
      <summary>Gets or sets the rectangular area that the bitmap is cropped to.  </summary>
      <returns>The rectangular area that the bitmap is cropped to. The default is <see cref="P:System.Windows.Int32Rect.Empty" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.CroppedBitmap.SourceRectProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.CroppedBitmap.SourceRect" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.CroppedBitmap.SourceRect" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Imaging.DownloadProgressEventArgs">
      <summary>Provides data for the <see cref="E:System.Windows.Media.Imaging.BitmapSource.DownloadProgress" /> and <see cref="E:System.Windows.Media.Imaging.BitmapDecoder.DownloadProgress" /> events.</summary>
    </member>
    <member name="P:System.Windows.Media.Imaging.DownloadProgressEventArgs.Progress">
      <summary>Gets a value that represents the download progress of a bitmap, expressed as a percentage. </summary>
      <returns>The progress, expressed as a percentage, to which a bitmap has been downloaded. The returned value will be between 1 and 100.</returns>
    </member>
    <member name="T:System.Windows.Media.Imaging.FormatConvertedBitmap">
      <summary>Provides pixel format conversion functionality for a <see cref="T:System.Windows.Media.Imaging.BitmapSource" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.FormatConvertedBitmap.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.FormatConvertedBitmap" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.FormatConvertedBitmap.#ctor(System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.PixelFormat,System.Windows.Media.Imaging.BitmapPalette,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.FormatConvertedBitmap" /> class that has the specified <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.Source" />, <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationFormat" />, <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationPalette" />, and <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.AlphaThreshold" />.</summary>
      <param name="source">The <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.Source" /> of the new <see cref="T:System.Windows.Media.Imaging.FormatConvertedBitmap" /> instance.</param>
      <param name="destinationFormat">The <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationFormat" /> of the new <see cref="T:System.Windows.Media.Imaging.FormatConvertedBitmap" /> instance.</param>
      <param name="destinationPalette">The <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationPalette" /> of the new <see cref="T:System.Windows.Media.Imaging.FormatConvertedBitmap" /> instance if <paramref name="destinationFormat" /> is an indexed format.</param>
      <param name="alphaThreshold">The <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.AlphaThreshold" /> of the new <see cref="T:System.Windows.Media.Imaging.FormatConvertedBitmap" /> instance.</param>
    </member>
    <member name="P:System.Windows.Media.Imaging.FormatConvertedBitmap.AlphaThreshold">
      <summary>Gets or sets the alpha channel threshold of a bitmap when converting to palletized formats that recognizes an alpha color.  </summary>
      <returns>The alpha channel threshold for this <see cref="T:System.Windows.Media.Imaging.FormatConvertedBitmap" />. The default value is 0.0.</returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.FormatConvertedBitmap.AlphaThresholdProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.AlphaThreshold" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.AlphaThreshold" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.FormatConvertedBitmap.BeginInit">
      <summary>Signals the start of the <see cref="T:System.Windows.Media.Imaging.FormatConvertedBitmap" /> initialization. </summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Media.Imaging.FormatConvertedBitmap" /> is currently being initialized. <see cref="M:System.Windows.Media.Imaging.FormatConvertedBitmap.BeginInit" /> has already been called.-or-The <see cref="T:System.Windows.Media.Imaging.FormatConvertedBitmap" /> has already been initialized.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.FormatConvertedBitmap.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Imaging.FormatConvertedBitmap" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.FormatConvertedBitmap.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Imaging.FormatConvertedBitmap" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationFormat">
      <summary>Gets or sets the pixel format to convert the bitmap to.  </summary>
      <returns>The pixel format to apply to the bitmap. The default value is <see cref="P:System.Windows.Media.PixelFormats.Pbgra32" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationFormatProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationFormat" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationFormat" /> dependency property. </returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationPalette">
      <summary>Gets or sets the palette to apply to the bitmap if the format is indexed.  </summary>
      <returns>The destination palette to apply to the bitmap. The default value is null. </returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationPaletteProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationPalette" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationPalette" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.FormatConvertedBitmap.EndInit">
      <summary>Signals the end of the <see cref="T:System.Windows.Media.Imaging.FormatConvertedBitmap" /> initialization. </summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.Source" /> property is null.-or-The <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationFormat" /> property is an indexed format and the <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.DestinationPalette" /> property is null.-or-The palette colors do not match the destination format.-or-The <see cref="M:System.Windows.Media.Imaging.FormatConvertedBitmap.EndInit" /> method is called without first calling <see cref="M:System.Windows.Media.Imaging.FormatConvertedBitmap.BeginInit" />.</exception>
    </member>
    <member name="P:System.Windows.Media.Imaging.FormatConvertedBitmap.Source">
      <summary>Gets or sets the source for the bitmap.   </summary>
      <returns>The source for the bitmap. The default value is null. </returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.FormatConvertedBitmap.SourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.Source" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.FormatConvertedBitmap.Source" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Imaging.GifBitmapDecoder">
      <summary>Defines a decoder for Graphics Interchange Format (GIF) encoded images.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.GifBitmapDecoder.#ctor(System.IO.Stream,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
      <summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.GifBitmapDecoder" /> from the specified file stream with the specified <paramref name="createOptions" /> and <paramref name="cacheOption" />.</summary>
      <param name="bitmapStream">Bitmap stream to decode.</param>
      <param name="createOptions">Initialization options for the bitmap image.</param>
      <param name="cacheOption">The cache method to use for the bitmap image.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bitmapStream" /> value is null.</exception>
      <exception cref="T:System.IO.FileFormatException">The <paramref name="bitmapStream" /> is not a Graphics Interchange Format (GIF) encoded image.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.GifBitmapDecoder.#ctor(System.Uri,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
      <summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.GifBitmapDecoder" /> from the specified <see cref="T:System.Uri" /> with the specified <paramref name="createOptions" /> and <paramref name="cacheOption" />.</summary>
      <param name="bitmapUri">
        <see cref="T:System.Uri" /> that identifies the bitmap to decode.</param>
      <param name="createOptions">Initialization options for the bitmap image.</param>
      <param name="cacheOption">The cache method to use for the bitmap image.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bitmapUri" /> value is null.</exception>
      <exception cref="T:System.IO.FileFormatException">The <paramref name="bitmapUri" /> is not a Graphics Interchange Format (GIF) encoded image.</exception>
    </member>
    <member name="T:System.Windows.Media.Imaging.GifBitmapEncoder">
      <summary>Defines an encoder that is used to encode Graphics Interchange Format (GIF) images.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.GifBitmapEncoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.GifBitmapEncoder" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.Imaging.IconBitmapDecoder">
      <summary>Defines a specialized decoder for icon (.ico) encoded images. </summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.IconBitmapDecoder.#ctor(System.IO.Stream,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.IconBitmapDecoder" /> class from the specified file stream, with the specified <paramref name="createOptions" /> and <paramref name="cacheOption" />.</summary>
      <param name="bitmapStream">The bitmap stream to decode.</param>
      <param name="createOptions">Initialization options for the bitmap image.</param>
      <param name="cacheOption">The cache method to use for the bitmap image.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bitmapStream" /> value is null.</exception>
      <exception cref="T:System.IO.FileFormatException">The <paramref name="bitmapStream" /> is not an icon encoded image.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.IconBitmapDecoder.#ctor(System.Uri,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.IconBitmapDecoder" /> class from the specified <see cref="T:System.Uri" />, with the specified <paramref name="createOptions" /> and <paramref name="cacheOption" />.</summary>
      <param name="bitmapUri">The <see cref="T:System.Uri" /> that identifies the bitmap to decode.</param>
      <param name="createOptions">Initialization options for the bitmap image.</param>
      <param name="cacheOption">The cache method to use for the bitmap image.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bitmapUri" /> value is null.</exception>
      <exception cref="T:System.IO.FileFormatException">The <paramref name="bitmapUri" /> is not an icon encoded image.</exception>
    </member>
    <member name="T:System.Windows.Media.Imaging.InPlaceBitmapMetadataWriter">
      <summary>Enables in-place updates to existing blocks of <see cref="T:System.Windows.Media.Imaging.BitmapMetadata" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.InPlaceBitmapMetadataWriter.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Imaging.InPlaceBitmapMetadataWriter" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.InPlaceBitmapMetadataWriter.TrySave">
      <summary>Gets a value that indicates whether image metadata can be saved successfully.</summary>
      <returns>true if bitmap metadata can be written successfully; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.Media.Imaging.JpegBitmapDecoder">
      <summary>Defines a decoder for Joint Photographics Experts Group (JPEG) encoded images. </summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.JpegBitmapDecoder.#ctor(System.IO.Stream,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.JpegBitmapDecoder" /> class from the specified file stream, with the specified <paramref name="createOptions" /> and <paramref name="cacheOption" />.</summary>
      <param name="bitmapStream">The bitmap stream to decode.</param>
      <param name="createOptions">Initialization options for the bitmap image.</param>
      <param name="cacheOption">The cache method to use for the bitmap image.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bitmapStream" /> value is null.</exception>
      <exception cref="T:System.IO.FileFormatException">The <paramref name="bitmapStream" /> is not a Joint Photographics Experts Group (JPEG) encoded image.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.JpegBitmapDecoder.#ctor(System.Uri,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.JpegBitmapDecoder" /> class from the specified <see cref="T:System.Uri" />, with the specified <paramref name="createOptions" /> and <paramref name="cacheOption" />.</summary>
      <param name="bitmapUri">The <see cref="T:System.Uri" /> that identifies the bitmap to decode.</param>
      <param name="createOptions">Initialization options for the bitmap image.</param>
      <param name="cacheOption">The cache method to use for the bitmap image.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bitmapUri" /> value is null.</exception>
      <exception cref="T:System.IO.FileFormatException">The <paramref name="bitmapUri" /> is not a Joint Photographics Experts Group (JPEG) encoded image.</exception>
    </member>
    <member name="T:System.Windows.Media.Imaging.JpegBitmapEncoder">
      <summary>Defines an encoder that is used to encode Joint Photographics Experts Group (JPEG) format images.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.JpegBitmapEncoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.JpegBitmapEncoder" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Imaging.JpegBitmapEncoder.FlipHorizontal">
      <summary>Gets or sets a value that indicates whether a Joint Photographics Experts Group (JPEG) image should be flipped horizontally during encoding.</summary>
      <returns>true if the image is flipped horizontally during encoding; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.JpegBitmapEncoder.FlipVertical">
      <summary>Gets or sets a value that indicates whether a Joint Photographics Experts Group (JPEG) image should be flipped vertically during encoding.</summary>
      <returns>true if the image is flipped vertically during encoding; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.JpegBitmapEncoder.QualityLevel">
      <summary>Gets or sets a value that indicates the quality level of the resulting Joint Photographics Experts Group (JPEG) image.</summary>
      <returns>The quality level of the JPEG image. The value range is 1 (lowest quality) to 100 (highest quality) inclusive. </returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.JpegBitmapEncoder.Rotation">
      <summary>Gets or sets a value that represents the degree to which a Joint Photographics Experts Group (JPEG) image is rotated.</summary>
      <returns>The degree to which the image is rotated.</returns>
    </member>
    <member name="T:System.Windows.Media.Imaging.LateBoundBitmapDecoder">
      <summary>Defines a decoder that requires delayed bitmap creation such as asynchronous image downloads. </summary>
    </member>
    <member name="P:System.Windows.Media.Imaging.LateBoundBitmapDecoder.CodecInfo">
      <summary>Gets information that describes this codec.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapCodecInfo" />. This property has no default value. If the late bound decoder is still downloading, this property returns null.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.LateBoundBitmapDecoder.ColorContexts">
      <summary>Gets a value that represents the color profile that is associated with a bitmap, if one is defined.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.ColorContext" /> that represents the embedded color profile of the bitmap. If no color profile has been defined, or if the <see cref="T:System.Windows.Media.Imaging.LateBoundBitmapDecoder" /> is still downloading content, this property returns null. This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.LateBoundBitmapDecoder.Decoder">
      <summary>Gets the underlying decoder that is associated with this late-bound decoder.</summary>
      <returns>The underlying <see cref="T:System.Windows.Media.Imaging.BitmapDecoder" />. If the <see cref="T:System.Windows.Media.Imaging.LateBoundBitmapDecoder" /> is still downloading a bitmap, the underlying decoder is null. Otherwise, the underlying decoder is created on first access.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.LateBoundBitmapDecoder.Frames">
      <summary>Gets the content of an individual frame within a bitmap.</summary>
      <returns>An instance of <see cref="T:System.Windows.Media.Imaging.BitmapFrame" />. This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.LateBoundBitmapDecoder.IsDownloading">
      <summary>Gets a value that indicates whether the decoder is currently downloading content.</summary>
      <returns>true if the decoder is downloading content; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.LateBoundBitmapDecoder.Palette">
      <summary>Gets the <see cref="T:System.Windows.Media.Imaging.BitmapPalette" /> that is associated with this decoder.</summary>
      <returns>The <see cref="T:System.Windows.Media.Imaging.BitmapPalette" /> that is associated with this decoder. If the bitmap has no palette, or if the <see cref="T:System.Windows.Media.Imaging.LateBoundBitmapDecoder" /> is still downloading content, this property returns null. This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.LateBoundBitmapDecoder.Preview">
      <summary>Gets a <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that represents the global preview of this bitmap, if one is defined.</summary>
      <returns>A <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that represents the global preview of the bitmap. If no preview is defined, or if the <see cref="T:System.Windows.Media.Imaging.LateBoundBitmapDecoder" /> is still downloading content, this property returns null. This property has no default value.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.LateBoundBitmapDecoder.Thumbnail">
      <summary>Gets a <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that represents the thumbnail of the bitmap, if one is defined.</summary>
      <returns>A <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that represents a thumbnail of the bitmap. If no thumbnail is defined, or if the <see cref="T:System.Windows.Media.Imaging.LateBoundBitmapDecoder" /> is still downloading content, this property returns null. This property has no default value.</returns>
    </member>
    <member name="T:System.Windows.Media.Imaging.PngBitmapDecoder">
      <summary>Defines a decoder for Portable Network Graphics (PNG) encoded images. </summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.PngBitmapDecoder.#ctor(System.IO.Stream,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
      <summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.PngBitmapDecoder" /> from the specified file stream with the specified <paramref name="createOptions" /> and <paramref name="cacheOption" />.</summary>
      <param name="bitmapStream">The bitmap stream to decode.</param>
      <param name="createOptions">Initialization options for the bitmap image.</param>
      <param name="cacheOption">The cache method to use for the bitmap image..</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bitmapStream" /> value is null.</exception>
      <exception cref="T:System.IO.FileFormatException">The <paramref name="bitmapStream" /> is not a Portable Network Graphics (PNG) encoded image.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.PngBitmapDecoder.#ctor(System.Uri,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
      <summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.PngBitmapDecoder" /> from the specified <see cref="T:System.Uri" /> with the specified <paramref name="createOptions" /> and <paramref name="cacheOption" />.</summary>
      <param name="bitmapUri">The <see cref="T:System.Uri" /> that identifies the bitmap to decode.</param>
      <param name="createOptions">Initialization options for the bitmap image.</param>
      <param name="cacheOption">The cache method to use for the bitmap image.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bitmapUri" /> value is null.</exception>
      <exception cref="T:System.IO.FileFormatException">The <paramref name="bitmapUri" /> is not a Portable Network Graphics (PNG) encoded image.</exception>
    </member>
    <member name="T:System.Windows.Media.Imaging.PngBitmapEncoder">
      <summary>Defines an encoder that is used to encode Portable Network Graphics (PNG) format images. </summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.PngBitmapEncoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.PngBitmapEncoder" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Imaging.PngBitmapEncoder.Interlace">
      <summary>Gets or sets a value that indicates whether the Portable Network Graphics (PNG) bitmap should interlace.</summary>
      <returns>One of the <see cref="P:System.Windows.Media.Imaging.PngBitmapEncoder.Interlace" /> values. The default is <see cref="F:System.Windows.Media.Imaging.PngInterlaceOption.Default" />.</returns>
    </member>
    <member name="T:System.Windows.Media.Imaging.PngInterlaceOption">
      <summary>Specifies whether a Portable Network Graphics (PNG) format image is interlaced during encoding.</summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.PngInterlaceOption.Default">
      <summary>The <see cref="T:System.Windows.Media.Imaging.PngBitmapEncoder" /> determines whether the image should be interlaced.</summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.PngInterlaceOption.On">
      <summary>The resulting bitmap image is interlaced.</summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.PngInterlaceOption.Off">
      <summary>The resulting bitmap image is not interlaced.</summary>
    </member>
    <member name="T:System.Windows.Media.Imaging.RenderTargetBitmap">
      <summary>Converts a <see cref="T:System.Windows.Media.Visual" /> object into a bitmap. </summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.RenderTargetBitmap.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Windows.Media.PixelFormat)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.RenderTargetBitmap" /> class that has the specified parameters.  </summary>
      <param name="pixelWidth">The width of the bitmap.</param>
      <param name="pixelHeight">The height of the bitmap.</param>
      <param name="dpiX">The horizontal DPI of the bitmap.</param>
      <param name="dpiY">The vertical DPI of the bitmap.</param>
      <param name="pixelFormat">The format of the bitmap.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.RenderTargetBitmap.Clear">
      <summary>Clears the render target and sets all pixels to transparent black.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.RenderTargetBitmap.Render(System.Windows.Media.Visual)">
      <summary>Renders the <see cref="T:System.Windows.Media.Visual" /> object.</summary>
      <param name="visual">The <see cref="T:System.Windows.Media.Visual" /> object to be used as a bitmap.</param>
    </member>
    <member name="T:System.Windows.Media.Imaging.Rotation">
      <summary>Specifies the rotation to apply to a bitmap image. </summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.Rotation.Rotate0">
      <summary>The bitmap is not rotated. This is the default value.</summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.Rotation.Rotate90">
      <summary>Rotate the bitmap clockwise by 90 degrees.</summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.Rotation.Rotate180">
      <summary>Rotate the bitmap clockwise by 180 degrees.</summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.Rotation.Rotate270">
      <summary>Rotate the bitmap clockwise by 270 degrees.</summary>
    </member>
    <member name="T:System.Windows.Media.Imaging.TiffBitmapDecoder">
      <summary>Defines a decoder for Tagged Image File Format (TIFF) encoded images. </summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.TiffBitmapDecoder.#ctor(System.IO.Stream,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.TiffBitmapDecoder" /> class from the specified file stream, with the specified <paramref name="createOptions" /> and <paramref name="cacheOption" />.</summary>
      <param name="bitmapStream">The bitmap stream to decode.</param>
      <param name="createOptions">Initialization options for the bitmap image.</param>
      <param name="cacheOption">The caching method for the bitmap image.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bitmapStream" /> value is null.</exception>
      <exception cref="T:System.IO.FileFormatException">The <paramref name="bitmapStream" /> is not a Tagged Image File Format (TIFF) encoded image.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.TiffBitmapDecoder.#ctor(System.Uri,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.TiffBitmapDecoder" /> class from the specified <see cref="T:System.Uri" />, with the specified <paramref name="createOptions" /> and <paramref name="cacheOption" />.</summary>
      <param name="bitmapUri">The <see cref="T:System.Uri" /> that identifies the bitmap to decode.</param>
      <param name="createOptions">Initialization options for the bitmap image.</param>
      <param name="cacheOption">The caching method for the bitmap image.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bitmapUri" /> value is null.</exception>
      <exception cref="T:System.IO.FileFormatException">The <paramref name="bitmapUri" /> is not a Tagged Image File Format (TIFF) encoded image.</exception>
    </member>
    <member name="T:System.Windows.Media.Imaging.TiffBitmapEncoder">
      <summary>Defines an encoder that is used to encode Tagged Image File Format (TIFF) format images.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.TiffBitmapEncoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.TiffBitmapEncoder" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Imaging.TiffBitmapEncoder.Compression">
      <summary>Gets or sets a value that indicates the type of compression that is used by this Tagged Image File Format (TIFF) image.</summary>
      <returns>One of the <see cref="T:System.Windows.Media.Imaging.TiffCompressOption" /> values. The default is <see cref="F:System.Windows.Media.Imaging.TiffCompressOption.Default" />.</returns>
    </member>
    <member name="T:System.Windows.Media.Imaging.TiffCompressOption">
      <summary>Specifies the possible compression schemes for Tagged Image File Format (TIFF) bitmap images.</summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.TiffCompressOption.Default">
      <summary>The <see cref="T:System.Windows.Media.Imaging.TiffBitmapEncoder" /> encoder attempts to save the bitmap with the best possible compression schema. </summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.TiffCompressOption.None">
      <summary>The Tagged Image File Format (TIFF) image is not compressed.</summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.TiffCompressOption.Ccitt3">
      <summary>The CCITT3 compression schema is used.</summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.TiffCompressOption.Ccitt4">
      <summary>The CCITT4 compression schema is used.</summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.TiffCompressOption.Lzw">
      <summary>The LZW compression schema is used. </summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.TiffCompressOption.Rle">
      <summary>The RLE compression schema is used.</summary>
    </member>
    <member name="F:System.Windows.Media.Imaging.TiffCompressOption.Zip">
      <summary>Zip compression schema is used. </summary>
    </member>
    <member name="T:System.Windows.Media.Imaging.TransformedBitmap">
      <summary>Scales and rotates a <see cref="T:System.Windows.Media.Imaging.BitmapSource" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.TransformedBitmap.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.TransformedBitmap" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.TransformedBitmap.#ctor(System.Windows.Media.Imaging.BitmapSource,System.Windows.Media.Transform)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.TransformedBitmap" /> class that has the specified <see cref="P:System.Windows.Media.Imaging.TransformedBitmap.Source" /> and <see cref="P:System.Windows.Media.Imaging.TransformedBitmap.Transform" />. </summary>
      <param name="source">The <see cref="P:System.Windows.Media.Imaging.TransformedBitmap.Source" /> of the new <see cref="T:System.Windows.Media.Imaging.TransformedBitmap" /> instance.</param>
      <param name="newTransform">The <see cref="P:System.Windows.Media.Imaging.TransformedBitmap.Transform" /> of the new <see cref="T:System.Windows.Media.Imaging.TransformedBitmap" /> instance.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="source" /> parameter is null.</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="newTransform" /> parameter is null.-or-The transform is not an orthogonal transform.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.TransformedBitmap.BeginInit">
      <summary>Signals the start of the <see cref="T:System.Windows.Media.Imaging.TransformedBitmap" /> initialization.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Media.Imaging.TransformedBitmap" /> is currently being initialized. <see cref="M:System.Windows.Media.Imaging.TransformedBitmap.BeginInit" /> has already been called.-or-The <see cref="T:System.Windows.Media.Imaging.TransformedBitmap" /> has already been initialized.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.TransformedBitmap.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Imaging.TransformedBitmap" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.TransformedBitmap.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Imaging.TransformedBitmap" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.TransformedBitmap.EndInit">
      <summary>Signals the end of the <see cref="T:System.Windows.Media.Imaging.BitmapImage" /> initialization.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Media.Imaging.TransformedBitmap.Source" /> or <see cref="P:System.Windows.Media.Imaging.TransformedBitmap.Transform" /> properties are null.-or-The transform is not an orthogonal transform.-or-The <see cref="M:System.Windows.Media.Imaging.TransformedBitmap.EndInit" /> method is called without first calling <see cref="M:System.Windows.Media.Imaging.TransformedBitmap.BeginInit" />.</exception>
    </member>
    <member name="P:System.Windows.Media.Imaging.TransformedBitmap.Source">
      <summary>Gets or sets the source for the bitmap.  </summary>
      <returns>The source for the bitmap. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.TransformedBitmap.SourceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.TransformedBitmap.Source" /> dependency property.  </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.TransformedBitmap.Source" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.TransformedBitmap.Transform">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Transform" />, which specifies the scale or rotation of the bitmap.  </summary>
      <returns>The <see cref="T:System.Windows.Media.Transform" />, which specifies the scale or rotation of the bitmap. The default value is <see cref="P:System.Windows.Media.Transform.Identity" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Imaging.TransformedBitmap.TransformProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Imaging.TransformedBitmap.Transform" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Imaging.TransformedBitmap.Transform" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Imaging.WmpBitmapDecoder">
      <summary>Defines a decoder for Microsoft Windows Media Photo encoded images. </summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.WmpBitmapDecoder.#ctor(System.IO.Stream,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
      <summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.WmpBitmapDecoder" /> from the specified file stream with the specified <paramref name="createOptions" /> and <paramref name="cacheOption" />.</summary>
      <param name="bitmapStream">The bitmap stream to decode.</param>
      <param name="createOptions">Initialization options for the bitmap image.</param>
      <param name="cacheOption">The caching method for the bitmap image.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bitmapStream" /> value is null.</exception>
      <exception cref="T:System.IO.FileFormatException">The <paramref name="bitmapStream" /> is not a Windows Media Photo encoded image.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.WmpBitmapDecoder.#ctor(System.Uri,System.Windows.Media.Imaging.BitmapCreateOptions,System.Windows.Media.Imaging.BitmapCacheOption)">
      <summary>Initializes a new instance of <see cref="T:System.Windows.Media.Imaging.WmpBitmapDecoder" /> from the specified <see cref="T:System.Uri" /> with the specified <paramref name="createOptions" /> and <paramref name="cacheOption" />.</summary>
      <param name="bitmapUri">The <see cref="T:System.Uri" /> that identifies the bitmap to decode.</param>
      <param name="createOptions">Initialization options for the bitmap image.</param>
      <param name="cacheOption">The caching method for the bitmap image.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="bitmapUri" /> value is null.</exception>
      <exception cref="T:System.IO.FileFormatException">The <paramref name="bitmapUri" /> is not a Windows Media Photo encoded image.</exception>
    </member>
    <member name="T:System.Windows.Media.Imaging.WmpBitmapEncoder">
      <summary>Defines an encoder that is used to encode Microsoft Windows Media Photo images.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.WmpBitmapEncoder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.WmpBitmapEncoder" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Imaging.WmpBitmapEncoder.AlphaDataDiscardLevel">
      <summary>Gets or sets the level of alpha frequency data to discard during a compressed domain transcode.</summary>
      <returns>The level of alpha data to discard when encoding the image. The value range is 0 (no data discarded) to 4 (alpha channel completely discarded). The default is 1.ValueDescription0No image frequency data is discarded.1FlexBits are discarded. The image quality of the image is reduced without changing the effective resolution of the image.2HighPass frequency data band is discarded. The image's effective resolution is reduced by a factor of 4 in both dimensions.3HighPass and LowPass frequency data bands are discarded. The image's effective resolution is reduced by a factor of 16 in both dimensions.4The alpha channel is completely discarded. The pixel format is changed to reflect the removal of the alpha channel.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value given is not between 0 and 4.</exception>
    </member>
    <member name="P:System.Windows.Media.Imaging.WmpBitmapEncoder.AlphaQualityLevel">
      <summary>Gets or sets the compression quality for a planar alpha channel.</summary>
      <returns>The compression quality for a planar alpha channel image. A value of 1 is considered lossless, and increasing values result in higher compression ratios and lower image quality. The value range is 1 to 255. The default is 1.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.WmpBitmapEncoder.CompressedDomainTranscode">
      <summary>Gets or sets a value that indicates whether compressed domain operations can be used. Compressed domain operations are transformation operations that are done without decoding the image data.</summary>
      <returns>true if compressed domain operations can be used; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.WmpBitmapEncoder.FlipHorizontal">
      <summary>Gets or sets a value indicating whether to flip the image horizontally.</summary>
      <returns>true if the image is to be flipped horizontally; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.WmpBitmapEncoder.FlipVertical">
      <summary>Gets or sets a value that indicates whether to flip the image vertically.</summary>
      <returns>true if the image is to be flipped vertically; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.WmpBitmapEncoder.FrequencyOrder">
      <summary>Gets or sets a value that indicates whether to encoding in frequency order.</summary>
      <returns>true to encode the image in frequency order; false to encode the image by its spatial orientation. The default is true.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.WmpBitmapEncoder.HorizontalTileSlices">
      <summary>Gets or sets the number of horizontal divisions to use during compression encoding. A single division creates two horizontal regions.</summary>
      <returns>The number of horizontal divisions to use during compression encoding. The value range is 0 to 4095. The default is 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.WmpBitmapEncoder.IgnoreOverlap">
      <summary>Gets or sets a value that indicates whether to ignore region overlap pixels in subregion compressed domain encoding. This feature is not currently implemented.</summary>
      <returns>true if overlap is ignored; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.WmpBitmapEncoder.ImageDataDiscardLevel">
      <summary>Gets or sets the level of image data to discard during a compressed domain transcode.</summary>
      <returns>The level of image data to discard during a compressed domain encoding of the image. The value range is 0 (no data discarded) to 3 (HighPass and LowPass discarded). The default is 1.ValueDescription0No image frequency data is discarded.1FlexBits are discarded. The image quality of the image is reduced without changing the effective resolution of the image.2HighPass frequency data band is discarded. The image's effective resolution is reduced by a factor of 4 in both dimensions.3HighPass and LowPass frequency data bands are discarded. The image's effective resolution is reduced by a factor of 16 in both dimensions.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value given is not between 0 and 3.</exception>
    </member>
    <member name="P:System.Windows.Media.Imaging.WmpBitmapEncoder.ImageQualityLevel">
      <summary>Gets or sets the image quality level.</summary>
      <returns>The image quality level. The range is 0 to 1.0 (lossless image quality). The default is 0.9.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.WmpBitmapEncoder.InterleavedAlpha">
      <summary>Gets or sets a value that indicates whether to encode the alpha channel data as an additional interleaved channel.</summary>
      <returns>true if the image is encoded with an additional interleaved alpha channel; false if planar alpha channel is used. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.WmpBitmapEncoder.Lossless">
      <summary>Gets or sets a value that indicates whether to encode using lossless compression.</summary>
      <returns>true to use lossless compression; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.WmpBitmapEncoder.OverlapLevel">
      <summary>Gets or sets the overlap processing level.</summary>
      <returns>The overlap processing level. The default is 1.ValueDescription0No overlap processing is enabled.1One level of overlap processing is enabled. Encoded values of 4x4 blocks are modified based on the values of neighboring blocks.2Two levels of overlap processing are enabled. In addition to the first level of processing, encoded values of 16x16 macro blocks are modified based on the values of neighboring macro blocks.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.WmpBitmapEncoder.QualityLevel">
      <summary>Gets or sets the compression quality for the main image.</summary>
      <returns>The compression quality for the main image. A value of 1 is considered lossless, and higher values indicate a high compression ratio and lower image quality. The range is 1 to 255. The default is 1.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.WmpBitmapEncoder.Rotation">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Imaging.Rotation" /> of the image.</summary>
      <returns>The rotation of the image.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.WmpBitmapEncoder.SubsamplingLevel">
      <summary>Gets or sets the sub-sampling level for RGB image encoding.</summary>
      <returns>The sub-sampling level for RGB image encoding. The range is 0 to 3. The default is 3.ValueDescription04:0:0 encoding. Chroma content is discarded; luminance is preserved.14:2:0 encoding. Chroma resolution is reduced by 1/4 of luminance resolution.24:2:2 encoding. Chroma resolution is reduced to 1/2 of luminance resolution.34:4:4 encoding. Chroma resolution is preserved.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value given is not between 0 and 3.</exception>
    </member>
    <member name="P:System.Windows.Media.Imaging.WmpBitmapEncoder.UseCodecOptions">
      <summary>Gets or sets a value that indicates codec options are to be used.</summary>
      <returns>true if codec options are to be used; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.WmpBitmapEncoder.VerticalTileSlices">
      <summary>Gets or sets the number of vertical divisions to use during compression encoding. A single division creates two vertical regions.</summary>
      <returns>The number of vertical divisions to use during compression encoding. The value range is 0 to 4095. The default is 0.</returns>
    </member>
    <member name="T:System.Windows.Media.Imaging.WriteableBitmap">
      <summary>Provides a <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> that can be written to and updated.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.WriteableBitmap.#ctor(System.Int32,System.Int32,System.Double,System.Double,System.Windows.Media.PixelFormat,System.Windows.Media.Imaging.BitmapPalette)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.WriteableBitmap" /> class with the specified parameters.</summary>
      <param name="pixelWidth">The desired width of the bitmap.</param>
      <param name="pixelHeight">The desired height of the bitmap.</param>
      <param name="dpiX">The horizontal dots per inch (dpi) of the bitmap.</param>
      <param name="dpiY">The vertical dots per inch (dpi) of the bitmap.</param>
      <param name="pixelFormat">The <see cref="T:System.Windows.Media.PixelFormat" /> of the bitmap.</param>
      <param name="palette">The <see cref="T:System.Windows.Media.Imaging.BitmapPalette" /> of the bitmap.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.WriteableBitmap.#ctor(System.Windows.Media.Imaging.BitmapSource)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Imaging.WriteableBitmap" /> class using the given <see cref="T:System.Windows.Media.Imaging.BitmapSource" />.</summary>
      <param name="source">The <see cref="T:System.Windows.Media.Imaging.BitmapSource" /> to use for initialization.</param>
    </member>
    <member name="M:System.Windows.Media.Imaging.WriteableBitmap.AddDirtyRect(System.Windows.Int32Rect)">
      <summary>Specifies the area of the bitmap that changed. </summary>
      <param name="dirtyRect">An <see cref="T:System.Windows.Int32Rect" /> representing the area that changed. Dimensions are in pixels. </param>
      <exception cref="T:System.InvalidOperationException">The bitmap has not been locked by a call to the <see cref="M:System.Windows.Media.Imaging.WriteableBitmap.Lock" /> or <see cref="M:System.Windows.Media.Imaging.WriteableBitmap.TryLock(System.Windows.Duration)" /> methods. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="dirtyRect" /> falls outside the bounds of the <see cref="T:System.Windows.Media.Imaging.WriteableBitmap" />. </exception>
    </member>
    <member name="P:System.Windows.Media.Imaging.WriteableBitmap.BackBuffer">
      <summary>Gets a pointer to the back buffer. </summary>
      <returns>An <see cref="T:System.IntPtr" /> that points to the base address of the back buffer. </returns>
    </member>
    <member name="P:System.Windows.Media.Imaging.WriteableBitmap.BackBufferStride">
      <summary>Gets a value indicating the number of bytes in a single row of pixel data. </summary>
      <returns>An integer indicating the number of bytes in a single row of pixel data. </returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.WriteableBitmap.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Imaging.WriteableBitmap" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.WriteableBitmap.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.ByteAnimationUsingKeyFrames" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Imaging.WriteableBitmap.Lock">
      <summary>Reserves the back buffer for updates.</summary>
    </member>
    <member name="M:System.Windows.Media.Imaging.WriteableBitmap.TryLock(System.Windows.Duration)">
      <summary>Attempts to lock the bitmap, waiting for no longer than the specified length of time. </summary>
      <returns>true if the lock was acquired; otherwise, false. </returns>
      <param name="timeout">A <see cref="T:System.Windows.Duration" /> that represents the length of time to wait. A value of 0 returns immediately. A value of <see cref="P:System.Windows.Duration.Forever" /> blocks indefinitely. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is set to <see cref="P:System.Windows.Duration.Automatic" />. </exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.WriteableBitmap.Unlock">
      <summary>Releases the back buffer to make it available for display. </summary>
      <exception cref="T:System.InvalidOperationException">The bitmap has not been locked by a call to the <see cref="M:System.Windows.Media.Imaging.WriteableBitmap.Lock" /> or <see cref="M:System.Windows.Media.Imaging.WriteableBitmap.TryLock(System.Windows.Duration)" /> methods. </exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.WriteableBitmap.WritePixels(System.Windows.Int32Rect,System.Array,System.Int32,System.Int32)">
      <summary>Updates the pixels in the specified region of the bitmap.</summary>
      <param name="sourceRect">The rectangle of the <see cref="T:System.Windows.Media.Imaging.WriteableBitmap" /> to update.</param>
      <param name="pixels">The pixel array used to update the bitmap.</param>
      <param name="stride">The stride of the update region in <paramref name="pixels" />.</param>
      <param name="offset">The input buffer offset.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">One or more of the following conditions is true.<paramref name="sourceRect" /> falls outside the bounds of the <see cref="T:System.Windows.Media.Imaging.WriteableBitmap" />.  <paramref name="stride" /> &lt; 1 <paramref name="offset" /> &lt; 0 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pixels" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pixels" /> has a rank other than 1 or 2, or its length is less than or equal to 0.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.WriteableBitmap.WritePixels(System.Windows.Int32Rect,System.Array,System.Int32,System.Int32,System.Int32)">
      <summary>Updates the pixels in the specified region of the bitmap.</summary>
      <param name="sourceRect">The rectangle in <paramref name="sourceBuffer" /> to copy.</param>
      <param name="sourceBuffer">The input buffer used to update the bitmap.</param>
      <param name="sourceBufferStride">The stride of the input buffer, in bytes.</param>
      <param name="destinationX">The destination x-coordinate of the left-most pixel in the back buffer.</param>
      <param name="destinationY">The destination y-coordinate of the top-most pixel in the back buffer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">One or more of the following conditions is true.<paramref name="sourceRect" /> falls outside the bounds of the <see cref="T:System.Windows.Media.Imaging.WriteableBitmap" />.<paramref name="destinationX" /> or <paramref name="destinationY" /> is outside the bounds of the <see cref="T:System.Windows.Media.Imaging.WriteableBitmap" />.  <paramref name="sourceBufferStride" /> &lt; 1 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceBuffer" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sourceBuffer" /> has a rank other than 1 or 2, or its length is less than or equal to 0.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.WriteableBitmap.WritePixels(System.Windows.Int32Rect,System.IntPtr,System.Int32,System.Int32)">
      <summary>Updates the pixels in the specified region of the bitmap.</summary>
      <param name="sourceRect">The rectangle of the <see cref="T:System.Windows.Media.Imaging.WriteableBitmap" /> to update.</param>
      <param name="buffer">The input buffer used to update the bitmap.</param>
      <param name="bufferSize">The size of the input buffer.</param>
      <param name="stride">The stride of the update region in <paramref name="buffer" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">One or more of the following conditions is true.<paramref name="sourceRect" /> falls outside the bounds of the <see cref="T:System.Windows.Media.Imaging.WriteableBitmap" />.<paramref name="bufferSize" /> &lt; 1 <paramref name="stride" /> &lt; 1 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Media.Imaging.WriteableBitmap.WritePixels(System.Windows.Int32Rect,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Updates the pixels in the specified region of the bitmap.</summary>
      <param name="sourceRect">The rectangle in <paramref name="sourceBuffer" /> to copy.</param>
      <param name="sourceBuffer">The input buffer used to update the bitmap.</param>
      <param name="sourceBufferSize">The size of the input buffer.</param>
      <param name="sourceBufferStride">The stride of the input buffer, in bytes.</param>
      <param name="destinationX">The destination x-coordinate of the left-most pixel in the back buffer.</param>
      <param name="destinationY">The destination y-coordinate of the top-most pixel in the back buffer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">One or more of the following conditions is true.<paramref name="sourceRect" /> falls outside the bounds of the <see cref="T:System.Windows.Media.Imaging.WriteableBitmap" />. <paramref name="destinationX" /> or <paramref name="destinationY" /> is outside the bounds of the <see cref="T:System.Windows.Media.Imaging.WriteableBitmap" />.<paramref name="sourceBufferSize" /> &lt; 1 <paramref name="sourceBufferStride" /> &lt; 1 </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sourceBuffer" /> is null.</exception>
    </member>
    <member name="T:System.Windows.Media.Media3D.AffineTransform3D">
      <summary> Base class from which all concrete affine 3-D transforms—translations, rotations, and scale transformations—derive.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.AffineTransform3D.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.AffineTransform3D" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.AffineTransform3D.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.AffineTransform3D" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.AffineTransform3D.IsAffine">
      <summary>Gets a value that indicates whether the transformation is affine. </summary>
      <returns>True if the transformation is affine, false otherwise.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.AmbientLight">
      <summary> Light object that applies light to objects uniformly, regardless of their shape. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.AmbientLight.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.AmbientLight" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.AmbientLight.#ctor(System.Windows.Media.Color)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.AmbientLight" /> class with the specified color.</summary>
      <param name="ambientColor">Color of the new light.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.AmbientLight.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.AmbientLight" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.AmbientLight.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.AmbientLight" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.AxisAngleRotation3D">
      <summary>Represents a 3-D rotation of a specified angle about a specified axis.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.AxisAngleRotation3D.#ctor">
      <summary>Creates an instance of a 3-D rotation.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.AxisAngleRotation3D.#ctor(System.Windows.Media.Media3D.Vector3D,System.Double)">
      <summary>Creates an instance of a 3-D rotation using the specified axis and angle.</summary>
      <param name="axis">
        <see cref="T:System.Windows.Media.Media3D.Vector3D" /> that specifies the axis around which to rotate.</param>
      <param name="angle">Double that specifies the angle of rotation, in degrees.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.AxisAngleRotation3D.Angle">
      <summary>Gets or sets the angle of a 3-D rotation, in degrees. </summary>
      <returns>Double that specifies the angle of a 3-D rotation, in degrees.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.AxisAngleRotation3D.AngleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.AxisAngleRotation3D.Angle" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.AxisAngleRotation3D.Angle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.AxisAngleRotation3D.Axis">
      <summary>Gets or sets the axis of a 3-D rotation. </summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Vector3D" /> that specifies the axis of rotation.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.AxisAngleRotation3D.AxisProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.AxisAngleRotation3D.Axis" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.AxisAngleRotation3D.Axis" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.AxisAngleRotation3D.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.AxisAngleRotation3D" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.AxisAngleRotation3D.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.AxisAngleRotation3D" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.Camera">
      <summary>Represents an imaginary viewing position and direction in 3-D coordinate space that describes how a 3-D model is projected onto a 2-D visual. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Camera.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Camera" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Camera.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Camera" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Camera.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.  </summary>
      <param name="format"></param>
      <param name="provider"></param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Camera.ToString">
      <summary>Creates a string representation of this object based on the current culture settings. </summary>
      <returns>String representation of this object.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Camera.ToString(System.IFormatProvider)">
      <summary>Creates a string representation of the Camera. </summary>
      <returns>String representation of this object.</returns>
      <param name="provider">Culture-specific formatting information.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Camera.Transform">
      <summary>Gets or sets the Transform3D applied to the camera.  </summary>
      <returns>Transform3D applied to the camera.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.Camera.TransformProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.Camera.Transform" /> dependency property.</summary>
    </member>
    <member name="T:System.Windows.Media.Media3D.ContainerUIElement3D">
      <summary>Represents a container for <see cref="T:System.Windows.Media.Media3D.Visual3D" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.ContainerUIElement3D.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.ContainerUIElement3D" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.ContainerUIElement3D.Children">
      <summary>Gets a <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" /> of child elements of this <see cref="T:System.Windows.Media.Media3D.ContainerUIElement3D" /> object.</summary>
      <returns>A <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" /> of child elements. The default is an empty collection.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.DiffuseMaterial">
      <summary> Allows the application of a 2-D brush, like a <see cref="T:System.Windows.Media.SolidColorBrush" /> or <see cref="T:System.Windows.Media.TileBrush" />, to a diffusely-lit 3-D model. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.DiffuseMaterial.#ctor">
      <summary> Constructs a DiffuseMaterial. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.DiffuseMaterial.#ctor(System.Windows.Media.Brush)">
      <summary>Constructs a DiffuseMaterial with the specified Brush property. </summary>
      <param name="brush">The new material's brush.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.DiffuseMaterial.AmbientColor">
      <summary>Gets or sets a color that represents the ambient color emitted by the <see cref="T:System.Windows.Media.Media3D.Material" />.  </summary>
      <returns>The color of the ambient light emitted by the 3D object. The default value is #FFFFFF.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.DiffuseMaterial.AmbientColorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.DiffuseMaterial.AmbientColor" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.DiffuseMaterial.AmbientColor" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.DiffuseMaterial.Brush">
      <summary>
        <see cref="T:System.Windows.Media.Brush" /> to be applied as a <see cref="T:System.Windows.Media.Media3D.Material" /> to a 3-D model. </summary>
      <returns>
        <see cref="T:System.Windows.Media.Brush" /> to apply.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.DiffuseMaterial.BrushProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.DiffuseMaterial.Brush" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.DiffuseMaterial.Brush" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.DiffuseMaterial.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.DiffuseMaterial" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.DiffuseMaterial.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.DiffuseMaterial" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.DiffuseMaterial.Color">
      <summary>Gets or sets the color allowed to emit from the <see cref="T:System.Windows.Media.Media3D.Material" />.  </summary>
      <returns>The color allowed to emit from the <see cref="T:System.Windows.Media.Media3D.Material" />. The default value is #FFFFFF. Since all colors make up white, all colors are visible by default.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.DiffuseMaterial.ColorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.DiffuseMaterial.Color" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.DiffuseMaterial.Color" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.DirectionalLight">
      <summary>Light object that projects its effect along a direction specified by a <see cref="T:System.Windows.Media.Media3D.Vector3D" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.DirectionalLight.#ctor">
      <summary>Creates an instance of a light that projects its effect in a specified direction. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.DirectionalLight.#ctor(System.Windows.Media.Color,System.Windows.Media.Media3D.Vector3D)">
      <summary>Creates an instance of a light that projects its effect along a specified Vector3D with a specified color.</summary>
      <param name="diffuseColor">Diffuse color of the new light.</param>
      <param name="direction">Direction of the new light.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.DirectionalLight.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.DirectionalLight" /> object, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.DirectionalLight.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.DirectionalLight" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.DirectionalLight.Direction">
      <summary> Represents the vector along which the light's effect will be seen on models in a 3-D scene.   </summary>
      <returns>Vector3D along which the light projects, and which must have a non-zero magnitude. The default value is (0,0,-1).</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.DirectionalLight.DirectionProperty">
      <summary> Identifies the <see cref="P:System.Windows.Media.Media3D.DirectionalLight.Direction" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.DirectionalLight.Direction" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.EmissiveMaterial">
      <summary>Applies a <see cref="T:System.Windows.Media.Brush" /> to a 3-D model so that it participates in lighting calculations as if the <see cref="T:System.Windows.Media.Media3D.Material" /> were emitting light equal to the color of the <see cref="T:System.Windows.Media.Brush" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.EmissiveMaterial.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.EmissiveMaterial" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.EmissiveMaterial.#ctor(System.Windows.Media.Brush)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.EmissiveMaterial" /> class with the specified brush. </summary>
      <param name="brush">The new material's brush.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.EmissiveMaterial.Brush">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> applied by the <see cref="T:System.Windows.Media.Media3D.EmissiveMaterial" />. </summary>
      <returns>The brush applied by the <see cref="T:System.Windows.Media.Media3D.EmissiveMaterial" />. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.EmissiveMaterial.BrushProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.EmissiveMaterial.Brush" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.EmissiveMaterial.Brush" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.EmissiveMaterial.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.EmissiveMaterial" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.EmissiveMaterial.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.EmissiveMaterial" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.EmissiveMaterial.Color">
      <summary>Gets or sets the color of the light that appears to be emitted from the <see cref="T:System.Windows.Media.Media3D.EmissiveMaterial" />. </summary>
      <returns>The color of the light.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.EmissiveMaterial.ColorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.EmissiveMaterial.Color" /> dependency property.</summary>
    </member>
    <member name="T:System.Windows.Media.Media3D.GeneralTransform2DTo3D">
      <summary>Provides 2-D to 3-D transformation support.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform2DTo3D.CloneCore(System.Windows.Freezable)">
      <summary>Makes the instance a clone (deep copy) of the specified <see cref="T:System.Windows.Freezable" /> using base (non-animated) property values.</summary>
      <param name="sourceFreezable">The object to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform2DTo3D.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes the instance a modifiable clone (deep copy) of the specified <see cref="T:System.Windows.Freezable" /> using current property values.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Freezable" /> to be cloned.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform2DTo3D.CreateInstanceCore">
      <summary>Creates a new instance of the <see cref="T:System.Windows.Freezable" /> derived class.</summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform2DTo3D.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes the instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" /> using base (non-animated) property values.</summary>
      <param name="sourceFreezable">The instance to copy.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform2DTo3D.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes the current instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" />. If the object has animated dependency properties, their current animated values are copied.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Freezable" /> to copy and freeze.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform2DTo3D.Transform(System.Windows.Point)">
      <summary>Transforms the specified point and returns the result.</summary>
      <returns>The result of transforming <paramref name="point" />.</returns>
      <param name="point">The point to transform.</param>
      <exception cref="T:System.InvalidOperationException">The transform did not succeed.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform2DTo3D.TryTransform(System.Windows.Point,System.Windows.Media.Media3D.Point3D@)">
      <summary>Attempts to transform the specified point and returns a value that indicates whether the transformation was successful.</summary>
      <returns>true if <paramref name="inPoint" /> was transformed; otherwise, false.</returns>
      <param name="inPoint">The point to transform.</param>
      <param name="result">The result of transforming <paramref name="inPoint" />.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.GeneralTransform3D">
      <summary>Provides generalized transformation support for 3-D objects. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3D.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.GeneralTransform3D" />, making deep copies of this object's values. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3D.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.GeneralTransform3D" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.GeneralTransform3D.Inverse">
      <summary>Gets the inverse transformation of this <see cref="T:System.Windows.Media.Media3D.GeneralTransform3D" />, if possible.</summary>
      <returns>An inverse of this instance, if possible; otherwise, null.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3D.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>The value of the current instance in the specified format.</returns>
      <param name="format">The format to use.-or- A null reference (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
      <param name="provider">The provider to use to format the value.-or- A null reference (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3D.ToString">
      <summary>Creates a string representation of this instance.</summary>
      <returns>A string representation of this instance.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3D.ToString(System.IFormatProvider)">
      <summary>Creates a string representation of this instance, based on the passed <see cref="T:System.IFormatProvider" /> parameter.</summary>
      <returns>The value of the current instance in the specified format.</returns>
      <param name="provider">
        <see cref="T:System.IFormatProvider" /> instance used to process this instance.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3D.Transform(System.Windows.Media.Media3D.Point3D)">
      <summary>Transforms the specified 3-D point and returns the result.</summary>
      <returns>The result of transforming <paramref name="point" />.</returns>
      <param name="point">The 3-D point to transform.</param>
      <exception cref="T:System.InvalidOperationException">The transform did not succeed.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3D.TransformBounds(System.Windows.Media.Media3D.Rect3D)">
      <summary>When overridden in a derived class, transforms the specified 3-D bounding box and returns an axis-aligned 3-D bounding box that is exactly large enough to contain it.</summary>
      <returns>The smallest axis-aligned 3-D bounding box possible that contains the transformed <paramref name="rect" />.</returns>
      <param name="rect">The 3-D bounding box to transform.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3D.TryTransform(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D@)">
      <summary>When overridden in a derived class, attempts to transform the specified 3-D point and returns a value that indicates whether the transformation was successful.</summary>
      <returns>true if <paramref name="inPoint" /> was transformed; otherwise, false.</returns>
      <param name="inPoint">The 3-D point to transform.</param>
      <param name="result">The result of transforming <paramref name="inPoint" />.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.GeneralTransform3DCollection">
      <summary>Represents an ordered collection of <see cref="T:System.Windows.Media.Media3D.GeneralTransform3D" /> objects. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DCollection" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.GeneralTransform3D})">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DCollection" /> class, using the specified initial object.</summary>
      <param name="collection">Initial object in the new collection class.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DCollection" /> class with the specified capacity, or the number of <see cref="T:System.Windows.Media.Media3D.GeneralTransform3D" /> objects the collection is initially capable of storing.</summary>
      <param name="capacity">The number of <see cref="T:System.Windows.Media.Media3D.GeneralTransform3D" /> objects that the collection is initially capable of storing.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.Add(System.Windows.Media.Media3D.GeneralTransform3D)">
      <summary>Adds a <see cref="T:System.Windows.Media.Media3D.GeneralTransform3D" /> object to the end of the collection.</summary>
      <param name="value">The <see cref="T:System.Windows.Media.Media3D.GeneralTransform3D" /> to add to the end of the collection.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">The collection is read-only.- or -The collection has a fixed size.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.Clear">
      <summary>Removes all <see cref="T:System.Windows.Media.Media3D.GeneralTransform3D" /> objects from the collection.</summary>
      <exception cref="T:System.NotSupportedException">The collection is read-only.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.Clone">
      <summary>Creates a modifiable clone of this collection, making deep copies of this object's values. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.CloneCurrentValue">
      <summary>Creates a modifiable clone of this collection object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.Contains(System.Windows.Media.Media3D.GeneralTransform3D)">
      <summary>Indicates whether the collection contains the specified <see cref="T:System.Windows.Media.Media3D.GeneralTransform3D" /> object.</summary>
      <returns>true if the collection contains <paramref name="value" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Windows.Media.Media3D.GeneralTransform3D" /> object to locate in the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.CopyTo(System.Windows.Media.Media3D.GeneralTransform3D[],System.Int32)">
      <summary>Copies the <see cref="T:System.Windows.Media.Media3D.GeneralTransform3D" /> objects in the collection into an array of <see cref="T:System.Windows.Media.Media3D.GeneralTransform3D" /> objects, starting at the specified index position. </summary>
      <param name="array">The destination array.</param>
      <param name="index">The zero-based index position where copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional. -or-The number of items in the source collection is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Windows.Media.Media3D.GeneralTransform3DCollection.Count">
      <summary>Gets the number of objects in this collection.</summary>
      <returns>The number of items in the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the collection.</summary>
      <returns>An enumerator that can iterate the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.IndexOf(System.Windows.Media.Media3D.GeneralTransform3D)">
      <summary>Searches for the specified <see cref="T:System.Windows.Media.Media3D.GeneralTransform3D" /> object within the collection. </summary>
      <returns>The zero-based index position of <paramref name="value" />, or –1 if the object is not found in the collection.</returns>
      <param name="value">The object to locate.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.Insert(System.Int32,System.Windows.Media.Media3D.GeneralTransform3D)">
      <summary>Inserts a <see cref="T:System.Windows.Media.Media3D.GeneralTransform3D" /> object into the specified index position within the collection.</summary>
      <param name="index">The zero-based index position to insert the object.</param>
      <param name="value">The object to insert.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the collection.</exception>
      <exception cref="T:System.NotSupportedException">The collection is read-only.- or -The collection has a fixed size.</exception>
    </member>
    <member name="P:System.Windows.Media.Media3D.GeneralTransform3DCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Media3D.GeneralTransform3D" /> object at the specified index position. </summary>
      <returns>The <see cref="T:System.Windows.Media.Media3D.GeneralTransform3D" /> object at the <paramref name="index" /> position.</returns>
      <param name="index">The zero-based index position of the object to get or set.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the collection.</exception>
      <exception cref="T:System.NotSupportedException">The collection is read-only.- or -The collection has a fixed size.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.Remove(System.Windows.Media.Media3D.GeneralTransform3D)">
      <summary>Deletes a <see cref="T:System.Windows.Media.Media3D.GeneralTransform3D" /> object from the collection.</summary>
      <returns>true if <paramref name="value" /> was successfully deleted; otherwise, false.</returns>
      <param name="value">The object to remove.</param>
      <exception cref="T:System.NotSupportedException">The collection is read-only.- or -The collection has a fixed size.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.RemoveAt(System.Int32)">
      <summary>Deletes a <see cref="T:System.Windows.Media.Media3D.GeneralTransform3D" /> object from the <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DCollection" />.</summary>
      <param name="index">The zero-based index position to remove the object.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.GeneralTransform3DCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.</summary>
      <returns>true if the <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">A zero-based <see cref="T:System.Array" /> that receives the copied items from the <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DCollection" />.</param>
      <param name="index">The first position in the specified <see cref="T:System.Array" /> to receive the copied contents.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.GeneralTransform3DCollection.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>true if access to the <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DCollection" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.GeneralTransform3DCollection.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.System#Collections#IList#Add(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.System#Collections#IList#Contains(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DCollection" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
      <param name="index">The zero-based index at which to insert the <see cref="T:System.Object" />.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DCollection" />.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.GeneralTransform3DCollection.System#Collections#IList#IsFixedSize">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
      <returns>true if the <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DCollection" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.GeneralTransform3DCollection.System#Collections#IList#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsReadOnly" />.</summary>
      <returns>true if the <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.GeneralTransform3DCollection.System#Collections#IList#Item(System.Int32)">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.System#Collections#IList#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DCollection" />.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.GeneralTransform3DCollection.Enumerator">
      <summary>Enumerates <see cref="T:System.Windows.Media.Media3D.GeneralTransform3D" /> items in a <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DCollection" />.</summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.GeneralTransform3DCollection.Enumerator.Current">
      <summary>Gets the current element in the collection.</summary>
      <returns>The current element in the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element in the collection.</summary>
      <returns>true if the enumerator successfully advances to the next element; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.Enumerator.Reset">
      <summary>Resets the enumerator to its initial position, which is before the first element in the collection. </summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.GeneralTransform3DCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>For a description of this member, see <see cref="P:System.Collections.IEnumerator.Current" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DCollection.Enumerator.System#IDisposable#Dispose">
      <summary>For a description of this member, see <see cref="M:System.IDisposable.Dispose" />.</summary>
    </member>
    <member name="T:System.Windows.Media.Media3D.GeneralTransform3DGroup">
      <summary>Represents a <see cref="T:System.Windows.Media.Media3D.GeneralTransform3D" /> that is a composite of the transforms in its <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DGroup" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.GeneralTransform3DGroup.Children">
      <summary>Gets or sets the collection of <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DGroup" /> objects that form this <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DGroup" />.  </summary>
      <returns>The collection of <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DGroup" /> objects that form this <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DGroup" />. The default is an empty collection.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.GeneralTransform3DGroup.ChildrenProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.GeneralTransform3DGroup.Children" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.GeneralTransform3DGroup.Children" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DGroup.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DGroup" />, making deep copies of this object's values. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DGroup.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DGroup" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.GeneralTransform3DGroup.Inverse">
      <summary>Gets the inverse transform of this <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DGroup" />, if it has an inverse.</summary>
      <returns>The inverse transform of this <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DGroup" />, if it has an inverse; otherwise, null.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DGroup.TransformBounds(System.Windows.Media.Media3D.Rect3D)">
      <summary>Transforms the specified 3-D bounding box to the smallest axis-aligned 3-D bounding box possible that contains all the points in the original bounding box.</summary>
      <returns>The transformed bounding box. </returns>
      <param name="rect">The 3-D bounding box to transform.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DGroup.TryTransform(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D@)">
      <summary>Attempts to transform the specified 3-D point.</summary>
      <returns>true if <paramref name="inPoint" /> was transformed; otherwise, false.</returns>
      <param name="inPoint">The 3-D point to transform.</param>
      <param name="result">The result of transforming <paramref name="inPoint" />.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.GeneralTransform3DTo2D">
      <summary>Provides 3-D to 2-D transformation support.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DTo2D.CloneCore(System.Windows.Freezable)">
      <summary>Makes the instance a clone (deep copy) of the specified <see cref="T:System.Windows.Freezable" /> using base (non-animated) property values.</summary>
      <param name="sourceFreezable">The object to clone.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DTo2D.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>Makes the instance a modifiable clone (deep copy) of the specified <see cref="T:System.Windows.Freezable" /> using current property values.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Freezable" /> to be cloned.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DTo2D.CreateInstanceCore">
      <summary>Creates a new instance of the <see cref="T:System.Windows.Freezable" /> derived class.</summary>
      <returns>The new instance.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DTo2D.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes the instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" /> using base (non-animated) property values.</summary>
      <param name="sourceFreezable">The instance to copy.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DTo2D.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>Makes the current instance a frozen clone of the specified <see cref="T:System.Windows.Freezable" />. If the object has animated dependency properties, their current animated values are copied.</summary>
      <param name="sourceFreezable">The <see cref="T:System.Windows.Freezable" /> to copy and freeze.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DTo2D.Transform(System.Windows.Media.Media3D.Point3D)">
      <summary>Transforms the specified 3-D point and returns the result.</summary>
      <returns>The result of transforming <paramref name="point" />.</returns>
      <param name="point">The 3-D point to transform.</param>
      <exception cref="T:System.InvalidOperationException">The transform did not succeed.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DTo2D.TransformBounds(System.Windows.Media.Media3D.Rect3D)">
      <summary>Transforms the specified 3-D bounding box and returns an axis-aligned bounding box that contains all of the points in the original 3-D bounding box.</summary>
      <returns>An axis-aligned bounding box that contains all of the points in the specified 3-D bounding box.</returns>
      <param name="rect3D">The 3-D bounding box to transform.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeneralTransform3DTo2D.TryTransform(System.Windows.Media.Media3D.Point3D,System.Windows.Point@)">
      <summary>Transforms the specified 3-D point and returns the result.</summary>
      <returns>true if <paramref name="inPoint" /> was transformed; otherwise, false.</returns>
      <param name="inPoint">The 3-D point to transform.</param>
      <param name="result">The result of transforming <paramref name="inPoint" />.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.Geometry3D">
      <summary>Classes that derive from this abstract base class define 3D geometric shapes. The <see cref="T:System.Windows.Media.Media3D.Geometry3D" /> class of objects can be used for hit-testing and rendering 3D graphic data.</summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.Geometry3D.Bounds">
      <summary> Gets a <see cref="T:System.Windows.Media.Media3D.Rect3D" /> that specifies the axis-aligned bounding box of this <see cref="T:System.Windows.Media.Media3D.Geometry3D" />. </summary>
      <returns>Bounding <see cref="T:System.Windows.Media.Media3D.Rect3D" /> for the <see cref="T:System.Windows.Media.Media3D.Geometry3D" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Geometry3D.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Geometry3D" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Geometry3D.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Geometry3D" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.GeometryModel3D">
      <summary>Creates a 3-D model comprised of a <see cref="T:System.Windows.Media.Media3D.MeshGeometry3D" /> and a <see cref="T:System.Windows.Media.Media3D.Material" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeometryModel3D.#ctor">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Media3D.GeometryModel3D" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeometryModel3D.#ctor(System.Windows.Media.Media3D.Geometry3D,System.Windows.Media.Media3D.Material)">
      <summary>Creates a new instance of <see cref="T:System.Windows.Media.Media3D.GeometryModel3D" /> with the specified Geometry3D and Material. </summary>
      <param name="geometry">Geometry of the new mesh primitive.</param>
      <param name="material">Material of the new mesh primitive.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.GeometryModel3D.BackMaterial">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Media3D.Material" /> to be applied to the back of a <see cref="T:System.Windows.Media.Media3D.Model3D" />.  </summary>
      <returns>The <see cref="T:System.Windows.Media.Media3D.Material" /> applied to the back of the <see cref="T:System.Windows.Media.Media3D.Model3D" />. The default value is null.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.GeometryModel3D.BackMaterialProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.GeometryModel3D.BackMaterial" /> dependency property.</summary>
      <returns>The idenfitier for the <see cref="P:System.Windows.Media.Media3D.GeometryModel3D.BackMaterial" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeometryModel3D.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.GeometryModel3D" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.GeometryModel3D.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.GeometryModel3D" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.GeometryModel3D.Geometry">
      <summary> Gets or sets the geometry of a <see cref="T:System.Windows.Media.Media3D.GeometryModel3D" />.  </summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Geometry3D" /> that comprises the model.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.GeometryModel3D.GeometryProperty">
      <summary> Identifies the <see cref="P:System.Windows.Media.Media3D.GeometryModel3D.Geometry" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.GeometryModel3D.Geometry" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.GeometryModel3D.Material">
      <summary> Gets or sets the <see cref="T:System.Windows.Media.Media3D.Material" /> of a <see cref="T:System.Windows.Media.Media3D.GeometryModel3D" /></summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Material" /> applied to the <see cref="T:System.Windows.Media.Media3D.GeometryModel3D" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.GeometryModel3D.MaterialProperty">
      <summary> Identifies the <see cref="P:System.Windows.Media.Media3D.GeometryModel3D.Material" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.GeometryModel3D.Material" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.HitTestParameters3D">
      <summary>Abstract class that represents the parameters of a 3D hit test.</summary>
    </member>
    <member name="T:System.Windows.Media.Media3D.Light">
      <summary>
        <see cref="T:System.Windows.Media.Media3D.Model3D" /> object that represents lighting applied to a 3-D scene.  </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Light.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Light" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Light.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Light" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Light.Color">
      <summary> Gets or sets the color of the light. </summary>
      <returns>Color of the light.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.Light.ColorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.Light.Color" /> dependency property.</summary>
      <returns>The <see cref="P:System.Windows.Media.Media3D.Light.Color" /> dependency property identifier.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.Material">
      <summary>Abstract base class for materials.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Material.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Material" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Material.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Material" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Material.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. </summary>
      <param name="format"></param>
      <param name="provider"></param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Material.ToString">
      <summary> Creates a string representation of the object based on the current culture. </summary>
      <returns>String representation of the object.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Material.ToString(System.IFormatProvider)">
      <summary> Creates a string representation of the Material. </summary>
      <returns>String representation of the object.</returns>
      <param name="provider">Culture-specific formatting information.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.MaterialCollection">
      <summary>Collection of <see cref="T:System.Windows.Media.Media3D.Material" /> objects. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.MaterialCollection" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Material})">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.MaterialCollection" /> class using the specified collection.</summary>
      <param name="collection">Collection with which to instantiate the MaterialCollection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.MaterialCollection" /> class with the specified capacity.</summary>
      <param name="capacity">Integer that specifies the capacity of the MaterialCollection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.Add(System.Windows.Media.Media3D.Material)">
      <summary>Adds a <see cref="T:System.Windows.Media.Media3D.Material" /> to the end of the <see cref="T:System.Windows.Media.Media3D.MaterialCollection" />.</summary>
      <param name="value">Item to add to the end of this collection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.Clear">
      <summary>Removes all the items from this <see cref="T:System.Windows.Media.Media3D.MaterialCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.MaterialCollection" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.MaterialCollection" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.Contains(System.Windows.Media.Media3D.Material)">
      <summary>Determines whether a given <see cref="T:System.Windows.Media.Media3D.Material" /> is in this <see cref="T:System.Windows.Media.Media3D.MaterialCollection" />. </summary>
      <returns>true if <paramref name="value" />, the specified Material, is in this MaterialCollection; otherwise, false.</returns>
      <param name="value">The item to locate in this collection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.CopyTo(System.Windows.Media.Media3D.Material[],System.Int32)">
      <summary>Copies the items of this <see cref="T:System.Windows.Media.Media3D.MaterialCollection" />, starting with the specified index value, into an array of <see cref="T:System.Windows.Media.Media3D.Material" /> objects. </summary>
      <param name="array">The array that is the destination of the items copied from this MaterialCollection.</param>
      <param name="index">The index at which copying begins.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.MaterialCollection.Count">
      <summary>Gets the number of <see cref="T:System.Windows.Media.Media3D.Material" /> objects contained in the <see cref="T:System.Windows.Media.Media3D.MaterialCollection" />. </summary>
      <returns>The number of Material objects contained in the <see cref="T:System.Windows.Media.Media3D.MaterialCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the collection.</summary>
      <returns>An enumerator that can iterate the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.IndexOf(System.Windows.Media.Media3D.Material)">
      <summary>Gets the index position of the first occurrence of the specified <see cref="T:System.Windows.Media.Media3D.Material" />.</summary>
      <returns>The index position of the specified Material.</returns>
      <param name="value">The Material to search for.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.Insert(System.Int32,System.Windows.Media.Media3D.Material)">
      <summary>Inserts a <see cref="T:System.Windows.Media.Media3D.Material" /> into this <see cref="T:System.Windows.Media.Media3D.MaterialCollection" /> at the specified index position.</summary>
      <param name="index">The index position at which to insert the specified Material.</param>
      <param name="value">The Material to insert.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.MaterialCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Media3D.Material" /> at the specified zero-based index.</summary>
      <returns>The item at the specified index.</returns>
      <param name="index">The zero-based index of the Material object to get or set.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.Remove(System.Windows.Media.Media3D.Material)">
      <summary>Removes the first occurrence of the specified <see cref="T:System.Windows.Media.Media3D.Material" /> from the <see cref="T:System.Windows.Media.Media3D.MaterialCollection" />.</summary>
      <returns>true if <paramref name="value" /> was removed from the collection; otherwise, false. </returns>
      <param name="value">The Material to remove from this collection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Windows.Media.Media3D.Material" /> at the specified index position from the <see cref="T:System.Windows.Media.Media3D.MaterialCollection" />.</summary>
      <param name="index">The index position of the Material to remove.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.MaterialCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.</summary>
      <returns>true if the <see cref="T:System.Windows.Media.Media3D.MaterialCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">A zero-based <see cref="T:System.Array" /> that receives the copied items from the <see cref="T:System.Windows.Media.Media3D.MaterialCollection" />.</param>
      <param name="index">The first position in the specified <see cref="T:System.Array" /> to receive the copied contents.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.MaterialCollection.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>true if access to the <see cref="T:System.Windows.Media.Media3D.MaterialCollection" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.MaterialCollection.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Windows.Media.Media3D.MaterialCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.System#Collections#IList#Add(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Windows.Media.Media3D.MaterialCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.System#Collections#IList#Contains(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Windows.Media.Media3D.MaterialCollection" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.Media3D.MaterialCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.Media3D.MaterialCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
      <param name="index">The zero-based index at which to insert the <see cref="T:System.Object" />.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Windows.Media.Media3D.MaterialCollection" />.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.MaterialCollection.System#Collections#IList#IsFixedSize">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
      <returns>true if the <see cref="T:System.Windows.Media.Media3D.MaterialCollection" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.MaterialCollection.System#Collections#IList#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsReadOnly" />.</summary>
      <returns>true if the <see cref="T:System.Windows.Media.Media3D.MaterialCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.MaterialCollection.System#Collections#IList#Item(System.Int32)">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.System#Collections#IList#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Windows.Media.Media3D.MaterialCollection" />.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.MaterialCollection.Enumerator">
      <summary>Enumerates <see cref="T:System.Windows.Media.Media3D.Material" /> items in a <see cref="T:System.Windows.Media.Media3D.MaterialCollection" />.</summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.MaterialCollection.Enumerator.Current">
      <summary>Gets the current element in the <see cref="T:System.Windows.Media.Media3D.MaterialCollection" />.</summary>
      <returns>The current element in the MaterialCollection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element in the collection. </summary>
      <returns>true if the enumerator successfully advanced to the next element; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.Enumerator.Reset">
      <summary>Resets the enumerator to its initial position, which is before the first element in the collection.</summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.MaterialCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialCollection.Enumerator.System#IDisposable#Dispose">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Windows.Media.Media3D.MaterialGroup">
      <summary>Represents a <see cref="T:System.Windows.Media.Media3D.Material" /> that is a composite of the Materials in its collection.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.MaterialGroup" />class. </summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.MaterialGroup.Children">
      <summary> Gets or sets a collection of child <see cref="T:System.Windows.Media.Media3D.Material" /> objects.  </summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.MaterialCollection" /> that contains the child <see cref="T:System.Windows.Media.Media3D.Material" /> objects.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.MaterialGroup.ChildrenProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.MaterialGroup.Children" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.MaterialGroup.Children" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialGroup.Clone">
      <summary>Returns a modifiable copy of the <see cref="T:System.Windows.Media.Media3D.MaterialGroup" />.</summary>
      <returns>A modifiable copy of the <see cref="T:System.Windows.Media.Media3D.MaterialGroup" />. The returned copy is effectively a deep clone of the current object, although some copying might be deferred until necessary for improved performance. The copy's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.MaterialGroup.CloneCurrentValue">
      <summary>Returns a non-animated version of the <see cref="T:System.Windows.Media.Media3D.MaterialGroup" />. The returned <see cref="T:System.Windows.Media.Media3D.MaterialGroup" /> represents the current object's state at the time this method was called.</summary>
      <returns>Returns the current value of the <see cref="T:System.Windows.Media.Media3D.MaterialGroup" />. The returned <see cref="T:System.Windows.Media.Media3D.MaterialGroup" /> has the same value as the instantaneous value of the current object, but is not animated.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.Matrix3D">
      <summary> Represents a 4 x 4 matrix used for transformations in 3-D space. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary> Constructor that sets matrix's initial values. </summary>
      <param name="m11">Value of the (1,1) field of the new matrix.</param>
      <param name="m12">Value of the (1,2) field of the new matrix.</param>
      <param name="m13">Value of the (1,3) field of the new matrix.</param>
      <param name="m14">Value of the (1,4) field of the new matrix.</param>
      <param name="m21">Value of the (2,1) field of the new matrix.</param>
      <param name="m22">Value of the (2,2) field of the new matrix.</param>
      <param name="m23">Value of the (2,3) field of the new matrix.</param>
      <param name="m24">Value of the (2,4) field of the new matrix.</param>
      <param name="m31">Value of the (3,1) field of the new matrix.</param>
      <param name="m32">Value of the (3,2) field of the new matrix.</param>
      <param name="m33">Value of the (3,3) field of the new matrix.</param>
      <param name="m34">Value of the (3,4) field of the new matrix.</param>
      <param name="offsetX">Value of the X offset field of the new matrix.</param>
      <param name="offsetY">Value of the Y offset field of the new matrix.</param>
      <param name="offsetZ">Value of the Z offset field of the new matrix.</param>
      <param name="m44">Value of the (4,4) field of the new matrix.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.Append(System.Windows.Media.Media3D.Matrix3D)">
      <summary> Appends a specified matrix to the current matrix. </summary>
      <param name="matrix">Matrix to append.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.Determinant">
      <summary>Retrieves the determinant of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>The determinant of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.Equals(System.Object)">
      <summary> Tests equality between two matrices. </summary>
      <returns>
        <see cref="T:System.Boolean" /> that indicates whether the matrices are equal.</returns>
      <param name="o">Object to test for equality.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.Equals(System.Windows.Media.Media3D.Matrix3D)">
      <summary>Tests equality between two matrices. </summary>
      <returns>
        <see cref="T:System.Boolean" /> that indicates whether the matrices are equal.</returns>
      <param name="value">The Matrix3D to which to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.Equals(System.Windows.Media.Media3D.Matrix3D,System.Windows.Media.Media3D.Matrix3D)">
      <summary> Tests equality between two matrices. </summary>
      <returns>
        <see cref="T:System.Boolean" /> that indicates whether the matrices are equal.</returns>
      <param name="matrix1">The first Matrix3D to compare.</param>
      <param name="matrix2">The second Matrix3D to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.GetHashCode">
      <summary>Returns the hash code for this matrix </summary>
      <returns>Integer that specifies the hash code for this matrix.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.HasInverse">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> is invertible. </summary>
      <returns>true if the Matrix3D structure has an inverse; otherwise, false. The default value is true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.Identity">
      <summary>Changes a <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure into an identity <see cref="T:System.Windows.Media.Media3D.Matrix3D" />. </summary>
      <returns>The identity Matrix3D.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.Invert">
      <summary>Inverts this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</summary>
      <exception cref="T:System.InvalidOperationException">Throws InvalidOperationException if the matrix is not invertible.</exception>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.IsAffine">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure is affine. </summary>
      <returns>true if the Matrix3D structure is affine; otherwise, false. </returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.IsIdentity">
      <summary>Determines whether this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure is an identity Matrix3D.</summary>
      <returns>true if the Matrix3D structure is an identity Matrix3D; otherwise, false. The default value is true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M11">
      <summary>Gets or sets the value of the first row and first column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>The value of the first row and first column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M12">
      <summary>Gets or sets the value of the first row and second column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>The value of the first row and second column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M13">
      <summary>Gets or sets the value of the first row and third column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>The value of the first row and third column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M14">
      <summary>Gets or sets the value of the first row and fourth column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</summary>
      <returns>The value of the first row and fourth column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M21">
      <summary>Gets or sets the value of the second row and first column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>The value of the second row and first column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M22">
      <summary>Gets or sets the value of the second row and second column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>The value of the second row and second column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M23">
      <summary>Gets or sets the value of the second row and third column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>The value of the second row and third column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M24">
      <summary>Gets or sets the value of the second row and fourth column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>The value of the second row and fourth column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M31">
      <summary>Gets or sets the value of the third row and first column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>The value of the third row and first column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M32">
      <summary>Gets or sets the value of the third row and second column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>The value of the third row and second column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M33">
      <summary>Gets or sets the value of the third row and third column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>The value of the third row and third column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M34">
      <summary>Gets or sets the value of the third row and fourth column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>The value of the third row and fourth column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.M44">
      <summary>Gets or sets the value of the fourth row and fourth column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>The value of the fourth row and fourth column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.Multiply(System.Windows.Media.Media3D.Matrix3D,System.Windows.Media.Media3D.Matrix3D)">
      <summary>Multiplies the specified matrices. </summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> that is the result of multiplication.</returns>
      <param name="matrix1">Matrix to multiply.</param>
      <param name="matrix2">Matrix by which the first matrix is multiplied.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.OffsetX">
      <summary>Gets or sets the value of the fourth row and first column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>The value of the fourth row and first column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.OffsetY">
      <summary>Gets or sets the value of the fourth row and second column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>The value of the fourth row and second column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Matrix3D.OffsetZ">
      <summary>Gets or sets the value of the fourth row and third column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>The value of the fourth row and third column of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.op_Equality(System.Windows.Media.Media3D.Matrix3D,System.Windows.Media.Media3D.Matrix3D)">
      <summary> Compares two <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> instances for exact equality. </summary>
      <returns>
        <see cref="T:System.Boolean" /> that indicates whether the two matrix instances are equal.</returns>
      <param name="matrix1">The first matrix to compare.</param>
      <param name="matrix2">The second matrix to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.op_Inequality(System.Windows.Media.Media3D.Matrix3D,System.Windows.Media.Media3D.Matrix3D)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> instances for exact inequality. </summary>
      <returns>
        <see cref="T:System.Boolean" /> that indicates whether the two matrix instances are inequal.</returns>
      <param name="matrix1">The first matrix to compare.</param>
      <param name="matrix2">The second matrix to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.op_Multiply(System.Windows.Media.Media3D.Matrix3D,System.Windows.Media.Media3D.Matrix3D)">
      <summary> Multiplies the specified matrices. </summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> that is the result of multiplication.</returns>
      <param name="matrix1">Matrix to multiply.</param>
      <param name="matrix2">Matrix by which the first matrix is multiplied.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.Parse(System.String)">
      <summary>Converts a string representation of a <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure into the equivalent Matrix3D structure.</summary>
      <returns>Matrix3D structure represented by the string.</returns>
      <param name="source">String representation of the Matrix3D.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.Prepend(System.Windows.Media.Media3D.Matrix3D)">
      <summary> Prepends a specified matrix to the current matrix. </summary>
      <param name="matrix">Matrix to prepend.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.Rotate(System.Windows.Media.Media3D.Quaternion)">
      <summary>Appends a rotation transform to the current <see cref="T:System.Windows.Media.Media3D.Matrix3D" />. </summary>
      <param name="quaternion">
        <see cref="T:System.Windows.Media.Media3D.Quaternion" /> that represents the rotation.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.RotateAt(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Point3D)">
      <summary>Rotates this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> about the specified <see cref="T:System.Windows.Media.Media3D.Point3D" />.</summary>
      <param name="quaternion">
        <see cref="T:System.Windows.Media.Media3D.Quaternion" /> that represents the rotation.</param>
      <param name="center">Center <see cref="T:System.Windows.Media.Media3D.Point3D" /> about which to rotate.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.RotateAtPrepend(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Point3D)">
      <summary>Prepends a rotation about a specified center <see cref="T:System.Windows.Media.Media3D.Point3D" /> to this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <param name="quaternion">
        <see cref="T:System.Windows.Media.Media3D.Quaternion" /> that represents the rotation.</param>
      <param name="center">Center <see cref="T:System.Windows.Media.Media3D.Point3D" /> about which to rotate.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.RotatePrepend(System.Windows.Media.Media3D.Quaternion)">
      <summary>Prepends a rotation specified by a <see cref="T:System.Windows.Media.Media3D.Quaternion" /> to this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <param name="quaternion">Quaternion representing rotation.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.Scale(System.Windows.Media.Media3D.Vector3D)">
      <summary>Appends the specified scale <see cref="T:System.Windows.Media.Media3D.Vector3D" /> to this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <param name="scale">Vector3D by which to scale this Matrix3D structure.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.ScaleAt(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Point3D)">
      <summary>Scales this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure by the specified <see cref="T:System.Windows.Media.Media3D.Vector3D" /> about the specified <see cref="T:System.Windows.Media.Media3D.Point3D" />. </summary>
      <param name="scale">Vector3D by which to scale this Matrix3D structure.</param>
      <param name="center">Point3D about which to scale.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.ScaleAtPrepend(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Point3D)">
      <summary>Prepends the specified scale transformation about the specified <see cref="T:System.Windows.Media.Media3D.Point3D" /> to this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <param name="scale">
        <see cref="T:System.Windows.Media.Media3D.Vector3D" /> by which to scale this Matrix3D structure.</param>
      <param name="center">Point3D about which to scale.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.ScalePrepend(System.Windows.Media.Media3D.Vector3D)">
      <summary>Prepends the specifed scale <see cref="T:System.Windows.Media.Media3D.Vector3D" /> to the current <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <param name="scale">Vector3D by which to scale this Matrix3D structure.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.SetIdentity">
      <summary>Changes this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure into an identity matrix. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. </summary>
      <param name="format"></param>
      <param name="provider"></param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.ToString">
      <summary>Creates a string representation of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>String representation of this Matrix3D structure.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.ToString(System.IFormatProvider)">
      <summary>Creates a string representation of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>String representation of this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</returns>
      <param name="provider">Culture-specified formatting information.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.Transform(System.Windows.Media.Media3D.Point3D)">
      <summary>Transforms the specified <see cref="T:System.Windows.Media.Media3D.Point3D" /> by the <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> and returns the result. </summary>
      <returns>The result of transforming <paramref name="point" /> by this Matrix3D.</returns>
      <param name="point">Point3D to transform.</param>
      <exception cref="T:System.InvalidOperationException">Throws InvalidOperationException if the transform is not affine.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.Transform(System.Windows.Media.Media3D.Point3D[])">
      <summary>Transforms the specified <see cref="T:System.Windows.Media.Media3D.Point3D" /> objects in the array by the <see cref="T:System.Windows.Media.Media3D.Matrix3D" />. </summary>
      <param name="points">Point3D objects to transform. The original points in the array are replaced by their transformed values.</param>
      <exception cref="T:System.InvalidOperationException">Throws InvalidOperationException if the transform is not affine.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.Transform(System.Windows.Media.Media3D.Point4D)">
      <summary>Transforms the specified <see cref="T:System.Windows.Media.Media3D.Point4D" /> by the <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> and returns the result.. </summary>
      <returns>The result of transforming <paramref name="point" /> by this Matrix3D.</returns>
      <param name="point">
        <see cref="T:System.Windows.Media.Media3D.Point4D" /> to transform.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.Transform(System.Windows.Media.Media3D.Point4D[])">
      <summary>Transforms the specified <see cref="T:System.Windows.Media.Media3D.Point4D" /> objects in the array by the <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> and returns the result. </summary>
      <param name="points">
        <see cref="T:System.Windows.Media.Media3D.Point4D" /> objects to transform. The original points in the array are replaced by their transformed values.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.Transform(System.Windows.Media.Media3D.Vector3D)">
      <summary>Transforms the specified <see cref="T:System.Windows.Media.Media3D.Vector3D" /> by this <see cref="T:System.Windows.Media.Media3D.Matrix3D" />. </summary>
      <returns>The result of transforming <paramref name="vector" /> by this Matrix3D.</returns>
      <param name="vector">
        <see cref="T:System.Windows.Media.Media3D.Vector3D" /> to transform.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.Transform(System.Windows.Media.Media3D.Vector3D[])">
      <summary>Transforms the specified <see cref="T:System.Windows.Media.Media3D.Vector3D" /> objects in the array by this <see cref="T:System.Windows.Media.Media3D.Matrix3D" />. </summary>
      <param name="vectors">
        <see cref="T:System.Windows.Media.Media3D.Vector3D" /> objects to transform. The original Vector3D objects in the array are replaced by their transformed values.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.Translate(System.Windows.Media.Media3D.Vector3D)">
      <summary>Appends a translation of the specified offset to the current <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <param name="offset">
        <see cref="T:System.Windows.Media.Media3D.Vector3D" /> that specifies the offset for transformation.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3D.TranslatePrepend(System.Windows.Media.Media3D.Vector3D)">
      <summary>Prepends a translation of the specified offset to this <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <param name="offset">
        <see cref="T:System.Windows.Media.Media3D.Vector3D" /> that specifies the offset for transformation.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.Matrix3DConverter">
      <summary>Converts instances of other types to and from instances of <see cref="T:System.Windows.Media.Media3D.Matrix3D" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3DConverter.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Windows.Media.Media3D.Matrix3DConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3DConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether this type converter can convert from a specified type. </summary>
      <returns>True if this converter can convert from the specified type; false otherwise.</returns>
      <param name="context">ITypeDescriptorContext for this call.</param>
      <param name="sourceType">Type being queried for support.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3DConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value that indicates whether this type converter can convert to the given type. </summary>
      <returns>True if this converter can convert to the provided type; false if not.</returns>
      <param name="context">The ITypeDescriptorContext for this call.</param>
      <param name="destinationType">The Type being queried for support.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3DConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert to a Matrix3D from the given object. </summary>
      <returns>Matrix3D that was constructed.</returns>
      <param name="context">The ITypeDescriptorContext for this call.</param>
      <param name="culture">The CultureInfo which is respected when converting.</param>
      <param name="value">The object to convert to an instance of Matrix3D.</param>
      <exception cref="T:System.NotSupportedException">A NotSupportedException is thrown if the example object is null or is not a valid type which can be converted to a Matrix3D.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.Matrix3DConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert an instance of <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> to the given type. </summary>
      <returns>Object that was constructed.</returns>
      <param name="context">The ITypeDescriptorContext for this call.</param>
      <param name="culture">The CultureInfo which is respected when converting.</param>
      <param name="value">The object to convert to an instance of <paramref name="destinationType" />.</param>
      <param name="destinationType">The type to which the Matrix3D instance will be converted.</param>
      <exception cref="T:System.NotSupportedException">Throws NotSupportedException if the example object is null or is not a Matrix3D, or if the destinationType isn't one of the valid destination types.</exception>
    </member>
    <member name="T:System.Windows.Media.Media3D.MatrixCamera">
      <summary>Camera which specifies the view and projection transforms as <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> objects </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.MatrixCamera.#ctor">
      <summary> Creates a new instance of <see cref="T:System.Windows.Media.Media3D.MatrixCamera" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.MatrixCamera.#ctor(System.Windows.Media.Media3D.Matrix3D,System.Windows.Media.Media3D.Matrix3D)">
      <summary> Creates a new <see cref="T:System.Windows.Media.Media3D.MatrixCamera" /> from view and projection matrices. </summary>
      <param name="viewMatrix">Specifies the camera's view matrix.</param>
      <param name="projectionMatrix">Specifies the camera's projection matrix.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.MatrixCamera.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.MatrixCamera" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.MatrixCamera.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.MatrixCamera" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.MatrixCamera.ProjectionMatrix">
      <summary> Gets or sets a <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> as the projection transformation matrix.  </summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> that specifies the projection transformation.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.MatrixCamera.ProjectionMatrixProperty">
      <summary> Identifies the <see cref="P:System.Windows.Media.Media3D.MatrixCamera.ProjectionMatrix" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.MatrixCamera.ProjectionMatrix" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.MatrixCamera.ViewMatrix">
      <summary> Gets or sets a <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> as the view transformation matrix.   </summary>
      <returns>A <see cref="T:System.Windows.Media.Media3D.Matrix3D" />that represents the position, look direction and up vector for the camera.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.MatrixCamera.ViewMatrixProperty">
      <summary>Gets the <see cref="P:System.Windows.Media.Media3D.MatrixCamera.ViewMatrix" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.MatrixCamera.ViewMatrix" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.MatrixTransform3D">
      <summary> Creates a transformation specified by a <see cref="T:System.Windows.Media.Media3D.Matrix3D" />, used to manipulate objects or coordinate systems in 3-D world space. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.MatrixTransform3D.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.MatrixTransform3D" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.MatrixTransform3D.#ctor(System.Windows.Media.Media3D.Matrix3D)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.MatrixTransform3D" /> class using the specified <see cref="T:System.Windows.Media.Media3D.Matrix3D" />. </summary>
      <param name="matrix">Matrix3D that specifies the transform.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.MatrixTransform3D.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.MatrixTransform3D" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.MatrixTransform3D.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.MatrixTransform3D" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.  </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.MatrixTransform3D.IsAffine">
      <summary>Gets a value that indicates whether the transform is affine. </summary>
      <returns>Boolean that indicates whether the transform is affine.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.MatrixTransform3D.Matrix">
      <summary> Gets or sets a <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> that specifies one or more 3-D transformations. </summary>
      <returns>Matrix3D that specifies one or more 3-D transformations.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.MatrixTransform3D.MatrixProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.MatrixTransform3D.Matrix" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.MatrixTransform3D.Matrix" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.MatrixTransform3D.Value">
      <summary> Gets a matrix representation of the 3-D transformation.  </summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> representation of the 3-D transformation.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.MeshGeometry3D">
      <summary>Triangle primitive for building a 3-D shape. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.MeshGeometry3D.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.MeshGeometry3D" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.MeshGeometry3D.Bounds">
      <summary> Gets the bounding <see cref="T:System.Windows.Media.Media3D.Rect3D" /> for this <see cref="T:System.Windows.Media.Media3D.MeshGeometry3D" />.</summary>
      <returns>Bounding <see cref="T:System.Windows.Media.Media3D.Rect3D" /> for the <see cref="T:System.Windows.Media.Media3D.MeshGeometry3D" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.MeshGeometry3D.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.MeshGeometry3D" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.MeshGeometry3D.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.MeshGeometry3D" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.MeshGeometry3D.Normals">
      <summary>Gets or sets a collection of normal vectors for the <see cref="T:System.Windows.Media.Media3D.MeshGeometry3D" />.  </summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" /> that contains the normal vectors for the MeshGeometry3D.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.MeshGeometry3D.NormalsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.MeshGeometry3D.Normals" /> dependency property.</summary>
      <returns>The identifier for the  <see cref="P:System.Windows.Media.Media3D.MeshGeometry3D.Normals" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.MeshGeometry3D.Positions">
      <summary>Gets or sets a collection of vertex positions for a <see cref="T:System.Windows.Media.Media3D.MeshGeometry3D" />.  </summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Point3DCollection" /> that contains the vertex positions of the MeshGeometry3D.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.MeshGeometry3D.PositionsProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.MeshGeometry3D.Positions" /> dependency property. </summary>
      <returns>The identifier for the  <see cref="P:System.Windows.Media.Media3D.MeshGeometry3D.Positions" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.MeshGeometry3D.TextureCoordinates">
      <summary>Gets or sets a collection of texture coordinates for the <see cref="T:System.Windows.Media.Media3D.MeshGeometry3D" />.  </summary>
      <returns>
        <see cref="T:System.Windows.Media.PointCollection" /> that contains the texture coordinates for the MeshGeometry3D.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.MeshGeometry3D.TextureCoordinatesProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.MeshGeometry3D.TextureCoordinates" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.MeshGeometry3D.TextureCoordinates" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.MeshGeometry3D.TriangleIndices">
      <summary>Gets or sets a collection of triangle indices for the <see cref="T:System.Windows.Media.Media3D.MeshGeometry3D" />.  </summary>
      <returns>Collection that contains the triangle indices of the MeshGeometry3D.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.MeshGeometry3D.TriangleIndicesProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.MeshGeometry3D.TriangleIndices" /> dependency property. </summary>
      <returns>The identifier for the  <see cref="P:System.Windows.Media.Media3D.MeshGeometry3D.TriangleIndices" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.Model3D">
      <summary>Abstract class that provides functionality for 3-D models. </summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.Model3D.Bounds">
      <summary> Gets the bounding <see cref="T:System.Windows.Media.Media3D.Rect3D" /> for this <see cref="T:System.Windows.Media.Media3D.Model3D" />. </summary>
      <returns>Bounding <see cref="T:System.Windows.Media.Media3D.Rect3D" /> for the model.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3D.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Model3D" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3D.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Model3D" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3D.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. </summary>
      <param name="format"></param>
      <param name="provider"></param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3D.ToString">
      <summary>Creates a string representation of the Model3D. </summary>
      <returns>String representation of the object.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3D.ToString(System.IFormatProvider)">
      <summary>Creates a string representation of the Model3D. </summary>
      <returns>String representation of the Model3D.</returns>
      <param name="provider">Culture-specific formatting information.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Model3D.Transform">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Media3D.Transform3D" /> set on the model.  </summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Transform3D" /> set on the model. The default value is <see cref="T:System.Windows.Media.Media3D.MatrixTransform3D" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.Model3D.TransformProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.Model3D.Transform" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.Model3D.Transform" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.Model3DCollection">
      <summary>Represents an ordered collection of <see cref="T:System.Windows.Media.Media3D.Model3D" /> objects. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Model3DCollection" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Model3D})">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Model3DCollection" /> class using the specified collection.</summary>
      <param name="collection">Collection with which to instantiate the Model3DCollection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Model3DCollection" /> class with the specified capacity.</summary>
      <param name="capacity">Integer that specifies the capacity of the Model3DCollection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.Add(System.Windows.Media.Media3D.Model3D)">
      <summary> Adds a <see cref="T:System.Windows.Media.Media3D.Model3D" /> object to the end of the <see cref="T:System.Windows.Media.Media3D.Model3DCollection" />. </summary>
      <param name="value">Item to add to the end of this collection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.Clear">
      <summary>Removes all the items from this <see cref="T:System.Windows.Media.Media3D.Model3DCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Model3DCollection" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Model3DCollection" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.Contains(System.Windows.Media.Media3D.Model3D)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Media.Media3D.Model3D" /> is in this <see cref="T:System.Windows.Media.Media3D.Model3DCollection" />. </summary>
      <returns>true if <paramref name="value" />, the specified Model3D, is in this Model3DCollection; otherwise, false.</returns>
      <param name="value">The item to locate in this collection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.CopyTo(System.Windows.Media.Media3D.Model3D[],System.Int32)">
      <summary>Copies the items of this <see cref="T:System.Windows.Media.Media3D.Model3DCollection" />, starting with the specified index value, into an array of <see cref="T:System.Windows.Media.Media3D.Model3D" /> objects.</summary>
      <param name="array">The array that is the destination of the items copied from this Model3DCollection.</param>
      <param name="index">The index at which copying begins.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Model3DCollection.Count">
      <summary>Gets the number of <see cref="T:System.Windows.Media.Media3D.Model3D" /> objects contained in the <see cref="T:System.Windows.Media.Media3D.Model3DCollection" />. </summary>
      <returns>The number of <see cref="T:System.Windows.Media.Media3D.Model3D" /> objects contained in the <see cref="T:System.Windows.Media.Media3D.Model3DCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the collection.</summary>
      <returns>An enumerator that can iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.IndexOf(System.Windows.Media.Media3D.Model3D)">
      <summary>Gets the index position of the first occurrence of the specified <see cref="T:System.Windows.Media.Media3D.Model3D" />.</summary>
      <returns>The index position of the specified Model3D.</returns>
      <param name="value">The Model3D to search for.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.Insert(System.Int32,System.Windows.Media.Media3D.Model3D)">
      <summary>Inserts a <see cref="T:System.Windows.Media.Media3D.Model3D" /> into this <see cref="T:System.Windows.Media.Media3D.Model3DCollection" /> at the specified index position.</summary>
      <param name="index">The index position at which to insert the specified Model3D.</param>
      <param name="value">The Model3D to insert.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Model3DCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Media3D.Model3D" /> at the specified zero-based index.</summary>
      <returns>The item at the specified index.</returns>
      <param name="index">The zero-based index of the Model3D object to get or set.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.Remove(System.Windows.Media.Media3D.Model3D)">
      <summary>Removes the first occurrence of the specified <see cref="T:System.Windows.Media.Media3D.Model3D" /> from the <see cref="T:System.Windows.Media.Media3D.Model3DCollection" />.</summary>
      <returns>true if <paramref name="value" /> was removed from the collection; otherwise, false. </returns>
      <param name="value">The Model3D to remove from this collection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Windows.Media.Media3D.Model3D" /> at the specified index position from the <see cref="T:System.Windows.Media.Media3D.Model3DCollection" />.</summary>
      <param name="index">The index position of the Model3D to remove.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Model3DCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.</summary>
      <returns>true if the the <see cref="T:System.Windows.Media.Media3D.Model3DCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">A zero-based <see cref="T:System.Array" /> that receives the copied items from the <see cref="T:System.Windows.Media.Media3D.Model3DCollection" />.</param>
      <param name="index">The first position in the specified <see cref="T:System.Array" /> to receive the copied contents.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Model3DCollection.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>true if access to the <see cref="T:System.Windows.Media.Media3D.Model3DCollection" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Model3DCollection.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Windows.Media.Media3D.Model3DCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.System#Collections#IList#Add(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Windows.Media.Media3D.Model3DCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.System#Collections#IList#Contains(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Windows.Media.Media3D.Model3DCollection" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.Media3D.Model3DCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.Media3D.Model3DCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
      <param name="index">The zero-based index at which to insert the <see cref="T:System.Object" />.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Windows.Media.Media3D.Model3DCollection" />.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Model3DCollection.System#Collections#IList#IsFixedSize">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
      <returns>true if the the <see cref="T:System.Windows.Media.Media3D.Model3DCollection" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Model3DCollection.System#Collections#IList#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsReadOnly" />.</summary>
      <returns>true if the the <see cref="T:System.Windows.Media.Media3D.Model3DCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Model3DCollection.System#Collections#IList#Item(System.Int32)">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.System#Collections#IList#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Windows.Media.Media3D.Model3DCollection" />.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.Model3DCollection.Enumerator">
      <summary>Enumerates items in a collection. </summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.Model3DCollection.Enumerator.Current">
      <summary>Gets the current element in the collection.</summary>
      <returns>Current element in the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection. </summary>
      <returns>Returns true if the enumerator was successfully advanced to the next element; returns false if the enumerator has passed the end of the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.Enumerator.Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection. </summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.Model3DCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DCollection.Enumerator.System#IDisposable#Dispose">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Windows.Media.Media3D.Model3DGroup">
      <summary>Collection of 3-D models.  </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Model3DGroup" /> class. </summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.Model3DGroup.Children">
      <summary> Gets or sets a collection of <see cref="T:System.Windows.Media.Media3D.Model3D" /> objects.  </summary>
      <returns>Collection of <see cref="T:System.Windows.Media.Media3D.Model3D" /> objects.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.Model3DGroup.ChildrenProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.Model3DGroup.Children" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.Model3DGroup.Children" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DGroup.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Model3DGroup" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Model3DGroup.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Model3DGroup" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.ModelUIElement3D">
      <summary>Renders a 3-D model that supports input, focus, and events.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.ModelUIElement3D.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.ContainerUIElement3D" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.ModelUIElement3D.Model">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Media3D.Model3D" /> to render.</summary>
      <returns>The <see cref="T:System.Windows.Media.Media3D.Model3D" /> to render.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.ModelUIElement3D.ModelProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.ModelUIElement3D.Model" /> dependency property.</summary>
    </member>
    <member name="T:System.Windows.Media.Media3D.ModelVisual3D">
      <summary>
        <see cref="T:System.Windows.Media.Visual" /> that contains 3-D models. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.ModelVisual3D.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.ModelVisual3D" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.ModelVisual3D.Children">
      <summary>Gets a collection of child <see cref="T:System.Windows.Media.Media3D.Visual3D" /> objects.</summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" /> that contains child <see cref="T:System.Windows.Media.Media3D.Visual3D" /> objects.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.ModelVisual3D.Content">
      <summary>Gets or sets the model that comprises the content of the <see cref="T:System.Windows.Media.Media3D.ModelVisual3D" />.  </summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Model3D" /> that comprises the content of the <see cref="T:System.Windows.Media.Media3D.ModelVisual3D" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.ModelVisual3D.ContentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.ModelVisual3D.Content" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.ModelVisual3D.Content" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.ModelVisual3D.GetVisual3DChild(System.Int32)">
      <summary>Returns the specified <see cref="T:System.Windows.Media.Media3D.Visual3D" /> in the parent collection.</summary>
      <returns>The child in the collection at the specified index.</returns>
      <param name="index">The index of the 3-D visual object in the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.ModelVisual3D.System#Windows#Markup#IAddChild#AddChild(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Windows.Markup.IAddChild.AddChild(System.Object)" />.</summary>
      <param name="value"></param>
    </member>
    <member name="M:System.Windows.Media.Media3D.ModelVisual3D.System#Windows#Markup#IAddChild#AddText(System.String)">
      <summary>For a description of this member, see <see cref="M:System.Windows.Markup.IAddChild.AddText(System.String)" />.</summary>
      <param name="text"></param>
    </member>
    <member name="P:System.Windows.Media.Media3D.ModelVisual3D.Transform">
      <summary>Gets or sets the transform set on the <see cref="T:System.Windows.Media.Media3D.ModelVisual3D" />.  </summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Transform3D" /> set on the <see cref="T:System.Windows.Media.Media3D.ModelVisual3D" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.ModelVisual3D.TransformProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.ModelVisual3D.Transform" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.ModelVisual3D.Transform" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.ModelVisual3D.Visual3DChildrenCount">
      <summary>Returns the number of child objects.</summary>
      <returns>The number of child objects.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.OrthographicCamera">
      <summary> Represents an orthographic projection camera. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.OrthographicCamera.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.OrthographicCamera" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.OrthographicCamera.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.OrthographicCamera" /> class with the specified position, projection direction, upward direction, and width.</summary>
      <param name="position">A <see cref="T:System.Windows.Media.Media3D.Point3D" /> that specifies the camera position.</param>
      <param name="lookDirection">A <see cref="T:System.Windows.Media.Media3D.Vector3D" /> that specifies the direction of the camera's projection.</param>
      <param name="upDirection">A <see cref="T:System.Windows.Media.Media3D.Vector3D" /> that specifies the upward direction according to the perspective of the onlooker.</param>
      <param name="width">The width of the camera's viewing box, in world units.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.OrthographicCamera.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.OrthographicCamera" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.OrthographicCamera.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.OrthographicCamera" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.OrthographicCamera.Width">
      <summary> Gets or sets the width of the camera's viewing box, in world units. </summary>
      <returns>Width of the camera's viewing box, in world units.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.OrthographicCamera.WidthProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.OrthographicCamera.Width" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.OrthographicCamera.Width" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.PerspectiveCamera">
      <summary> Represents a perspective projection camera. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.PerspectiveCamera.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.PerspectiveCamera" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.PerspectiveCamera.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.PerspectiveCamera" /> class using the specified position, direction, and field of view.</summary>
      <param name="position">Point3D that specifies the camera's position.</param>
      <param name="lookDirection">Vector3D that specifies the direction of the camera's projection.</param>
      <param name="upDirection">Vector3D that specifies the upward direction according to the perspective of the onlooker.</param>
      <param name="fieldOfView">Width of the camera's angle of projection, specified in degrees.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.PerspectiveCamera.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.PerspectiveCamera" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.PerspectiveCamera.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.PerspectiveCamera" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.PerspectiveCamera.FieldOfView">
      <summary> Gets or sets a value that represents the camera's horizontal field of view. </summary>
      <returns>The camera's horizontal field of view, in degrees. The default value is 45.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.PerspectiveCamera.FieldOfViewProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.PerspectiveCamera.FieldOfView" /> dependency property.</summary>
      <returns>The <see cref="P:System.Windows.Media.Media3D.PerspectiveCamera.FieldOfView" /> dependency property identifier.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.Point3D">
      <summary>Represents an x-, y-, and z-coordinate point in 3-D space. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3D.#ctor(System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <param name="x">The <see cref="P:System.Windows.Media.Media3D.Point3D.X" /> value of the new <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</param>
      <param name="y">The <see cref="P:System.Windows.Media.Media3D.Point3D.Y" /> value of the new <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</param>
      <param name="z">The <see cref="P:System.Windows.Media.Media3D.Point3D.Z" /> value of the new <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3D.Add(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D)">
      <summary>Adds a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure to a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> and returns the result as a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>The sum of <paramref name="point" /> and <paramref name="vector" />.</returns>
      <param name="point">The <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure to add.</param>
      <param name="vector">The <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to add. </param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3D.Equals(System.Object)">
      <summary>Determines whether the specified object is a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure and if so, whether the <see cref="P:System.Windows.Media.Media3D.Point3D.X" />, <see cref="P:System.Windows.Media.Media3D.Point3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Point3D.Z" /> properties of the specified <see cref="T:System.Object" /> are equal to the <see cref="P:System.Windows.Media.Media3D.Point3D.X" />, <see cref="P:System.Windows.Media.Media3D.Point3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Point3D.Z" /> properties of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>true if the instances are equal; otherwise, false.true if <paramref name="o" /> is a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure and if it is also identical to this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure; otherwise, false.</returns>
      <param name="o">The object to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3D.Equals(System.Windows.Media.Media3D.Point3D)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Point3D" /> structures for equality.</summary>
      <returns>true if instances are equal; otherwise, false.</returns>
      <param name="value">The instance of <see cref="T:System.Windows.Media.Media3D.Point3D" /> to compare to this instance.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3D.Equals(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Point3D" /> structures for equality. </summary>
      <returns>true if the <see cref="P:System.Windows.Media.Media3D.Point3D.X" />, <see cref="P:System.Windows.Media.Media3D.Point3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Point3D.Z" /> values for <paramref name="point1" /> and <paramref name="point2" /> are equal; otherwise, false.</returns>
      <param name="point1">The first <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure to compare.</param>
      <param name="point2">The second <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3D.GetHashCode">
      <summary>Returns a hash code for this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>A hash code for this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3D.Multiply(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Matrix3D)">
      <summary>Transforms the specified <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure by the specified <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>A transformed <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure, the result of transforming <paramref name="point" /> by <paramref name="matrix" />.</returns>
      <param name="point">The <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure to transform.</param>
      <param name="matrix">The <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure to use for the transformation.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3D.Offset(System.Double,System.Double,System.Double)">
      <summary>Translates the <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure by the specified amounts. </summary>
      <param name="offsetX">The amount to change the <see cref="P:System.Windows.Media.Media3D.Point3D.X" /> coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</param>
      <param name="offsetY">The amount to change the <see cref="P:System.Windows.Media.Media3D.Point3D.Y" /> coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</param>
      <param name="offsetZ">The amount to change the <see cref="P:System.Windows.Media.Media3D.Point3D.Z" /> coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3D.op_Addition(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D)">
      <summary>Adds a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure to a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> and returns the result as a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>A <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure that is the sum of <paramref name="point" /> and <paramref name="vector" />.</returns>
      <param name="point">The point to add.</param>
      <param name="vector">The vector to add.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3D.op_Equality(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Point3D" /> structures for equality. </summary>
      <returns>true if the <see cref="P:System.Windows.Media.Media3D.Point3D.X" />, <see cref="P:System.Windows.Media.Media3D.Point3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Point3D.Z" /> coordinates of <paramref name="point1" /> and <paramref name="point2" /> are equal; otherwise, false.</returns>
      <param name="point1">The first <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure to compare.</param>
      <param name="point2">The second <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3D.op_Explicit(System.Windows.Media.Media3D.Point3D)~System.Windows.Media.Media3D.Point4D">
      <summary>Converts a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure into a <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure. </summary>
      <returns>The result of converting <paramref name="point" />.</returns>
      <param name="point">The point to convert.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3D.op_Explicit(System.Windows.Media.Media3D.Point3D)~System.Windows.Media.Media3D.Vector3D">
      <summary>Converts a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure into a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
      <returns>The result of converting <paramref name="point" />.</returns>
      <param name="point">The point to convert.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3D.op_Inequality(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Point3D" /> structures for inequality. </summary>
      <returns>true if the <see cref="P:System.Windows.Media.Media3D.Point3D.X" />, <see cref="P:System.Windows.Media.Media3D.Point3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Point3D.Z" /> coordinates of <paramref name="point1" /> and <paramref name="point2" /> are different; otherwise, false.</returns>
      <param name="point1">The first <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure to compare.</param>
      <param name="point2">The second <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3D.op_Multiply(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Matrix3D)">
      <summary>Transforms the specified <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure by the specified <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>The result of transforming <paramref name="point" /> by using <paramref name="matrix" />.</returns>
      <param name="point">The point to transform.</param>
      <param name="matrix">The matrix that is used to transform <paramref name="point" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3D.op_Subtraction(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
      <summary>Subtracts a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure from a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure and returns the result as a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
      <returns>A <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure that represents the difference between <paramref name="point1" /> and <paramref name="point2" />.</returns>
      <param name="point1">The <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure on which to perform subtraction.</param>
      <param name="point2">The <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure to subtract from <paramref name="point1" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3D.op_Subtraction(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D)">
      <summary>Subtracts a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure from a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure and returns the result as a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>The changed <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure, the result of subtracting <paramref name="vector" /> from <paramref name="point" />.</returns>
      <param name="point">The <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure from which to subtract vector.</param>
      <param name="vector">The <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to subtract from point.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3D.Parse(System.String)">
      <summary>Converts a <see cref="T:System.String" /> representation of a 3-D point into the equivalent <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>The equivalent <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</returns>
      <param name="source">The <see cref="T:System.String" /> representation of the 3-D point.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3D.Subtract(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D)">
      <summary>Subtracts a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure from a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure and returns the result as a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
      <returns>A <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure that represents the difference between <paramref name="point1" /> and <paramref name="point2" />.</returns>
      <param name="point1">The <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure to be subtracted from.</param>
      <param name="point2">The <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure to subtract from <paramref name="point1" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3D.Subtract(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D)">
      <summary>Subtracts a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure from a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure and returns the result as a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>The difference between <paramref name="point" /> and <paramref name="vector" />.</returns>
      <param name="point">The <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure from which to subtract <paramref name="vector" />.</param>
      <param name="vector">The <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to subtract from <paramref name="point" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3D.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A string containing the value of the current instance in the specified format. </returns>
      <param name="format">The string specifying the format to use. -or- null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
      <param name="provider">The IFormatProvider to use to format the value. -or- null to obtain the numeric format information from the current locale setting of the operating system.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3D.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Media.Media3D.Point3D.X" />, <see cref="P:System.Windows.Media.Media3D.Point3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Point3D.Z" /> values of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3D.ToString(System.IFormatProvider)">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>A <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Media.Media3D.Point3D.X" />, <see cref="P:System.Windows.Media.Media3D.Point3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Point3D.Z" /> values of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</returns>
      <param name="provider">The culture-specific formatting information.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Point3D.X">
      <summary>Gets or sets the x-coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>The x-coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Point3D.Y">
      <summary>Gets or sets the y-coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>The y-coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Point3D.Z">
      <summary>Gets or sets the z-coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>The z-coordinate of this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.Point3DCollection">
      <summary>Represents an ordered collection of <see cref="T:System.Windows.Media.Media3D.Point3D" /> objects. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Point3DCollection" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Point3D})">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Point3DCollection" /> class using the specified collection.</summary>
      <param name="collection">Collection with which to instantiate the Point3DCollection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Point3DCollection" /> class with the specified capacity.</summary>
      <param name="capacity">Integer that specifies the capacity of the Point3DCollection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.Add(System.Windows.Media.Media3D.Point3D)">
      <summary>Adds a <see cref="T:System.Windows.Media.Media3D.Point3D" /> object to the end of the <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />.</summary>
      <param name="value">Item to add to the end of this collection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.Clear">
      <summary>Removes all the items from this <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Point3DCollection" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.Contains(System.Windows.Media.Media3D.Point3D)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Media.Media3D.Point3D" /> is in this <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />.</summary>
      <returns>true if <paramref name="value" />, the specified Point3D, is in this Point3DCollection; otherwise, false.</returns>
      <param name="value">The item to locate in this collection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.CopyTo(System.Windows.Media.Media3D.Point3D[],System.Int32)">
      <summary>Copies the items of this <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />, starting with the specified index value, into an array of <see cref="T:System.Windows.Media.Media3D.Point3D" /> objects.</summary>
      <param name="array">The array that is the destination of the items copied from this Point3DCollection.</param>
      <param name="index">The index at which copying begins.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Point3DCollection.Count">
      <summary>Gets the number of <see cref="T:System.Windows.Media.Media3D.Point3D" /> objects contained in the <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />.</summary>
      <returns>The number of <see cref="T:System.Windows.Media.Media3D.Point3D" /> objects contained in the <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the collection.</summary>
      <returns>An enumerator that can iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.IndexOf(System.Windows.Media.Media3D.Point3D)">
      <summary>Gets the index position of the first occurrence of the specified <see cref="T:System.Windows.Media.Media3D.Point3D" />.</summary>
      <returns>The index position of the specified Point3D.</returns>
      <param name="value">The Point3D to search for.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.Insert(System.Int32,System.Windows.Media.Media3D.Point3D)">
      <summary>Inserts a <see cref="T:System.Windows.Media.Media3D.Point3D" /> into this <see cref="T:System.Windows.Media.Media3D.Point3DCollection" /> at the specified index position.</summary>
      <param name="index">The index position at which to insert the specified Point3D.</param>
      <param name="value">The Point3D to insert.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Point3DCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Media3D.Point3D" /> at the specified zero-based index.</summary>
      <returns>The item at the specified index.</returns>
      <param name="index">The zero-based index of the Point3D object to get or set.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.Parse(System.String)">
      <summary>Converts a string representation of a collection of <see cref="T:System.Windows.Media.Media3D.Point3D" /> objects into an equivalent <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />.</summary>
      <returns>The equivalent Point3DCollection.</returns>
      <param name="source">The string representation of the collection of Point3D objects.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.Remove(System.Windows.Media.Media3D.Point3D)">
      <summary>Removes the first occurrence of the specified <see cref="T:System.Windows.Media.Media3D.Point3D" /> from the <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />.</summary>
      <returns>true if <paramref name="value" /> was removed from the collection; otherwise, false. </returns>
      <param name="value">The Point3D to remove from this collection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Windows.Media.Media3D.Point3D" /> at the specified index position from the <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />.</summary>
      <param name="index">The index position of the Point3D to remove.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Point3DCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.</summary>
      <returns>true if the the <see cref="T:System.Windows.Media.Media3D.Point3DCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">A zero-based <see cref="T:System.Array" /> that receives the copied items from the <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />.</param>
      <param name="index">The first position in the specified <see cref="T:System.Array" /> to receive the copied contents.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Point3DCollection.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>true if access to the <see cref="T:System.Windows.Media.Media3D.Point3DCollection" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Point3DCollection.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.System#Collections#IList#Add(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.System#Collections#IList#Contains(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
      <param name="index">The zero-based index at which to insert the <see cref="T:System.Object" />.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Point3DCollection.System#Collections#IList#IsFixedSize">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
      <returns>For a description of this member, see <see cref="P:System.Collections.IList.IsFixedSize" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Point3DCollection.System#Collections#IList#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsReadOnly" />.</summary>
      <returns>true if the the <see cref="T:System.Windows.Media.Media3D.Point3DCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Point3DCollection.System#Collections#IList#Item(System.Int32)">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.System#Collections#IList#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A <see cref="T:System.String" /> containing the value of the current instance in the specified format.</returns>
      <param name="format">The <see cref="T:System.String" /> specifying the format to use.-or- null (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
      <param name="provider">The <see cref="T:System.IFormatProvider" /> to use to format the value.-or- null (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.ToString">
      <summary> Creates a string representation of this <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />. </summary>
      <returns>String representation of the object.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.ToString(System.IFormatProvider)">
      <summary>Creates a string representation of this <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />. </summary>
      <returns>String representation of the object.</returns>
      <param name="provider">Culture-specific formatting information.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.Point3DCollection.Enumerator">
      <summary>Enumerates items in a <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />. </summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.Point3DCollection.Enumerator.Current">
      <summary> Gets the current <see cref="T:System.Windows.Media.Media3D.Point3D" /> in the collection. </summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Point3D" /> at the current position in the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the collection. </summary>
      <returns>true if the enumerator successfully advanced to the next element; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.Enumerator.Reset">
      <summary>Resets the enumerator to its initial position, which is before the first element in the collection.</summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.Point3DCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollection.Enumerator.System#IDisposable#Dispose">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Windows.Media.Media3D.Point3DCollectionConverter">
      <summary>Converts instances of other types to and from <see cref="T:System.Windows.Media.Media3D.Point3DCollection" /> instances. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollectionConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Point3DCollectionConverter" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether the type converter can convert from a specified type. </summary>
      <returns>true if the converter can convert from the provided type; otherwise, false.</returns>
      <param name="context">The type descriptor context for this call.</param>
      <param name="sourceType">The type being queried for support.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollectionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether the type converter can convert to the specified type. </summary>
      <returns>true if the converter can convert to the provided type; otherwise, false.</returns>
      <param name="context">The type descriptor context for this call.</param>
      <param name="destinationType">The type being queried for support.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert to a <see cref="T:System.Windows.Media.Media3D.Point3DCollection" /> from the given object. </summary>
      <returns>The <see cref="T:System.Windows.Media.Media3D.Point3DCollection" /> that was constructed.</returns>
      <param name="context">The type descriptor context for this call.</param>
      <param name="culture">The culture information that is respected when converting.</param>
      <param name="value">The object to convert to an instance of <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is null or is not a valid type that can be converted to a <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert an instance of <see cref="T:System.Windows.Media.Media3D.Point3DCollection" /> to the specified type </summary>
      <returns>The object that was constructed.</returns>
      <param name="context">The type descriptor context for this call.</param>
      <param name="culture">The culture information that is respected when converting.</param>
      <param name="value">The object to convert to an instance of <paramref name="destinationType" />.</param>
      <param name="destinationType">Type to which this method will convert the <see cref="T:System.Windows.Media.Media3D.Point3DCollection" /> instance.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is null or is not a <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />.-or-<paramref name="destinationType" /> is not one of the valid destination types.</exception>
    </member>
    <member name="T:System.Windows.Media.Media3D.Point3DConverter">
      <summary> Converts instances of other types to and from a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DConverter.#ctor">
      <summary> Initializes a new instance of <see cref="T:System.Windows.Media.Media3D.Point3DConverter" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> Determines whether a class can be converted from a given type to an instance of a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.  </summary>
      <returns>Indicates whether the type can be converted to a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.ValueMeaningfalseThe converter cannot convert from the provided type.trueThe converter can convert the provided type to a <see cref="T:System.Windows.Media.Media3D.Point3D" />.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> Determines whether an instance of a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure can be converted to a different type. </summary>
      <returns>Indicates whether this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure can be converted to <paramref name="destinationType" />.ValueMeaningfalseThe converter cannot convert this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure to the specified type.trueThe converter can convert this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure to the specified type.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="destinationType">The desired type that this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary> Attempts to convert a specified object to a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>The <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure created from the converted <paramref name="value" />.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="culture">Describes the <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The object being converted.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point3DConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary> Attempts to convert a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure to a specified type. </summary>
      <returns>The object created from converting this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="culture">The CultureInfo which is respected when converting.</param>
      <param name="value">The <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure to convert.</param>
      <param name="destinationType">The type this <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure is converted to.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.Point4D">
      <summary>Represents an x-, y-, z-, and w-coordinate point in world space used in performing transformations with non-affine 3-D matrices. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point4D.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of a <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure. </summary>
      <param name="x">The x-coordinate of the new <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure.</param>
      <param name="y">The y-coordinate of the new <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure.</param>
      <param name="z">The z-coordinate of the new <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure.</param>
      <param name="w">The w-coordinate of the new <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point4D.Add(System.Windows.Media.Media3D.Point4D,System.Windows.Media.Media3D.Point4D)">
      <summary>Adds a <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure to a <see cref="T:System.Windows.Media.Media3D.Point4D" />.</summary>
      <returns>Returns the sum of <paramref name="point1" /> and <paramref name="point2" />.</returns>
      <param name="point1">The first <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure to add.</param>
      <param name="point2">The second <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure to add.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point4D.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is a <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure and if the <see cref="P:System.Windows.Media.Media3D.Point4D.X" />, <see cref="P:System.Windows.Media.Media3D.Point4D.Y" />, <see cref="P:System.Windows.Media.Media3D.Point4D.Z" />, and <see cref="P:System.Windows.Media.Media3D.Point4D.W" /> properties of the specified <see cref="T:System.Object" /> are equal to the <see cref="P:System.Windows.Media.Media3D.Point4D.X" />, <see cref="P:System.Windows.Media.Media3D.Point4D.Y" />, <see cref="P:System.Windows.Media.Media3D.Point4D.Z" />, and <see cref="P:System.Windows.Media.Media3D.Point4D.W" />  properties of this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure.</summary>
      <returns>true if instances are equal; otherwise, false.true if <paramref name="o" /> (the passed <see cref="T:System.Object" />) is a <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure and is identical with this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure; false otherwise.</returns>
      <param name="o">The object to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point4D.Equals(System.Windows.Media.Media3D.Point4D)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Point4D" /> structures for equality.</summary>
      <returns>true if instances are equal; otherwise, false.</returns>
      <param name="value">The instance of Point4D to compare to this instance.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point4D.Equals(System.Windows.Media.Media3D.Point4D,System.Windows.Media.Media3D.Point4D)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Point4D" /> structures for equality.</summary>
      <returns>true if the <see cref="P:System.Windows.Media.Media3D.Point4D.X" />, <see cref="P:System.Windows.Media.Media3D.Point4D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Point4D.Z" /> components of <paramref name="point3D1" /> and <paramref name="point3D2" /> are equal; false otherwise.</returns>
      <param name="point1">The first <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure to compare.</param>
      <param name="point2">The second <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point4D.GetHashCode">
      <summary>Returns a hash code for this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure. </summary>
      <returns>Returns a hash code for this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point4D.Multiply(System.Windows.Media.Media3D.Point4D,System.Windows.Media.Media3D.Matrix3D)">
      <summary>Transforms the specified <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure by the specified <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>Returns the result of transforming <paramref name="point" /> and <paramref name="matrix" />.</returns>
      <param name="point">The <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure to transform.</param>
      <param name="matrix">The transformation <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point4D.Offset(System.Double,System.Double,System.Double,System.Double)">
      <summary>Translates the <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure by the specified amounts. </summary>
      <param name="deltaX">The amount to offset the <see cref="P:System.Windows.Media.Media3D.Point4D.X" /> coordinate of this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure.</param>
      <param name="deltaY">The amount to offset the <see cref="P:System.Windows.Media.Media3D.Point4D.Y" /> coordinate of this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure.</param>
      <param name="deltaZ">The amount to offset the <see cref="P:System.Windows.Media.Media3D.Point4D.Z" /> coordinate of this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure.</param>
      <param name="deltaW">The amount to offset the <see cref="P:System.Windows.Media.Media3D.Point4D.W" /> coordinate of this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point4D.op_Addition(System.Windows.Media.Media3D.Point4D,System.Windows.Media.Media3D.Point4D)">
      <summary>Adds a <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure to a <see cref="T:System.Windows.Media.Media3D.Point4D" />.</summary>
      <returns>Returns the sum of <paramref name="point1" /> and <paramref name="point2" />.</returns>
      <param name="point1">The first <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure to add.</param>
      <param name="point2">The second <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure to add.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point4D.op_Equality(System.Windows.Media.Media3D.Point4D,System.Windows.Media.Media3D.Point4D)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Point4D" /> structures for equality.</summary>
      <returns>true if the <see cref="P:System.Windows.Media.Media3D.Point4D.X" />, <see cref="P:System.Windows.Media.Media3D.Point4D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Point4D.Z" /> coordinates of <paramref name="point4D1" /> and <paramref name="point4D2" /> are equal; otherwise, false.</returns>
      <param name="point1">The first <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure to compare.</param>
      <param name="point2">The second <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point4D.op_Inequality(System.Windows.Media.Media3D.Point4D,System.Windows.Media.Media3D.Point4D)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Point4D" /> structures for inequality.</summary>
      <returns>true if the <see cref="P:System.Windows.Media.Media3D.Point4D.X" />, <see cref="P:System.Windows.Media.Media3D.Point4D.Y" />, <see cref="P:System.Windows.Media.Media3D.Point4D.Z" />, and <see cref="P:System.Windows.Media.Media3D.Point4D.W" /> coordinates of <paramref name="point4D1" /> and <paramref name="point4D2" /> are different; otherwise, false.</returns>
      <param name="point1">The first <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure to compare.</param>
      <param name="point2">The second <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point4D.op_Multiply(System.Windows.Media.Media3D.Point4D,System.Windows.Media.Media3D.Matrix3D)">
      <summary>Transforms the specified <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure by the specified <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>Returns the result of transforming <paramref name="point" /> and <paramref name="matrix" />.</returns>
      <param name="point">The <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure to transform.</param>
      <param name="matrix">The transformation <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point4D.op_Subtraction(System.Windows.Media.Media3D.Point4D,System.Windows.Media.Media3D.Point4D)">
      <summary>Subtracts a <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure from a <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure and returns the result as a <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure. </summary>
      <returns>Returns the difference between <paramref name="point1" /> and <paramref name="point2" />.</returns>
      <param name="point1">The <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure to be subtracted from.</param>
      <param name="point2">The <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure to subtract from <paramref name="point1" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point4D.Parse(System.String)">
      <summary>Converts a <see cref="T:System.String" /> representation of a point4D structure into the equivalent <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure. </summary>
      <returns>Returns the equivalent <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure.</returns>
      <param name="source">The <see cref="T:System.String" /> representation of the point4D structure.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point4D.Subtract(System.Windows.Media.Media3D.Point4D,System.Windows.Media.Media3D.Point4D)">
      <summary>Subtracts a <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure from a <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure. </summary>
      <returns>Returns the difference between <paramref name="point1" /> and <paramref name="point2" />.</returns>
      <param name="point1">The <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure to be subtracted from.</param>
      <param name="point2">The <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure to subtract from <paramref name="point1" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point4D.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A string containing the value of the current instance in the specified format. </returns>
      <param name="format">The string specifying the format to use. -or- null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
      <param name="provider">The IFormatProvider to use to format the value. -or- null to obtain the numeric format information from the current locale setting of the operating system.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point4D.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure. </summary>
      <returns>Returns a <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Media.Media3D.Point4D.X" />, <see cref="P:System.Windows.Media.Media3D.Point4D.Y" />, <see cref="P:System.Windows.Media.Media3D.Point4D.Z" />, and <see cref="P:System.Windows.Media.Media3D.Point4D.W" /> values of this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point4D.ToString(System.IFormatProvider)">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure. </summary>
      <returns>Returns a <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Media.Media3D.Point4D.X" />, <see cref="P:System.Windows.Media.Media3D.Point4D.Y" />, <see cref="P:System.Windows.Media.Media3D.Point4D.Z" />, and <see cref="P:System.Windows.Media.Media3D.Point4D.W" /> values of this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure.</returns>
      <param name="provider">Culture-specific formatting information.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Point4D.W">
      <summary>Gets or sets the <see cref="P:System.Windows.Media.Media3D.Point4D.W" /> component of this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure. </summary>
      <returns>The <see cref="P:System.Windows.Media.Media3D.Point4D.W" /> component of this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure.  The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Point4D.X">
      <summary>Gets or sets the <see cref="P:System.Windows.Media.Media3D.Point4D.X" /> component of this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure. </summary>
      <returns>The <see cref="P:System.Windows.Media.Media3D.Point4D.X" /> component of this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure.  The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Point4D.Y">
      <summary>Gets or sets the <see cref="P:System.Windows.Media.Media3D.Point4D.Y" /> component of this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure. </summary>
      <returns>The <see cref="P:System.Windows.Media.Media3D.Point4D.Y" /> component of this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure.  The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Point4D.Z">
      <summary>Gets or sets the <see cref="P:System.Windows.Media.Media3D.Point4D.Z" /> component of this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure. </summary>
      <returns>The <see cref="P:System.Windows.Media.Media3D.Point4D.Z" /> component of this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure.  The default value is 0.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.Point4DConverter">
      <summary> Converts instances of other types to and from a <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point4DConverter.#ctor">
      <summary> Initializes a new instance of <see cref="T:System.Windows.Media.Media3D.Point4DConverter" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point4DConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> Determines whether a class can be converted from a given type to an instance of a <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure.  </summary>
      <returns>Indicates whether the type can be converted to a <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure.ValueMeaningfalseThe converter cannot convert from the provided type.trueThe converter can convert the provided type to a <see cref="T:System.Windows.Media.Media3D.Point4D" />.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point4DConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> Determines whether an instance of a <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure can be converted to a different type. </summary>
      <returns>Indicates whether this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure can be converted to <paramref name="destinationType" />.ValueMeaningfalseThe converter cannot convert this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure to the specified type.trueThe converter can convert this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure to the specified type.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="destinationType">The desired type that this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point4DConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary> Attempts to convert a specified object to a <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure. </summary>
      <returns>The <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure created from the converted <paramref name="value" />.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="culture">Describes the <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The object being converted.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Point4DConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary> Attempts to convert a <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure to a specified type. </summary>
      <returns>The object created from converting this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="culture">The CultureInfo which is respected when converting.</param>
      <param name="value">The <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure to convert.</param>
      <param name="destinationType">The type this <see cref="T:System.Windows.Media.Media3D.Point4D" /> structure is converted to.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.PointLight">
      <summary>Represents a light source that has a specified position in space and projects its light in all directions.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.PointLight.#ctor">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.PointLight" /> class at the origin. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.PointLight.#ctor(System.Windows.Media.Color,System.Windows.Media.Media3D.Point3D)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.PointLight" /> class at the specified position, using the specified color.</summary>
      <param name="diffuseColor">The diffuse color.</param>
      <param name="position">The position.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.PointLight.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.PointLight" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.PointLight.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.PointLight" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.PointLightBase">
      <summary>Abstract base class that represents a light object that has a position in space and projects its light in all directions. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.PointLightBase.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.PointLightBase" /> object, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.PointLightBase.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Animation.ByteAnimationUsingKeyFrames" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.PointLightBase.ConstantAttenuation">
      <summary>Gets or sets a constant value by which the intensity of the light diminishes over distance.  </summary>
      <returns>Double by which the intensity of the light diminishes over distance.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.PointLightBase.ConstantAttenuationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.PointLightBase.ConstantAttenuation" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.PointLightBase.ConstantAttenuation" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.PointLightBase.LinearAttenuation">
      <summary>Gets or sets a value that specifies the linear diminution of the light's intensity over distance.  </summary>
      <returns>Double that specifies the linear diminution of the light's intensity over distance.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.PointLightBase.LinearAttenuationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.PointLightBase.LinearAttenuation" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.PointLightBase.LinearAttenuation" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.PointLightBase.Position">
      <summary>Gets or sets a <see cref="T:System.Windows.Media.Media3D.Point3D" /> that specifies the light's position in world space.  </summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Point3D" /> that specifies the light's position in world space.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.PointLightBase.PositionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.PointLightBase.Position" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.PointLightBase.Position" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.PointLightBase.QuadraticAttenuation">
      <summary>Gets or sets a value that specifies the diminution of the light's effect over distance, calculated by a quadratic operation.  </summary>
      <returns>Double that specifies the diminution of the light's effect over distance, calculated by a quadratic operation.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.PointLightBase.QuadraticAttenuationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.PointLightBase.QuadraticAttenuation" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.PointLightBase.QuadraticAttenuation" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.PointLightBase.Range">
      <summary>Gets or sets the distance beyond which the light has no effect.  </summary>
      <returns>Double that specifies the distance beyond which the light has no effect.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.PointLightBase.RangeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.PointLightBase.Range" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.PointLightBase.Range" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.ProjectionCamera">
      <summary>An abstract base class for perspective and orthographic projection cameras.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.ProjectionCamera.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.ProjectionCamera" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.ProjectionCamera.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.ProjectionCamera" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.ProjectionCamera.FarPlaneDistance">
      <summary>Gets or sets a value that specifies the distance from the camera of the camera's far clip plane.  </summary>
      <returns>Double that specifies the distance from the camera of the camera's far clip plane.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.ProjectionCamera.FarPlaneDistanceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.ProjectionCamera.FarPlaneDistance" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.ProjectionCamera.FarPlaneDistance" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.ProjectionCamera.LookDirection">
      <summary>Gets or sets a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> which defines the direction in which the camera is looking in world coordinates.  </summary>
      <returns>Vector3D that represents the direction of the camera's field of view.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.ProjectionCamera.LookDirectionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.ProjectionCamera.LookDirection" /> dependency property..</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.ProjectionCamera.LookDirection" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.ProjectionCamera.NearPlaneDistance">
      <summary>Gets or sets a value that specifies the distance from the camera of the camera's near clip plane.  </summary>
      <returns>Double that specifies the distance from the camera of the camera's near clip plane.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.ProjectionCamera.NearPlaneDistanceProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.ProjectionCamera.NearPlaneDistance" /> dependency property.. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.ProjectionCamera.NearPlaneDistance" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.ProjectionCamera.Position">
      <summary> Gets or sets the position of the camera in world coordinates.  </summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Point3D" /> that specifies the position of the camera.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.ProjectionCamera.PositionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.ProjectionCamera.Position" /> dependency property.. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.ProjectionCamera.Position" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.ProjectionCamera.UpDirection">
      <summary>Gets or sets a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> which defines the upward direction of the camera.  </summary>
      <returns>Vector3D that represents the upward direction in the scene projection.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.ProjectionCamera.UpDirectionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.ProjectionCamera.UpDirection" /> dependency property..</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.ProjectionCamera.UpDirection" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.Quaternion">
      <summary>Structure that represents a rotation in three dimensions. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Quaternion" /> structure. </summary>
      <param name="x">Value of the new <see cref="T:System.Windows.Media.Media3D.Quaternion" />'s X coordinate.</param>
      <param name="y">Value of the new <see cref="T:System.Windows.Media.Media3D.Quaternion" />'s Y coordinate.</param>
      <param name="z">Value of the new <see cref="T:System.Windows.Media.Media3D.Quaternion" />'s Z coordinate.</param>
      <param name="w">Value of the new <see cref="T:System.Windows.Media.Media3D.Quaternion" />'s W coordinate.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Quaternion.#ctor(System.Windows.Media.Media3D.Vector3D,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Quaternion" /> structure. </summary>
      <param name="axisOfRotation">
        <see cref="T:System.Windows.Media.Media3D.Vector3D" /> that represents the axis of rotation.</param>
      <param name="angleInDegrees">Angle to rotate around the specified axis, in degrees.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Quaternion.Add(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Quaternion)">
      <summary>Adds the specified quaternions. </summary>
      <returns>Quaternion that is the result of addition.</returns>
      <param name="left">First quaternion to add.</param>
      <param name="right">Second quaternion to add.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Quaternion.Angle">
      <summary>Gets the quaternion's angle, in degrees. </summary>
      <returns>Double that represents the quaternion's angle, in degrees.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Quaternion.Axis">
      <summary>Gets the quaternion's axis.</summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Vector3D" /> that represents the quaternion's axis.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Quaternion.Conjugate">
      <summary>Replaces a quaternion with its conjugate. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Quaternion.Equals(System.Object)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Quaternion" /> instances for equality. </summary>
      <returns>true if the two <see cref="T:System.Windows.Media.Media3D.Quaternion" /> instances are exactly equal, false otherwise.</returns>
      <param name="o">Object with which to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Quaternion.Equals(System.Windows.Media.Media3D.Quaternion)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Quaternion" /> instances for equality. </summary>
      <returns>true if the two <see cref="T:System.Windows.Media.Media3D.Quaternion" /> instances are exactly equal, false otherwise.</returns>
      <param name="value">Quaternion with which to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Quaternion.Equals(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Quaternion)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Quaternion" /> instances for equality. </summary>
      <returns>true if the two <see cref="T:System.Windows.Media.Media3D.Quaternion" /> instances are exactly equal, false otherwise.</returns>
      <param name="quaternion1">First <see cref="T:System.Windows.Media.Media3D.Quaternion" /> to compare.</param>
      <param name="quaternion2">Second <see cref="T:System.Windows.Media.Media3D.Quaternion" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Quaternion.GetHashCode">
      <summary>Returns the hash code for the <see cref="T:System.Windows.Media.Media3D.Quaternion" />. </summary>
      <returns>An integer type that represents the hash code for the <see cref="T:System.Windows.Media.Media3D.Quaternion" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Quaternion.Identity">
      <summary>Gets the Identity quaternion </summary>
      <returns>The Identity quaternion.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Quaternion.Invert">
      <summary>Replaces the specified quaternion with its inverse </summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.Quaternion.IsIdentity">
      <summary>Gets a value that indicates whether the specified quaternion is an <see cref="P:System.Windows.Media.Media3D.Quaternion.Identity" /> quaternion. </summary>
      <returns>true if the quaternion is the <see cref="P:System.Windows.Media.Media3D.Quaternion.Identity" /> quaternion, false otherwise.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Quaternion.IsNormalized">
      <summary>Gets a value that indicates whether the quaternion is normalized.</summary>
      <returns>true if the quaternion is normalized, false otherwise.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Quaternion.Multiply(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Quaternion)">
      <summary>Multiplies the specified <see cref="T:System.Windows.Media.Media3D.Quaternion" /> values. </summary>
      <returns>Quaternion that is the result of multiplication.</returns>
      <param name="left">First quaternion to multiply.</param>
      <param name="right">Second quaternion to multiply.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Quaternion.Normalize">
      <summary>Returns a normalized quaternion. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Quaternion.op_Addition(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Quaternion)">
      <summary>Adds the specified <see cref="T:System.Windows.Media.Media3D.Quaternion" /> values.</summary>
      <returns>Quaternion that is the sum of the two specified  <see cref="T:System.Windows.Media.Media3D.Quaternion" /> values.</returns>
      <param name="left">First quaternion to add.</param>
      <param name="right">Second quaternion to add.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Quaternion.op_Equality(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Quaternion)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Quaternion" /> instances for exact equality.</summary>
      <returns>true if the two <see cref="T:System.Windows.Media.Media3D.Quaternion" /> instances are exactly equal, false otherwise.</returns>
      <param name="quaternion1">First Quaternion to compare.</param>
      <param name="quaternion2">Second Quaternion to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Quaternion.op_Inequality(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Quaternion)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Quaternion" /> instances for exact inequality. </summary>
      <returns>true if the two <see cref="T:System.Windows.Media.Media3D.Quaternion" /> instances are exactly equal, false otherwise.</returns>
      <param name="quaternion1">First quaternion to compare.</param>
      <param name="quaternion2">Second quaternion to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Quaternion.op_Multiply(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Quaternion)">
      <summary>Multiplies the specified quaternion by another.</summary>
      <returns>Quaternion that is the product of multiplication.</returns>
      <param name="left">First quaternion.</param>
      <param name="right">Second quaternion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Quaternion.op_Subtraction(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Quaternion)">
      <summary>Subtracts a specified quaternion from another.</summary>
      <returns>Quaternion that is the result of subtraction.</returns>
      <param name="left">Quaternion from which to subtract.</param>
      <param name="right">Quaternion to subtract from the first quaternion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Quaternion.Parse(System.String)">
      <summary>Converts a string representation of a <see cref="T:System.Windows.Media.Media3D.Quaternion" /> into the equivalent <see cref="T:System.Windows.Media.Media3D.Quaternion" /> structure. </summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Quaternion" /> represented by the string.</returns>
      <param name="source">A string representation of a <see cref="T:System.Windows.Media.Media3D.Quaternion" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Quaternion.Slerp(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Quaternion,System.Double)">
      <summary>Interpolates between two orientations using spherical linear interpolation. </summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Quaternion" /> that represents the orientation resulting from the interpolation.</returns>
      <param name="from">
        <see cref="T:System.Windows.Media.Media3D.Quaternion" /> that represents the starting orientation.</param>
      <param name="to">
        <see cref="T:System.Windows.Media.Media3D.Quaternion" /> that represents the ending orientation.</param>
      <param name="t">Interpolation coefficient.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Quaternion.Slerp(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Quaternion,System.Double,System.Boolean)">
      <summary>Interpolates between orientations, represented as <see cref="T:System.Windows.Media.Media3D.Quaternion" /> structures, using spherical linear interpolation.</summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Quaternion" /> that represents the orientation resulting from the interpolation.</returns>
      <param name="from">
        <see cref="T:System.Windows.Media.Media3D.Quaternion" /> that represents the starting orientation.</param>
      <param name="to">
        <see cref="T:System.Windows.Media.Media3D.Quaternion" /> that represents the ending orientation.</param>
      <param name="t">Interpolation coefficient.</param>
      <param name="useShortestPath">Boolean that indicates whether to compute quaternions that constitute the shortest possible arc on a four-dimensional unit sphere.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Quaternion.Subtract(System.Windows.Media.Media3D.Quaternion,System.Windows.Media.Media3D.Quaternion)">
      <summary>Subtracts a Quaternion from another. </summary>
      <returns>Quaternion that is the result of subtraction.</returns>
      <param name="left">Quaternion from which to subtract.</param>
      <param name="right">Quaternion to subtract from the first quaternion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Quaternion.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A string containing the value of the current instance in the specified format. </returns>
      <param name="format">The string specifying the format to use. -or- null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
      <param name="provider">The IFormatProvider to use to format the value. -or- null to obtain the numeric format information from the current locale setting of the operating system.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Quaternion.ToString">
      <summary>Creates a string representation of the object. </summary>
      <returns>String representation of the object.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Quaternion.ToString(System.IFormatProvider)">
      <summary>Creates a string representation of the object. </summary>
      <returns>String representation of the object.</returns>
      <param name="provider">Culture-specific formatting information.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Quaternion.W">
      <summary>Gets the W component of the quaternion.</summary>
      <returns>The W component of the quaternion.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Quaternion.X">
      <summary>Gets the X component of the quaternion.</summary>
      <returns>The X component of the quaternion.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Quaternion.Y">
      <summary>Gets the Y component of the quaternion.</summary>
      <returns>The Y component of the quaternion.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Quaternion.Z">
      <summary>Gets the Z component of the quaternion.</summary>
      <returns>The Z component of the quaternion.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.QuaternionConverter">
      <summary>Converts instances of other types to and from instances of <see cref="T:System.Windows.Media.Media3D.Quaternion" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.QuaternionConverter.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Windows.Media.Media3D.QuaternionConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.QuaternionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value that indicates whether this type converter can convert from a given type. </summary>
      <returns>True if this converter can convert from the provided type, false otherwise.</returns>
      <param name="context">ITypeDescriptorContext for this call.</param>
      <param name="sourceType">Type being queried for support.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.QuaternionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value that indicates whether this type converter can convert to the given type. </summary>
      <returns>True if this converter can convert to the provided type, false otherwise.</returns>
      <param name="context">ITypeDescriptorContext for this call.</param>
      <param name="destinationType">Type being queried for support.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.QuaternionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified object to a <see cref="T:System.Windows.Media.Media3D.Quaternion" />. </summary>
      <returns>Quaternion that was constructed.</returns>
      <param name="context">ITypeDescriptorContext for this call.</param>
      <param name="culture">CultureInfo to be respected when converting.</param>
      <param name="value">Object to convert to an instance of Quaternion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.QuaternionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert an instance of <see cref="T:System.Windows.Media.Media3D.Quaternion" /> to the given type.</summary>
      <returns>Object that was constructed.</returns>
      <param name="context">The ITypeDescriptorContext for this call.</param>
      <param name="culture">The CultureInfo which is respected when converting.</param>
      <param name="value">The object to convert to an instance of <paramref name="destinationType" />.</param>
      <param name="destinationType">The type to which the Matrix3D instance will be converted.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.QuaternionRotation3D">
      <summary>Represents a rotation transformation defined as a quaternion.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.QuaternionRotation3D.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.QuaternionRotation3D" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.QuaternionRotation3D.#ctor(System.Windows.Media.Media3D.Quaternion)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.QuaternionRotation3D" /> class using the specified <see cref="T:System.Windows.Media.Media3D.Quaternion" />.</summary>
      <param name="quaternion">Quaternion that specifies the rotation to which to interpolate.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.QuaternionRotation3D.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.QuaternionRotation3D" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.QuaternionRotation3D.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.QuaternionRotation3D" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.QuaternionRotation3D.Quaternion">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Media3D.Quaternion" /> that defines the destination rotation.  </summary>
      <returns>Quaternion that defines the destination rotation.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.QuaternionRotation3D.QuaternionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.QuaternionRotation3D.Quaternion" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.QuaternionRotation3D.Quaternion" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.RayHitTestParameters">
      <summary>Specifies the parameters of a hit test along a ray.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.RayHitTestParameters.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D)">
      <summary>Creates an instance of the object that specifies the origin and direction of the ray along which to hit test.</summary>
      <param name="origin">Point3D at which the ray originates.</param>
      <param name="direction">Vector3D that indicates the direction of the ray.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.RayHitTestParameters.Direction">
      <summary> Gets or sets a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> that indicates the direction (from its origin) of the ray along which to hit test. </summary>
      <returns>Vector3D that indicates the direction of the ray along which to hit test.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.RayHitTestParameters.Origin">
      <summary> Gets the origin of the ray along which to hit test. </summary>
      <returns>Origin of the ray along which to hit test.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.RayHitTestResult">
      <summary>Represents the result of a hit test along a ray.</summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.RayHitTestResult.DistanceToRayOrigin">
      <summary>Gets the distance between the hit intersection and the inner coordinate space of the <see cref="T:System.Windows.Media.Media3D.Visual3D" /> which initiated the hit test.</summary>
      <returns>Double that indicates the distance between the hit intersection and the inner coordinate space of the <see cref="T:System.Windows.Media.Media3D.Visual3D" /> which initiated the hit test.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.RayHitTestResult.ModelHit">
      <summary>Gets the Model3D intersected by the ray along which the hit test was performed.</summary>
      <returns>Model3D intersected by the ray.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.RayHitTestResult.PointHit">
      <summary>Gets the Point3D at the intersection between the ray along which the hit test was performed and the hit object.</summary>
      <returns>Point3D at which the hit object was intersected by the ray.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.RayHitTestResult.VisualHit">
      <summary>Gets the Visual intersected by the ray along which the hit test was performed.</summary>
      <returns>Visual3D intersected by the ray.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.RayMeshGeometry3DHitTestResult">
      <summary>Represents an intersection between a ray hit test and a <see cref="T:System.Windows.Media.Media3D.MeshGeometry3D" />.</summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.RayMeshGeometry3DHitTestResult.DistanceToRayOrigin">
      <summary>Gets the distance between the point of intersection and the ray's origin in the coordinate space of <see cref="T:System.Windows.Media.Media3D.Visual3D" /> which initiated the hit test.</summary>
      <returns>Double that indicates the distance between the point of intersection and the ray's origin in the coordinate space of <see cref="T:System.Windows.Media.Media3D.Visual3D" /> which initiated the hit test.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.RayMeshGeometry3DHitTestResult.MeshHit">
      <summary>Gets the <see cref="T:System.Windows.Media.Media3D.MeshGeometry3D" /> intersected by this hit test.</summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.MeshGeometry3D" /> intersected by the ray.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.RayMeshGeometry3DHitTestResult.PointHit">
      <summary>Gets the point at which the mesh was intersected by the ray along which the hit test was performed.</summary>
      <returns>Point3D at which the mesh was intersected.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.RayMeshGeometry3DHitTestResult.VertexIndex1">
      <summary>First vertex of the mesh triangle intersected by the ray.</summary>
      <returns>The index of the first vertex. </returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.RayMeshGeometry3DHitTestResult.VertexIndex2">
      <summary>Second vertex of the mesh triangle intersected by the ray.</summary>
      <returns>The index of the second vertex.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.RayMeshGeometry3DHitTestResult.VertexIndex3">
      <summary>Third vertex of the mesh triangle intersected by the ray.</summary>
      <returns>The index of the third vertex.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.RayMeshGeometry3DHitTestResult.VertexWeight1">
      <summary>Relative contribution of the first vertex of a mesh triangle to the point at which that triangle was intersected by the hit test, expressed as a value between zero and 1.</summary>
      <returns>The weighting of the first vertex. </returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.RayMeshGeometry3DHitTestResult.VertexWeight2">
      <summary>Relative contribution of the second vertex of a mesh triangle to the point at which that triangle was intersected by the hit test, expressed as a value between zero and 1.</summary>
      <returns>The weighting of the second vertex.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.RayMeshGeometry3DHitTestResult.VertexWeight3">
      <summary>Relative contribution of the third vertex of a mesh triangle to the point at which that triangle was intersected by the hit test, expressed as a value between zero and 1.</summary>
      <returns>The weighting of the third vertex.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.Rect3D">
      <summary>Represents a 3-D rectangle: for example, a cube. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Rect3D" /> structure. </summary>
      <param name="x">X-axis coordinate of the new <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</param>
      <param name="y">Y-axis coordinate of the new <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</param>
      <param name="z">Z-axis coordinate of the new <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</param>
      <param name="sizeX">Size of the new <see cref="T:System.Windows.Media.Media3D.Rect3D" /> in the X dimension.</param>
      <param name="sizeY">Size of the new <see cref="T:System.Windows.Media.Media3D.Rect3D" /> in the Y dimension.</param>
      <param name="sizeZ">Size of the new <see cref="T:System.Windows.Media.Media3D.Rect3D" /> in the Z dimension.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.#ctor(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Size3D)">
      <summary>Initializes a new instance of a <see cref="T:System.Windows.Media.Media3D.Rect3D" /> structure. </summary>
      <param name="location">Location of the new <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</param>
      <param name="size">Size of the new <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.Contains(System.Double,System.Double,System.Double)">
      <summary>Gets a value that indicates whether a specified <see cref="T:System.Windows.Media.Media3D.Point3D" /> is within the <see cref="T:System.Windows.Media.Media3D.Rect3D" />, including its edges. </summary>
      <returns>true if the specified point or rectangle is within the <see cref="T:System.Windows.Media.Media3D.Rect3D" />, including its edges; false otherwise.</returns>
      <param name="x">X-axis coordinate of the <see cref="T:System.Windows.Media.Media3D.Point3D" /> to be tested.</param>
      <param name="y">Y-axis coordinate of the <see cref="T:System.Windows.Media.Media3D.Point3D" /> to be tested.</param>
      <param name="z">Z-coordinate of the <see cref="T:System.Windows.Media.Media3D.Point3D" /> to be tested.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.Contains(System.Windows.Media.Media3D.Point3D)">
      <summary>Gets a value that indicates whether a specified <see cref="T:System.Windows.Media.Media3D.Point3D" /> is within the <see cref="T:System.Windows.Media.Media3D.Rect3D" />, including its edges. </summary>
      <returns>True if the specified point or rectangle is within the <see cref="T:System.Windows.Media.Media3D.Rect3D" />, including its edges; false otherwise.</returns>
      <param name="point">Point to be tested.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.Contains(System.Windows.Media.Media3D.Rect3D)">
      <summary>Gets a value that indicates whether a specified <see cref="T:System.Windows.Media.Media3D.Point3D" /> is within the <see cref="T:System.Windows.Media.Media3D.Rect3D" />, including its edges. </summary>
      <returns>True if the specified point or rectangle is within the <see cref="T:System.Windows.Media.Media3D.Rect3D" />, including its edges; false otherwise.</returns>
      <param name="rect">
        <see cref="T:System.Windows.Media.Media3D.Rect3D" /> to be tested. </param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Rect3D.Empty">
      <summary>Gets an empty <see cref="T:System.Windows.Media.Media3D.Rect3D" />. </summary>
      <returns>An empty <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.Equals(System.Object)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Rect3D" /> instances for equality. </summary>
      <returns>true if the two specified <see cref="T:System.Windows.Media.Media3D.Rect3D" /> instances are exactly equal; false otherwise.</returns>
      <param name="o">The object to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.Equals(System.Windows.Media.Media3D.Rect3D)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Rect3D" /> instances for equality. </summary>
      <returns>true if the two specified <see cref="T:System.Windows.Media.Media3D.Rect3D" /> instances are exactly equal; false otherwise.</returns>
      <param name="value">The <see cref="T:System.Windows.Media.Media3D.Rect3D" /> instance to compare with the current instance.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.Equals(System.Windows.Media.Media3D.Rect3D,System.Windows.Media.Media3D.Rect3D)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Rect3D" /> instances for equality. </summary>
      <returns>true if the two specified <see cref="T:System.Windows.Media.Media3D.Rect3D" /> instances are exactly equal; false otherwise.</returns>
      <param name="rect1">First <see cref="T:System.Windows.Media.Media3D.Rect3D" /> to compare.</param>
      <param name="rect2">Second <see cref="T:System.Windows.Media.Media3D.Rect3D" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.GetHashCode">
      <summary>Returns the hash code for the <see cref="T:System.Windows.Media.Media3D.Rect3D" /></summary>
      <returns>A hash code for this <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.Intersect(System.Windows.Media.Media3D.Rect3D)">
      <summary>Finds the intersection of the current <see cref="T:System.Windows.Media.Media3D.Rect3D" /> and the specified <see cref="T:System.Windows.Media.Media3D.Rect3D" />, and stores the result as the current <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</summary>
      <param name="rect">The <see cref="T:System.Windows.Media.Media3D.Rect3D" /> to intersect with the current <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.Intersect(System.Windows.Media.Media3D.Rect3D,System.Windows.Media.Media3D.Rect3D)">
      <summary>Returns the intersection of the specified <see cref="T:System.Windows.Media.Media3D.Rect3D" /> values.</summary>
      <returns>Result of the intersection of <paramref name="rect1" /> and <paramref name="rect2" />.</returns>
      <param name="rect1">First <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</param>
      <param name="rect2">Second <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.IntersectsWith(System.Windows.Media.Media3D.Rect3D)">
      <summary>Returns a value that indicates whether the specified <see cref="T:System.Windows.Media.Media3D.Rect3D" /> intersects with this <see cref="T:System.Windows.Media.Media3D.Rect3D" />. </summary>
      <returns>true if the specified <see cref="T:System.Windows.Media.Media3D.Rect3D" /> intersects with this <see cref="T:System.Windows.Media.Media3D.Rect3D" />; false otherwise.</returns>
      <param name="rect">Rectangle to evaluate.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Rect3D.IsEmpty">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Media.Media3D.Rect3D" /> is the <see cref="P:System.Windows.Media.Media3D.Rect3D.Empty" /> <see cref="T:System.Windows.Media.Media3D.Rect3D" />. </summary>
      <returns>true if this <see cref="T:System.Windows.Media.Media3D.Rect3D" /> is the empty rectangle; false otherwise.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Rect3D.Location">
      <summary>Gets or sets a <see cref="T:System.Windows.Media.Media3D.Point3D" /> that represents the origin of the <see cref="T:System.Windows.Media.Media3D.Rect3D" />. </summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Point3D" /> that represents the origin of the <see cref="T:System.Windows.Media.Media3D.Rect3D" />, typically the back bottom left corner.  The default value is (0,0,0).</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.Offset(System.Double,System.Double,System.Double)">
      <summary>Gets or sets an offset value by which the location of a <see cref="T:System.Windows.Media.Media3D.Rect3D" /> is translated. </summary>
      <param name="offsetX">Offset along the X axis.</param>
      <param name="offsetY">Offset along the Y axis.</param>
      <param name="offsetZ">Offset along the Z axis.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.Offset(System.Windows.Media.Media3D.Rect3D,System.Double,System.Double,System.Double)">
      <summary>Gets or sets an offset value by which the location of a <see cref="T:System.Windows.Media.Media3D.Rect3D" /> is translated. </summary>
      <returns>A <see cref="T:System.Windows.Media.Media3D.Rect3D" /> value that represents the result of the offset.</returns>
      <param name="rect">Rect3D to be translated.</param>
      <param name="offsetX">Offset along the X axis.</param>
      <param name="offsetY">Offset along the Y axis.</param>
      <param name="offsetZ">Offset along the Z axis.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.Offset(System.Windows.Media.Media3D.Rect3D,System.Windows.Media.Media3D.Vector3D)">
      <summary>Gets or sets an offset value by which the location of a <see cref="T:System.Windows.Media.Media3D.Rect3D" /> is translated. </summary>
      <returns>A <see cref="T:System.Windows.Media.Media3D.Rect3D" /> value that represents the result of the offset.</returns>
      <param name="rect">
        <see cref="T:System.Windows.Media.Media3D.Rect3D" /> to be translated.</param>
      <param name="offsetVector">
        <see cref="T:System.Windows.Media.Media3D.Vector3D" /> that specifies the offset translation.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.Offset(System.Windows.Media.Media3D.Vector3D)">
      <summary>Sets the offset translation of the <see cref="T:System.Windows.Media.Media3D.Rect3D" /> to the provided value, specified as a <see cref="T:System.Windows.Media.Media3D.Vector3D" />. </summary>
      <param name="offsetVector">
        <see cref="T:System.Windows.Media.Media3D.Vector3D" /> that specifies the offset translation.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.op_Equality(System.Windows.Media.Media3D.Rect3D,System.Windows.Media.Media3D.Rect3D)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Rect3D" /> instances for exact equality. </summary>
      <returns>true if the two <see cref="T:System.Windows.Media.Media3D.Rect3D" /> instances are exactly equal; false otherwise.</returns>
      <param name="rect1">First <see cref="T:System.Windows.Media.Media3D.Rect3D" /> to evaluate.</param>
      <param name="rect2">Second <see cref="T:System.Windows.Media.Media3D.Rect3D" /> to evaluate.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.op_Inequality(System.Windows.Media.Media3D.Rect3D,System.Windows.Media.Media3D.Rect3D)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Rect3D" /> instances for exact inequality. </summary>
      <returns>True if the two <see cref="T:System.Windows.Media.Media3D.Rect3D" /> instances are unequal, false otherwise.</returns>
      <param name="rect1">First <see cref="T:System.Windows.Media.Media3D.Rect3D" /> to compare.</param>
      <param name="rect2">Second <see cref="T:System.Windows.Media.Media3D.Rect3D" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.Parse(System.String)">
      <summary>Converts a string representation of a <see cref="T:System.Windows.Media.Media3D.Rect3D" /> into the equivalent <see cref="T:System.Windows.Media.Media3D.Rect3D" /> structure. </summary>
      <returns>A string representation of the <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</returns>
      <param name="source">String that represents a <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Rect3D.Size">
      <summary>Gets or sets the area of the <see cref="T:System.Windows.Media.Media3D.Rect3D" />. </summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Size3D" /> that specifies the area of the <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Rect3D.SizeX">
      <summary>Gets or sets the size of the <see cref="T:System.Windows.Media.Media3D.Rect3D" />  in the X dimension. </summary>
      <returns>Double that specifies the size of the <see cref="T:System.Windows.Media.Media3D.Rect3D" /> in the X dimension.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Rect3D.SizeY">
      <summary>Gets or sets the size of the <see cref="T:System.Windows.Media.Media3D.Rect3D" />  in the Y dimension. </summary>
      <returns>Double that specifies the size of the <see cref="T:System.Windows.Media.Media3D.Rect3D" /> in the Y dimension.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Rect3D.SizeZ">
      <summary>Gets or sets the size of the Rect3D in the Z dimension. </summary>
      <returns>Double that specifies the size of the <see cref="T:System.Windows.Media.Media3D.Rect3D" />  in the Z dimension.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A string containing the value of the current instance in the specified format. </returns>
      <param name="format">The string specifying the format to use. -or- null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
      <param name="provider">The IFormatProvider to use to format the value. -or- null to obtain the numeric format information from the current locale setting of the operating system.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.ToString">
      <summary>Creates a string representation of the Rect3D. </summary>
      <returns>A string representation of the <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.ToString(System.IFormatProvider)">
      <summary>Creates a string representation of the <see cref="T:System.Windows.Media.Media3D.Rect3D" />. </summary>
      <returns>A string representation of the <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</returns>
      <param name="provider">Culture-specific formatting information.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.Union(System.Windows.Media.Media3D.Point3D)">
      <summary>Updates a specified <see cref="T:System.Windows.Media.Media3D.Rect3D" /> to reflect the union of that <see cref="T:System.Windows.Media.Media3D.Rect3D" /> and a specified <see cref="T:System.Windows.Media.Media3D.Point3D" />. </summary>
      <param name="point">The <see cref="T:System.Windows.Media.Media3D.Point3D" /> whose union with the specified <see cref="T:System.Windows.Media.Media3D.Rect3D" /> is to be evaluated.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.Union(System.Windows.Media.Media3D.Rect3D)">
      <summary>Updates a specified <see cref="T:System.Windows.Media.Media3D.Rect3D" /> to reflect the union of that <see cref="T:System.Windows.Media.Media3D.Rect3D" /> and a second specified <see cref="T:System.Windows.Media.Media3D.Rect3D" />. </summary>
      <param name="rect">The <see cref="T:System.Windows.Media.Media3D.Rect3D" /> whose union with the current <see cref="T:System.Windows.Media.Media3D.Rect3D" /> is to be evaluated.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.Union(System.Windows.Media.Media3D.Rect3D,System.Windows.Media.Media3D.Point3D)">
      <summary>Returns a new <see cref="T:System.Windows.Media.Media3D.Rect3D" /> that represents the union of a <see cref="T:System.Windows.Media.Media3D.Rect3D" />, and a specified <see cref="T:System.Windows.Media.Media3D.Point3D" />.</summary>
      <returns>Result of the union of <paramref name="rect" /> and <paramref name="point" />.</returns>
      <param name="rect">The <see cref="T:System.Windows.Media.Media3D.Rect3D" /> whose union with the current <see cref="T:System.Windows.Media.Media3D.Rect3D" /> is to be evaluated.</param>
      <param name="point">The <see cref="T:System.Windows.Media.Media3D.Point3D" /> whose union with the specified <see cref="T:System.Windows.Media.Media3D.Rect3D" /> is to be evaluated.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3D.Union(System.Windows.Media.Media3D.Rect3D,System.Windows.Media.Media3D.Rect3D)">
      <summary>Returns a new instance of <see cref="T:System.Windows.Media.Media3D.Rect3D" /> that represents the union of two <see cref="T:System.Windows.Media.Media3D.Rect3D" /> objects. </summary>
      <returns>A <see cref="T:System.Windows.Media.Media3D.Rect3D" /> value that represents the result of the union of <paramref name="rect1" /> and <paramref name="rect2" />.</returns>
      <param name="rect1">First <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</param>
      <param name="rect2">Second <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Rect3D.X">
      <summary>Gets or sets the value of the X coordinate of the <see cref="T:System.Windows.Media.Media3D.Rect3D" />. </summary>
      <returns>Value of the X coordinate of the <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Rect3D.Y">
      <summary>Gets or sets the value of the Y coordinate of the <see cref="T:System.Windows.Media.Media3D.Rect3D" />. </summary>
      <returns>Value of the Y coordinate of the <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Rect3D.Z">
      <summary>Gets or sets the value of the Z coordinate of the <see cref="T:System.Windows.Media.Media3D.Rect3D" />. </summary>
      <returns>Value of the Z coordinate of the <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.Rect3DConverter">
      <summary>Converts instances of other types to and from instances of <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3DConverter.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Windows.Media.Media3D.Rect3DConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3DConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value that indicates whether this type converter can convert from a given type. </summary>
      <returns>True if this converter can convert from the provided type, false otherwise.</returns>
      <param name="context">ITypeDescriptorContext for this call.</param>
      <param name="sourceType">Type being queried for support.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3DConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value that indicates whether this type converter can convert to the given type. </summary>
      <returns>True if this converter can convert to the provided type, false otherwise.</returns>
      <param name="context">ITypeDescriptorContext for this call.</param>
      <param name="destinationType">Type being queried for support.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3DConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified object to a <see cref="T:System.Windows.Media.Media3D.Rect3D" />. </summary>
      <returns>Rect3D that was constructed.</returns>
      <param name="context">ITypeDescriptorContext for this call.</param>
      <param name="culture">CultureInfo to be respected when converting.</param>
      <param name="value">Object to convert to an instance of Rect3D.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rect3DConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert an instance of <see cref="T:System.Windows.Media.Media3D.Rect3D" /> to the given type.</summary>
      <returns>Object that was constructed.</returns>
      <param name="context">The ITypeDescriptorContext for this call.</param>
      <param name="culture">The CultureInfo which is respected when converting.</param>
      <param name="value">The object to convert to an instance of <paramref name="destinationType" />.</param>
      <param name="destinationType">The type to which the Rect3D instance will be converted.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.RotateTransform3D">
      <summary> Specifies a rotation transformation. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.RotateTransform3D.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.RotateTransform3D" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.RotateTransform3D.#ctor(System.Windows.Media.Media3D.Rotation3D)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.RotateTransform3D" /> class with the specified rotation. </summary>
      <param name="rotation">Rotation3D that specifies the rotation.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.RotateTransform3D.#ctor(System.Windows.Media.Media3D.Rotation3D,System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.RotateTransform3D" /> class uusing the specified rotation and center coordinates.</summary>
      <param name="rotation">Rotation3D that specifies the rotation.</param>
      <param name="centerX">Double that specifies the X value about which to rotate.</param>
      <param name="centerY">Double that specifies the Y value about which to rotate.</param>
      <param name="centerZ">Double that specifies the Z value about which to rotate.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.RotateTransform3D.#ctor(System.Windows.Media.Media3D.Rotation3D,System.Windows.Media.Media3D.Point3D)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.RotateTransform3D" /> class with the specified center and rotation. </summary>
      <param name="rotation">Rotation3D that specifies the rotation.</param>
      <param name="center">Center of the transformation's rotation.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.RotateTransform3D.CenterX">
      <summary>Gets or sets the X coordinate of the <see cref="T:System.Windows.Media.Media3D.Point3D" /> about which to rotate.  </summary>
      <returns>Double that represents the X coordinate of the <see cref="T:System.Windows.Media.Media3D.Point3D" /> about which to rotate.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.RotateTransform3D.CenterXProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.RotateTransform3D.CenterX" /> dependency property.</summary>
      <returns>The identifier for the  <see cref="P:System.Windows.Media.Media3D.RotateTransform3D.CenterX" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.RotateTransform3D.CenterY">
      <summary>Gets or sets the Y coordinate of the <see cref="T:System.Windows.Media.Media3D.Point3D" /> about which to rotate.  </summary>
      <returns>Double that represents the Y coordinate of the <see cref="T:System.Windows.Media.Media3D.Point3D" /> about which to rotate.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.RotateTransform3D.CenterYProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.RotateTransform3D.CenterY" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.RotateTransform3D.CenterY" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.RotateTransform3D.CenterZ">
      <summary>Gets or sets the Z coordinate of the <see cref="T:System.Windows.Media.Media3D.Point3D" /> about which to rotate.</summary>
      <returns>Double that represents the Z coordinate of the <see cref="T:System.Windows.Media.Media3D.Point3D" /> about which to rotate.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.RotateTransform3D.CenterZProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.RotateTransform3D.CenterZ" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.RotateTransform3D.CenterZ" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.RotateTransform3D.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.RotateTransform3D" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.RotateTransform3D.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.RotateTransform3D" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.RotateTransform3D.Rotation">
      <summary>Gets or sets a <see cref="T:System.Windows.Media.Media3D.Rotation3D" /> that specifies the rotation.  </summary>
      <returns>Rotation3D that specifies an angle of rotation about an axis.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.RotateTransform3D.RotationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.RotateTransform3D.Rotation" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.RotateTransform3D.Rotation" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.RotateTransform3D.Value">
      <summary>Retrieves a <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> that represents the rotation.</summary>
      <returns>Matrix3D that represents the rotation.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.Rotation3D">
      <summary>Specifies the 3-D rotation to be used in a transformation.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rotation3D.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Rotation3D" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rotation3D.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Rotation3D" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Rotation3D.Identity">
      <summary>Singleton identity <see cref="T:System.Windows.Media.Media3D.Rotation3D" />. </summary>
      <returns>The identity <see cref="T:System.Windows.Media.Media3D.Rotation3D" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rotation3D.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. </summary>
      <param name="format"></param>
      <param name="provider"></param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rotation3D.ToString">
      <summary>Returns a String that represents the current Object. </summary>
      <returns>String that represents the current Object.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Rotation3D.ToString(System.IFormatProvider)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. </summary>
      <param name="provider"></param>
    </member>
    <member name="T:System.Windows.Media.Media3D.ScaleTransform3D">
      <summary>Scales an object in the three-dimensional x-y-z plane, starting from a defined center point. Scale factors are defined in x-, y-, and z- directions from this center point. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.ScaleTransform3D.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.ScaleTransform3D" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.ScaleTransform3D.#ctor(System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.ScaleTransform3D" /> class using the specified scale factors.</summary>
      <param name="scaleX">Factor by which to scale the X value.</param>
      <param name="scaleY">Factor by which to scale the Y value.</param>
      <param name="scaleZ">Factor by which to scale the Z value.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.ScaleTransform3D.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.ScaleTransform3D" /> class using the specified center coordinates and scale factors.</summary>
      <param name="scaleX">Factor by which to scale the X value.</param>
      <param name="scaleY">Factor by which to scale the Y value.</param>
      <param name="scaleZ">Factor by which to scale the Z value.</param>
      <param name="centerX">X coordinate of the center point from which to scale.</param>
      <param name="centerY">Y coordinate of the center point from which to scale.</param>
      <param name="centerZ">Z coordinate of the center point from which to scale.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.ScaleTransform3D.#ctor(System.Windows.Media.Media3D.Vector3D)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.ScaleTransform3D" /> class using the specified <see cref="T:System.Windows.Media.Media3D.Vector3D" />. </summary>
      <param name="scale">Vector3D along which the transformation scales.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.ScaleTransform3D.#ctor(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Point3D)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.ScaleTransform3D" /> class using the specified <see cref="T:System.Windows.Media.Media3D.Vector3D" /> and <see cref="T:System.Windows.Media.Media3D.Point3D" />. </summary>
      <param name="scale">Vector3D along which the transformation scales.</param>
      <param name="center">Center around which the transformation scales.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.ScaleTransform3D.CenterX">
      <summary>Gets or sets the x-coordinate of the transform's center point.  </summary>
      <returns>The x-coordinate of the transform's center point. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.ScaleTransform3D.CenterXProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.ScaleTransform3D.CenterX" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.ScaleTransform3D.CenterX" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.ScaleTransform3D.CenterY">
      <summary>Gets or sets the z-coordinate of the transform's center point.  </summary>
      <returns>The y-coordinate of the transform's center point. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.ScaleTransform3D.CenterYProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.ScaleTransform3D.CenterY" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.ScaleTransform3D.CenterY" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.ScaleTransform3D.CenterZ">
      <summary>Gets or sets the z-coordinate of the transform's center point.  </summary>
      <returns>The z-coordinate of the transform's center point. The default value is 0.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.ScaleTransform3D.CenterZProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.ScaleTransform3D.CenterZ" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.ScaleTransform3D.CenterZ" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.ScaleTransform3D.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.ScaleTransform3D" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.ScaleTransform3D.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.ScaleTransform3D" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.ScaleTransform3D.ScaleX">
      <summary>Gets or sets the scale factor in the x-direction.  </summary>
      <returns>Scale factor in the x-direction. The default value is 1.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.ScaleTransform3D.ScaleXProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.ScaleTransform3D.ScaleX" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.ScaleTransform3D.ScaleX" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.ScaleTransform3D.ScaleY">
      <summary>Gets or sets the scale factor in the y-direction.  </summary>
      <returns>Scale factor in the y-direction. The default value is 1.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.ScaleTransform3D.ScaleYProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.ScaleTransform3D.ScaleY" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.ScaleTransform3D.ScaleY" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.ScaleTransform3D.ScaleZ">
      <summary>Gets or sets the scale factor in the z-direction.  </summary>
      <returns>Scale factor in the z-direction. The default value is 1.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.ScaleTransform3D.ScaleZProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.ScaleTransform3D.ScaleZ" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.ScaleTransform3D.ScaleZ" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.ScaleTransform3D.Value">
      <summary>Gets a <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> representation of this transformation. </summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> representation of this transformation.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.Size3D">
      <summary>Data structure that describes the size of a three-dimensional object. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Size3D.#ctor(System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure. </summary>
      <param name="x">The new <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure's <see cref="P:System.Windows.Media.Media3D.Size3D.X" /> value.</param>
      <param name="y">The new <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure's <see cref="P:System.Windows.Media.Media3D.Size3D.Y" /> value.</param>
      <param name="z">The new <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure's <see cref="P:System.Windows.Media.Media3D.Size3D.Z" /> value.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Size3D.Empty">
      <summary>Gets a value that represents an empty <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure. </summary>
      <returns>An empty instance of a <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Size3D.Equals(System.Object)">
      <summary> Determines whether the specified object is a <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure and whether the <see cref="P:System.Windows.Media.Media3D.Size3D.X" />, <see cref="P:System.Windows.Media.Media3D.Size3D.Y" /> and <see cref="P:System.Windows.Media.Media3D.Size3D.Z" /> properties of the specified <see cref="T:System.Object" /> are equal to the <see cref="P:System.Windows.Media.Media3D.Size3D.X" />, <see cref="P:System.Windows.Media.Media3D.Size3D.Y" /> and <see cref="P:System.Windows.Media.Media3D.Size3D.Z" />  properties of this <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure.</summary>
      <returns>true if instances are equal; otherwise, false.true if <paramref name="o" /> is a <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure and is identical with this <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure; otherwise, false.</returns>
      <param name="o">The <see cref="T:System.Object" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Size3D.Equals(System.Windows.Media.Media3D.Size3D)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Size3D" /> structures for equality.</summary>
      <returns>true if instances are equal; otherwise, false.</returns>
      <param name="value">The instance of Size3D to compare to this instance.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Size3D.Equals(System.Windows.Media.Media3D.Size3D,System.Windows.Media.Media3D.Size3D)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Size3D" /> structures for equality.   Two <see cref="T:System.Windows.Media.Media3D.Size3D" /> structures are equal if the values of their <see cref="P:System.Windows.Media.Media3D.Size3D.X" />, <see cref="P:System.Windows.Media.Media3D.Size3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Size3D.Z" /> properties are the same.</summary>
      <returns>true if instances are equal; otherwise, false.true if the <see cref="P:System.Windows.Media.Media3D.Size3D.X" />, <see cref="P:System.Windows.Media.Media3D.Size3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Size3D.Z" /> components of <paramref name="size1" /> and <paramref name="size2" /> are equal; otherwise, false.</returns>
      <param name="size1">The first <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure to compare.</param>
      <param name="size2">The second <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Size3D.GetHashCode">
      <summary>Returns a hash code for this <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure. </summary>
      <returns>A hash code for this <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Size3D.IsEmpty">
      <summary>Gets a value that indicates whether this <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure is empty. </summary>
      <returns>true if the <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure is empty; otherwise, false.  The default is false.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Size3D.op_Equality(System.Windows.Media.Media3D.Size3D,System.Windows.Media.Media3D.Size3D)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Size3D" /> structures for equality.   Two <see cref="T:System.Windows.Media.Media3D.Size3D" /> structures are equal if the values of their <see cref="P:System.Windows.Media.Media3D.Size3D.X" />, <see cref="P:System.Windows.Media.Media3D.Size3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Size3D.Z" /> properties are the same.</summary>
      <returns>true if the <see cref="P:System.Windows.Media.Media3D.Size3D.X" />, <see cref="P:System.Windows.Media.Media3D.Size3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Size3D.Z" /> components of <paramref name="size1" /> and <paramref name="size2" /> are equal; otherwise, false.</returns>
      <param name="size1">The first <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure to compare.</param>
      <param name="size2">The second <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Size3D.op_Explicit(System.Windows.Media.Media3D.Size3D)~System.Windows.Media.Media3D.Point3D">
      <summary>Converts this <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure into a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>The result of converting <paramref name="size" />.</returns>
      <param name="size">The size to convert.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Size3D.op_Explicit(System.Windows.Media.Media3D.Size3D)~System.Windows.Media.Media3D.Vector3D">
      <summary>Converts this <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure into a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
      <returns>The result of converting <paramref name="size" />.</returns>
      <param name="size">The size to convert.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Size3D.op_Inequality(System.Windows.Media.Media3D.Size3D,System.Windows.Media.Media3D.Size3D)">
      <summary> Compares two <see cref="T:System.Windows.Media.Media3D.Size3D" /> structures for inequality.  Two <see cref="T:System.Windows.Media.Media3D.Size3D" /> structures are not equal if the values of their <see cref="P:System.Windows.Media.Media3D.Size3D.X" />, <see cref="P:System.Windows.Media.Media3D.Size3D.Y" /> and <see cref="P:System.Windows.Media.Media3D.Size3D.Z" /> properties are different.</summary>
      <returns>true if the <see cref="P:System.Windows.Media.Media3D.Size3D.X" />, <see cref="P:System.Windows.Media.Media3D.Size3D.Y" /> and <see cref="P:System.Windows.Media.Media3D.Size3D.Z" /> coordinates of <paramref name="size1" /> and <paramref name="size2" /> are different; otherwise, false.</returns>
      <param name="size1">The first <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure to compare.</param>
      <param name="size2">The second <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Size3D.Parse(System.String)">
      <summary>Converts a <see cref="T:System.String" /> representation of a three-dimensional size structure into the equivalent <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure. </summary>
      <returns>The equivalent <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure.</returns>
      <param name="source">The <see cref="T:System.String" /> representation of the three-dimensional size structure.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Size3D.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A string containing the value of the current instance in the specified format. </returns>
      <param name="format">The string specifying the format to use. -or- null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
      <param name="provider">The IFormatProvider to use to format the value. -or- null to obtain the numeric format information from the current locale setting of the operating system.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Size3D.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure. </summary>
      <returns>Returns a <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Media.Media3D.Size3D.X" />, <see cref="P:System.Windows.Media.Media3D.Size3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Size3D.Z" /> values of this <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Size3D.ToString(System.IFormatProvider)">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure. </summary>
      <returns>Returns a <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Media.Media3D.Size3D.X" />, <see cref="P:System.Windows.Media.Media3D.Size3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Size3D.Z" /> values of this <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure.</returns>
      <param name="provider">Culture-specific formatting information.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Size3D.X">
      <summary>Gets or sets the <see cref="P:System.Windows.Media.Media3D.Size3D.X" /> value of this <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure. </summary>
      <returns>The <see cref="P:System.Windows.Media.Media3D.Size3D.X" /> value of this <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure.  The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Size3D.Y">
      <summary> Gets or sets the <see cref="P:System.Windows.Media.Media3D.Size3D.Y" /> value of this <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure. </summary>
      <returns>The <see cref="P:System.Windows.Media.Media3D.Size3D.Y" /> value of this <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure.  The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Size3D.Z">
      <summary> Gets or sets the <see cref="P:System.Windows.Media.Media3D.Size3D.Z" /> value of this <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure. </summary>
      <returns>The <see cref="P:System.Windows.Media.Media3D.Size3D.Z" /> value of this <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure.  The default value is 0.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.Size3DConverter">
      <summary> Converts instances of other types to and from a <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Size3DConverter.#ctor">
      <summary> Initializes a new instance of <see cref="T:System.Windows.Media.Media3D.Size3DConverter" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Size3DConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> Determines whether a class can be converted from a given type to an instance of a <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure.  </summary>
      <returns>Indicates whether the type can be converted to a <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure.ValueMeaningfalseThe converter cannot convert from the provided type.trueThe converter can convert the provided type to a <see cref="T:System.Windows.Media.Media3D.Size3D" />.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Size3DConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> Determines whether an instance of a <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure can be converted to a different type. </summary>
      <returns>Indicates whether this <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure can be converted to <paramref name="destinationType" />.ValueMeaningfalseThe converter cannot convert this <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure to the specified type.trueThe converter can convert this <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure to the specified type.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="destinationType">The desired type that this <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Size3DConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary> Attempts to convert a specified object to a <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure. </summary>
      <returns>The <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure created from the converted <paramref name="value" />.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="culture">Describes the <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The object being converted.</param>
      <exception cref="T:System.NotSupportedException">Occurs if the specified object is null or is a type that cannot be converted to to a <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.Size3DConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary> Attempts to convert a <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure to a specified type. </summary>
      <returns>The object created from converting this <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="culture">The CultureInfo which is respected when converting.</param>
      <param name="value">The <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure to convert.</param>
      <param name="destinationType">The type this <see cref="T:System.Windows.Media.Media3D.Size3D" /> structure is converted to.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.SpecularMaterial">
      <summary> Allows a 2-D brush, like a <see cref="T:System.Windows.Media.SolidColorBrush" /> or <see cref="T:System.Windows.Media.TileBrush" />, to be applied to a specularly-lit 3-D model.  </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.SpecularMaterial.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.SpecularMaterial" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.SpecularMaterial.#ctor(System.Windows.Media.Brush,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.SpecularMaterial" /> class with the specified brush and specular exponent.</summary>
      <param name="brush">The brush applied by the new <see cref="T:System.Windows.Media.Media3D.SpecularMaterial" />.</param>
      <param name="specularPower">The specular exponent.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.SpecularMaterial.Brush">
      <summary> Gets or sets the 2-D brush to apply to a specularly-lit 3-D model.  </summary>
      <returns>The brush to apply.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.SpecularMaterial.BrushProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.SpecularMaterial.Brush" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.SpecularMaterial.Brush" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.SpecularMaterial.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.SpecularMaterial" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.SpecularMaterial.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.SpecularMaterial" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.SpecularMaterial.Color">
      <summary>Gets or sets a value that filters the color properties of the material applied to the model.  </summary>
      <returns>The color with which to filter the material.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.SpecularMaterial.ColorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.SpecularMaterial.Color" /> dependency property.</summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.SpecularMaterial.SpecularPower">
      <summary>Gets or sets a value that specifies the degree to which a material applied to a 3-D model reflects the lighting model as shine.  </summary>
      <returns>Relative contribution, for a material applied as a 2-D brush to a 3-D model, of the specular component of the lighting model.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.SpecularMaterial.SpecularPowerProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.SpecularMaterial.SpecularPower" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.SpecularMaterial.SpecularPower" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.SpotLight">
      <summary>Light object that projects its effect in a cone-shaped area along a specified direction.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.SpotLight.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.SpotLight" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.SpotLight.#ctor(System.Windows.Media.Color,System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Vector3D,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.SpotLight" /> class using the specified color, position, direction, and cone angles. </summary>
      <param name="diffuseColor">Diffuse color of the new <see cref="T:System.Windows.Media.Media3D.SpotLight" />.</param>
      <param name="position">Position of the new <see cref="T:System.Windows.Media.Media3D.SpotLight" />.</param>
      <param name="direction">Direction of the new <see cref="T:System.Windows.Media.Media3D.SpotLight" />.</param>
      <param name="outerConeAngle">Angle that defines a cone outside which the light does not illuminate objects in the scene.</param>
      <param name="innerConeAngle">Angle that defines a cone within which the light illuminates objects in the scene.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.SpotLight.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.SpotLight" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.SpotLight.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.SpotLight" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.SpotLight.Direction">
      <summary>Gets or sets a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> that specifies the direction in which the <see cref="T:System.Windows.Media.Media3D.SpotLight" /> projects its light.  </summary>
      <returns>
        <see cref="T:System.Windows.Media.Media3D.Vector3D" /> that specifies the direction of the Spotlight's projection. The default value is 0,0,-1.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.SpotLight.DirectionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.SpotLight.Direction" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.SpotLight.Direction" /> dependency property. </returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.SpotLight.InnerConeAngle">
      <summary> Gets or sets an angle that specifies the proportion of a <see cref="T:System.Windows.Media.Media3D.SpotLight" />'s cone-shaped projection in which the light fully illuminates objects in the scene.  </summary>
      <returns>The angle in degrees that specifies the proportion of a <see cref="T:System.Windows.Media.Media3D.SpotLight" />'s cone-shaped projection in which the light fully illuminates objects in the scene. The default value is 180.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.SpotLight.InnerConeAngleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.SpotLight.InnerConeAngle" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.SpotLight.InnerConeAngle" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.SpotLight.OuterConeAngle">
      <summary> Gets or sets an angle that specifies the proportion of a <see cref="T:System.Windows.Media.Media3D.SpotLight" />'s cone-shaped projection outside which the light does not illuminate objects in the scene.  </summary>
      <returns>The angle in degrees that specifies the proportion of a <see cref="T:System.Windows.Media.Media3D.SpotLight" />'s cone-shaped projection outside which the light does not illuminate objects in the scene. The default value is 90.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.SpotLight.OuterConeAngleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.SpotLight.OuterConeAngle" /> dependency property. </summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.SpotLight.OuterConeAngle" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.Transform3D">
      <summary>Provides a parent class for all three-dimensional transformations, including translation, rotation, and scale transformations. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3D.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Transform3D" />, making deep copies of this object's values. </summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3D.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Transform3D" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property is true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Transform3D.Identity">
      <summary>Gets the identity transformation. </summary>
      <returns>Identity transformation.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Transform3D.Inverse">
      <summary>Gets the inverse transformation of this object, if possible.</summary>
      <returns>An inverse of this instance, if possible; otherwise, null.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Transform3D.IsAffine">
      <summary>Gets a value that specifies whether the matrix is affine. </summary>
      <returns>true if the matrix is affine; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3D.Transform(System.Windows.Media.Media3D.Point3D)">
      <summary>Transforms the specified <see cref="T:System.Windows.Media.Media3D.Point3D" />. </summary>
      <returns>Transformed Point3D.</returns>
      <param name="point">Point3D to transform.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3D.Transform(System.Windows.Media.Media3D.Point3D[])">
      <summary> Transforms the specified array of <see cref="T:System.Windows.Media.Media3D.Point3D" /> objects. </summary>
      <param name="points">Array of Point3D objects to transform.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3D.Transform(System.Windows.Media.Media3D.Point4D)">
      <summary>Transforms the specified <see cref="T:System.Windows.Media.Media3D.Point4D" />. </summary>
      <returns>Transformed Point4D.</returns>
      <param name="point">Point4D to transform.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3D.Transform(System.Windows.Media.Media3D.Point4D[])">
      <summary> Transforms the specified array of <see cref="T:System.Windows.Media.Media3D.Point4D" /> objects. </summary>
      <param name="points">Array of Point4D objects to transform.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3D.Transform(System.Windows.Media.Media3D.Vector3D)">
      <summary>Transforms the specified <see cref="T:System.Windows.Media.Media3D.Vector3D" />. </summary>
      <returns>Transformed Vector3D.</returns>
      <param name="vector">Vector3D to transform.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3D.Transform(System.Windows.Media.Media3D.Vector3D[])">
      <summary> Transforms the specified array of <see cref="T:System.Windows.Media.Media3D.Vector3D" /> objects. </summary>
      <param name="vectors">Array of Vector3D objects to transform.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3D.TransformBounds(System.Windows.Media.Media3D.Rect3D)">
      <summary>Transforms the specified 3-D bounding box and returns an axis-aligned 3-D bounding box that is exactly large enough to contain it.</summary>
      <returns>The smallest axis-aligned 3-D bounding box possible that contains the transformed <paramref name="rect" />.</returns>
      <param name="rect">The 3-D bounding box to transform.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3D.TryTransform(System.Windows.Media.Media3D.Point3D,System.Windows.Media.Media3D.Point3D@)">
      <summary>Attempts to transform the specified 3-D point and returns a value that indicates whether the transformation was successful.</summary>
      <returns>true if <paramref name="inPoint" /> was transformed; otherwise, false.</returns>
      <param name="inPoint">The 3-D point to transform.</param>
      <param name="result">The result of transforming <paramref name="inPoint" />.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Transform3D.Value">
      <summary>Gets the <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> that represents the value of the current transformation. </summary>
      <returns>Matrix3D that represents the value of the current transformation.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.Transform3DCollection">
      <summary>Represents an ordered collection of <see cref="T:System.Windows.Media.Media3D.Transform3D" /> objects. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Transform3D})">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" /> class using the specified collection.</summary>
      <param name="collection">Collection with which to instantiate the Transform3DCollection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" /> class with the specified capacity.</summary>
      <param name="capacity">Integer that specifies the capacity of the Transform3DCollection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.Add(System.Windows.Media.Media3D.Transform3D)">
      <summary>Adds a <see cref="T:System.Windows.Media.Media3D.Transform3D" /> to the end of the <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" />.</summary>
      <param name="value">Item to add to the end of this collection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.Clear">
      <summary>Removes all the items from this <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.Contains(System.Windows.Media.Media3D.Transform3D)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Media.Media3D.Transform3D" /> is in this <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" />.</summary>
      <returns>true if <paramref name="value" />, the specified Transform3D, is in this Transform3DCollection; otherwise, false.</returns>
      <param name="value">The item to locate in this collection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.CopyTo(System.Windows.Media.Media3D.Transform3D[],System.Int32)">
      <summary>Copies the items of this <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" />, starting with the specified index value, into an array of <see cref="T:System.Windows.Media.Media3D.Transform3D" /> objects.</summary>
      <param name="array">The array that is the destination of the items copied from this Transform3DCollection.</param>
      <param name="index">The index at which copying begins.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Transform3DCollection.Count">
      <summary>Gets the number of <see cref="T:System.Windows.Media.Media3D.Transform3D" /> objects contained in the <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" />. </summary>
      <returns>The number of Transform3D objects contained in the Transform3DCollection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the collection.</summary>
      <returns>An enumerator that can iterate the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.IndexOf(System.Windows.Media.Media3D.Transform3D)">
      <summary>Gets the index position of the first occurrence of the specified <see cref="T:System.Windows.Media.Media3D.Transform3D" />.</summary>
      <returns>The index position of the specified Transform3D.</returns>
      <param name="value">The Transform3D to search for.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.Insert(System.Int32,System.Windows.Media.Media3D.Transform3D)">
      <summary>Inserts a <see cref="T:System.Windows.Media.Media3D.Transform3D" /> into this <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" /> at the specified index position.</summary>
      <param name="index">The index position at which to insert the specified Transform3D.</param>
      <param name="value">The Transform3D to insert.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Transform3DCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Media3D.Transform3D" /> at the specified zero-based index.</summary>
      <returns>The item at the specified index.</returns>
      <param name="index">The zero-based index of the Transform3D object to get or set.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.Remove(System.Windows.Media.Media3D.Transform3D)">
      <summary>Removes the first occurrence of the specified <see cref="T:System.Windows.Media.Media3D.Transform3D" /> from the <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" />.</summary>
      <returns>true if <paramref name="value" /> was removed fro the collection; otherwise, false. </returns>
      <param name="value">The Transform3D to remove from this collection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Windows.Media.Media3D.Transform3D" /> at the specified index position from the <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" />.</summary>
      <param name="index">The index position of the Transform3D to remove.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Transform3DCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.</summary>
      <returns>true if the the <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">A zero-based <see cref="T:System.Array" /> that receives the copied items from the <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" />.</param>
      <param name="index">The first position in the specified <see cref="T:System.Array" /> to receive the copied contents.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Transform3DCollection.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>true if access to the <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Transform3DCollection.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.System#Collections#IList#Add(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.System#Collections#IList#Contains(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
      <param name="index">The zero-based index at which to insert the <see cref="T:System.Object" />.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" />.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Transform3DCollection.System#Collections#IList#IsFixedSize">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
      <returns>For a description of this member, see <see cref="P:System.Collections.IList.IsFixedSize" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Transform3DCollection.System#Collections#IList#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsReadOnly" />.</summary>
      <returns>true if the the <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Transform3DCollection.System#Collections#IList#Item(System.Int32)">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.System#Collections#IList#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" />.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.Transform3DCollection.Enumerator">
      <summary>Enumerates <see cref="T:System.Windows.Media.Media3D.Transform3D" /> items in a <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" />. </summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.Transform3DCollection.Enumerator.Current">
      <summary>Gets the current element in the collection.</summary>
      <returns>The current element in the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element in the collection. </summary>
      <returns>true if the enumerator successfully advanced to the next element; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.Enumerator.Reset">
      <summary>Resets the enumerator to its initial position, which is before the first element in the collection. </summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.Transform3DCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DCollection.Enumerator.System#IDisposable#Dispose">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Windows.Media.Media3D.Transform3DGroup">
      <summary>Represents a transformation that is a composite of the <see cref="T:System.Windows.Media.Media3D.Transform3D" /> children in its <see cref="T:System.Windows.Media.Media3D.Transform3DCollection" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DGroup.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Transform3DGroup" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.Transform3DGroup.Children">
      <summary> Gets or sets a collection of <see cref="T:System.Windows.Media.Media3D.Transform3D" /> objects.  </summary>
      <returns>Collection of <see cref="T:System.Windows.Media.Media3D.Transform3D" /> objects. The default value is an empty collection.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.Transform3DGroup.ChildrenProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.Transform3DGroup.Children" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.Transform3DGroup.Children" /> dependency property.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DGroup.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Transform3DGroup" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Transform3DGroup.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Transform3DGroup" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Transform3DGroup.IsAffine">
      <summary>Gets a value that indicates whether the transformation is affine. </summary>
      <returns>True if the transformation is affine; false otherwise.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Transform3DGroup.Value">
      <summary>Gets a <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> that indicates the current transform value. </summary>
      <returns>Matrix3D that indicates the current transform value.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.TranslateTransform3D">
      <summary>Translates an object in the three-dimensional x-y-z plane. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.TranslateTransform3D.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.TranslateTransform3D" /> class. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.TranslateTransform3D.#ctor(System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.TranslateTransform3D" /> class using the specified offset.</summary>
      <param name="offsetX">Double that specifies the X value of the Vector3D that specifies the translation offset.</param>
      <param name="offsetY">Double that specifies the Y value of the Vector3D that specifies the translation offset.</param>
      <param name="offsetZ">Double that specifies the Z value of the Vector3D that specifies the translation offset.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.TranslateTransform3D.#ctor(System.Windows.Media.Media3D.Vector3D)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.TranslateTransform3D" /> class, using the specified offset <see cref="T:System.Windows.Media.Media3D.Vector3D" />. </summary>
      <param name="offset">
        <see cref="T:System.Windows.Media.Media3D.Vector3D" /> by which to offset the model.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.TranslateTransform3D.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.TranslateTransform3D" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.TranslateTransform3D.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.TranslateTransform3D" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.TranslateTransform3D.OffsetX">
      <summary>Gets or sets the X-axis value of the translation's offset.  </summary>
      <returns>Double that represents the X-axis value of the translation's offset.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.TranslateTransform3D.OffsetXProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.TranslateTransform3D.OffsetX" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.TranslateTransform3D.OffsetX" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.TranslateTransform3D.OffsetY">
      <summary>Gets or sets the Y-axis value of the translation's offset.  </summary>
      <returns>Double that represents the Y-axis value of the translation's offset.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.TranslateTransform3D.OffsetYProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.TranslateTransform3D.OffsetY" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.TranslateTransform3D.OffsetY" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.TranslateTransform3D.OffsetZ">
      <summary>Gets or sets the Z-axis value of the translation's offset.  </summary>
      <returns>Double that represents the Z-axis value of the translation's offset.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.TranslateTransform3D.OffsetZProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.TranslateTransform3D.OffsetZ" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.TranslateTransform3D.OffsetZ" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.TranslateTransform3D.Value">
      <summary>Gets a <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> that represents the value of the translation.</summary>
      <returns>A <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> that represents the value of the translation.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.Vector3D">
      <summary>Represents a displacement in 3-D space. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.#ctor(System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
      <param name="x">The new <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure's <see cref="P:System.Windows.Media.Media3D.Vector3D.X" /> value.</param>
      <param name="y">The new <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure's <see cref="P:System.Windows.Media.Media3D.Vector3D.Y" /> value.</param>
      <param name="z">The new <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure's <see cref="P:System.Windows.Media.Media3D.Vector3D.Z" /> value.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.Add(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Point3D)">
      <summary>Translates the specified <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure by the specified <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure and returns the result as a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>The result of translating <paramref name="point" /> by <paramref name="vector" />.</returns>
      <param name="vector">The <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure used to translate the specified <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</param>
      <param name="point">The <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure to be translated.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.Add(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
      <summary>Adds two <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structures and returns the result as a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
      <returns>The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</returns>
      <param name="vector1">The first <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to add.</param>
      <param name="vector2">The second <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to add.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.AngleBetween(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
      <summary>Retrieves the angle required to rotate the first specified  <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure into the second specified  <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
      <returns>The angle in degrees needed to rotate <paramref name="vector1" /> into <paramref name="vector2" />.</returns>
      <param name="vector1">The first <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to evaluate.</param>
      <param name="vector2">The second <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to evaluate.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.CrossProduct(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
      <summary>Calculates the cross product of two <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structures. </summary>
      <returns>The cross product of <paramref name="vector1" /> and <paramref name="vector2" />.</returns>
      <param name="vector1">The first <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to evaluate.</param>
      <param name="vector2">The second <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to evaluate.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.Divide(System.Windows.Media.Media3D.Vector3D,System.Double)">
      <summary>Divides the specified <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure by the specified scalar and returns the result as a <see cref="T:System.Windows.Media.Media3D.Vector3D" />. </summary>
      <returns>The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</returns>
      <param name="vector">The <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to be divided.</param>
      <param name="scalar">The scalar to divide <paramref name="vector" /> by.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.DotProduct(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
      <summary>Calculates the dot product of two <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structures. </summary>
      <returns>The dot product of <paramref name="vector1" /> and <paramref name="vector2" />.</returns>
      <param name="vector1">The first <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to evaluate.  </param>
      <param name="vector2">The second <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to evaluate.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.Equals(System.Object)">
      <summary>Determines whether the specified object is a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure and whether the <see cref="P:System.Windows.Media.Media3D.Vector3D.X" />, <see cref="P:System.Windows.Media.Media3D.Vector3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Vector3D.Z" /> properties of the specified <see cref="T:System.Object" /> are equal to the <see cref="P:System.Windows.Media.Media3D.Vector3D.X" />, <see cref="P:System.Windows.Media.Media3D.Vector3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Vector3D.Z" /> properties of this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure.</summary>
      <returns>true if <paramref name="o" /> is a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure and is identical with this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure; false otherwise.</returns>
      <param name="o">The object to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.Equals(System.Windows.Media.Media3D.Vector3D)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structures for equality. </summary>
      <returns>true if instances are equal; otherwise, false.</returns>
      <param name="value">The instance of Vector to compare against this instance.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.Equals(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structures for equality.</summary>
      <returns>true if the <see cref="P:System.Windows.Media.Media3D.Vector3D.X" />, <see cref="P:System.Windows.Media.Media3D.Vector3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Vector3D.Z" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; false otherwise.</returns>
      <param name="vector1">First <see cref="T:System.Windows.Media.Media3D.Vector3D" />  to compare.</param>
      <param name="vector2">Second <see cref="T:System.Windows.Media.Media3D.Vector3D" />  to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.GetHashCode">
      <summary>Gets a hash code for this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
      <returns>A hash code for this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Vector3D.Length">
      <summary>Gets the length of this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
      <returns>The length of this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Vector3D.LengthSquared">
      <summary>Gets the square of the length of this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
      <returns>The square of the length of this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.Multiply(System.Double,System.Windows.Media.Media3D.Vector3D)">
      <summary>Multiplies the specified scalar by the specified <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure and returns the result as a <see cref="T:System.Windows.Media.Media3D.Vector3D" />. </summary>
      <returns>The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</returns>
      <param name="scalar">The scalar to multiply.</param>
      <param name="vector">The <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to multiply.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.Multiply(System.Windows.Media.Media3D.Vector3D,System.Double)">
      <summary>Multiplies the specified <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure by the specified scalar and returns the result as a <see cref="T:System.Windows.Media.Media3D.Vector3D" />. </summary>
      <returns>The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</returns>
      <param name="vector">The <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to multiply.</param>
      <param name="scalar">The scalar to multiply.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.Multiply(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Matrix3D)">
      <summary>Transforms the coordinate space of the specified <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure using the specified <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>Returns the result of transforming <paramref name="vector" /> by <paramref name="matrix3D" />.</returns>
      <param name="vector">The <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to transform.</param>
      <param name="matrix">The transformation to apply to the <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.Negate">
      <summary>Negates a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.Normalize">
      <summary>Normalizes the specified <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.op_Addition(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Point3D)">
      <summary>Translates the specified <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure by the specified <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure and returns the result as a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>The result of translating <paramref name="point" /> by <paramref name="vector" />.</returns>
      <param name="vector">The <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure used to translate the specified <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure.</param>
      <param name="point">The <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure to be translated.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.op_Addition(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
      <summary>Adds two <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structures and returns the result as a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
      <returns>The sum of <paramref name="vector1" /> and <paramref name="vector2" />.</returns>
      <param name="vector1">The first <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to add.</param>
      <param name="vector2">The second <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to add.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.op_Division(System.Windows.Media.Media3D.Vector3D,System.Double)">
      <summary> Divides the specified <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure by the specified scalar and returns the result as a <see cref="T:System.Windows.Media.Media3D.Vector3D" />. </summary>
      <returns>The result of dividing <paramref name="vector" /> by <paramref name="scalar" />.</returns>
      <param name="vector">The <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to be divided.</param>
      <param name="scalar">The scalar to divide <paramref name="vector" /> by.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.op_Equality(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structures for equality.   </summary>
      <returns>true if the <see cref="P:System.Windows.Media.Media3D.Vector3D.X" />, <see cref="P:System.Windows.Media.Media3D.Vector3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Vector3D.Z" /> components of <paramref name="vector1" /> and <paramref name="vector2" /> are equal; false otherwise.</returns>
      <param name="vector1">The first <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to compare.</param>
      <param name="vector2">The second <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.op_Explicit(System.Windows.Media.Media3D.Vector3D)~System.Windows.Media.Media3D.Size3D">
      <summary>Converts a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure into a <see cref="T:System.Windows.Media.Media3D.Size3D" />.</summary>
      <returns>The result of converting <paramref name="vector" />.</returns>
      <param name="vector">The vector to convert.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.op_Explicit(System.Windows.Media.Media3D.Vector3D)~System.Windows.Media.Media3D.Point3D">
      <summary>Converts a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure into a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure. </summary>
      <returns>The result of converting <paramref name="vector" />.</returns>
      <param name="vector">The vector to convert.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.op_Inequality(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
      <summary>Compares two <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structures for inequality.</summary>
      <returns>true if the <see cref="P:System.Windows.Media.Media3D.Vector3D.X" />, <see cref="P:System.Windows.Media.Media3D.Vector3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Vector3D.Z" /> components of <paramref name="vector3D1" /> and <paramref name="vector3D2" /> are different; false otherwise.</returns>
      <param name="vector1">The first <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to compare.</param>
      <param name="vector2">The second <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to compare.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.op_Multiply(System.Double,System.Windows.Media.Media3D.Vector3D)">
      <summary>Multiplies the specified scalar by the specified <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure and returns the result as a <see cref="T:System.Windows.Media.Media3D.Vector3D" />. </summary>
      <returns>The result of multiplying <paramref name="scalar" /> and <paramref name="vector" />.</returns>
      <param name="scalar">The scalar to multiply.</param>
      <param name="vector">The <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to multiply.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.op_Multiply(System.Windows.Media.Media3D.Vector3D,System.Double)">
      <summary>Multiplies the specified <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure by the specified scalar and returns the result as a <see cref="T:System.Windows.Media.Media3D.Vector3D" />. </summary>
      <returns>The result of multiplying <paramref name="vector" /> and <paramref name="scalar" />.</returns>
      <param name="vector">The <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to multiply.</param>
      <param name="scalar">The scalar to multiply.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.op_Multiply(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Matrix3D)">
      <summary>Transforms the coordinate space of the specified <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure using the specified <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> structure. </summary>
      <returns>The result of transforming <paramref name="vector" /> by <paramref name="matrix" />.</returns>
      <param name="vector">The <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to transform.</param>
      <param name="matrix">The transformation to apply to the <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.op_Subtraction(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Point3D)">
      <summary>Subtracts a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure from a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
      <returns>The result of subtracting <paramref name="point" /> from <paramref name="vector" />.</returns>
      <param name="vector">The <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to be subtracted from.</param>
      <param name="point">The <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure to subtract from <paramref name="vector" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.op_Subtraction(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
      <summary>Subtracts a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure from a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
      <returns>The result of subtracting <paramref name="vector2" /> from <paramref name="vector1" />.</returns>
      <param name="vector1">The <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to be subtracted from.</param>
      <param name="vector2">The <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to subtract from <paramref name="vector1" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.op_UnaryNegation(System.Windows.Media.Media3D.Vector3D)">
      <summary>Negates a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
      <returns>A <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure with <see cref="P:System.Windows.Media.Media3D.Vector3D.X" />, <see cref="P:System.Windows.Media.Media3D.Vector3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Vector3D.Z" /> values opposite of the <see cref="P:System.Windows.Media.Media3D.Vector3D.X" />, <see cref="P:System.Windows.Media.Media3D.Vector3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Vector3D.Z" /> values of <paramref name="vector" />.</returns>
      <param name="vector">The <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to negate.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.Parse(System.String)">
      <summary>Converts a <see cref="T:System.String" /> representation of a 3-D vector into the equivalent <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
      <returns>The equivalent <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure.</returns>
      <param name="source">The <see cref="T:System.String" /> representation of the 3-D vector.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.Subtract(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Point3D)">
      <summary>Subtracts a <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure from a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
      <returns>The result of subtracting <paramref name="point" /> from <paramref name="vector" />.</returns>
      <param name="vector">The <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to be subtracted from.</param>
      <param name="point">The <see cref="T:System.Windows.Media.Media3D.Point3D" /> structure to subtract from <paramref name="vector" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.Subtract(System.Windows.Media.Media3D.Vector3D,System.Windows.Media.Media3D.Vector3D)">
      <summary>Subtracts a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure from a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
      <returns>The result of subtracting <paramref name="vector2" /> from <paramref name="vector1" />.</returns>
      <param name="vector1">The <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to be subtracted from.</param>
      <param name="vector2">The <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to subtract from <paramref name="vector1" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>This member is part of the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly by your code. For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>String representation of this object.</returns>
      <param name="format">The string specifying the format to use. -or- null to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
      <param name="provider">The IFormatProvider to use to format the value. -or- null to obtain the numeric format information from the current locale setting of the operating system.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.ToString">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
      <returns>A string containing the <see cref="P:System.Windows.Media.Media3D.Vector3D.X" />, <see cref="P:System.Windows.Media.Media3D.Vector3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Vector3D.Z" /> values of this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3D.ToString(System.IFormatProvider)">
      <summary>Creates a <see cref="T:System.String" /> representation of this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
      <returns>Returns a <see cref="T:System.String" /> containing the <see cref="P:System.Windows.Media.Media3D.Vector3D.X" />, <see cref="P:System.Windows.Media.Media3D.Vector3D.Y" />, and <see cref="P:System.Windows.Media.Media3D.Vector3D.Z" /> values of this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure.</returns>
      <param name="provider">Culture-specific formatting information.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Vector3D.X">
      <summary>Gets or sets the <see cref="P:System.Windows.Media.Media3D.Vector3D.X" /> component of this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
      <returns>The <see cref="P:System.Windows.Media.Media3D.Vector3D.X" /> component of this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Vector3D.Y">
      <summary>Gets or sets the <see cref="P:System.Windows.Media.Media3D.Vector3D.Y" /> component of this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
      <returns>The <see cref="P:System.Windows.Media.Media3D.Vector3D.Y" /> component of this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Vector3D.Z">
      <summary>Gets or sets the <see cref="P:System.Windows.Media.Media3D.Vector3D.Z" /> component of this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
      <returns>The <see cref="P:System.Windows.Media.Media3D.Vector3D.Z" /> component of this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. The default value is 0.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.Vector3DCollection">
      <summary> Collection of <see cref="T:System.Windows.Media.Media3D.Vector3D" /> objects. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Media.Media3D.Vector3D})">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" /> class using the specified collection.</summary>
      <param name="collection">Collection with which to instantiate the Vector3DCollection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" /> class with the specified capacity.</summary>
      <param name="capacity">Integer that specifies the capacity of the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.Add(System.Windows.Media.Media3D.Vector3D)">
      <summary>Adds a Vector3D to the collection. </summary>
      <param name="value">Vector3D to be added to the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.Clear">
      <summary>Removes all elements from the collection. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.Clone">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" />, making deep copies of this object's values. When copying dependency properties, this method copies resource references and data bindings (but they might no longer resolve) but not animations or their current values.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.CloneCurrentValue">
      <summary>Creates a modifiable clone of this <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" /> object, making deep copies of this object's current values. Resource references, data bindings, and animations are not copied, but their current values are.</summary>
      <returns>A modifiable clone of the current object. The cloned object's <see cref="P:System.Windows.Freezable.IsFrozen" /> property will be false even if the source's <see cref="P:System.Windows.Freezable.IsFrozen" /> property was true.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.Contains(System.Windows.Media.Media3D.Vector3D)">
      <summary>Determines whether the collection contains the specified element. </summary>
      <returns>true if <paramref name="value" /> is found in the collection; otherwise, false.</returns>
      <param name="value">Vector3D to be found in the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.CopyTo(System.Windows.Media.Media3D.Vector3D[],System.Int32)">
      <summary>Copies the elements of the collection into the specified array, starting at the specified index position. </summary>
      <param name="array">Array into which to copy.</param>
      <param name="index">Position into which to copy.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Vector3DCollection.Count">
      <summary>Gets the number of <see cref="T:System.Windows.Media.Media3D.Vector3D" /> objects contained in the <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" />. </summary>
      <returns>The number of <see cref="T:System.Windows.Media.Media3D.Vector3D" /> objects contained in the <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.GetEnumerator">
      <summary>Returns an enumerator that can iterate through the collection.</summary>
      <returns>An enumerator that can iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.IndexOf(System.Windows.Media.Media3D.Vector3D)">
      <summary>Gets the index position of the first occurrence of the specified <see cref="T:System.Windows.Media.Media3D.Vector3D" />.</summary>
      <returns>The index position of the specified Vector3D.</returns>
      <param name="value">The item to search for.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.Insert(System.Int32,System.Windows.Media.Media3D.Vector3D)">
      <summary>Inserts a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> object into this <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" /> at the specified index position.</summary>
      <param name="index">The index position at which to insert <paramref name="value" />, the specified Vector3D.</param>
      <param name="value">The item to insert.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Vector3DCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Media3D.Vector3D" /> at the specified zero-based index.</summary>
      <returns>The item at the specified index.</returns>
      <param name="index">The zero-based index of the Vector3D object to get or set.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.Parse(System.String)">
      <summary>Converts a String representation of a collection of <see cref="T:System.Windows.Media.Media3D.Vector3D" /> objects into an equivalent <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" />.</summary>
      <returns>Returns the equivalent Vector3DCollection.</returns>
      <param name="source">The string representation of the collection of Vector3D objects.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.Remove(System.Windows.Media.Media3D.Vector3D)">
      <summary>Removes the first occurrence of the specified <see cref="T:System.Windows.Media.Media3D.Vector3D" /> from the <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" />.</summary>
      <returns>true if <paramref name="value" /> was removed from the collection; otherwise, false. </returns>
      <param name="value">The Vector3D to remove from this collection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Windows.Media.Media3D.Vector3D" /> at the specified index position from the <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" />.</summary>
      <param name="index">The index position of the <see cref="T:System.Windows.Media.Media3D.Vector3D" /> to remove.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Vector3DCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.</summary>
      <returns>true if the the <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">A zero-based <see cref="T:System.Array" /> that receives the copied items from the <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" />.</param>
      <param name="index">The first position in the specified <see cref="T:System.Array" /> to receive the copied contents.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Vector3DCollection.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>true if access to the <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Vector3DCollection.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.System#Collections#IList#Add(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.System#Collections#IList#Contains(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
      <param name="index">The zero-based index at which to insert the <see cref="T:System.Object" />.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" />.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Vector3DCollection.System#Collections#IList#IsFixedSize">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
      <returns>true if the the <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Vector3DCollection.System#Collections#IList#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsReadOnly" />.</summary>
      <returns>true if the the <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Vector3DCollection.System#Collections#IList#Item(System.Int32)">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.System#Collections#IList#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>For a description of this member, see <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />.</summary>
      <returns>A <see cref="T:System.String" /> containing the value of the current instance in the specified format.</returns>
      <param name="format">The <see cref="T:System.String" /> specifying the format to use.-or- null (Nothing in Visual Basic) to use the default format defined for the type of the <see cref="T:System.IFormattable" /> implementation.</param>
      <param name="provider">The <see cref="T:System.IFormatProvider" /> to use to format the value.-or- null (Nothing in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.ToString">
      <summary>Creates a string representation of this <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" />. </summary>
      <returns>String representation of the object.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.ToString(System.IFormatProvider)">
      <summary>Creates a string representation of this <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" />. </summary>
      <returns>String representation of the object.</returns>
      <param name="provider">Culture-specific formatting information.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.Vector3DCollection.Enumerator">
      <summary>Enumerates <see cref="T:System.Windows.Vector" /> items in a <see cref="T:System.Windows.Media.VectorCollection" />. </summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.Vector3DCollection.Enumerator.Current">
      <summary>Gets the current element in the collection.</summary>
      <returns>The current element in the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element in the collection.</summary>
      <returns>true if the enumerator successfully advanced to the next element; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.Enumerator.Reset">
      <summary>Resets the enumerator to its initial position, which is before the first element in the collection. </summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.Vector3DCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollection.Enumerator.System#IDisposable#Dispose">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Windows.Media.Media3D.Vector3DCollectionConverter">
      <summary>Converts instances of other types to and from instances of <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollectionConverter.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Windows.Media.Media3D.Vector3DCollectionConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollectionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> Returns a value that indicates whether this type converter can convert from a specified type. </summary>
      <returns>True if this converter can convert from the specified type; false otherwise.</returns>
      <param name="context">ITypeDescriptorContext for this call.</param>
      <param name="sourceType">Type being queried for support.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollectionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Gets a value that indicates whether this type converter can convert to the given type. </summary>
      <returns>True if this converter can convert to the provided type; false if not.</returns>
      <param name="context">The ITypeDescriptorContext for this call.</param>
      <param name="destinationType">The Type being queried for support.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollectionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert to a <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" /> from the given object. </summary>
      <returns>Vector3DCollection that was constructed.</returns>
      <param name="context">The ITypeDescriptorContext for this call.</param>
      <param name="culture">The CultureInfo which is respected when converting.</param>
      <param name="value">The object to convert to an instance of Vector3DCollection.</param>
      <exception cref="T:System.NotSupportedException">A NotSupportedException is thrown if the example object is null or is not a valid type which can be converted to a Vector3DCollection.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DCollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert an instance of <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" /> to the given type. </summary>
      <returns>The object which was constructoed.</returns>
      <param name="context">The ITypeDescriptorContext for this call.</param>
      <param name="culture">The CultureInfo which is respected when converting.</param>
      <param name="value">The object to convert to an instance of <paramref name="destinationType" />.</param>
      <param name="destinationType">The type to which the Matrix3D instance will be converted.</param>
      <exception cref="T:System.NotSupportedException">Throws NotSupportedException if the example object is null or is not a Vector3DCollection, or if the destinationType isn't one of the valid destination types.</exception>
    </member>
    <member name="T:System.Windows.Media.Media3D.Vector3DConverter">
      <summary> Converts instances of other types to and from a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DConverter.#ctor">
      <summary> Initializes a new instance of <see cref="T:System.Windows.Media.Media3D.Vector3DConverter" />. </summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> Determines whether a class can be converted from a given type to an instance of a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure.  </summary>
      <returns>Indicates whether the type can be converted to a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure.ValueMeaningfalseThe converter cannot convert from the provided type.trueThe converter can convert the provided type to a <see cref="T:System.Windows.Media.Media3D.Vector3D" />.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="sourceType">The type of the source that is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary> Determines whether an instance of a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure can be converted to a different type. </summary>
      <returns>Indicates whether this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure can be converted to <paramref name="destinationType" />.ValueMeaningfalseThe converter cannot convert this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to the specified type.trueThe converter can convert this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to the specified type.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="destinationType">The desired type that this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure is being evaluated for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary> Attempts to convert a specified object to a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure. </summary>
      <returns>The <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure created from the converted <paramref name="value" />.</returns>
      <param name="context">The ITypeDescriptorContext for this call.</param>
      <param name="culture">Describes the <see cref="T:System.Globalization.CultureInfo" /> of the type being converted.</param>
      <param name="value">The object being converted.</param>
      <exception cref="T:System.NotSupportedException">Occurs if the specified object is null or is a type that cannot be converted to to a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.Vector3DConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary> Attempts to convert a <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to a specified type. </summary>
      <returns>The object created from converting this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure.</returns>
      <param name="context">Describes the context information of a type.</param>
      <param name="culture">The CultureInfo which is respected when converting.</param>
      <param name="value">The <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure to convert.</param>
      <param name="destinationType">The type this <see cref="T:System.Windows.Media.Media3D.Vector3D" /> structure is converted to.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.Viewport2DVisual3D">
      <summary>Renders the 2-D children within the specified 3-D viewport bounds.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Viewport2DVisual3D.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Viewport2DVisual3D" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.Viewport2DVisual3D.CacheMode">
      <summary>Gets or sets a cached representation of the <see cref="T:System.Windows.Media.Media3D.Viewport2DVisual3D" />. </summary>
      <returns>A <see cref="T:System.Windows.Media.CacheMode" /> that holds a cached representation of the <see cref="T:System.Windows.Media.Media3D.Viewport2DVisual3D" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.Viewport2DVisual3D.CacheModeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.CacheMode" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.CacheMode" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Viewport2DVisual3D.Geometry">
      <summary>Gets or sets the 3-D geometry for this <see cref="T:System.Windows.Media.Media3D.Viewport2DVisual3D" />.</summary>
      <returns>The 3-D geometry for this <see cref="T:System.Windows.Media.Media3D.Viewport2DVisual3D" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.Viewport2DVisual3D.GeometryProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.Geometry" /> dependency property.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Viewport2DVisual3D.GetIsVisualHostMaterial(System.Windows.Media.Media3D.Material)">
      <summary>Gets the value of the <see cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.IsVisualHostMaterial" /> attached property for a specified <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>The <see cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.IsVisualHostMaterial" /> property value for the element.</returns>
      <param name="element">The element from which the property value is read.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Viewport2DVisual3D.IsVisualHostMaterial">
      <summary>Gets or sets a value that specifies whether a material should be interactive.</summary>
      <returns>true if the material should be interactive; otherwise, false. The default is false.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.Viewport2DVisual3D.IsVisualHostMaterialProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.IsVisualHostMaterial" /> attached property.</summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.Viewport2DVisual3D.Material">
      <summary>Gets or sets the material that describes the appearance of the 3-D object.</summary>
      <returns>The material for the 3-D object.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.Viewport2DVisual3D.MaterialProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.Material" /> dependency property.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Viewport2DVisual3D.SetIsVisualHostMaterial(System.Windows.Media.Media3D.Material,System.Boolean)">
      <summary>Sets the value of the <see cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.IsVisualHostMaterial" /> attached property to a specified element.</summary>
      <param name="element">The element to which the attached property is written.</param>
      <param name="value">The required <see cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.IsVisualHostMaterial" /> value.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Viewport2DVisual3D.Visual">
      <summary>Gets or sets the 2-D visual to be placed on the 3-D object.</summary>
      <returns>The visual to be placed on the 3-D object.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.Viewport2DVisual3D.VisualProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.Viewport2DVisual3D.Visual" /> dependency property.</summary>
    </member>
    <member name="T:System.Windows.Media.Media3D.Viewport3DVisual">
      <summary>Renders the <see cref="T:System.Windows.Media.Media3D.Visual3D" /> children within the specified 2D viewport bounds.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Viewport3DVisual.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Viewport3DVisual" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.Viewport3DVisual.BitmapEffect">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Effects.BitmapEffect" /> applied to the Viewport3DVisual.</summary>
      <returns>BitmapEffect applied to the Viewport3DVisual.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Viewport3DVisual.BitmapEffectInput">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Effects.BitmapEffectInput" /> applied to the <see cref="T:System.Windows.Media.Media3D.Viewport3DVisual" />. </summary>
      <returns>BitmapEffectInput applied to the Viewport3DVisual.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Viewport3DVisual.Camera">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Media3D.Camera" /> used by the <see cref="T:System.Windows.Media.Media3D.Viewport3DVisual" />.  </summary>
      <returns>Camera used by the <see cref="T:System.Windows.Media.Media3D.Viewport3DVisual" />.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.Viewport3DVisual.CameraProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.Viewport3DVisual.Camera" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.Viewport3DVisual.Camera" /> dependency property.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Viewport3DVisual.Children">
      <summary>Gets a collection of <see cref="T:System.Windows.Media.Media3D.Visual3D" /> objects contained by <see cref="T:System.Windows.Media.Media3D.Viewport3DVisual" />. </summary>
      <returns>Collection of the objects contained by the <see cref="T:System.Windows.Media.Media3D.Viewport3DVisual" />.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Viewport3DVisual.Clip">
      <summary>Gets or sets the clipping region of the <see cref="T:System.Windows.Media.Media3D.Viewport3DVisual" />.</summary>
      <returns>
        <see cref="T:System.Windows.Media.Geometry" /> that defines the clipping area.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Viewport3DVisual.ContentBounds">
      <summary>Gets the bounding box for the contents of the <see cref="T:System.Windows.Media.Media3D.Viewport3DVisual" />.</summary>
      <returns>
        <see cref="T:System.Windows.Rect" /> that defines the bounding box.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Viewport3DVisual.DescendantBounds">
      <summary>Gets the union of all of the content bounding boxes for all of the descendants of the <see cref="T:System.Windows.Media.Media3D.Viewport3DVisual" />, but not including the contents of the Viewport3DVisual.</summary>
      <returns>
        <see cref="T:System.Windows.Rect" /> that defines the union.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Viewport3DVisual.HitTest(System.Windows.Media.HitTestFilterCallback,System.Windows.Media.HitTestResultCallback,System.Windows.Media.HitTestParameters)">
      <summary>Initiate a hit test on the <see cref="T:System.Windows.Media.Media3D.Viewport3DVisual" /> by using the <see cref="T:System.Windows.Media.HitTestFilterCallback" /> and <see cref="T:System.Windows.Media.HitTestResultCallback" /> objects.</summary>
      <param name="filterCallback">Value of type HitTestFilterCallback.</param>
      <param name="resultCallback">Value of type HitTestResultCallback.</param>
      <param name="hitTestParameters">Value of type <see cref="T:System.Windows.Media.HitTestParameters" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Viewport3DVisual.HitTest(System.Windows.Point)">
      <summary>Returns the top-most visual object of a hit test performed at a specified <see cref="T:System.Windows.Point" />.</summary>
      <returns>The hit test result of the visual returned as a <see cref="T:System.Windows.Media.HitTestResult" /> type.</returns>
      <param name="point">Point against which to hit test.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Viewport3DVisual.Offset">
      <summary>Gets or sets the offset value of the <see cref="T:System.Windows.Media.Media3D.Viewport3DVisual" />.</summary>
      <returns>
        <see cref="T:System.Windows.Vector" /> that represents the offset value of the Viewport3DVisual.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Viewport3DVisual.Opacity">
      <summary>Gets or sets the opacity of the <see cref="T:System.Windows.Media.Media3D.Viewport3DVisual" />.</summary>
      <returns>The value of the Opacity property is expressed as a value between 0 and 1, specifying a range from fully transparent to fully opaque. A value of 0 indicates that the Opacity is completely transparent, while a value of 1 indicates that the Opacity is completely opaque. A value 0.5 would indicate the Opacity is 50% opaque, a value of 0.725 would indicate the Opacity is 72.5% opaque, and so on. Values less than 0 are treated as 0, while values greater than 1 are treated as 1.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Viewport3DVisual.OpacityMask">
      <summary>Gets or sets the opacity mask value of the <see cref="T:System.Windows.Media.Media3D.Viewport3DVisual" />.</summary>
      <returns>
        <see cref="T:System.Windows.Media.Brush" /> that represents the opacity mask value of the Viewport3DVisual.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Viewport3DVisual.Parent">
      <summary>Gets the parent <see cref="T:System.Windows.Media.Visual" /> for the Viewport3DVisual.</summary>
      <returns>Visual parent of the Viewport3DVisual.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Viewport3DVisual.Transform">
      <summary>Gets or sets the transform value of the <see cref="T:System.Windows.Media.Media3D.Viewport3DVisual" />.</summary>
      <returns>
        <see cref="T:System.Windows.Media.Transform" /> applied to the Viewport3DVisual.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Viewport3DVisual.Viewport">
      <summary>Gets or sets the rectangle in which the <see cref="T:System.Windows.Media.Media3D.Viewport3DVisual" /> will be rendered.  </summary>
      <returns>Rectangle in which the contents of the Viewport3D will be rendered.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.Viewport3DVisual.ViewportProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.Viewport3DVisual.Viewport" /> dependency property.</summary>
      <returns>The identifier for the <see cref="P:System.Windows.Media.Media3D.Viewport3DVisual.Viewport" /> dependency property.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.Visual3D">
      <summary>Provides services and properties common to visual 3-D objects, including hit-testing, coordinate transformation, and bounding box calculations.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3D.AddVisual3DChild(System.Windows.Media.Media3D.Visual3D)">
      <summary>Defines the parent-child relationship between two 3-D visuals.</summary>
      <param name="child">The child 3-D visual object to add to parent 3-D visual.</param>
      <exception cref="T:System.InvalidOperationException">The children collection cannot be modified when a visual children iteration is in progress.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3D.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)">
      <summary>Applies the effect of a given <see cref="T:System.Windows.Media.Animation.AnimationClock" /> to a given dependency property.</summary>
      <param name="dp">The <see cref="T:System.Windows.DependencyProperty" /> to animate.</param>
      <param name="clock">The <see cref="T:System.Windows.Media.Animation.AnimationClock" /> that animates the property.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3D.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)">
      <summary>Applies the effect of a given <see cref="T:System.Windows.Media.Animation.AnimationClock" /> to a given dependency property. The effect of the new <see cref="T:System.Windows.Media.Animation.AnimationClock" /> on any current animations is determined by the value of the <paramref name="handoffBehavior" /> parameter.</summary>
      <param name="dp">The <see cref="T:System.Windows.DependencyProperty" /> to animate.</param>
      <param name="clock">The <see cref="T:System.Windows.Media.Animation.AnimationClock" /> that animates the property.</param>
      <param name="handoffBehavior">Determines how the new <see cref="T:System.Windows.Media.Animation.AnimationClock" /> will transition from or affect any current animations on the property.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3D.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)">
      <summary>Initiates an animation sequence for the <see cref="T:System.Windows.DependencyProperty" /> object, based on the specified <see cref="T:System.Windows.Media.Animation.AnimationTimeline" />.</summary>
      <param name="dp">The object to animate.</param>
      <param name="animation">The timeline with the necessary functionality to animate the property.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3D.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)">
      <summary>Initiates an animation sequence for the <see cref="T:System.Windows.DependencyProperty" />.object, based on both the specified <see cref="T:System.Windows.Media.Animation.AnimationTimeline" /> and <see cref="T:System.Windows.Media.Animation.HandoffBehavior" />.</summary>
      <param name="dp">The object to animate.</param>
      <param name="animation">The timeline with the necessary functionality to tailor the new animation.</param>
      <param name="handoffBehavior">The object specifying the manner in which to interact with all relevant animation sequences.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3D.FindCommonVisualAncestor(System.Windows.DependencyObject)">
      <summary>Returns the common ancestor of the visual object and another specified visual object.</summary>
      <returns>The common ancestor of the current visual object and <paramref name="otherVisual" />, or null if no common ancestor is found.</returns>
      <param name="otherVisual">The visual object with which to find a common ancestor.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3D.GetAnimationBaseValue(System.Windows.DependencyProperty)">
      <summary>Retrieves the base value of the specified <see cref="T:System.Windows.DependencyProperty" /> object.</summary>
      <returns>The object representing the base value of <paramref name="Dp" />.</returns>
      <param name="dp">The object for which the base value is being requested.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3D.GetVisual3DChild(System.Int32)">
      <summary>Returns the specified <see cref="T:System.Windows.Media.Media3D.Visual3D" /> in the parent <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" />.</summary>
      <returns>The child in the collection at the specified <paramref name="index" /> value.</returns>
      <param name="index">The index of the 3-D visual object in the collection.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> value is invalid.</exception>
    </member>
    <member name="P:System.Windows.Media.Media3D.Visual3D.HasAnimatedProperties">
      <summary>Gets a value indicating whether this <see cref="T:System.Windows.Media.Media3D.Visual3D" /> has any animated properties.</summary>
      <returns>true if this element has animations; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3D.IsAncestorOf(System.Windows.DependencyObject)">
      <summary>Determines whether the visual object is an ancestor of the descendant visual object.</summary>
      <returns>True if the visual object is an ancestor of <paramref name="descendant" />; otherwise, false.</returns>
      <param name="descendant">Visual that is a possible descendant.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3D.IsDescendantOf(System.Windows.DependencyObject)">
      <summary>Determines whether the visual object is a descendant of the ancestor visual object. </summary>
      <returns>true if the visual object is a descendant of <paramref name="ancestor" />; otherwise, false.</returns>
      <param name="ancestor">Visual that is a possible ancestor.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3D.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
      <summary>Called when the <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" /> of the visual object is modified.</summary>
      <param name="visualAdded">The <see cref="T:System.Windows.Media.Media3D.Visual3D" /> that was added to the collection.</param>
      <param name="visualRemoved">The <see cref="T:System.Windows.Media.Media3D.Visual3D" /> that was removed from the collection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3D.OnVisualParentChanged(System.Windows.DependencyObject)">
      <summary>Called when the parent of the 3-D visual object is changed.</summary>
      <param name="oldParent">A value of type <see cref="T:System.Windows.DependencyObject" /> that represents the previous parent of the <see cref="T:System.Windows.Media.Media3D.Visual3D" /> object. If the <see cref="T:System.Windows.Media.Media3D.Visual3D" /> object did not have a previous parent, the value of the parameter is null.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3D.RemoveVisual3DChild(System.Windows.Media.Media3D.Visual3D)">
      <summary>Removes the parent-child relationship between two 3-D visuals.</summary>
      <param name="child">The child 3-D visual object to remove from the parent visual.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Visual3D.Transform">
      <summary>Gets or sets the transformation that is applied to the 3-D object.</summary>
      <returns>The transformation to apply to the 3-D object. The default is the <see cref="P:System.Windows.Media.Media3D.Transform3D.Identity" /> transformation.</returns>
    </member>
    <member name="F:System.Windows.Media.Media3D.Visual3D.TransformProperty">
      <summary>Identifies the <see cref="P:System.Windows.Media.Media3D.Visual3D.Transform" /> dependency property.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3D.TransformToAncestor(System.Windows.Media.Media3D.Visual3D)">
      <summary>Returns a transform that can be used to transform coordinates from this <see cref="T:System.Windows.Media.Media3D.Visual3D" /> object to the specified <see cref="T:System.Windows.Media.Media3D.Visual3D" /> ancestor of the object.</summary>
      <returns>A <see cref="T:System.Windows.Media.Media3D.GeneralTransform3D" /> object or null, if the transform cannot be created.</returns>
      <param name="ancestor">The <see cref="T:System.Windows.Media.Media3D.Visual3D" /> to which the coordinates are transformed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ancestor" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The specified <paramref name="ancestor" /> object is not an ancestor of this object.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Media.Media3D.Visual3D" /> objects are not related.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3D.TransformToAncestor(System.Windows.Media.Visual)">
      <summary>Returns a transform that can be used to transform coordinates from this <see cref="T:System.Windows.Media.Media3D.Visual3D" /> object to the specified <see cref="T:System.Windows.Media.Visual" /> ancestor of the object.</summary>
      <returns>A <see cref="T:System.Windows.Media.Media3D.GeneralTransform3DTo2D" /> object or null, if the transform cannot be created.</returns>
      <param name="ancestor">The <see cref="T:System.Windows.Media.Visual" /> to which the coordinates are transformed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ancestor" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The specified <paramref name="ancestor" /> object is not an ancestor of this object.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3D.TransformToDescendant(System.Windows.Media.Media3D.Visual3D)">
      <summary>Returns a transform that can be used to transform coordinates from this <see cref="T:System.Windows.Media.Media3D.Visual3D" /> object to the specified <see cref="T:System.Windows.Media.Media3D.Visual3D" /> descent object.</summary>
      <returns>A <see cref="T:System.Windows.Media.Media3D.GeneralTransform3D" /> object or null, if the transform from <paramref name="descendant" /> to this object is non-invertible.</returns>
      <param name="descendant">The <see cref="T:System.Windows.Media.Media3D.Visual3D" /> to which the coordinates are transformed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="descendant" /> is null.</exception>
      <exception cref="T:System.ArgumentException">This object is not an ancestor of the specified <paramref name="descendant" /> object.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Media.Media3D.Visual3D" /> objects are not related.</exception>
    </member>
    <member name="P:System.Windows.Media.Media3D.Visual3D.Visual3DChildrenCount">
      <summary>Gets the number of child elements for the <see cref="T:System.Windows.Media.Media3D.Visual3D" /> object.</summary>
      <returns>The number of child elements.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Visual3D.Visual3DModel">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Media3D.Model3D" /> object to render.</summary>
      <returns>The <see cref="T:System.Windows.Media.Media3D.Model3D" /> object to render.</returns>
    </member>
    <member name="T:System.Windows.Media.Media3D.Visual3DCollection">
      <summary>Represents an ordered collection of <see cref="T:System.Windows.Media.Media3D.Visual3D" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3DCollection.Add(System.Windows.Media.Media3D.Visual3D)">
      <summary>Adds a <see cref="T:System.Windows.Media.Media3D.Visual3D" /> object to the end of this <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" />.</summary>
      <param name="value">The Visual3D to add to this Visual3DCollection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3DCollection.Clear">
      <summary>Removes all the items from this <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3DCollection.Contains(System.Windows.Media.Media3D.Visual3D)">
      <summary>Determines whether a specified <see cref="T:System.Windows.Media.Media3D.Visual3D" /> is in this <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" />.</summary>
      <returns>True if <paramref name="value" />, the specified Visual3D, is in this Visual3DCollection; otherwise, false.</returns>
      <param name="value">Visual3D to locate in this Visual3Dcollection.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3DCollection.CopyTo(System.Windows.Media.Media3D.Visual3D[],System.Int32)">
      <summary>Copies the items of this Visual3DCollection, starting with the specified index, into an array of <see cref="T:System.Windows.Media.Media3D.Visual3D" /> objects.</summary>
      <param name="array">Array that is the destination of the items copied from this Visual3DCollection.</param>
      <param name="index">The index at which to begin copying.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Visual3DCollection.Count">
      <summary>Gets the number of items contained in a <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" />.</summary>
      <returns>The number of items contained in the Visual3Dcollection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3DCollection.GetEnumerator">
      <summary>Gets an enumerator for the <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3DCollection.IndexOf(System.Windows.Media.Media3D.Visual3D)">
      <summary>Gets the index of the first occurrence of the specified <see cref="T:System.Windows.Media.Media3D.Visual3D" /> object. </summary>
      <returns>The index of the specified <see cref="T:System.Windows.Media.Media3D.Visual3D" />, or -1 if <paramref name="value" /> is null or has a different visual parent.</returns>
      <param name="value">The <see cref="T:System.Windows.Media.Media3D.Visual3D" /> for which to search.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3DCollection.Insert(System.Int32,System.Windows.Media.Media3D.Visual3D)">
      <summary>Inserts a <see cref="T:System.Windows.Media.Media3D.Visual3D" /> object into this <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" /> at the specified index.</summary>
      <param name="index">The index at which to insert the Visual3D.</param>
      <param name="value">Visual3D to insert.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Visual3DCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Windows.Media.Media3D.Visual3D" /> at the specified zero-based index.</summary>
      <returns>The Visual3D at the specified index.</returns>
      <param name="index">The zero-based index of the Visual3D to get or set.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3DCollection.Remove(System.Windows.Media.Media3D.Visual3D)">
      <summary>Removes the first occurrence of the specified <see cref="T:System.Windows.Media.Media3D.Visual3D" /> object from this <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" />.</summary>
      <returns>true if <paramref name="value" /> was removed from the collection; otherwise, false. </returns>
      <param name="value">Visual3D to remove.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3DCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Windows.Media.Media3D.Visual3D" /> object at the specified index from this <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" />.</summary>
      <param name="index">Index of the Visual3D to remove.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Visual3DCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.</summary>
      <returns>true if the the <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3DCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3DCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">A zero-based <see cref="T:System.Array" /> that receives the copied items from the <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" />.</param>
      <param name="index">The first position in the specified <see cref="T:System.Array" /> to receive the copied contents.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Visual3DCollection.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>true if access to the <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" /> is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Visual3DCollection.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" />.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3DCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3DCollection.System#Collections#IList#Add(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The <see cref="T:System.Object" /> to add to the <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3DCollection.System#Collections#IList#Contains(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" />; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3DCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The <see cref="T:System.Object" /> to locate in the <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" />.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3DCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
      <param name="index">The zero-based index at which to insert the <see cref="T:System.Object" />.</param>
      <param name="value">The <see cref="T:System.Object" /> to insert into the <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" />.</param>
    </member>
    <member name="P:System.Windows.Media.Media3D.Visual3DCollection.System#Collections#IList#IsFixedSize">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
      <returns>true if the the <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Visual3DCollection.System#Collections#IList#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsReadOnly" />.</summary>
      <returns>true if the the <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.Media3D.Visual3DCollection.System#Collections#IList#Item(System.Int32)">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set. </param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3DCollection.System#Collections#IList#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" />.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.Visual3DCollection.Enumerator">
      <summary>Enumerates <see cref="T:System.Windows.Media.Media3D.Visual3D" /> items in a <see cref="T:System.Windows.Media.Media3D.Visual3DCollection" />.</summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.Visual3DCollection.Enumerator.Current">
      <summary>Gets the current element in the collection.</summary>
      <returns>The current element in the collection.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3DCollection.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element in the collection.</summary>
      <returns>true if the enumerator successfully advanced to the next element; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3DCollection.Enumerator.Reset">
      <summary>Resets the enumerator to its initial position, which is before the first element in the collection.</summary>
    </member>
    <member name="P:System.Windows.Media.Media3D.Visual3DCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Visual3DCollection.Enumerator.System#IDisposable#Dispose">
      <summary>This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.</summary>
    </member>
    <member name="T:System.Windows.Media.Media3D.Converters.Matrix3DValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Media.Media3D.Matrix3D" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Matrix3DValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Converters.Matrix3DValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Matrix3DValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if conversion from a given <see cref="T:System.String" /> to an instance of <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> is possible.</summary>
      <returns>true if the value can be converted; otherwise, false. </returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Matrix3DValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if an instance of <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
      <exception cref="T:System.ArgumentException">Occurs when <paramref name="value" /> is not a <see cref="T:System.Windows.Media.Media3D.Matrix3D" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Matrix3DValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Media.Media3D.Matrix3D" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">
        <see cref="T:System.String" /> value to convert into a <see cref="T:System.Windows.Media.Media3D.Matrix3D" />.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Matrix3DValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> object.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Media3D.Matrix3D" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.Converters.Point3DCollectionValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Point3DCollectionValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Converters.Point3DCollectionValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Point3DCollectionValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if conversion from a given <see cref="T:System.String" /> to an instance of <see cref="T:System.Windows.Media.Media3D.Point3DCollection" /> is possible.</summary>
      <returns>true if the value can be converted; otherwise, false. </returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Point3DCollectionValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if an instance of <see cref="T:System.Windows.Media.Media3D.Point3DCollection" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Media3D.Point3DCollection" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
      <exception cref="T:System.ArgumentException">Occurs when <paramref name="value" /> is not a <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Point3DCollectionValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Media3D.Point3DCollection" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">
        <see cref="T:System.String" /> value to convert into a <see cref="T:System.Windows.Media.Media3D.Point3DCollection" />.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Point3DCollectionValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Media.Media3D.Point3DCollection" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.Windows.Media.Media3D.Point3DCollection" /> object.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Media3D.Point3DCollection" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.Converters.Point3DValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Media.Media3D.Point3D" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Point3DValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Converters.Point3DValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Point3DValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if conversion from a given <see cref="T:System.String" /> to an instance of <see cref="T:System.Windows.Media.Media3D.Point3D" /> is possible.</summary>
      <returns>true if the value can be converted; otherwise, false. </returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Point3DValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if an instance of <see cref="T:System.Windows.Media.Media3D.Point3D" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Media3D.Point3D" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
      <exception cref="T:System.ArgumentException">Occurs when <paramref name="value" /> is not a <see cref="T:System.Windows.Media.Media3D.Point3D" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Point3DValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Media.Media3D.Point3D" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Media3D.Point3D" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">
        <see cref="T:System.String" /> value to convert into a <see cref="T:System.Windows.Media.Media3D.Point3D" />.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Point3DValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Media.Media3D.Point3D" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.Windows.Media.Media3D.Point3D" /> object.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Media3D.Point3D" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.Converters.Point4DValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Media.Media3D.Point4D" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Point4DValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Converters.Point4DValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Point4DValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if conversion from a given <see cref="T:System.String" /> to an instance of <see cref="T:System.Windows.Media.Media3D.Point4D" /> is possible.</summary>
      <returns>true if the value can be converted; otherwise, false. </returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Point4DValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if an instance of <see cref="T:System.Windows.Media.Media3D.Point4D" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Media3D.Point4D" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
      <exception cref="T:System.ArgumentException">Occurs when <paramref name="value" /> is not a <see cref="T:System.Windows.Media.Media3D.Point4D" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Point4DValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Media.Media3D.Point4D" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Media3D.Point4D" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">
        <see cref="T:System.String" /> value to convert into a <see cref="T:System.Windows.Media.Media3D.Point4D" />.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Point4DValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Media.Media3D.Point4D" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.Windows.Media.Media3D.Point4D" /> object.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Media3D.Point4D" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.Converters.QuaternionValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Media.Media3D.Quaternion" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.QuaternionValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Converters.QuaternionValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.QuaternionValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if conversion from a given <see cref="T:System.String" /> to an instance of <see cref="T:System.Windows.Media.Media3D.Quaternion" /> is possible.</summary>
      <returns>true if the value can be converted; otherwise, false. </returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.QuaternionValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if an instance of <see cref="T:System.Windows.Media.Media3D.Quaternion" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Media3D.Quaternion" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
      <exception cref="T:System.ArgumentException">Occurs when <paramref name="value" /> is not a <see cref="T:System.Windows.Media.Media3D.Quaternion" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.QuaternionValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Media.Media3D.Quaternion" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Media3D.Quaternion" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">
        <see cref="T:System.String" /> value to convert into a <see cref="T:System.Windows.Media.Media3D.Quaternion" />.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.QuaternionValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Media.Media3D.Quaternion" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.Windows.Media.Media3D.Quaternion" /> object.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Media3D.Quaternion" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.Converters.Rect3DValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Rect3DValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Converters.Rect3DValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Rect3DValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if conversion from a given <see cref="T:System.String" /> to an instance of <see cref="T:System.Windows.Media.Media3D.Rect3D" /> is possible.</summary>
      <returns>true if the value can be converted; otherwise, false.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Rect3DValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if an instance of <see cref="T:System.Windows.Media.Media3D.Rect3D" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Media3D.Rect3D" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
      <exception cref="T:System.ArgumentException">Occurs when <paramref name="value" /> is not a <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Rect3DValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Media3D.Rect3D" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">
        <see cref="T:System.String" /> value to convert into a <see cref="T:System.Windows.Media.Media3D.Rect3D" />.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Rect3DValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Media.Media3D.Rect3D" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.Windows.Media.Media3D.Rect3D" /> object.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Media3D.Rect3D" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.Converters.Size3DValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Media.Media3D.Size3D" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Size3DValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Converters.Size3DValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Size3DValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if conversion from a given <see cref="T:System.String" /> to an instance of <see cref="T:System.Windows.Media.Media3D.Size3D" /> is possible.</summary>
      <returns>true if the value can be converted; otherwise, false.</returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Size3DValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if an instance of <see cref="T:System.Windows.Media.Media3D.Size3D" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Media3D.Size3D" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
      <exception cref="T:System.ArgumentException">Occurs when <paramref name="value" /> is not a <see cref="T:System.Windows.Media.Media3D.Size3D" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Size3DValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Media.Media3D.Size3D" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Media3D.Size3D" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">
        <see cref="T:System.String" /> value to convert into a <see cref="T:System.Windows.Media.Media3D.Size3D" />.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Size3DValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Media.Media3D.Size3D" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.Windows.Media.Media3D.Size3D" /> object.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Media3D.Size3D" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.Converters.Vector3DCollectionValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Vector3DCollectionValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Converters.Vector3DCollectionValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Vector3DCollectionValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if conversion from a given <see cref="T:System.String" /> to an instance of <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" /> is possible.</summary>
      <returns>true if the value can be converted; otherwise, false. </returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Vector3DCollectionValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if an instance of <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
      <exception cref="T:System.ArgumentException">Occurs when <paramref name="value" /> is not a <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Vector3DCollectionValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">
        <see cref="T:System.String" /> value to convert into a <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" />.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Vector3DCollectionValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" /> object.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Media3D.Vector3DCollection" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="T:System.Windows.Media.Media3D.Converters.Vector3DValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.Windows.Media.Media3D.Vector3D" />.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Vector3DValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.Media3D.Converters.Vector3DValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Vector3DValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if conversion from a given <see cref="T:System.String" /> to an instance of <see cref="T:System.Windows.Media.Media3D.Vector3D" /> is possible.</summary>
      <returns>true if the value can be converted; otherwise, false. </returns>
      <param name="value">String to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Vector3DValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if an instance of <see cref="T:System.Windows.Media.Media3D.Vector3D" /> can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Media3D.Vector3D" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
      <exception cref="T:System.ArgumentException">Occurs when <paramref name="value" /> is not a <see cref="T:System.Windows.Media.Media3D.Vector3D" />.</exception>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Vector3DValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.Windows.Media.Media3D.Vector3D" />.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.Media3D.Vector3D" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">
        <see cref="T:System.String" /> value to convert into a <see cref="T:System.Windows.Media.Media3D.Vector3D" />.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="M:System.Windows.Media.Media3D.Converters.Vector3DValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.Windows.Media.Media3D.Vector3D" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.Windows.Media.Media3D.Vector3D" /> object.</returns>
      <param name="value">Instance of <see cref="T:System.Windows.Media.Media3D.Vector3D" /> to evaluate for conversion.</param>
      <param name="context">Context information used for conversion.</param>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.CharacterBufferRange">
      <summary>Describes a string of characters.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.CharacterBufferRange.#ctor(System.Char*,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" /> structure from a unmanaged character string.</summary>
      <param name="unsafeCharacterString">An unmanaged pointer reference to a character string.</param>
      <param name="characterLength">The number of characters in <paramref name="unsafecharacterString" /> to use.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.CharacterBufferRange.#ctor(System.Char[],System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" /> structure from a character array.</summary>
      <param name="characterArray">The character array.</param>
      <param name="offsetToFirstChar">The character buffer offset to the first character.</param>
      <param name="characterLength">The number of characters in <paramref name="characterArray" /> to use.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.CharacterBufferRange.#ctor(System.String,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" /> structure from a character string.</summary>
      <param name="characterString">The character string.</param>
      <param name="offsetToFirstChar">The character buffer offset to the first character.</param>
      <param name="characterLength">The number of characters in <paramref name="characterString" /> to use.</param>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.CharacterBufferRange.CharacterBufferReference">
      <summary>Gets a reference to the character buffer of a string.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> value representing the character buffer of a string.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.CharacterBufferRange.Empty">
      <summary>Gets an empty character string.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" /> object whose <see cref="P:System.Windows.Media.TextFormatting.CharacterBufferRange.Length" /> is equal to 0.</returns>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.CharacterBufferRange.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" /> object.</summary>
      <returns>true if <paramref name="o" /> is equal to the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" /> object; otherwise, false. If <paramref name="o" /> is not a <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" /> object, false is returned.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" /> object.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.CharacterBufferRange.Equals(System.Windows.Media.TextFormatting.CharacterBufferRange)">
      <summary>Determines whether the <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" /> object is equal to the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" /> object.</summary>
      <returns>true if <paramref name="value" /> is equal to the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" /> object; otherwise, false. If <paramref name="value" /> is not a <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" /> object, false is returned.</returns>
      <param name="value">The <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" /> to compare with the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" /> object.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.CharacterBufferRange.GetHashCode">
      <summary>Serves as a hash function for <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" />. It is suitable for use in hashing algorithms and data structures such as a hash table.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the hash code for the current object.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.CharacterBufferRange.Length">
      <summary>Gets the number of characters in the text source character store.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the total number of characters.</returns>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.CharacterBufferRange.op_Equality(System.Windows.Media.TextFormatting.CharacterBufferRange,System.Windows.Media.TextFormatting.CharacterBufferRange)">
      <summary>Compare two <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" /> strings for equality.</summary>
      <returns>true to show the specified <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" /> objects are equal; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.CharacterBufferRange.op_Inequality(System.Windows.Media.TextFormatting.CharacterBufferRange,System.Windows.Media.TextFormatting.CharacterBufferRange)">
      <summary>Compare two <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" /> strings for inequality.</summary>
      <returns>false to show <paramref name="left" /> is equal to <paramref name="right" />; otherwise, true.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" /> to compare.</param>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.CharacterBufferReference">
      <summary>Describes a character buffer for a text run.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.CharacterBufferReference.#ctor(System.Char*,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> structure using a specified unsafe character string.</summary>
      <param name="unsafeCharacterString">Pointer to character string.</param>
      <param name="characterLength">The length of <paramref name="unsafeCharacterString" />.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.CharacterBufferReference.#ctor(System.Char[],System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> structure using a specified character array.</summary>
      <param name="characterArray">The <see cref="T:System.Char" /> array.</param>
      <param name="offsetToFirstChar">The offset to the first character to use in <paramref name="characterArray" />.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.CharacterBufferReference.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> structure using a specified character string.</summary>
      <param name="characterString">The <see cref="T:System.String" /> containing the text characters.</param>
      <param name="offsetToFirstChar">The offset to the first character to use in <paramref name="characterString" />.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.CharacterBufferReference.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> object.</summary>
      <returns>true if <paramref name="obj" /> is equal to the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> object; otherwise, false. If <paramref name="obj" /> is not a <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> object, false is returned.</returns>
      <param name="obj">The object to compare with the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> object.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.CharacterBufferReference.Equals(System.Windows.Media.TextFormatting.CharacterBufferReference)">
      <summary>Determines whether the <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> is equal to the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> object.</summary>
      <returns>true if <paramref name="value" /> is equal to the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> object; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> to compare with the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> object.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.CharacterBufferReference.GetHashCode">
      <summary>Serves as a hash function for <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" />. It is suitable for use in hashing algorithms and data structures such as a hash table.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the hash code for the current object.</returns>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.CharacterBufferReference.op_Equality(System.Windows.Media.TextFormatting.CharacterBufferReference,System.Windows.Media.TextFormatting.CharacterBufferReference)">
      <summary>Compare two <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> strings for equality.</summary>
      <returns>true to show the specified <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> objects are equal; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.CharacterBufferReference.op_Inequality(System.Windows.Media.TextFormatting.CharacterBufferReference,System.Windows.Media.TextFormatting.CharacterBufferReference)">
      <summary>Compare two <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> strings for inequality.</summary>
      <returns>false to show <paramref name="left" /> is equal to <paramref name="right" />; otherwise, true.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> to compare.</param>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.CharacterHit">
      <summary>Represents information about a character hit within a glyph run.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.CharacterHit.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" /> structure.</summary>
      <param name="firstCharacterIndex">Index of the first character that got hit.</param>
      <param name="trailingLength">In the case of a leading edge, this value is 0. In the case of a trailing edge, this value is the number of code points until the next valid caret position.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.CharacterHit.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> object.</summary>
      <returns>true if <paramref name="obj" /> is equal to the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> object; otherwise, false. If <paramref name="obj" /> is not a <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> object, false is returned.</returns>
      <param name="obj">The object to compare with the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> object.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.CharacterHit.Equals(System.Windows.Media.TextFormatting.CharacterHit)">
      <summary>Determines whether the <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> is equal to the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> object.</summary>
      <returns>true if <paramref name="obj" /> is equal to the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> object; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> to compare with the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> object.</param>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.CharacterHit.FirstCharacterIndex">
      <summary>Gets the index of the first character that got hit.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the index.</returns>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.CharacterHit.GetHashCode">
      <summary>Serves as a hash function for <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" />. It is suitable for use in hashing algorithms and data structures such as a hash table.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the hash code for the current object.</returns>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.CharacterHit.op_Equality(System.Windows.Media.TextFormatting.CharacterHit,System.Windows.Media.TextFormatting.CharacterHit)">
      <summary>Compare two <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> strings for equality.</summary>
      <returns>true when the values of <see cref="P:System.Windows.Media.TextFormatting.CharacterHit.FirstCharacterIndex" /> and <see cref="P:System.Windows.Media.TextFormatting.CharacterHit.TrailingLength" /> properties are equal for both objects; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.CharacterHit.op_Inequality(System.Windows.Media.TextFormatting.CharacterHit,System.Windows.Media.TextFormatting.CharacterHit)">
      <summary>Compare two <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> strings for inequality.</summary>
      <returns>false when the values of <see cref="P:System.Windows.Media.TextFormatting.CharacterHit.FirstCharacterIndex" /> and <see cref="P:System.Windows.Media.TextFormatting.CharacterHit.TrailingLength" /> properties are equal for both objects; otherwise, true.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> to compare.</param>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.CharacterHit.TrailingLength">
      <summary>Gets the trailing length value for the character that got hit.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the trailing length.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange">
      <summary>Represents a range of characters that are associated with a culture.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange.#ctor(System.Globalization.CultureInfo,System.Windows.Media.TextFormatting.CharacterBufferRange)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange" /> class.</summary>
      <param name="culture">A value of <see cref="T:System.Globalization.CultureInfo" /> that represents the culture of the containing range of characters.</param>
      <param name="characterBufferRange">A value of <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" /> that represents the range of characters.</param>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange.CharacterBufferRange">
      <summary>Gets the <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" /> of the <see cref="T:System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange" />.</summary>
      <returns>A value of type <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferRange" />.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange.CultureInfo">
      <summary>Gets the <see cref="T:System.Globalization.CultureInfo" /> of the <see cref="T:System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange" />.</summary>
      <returns>A value of type <see cref="T:System.Globalization.CultureInfo" />.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.IndexedGlyphRun">
      <summary>Allows text engine clients to map a text source character index to the corresponding <see cref="T:System.Windows.Media.GlyphRun" />.</summary>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.IndexedGlyphRun.GlyphRun">
      <summary>Gets the <see cref="T:System.Windows.Media.GlyphRun" /> that corresponds to the <see cref="T:System.Windows.Media.TextFormatting.IndexedGlyphRun" /> object.</summary>
      <returns>A <see cref="T:System.Windows.Media.GlyphRun" /> object.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.IndexedGlyphRun.TextSourceCharacterIndex">
      <summary>Gets the text source character index that corresponds to the beginning of the <see cref="T:System.Windows.Media.GlyphRun" />.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the text source character index.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.IndexedGlyphRun.TextSourceLength">
      <summary>Gets the text source character length that corresponds to the <see cref="T:System.Windows.Media.TextFormatting.IndexedGlyphRun" /> object.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the length of the text source character.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.InvertAxes">
      <summary>Indicate the inversion of horizontal and vertical axes of the drawing surface.</summary>
    </member>
    <member name="F:System.Windows.Media.TextFormatting.InvertAxes.None">
      <summary>Drawing surface is not inverted in either axis.</summary>
    </member>
    <member name="F:System.Windows.Media.TextFormatting.InvertAxes.Horizontal">
      <summary>Drawing surface is inverted in the horizontal axis.</summary>
    </member>
    <member name="F:System.Windows.Media.TextFormatting.InvertAxes.Vertical">
      <summary>Drawing surface is inverted in the vertical axis. </summary>
    </member>
    <member name="F:System.Windows.Media.TextFormatting.InvertAxes.Both">
      <summary>Drawing surface is inverted in both axes.</summary>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.MinMaxParagraphWidth">
      <summary>Represents the smallest and largest possible paragraph width that can fully contain the specified text content.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.MinMaxParagraphWidth.Equals(System.Object)">
      <summary>Determines whether the specified object is equal to the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> object.</summary>
      <returns>true if <paramref name="obj" /> is equal to the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> object; otherwise, false. If <paramref name="obj" /> is not a <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> object, false is returned.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> object.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.MinMaxParagraphWidth.Equals(System.Windows.Media.TextFormatting.MinMaxParagraphWidth)">
      <summary>Determines whether the <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> is equal to the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> object.</summary>
      <returns>true if <paramref name="value" /> is equal to the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> object; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> to compare with the current <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> object.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.MinMaxParagraphWidth.GetHashCode">
      <summary>Serves as a hash function for <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" />. It is suitable for use in hashing algorithms and data structures such as a hash table.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the hash code for the current object.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.MinMaxParagraphWidth.MaxWidth">
      <summary>Gets the largest paragraph width possible that can fully contain the specified text content.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the largest paragraph width possible.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.MinMaxParagraphWidth.MinWidth">
      <summary>Gets the smallest paragraph width possible that can fully contain the specified text content.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the smallest paragraph width possible.</returns>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.MinMaxParagraphWidth.op_Equality(System.Windows.Media.TextFormatting.MinMaxParagraphWidth,System.Windows.Media.TextFormatting.MinMaxParagraphWidth)">
      <summary>Compare two <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> strings for equality.</summary>
      <returns>true to show the specified <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> objects are equal; otherwise, false.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.MinMaxParagraphWidth.op_Inequality(System.Windows.Media.TextFormatting.MinMaxParagraphWidth,System.Windows.Media.TextFormatting.MinMaxParagraphWidth)">
      <summary>Compare two <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> objects for inequality.</summary>
      <returns>false to show <paramref name="left" /> is equal to <paramref name="right" />; otherwise, true.</returns>
      <param name="left">The first instance of <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> to compare.</param>
      <param name="right">The second instance of <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> to compare.</param>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextBounds">
      <summary>Represents the bounding rectangle of a range of characters. </summary>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextBounds.FlowDirection">
      <summary>Gets the text flow direction for the <see cref="T:System.Windows.Media.TextFormatting.TextBounds" /> object.</summary>
      <returns>An enumerated value of <see cref="T:System.Windows.FlowDirection" />.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextBounds.Rectangle">
      <summary>Gets the bounding rectangle for the <see cref="T:System.Windows.Media.TextFormatting.TextBounds" /> object.</summary>
      <returns>A <see cref="T:System.Windows.Rect" /> value that represents the bounding rectangle of a range of characters.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextBounds.TextRunBounds">
      <summary>Gets a list of <see cref="T:System.Windows.Media.TextFormatting.TextRunBounds" /> objects.</summary>
      <returns>A list of <see cref="T:System.Windows.Media.TextFormatting.TextRunBounds" /> objects.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextCharacters">
      <summary>Represents a collection of character glyphs from distinct physical typefaces.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextCharacters.#ctor(System.Char*,System.Int32,System.Windows.Media.TextFormatting.TextRunProperties)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextCharacters" /> class using a specified unsafe character string.</summary>
      <param name="unsafeCharacterString">Pointer to character string.</param>
      <param name="length">The length of the characters to use in <paramref name="unsafeCharacterString" />.</param>
      <param name="textRunProperties">The <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> value to use for the characters in <paramref name="unsafeCharacterString" />.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextCharacters.#ctor(System.Char[],System.Int32,System.Int32,System.Windows.Media.TextFormatting.TextRunProperties)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextCharacters" /> class using a specified character array.</summary>
      <param name="characterArray">The <see cref="T:System.Char" /> array.</param>
      <param name="offsetToFirstChar">The offset to the first character to use in <paramref name="characterArray" />.</param>
      <param name="length">The length of the characters to use in <paramref name="characterArray" />.</param>
      <param name="textRunProperties">The <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> value to use for the characters in <paramref name="characterArray" />.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextCharacters.#ctor(System.String,System.Int32,System.Int32,System.Windows.Media.TextFormatting.TextRunProperties)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextCharacters" /> class using a specified character substring.</summary>
      <param name="characterString">The <see cref="T:System.String" /> containing the text characters.</param>
      <param name="offsetToFirstChar">The offset to the first character to use in <paramref name="characterString" />.</param>
      <param name="length">The length of the characters to use in <paramref name="characterString" />.</param>
      <param name="textRunProperties">The <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> value to use for the characters in <paramref name="characterString" />.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextCharacters.#ctor(System.String,System.Windows.Media.TextFormatting.TextRunProperties)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextCharacters" /> class using a specified character string.</summary>
      <param name="characterString">The <see cref="T:System.String" /> containing the text characters.</param>
      <param name="textRunProperties">The <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> value to use for the characters in <paramref name="characterString" />.</param>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextCharacters.CharacterBufferReference">
      <summary>Gets the <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> for the <see cref="T:System.Windows.Media.TextFormatting.TextCharacters" />.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> that represents the text characters.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextCharacters.Length">
      <summary>Gets the length of the text characters.</summary>
      <returns>An <see cref="T:System.Int32" /> object that represents the length of the text characters.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextCharacters.Properties">
      <summary>Gets the set of properties shared by every text character.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> value that represents the properties shared by every text character.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextCollapsedRange">
      <summary>Represents the range of characters and its width measurement for collapsed text within a line.</summary>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextCollapsedRange.Length">
      <summary>Gets the number of characters for the collapsed text.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the number of collapsed text characters.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextCollapsedRange.TextSourceCharacterIndex">
      <summary>Gets the index to the first character in the <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> that represents collapsed text characters.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the index of the first collapsed text character.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextCollapsedRange.Width">
      <summary>The total width of collapsed text characters.</summary>
      <returns>A <see cref="T:System.Double" /> value that represents the width of the collapsed text characters.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextCollapsingProperties">
      <summary>Represents the characteristics of collapsed text.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextCollapsingProperties.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextCollapsingProperties" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextCollapsingProperties.Style">
      <summary>Gets the style of the collapsed text.</summary>
      <returns>An enumerated value of <see cref="T:System.Windows.Media.TextFormatting.TextCollapsingStyle" />.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextCollapsingProperties.Symbol">
      <summary>Gets the text run that is used as the collapsed text symbol.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextRun" /> value that represents the collapsed text symbol.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextCollapsingProperties.Width">
      <summary>Gets the width of the range of collapsed text.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the width of the range of collapsed text.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextCollapsingStyle">
      <summary>Specifies the style of collapsed text.</summary>
    </member>
    <member name="F:System.Windows.Media.TextFormatting.TextCollapsingStyle.TrailingCharacter">
      <summary>Collapse trailing characters.</summary>
    </member>
    <member name="F:System.Windows.Media.TextFormatting.TextCollapsingStyle.TrailingWord">
      <summary>Collapse trailing words.</summary>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextEmbeddedObject">
      <summary>Defines a type of text content in which measuring, hit testing and drawing of the entire content is done in whole.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextEmbeddedObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextEmbeddedObject" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextEmbeddedObject.BreakAfter">
      <summary>Gets the line breaking condition after the text object.</summary>
      <returns>An enumerated value of <see cref="T:System.Windows.LineBreakCondition" />.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextEmbeddedObject.BreakBefore">
      <summary>Gets the line breaking condition before the text object.</summary>
      <returns>An enumerated value of <see cref="T:System.Windows.LineBreakCondition" />.</returns>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextEmbeddedObject.ComputeBoundingBox(System.Boolean,System.Boolean)">
      <summary>Gets the computed bounding box of the text object.</summary>
      <returns>A <see cref="T:System.Windows.Rect" /> value that represents the bounding box size of the text object.</returns>
      <param name="rightToLeft">A <see cref="T:System.Boolean" /> value that determines if the text object is drawn from right to left.</param>
      <param name="sideways">A <see cref="T:System.Boolean" /> value that determines if the text object is drawn with its side parallel to the baseline.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextEmbeddedObject.Draw(System.Windows.Media.DrawingContext,System.Windows.Point,System.Boolean,System.Boolean)">
      <summary>Draws the text object.</summary>
      <param name="drawingContext">The <see cref="T:System.Windows.Media.DrawingContext" /> to use for rendering the text object.</param>
      <param name="origin">The <see cref="T:System.Windows.Point" /> value that represents the origin where the text object is drawn.</param>
      <param name="rightToLeft">A <see cref="T:System.Boolean" /> value that determines if the text object is drawn from right to left.</param>
      <param name="sideways">A <see cref="T:System.Boolean" /> value that determines if the text object is drawn with its side parallel to the baseline.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextEmbeddedObject.Format(System.Double)">
      <summary>Get text object measurement metrics that will fit within the specified remaining width of the paragraph.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextEmbeddedObjectMetrics" /> value that represents the text object metrics.</returns>
      <param name="remainingParagraphWidth">A <see cref="T:System.Double" /> that represents the remaining paragraph width.</param>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextEmbeddedObject.HasFixedSize">
      <summary>Determines whether the text object has a fixed size regardless of where it is placed within a line.</summary>
      <returns>true if the text object has a fixed size; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextEmbeddedObjectMetrics">
      <summary>Specifies properties for a <see cref="T:System.Windows.Media.TextFormatting.TextEmbeddedObject" />.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextEmbeddedObjectMetrics.#ctor(System.Double,System.Double,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextEmbeddedObjectMetrics" /> class using specified width, height, and baseline values.</summary>
      <param name="width">A <see cref="T:System.Double" /> that represents the <see cref="T:System.Windows.Media.TextFormatting.TextEmbeddedObject" /> width.</param>
      <param name="height">A <see cref="T:System.Double" /> that represents the <see cref="T:System.Windows.Media.TextFormatting.TextEmbeddedObject" /> height.</param>
      <param name="baseline">A <see cref="T:System.Double" /> that represents the <see cref="T:System.Windows.Media.TextFormatting.TextEmbeddedObject" /> baseline relative to <paramref name="height" />.</param>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextEmbeddedObjectMetrics.Baseline">
      <summary>Gets the baseline of the text object.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the text object baseline relative to its height.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextEmbeddedObjectMetrics.Height">
      <summary>Gets the height of the text object.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the text object height.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextEmbeddedObjectMetrics.Width">
      <summary>Gets the width of the text object.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the text object width.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextEndOfLine">
      <summary>Defines a specialized text run that is used to mark the end of a line.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextEndOfLine.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextEndOfLine" /> class using a specified character length.</summary>
      <param name="length">The number of characters in the <see cref="T:System.Windows.Media.TextFormatting.TextEndOfLine" /> buffer.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextEndOfLine.#ctor(System.Int32,System.Windows.Media.TextFormatting.TextRunProperties)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextEndOfLine" /> class using a specified character length and <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> value.</summary>
      <param name="length">The number of characters in the <see cref="T:System.Windows.Media.TextFormatting.TextEndOfLine" /> buffer.</param>
      <param name="textRunProperties">The <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> value to use for the characters in the <see cref="T:System.Windows.Media.TextFormatting.TextEndOfLine" /> buffer.</param>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextEndOfLine.CharacterBufferReference">
      <summary>Gets a reference to the <see cref="T:System.Windows.Media.TextFormatting.TextEndOfLine" /> character buffer.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> value.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextEndOfLine.Length">
      <summary>Gets the character length of the <see cref="T:System.Windows.Media.TextFormatting.TextEndOfLine" /> character buffer.</summary>
      <returns>An <see cref="T:System.Int32" /> object that represents the length of the character buffer.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextEndOfLine.Properties">
      <summary>Gets the set of properties shared by every text character of the <see cref="T:System.Windows.Media.TextFormatting.TextEndOfLine" /> character buffer.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> value that represents the properties shared by every text character.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextEndOfParagraph">
      <summary>Defines a specialized text run that is used to mark the end of a paragraph.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextEndOfParagraph.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextEndOfParagraph" /> class using a specified character length.</summary>
      <param name="length">The number of characters in the <see cref="T:System.Windows.Media.TextFormatting.TextEndOfParagraph" /> buffer.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextEndOfParagraph.#ctor(System.Int32,System.Windows.Media.TextFormatting.TextRunProperties)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextEndOfParagraph" /> class using a specified character length and <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> value.</summary>
      <param name="length">The number of characters in the <see cref="T:System.Windows.Media.TextFormatting.TextEndOfParagraph" /> buffer.</param>
      <param name="textRunProperties">The <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> value to use for the characters in the <see cref="T:System.Windows.Media.TextFormatting.TextEndOfParagraph" /> buffer.</param>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextEndOfSegment">
      <summary>Defines a specialized text run that is used to mark the end of a segment.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextEndOfSegment.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextEndOfSegment" /> class.</summary>
      <param name="length">The number of characters in the <see cref="T:System.Windows.Media.TextFormatting.TextEndOfSegment" /> buffer.</param>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextEndOfSegment.CharacterBufferReference">
      <summary>Gets a reference to the <see cref="T:System.Windows.Media.TextFormatting.TextEndOfSegment" /> character buffer.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> value.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextEndOfSegment.Length">
      <summary>Gets the character length of the <see cref="T:System.Windows.Media.TextFormatting.TextEndOfSegment" /> character buffer.</summary>
      <returns>An <see cref="T:System.Int32" /> object that represents the length of the character buffer.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextEndOfSegment.Properties">
      <summary>Gets the set of properties shared by every text character of the <see cref="T:System.Windows.Media.TextFormatting.TextEndOfSegment" /> character buffer.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> value that represents the properties shared by every text character.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextFormatter">
      <summary>Provides services for formatting text and breaking text lines using a custom text layout client.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextFormatter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextFormatter.Create">
      <summary>Creates a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> class. This is a static method.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" />.</returns>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextFormatter.Create(System.Windows.Media.TextFormattingMode)">
      <summary>Creates a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> class with the specified formatting mode. This is a static method.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" />.</returns>
      <param name="textFormattingMode">The <see cref="T:System.Windows.Media.TextFormattingMode" /> that specifies the text layout for the <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" />.  </param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextFormatter.Dispose">
      <summary>Releases all managed and unmanaged resources used by the <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> object.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextFormatter.FormatLine(System.Windows.Media.TextFormatting.TextSource,System.Int32,System.Double,System.Windows.Media.TextFormatting.TextParagraphProperties,System.Windows.Media.TextFormatting.TextLineBreak)">
      <summary>Creates a <see cref="T:System.Windows.Media.TextFormatting.TextLine" /> that is used for formatting and displaying document content.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextLine" /> value that represents a line of text that can be displayed.</returns>
      <param name="textSource">A <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> value that represents the text source for the line.</param>
      <param name="firstCharIndex">An <see cref="T:System.Int32" /> value that specifies the character index of the starting character in the line.</param>
      <param name="paragraphWidth">A <see cref="T:System.Double" /> value that specifies the width of the paragraph that the line fills.</param>
      <param name="paragraphProperties">A <see cref="T:System.Windows.Media.TextFormatting.TextParagraphProperties" /> value that represents paragraph properties, such as flow direction, alignment, or indentation.</param>
      <param name="previousLineBreak">A <see cref="T:System.Windows.Media.TextFormatting.TextLineBreak" /> value that specifies the text formatter state, in terms of where the previous line in the paragraph was broken by the text formatting process.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextFormatter.FormatLine(System.Windows.Media.TextFormatting.TextSource,System.Int32,System.Double,System.Windows.Media.TextFormatting.TextParagraphProperties,System.Windows.Media.TextFormatting.TextLineBreak,System.Windows.Media.TextFormatting.TextRunCache)">
      <summary>Creates a <see cref="T:System.Windows.Media.TextFormatting.TextLine" /> that is used for formatting and displaying document content.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextLine" /> value that represents a line of text that can be displayed.</returns>
      <param name="textSource">A <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> object that represents the text source for the line.</param>
      <param name="firstCharIndex">An <see cref="T:System.Int32" /> value that specifies the character index of the starting character in the line.</param>
      <param name="paragraphWidth">A <see cref="T:System.Double" /> value that specifies the width of the paragraph that the line fills.</param>
      <param name="paragraphProperties">A <see cref="T:System.Windows.Media.TextFormatting.TextParagraphProperties" /> object that represents paragraph properties, such as flow direction, alignment, or indentation.</param>
      <param name="previousLineBreak">A <see cref="T:System.Windows.Media.TextFormatting.TextLineBreak" /> object that specifies the text formatter state, in terms of where the previous line in the paragraph was broken by the text formatting process.</param>
      <param name="textRunCache">A <see cref="T:System.Windows.Media.TextFormatting.TextRunCache" /> object that represents the caching mechanism for the layout of text.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextFormatter.FormatMinMaxParagraphWidth(System.Windows.Media.TextFormatting.TextSource,System.Int32,System.Windows.Media.TextFormatting.TextParagraphProperties)">
      <summary>Returns a value that represents the smallest and largest possible paragraph width that can fully contain the specified text content.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.MinMaxParagraphWidth" /> value that represents the smallest and largest possible paragraph width that can fully contain the specified text content.</returns>
      <param name="textSource">A <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> object that represents the text source for the line.</param>
      <param name="firstCharIndex">An <see cref="T:System.Int32" /> value that specifies the character index of the starting character in the line.</param>
      <param name="paragraphProperties">A <see cref="T:System.Windows.Media.TextFormatting.TextParagraphProperties" /> object that represents paragraph properties, such as flow direction, alignment, or indentation.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextFormatter.FormatMinMaxParagraphWidth(System.Windows.Media.TextFormatting.TextSource,System.Int32,System.Windows.Media.TextFormatting.TextParagraphProperties,System.Windows.Media.TextFormatting.TextRunCache)">
      <summary>Returns a value that represents the smallest and largest possible paragraph width that can fully contain the specified text content.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.MinMaxParagraphWidth" /> value that represents the smallest and largest possible paragraph width that can fully contain the specified text content.</returns>
      <param name="textSource">A <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> object that represents the text source for the line.</param>
      <param name="firstCharIndex">An <see cref="T:System.Int32" /> value that specifies the character index of the starting character in the line.</param>
      <param name="paragraphProperties">A <see cref="T:System.Windows.Media.TextFormatting.TextParagraphProperties" /> object that represents paragraph properties, such as flow direction, alignment, or indentation.</param>
      <param name="textRunCache">A <see cref="T:System.Windows.Media.TextFormatting.TextRunCache" /> object that represents the caching mechanism for the layout of text.</param>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextHidden">
      <summary>Defines a specialized text run that is used to mark a range of hidden characters.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextHidden.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextHidden" /> class using a specified character length.</summary>
      <param name="length">The number of characters in the <see cref="T:System.Windows.Media.TextFormatting.TextHidden" /> buffer.</param>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextHidden.CharacterBufferReference">
      <summary>Gets a reference to the <see cref="T:System.Windows.Media.TextFormatting.TextHidden" /> character buffer.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> value.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextHidden.Length">
      <summary>Gets the character length of the <see cref="T:System.Windows.Media.TextFormatting.TextHidden" /> character buffer.</summary>
      <returns>An <see cref="T:System.Int32" /> object that represents the length of the character buffer.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextHidden.Properties">
      <summary>Gets the set of properties shared by every text character of the <see cref="T:System.Windows.Media.TextFormatting.TextHidden" /> character buffer.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> value that represents the properties shared by every text character.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextLine">
      <summary>Provides an abstract class for supporting formatting services to a line of text.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextLine.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextLine" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextLine.Baseline">
      <summary>Gets the distance from the top to the baseline of the current <see cref="T:System.Windows.Media.TextFormatting.TextLine" /> object.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the baseline distance.</returns>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextLine.Collapse(System.Windows.Media.TextFormatting.TextCollapsingProperties[])">
      <summary>Create a collapsed line based on collapsed text properties.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextLine" /> value that represents a collapsed line that can be displayed.</returns>
      <param name="collapsingPropertiesList">A list of <see cref="T:System.Windows.Media.TextFormatting.TextCollapsingProperties" /> objects that represent the collapsed text properties.</param>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextLine.DependentLength">
      <summary>Gets the number of characters following the last character of the line that may trigger reformatting of the current line.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the number of characters.</returns>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextLine.Dispose">
      <summary>Releases all managed and unmanaged resources used by the <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> object.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextLine.Draw(System.Windows.Media.DrawingContext,System.Windows.Point,System.Windows.Media.TextFormatting.InvertAxes)">
      <summary>Renders the <see cref="T:System.Windows.Media.TextFormatting.TextLine" /> object based upon the specified <see cref="T:System.Windows.Media.DrawingContext" />.</summary>
      <param name="drawingContext">The <see cref="T:System.Windows.Media.DrawingContext" /> object onto which the <see cref="T:System.Windows.Media.TextFormatting.TextLine" /> is rendered.</param>
      <param name="origin">A <see cref="T:System.Windows.Point" /> value that represents the drawing origin.</param>
      <param name="inversion">An enumerated <see cref="T:System.Windows.Media.TextFormatting.InvertAxes" /> value that indicates the inversion of the horizontal and vertical axes of the drawing surface.</param>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextLine.Extent">
      <summary>Gets the distance from the top-most to bottom-most black pixel in a line.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the extent distance.</returns>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextLine.GetBackspaceCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit)">
      <summary>Gets the previous character hit after backspacing.</summary>
      <returns>The <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" /> object after backspacing.</returns>
      <param name="characterHit">The current <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" /> object.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextLine.GetCharacterHitFromDistance(System.Double)">
      <summary>Gets the character hit corresponding to the specified distance from the beginning of the line.</summary>
      <returns>The <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" /> object at the specified <paramref name="distance" /> from the beginning of the line.</returns>
      <param name="distance">A <see cref="T:System.Double" /> value that represents the distance from the beginning of the line.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextLine.GetDistanceFromCharacterHit(System.Windows.Media.TextFormatting.CharacterHit)">
      <summary>Gets the distance from the beginning of the line to the specified character hit.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the distance from the beginning of the line.</returns>
      <param name="characterHit">The <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" /> object whose distance you want to query.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextLine.GetIndexedGlyphRuns">
      <summary>Gets an enumerator for enumerating <see cref="T:System.Windows.Media.TextFormatting.IndexedGlyphRun" /> objects in the <see cref="T:System.Windows.Media.TextFormatting.TextLine" />.</summary>
      <returns>An enumerator that allows you to enumerate each <see cref="T:System.Windows.Media.TextFormatting.IndexedGlyphRun" /> object in the <see cref="T:System.Windows.Media.TextFormatting.TextLine" />.</returns>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextLine.GetNextCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit)">
      <summary>Gets the next character hit for caret navigation.</summary>
      <returns>The next <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" /> object based on caret navigation.</returns>
      <param name="characterHit">The current <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" /> object.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextLine.GetPreviousCaretCharacterHit(System.Windows.Media.TextFormatting.CharacterHit)">
      <summary>Gets the previous character hit for caret navigation.</summary>
      <returns>The previous <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" /> object based on caret navigation.</returns>
      <param name="characterHit">The current <see cref="T:System.Windows.Media.TextFormatting.CharacterHit" /> object.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextLine.GetTextBounds(System.Int32,System.Int32)">
      <summary>Gets an array of bounding rectangles that represent the range of characters within a text line.</summary>
      <returns>A list of <see cref="T:System.Windows.Media.TextFormatting.TextBounds" /> objects representing the bounding rectangle.</returns>
      <param name="firstTextSourceCharacterIndex">An <see cref="T:System.Int32" /> value that represents the index of first character of specified range.</param>
      <param name="textLength">An <see cref="T:System.Int32" /> value that represents the number of characters of the specified range.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextLine.GetTextCollapsedRanges">
      <summary>Gets a collection of collapsed text ranges after a line has been collapsed.</summary>
      <returns>A list of <see cref="T:System.Windows.Media.TextFormatting.TextCollapsedRange" /> objects that represent the collapsed text.</returns>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextLine.GetTextLineBreak">
      <summary>Gets the state of the line when broken by line breaking process.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextLineBreak" /> value that represents the line break.</returns>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextLine.GetTextRunSpans">
      <summary>Gets a collection of <see cref="T:System.Windows.Media.TextFormatting.TextRun" /> objects in a text span that are contained within a line.</summary>
      <returns>Gets a list of <see cref="T:System.Windows.Media.TextFormatting.TextRun" /> objects contained within a text span.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextLine.HasCollapsed">
      <summary>Gets a value that indicates whether the line is collapsed.</summary>
      <returns>true, if the line is collapsed; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextLine.HasOverflowed">
      <summary>Gets a value that indicates whether content of the line overflows the specified paragraph width.</summary>
      <returns>true, it the line overflows the specified paragraph width; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextLine.Height">
      <summary>Gets the height of a line of text.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the text line height.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextLine.IsTruncated">
      <summary>Determines whether the text line is truncated in the middle of a word.</summary>
      <returns>true if the text line is truncated in the middle of a word; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextLine.Length">
      <summary>Gets the total number of <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> positions of the current line.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the total number of <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> positions of the current line.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextLine.MarkerBaseline">
      <summary>Gets the distance from the edge of the line's highest point to the baseline marker of the line.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the baseline distance of the marker.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextLine.MarkerHeight">
      <summary>Gets the height of a marker for a list item.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the height of the marker.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextLine.NewlineLength">
      <summary>Gets the number of newline characters at the end of a line.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the number of newline characters.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextLine.OverhangAfter">
      <summary>Gets the distance that black pixels extend beyond the bottom alignment edge of a line.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the overhang after distance.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextLine.OverhangLeading">
      <summary>Gets the distance that black pixels extend prior to the left leading alignment edge of the line. </summary>
      <returns>A <see cref="T:System.Double" /> that represents the overhang leading distance.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextLine.OverhangTrailing">
      <summary>Gets the distance that black pixels extend following the right trailing alignment edge of the line.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the overhang trailing distance.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextLine.Start">
      <summary>Gets the distance from the start of a paragraph to the starting point of a line.</summary>
      <returns>A <see cref="T:System.Double" /> value that represents the distance from the start of a paragraph to the starting point of a line.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextLine.TextBaseline">
      <summary>Gets the distance from the top to the baseline of the line of text.</summary>
      <returns>A <see cref="T:System.Double" /> value that represents the text baseline distance.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextLine.TextHeight">
      <summary>Gets the height of the text and any other content in the line.</summary>
      <returns>A <see cref="T:System.Double" /> value.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextLine.TrailingWhitespaceLength">
      <summary>Gets the number of whitespace code points beyond the last non-blank character in a line.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the number of whitespace code points beyond the last non-blank character in a line.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextLine.Width">
      <summary>Gets the width of a line of text, excluding trailing whitespace characters.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the text line width, excluding trailing whitespace characters.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextLine.WidthIncludingTrailingWhitespace">
      <summary>Gets the width of a line of text, including trailing whitespace characters.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the text line width, including trailing whitespace characters.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextLineBreak">
      <summary>Specifies text properties and state at the point where text is broken by the line breaking process.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextLineBreak.Clone">
      <summary>Clone a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextLineBreak" /> object.</summary>
      <returns>A new instance of <see cref="T:System.Windows.Media.TextFormatting.TextLineBreak" />.</returns>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextLineBreak.Dispose">
      <summary>Releases the resources used by the <see cref="T:System.Windows.Media.TextFormatting.TextLineBreak" /> class.</summary>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextMarkerProperties">
      <summary>Represents an abstract class for defining text markers.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextMarkerProperties.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextMarkerProperties" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextMarkerProperties.Offset">
      <summary>Gets the distance from the start of the line to the end of the text marker symbol.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the offset of the marker symbol from the beginning of the line.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextMarkerProperties.TextSource">
      <summary>Gets the <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> that represents the source of the text runs for the marker symbol.</summary>
      <returns>The <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> that represents the text marker.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextModifier">
      <summary>Represents a specialized text run that can be used to modify properties of text runs within its scope.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextModifier.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextModifier" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextModifier.CharacterBufferReference">
      <summary>Gets the <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> for the <see cref="T:System.Windows.Media.TextFormatting.TextModifier" />.</summary>
      <returns>A value of type <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" />.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextModifier.FlowDirection">
      <summary>Gets the <see cref="T:System.Windows.FlowDirection" /> for the <see cref="T:System.Windows.Media.TextFormatting.TextModifier" />.</summary>
      <returns>A value of type <see cref="T:System.Windows.FlowDirection" />.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextModifier.HasDirectionalEmbedding">
      <summary>Gets a value that indicates whether the <see cref="T:System.Windows.Media.TextFormatting.TextModifier" /> supports <see cref="T:System.Windows.FlowDirection" /> for the current scope of text.</summary>
      <returns>true if <see cref="T:System.Windows.Media.TextFormatting.TextModifier" /> supports <see cref="T:System.Windows.FlowDirection" /> for the current scope of text; otherwise, false.</returns>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextModifier.ModifyProperties(System.Windows.Media.TextFormatting.TextRunProperties)">
      <summary>Retrieves the <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> for a text run.</summary>
      <returns>The actual <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> to be used by the <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" />, subject to further modification by <see cref="T:System.Windows.Media.TextFormatting.TextModifier" /> objects at outer scopes.</returns>
      <param name="properties">The <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> for a text run, or the return value of <see cref="M:System.Windows.Media.TextFormatting.TextModifier.ModifyProperties(System.Windows.Media.TextFormatting.TextRunProperties)" /> for a nested text modifier.</param>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextParagraphProperties">
      <summary>Provides a set of properties, such as flow direction, alignment, or indentation, that can be applied to a paragraph. This is an abstract class.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextParagraphProperties.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextParagraphProperties" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextParagraphProperties.AlwaysCollapsible">
      <summary>Gets a value that indicates whether a formatted line can always be collapsed.</summary>
      <returns>true if the formatted line can always be collapsed; otherwise, false, which indicates that only formatted lines that overflow the paragraph width are collapsed. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextParagraphProperties.DefaultIncrementalTab">
      <summary>Gets the default incremental tab distance.</summary>
      <returns>A <see cref="T:System.Double" /> value that represents the default incremental tab distance.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextParagraphProperties.DefaultTextRunProperties">
      <summary>Gets the default text run properties, such as typeface or foreground brush.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> value.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextParagraphProperties.FirstLineInParagraph">
      <summary>Gets a value that indicates whether the text run is the first line of the paragraph.</summary>
      <returns>true, if the text run is the first line of the paragraph; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextParagraphProperties.FlowDirection">
      <summary>Gets a value that specifies whether the primary text advance direction shall be left-to-right, or right-to-left.</summary>
      <returns>An enumerated value of <see cref="T:System.Windows.FlowDirection" />.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextParagraphProperties.Indent">
      <summary>Gets the amount of line indentation.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the amount of line indentation.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextParagraphProperties.LineHeight">
      <summary>Gets the height of a line of text.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the height of a line of text.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextParagraphProperties.ParagraphIndent">
      <summary>Gets the amount of the paragraph indentation.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the amount of the paragraph indentation.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextParagraphProperties.Tabs">
      <summary>Gets a collection of tab definitions.</summary>
      <returns>A list of <see cref="T:System.Windows.Media.TextFormatting.TextTabProperties" /> objects.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextParagraphProperties.TextAlignment">
      <summary>Gets a value that describes how an inline content of a block is aligned.</summary>
      <returns>An enumerated value of <see cref="T:System.Windows.TextAlignment" />.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextParagraphProperties.TextDecorations">
      <summary>Gets the collection of <see cref="T:System.Windows.TextDecoration" /> objects.</summary>
      <returns>A <see cref="T:System.Windows.TextDecorationCollection" /> value.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextParagraphProperties.TextMarkerProperties">
      <summary>Gets a value that specifies marker characteristics of the first line in the paragraph.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextMarkerProperties" /> value.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextParagraphProperties.TextWrapping">
      <summary>Gets a value that controls whether text wraps when it reaches the flow edge of its containing block box.</summary>
      <returns>An enumerated value of <see cref="T:System.Windows.TextWrapping" />.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextRun">
      <summary>Represents a sequence of characters that share a single property set.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextRun.#ctor">
      <summary>Creates an instance of a <see cref="T:System.Windows.Media.TextFormatting.TextRun" /> object.</summary>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRun.CharacterBufferReference">
      <summary>Gets a reference to the text run character buffer.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.CharacterBufferReference" /> value representing the characters in the text run.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRun.Length">
      <summary>Gets the number of characters in the text run.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the number of characters.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRun.Properties">
      <summary>Gets the set of text properties that are shared by every character in the text run, such as typeface or foreground brush.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> value that represents the set of shared text properties.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextRunBounds">
      <summary>Represents the bounding rectangle of a text run.</summary>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunBounds.Length">
      <summary>Gets the character length of bounded text run.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the character length.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunBounds.Rectangle">
      <summary>Gets the bounding rectangle for the text run.</summary>
      <returns>A <see cref="T:System.Windows.Rect" /> value that represents the bounding rectangle of the text run.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunBounds.TextRun">
      <summary>Gets the <see cref="T:System.Windows.Media.TextFormatting.TextRun" /> object that represents the text run.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextRun" /> value that represents the text run.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunBounds.TextSourceCharacterIndex">
      <summary>Gets the character index of the first character in the bounded text run.</summary>
      <returns>The index representing the first character of the bounded text run.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextRunCache">
      <summary>Provides caching services to the <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> object in order to improve performance.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextRunCache.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextRunCache" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextRunCache.Change(System.Int32,System.Int32,System.Int32)">
      <summary>Notifies the text engine client of a change to the cache when text content or text run properties of <see cref="T:System.Windows.Media.TextFormatting.TextRun" /> are added, removed, or replaced.</summary>
      <param name="textSourceCharacterIndex">Specifies the <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> character index position of the start of the change.</param>
      <param name="addition">Indicates the number of <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> characters to be added.</param>
      <param name="removal">Indicates the number of <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> characters to be removed.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextRunCache.Invalidate">
      <summary>Signals the text engine client to invalidate the entire contents of the <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> cache.</summary>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextRunProperties">
      <summary>Provides a set of properties, such as typeface or foreground brush, that can be applied to a <see cref="T:System.Windows.Media.TextFormatting.TextRun" /> object. This is an abstract class.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextRunProperties.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunProperties.BackgroundBrush">
      <summary>Gets the brush that is used to paint the background color of the text run.</summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> value that represents the background color.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunProperties.BaselineAlignment">
      <summary>Gets the baseline style for a text that is positioned on the vertical axis.</summary>
      <returns>An enumerated value of <see cref="T:System.Windows.BaselineAlignment" />.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunProperties.CultureInfo">
      <summary>Gets the culture information for the text run.</summary>
      <returns>A value of <see cref="T:System.Globalization.CultureInfo" /> that represents the culture of the text run.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunProperties.FontHintingEmSize">
      <summary>Gets the text size in points, which is then used for font hinting.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the text size in points. The default is 12 pt.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunProperties.FontRenderingEmSize">
      <summary>Gets the text size in points for the text run.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the text size in DIPs (Device Independent Pixels). The default is 12 DIP.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunProperties.ForegroundBrush">
      <summary>Gets the brush that is used to paint the foreground color of the text run.</summary>
      <returns>A <see cref="T:System.Windows.Media.Brush" /> value that represents the foreground color.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunProperties.NumberSubstitution">
      <summary>Gets the number substitution settings, which determines who numbers in text are displayed in different cultures.</summary>
      <returns>A <see cref="T:System.Windows.Media.NumberSubstitution" /> value.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunProperties.TextDecorations">
      <summary>Gets the collection of  <see cref="T:System.Windows.TextDecoration" /> objects used for the text run.</summary>
      <returns>A <see cref="T:System.Windows.TextDecorationCollection" /> value.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunProperties.TextEffects">
      <summary>Gets the collection of <see cref="T:System.Windows.Media.TextEffect" /> objects used for the text run.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextEffectCollection" /> value.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunProperties.Typeface">
      <summary>Gets the typeface for the text run.</summary>
      <returns>A value of <see cref="T:System.Windows.Media.Typeface" />.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunProperties.TypographyProperties">
      <summary>Gets the typography properties for the text run.</summary>
      <returns>A value of <see cref="T:System.Windows.Media.TextFormatting.TextRunTypographyProperties" />.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextRunTypographyProperties">
      <summary>Provides an abstract class for supporting typography properties for <see cref="T:System.Windows.Media.TextFormatting.TextRun" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextRunTypographyProperties.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextRunTypographyProperties" /> class.</summary>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.AnnotationAlternates">
      <summary>Gets the index of an alternate annotation form.</summary>
      <returns>The index of the alternate annotation form. The default is 0 (zero).</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.Capitals">
      <summary>Gets a value that indicates the capital form of the selected font.</summary>
      <returns>One of the <see cref="T:System.Windows.FontCapitals" /> values. The default is <see cref="F:System.Windows.FontCapitals.Normal" />.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.CapitalSpacing">
      <summary>Gets a value that indicates whether inter-glyph spacing for all-capital text is globally adjusted to improve readability.</summary>
      <returns>true if spacing is adjusted; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.CaseSensitiveForms">
      <summary>Gets a value that indicates whether glyphs adjust their vertical position to better align with uppercase glyphs.</summary>
      <returns>true if the vertical position is adjusted; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.ContextualAlternates">
      <summary>Gets a value that indicates whether custom glyph forms can be used based upon the context of the text being rendered.</summary>
      <returns>true if custom glyph forms can be used; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.ContextualLigatures">
      <summary>Gets a value that indicates whether contextual ligatures are enabled.</summary>
      <returns>true if contextual ligatures are enabled; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.ContextualSwashes">
      <summary>Gets a value that specifies the index of a contextual swashes form.</summary>
      <returns>The index of the standard swashes form. The default is 0 (zero).</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.DiscretionaryLigatures">
      <summary>Gets a value that indicates whether discretionary ligatures are enabled.</summary>
      <returns>true if discretionary ligatures are enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.EastAsianExpertForms">
      <summary>Gets a value that indicates whether the standard Japanese font forms have been replaced with the corresponding preferred typographic forms.</summary>
      <returns>true if standard Japanese font forms have been replaced with the corresponding preferred typographic forms; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.EastAsianLanguage">
      <summary>Gets a value that indicates the version of glyphs to be used for a specific writing system or language.</summary>
      <returns>One of the <see cref="T:System.Windows.FontEastAsianLanguage" /> values. The default is <see cref="F:System.Windows.FontEastAsianLanguage.Normal" />.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.EastAsianWidths">
      <summary>Gets a value that indicates the proportional width to be used for Latin characters in an East Asian font.</summary>
      <returns>One of the <see cref="T:System.Windows.FontEastAsianWidths" /> values. The default is <see cref="F:System.Windows.FontEastAsianWidths.Normal" />.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.Fraction">
      <summary>Gets a value that indicates the fraction style.</summary>
      <returns>One of the <see cref="T:System.Windows.FontFraction" /> values. The default is <see cref="F:System.Windows.FontFraction.Normal" />.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.HistoricalForms">
      <summary>Gets a value that indicates whether historical forms are enabled.</summary>
      <returns>true if historical forms are enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.HistoricalLigatures">
      <summary>Gets a value that indicates whether historical ligatures are enabled.</summary>
      <returns>true if historical ligatures are enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.Kerning">
      <summary>Gets a value that indicates whether kerning is enabled.</summary>
      <returns>true if kerning is enabled; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.MathematicalGreek">
      <summary>Gets a value that indicates whether standard typographic font forms of Greek glyphs have been replaced with corresponding font forms commonly used in mathematical notation.</summary>
      <returns>true if mathematical Greek forms are enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.NumeralAlignment">
      <summary>Gets the alignment of widths when using numerals.</summary>
      <returns>One of the <see cref="T:System.Windows.FontNumeralAlignment" /> values. The default is <see cref="F:System.Windows.FontNumeralAlignment.Normal" />.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.NumeralStyle">
      <summary>Gets a value that indicates the set of glyphs that are used to render numeric alternate font forms.</summary>
      <returns>One of the <see cref="T:System.Windows.FontNumeralStyle" /> values. The default is <see cref="F:System.Windows.FontNumeralStyle.Normal" />.</returns>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextRunTypographyProperties.OnPropertiesChanged">
      <summary>Corrects internal state for a <see cref="T:System.Windows.Media.TextFormatting.TextRunTypographyProperties" /> derived class whenever any <see cref="T:System.Windows.Media.TextFormatting.TextRunTypographyProperties" /> property changes its value.</summary>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.SlashedZero">
      <summary>Gets a value that indicates whether a nominal zero font form should be replaced with a slashed zero.</summary>
      <returns>true if slashed zero forms are enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StandardLigatures">
      <summary>Gets a value that indicates whether standard ligatures are enabled.</summary>
      <returns>true if standard ligatures are enabled; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StandardSwashes">
      <summary>Gets the index of a standard swashes form.</summary>
      <returns>The index of the standard swashes form. The default is 0 (zero).</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticAlternates">
      <summary>Gets the index of a stylistic alternates form.</summary>
      <returns>The index of the stylistic alternates form. The default is 0 (zero).</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet1">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet10">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet11">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet12">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet13">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet14">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet15">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet16">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet17">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet18">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet19">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet2">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet20">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet3">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet4">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet5">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet6">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet7">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet8">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet9">
      <summary>Gets a value that indicates whether a stylistic set of a font form is enabled.</summary>
      <returns>true if the stylistic set of the font form is enabled; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.Variants">
      <summary>Gets a value that indicates a variation of the standard typographic form to be used.</summary>
      <returns>One of the <see cref="T:System.Windows.FontVariants" /> values. The default is <see cref="F:System.Windows.FontVariants.Normal" />.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextSimpleMarkerProperties">
      <summary>Provides for a generic implementation of text marker properties.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextSimpleMarkerProperties.#ctor(System.Windows.TextMarkerStyle,System.Double,System.Int32,System.Windows.Media.TextFormatting.TextParagraphProperties)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextSimpleMarkerProperties" /> class.</summary>
      <param name="style">An enumerated value of <see cref="T:System.Windows.TextMarkerStyle" />.</param>
      <param name="offset">A <see cref="T:System.Double" /> that represents the distance from the start of the line to the end of the text marker symbol.</param>
      <param name="autoNumberingIndex">An <see cref="T:System.Int32" /> value that represents the auto-numbering counter of counter-style text marker.</param>
      <param name="textParagraphProperties">A <see cref="T:System.Windows.Media.TextFormatting.TextParagraphProperties" /> value that represents the properties shared by every text character of the text marker.</param>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextSimpleMarkerProperties.Offset">
      <summary>Gets the distance from the start of the line to the end of the text marker symbol.</summary>
      <returns>An <see cref="T:System.Int32" /> object that represents the offset of the text marker symbol.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextSimpleMarkerProperties.TextSource">
      <summary>Gets the source of the text runs used for the text marker.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> value that represents the text run used for the text marker.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextSource">
      <summary>Provides an abstract class for specifying character data and formatting properties to be used by the <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> object.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextSource.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> class.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextSource.GetPrecedingText(System.Int32)">
      <summary>Retrieves the text span immediately before the specified <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> position.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange" /> value that represents the text span immediately before <paramref name="textSourceCharacterIndexLimit" />.</returns>
      <param name="textSourceCharacterIndexLimit">An <see cref="T:System.Int32" /> value that specifies the character index position where text retrieval stops.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextSource.GetTextEffectCharacterIndexFromTextSourceCharacterIndex(System.Int32)">
      <summary>Retrieves a value that maps a <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> character index to a <see cref="T:System.Windows.Media.TextEffect" /> character index.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the <see cref="T:System.Windows.Media.TextEffect" /> character index.</returns>
      <param name="textSourceCharacterIndex">An <see cref="T:System.Int32" /> value that specifies the <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> character index to map.</param>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextSource.GetTextRun(System.Int32)">
      <summary>Retrieves a <see cref="T:System.Windows.Media.TextFormatting.TextRun" /> starting at a specified <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> position.</summary>
      <returns>A value that represents a <see cref="T:System.Windows.Media.TextFormatting.TextRun" />, or an object derived from <see cref="T:System.Windows.Media.TextFormatting.TextRun" />.</returns>
      <param name="textSourceCharacterIndex">Specifies the character index position in the <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> where the <see cref="T:System.Windows.Media.TextFormatting.TextRun" /> is retrieved.</param>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextSpan`1">
      <summary>Represents a generic class that allows a simple pairing of an object of type T and a specified run length.</summary>
      <typeparam name="T">The object type to pair.</typeparam>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextSpan`1.#ctor(System.Int32,`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextSpan`1" /> class by specifying the length of the text span and the value associated with it.</summary>
      <param name="length">An <see cref="T:System.Int32" /> value that represents the number of characters in the text span.</param>
      <param name="value">The object associated with the text span.</param>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextSpan`1.Length">
      <summary>Gets the number of characters in the text span.</summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the length of the text span.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextSpan`1.Value">
      <summary>Gets the object associated with the text span.</summary>
      <returns>An object of type <paramref name="T" />.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextTabAlignment">
      <summary>Describes how text is aligned at a tab location.</summary>
    </member>
    <member name="F:System.Windows.Media.TextFormatting.TextTabAlignment.Left">
      <summary>Text is left-aligned at the tab location.</summary>
    </member>
    <member name="F:System.Windows.Media.TextFormatting.TextTabAlignment.Center">
      <summary>Text is center-aligned at the tab location.</summary>
    </member>
    <member name="F:System.Windows.Media.TextFormatting.TextTabAlignment.Right">
      <summary>Text is right-aligned at the tab location.</summary>
    </member>
    <member name="F:System.Windows.Media.TextFormatting.TextTabAlignment.Character">
      <summary>Text is aligned at the tab location at a specified character.</summary>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextTabProperties">
      <summary>Specifies properties of user-defined tabs.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextTabProperties.#ctor(System.Windows.Media.TextFormatting.TextTabAlignment,System.Double,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextTabProperties" /> class by specifying tab properties.</summary>
      <param name="alignment">An enumerated value of <see cref="T:System.Windows.Media.TextFormatting.TextTabAlignment" /> that represents the alignment of text at the tab location.</param>
      <param name="location">A <see cref="T:System.Double" /> value that represents the tab location.</param>
      <param name="tabLeader">An <see cref="T:System.Int32" /> value that represents the tab leader.</param>
      <param name="aligningChar">An <see cref="T:System.Int32" /> value that represents the specific character in text that is aligned at tab location.</param>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextTabProperties.AligningCharacter">
      <summary>Gets the index of the specific character in the text that is aligned at the specified tab location.</summary>
      <returns>An <see cref="T:System.Int32" /> value representing the index.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextTabProperties.Alignment">
      <summary>Gets the alignment style of the text at the tab location.</summary>
      <returns>An enumerated value of <see cref="T:System.Windows.Media.TextFormatting.TextTabAlignment" /> that represents the alignment of the text at the tab location.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextTabProperties.Location">
      <summary>Gets the index value of the tab location.</summary>
      <returns>A <see cref="T:System.Double" /> value that represents the tab location.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextTabProperties.TabLeader">
      <summary>Gets the index of the character that is used to display the tab leader. </summary>
      <returns>An <see cref="T:System.Int32" /> value that represents the tab leader location.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextTrailingCharacterEllipsis">
      <summary>Defines collapsed text properties for collapsing a whole line toward the end at character granularity, and with ellipsis being the collapsed text symbol.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextTrailingCharacterEllipsis.#ctor(System.Double,System.Windows.Media.TextFormatting.TextRunProperties)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextTrailingCharacterEllipsis" /> class by specifying collapsed text properties.</summary>
      <param name="width">A <see cref="T:System.Double" /> that represents the width for which the specified collapsed text range is constrained to.</param>
      <param name="textRunProperties">A <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> value that represents the set of shared text properties.</param>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextTrailingCharacterEllipsis.Style">
      <summary>Gets the style of collapsed text.</summary>
      <returns>An enumerated value of <see cref="T:System.Windows.Media.TextFormatting.TextCollapsingStyle" />.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextTrailingCharacterEllipsis.Symbol">
      <summary>Gets the text run that is used as the collapsed text symbol.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextRun" /> value that represents the collapsed text symbol.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextTrailingCharacterEllipsis.Width">
      <summary>Gets the width for which the specified collapsed text range is constrained to.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the width.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormatting.TextTrailingWordEllipsis">
      <summary>Defines collapsed text properties for collapsing a whole line toward the end at word granularity, and with ellipsis being the collapsed text symbol.</summary>
    </member>
    <member name="M:System.Windows.Media.TextFormatting.TextTrailingWordEllipsis.#ctor(System.Double,System.Windows.Media.TextFormatting.TextRunProperties)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Media.TextFormatting.TextTrailingCharacterEllipsis" /> class by specifying collapsed text properties.</summary>
      <param name="width">A <see cref="T:System.Double" /> that represents the width for which the specified collapsed text range is constrained to.</param>
      <param name="textRunProperties">A <see cref="T:System.Windows.Media.TextFormatting.TextRunProperties" /> value that represents the set of shared text properties.</param>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextTrailingWordEllipsis.Style">
      <summary>Gets the style of collapsed text.</summary>
      <returns>An enumerated value of <see cref="T:System.Windows.Media.TextFormatting.TextCollapsingStyle" />.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextTrailingWordEllipsis.Symbol">
      <summary>Gets the text run that is used as the collapsed text symbol.</summary>
      <returns>A <see cref="T:System.Windows.Media.TextFormatting.TextRun" /> value that represents the collapsed text symbol.</returns>
    </member>
    <member name="P:System.Windows.Media.TextFormatting.TextTrailingWordEllipsis.Width">
      <summary>Gets the width for which the specified collapsed text range is constrained to.</summary>
      <returns>A <see cref="T:System.Double" /> that represents the width.</returns>
    </member>
    <member name="T:System.Windows.Navigation.BaseUriHelper">
      <summary>Provides a method to resolve relative uniform resource identifiers (URIs) with respect to the base URI of a container, such as a <see cref="T:System.Windows.Controls.Frame" />.</summary>
    </member>
    <member name="F:System.Windows.Navigation.BaseUriHelper.BaseUriProperty">
      <summary>Identifies the BaseUri attached property.</summary>
      <returns>The identifier for the BaseUri attached property.</returns>
    </member>
    <member name="M:System.Windows.Navigation.BaseUriHelper.GetBaseUri(System.Windows.DependencyObject)">
      <summary>Gets the value of the BaseUri attached property for a specified <see cref="T:System.Windows.UIElement" />.</summary>
      <returns>The base URI of a given element.</returns>
      <param name="element">The element from which the property value is read. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.</exception>
    </member>
    <member name="T:System.Windows.Resources.AssemblyAssociatedContentFileAttribute">
      <summary>This attribute is interpreted during the Extensible Application Markup Language (XAML) compilation process to associate loose content with a Windows Presentation Foundation (WPF) application.</summary>
    </member>
    <member name="M:System.Windows.Resources.AssemblyAssociatedContentFileAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Resources.AssemblyAssociatedContentFileAttribute" /> class.</summary>
      <param name="relativeContentFilePath">The path to the associated content.</param>
    </member>
    <member name="P:System.Windows.Resources.AssemblyAssociatedContentFileAttribute.RelativeContentFilePath">
      <summary>Gets the path to the associated content.</summary>
      <returns>The path, as declared in the attribute.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Core.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Core</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle">
      <summary>Provides a safe handle that represents a memory-mapped file for sequential access.</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle">
      <summary>Provides a safe handle that represents a view of a block of unmanaged memory for random access. </summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptHandle">
      <summary>Provides a safe handle that can be used by Cryptography Next Generation (CNG) objects.</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptHandle" /> class.</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle">
      <summary>Releases a handle used by a Cryptography Next Generation (CNG) object.</summary>
      <returns>true if the handle is released successfully; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle">
      <summary>Releases a native handle used by a Cryptography Next Generation (CNG) object.</summary>
      <returns>true if the handle is released successfully; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle">
      <summary>Provides a safe handle that represents a key (NCRYPT_KEY_HANDLE).</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle" /> class.</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle">
      <summary>Provides a safe handle that represents a key storage provider (NCRYPT_PROV_HANDLE).</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle" /> class.</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle">
      <summary>Provides a safe handle that represents a secret agreement value (NCRYPT_SECRET_HANDLE).</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle" /> class.</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafePipeHandle">
      <summary>Represents a wrapper class for a file handle. </summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafePipeHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> class.</summary>
      <param name="preexistingHandle">An <see cref="T:System.IntPtr" /> object that represents the pre-existing handle to use.</param>
      <param name="ownsHandle">true to reliably release the handle during the finalization phase; false to prevent reliable release (not recommended).</param>
    </member>
    <member name="T:System.Action`10">
      <summary>Encapsulates a method that has 10 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`11">
      <summary>Encapsulates a method that has 11 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`12">
      <summary>Encapsulates a method that has 12 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`13">
      <summary>Encapsulates a method that has 13 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`14">
      <summary>Encapsulates a method that has 14 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`15">
      <summary>Encapsulates a method that has 15 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg15">The fifteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`16">
      <summary>Encapsulates a method that has 16 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg15">The fifteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg16">The sixteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T16">The type of the sixteenth parameter of the method that this delegate encapsulates.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`9">
      <summary>Encapsulates a method that has nine parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`10">
      <summary>Encapsulates a method that has nine parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.</summary>
      <returns>The return value of the method that this delegate encapsulates.</returns>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`11">
      <summary>Encapsulates a method that has 10 parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.</summary>
      <returns>The return value of the method that this delegate encapsulates.</returns>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`12">
      <summary>Encapsulates a method that has 11 parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.</summary>
      <returns>The return value of the method that this delegate encapsulates.</returns>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`13">
      <summary>Encapsulates a method that has 12 parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.</summary>
      <returns>The return value of the method that this delegate encapsulates.</returns>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`14">
      <summary>Encapsulates a method that has 13 parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.</summary>
      <returns>The return value of the method that this delegate encapsulates.</returns>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`15">
      <summary>Encapsulates a method that has 14 parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.</summary>
      <returns>The return value of the method that this delegate encapsulates.</returns>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`16">
      <summary>Encapsulates a method that has 15 parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.</summary>
      <returns>The return value of the method that this delegate encapsulates.</returns>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg15">The fifteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`17">
      <summary>Encapsulates a method that has 16 parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.</summary>
      <returns>The return value of the method that this delegate encapsulates.</returns>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg15">The fifteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg16">The sixteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T16">The type of the sixteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1">
      <summary>Represents a set of values.</summary>
      <typeparam name="T">The type of elements in the hast set.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.HashSet`1" /> class that is empty and uses the default equality comparer for the set type.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.HashSet`1" /> class that uses the default equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.</summary>
      <param name="collection">The collection whose elements are copied to the new set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.HashSet`1" /> class that uses the specified equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.</summary>
      <param name="collection">The collection whose elements are copied to the new set.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing values in the set, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> implementation for the set type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.HashSet`1" /> class that is empty and uses the specified equality comparer for the set type.</summary>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing values in the set, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> implementation for the set type.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.HashSet`1" /> class with serialized data.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the information required to serialize the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Add(`0)">
      <summary>Adds the specified element to a set.</summary>
      <returns>true if the element is added to the <see cref="T:System.Collections.Generic.HashSet`1" /> object; false if the element is already present.</returns>
      <param name="item">The element to add to the set.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Clear">
      <summary>Removes all elements from a <see cref="T:System.Collections.Generic.HashSet`1" /> object.</summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Comparer">
      <summary>Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> object that is used to determine equality for the values in the set.</summary>
      <returns>The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> object that is used to determine equality for the values in the set.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Contains(`0)">
      <summary>Determines whether a <see cref="T:System.Collections.Generic.HashSet`1" /> object contains the specified element.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.HashSet`1" /> object contains the specified element; otherwise, false.</returns>
      <param name="item">The element to locate in the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[])">
      <summary>Copies the elements of a <see cref="T:System.Collections.Generic.HashSet`1" /> object to an array.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Generic.HashSet`1" /> object. The array must have zero-based indexing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of a <see cref="T:System.Collections.Generic.HashSet`1" /> object to an array, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Generic.HashSet`1" /> object. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> is greater than the length of the destination <paramref name="array" />.-or-<paramref name="count" /> is larger than the size of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>Copies the specified number of elements of a <see cref="T:System.Collections.Generic.HashSet`1" /> object to an array, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Generic.HashSet`1" /> object. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <param name="count">The number of elements to copy to <paramref name="array" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.-or-<paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> is greater than the length of the destination <paramref name="array" />.-or-<paramref name="count" /> is greater than the available space from the <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Count">
      <summary>Gets the number of elements that are contained in a set.</summary>
      <returns>The number of elements that are contained in the set.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CreateSetComparer">
      <summary>Returns an <see cref="T:System.Collections.IEqualityComparer" /> object that can be used for equality testing of a <see cref="T:System.Collections.Generic.HashSet`1" /> object.</summary>
      <returns>An <see cref="T:System.Collections.IEqualityComparer" /> object that can be used for deep equality testing of the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Removes all elements in the specified collection from the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</summary>
      <param name="other">The collection of items to remove from the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through a <see cref="T:System.Collections.Generic.HashSet`1" /> object.</summary>
      <returns>A <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> object for the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data needed to serialize a <see cref="T:System.Collections.Generic.HashSet`1" /> object.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the information required to serialize the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current <see cref="T:System.Collections.Generic.HashSet`1" /> object to contain only elements that are present in that object and in the specified collection.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether a <see cref="T:System.Collections.Generic.HashSet`1" /> object is a proper subset of the specified collection.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.HashSet`1" /> object is a proper subset of <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether a <see cref="T:System.Collections.Generic.HashSet`1" /> object is a proper superset of the specified collection.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.HashSet`1" /> object is a proper superset of <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether a <see cref="T:System.Collections.Generic.HashSet`1" /> object is a subset of the specified collection.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.HashSet`1" /> object is a subset of <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether a <see cref="T:System.Collections.Generic.HashSet`1" /> object is a superset of the specified collection.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.HashSet`1" /> object is a superset of <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and raises the deserialization event when the deserialization is complete.</summary>
      <param name="sender">The source of the deserialization event.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object associated with the current <see cref="T:System.Collections.Generic.HashSet`1" /> object is invalid.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current <see cref="T:System.Collections.Generic.HashSet`1" /> object and a specified collection share common elements.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.HashSet`1" /> object and <paramref name="other" /> share at least one common element; otherwise, false.</returns>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Remove(`0)">
      <summary>Removes the specified element from a <see cref="T:System.Collections.Generic.HashSet`1" /> object.</summary>
      <returns>true if the element is successfully found and removed; otherwise, false.  This method returns false if <paramref name="item" /> is not found in the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</returns>
      <param name="item">The element to remove.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>Removes all elements that match the conditions defined by the specified predicate from a <see cref="T:System.Collections.Generic.HashSet`1" /> collection.</summary>
      <returns>The number of elements that were removed from the <see cref="T:System.Collections.Generic.HashSet`1" /> collection.</returns>
      <param name="match">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether a <see cref="T:System.Collections.Generic.HashSet`1" /> object and the specified collection contain the same elements.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.HashSet`1" /> object is equal to <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current <see cref="T:System.Collections.Generic.HashSet`1" /> object to contain only elements that are present either in that object or in the specified collection, but not both.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Adds an item to an <see cref="T:System.Collections.Generic.ICollection`1" /> object.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" /> object.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether a collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
      <summary>Sets the capacity of a <see cref="T:System.Collections.Generic.HashSet`1" /> object to the actual number of elements it contains, rounded up to a nearby, implementation-specific value.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current <see cref="T:System.Collections.Generic.HashSet`1" /> object to contain all elements that are present in both itself and in the specified collection.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1.Enumerator">
      <summary>Enumerates the elements of a <see cref="T:System.Collections.Generic.HashSet`1" /> object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the <see cref="T:System.Collections.Generic.HashSet`1" /> collection at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose">
      <summary>Releases all resources used by a <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> object.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.HashSet`1" /> collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator, as an <see cref="T:System.Object" />.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element. </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="T:System.Diagnostics.EventSchemaTraceListener">
      <summary>Directs tracing or debugging output of end-to-end events to an XML-encoded, schema-compliant log file.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> class, using the specified file as the recipient of debugging and tracing output.</summary>
      <param name="fileName">The path for the log file.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> class with the specified name, using the specified file as the recipient of debugging and tracing output.</summary>
      <param name="fileName">The path for the log file.</param>
      <param name="name">The name of the listener.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> class with the specified name and specified buffer size, using the specified file as the recipient of debugging and tracing output.</summary>
      <param name="fileName">The path for the log file.</param>
      <param name="name">The name of the listener.</param>
      <param name="bufferSize">The size of the output buffer, in bytes.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> class with the specified name and specified buffer size, using the specified file with the specified log retention policy as the recipient of the debugging and tracing output.</summary>
      <param name="fileName">The path for the log file.</param>
      <param name="name">The name of the listener.</param>
      <param name="bufferSize">The size of the output buffer, in bytes.</param>
      <param name="logRetentionOption">One of the <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> values. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> class with the specified name and specified buffer size, using the specified file with the specified log retention policy and maximum size as the recipient of the debugging and tracing output.</summary>
      <param name="fileName">The path for the log file.</param>
      <param name="name">The name of the listener.</param>
      <param name="bufferSize">The size of the output buffer, in bytes.</param>
      <param name="logRetentionOption">One of the <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> values.</param>
      <param name="maximumFileSize">The maximum file size, in bytes.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumFileSize" /> is less than <paramref name="bufferSize" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumFileSize" /> is a negative number.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> class with the specified name and specified buffer size, using the specified file with the specified log retention policy, maximum size, and file count as the recipient of the debugging and tracing output.</summary>
      <param name="fileName">The path for the log file.</param>
      <param name="name">The name of the listener.</param>
      <param name="bufferSize">The size of the output buffer, in bytes.</param>
      <param name="logRetentionOption">One of the <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> values.</param>
      <param name="maximumFileSize">The maximum file size, in bytes.</param>
      <param name="maximumNumberOfFiles">The maximum number of output log files.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumFileSize" /> is less than <paramref name="bufferSize" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumFileSize" /> is a negative number.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumNumberOfFiles" /> is less than 1, and <paramref name="logRetentionOption" /> is <see cref="F:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumNumberOfFiles" /> is less than 2, and <paramref name="logRetentionOption" /> is <see cref="F:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.BufferSize">
      <summary>Gets the size of the output buffer.</summary>
      <returns>The size of the output buffer, in bytes. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Close">
      <summary>Closes the log file for this listener so that it no longer receives tracing or debugging output.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Fail(System.String,System.String)">
      <summary>Writes error information, including a basic error message and a detailed error message, to the log file.</summary>
      <param name="message">The basic error message to write.</param>
      <param name="detailMessage">The detailed error message to append to the basic error message.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Flush">
      <summary>Causes buffered data to be written to the log for this listener.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes">
      <summary>Gets the custom XML configuration attributes that the trace listener supports.</summary>
      <returns>A <see cref="T:System.String" /> array that contains the XML configuration attributes recognized by this listener.</returns>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.IsThreadSafe">
      <summary>Gets a value indicating whether the trace listener is thread safe.</summary>
      <returns>Always returns true.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize">
      <summary>Gets the maximum size of the log file.</summary>
      <returns>The maximum file size, in bytes.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles">
      <summary>Gets the maximum number of log files.</summary>
      <returns>The maximum number of log files, determined by the value of the <see cref="P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption" /> property for the file.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>Writes trace information, a single data object, and event information to the log file.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">The source name. </param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="data">A data object to emit.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>Writes trace information, multiple data objects, and event information to the log file.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">The source name. </param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="data">An array of data objects to emit.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>Writes trace information, a message, and event information to the log file.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">The source name. </param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="message">The message to write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>Writes trace information, a formatted message, and event information to the log file.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">The source name. </param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="format">A format string that contains zero or more format items that correspond to objects in the <paramref name="args" /> array.</param>
      <param name="args">An object array that contains zero or more objects to format.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption">
      <summary>Gets the trace log retention option for the file.</summary>
      <returns>One of the <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> values. The default is <see cref="F:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize" />. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
      <summary>Writes trace information, including the identity of a related activity, a message, and event information, to the log file.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">The source name. </param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="message">A trace message to write.</param>
      <param name="relatedActivityId">A <see cref="T:System.Guid" /> structure that identifies a related activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Write(System.String)">
      <summary>Writes a message to the log file without providing any additional context information.</summary>
      <param name="message">The message to write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.WriteLine(System.String)">
      <summary>Writes a message followed by the current line terminator to the log file without providing any additional context information.</summary>
      <param name="message">The message to write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.Writer">
      <summary>Gets or sets the underlying text writer that writes to the log file.</summary>
      <returns>A <see cref="T:System.IO.TextWriter" /> object.</returns>
      <exception cref="T:System.NotSupportedException">An attempt was made to assign a value to the <see cref="P:System.Diagnostics.EventSchemaTraceListener.Writer" /> property.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.TraceLogRetentionOption">
      <summary>Specifies the file structure that will be used for the <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> log.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize">
      <summary>One file with no maximum file size restriction.</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.SingleFileBoundedSize">
      <summary>One file with a maximum file size that is determined by the <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" /> property.</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.UnlimitedSequentialFiles">
      <summary>An unlimited number of sequential files, each with a maximum file size that is determined by the <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" /> property. There is no logical bound to the number or size of the files, but it is limited by the physical constraints imposed by the computer.</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles">
      <summary>A finite number of sequential files, each with a maximum file size. When the <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" /> property value is reached, writing starts in a new file with an incremented integer suffix.</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles">
      <summary>A finite number of sequential files, each with a maximum file size. When the <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" /> property value is reached, writing starts in a new file with an incremented integer suffix. When the <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles" /> property value is reached, the first file is cleared and overwritten. Files are then incrementally overwritten in a circular manner.</summary>
    </member>
    <member name="T:System.Diagnostics.UnescapedXmlDiagnosticData">
      <summary>Provides unescaped XML data for the logging of user-provided trace data.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.UnescapedXmlDiagnosticData.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.UnescapedXmlDiagnosticData" /> class by using the specified XML data string.</summary>
      <param name="xmlPayload">The XML data to be logged in the UserData node of the event schema.  </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.UnescapedXmlDiagnosticData.ToString">
      <summary>Returns a string representation of the <see cref="T:System.Diagnostics.UnescapedXmlDiagnosticData" /> object.</summary>
      <returns>A string representation of the <see cref="T:System.Diagnostics.UnescapedXmlDiagnosticData" /> object. If the object is null, this method returns an empty string.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.UnescapedXmlDiagnosticData.UnescapedXml">
      <summary>Gets or sets the unescaped XML data string.</summary>
      <returns>An unescaped XML string.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventDescriptor">
      <summary>Contains the metadata that defines an event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventDescriptor.#ctor(System.Int32,System.Byte,System.Byte,System.Byte,System.Byte,System.Int32,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> class.</summary>
      <param name="id">The event identifier.</param>
      <param name="version">Version of the event. The version indicates a revision to the event definition. You can use this member and the Id member to identify a unique event.</param>
      <param name="channel">Defines a potential target for the event.</param>
      <param name="level">Specifies the level of detail included in the event.</param>
      <param name="opcode">Operation being performed at the time the event is written.</param>
      <param name="task">Identifies a logical component of the application that is writing the event.</param>
      <param name="keywords">Bit mask that specifies the event category. The keyword can contain one or more provider-defined keywords, standard keywords, or both.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Channel">
      <summary>Retrieves the channel value from the event descriptor.</summary>
      <returns>The channel that defines a potential target for the event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.EventId">
      <summary>Retrieves the event identifier value from the event descriptor.</summary>
      <returns>The event identifier.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Keywords">
      <summary>Retrieves the keyword value from the event descriptor.</summary>
      <returns>The keyword, which is a bit mask, that specifies the event category.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Level">
      <summary>Retrieves the level value from the event descriptor.</summary>
      <returns>The level of detail included in the event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Opcode">
      <summary>Retrieves the operation code value from the event descriptor.</summary>
      <returns>The operation being performed at the time the event is written.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Task">
      <summary>Retrieves the task value from the event descriptor.</summary>
      <returns>The task that identifies the logical component of the application that is writing the event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Version">
      <summary>Retrieves the version value from the event descriptor.</summary>
      <returns>The version of the event. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventProvider">
      <summary>Use this class to write events.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.#ctor(System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.EventProvider" /> class.</summary>
      <param name="providerGuid">Guid that uniquely identifies the provider.</param>
      <exception cref="T:System.InsufficientMemoryException">There is not enough memory to complete the operation.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The classes in the <see cref="N:System.Diagnostics.Eventing" /> namespace work only on Windows Vista.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="providerGuid" /> parameter cannot be null.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">An error returned by the ETW subsystem. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Close">
      <summary>Removes the provider's registration from the ETW subsystem and releases all unmanaged resources.</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">An error returned by the ETW subsystem. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.CreateActivityId">
      <summary>Creates a unique activity identifier for the provider.</summary>
      <returns>A unique Guid that you use when calling the <see cref="M:System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)" /> method to set the activity identifier for the provider.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Dispose">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Dispose(System.Boolean)">
      <param name="disposing"></param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Finalize"></member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError">
      <summary>Gets the last error associated with an event write failure.</summary>
      <returns>Use the value to determine the cause of an event write failure.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.IsEnabled">
      <summary>Determines whether any session enabled the provider, regardless of the level and keyword values used to enable the provider.</summary>
      <returns>Is true if the provider is enabled to any session; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.IsEnabled(System.Byte,System.Int64)">
      <summary>Determines whether any session is requesting the specified event from the provider.</summary>
      <returns>Is true if any session is requesting the specified event; otherwise, false.</returns>
      <param name="level">Level of detail included in the event.</param>
      <param name="keywords">Bit mask that specifies the event category. This mask should be the same keyword mask that is defined in the manifest for the event.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)">
      <summary>Sets the current activity identifier used by the <see cref="Overload:System.Diagnostics.Eventing.EventProvider.WriteEvent" /> methods.</summary>
      <param name="id">A unique activity identifier that the <see cref="M:System.Diagnostics.Eventing.EventProvider.CreateActivityId" /> method returns.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Int32,System.IntPtr)">
      <summary>Writes an event. The event data is specified as a block of memory.</summary>
      <returns>Is true if the event is written; otherwise, false. If false, call the <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> method to determine the cause of the failure.</returns>
      <param name="eventDescriptor">An instance of <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> that identifies the event to write.</param>
      <param name="dataCount">Size of the event data to which the <paramref name="data" /> parameter points. The maximum event data size is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.</param>
      <param name="data">Pointer to the event data to write.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Object[])">
      <summary>Writes an event. The event data is specified as an array of objects.</summary>
      <returns>Is true if the event is written; otherwise, false. If false, call the <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> method to determine the cause of the failure.</returns>
      <param name="eventDescriptor">An instance of <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> that identifies the event to write.</param>
      <param name="eventPayload">An array of objects that contain the event data to write. The object must be in the order specified in the manifest. The array is limited to 32 objects, of which only eight may be strings. The maximum data size for the event is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.This parameter can be null.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="eventPayload" /> parameter contains too many objects or strings.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.String)">
      <summary>Writes an event. The event data is specified as a string.</summary>
      <returns>Is true if the event is written; otherwise, false. If false, call the <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> method to determine the cause of the failure.</returns>
      <param name="eventDescriptor">An instance of <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> that identifies the event to write.</param>
      <param name="data">The string to write as the event data.</param>
      <exception cref="T:System.ArgumentException">If <paramref name="data" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String)">
      <summary>Writes an event that contains a string as its data.</summary>
      <returns>Is true if the event is written; otherwise, false. If false, call the <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> method to determine the cause of the failure.</returns>
      <param name="eventMessage">String to write as the event data.</param>
      <exception cref="T:System.ArgumentException">If <paramref name="eventMessage" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String,System.Byte,System.Int64)">
      <summary>Writes an event that contains a string as its data if the level and keyword value match the events requested by the session.</summary>
      <returns>Is true if the event is written; otherwise, false. If false, call the <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> method to determine the cause of the failure.</returns>
      <param name="eventMessage">String to write as the event data.</param>
      <param name="eventLevel">Level of detail included in the event. If the provider uses a manifest to define the event, set this value to the same level defined in the manifest.</param>
      <param name="eventKeywords">Bit mask that specifies the event category. If the provider uses a manifest to define the event, set this value to the same keyword mask defined in the manifest.</param>
      <exception cref="T:System.ArgumentException">If <paramref name="eventMessage" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Int32,System.IntPtr)">
      <summary>Links events together when tracing events in an end-to-end scenario. The event data is specified as a block of memory.</summary>
      <returns>Is true if the event is written; otherwise, false. If false, call the <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> method to determine the cause of the failure.</returns>
      <param name="eventDescriptor">An instance of <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> that identifies the event to write.</param>
      <param name="relatedActivityId">Activity identifier from the previous component. Use this parameter to link your component's events to the previous component's events.</param>
      <param name="dataCount">Size of the event data to which the <paramref name="data" /> parameter points. The maximum event data size is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.</param>
      <param name="data">Pointer to the event data to write.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Object[])">
      <summary>Links events together when tracing events in an end-to-end scenario. The event data is specified as an array of objects.</summary>
      <returns>Is true if the event is written; otherwise, false. If false, call the <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> method to determine the cause of the failure.</returns>
      <param name="eventDescriptor">An instance of <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> that identifies the event to write.</param>
      <param name="relatedActivityId">Activity identifier from the previous component. Use this parameter to link your component's events to the previous component's events.</param>
      <param name="eventPayload">An array of objects that contain the event data to write. The data must be in the order specified in the manifest. The array is limited to 32 objects, of which only eight may be strings. The maximum data size for the event is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.</param>
      <exception cref="T:System.ArgumentException">If <paramref name="eventPayload" /> contains too many objects or strings.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode">
      <summary>Defines the possible states of the last write operation.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode.NoError">
      <summary>The write was successful.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode.NoFreeBuffers">
      <summary>The session ran out of free buffers to write to. This can occur during high event rates because the disk subsystem is overloaded or the number of buffers is too small. Rather than blocking until more buffers become available, the event is dropped. Consider increasing the number and size of the buffers for the session, or reducing the number of events written or the size of the events.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode.EventTooBig">
      <summary>The event is larger than the session buffer size; events cannot span buffers.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventProviderTraceListener">
      <summary>A listener for <see cref="T:System.Diagnostics.TraceSource" /> that writes events to the ETW subsytem. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" /> class using the specified provider identifier.</summary>
      <param name="providerId">A unique string <see cref="T:System.Guid" /> that identifies the provider.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" /> class using the specified provider identifier and name of the listener.</summary>
      <param name="providerId">A unique string <see cref="T:System.Guid" /> that identifies the provider.</param>
      <param name="name">Name of the listener.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" /> class using the specified provider identifier, name of the listener, and delimiter.</summary>
      <param name="providerId">A unique string <see cref="T:System.Guid" /> that identifies the provider.</param>
      <param name="name">Name of the listener.</param>
      <param name="delimiter">Delimiter used to delimit the event data. (For more details, see the <see cref="P:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter" /> property.)</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Close">
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter">
      <summary>Gets and sets the delimiter used to delimit the event data that is written to the ETW subsystem.</summary>
      <returns>The delimiter used to delimit the event data. The default delimiter is a comma.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Fail(System.String,System.String)">
      <param name="message"></param>
      <param name="detailMessage"></param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Flush">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.GetSupportedAttributes"></member>
    <member name="P:System.Diagnostics.Eventing.EventProviderTraceListener.IsThreadSafe">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <param name="eventCache"></param>
      <param name="source"></param>
      <param name="eventType"></param>
      <param name="id"></param>
      <param name="data"></param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <param name="eventCache"></param>
      <param name="source"></param>
      <param name="eventType"></param>
      <param name="id"></param>
      <param name="data"></param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
      <param name="eventCache"></param>
      <param name="source"></param>
      <param name="eventType"></param>
      <param name="id"></param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <param name="eventCache"></param>
      <param name="source"></param>
      <param name="eventType"></param>
      <param name="id"></param>
      <param name="message"></param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <param name="eventCache"></param>
      <param name="source"></param>
      <param name="eventType"></param>
      <param name="id"></param>
      <param name="format"></param>
      <param name="args"></param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
      <param name="eventCache"></param>
      <param name="source"></param>
      <param name="id"></param>
      <param name="message"></param>
      <param name="relatedActivityId"></param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Write(System.String)">
      <param name="message"></param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.WriteLine(System.String)">
      <param name="message"></param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventBookmark">
      <summary>Represents a placeholder (bookmark) within an event stream. You can use the placeholder to mark a position and return to this position in a stream of events. An instance of this object can be obtained from an <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> object, in which case it corresponds to the position of that event record.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventBookmark.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" /> class from the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> instances.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the information required to serialize the new <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" /> object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the source of the serialized stream that is associated with the new <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" />.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventBookmark.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization." /><see cref="SerializationInfo" /> object with the data required to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization." /><see cref="SerializationInfo" /> object to populate with data.</param>
      <param name="context">The destination for this serialization.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventBookmark.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization." /><see cref="SerializationInfo" /> object with the data needed to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization." /><see cref="SerializationInfo" /> object to populate with data.</param>
      <param name="context">The destination for this serialization.</param>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventKeyword">
      <summary>Represents a keyword for an event. Keywords are defined in an event provider and are used to group the event with other similar events (based on the usage of the events).</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventKeyword.DisplayName">
      <summary>Gets the localized name of the keyword.</summary>
      <returns>Returns a string that contains a localized name for this keyword.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventKeyword.Name">
      <summary>Gets the non-localized name of the keyword.</summary>
      <returns>Returns a string that contains the non-localized name of this keyword.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventKeyword.Value">
      <summary>Gets the numeric value associated with the keyword.</summary>
      <returns>Returns a long value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLevel">
      <summary>Contains an event level that is defined in an event provider. The level signifies the severity of the event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLevel.DisplayName">
      <summary>Gets the localized name for the event level. The name describes what severity level of events this level is used for.</summary>
      <returns>Returns a string that contains the localized name for the event level.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLevel.Name">
      <summary>Gets the non-localized name of the event level.</summary>
      <returns>Returns a string that contains the non-localized name of the event level.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLevel.Value">
      <summary>Gets the numeric value of the event level.</summary>
      <returns>Returns an integer value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogConfiguration">
      <summary>Contains static information and configuration settings for an event log. Many of the configurations settings were defined by the event provider that created the log.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.#ctor(System.String)">
      <summary>Initializes a new <see cref="T:System.Diagnostics.Eventing.Reader.EventLogConfiguration" /> object by specifying the local event log for which to get information and configuration settings. </summary>
      <param name="logName">The name of the local event log for which to get information and configuration settings.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.#ctor(System.String,System.Diagnostics.Eventing.Reader.EventLogSession)">
      <summary>Initializes a new <see cref="T:System.Diagnostics.Eventing.Reader.EventLogConfiguration" /> object by specifying the name of the log for which to get information and configuration settings. The log can be on the local computer or a remote computer, based on the event log session specified.</summary>
      <param name="logName">The name of the event log for which to get information and configuration settings.</param>
      <param name="session">The event log session used to determine the event log service that the specified log belongs to. The session is either connected to the event log service on the local computer or a remote computer.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose">
      <summary>Releases all the resources used by this object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by this object, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsClassicLog">
      <summary>Gets the flag that indicates if the event log is a classic event log. A classic event log is one that has its events defined in a .mc file instead of a manifest (.xml file) used by the event provider.</summary>
      <returns>Returns true if the event log is a classic log, and returns false if the event log is not a classic log.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsEnabled">
      <summary>Gets or sets a Boolean value that determines whether the event log is enabled or disabled. An enabled log is one in which events can be logged, and a disabled log is one in which events cannot be logged.</summary>
      <returns>Returns true if the log is enabled, and returns false if the log is disabled.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogFilePath">
      <summary>Gets or sets the file directory path to the location of the file where the events are stored for the log.</summary>
      <returns>Returns a string that contains the path to the event log file.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogIsolation">
      <summary>Gets an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogIsolation" /> value that specifies whether the event log is an application, system, or custom event log. </summary>
      <returns>Returns an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogIsolation" /> value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogMode">
      <summary>Gets or sets an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogMode" /> value that determines how events are handled when the event log becomes full.</summary>
      <returns>Returns an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogMode" /> value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogName">
      <summary>Gets the name of the event log.</summary>
      <returns>Returns a string that contains the name of the event log.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogType">
      <summary>Gets an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogType" /> value that determines the type of the event log.</summary>
      <returns>Returns an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogType" /> value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.MaximumSizeInBytes">
      <summary>Gets or sets the maximum size, in bytes, that the event log file is allowed to be. When the file reaches this maximum size, it is considered full.</summary>
      <returns>Returns a long value that represents the maximum size, in bytes, that the event log file is allowed to be.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.OwningProviderName">
      <summary>Gets the name of the event provider that created this event log.</summary>
      <returns>Returns a string that contains the name of the event provider that created this event log.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderBufferSize">
      <summary>Gets the size of the buffer that the event provider uses for publishing events to the log.</summary>
      <returns>Returns an integer value that can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderControlGuid">
      <summary>Gets the control globally unique identifier (GUID) for the event log if the log is a debug log. If this log is not a debug log, this value will be null. </summary>
      <returns>Returns a GUID value or null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderKeywords">
      <summary>Gets or sets keyword mask used by the event provider.</summary>
      <returns>Returns a long value that can be null if the event provider did not define any keywords.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLatency">
      <summary>Gets the maximum latency time used by the event provider when publishing events to the log.</summary>
      <returns>Returns an integer value that can be null if no latency time was specified by the event provider.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLevel">
      <summary>Gets or sets the maximum event level (which defines the severity of the event) that is allowed to be logged in the event log. This value is defined by the event provider.</summary>
      <returns>Returns an integer value that can be null if the maximum event level was not defined in the event provider.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMaximumNumberOfBuffers">
      <summary>Gets the maximum number of buffers used by the event provider to publish events to the event log.</summary>
      <returns>Returns an integer value that is the maximum number of buffers used by the event provider to publish events to the event log. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMinimumNumberOfBuffers">
      <summary>Gets the minimum number of buffers used by the event provider to publish events to the event log.</summary>
      <returns>Returns an integer value that is the minimum number of buffers used by the event provider to publish events to the event log. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderNames">
      <summary>Gets an enumerable collection of the names of all the event providers that can publish events to this event log.</summary>
      <returns>Returns an enumerable collection of strings that contain the event provider names.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges">
      <summary>Saves the configuration settings that </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SecurityDescriptor">
      <summary>Gets or sets the security descriptor of the event log. The security descriptor defines the users and groups of users that can read and write to the event log.</summary>
      <returns>Returns a string that contains the security descriptor for the event log.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogException">
      <summary>Represents the base class for all the exceptions that are thrown when an error occurs while reading event log related information. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> class with the error code for the exception.</summary>
      <param name="errorCode">The error code for the error that occurred while reading or configuring event log related information. For more information and a list of event log related error codes, see http://go.microsoft.com/fwlink/?LinkId=82629.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> class with serialized data.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception being thrown.</param>
      <param name="streamingContext">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> class by specifying the error message that describes the current exception.</summary>
      <param name="message">The error message that describes the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> class with an error message and inner exception.</summary>
      <param name="message">The error message that describes the current exception.</param>
      <param name="innerException">The Exception instance that caused the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the SerializationInfo object with information about the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogException.Message">
      <summary>Gets the error message that describes the current exception.</summary>
      <returns>Returns a string that contains the error message that describes the current exception.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogInformation">
      <summary>Allows you to access the run-time properties of active event logs and event log files. These properties include the number of events in the log, the size of the log, a value that determines whether the log is full, and the last time the log was written to or accessed.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.Attributes">
      <summary>Gets the file attributes of the log file associated with the log.</summary>
      <returns>Returns an integer value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.CreationTime">
      <summary>Gets the time that the log file associated with the event log was created.</summary>
      <returns>Returns a <see cref="T:System.DateTime" /> object. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.FileSize">
      <summary>Gets the size of the file, in bytes, associated with the event log.</summary>
      <returns>Returns a long value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.IsLogFull">
      <summary>Gets a Boolean value that determines whether the log file has reached its maximum size (the log is full).</summary>
      <returns>Returns true if the log is full, and returns false if the log is not full.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.LastAccessTime">
      <summary>Gets the last time the log file associated with the event log was accessed.</summary>
      <returns>Returns a <see cref="T:System.DateTime" /> object. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.LastWriteTime">
      <summary>Gets the last time data was written to the log file associated with the event log.</summary>
      <returns>Returns a <see cref="T:System.DateTime" /> object. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.OldestRecordNumber">
      <summary>Gets the number of the oldest event record in the event log.</summary>
      <returns>Returns a long value that represents the number of the oldest event record in the event log. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.RecordCount">
      <summary>Gets the number of event records in the event log.</summary>
      <returns>Returns a long value that represents the number of event records in the event log. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException">
      <summary>Represents the exception thrown when an event provider publishes invalid data in an event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" /> class with serialized data.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception thrown.</param>
      <param name="streamingContext">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" /> class by specifying the error message that describes the current exception.</summary>
      <param name="message">The error message that describes the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" /> class with an error message and inner exception.</summary>
      <param name="message">The error message that describes the current exception.</param>
      <param name="innerException">The Exception instance that caused the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogIsolation">
      <summary>Defines the default access permissions for the event log. The Application and System values indicate that the log shares the access control list (ACL) with the appropriate Windows log (the Application or System event logs) and share the Event Tracing for Windows (ETW) session with other logs of the same isolation. All channels with Custom isolation use a private ETW session.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogIsolation.Application">
      <summary>The log shares the access control list with the Application event log and shares the ETW session with other logs that have Application isolation.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogIsolation.System">
      <summary>The log shares the access control list with the System event log and shares the ETW session with other logs that have System isolation.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogIsolation.Custom">
      <summary>The event log is a custom event log that uses its own private ETW session.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogLink">
      <summary>Represents a link between an event provider and an event log that the provider publishes events into. This object cannot be instantiated.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogLink.DisplayName">
      <summary>Gets the localized name of the event log.</summary>
      <returns>Returns a string that contains the localized name of the event log.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogLink.IsImported">
      <summary>Gets a Boolean value that determines whether the event log is imported, rather than defined in the event provider. An imported event log is defined in a different provider.</summary>
      <returns>Returns true if the event log is imported by the event provider, and returns false if the event log is not imported by the event provider.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogLink.LogName">
      <summary>Gets the non-localized name of the event log associated with this object.</summary>
      <returns>Returns a string that contains the non-localized name of the event log associated with this object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogMode">
      <summary>Determines the behavior for the event log service handles an event log when the log reaches its maximum allowed size (when the event log is full).</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogMode.Circular">
      <summary>New events continue to be stored when the log file is full. Each new incoming event replaces the oldest event in the log.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogMode.AutoBackup">
      <summary>Archive the log when full, do not overwrite events. The log is automatically archived when necessary. No events are overwritten. </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogMode.Retain">
      <summary>Do not overwrite events. Clear the log manually rather than automatically.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException">
      <summary>Represents the exception that is thrown when a requested event log (usually specified by the name of the event log or the path to the event log file) does not exist.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" /> class with serialized data.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception thrown.</param>
      <param name="streamingContext">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" /> class by specifying the error message that describes the current exception.</summary>
      <param name="message">The error message that describes the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" /> class with an error message and inner exception.</summary>
      <param name="message">The error message that describes the current exception.</param>
      <param name="innerException">The Exception instance that caused the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogPropertySelector">
      <summary>Contains an array of strings that represent XPath queries for elements in the XML representation of an event, which is based on the Event Schema. The queries in this object are used to extract values from the event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogPropertySelector.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Initializes a new <see cref="T:System.Diagnostics.Eventing.Reader.EventLogPropertySelector" /> class instance.</summary>
      <param name="propertyQueries">XPath queries used to extract values from the XML representation of the event.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogPropertySelector.Dispose">
      <summary>Releases all the resources used by this object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogPropertySelector.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by this object, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException">
      <summary>Represents the exception that is thrown when a specified event provider name references a disabled event provider. A disabled event provider cannot publish events.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" /> class with serialized data.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception thrown.</param>
      <param name="streamingContext">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" /> class by specifying the error message that describes the current exception.</summary>
      <param name="message">The error message that describes the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" /> class with an error message and inner exception.</summary>
      <param name="message">The error message that describes the current exception.</param>
      <param name="innerException">The Exception instance that caused the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogQuery">
      <summary>Represents a query for events in an event log and the settings that define how the query is executed and on what computer the query is executed on.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogQuery.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" /> class by specifying the target of the query. The target can be an active event log or a log file.</summary>
      <param name="path">The name of the event log to query, or the path to the event log file to query.</param>
      <param name="pathType">Specifies whether the string used in the path parameter specifies the name of an event log, or the path to an event log file.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogQuery.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" /> class by specifying the target of the query and the event query. The target can be an active event log or a log file.</summary>
      <param name="path">The name of the event log to query, or the path to the event log file to query.</param>
      <param name="pathType">Specifies whether the string used in the path parameter specifies the name of an event log, or the path to an event log file.</param>
      <param name="query">The event query used to retrieve events that match the query conditions.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogQuery.ReverseDirection">
      <summary>Gets or sets the Boolean value that determines whether to read events from the newest event in an event log to the oldest event in the log.</summary>
      <returns>Returns true if events are read from the newest event in the log to the oldest event, and returns false if events are read from the oldest event in the log to the newest event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogQuery.Session">
      <summary>Gets or sets the session that access the Event Log service on the local computer or a remote computer. This object can be set to access a remote event log by creating a <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> object or an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> object with this <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" /> object.</summary>
      <returns>Returns an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogQuery.TolerateQueryErrors">
      <summary>Gets or sets a Boolean value that determines whether this query will continue to retrieve events when the query has an error.</summary>
      <returns>true indicates that the query will continue to retrieve events even if the query fails for some logs, and false indicates that this query will not continue to retrieve events when the query fails.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogReader">
      <summary>Enables you to read events from an event log based on an event query. The events that are read by this object are returned as <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> objects.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> class by specifying an event query.</summary>
      <param name="eventQuery">The event query used to retrieve events.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> class by specifying an event query and a bookmark that is used as starting position for the query.</summary>
      <param name="eventQuery">The event query used to retrieve events.</param>
      <param name="bookmark">The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events logged after the bookmark event will be returned by the query.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> class by specifying an active event log to retrieve events from.</summary>
      <param name="path">The name of the event log to retrieve events from.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> class by specifying the name of an event log to retrieve events from or the path to a log file to retrieve events from.</summary>
      <param name="path">The name of the event log to retrieve events from, or the path to the event log file to retrieve events from.</param>
      <param name="pathType">Specifies whether the string used in the path parameter specifies the name of an event log, or the path to an event log file.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogReader.BatchSize">
      <summary>Gets or sets the number of events retrieved from the stream of events on every read operation.</summary>
      <returns>Returns an integer value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.CancelReading">
      <summary>Cancels the current query operation.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Dispose">
      <summary>Releases all the resources used by this object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by this object, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogReader.LogStatus">
      <summary>Gets the status of each event log or log file associated with the event query in this object.</summary>
      <returns>Returns a list of <see cref="T:System.Diagnostics.Eventing.Reader.EventLogStatus" /> objects that each contain status information about an event log associated with the event query in this object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent">
      <summary>Reads the next event that is returned from the event query in this object.</summary>
      <returns>Returns an <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent(System.TimeSpan)">
      <summary>Reads the next event that is returned from the event query in this object.</summary>
      <returns>Returns an <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> object.</returns>
      <param name="timeout">The maximum time to allow the read operation to run before canceling the operation.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.Diagnostics.Eventing.Reader.EventBookmark)">
      <summary>Changes the position in the event stream where the next event that is read will come from by specifying a bookmark event. No events logged before the bookmark event will be retrieved.</summary>
      <param name="bookmark">The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.Diagnostics.Eventing.Reader.EventBookmark,System.Int64)">
      <summary>Changes the position in the event stream where the next event that is read will come from by specifying a bookmark event and an offset number of events from the bookmark. No events logged before the bookmark plus the offset will be retrieved.</summary>
      <param name="bookmark">The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.</param>
      <param name="offset">The offset number of events to change the position of the bookmark.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.IO.SeekOrigin,System.Int64)">
      <summary>Changes the position in the event stream where the next event that is read will come from by specifying a starting position and an offset from the starting position. No events logged before the starting position plus the offset will be retrieved.</summary>
      <param name="origin">A value from the <see cref="T:System.IO.SeekOrigin" /> enumeration defines where in the stream of events to start querying for events.</param>
      <param name="offset">The offset number of events to add to the origin.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogReadingException">
      <summary>Represents an exception that is thrown when an error occurred while reading, querying, or subscribing to the events in an event log. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" /> class with serialized data.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception thrown.</param>
      <param name="streamingContext">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" /> class by specifying the error message that describes the current exception.</summary>
      <param name="message">The error message that describes the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" /> class with an error message and inner exception.</summary>
      <param name="message">The error message that describes the current exception.</param>
      <param name="innerException">The Exception instance that caused the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogRecord">
      <summary>Contains the properties of an event instance for an event that is received from an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> object. The event properties provide information about the event such as the name of the computer where the event was logged and the time that the event was created.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ActivityId">
      <summary>Gets the globally unique identifier (GUID) for the activity in process for which the event is involved. This allows consumers to group related activities.</summary>
      <returns>Returns a GUID value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Bookmark">
      <summary>Gets a placeholder (bookmark) that corresponds to this event. This can be used as a placeholder in a stream of events.</summary>
      <returns>Returns a <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ContainerLog">
      <summary>Gets the name of the event log or the event log file in which the event is stored.</summary>
      <returns>Returns a string that contains the name of the event log or the event log file in which the event is stored.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by this object, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.FormatDescription">
      <summary>Gets the event message in the current locale.</summary>
      <returns>Returns a string that contains the event message in the current locale.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.FormatDescription(System.Collections.Generic.IEnumerable{System.Object})">
      <summary>Gets the event message, replacing variables in the message with the specified values.</summary>
      <returns>Returns a string that contains the event message in the current locale.</returns>
      <param name="values">The values used to replace variables in the event message. Variables are represented by %n, where n is a number.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.GetPropertyValues(System.Diagnostics.Eventing.Reader.EventLogPropertySelector)">
      <summary>Gets the enumeration of the values of the user-supplied event properties, or the results of XPath-based data if the event has XML representation.</summary>
      <returns>Returns a list of objects.</returns>
      <param name="propertySelector">Selects the property values to return.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Id">
      <summary>Gets the identifier for this event. All events with this identifier value represent the same type of event.</summary>
      <returns>Returns an integer value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Keywords">
      <summary>Gets the keyword mask of the event. Get the value of the <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.KeywordsDisplayNames" /> property to get the name of the keywords used in this mask.</summary>
      <returns>Returns a long value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.KeywordsDisplayNames">
      <summary>Gets the display names of the keywords used in the keyword mask for this event.</summary>
      <returns>Returns an enumerable collection of strings that contain the display names of the keywords used in the keyword mask for this event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Level">
      <summary>Gets the level of the event. The level signifies the severity of the event. For the name of the level, get the value of the <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.LevelDisplayName" /> property.</summary>
      <returns>Returns a byte value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.LevelDisplayName">
      <summary>Gets the display name of the level for this event.</summary>
      <returns>Returns a string that contains the display name of the level for this event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.LogName">
      <summary>Gets the name of the event log where this event is logged.</summary>
      <returns>Returns a string that contains a name of the event log that contains this event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.MachineName">
      <summary>Gets the name of the computer on which this event was logged.</summary>
      <returns>Returns a string that contains the name of the computer on which this event was logged.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.MatchedQueryIds">
      <summary>Gets a list of query identifiers that this event matches. This event matches a query if the query would return this event.</summary>
      <returns>Returns an enumerable collection of integer values.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Opcode">
      <summary>Gets the opcode of the event. The opcode defines a numeric value that identifies the activity or a point within an activity that the application was performing when it raised the event. For the name of the opcode, get the value of the <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.OpcodeDisplayName" /> property.</summary>
      <returns>Returns a short value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.OpcodeDisplayName">
      <summary>Gets the display name of the opcode for this event.</summary>
      <returns>Returns a string that contains the display name of the opcode for this event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ProcessId">
      <summary>Gets the process identifier for the event provider that logged this event.</summary>
      <returns>Returns an integer value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Properties">
      <summary>Gets the user-supplied properties of the event.</summary>
      <returns>Returns a list of <see cref="T:System.Diagnostics.Eventing.Reader.EventProperty" /> objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ProviderId">
      <summary>Gets the globally unique identifier (GUID) of the event provider that published this event.</summary>
      <returns>Returns a GUID value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ProviderName">
      <summary>Gets the name of the event provider that published this event.</summary>
      <returns>Returns a string that contains the name of the event provider that published this event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Qualifiers">
      <summary>Gets qualifier numbers that are used for event identification.</summary>
      <returns>Returns an integer value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.RecordId">
      <summary>Gets the event record identifier of the event in the log.</summary>
      <returns>Returns a long value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.RelatedActivityId">
      <summary>Gets a globally unique identifier (GUID) for a related activity in a process for which an event is involved.</summary>
      <returns>Returns a GUID value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Task">
      <summary>Gets a task identifier for a portion of an application or a component that publishes an event. A task is a 16-bit value with 16 top values reserved. This type allows any value between 0x0000 and 0xffef to be used. For the name of the task, get the value of the <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.TaskDisplayName" /> property.</summary>
      <returns>Returns an integer value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.TaskDisplayName">
      <summary>Gets the display name of the task for the event.</summary>
      <returns>Returns a string that contains the display name of the task for the event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ThreadId">
      <summary>Gets the thread identifier for the thread that the event provider is running in.</summary>
      <returns>Returns an integer value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.TimeCreated">
      <summary>Gets the time, in <see cref="T:System.DateTime" /> format, that the event was created.</summary>
      <returns>Returns a <see cref="T:System.DateTime" /> value. The value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.ToXml">
      <summary>Gets the XML representation of the event. All of the event properties are represented in the event's XML. The XML conforms to the event schema.</summary>
      <returns>Returns a string that contains the XML representation of the event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.UserId">
      <summary>Gets the security descriptor of the user whose context is used to publish the event.</summary>
      <returns>Returns a <see cref="T:System.Security.Principal.SecurityIdentifier" /> value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Version">
      <summary>Gets the version number for the event.</summary>
      <returns>Returns a byte value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogSession">
      <summary>Used to access the Event Log service on the local computer or a remote computer so you can manage and gather information about the event logs and event providers on the computer.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor">
      <summary>Initializes a new <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> object, establishes a connection with the local Event Log service.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor(System.String)">
      <summary>Initializes a new <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> object, and establishes a connection with the Event Log service on the specified computer. The credentials (user name and password) of the user who calls the method is used for the credentials to access the remote computer.</summary>
      <param name="server">The name of the computer on which to connect to the Event Log service.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor(System.String,System.String,System.String,System.Security.SecureString,System.Diagnostics.Eventing.Reader.SessionAuthentication)">
      <summary>Initializes a new <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> object, and establishes a connection with the Event Log service on the specified computer. The specified credentials (user name and password) are used for the credentials to access the remote computer.</summary>
      <param name="server">The name of the computer on which to connect to the Event Log service.</param>
      <param name="domain">The domain of the specified user.</param>
      <param name="user">The user name used to connect to the remote computer.</param>
      <param name="password">The password used to connect to the remote computer.</param>
      <param name="logOnType">The type of connection to use for the connection to the remote computer.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.CancelCurrentOperations">
      <summary>Cancels any operations (such as reading an event log or subscribing to an event log) that are currently active for the Event Log service that this session object is connected to.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ClearLog(System.String)">
      <summary>Clears events from the specified event log.</summary>
      <param name="logName">The name of the event log to clear all the events from.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ClearLog(System.String,System.String)">
      <summary>Clears events from the specified event log, and saves the cleared events to the specified file.</summary>
      <param name="logName">The name of the event log to clear all the events from.</param>
      <param name="backupPath">The path to the file in which the cleared events will be saved. The file should end in .evtx.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.Dispose">
      <summary>Releases all the resources used by this object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by this object, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLog(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String)">
      <summary>Exports events into an external log file. The events are stored without the event messages.</summary>
      <param name="path">The name of the event log to export events from, or the path to the event log file to export events from.</param>
      <param name="pathType">Specifies whether the string used in the path parameter specifies the name of an event log, or the path to an event log file.</param>
      <param name="query">The query used to select the events to export.  Only the events returned from the query will be exported.</param>
      <param name="targetFilePath">The path to the log file (ends in .evtx) in which the exported events will be stored after this method is executed.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLog(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String,System.Boolean)">
      <summary>Exports events into an external log file. A flag can be set to indicate that the method will continue exporting events even if the specified query fails for some logs. The events are stored without the event messages.</summary>
      <param name="path">The name of the event log to export events from, or the path to the event log file to export events from.</param>
      <param name="pathType">Specifies whether the string used in the path parameter specifies the name of an event log, or the path to an event log file.</param>
      <param name="query">The query used to select the events to export. Only the events returned from the query will be exported.</param>
      <param name="targetFilePath">The path to the log file (ends in .evtx) in which the exported events will be stored after this method is executed.</param>
      <param name="tolerateQueryErrors">true indicates that the method will continue exporting events even if the specified query fails for some logs, and false indicates that this method will not continue to export events when the specified query fails.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLogAndMessages(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String)">
      <summary>Exports events and their messages into an external log file.</summary>
      <param name="path">The name of the event log to export events from, or the path to the event log file to export events from.</param>
      <param name="pathType">Specifies whether the string used in the path parameter specifies the name of an event log, or the path to an event log file.</param>
      <param name="query">The query used to select the events to export.  Only the events returned from the query will be exported.</param>
      <param name="targetFilePath">The path to the log file (ends in .evtx) in which the exported events will be stored after this method is executed.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLogAndMessages(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>Exports events and their messages into an external log file. A flag can be set to indicate that the method will continue exporting events even if the specified query fails for some logs. The event messages are exported in the specified language.</summary>
      <param name="path">The name of the event log to export events from, or the path to the event log file to export events from.</param>
      <param name="pathType">Specifies whether the string used in the path parameter specifies the name of an event log, or the path to an event log file.</param>
      <param name="query">The query used to select the events to export.  Only the events returned from the query will be exported.</param>
      <param name="targetFilePath">The path to the log file (ends in .evtx) in which the exported events will be stored after this method is executed.</param>
      <param name="tolerateQueryErrors">true indicates that the method will continue exporting events even if the specified query fails for some logs, and false indicates that this method will not continue to export events when the specified query fails.</param>
      <param name="targetCultureInfo">The culture that specifies which language that the exported event messages will be in.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.GetLogInformation(System.String,System.Diagnostics.Eventing.Reader.PathType)">
      <summary>Gets an object that contains runtime information for the specified event log.</summary>
      <returns>Returns an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInformation" /> object that contains information about the specified log.</returns>
      <param name="logName">The name of the event log to get information about, or the path to the event log file to get information about.</param>
      <param name="pathType">Specifies whether the string used in the path parameter specifies the name of an event log, or the path to an event log file.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.GetLogNames">
      <summary>Gets an enumerable collection of all the event log names that are registered with the Event Log service.</summary>
      <returns>Returns an enumerable collection of strings that contain the event log names.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.GetProviderNames">
      <summary>Gets an enumerable collection of all the event provider names that are registered with the Event Log service. An event provider is an application that publishes events to an event log.</summary>
      <returns>Returns an enumerable collection of strings that contain the event provider names.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogSession.GlobalSession">
      <summary>Gets a static predefined session object that is connected to the Event Log service on the local computer.</summary>
      <returns>Returns an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> object that is a predefined session object that is connected to the Event Log service on the local computer.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogStatus">
      <summary>Contains the status code or error code for a specific event log. This status can be used to determine if the event log is available for an operation.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogStatus.LogName">
      <summary>Gets the name of the event log for which the status code is obtained.</summary>
      <returns>Returns a string that contains the name of the event log for which the status code is obtained.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogStatus.StatusCode">
      <summary>Gets the status code or error code for the event log. This status or error is the result of a read or subscription operation on the event log.</summary>
      <returns>Returns an integer value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogType">
      <summary>Defines the type of events that are logged in an event log. Each log can only contain one type of event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Administrative">
      <summary>These events are primarily for end users, administrators, and support. The events that are found in the Administrative type logs indicate a problem and a well-defined solution that an administrator can act on. An example of an administrative event is an event that occurs when an application fails to connect to a printer. </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Operational">
      <summary>Events in an operational type event log are used for analyzing and diagnosing a problem or occurrence. They can be used to trigger tools or tasks based on the problem or occurrence. An example of an operational event is an event that occurs when a printer is added or removed from a system.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Analytical">
      <summary>Events in an analytic event log are published in high volume. They describe program operation and indicate problems that cannot be handled by user intervention.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Debug">
      <summary>Events in a debug type event log are used solely by developers to diagnose a problem for debugging.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogWatcher">
      <summary>Allows you to subscribe to incoming events. Each time a desired event is published to an event log, the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised, and the method that handles this event will be executed. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying an event query.</summary>
      <param name="eventQuery">Specifies a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying an event query and a bookmark that is used as starting position for the query.</summary>
      <param name="eventQuery">Specifies a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised.</param>
      <param name="bookmark">The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying an event query, a bookmark that is used as starting position for the query, and a Boolean value that determines whether to read the events that already exist in the event log.</summary>
      <param name="eventQuery">Specifies a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised.</param>
      <param name="bookmark">The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.</param>
      <param name="readExistingEvents">A Boolean value that determines whether to read the events that already exist in the event log. If this value is true, then the existing events are read and if this value is false, then the existing events are not read.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying the name or path to an event log.</summary>
      <param name="path">The path or name of the event log monitor for events. If any event is logged in this event log, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose">
      <summary>Releases all the resources used by this object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by this object, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled">
      <summary>Determines whether this object starts delivering events to the event delegate.</summary>
      <returns>Returns true when this object can deliver events to the event delegate, and returns false when this object has stopped delivery.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten">
      <summary>Allows setting a delegate (event handler method) that gets called every time an event is published that matches the criteria specified in the event query for this object. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventMetadata">
      <summary>Contains the metadata (properties and settings) for an event that is defined in an event provider. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Description">
      <summary>Gets the description template associated with the event using the current thread locale for the description language.</summary>
      <returns>Returns a string that contains the description template associated with the event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Id">
      <summary>Gets the identifier of the event that is defined in the event provider.</summary>
      <returns>Returns a long value that is the event identifier.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Keywords">
      <summary>Gets the keywords associated with the event that is defined in the even provider.</summary>
      <returns>Returns an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" /> objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Level">
      <summary>Gets the level associated with the event that is defined in the event provider. The level defines the severity of the event.</summary>
      <returns>Returns an <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.LogLink">
      <summary>Gets a link to the event log that receives this event when the provider publishes this event.</summary>
      <returns>Returns a <see cref="T:System.Diagnostics.Eventing.Reader.EventLogLink" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Opcode">
      <summary>Gets the opcode associated with this event that is defined by an event provider. The opcode defines a numeric value that identifies the activity or a point within an activity that the application was performing when it raised the event.</summary>
      <returns>Returns a <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Task">
      <summary>Gets the task associated with the event. A task identifies a portion of an application or a component that publishes an event. </summary>
      <returns>Returns a <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Template">
      <summary>Gets the template string for the event. Templates are used to describe data that is used by a provider when an event is published. Templates optionally specify XML that provides the structure of an event. The XML allows values that the event publisher provides to be inserted during the rendering of an event.</summary>
      <returns>Returns a string that contains the template for the event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Version">
      <summary>Gets the version of the event that qualifies the event identifier.</summary>
      <returns>Returns a byte value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventOpcode">
      <summary>Contains an event opcode that is defined in an event provider. An opcode defines a numeric value that identifies the activity or a point within an activity that the application was performing when it raised the event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventOpcode.DisplayName">
      <summary>Gets the localized name for an event opcode.</summary>
      <returns>Returns a string that contains the localized name for an event opcode.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventOpcode.Name">
      <summary>Gets the non-localized name for an event opcode.</summary>
      <returns>Returns a string that contains the non-localized name for an event opcode.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventOpcode.Value">
      <summary>Gets the numeric value associated with the event opcode.</summary>
      <returns>Returns an integer value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventProperty">
      <summary>Contains the value of an event property that is specified by the event provider when the event is published.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventProperty.Value">
      <summary>Gets the value of the event property that is specified by the event provider when the event is published.</summary>
      <returns>Returns an object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventRecord">
      <summary>Defines the properties of an event instance for an event that is received from an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> object. The event properties provide information about the event such as the name of the computer where the event was logged and the time the event was created. This class is an abstract class. The <see cref="T:System.Diagnostics.Eventing.Reader.EventLogRecord" /> class implements this class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> class.</summary>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ActivityId">
      <summary>Gets the globally unique identifier (GUID) for the activity in process for which the event is involved. This allows consumers to group related activities.</summary>
      <returns>Returns a GUID value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Bookmark">
      <summary>Gets a placeholder (bookmark) that corresponds to this event. This can be used as a placeholder in a stream of events.</summary>
      <returns>Returns a <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.Dispose">
      <summary>Releases all the resources used by this object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by this object, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.FormatDescription">
      <summary>Gets the event message in the current locale.</summary>
      <returns>Returns a string that contains the event message in the current locale.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.FormatDescription(System.Collections.Generic.IEnumerable{System.Object})">
      <summary>Gets the event message, replacing variables in the message with the specified values.</summary>
      <returns>Returns a string that contains the event message in the current locale.</returns>
      <param name="values">The values used to replace variables in the event message. Variables are represented by %n, where n is a number.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Id">
      <summary>Gets the identifier for this event. All events with this identifier value represent the same type of event.</summary>
      <returns>Returns an integer value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Keywords">
      <summary>Gets the keyword mask of the event. Get the value of the <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.KeywordsDisplayNames" /> property to get the name of the keywords used in this mask.</summary>
      <returns>Returns a long value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.KeywordsDisplayNames">
      <summary>Gets the display names of the keywords used in the keyword mask for this event. </summary>
      <returns>Returns an enumerable collection of strings that contain the display names of the keywords used in the keyword mask for this event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Level">
      <summary>Gets the level of the event. The level signifies the severity of the event. For the name of the level, get the value of the <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.LevelDisplayName" /> property.</summary>
      <returns>Returns a byte value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.LevelDisplayName">
      <summary>Gets the display name of the level for this event.</summary>
      <returns>Returns a string that contains the display name of the level for this event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.LogName">
      <summary>Gets the name of the event log where this event is logged.</summary>
      <returns>Returns a string that contains a name of the event log that contains this event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.MachineName">
      <summary>Gets the name of the computer on which this event was logged.</summary>
      <returns>Returns a string that contains the name of the computer on which this event was logged.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Opcode">
      <summary>Gets the opcode of the event. The opcode defines a numeric value that identifies the activity or a point within an activity that the application was performing when it raised the event. For the name of the opcode, get the value of the <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.OpcodeDisplayName" /> property.</summary>
      <returns>Returns a short value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.OpcodeDisplayName">
      <summary>Gets the display name of the opcode for this event.</summary>
      <returns>Returns a string that contains the display name of the opcode for this event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ProcessId">
      <summary>Gets the process identifier for the event provider that logged this event.</summary>
      <returns>Returns an integer value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Properties">
      <summary>Gets the user-supplied properties of the event.</summary>
      <returns>Returns a list of <see cref="T:System.Diagnostics.Eventing.Reader.EventProperty" /> objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ProviderId">
      <summary>Gets the globally unique identifier (GUID) of the event provider that published this event.</summary>
      <returns>Returns a GUID value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ProviderName">
      <summary>Gets the name of the event provider that published this event.</summary>
      <returns>Returns a string that contains the name of the event provider that published this event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Qualifiers">
      <summary>Gets qualifier numbers that are used for event identification.</summary>
      <returns>Returns an integer value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.RecordId">
      <summary>Gets the event record identifier of the event in the log.</summary>
      <returns>Returns a long value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.RelatedActivityId">
      <summary>Gets a globally unique identifier (GUID) for a related activity in a process for which an event is involved.</summary>
      <returns>Returns a GUID value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Task">
      <summary>Gets a task identifier for a portion of an application or a component that publishes an event. A task is a 16-bit value with 16 top values reserved. This type allows any value between 0x0000 and 0xffef to be used. To obtain the task name, get the value of the <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.TaskDisplayName" /> property.</summary>
      <returns>Returns an integer value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.TaskDisplayName">
      <summary>Gets the display name of the task for the event.</summary>
      <returns>Returns a string that contains the display name of the task for the event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ThreadId">
      <summary>Gets the thread identifier for the thread that the event provider is running in.</summary>
      <returns>Returns an integer value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.TimeCreated">
      <summary>Gets the time, in <see cref="T:System.DateTime" /> format, that the event was created.</summary>
      <returns>Returns a <see cref="T:System.DateTime" /> value. The value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.ToXml">
      <summary>Gets the XML representation of the event. All of the event properties are represented in the event XML. The XML conforms to the event schema.</summary>
      <returns>Returns a string that contains the XML representation of the event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.UserId">
      <summary>Gets the security descriptor of the user whose context is used to publish the event.</summary>
      <returns>Returns a <see cref="T:System.Security.Principal.SecurityIdentifier" /> value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Version">
      <summary>Gets the version number for the event.</summary>
      <returns>Returns a byte value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs">
      <summary>When the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised, an instance of this object is passed to the delegate method that handles the event. This object contains the event that was published to the event log or the exception that occurred when the event subscription failed. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs.EventException">
      <summary>Gets the exception that occurred when the event subscription failed. The exception has a description of why the subscription failed.</summary>
      <returns>Returns an <see cref="T:System.Exception" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs.EventRecord">
      <summary>Gets the event record that is published to the event log. This event matches the criteria from the query specified in the event subscription.</summary>
      <returns>Returns a <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventTask">
      <summary>Contains an event task that is defined in an event provider. The task identifies a portion of an application or a component that publishes an event. A task is a 16-bit value with 16 top values reserved.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.DisplayName">
      <summary>Gets the localized name for the event task.</summary>
      <returns>Returns a string that contains the localized name for the event task.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.EventGuid">
      <summary>Gets the event globally unique identifier (GUID) associated with the task. </summary>
      <returns>Returns a GUID value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.Name">
      <summary>Gets the non-localized name of the event task.</summary>
      <returns>Returns a string that contains the non-localized name of the event task.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.Value">
      <summary>Gets the numeric value associated with the task.</summary>
      <returns>Returns an integer value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.PathType">
      <summary>Specifies that a string contains a name of an event log or the file system path to an event log file.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.PathType.LogName">
      <summary>A path parameter contains the name of the event log.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.PathType.FilePath">
      <summary>A path parameter contains the file system path to an event log file.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.ProviderMetadata">
      <summary>Contains static information about an event provider, such as the name and id of the provider, and the collection of events defined in the provider.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.ProviderMetadata" /> class by specifying the name of the provider that you want to retrieve information about.</summary>
      <param name="providerName">The name of the event provider that you want to retrieve information about.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.#ctor(System.String,System.Diagnostics.Eventing.Reader.EventLogSession,System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.ProviderMetadata" /> class by specifying the name of the provider that you want to retrieve information about, the event log service that the provider is registered with, and the language that you want to return the information in.</summary>
      <param name="providerName">The name of the event provider that you want to retrieve information about.</param>
      <param name="session">The <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> object that specifies whether to get the provider information from a provider on the local computer or a provider on a remote computer.</param>
      <param name="targetCultureInfo">The culture that specifies the language that the information should be returned in.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.DisplayName">
      <summary>Gets the localized name of the event provider.</summary>
      <returns>Returns a string that contains the localized name of the event provider.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.Dispose">
      <summary>Releases all the resources used by this object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by this object, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Events">
      <summary>Gets an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventMetadata" /> objects, each of which represents an event that is defined in the provider.</summary>
      <returns>Returns an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventMetadata" /> objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.HelpLink">
      <summary>Gets the base of the URL used to form help requests for the events in this event provider.</summary>
      <returns>Returns a <see cref="T:System.Uri" /> value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Id">
      <summary>Gets the globally unique identifier (GUID) for the event provider.</summary>
      <returns>Returns the GUID value for the event provider.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Keywords">
      <summary>Gets an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" /> objects, each of which represent an event keyword that is defined in the event provider.</summary>
      <returns>Returns an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" /> objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Levels">
      <summary>Gets an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" /> objects, each of which represent a level that is defined in the event provider.</summary>
      <returns>Returns an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" /> objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.LogLinks">
      <summary>Gets an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventLogLink" /> objects, each of which represent a link to an event log that is used by the event provider.</summary>
      <returns>Returns an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventLogLink" /> objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.MessageFilePath">
      <summary>Gets the path of the file that contains the message table resource that has the strings associated with the provider metadata.</summary>
      <returns>Returns a string that contains the path of the provider message file.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Name">
      <summary>Gets the unique name of the event provider.</summary>
      <returns>Returns a string that contains the unique name of the event provider.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Opcodes">
      <summary>Gets an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" /> objects, each of which represent an opcode that is defined in the event provider.</summary>
      <returns>Returns an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" /> objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.ParameterFilePath">
      <summary>Gets the path of the file that contains the message table resource that has the strings used for parameter substitutions in event descriptions.</summary>
      <returns>Returns a string that contains the path of the file that contains the message table resource that has the strings used for parameter substitutions in event descriptions.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.ResourceFilePath">
      <summary>Gets the path to the file that contains the metadata associated with the provider.</summary>
      <returns>Returns a string that contains the path to the file that contains the metadata associated with the provider.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Tasks">
      <summary>Gets an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" /> objects, each of which represent a task that is defined in the event provider.</summary>
      <returns>Returns an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" /> objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.SessionAuthentication">
      <summary>Defines values for the type of authentication used during a Remote Procedure Call (RPC) login to a server. This login occurs when you create a <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> object that specifies a connection to a remote computer.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Default">
      <summary>Use the default authentication method during RPC login. The default authentication is equivalent to Negotiate.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Negotiate">
      <summary>Use the Negotiate authentication method during RPC login. This allows the client application to select the most appropriate authentication method (NTLM or Kerberos) for the situation. </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Kerberos">
      <summary>Use Kerberos authentication during RPC login. </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Ntlm">
      <summary>Use Windows NT LAN Manager (NTLM) authentication during RPC login.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventKeywords">
      <summary>Defines the standard keywords that are attached to events by the event provider. For more information about keywords, see <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.None">
      <summary>This value indicates that no filtering on keyword is performed when the event is published.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.WdiContext">
      <summary>Attached to all Windows Diagnostic Infrastructure (WDI) context events.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.WdiDiagnostic">
      <summary>Attached to all Windows Diagnostic Infrastructure (WDI) diagnostic events.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.Sqm">
      <summary>Attached to all Service Quality Mechanism (SQM) events.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.AuditFailure">
      <summary>Attached to all failed security audit events. This keyword should only be used for events in the Security log.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.AuditSuccess">
      <summary>Attached to all successful security audit events. This keyword should only be used for events in the Security log.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.CorrelationHint">
      <summary>Attached to transfer events where the related Activity ID (Correlation ID) is a computed value and is not guaranteed to be unique (not a real GUID).</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.EventLogClassic">
      <summary>Attached to events which are raised using the RaiseEvent function.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventLevel">
      <summary>Defines the standard event levels that are used in the Event Log service. The level defines the severity of the event. Custom event levels can be defined beyond these standard levels. For more information about levels, see <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.LogAlways">
      <summary>This value indicates that not filtering on the level is done during the event publishing.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Critical">
      <summary>This level corresponds to critical errors, which is a serious error that has caused a major failure. </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Error">
      <summary>This level corresponds to normal errors that signify a problem. </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Warning">
      <summary>This level corresponds to warning events. For example, an event that gets published because a disk is nearing full capacity is a warning event.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Informational">
      <summary>This level corresponds to informational events or messages that are not errors. These events can help trace the progress or state of an application.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Verbose">
      <summary>This level corresponds to lengthy events or messages. </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventOpcode">
      <summary>Defines the standard opcodes that are attached to events by the event provider. For more information about opcodes, see <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Info">
      <summary>An event with this opcode is an informational event.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Start">
      <summary>An event with this opcode is published when an application starts a new transaction or activity. This can be embedded into another transaction or activity when multiple events with the Start opcode follow each other without an event with a Stop opcode.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Stop">
      <summary>An event with this opcode is published when an activity or a transaction in an application ends. The event corresponds to the last unpaired event with a Start opcode.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.DataCollectionStart">
      <summary>An event with this opcode is a trace collection start event.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.DataCollectionStop">
      <summary>An event with this opcode is a trace collection stop event.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Extension">
      <summary>An event with this opcode is an extension event.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Reply">
      <summary>An event with this opcode is published after an activity in an application replies to an event.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Resume">
      <summary>An event with this opcode is published after an activity in an application resumes from a suspended state. The event should follow an event with the Suspend opcode.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Suspend">
      <summary>An event with this opcode is published when an activity in an application is suspended. </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Send">
      <summary>An event with this opcode is published when one activity in an application transfers data or system resources to another activity. </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Receive">
      <summary>An event with this opcode is published when one activity in an application receives data.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventTask">
      <summary>Defines the standard tasks that are attached to events by the event provider. For more information about tasks, see <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventTask.None">
      <summary>No task is used to identify a portion of an application that publishes an event.</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterData">
      <summary>Contains the raw data for a counter.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.Decrement">
      <summary>Decrements the counter value by 1.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.Increment">
      <summary>Increments the counter value by 1.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.IncrementBy(System.Int64)">
      <summary>Increments the counter value by the specified amount.</summary>
      <param name="value">The amount by which to increment the counter value. The increment value can be positive or negative.</param>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterData.RawValue">
      <summary>Sets or gets the raw counter data.</summary>
      <returns>The raw counter data.</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterData.Value">
      <summary>Sets or gets the counter data.</summary>
      <returns>The counter data.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSet">
      <summary>Defines a set of logical counters.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.#ctor(System.Guid,System.Guid,System.Diagnostics.PerformanceData.CounterSetInstanceType)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceData.CounterSet" /> class.</summary>
      <param name="providerGuid">Guid that uniquely identifies the provider of the counter data. Use the Guid specified in the manifest.</param>
      <param name="counterSetGuid">Guid that uniquely identifies the counter set for a provider. Use the Guid specified in the manifest.</param>
      <param name="instanceType">Identifies the type of the counter set, for example, whether the counter set is a single or multiple instance counter set.</param>
      <exception cref="T:System.InsufficientMemoryException">Not enough memory is available to complete the operation.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Not supported prior to Windows Vista.</exception>
      <exception cref="T:System.ArgumentException">One of the parameters is NULL or not valid.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">An underlying Win32 function call failed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType)">
      <summary>Adds a counter to the counter set by using the specified counter identifier and type.</summary>
      <param name="counterId">Identifies the counter. Use the same value that you used in the manifest to define the counter.</param>
      <param name="counterType">Identifies the counter type. The counter type determines how the counter data is calculated, averaged, and displayed. </param>
      <exception cref="T:System.ArgumentException">The counter identifier already exists in the set or is negative, or the counter type is NULL or not valid.</exception>
      <exception cref="T:System.InvalidOperationException">You cannot add counters to the counter set after creating an instance of the counter set.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType,System.String)">
      <summary>Adds a counter to the counter set by using the specified counter identifier and type and a display name for the counter.</summary>
      <param name="counterId">Identifies the counter. Use the same value that you used in the manifest to define the counter.</param>
      <param name="counterType">Identifies the counter type. The counter type determines how the counter data is calculated, averaged, and displayed. </param>
      <param name="counterName">Name of the counter. You can use this name to index the counter in the counter set instance. (See <see cref="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.String)" />.)</param>
      <exception cref="T:System.ArgumentException">The counter identifier already exists in the set or is negative, or the counter type is NULL or not valid.</exception>
      <exception cref="T:System.InvalidOperationException">You cannot add counters to the counter set after creating an instance of the counter set.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance(System.String)">
      <summary>Creates an instance of the counter set.</summary>
      <returns>An instance of the counter set which will contain the counter data.</returns>
      <param name="instanceName">Name of the instance. The name must be unique.</param>
      <exception cref="T:System.ArgumentException">The instance name is NULL.</exception>
      <exception cref="T:System.InvalidOperationException">You must add counters to the counter set before creating an instance of the counter set.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Dispose">
      <summary>Releases all unmanaged resources used by this object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Dispose(System.Boolean)">
      <summary>Releases all unmanaged resources used by this object and optionally release the managed resources.</summary>
      <param name="disposing">True if this was called from the Dispose method, False if called from the finalizer.</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Finalize">
      <summary>Frees resources before the object is reclaimed by garbage collection.</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstance">
      <summary>Creates an instance of the logical counters defined in the <see cref="T:System.Diagnostics.PerformanceData.CounterSet" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstance.Counters">
      <summary>Retrieves the collection of counter data for the counter set instance.</summary>
      <returns>A collection of the counter data contained in the counter set instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstance.Dispose">
      <summary>Releases all unmanaged resources used by this object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet">
      <summary>Contains the collection of counter values.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Dispose">
      <summary>Releases all unmanaged resources used by this object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.Int32)">
      <summary>Accesses a counter value in the collection by using the specified counter identifier.</summary>
      <returns>The counter data.</returns>
      <param name="counterId">Identifier of the counter. This is the identifier you used when you added the counter to the counter set.</param>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.String)">
      <summary>Accesses a counter value in the collection by using the specified counter name.</summary>
      <returns>The counter data.</returns>
      <param name="counterName">Name of the counter. This is the name that you used when you added the counter to the counter set.</param>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstanceType">
      <summary>Specifies whether the counter set allows multiple instances such as processes and physical disks, or a single instance such as memory.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Single">
      <summary>The counter set contains single instance counters, for example, a counter that measures physical memory.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Multiple">
      <summary>The counter set contains multiple instance counters, for example, a counter that measures the average disk I/O for a process.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregate">
      <summary>The counter set contains single instance counters whose aggregate value is obtained from one or more sources. For example, a counter in this type of counter set might obtain the number of reads from each of the three hard disks on the computer and sum their values.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregateWithHistory">
      <summary>This type is similar to <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregate" /> except that this counter set type stores all counter values for the lifetime of the consumer application (the counter value is cached beyond the lifetime of the counter). For example, if one of the hard disks in the global aggregate example were to become unavailable, the total bytes read by that disk would still be available and used to calculate the aggregate value.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate">
      <summary>The counter set contains multiple instance counters whose aggregate value is obtained from all instances of the counter. For example, a counter in this type of counter set might obtain the total thread execution time for all threads in a multithreaded application and sum their values.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.InstanceAggregate">
      <summary>This type is similar to <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate" />, except that instead of aggregating all instance data to one aggregated (_Total) instance, it will aggregate counter data from instances of the same name. For example, if multiple provider processes contained instances named IExplore, <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Multiple" /> and <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate" /> CounterSet will show multiple IExplore instances (IExplore, IExplore#1, IExplore#2, and so on); however, a <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.InstanceAggregate" /> instance type will publish only one IExplore instance with aggregated counter data from all instances named IExplore.</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterType">
      <summary>Defines the possible types of counters. Each counter is assigned a counter type. The counter type determines how the counter data is calculated, averaged, and displayed.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLength">
      <summary>This counter type is designed to monitor the average length of a queue to a resource over time. It shows the difference between the queue lengths observed during the last two sample intervals divided by the duration of the interval. (See the PERF_COUNTER_QUEUELEN_TYPE counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.LargeQueueLength">
      <summary>This counter type monitors the average length of a queue to a resource over time. Counters of this type display the difference between the queue lengths observed during the last two sample intervals, divided by the duration of the interval. This counter type is the same as the <see cref="F:System.Diagnostics.PerformanceData.CounterType.QueueLength" /> counter type, except that it uses larger fields to accommodate larger values. (See the PERF_COUNTER_LARGE_QUEUELEN_TYPE counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLength100Ns">
      <summary>This counter type measures the queue-length space-time product using a 100-nanosecond time base. (See the PERF_COUNTER_100NS_QUEUELEN_TYPE counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLengthObjectTime">
      <summary>This counter type measures the queue-length space-time product using an object-specific time base. (See the PERF_COUNTER_OBJ_QUEUELEN_TYPE counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawData32">
      <summary>This counter type shows the last observed value only. It does not display an average. (See the PERF_COUNTER_RAWCOUNT counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawData64">
      <summary>This counter type shows the last observed value only, not an average. It is the same as the <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawData32" /> counter type, except that it uses larger fields to accommodate larger values. (See the PERF_COUNTER_LARGE_RAWCOUNT counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex32">
      <summary>This counter type shows the most recently observed value, in hexadecimal format. It does not display an average. (See the PERF_COUNTER_RAWCOUNT_HEX counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex64">
      <summary>This counter type shows the last observed value, in hexadecimal format. It is the same as the <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex32" /> counter type, except that it uses larger fields to accommodate larger values. (See the PERF_COUNTER_LARGE_RAWCOUNT_HEX counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond32">
      <summary>This counter type shows the average number of operations completed during each second of the sample interval. Counters of this type measure time in ticks of the system clock. (See the PERF_COUNTER_COUNTER counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond64">
      <summary>This counter type shows the average number of operations completed during each second of the sample interval. Counters of this type measure time in ticks of the system clock. This counter type is the same as the <see cref="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond32" /> type, but it uses larger fields to accommodate larger values. (See the PERF_COUNTER_BULK_COUNT counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32">
      <summary>This counter type shows the ratio of a subset to its set as a percentage. For example, it compares the number of bytes in use on a disk to the total number of bytes on the disk. Counters of this type display the current percentage only, not an average over time. (See the PERF_RAW_FRACTION counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawFraction64">
      <summary>This counter type shows the ratio of a subset to its set as a percentage. For example, it compares the number of bytes in use on a disk to the total number of bytes on the disk. Counters of this type display the current percentage only, not an average over time. It is the same as the <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32" /> counter type, except that it uses larger fields to accommodate larger values.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawBase32">
      <summary>This counter type collects the last observed value only. The value is used as the denominator of a counter that presents a general arithmetic fraction. This type supports the <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32" /> counter type. (See the PERF_RAW_BASE counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawBase64">
      <summary>This counter type collects the last observed value. It is the same as the <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawBase32" />counter type except that it uses larger fields to accommodate larger values. This type supports the <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction64" /> counter type. (See the PERF_LARGE_RAW_BASE counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleFraction">
      <summary>This counter type shows the average ratio of hits to all operations during the last two sample intervals. (See the PERF_SAMPLE_FRACTION counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleCounter">
      <summary>This counter type shows the average number of operations completed in one second. It measures time in units of ticks of the system performance timer. The variable F represents the number of ticks that occur in one second. The value of F is factored into the equation so that the result is displayed in seconds. (See the PERF_SAMPLE_COUNTER counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleBase">
      <summary>This counter stores the number of sampling interrupts taken and is used as a denominator in the sampling fraction. This type supports the <see cref="F:System.Diagnostics.PerformanceData.CounterType.SampleFraction" /> counter type.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageTimer32">
      <summary>This counter type measures the average time it takes to complete a process or operation. Counters of this type display a ratio of the total elapsed time of the sample interval to the number of processes or operations completed during that time. This counter type measures time in ticks of the system clock. (See the PERF_AVERAGE_TIMER counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageBase">
      <summary>This counter is used as the base data (denominator) in the computation of time or count averages for the <see cref="F:System.Diagnostics.PerformanceData.CounterType.AverageCount64" /> and <see cref="F:System.Diagnostics.PerformanceData.CounterType.AverageTimer32" /> counter types. This counter type collects the last observed value only. (See the PERF_AVERAGE_BASE counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageCount64">
      <summary>This counter type shows how many items are processed, on average, during an operation. Counters of this type display a ratio of the items processed (such as bytes sent) to the number of operations completed. The ratio is calculated by comparing the number of items processed during the last interval to the number of operations completed during the last interval. (See the PERF_AVERAGE_BULK counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageActive">
      <summary>This counter type shows the average time that a component was active as a percentage of the total sample time. (See the PERF_COUNTER_TIMER counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive">
      <summary>This is an inverse counter type. Inverse counters measure the time that a component is not active and derive the active time from that measurement. Counters of this type display the average percentage of active time observed during sample interval. The value of these counters is calculated by monitoring the percentage of time that the service was inactive and then subtracting that value from 100 percent. This counter type is the same as the <see cref="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive100Ns" /> counter type, except that it measures time in units of ticks of the system performance timer, rather than in 100 nanosecond units. (See the PERF_COUNTER_TIMER_INV counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageActive100Ns">
      <summary>This counter type shows the active time of a component as a percentage of the total elapsed time of the sample interval. It measures time in units of 100 nanoseconds. Counters of this type are designed to measure the activity of one component at a time. (See the PERF_100NSEC_TIMER counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive100Ns">
      <summary>This counter type shows the average percentage of active time observed during the sample interval. This is an inverse counter. Inverse counters are calculated by monitoring the percentage of time that the service was inactive and then subtracting that value from 100 percent. (See the PERF_100NSEC_TIMER_INV counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.ElapsedTime">
      <summary>This counter type shows the total time between when the component or process started and the time when this value is calculated. (See the PERF_ELAPSED_TIME counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive">
      <summary>This counter type is a multitimer. Multitimers collect data from more than one instance of a component, such as a processor or disk. Counters of this type display the active time of one or more components as a percentage of the total time of the sample interval. Because the numerator records the active time of components operating simultaneously, the resulting percentage can exceed 100 percent. This counter type differs from <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns" /> in that it measures time in units of ticks of the system performance timer, rather than in 100 nanosecond units. (See the PERF_COUNTER_MULTI_TIMER counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive">
      <summary>This counter type shows the active time of one or more components as a percentage of the total time of the sample interval. This counter type is an inverse multitimer. Multitimers monitor more than one instance of a component, such as a processor or disk. Inverse counters measure the time that a component is not active and derive the active time from that measurement. This counter differs from <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns" /> in that it measures time in units of ticks of the system performance timer, rather than in 100 nanosecond units. (See the PERF_COUNTER_MULTI_TIMER_INV counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns">
      <summary>This counter type shows the active time of one or more components as a percentage of the total time of the sample interval. It measures time in 100 nanosecond units. This counter type is a multitimer. Multitimers are designed to monitor more than one instance of a component, such as a processor or disk. (See the PERF_100NSEC_MULTI_TIMER counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns">
      <summary>This counter type shows the active time of one or more components as a percentage of the total time of the sample interval. Counters of this type measure time in 100 nanosecond units. This counter type is an inverse multitimer. Multitimers are designed to monitor more than one instance of a component, such as a processor or disk. Inverse counters measure the time that a component is not active and derive its active time from the measurement of inactive time. (See the PERF_100NSEC_MULTI_TIMER_INV counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerBase">
      <summary>Indicates the number of items sampled. It is used as the denominator in the calculations to get an average among the items sampled when taking timings of multiple, but similar, items. This type supports the following counter types: <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive" />, <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive" />, <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns" />, and <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns" />.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.Delta32">
      <summary>This counter type shows the change in the measured attribute between the two most recent sample intervals. (See the PERF_COUNTER_DELTA counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.Delta64">
      <summary>This counter type shows the change in the measured attribute between the two most recent sample intervals. It is the same as the <see cref="F:System.Diagnostics.PerformanceData.CounterType.Delta32" /> counter type, except that it uses larger fields to accommodate larger values. (See the PERF_COUNTER_LARGE_DELTA counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.ObjectSpecificTimer">
      <summary>This 64-bit counter type is a timer that displays in object-specific units. (See the PERF_OBJ_TIME_TIMER counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionSystemTimer">
      <summary>This counter type shows a value that consists of two counter values: the count of the elapsed time of the event being monitored, and the frequency from the system performance timer. This counter type differs from other counter timers in that the clock tick value accompanies the counter value, eliminating any possible difference due to latency from the function call. Precision counter types are used when standard system timers are not precise enough for accurate readings. (See the PERF_PRECISION_TIMER counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionTimer100Ns">
      <summary>This counter type shows a value that consists of two counter values: the count of the elapsed time of the event being monitored, and the "clock" time from a private timer in the same units. It measures time in 100 nanosecond units. This counter type differs from other counter timers in that the clock tick value accompanies the counter value eliminating any possible difference due to latency from the function call. Precision counter types are used when standard system timers are not precise enough for accurate readings. (See the PERF_PRECISION_100NS_TIMER counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionObjectSpecificTimer">
      <summary>This counter type shows a value that consists of two counter values: the count of the elapsed time of the event being monitored, and the frequency specified in the PerfFreq field of the object header. This counter type differs from other counter timers in that the clock tick value accompanies the counter value so as to eliminate any possible difference due to latency from the function call. Precision counter types are used when standard system timers are not precise enough for accurate readings. (See the PERF_PRECISION_OBJECT_TIMER counter type in the deployment kit.)</summary>
    </member>
    <member name="T:System.Dynamic.BinaryOperationBinder">
      <summary>Represents the binary dynamic operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.BinaryOperationBinder" /> class.</summary>
      <param name="operation">The binary operation kind.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic binary operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic operation.</param>
      <param name="args">An array of arguments of the dynamic operation.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the binary dynamic operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic binary operation.</param>
      <param name="arg">The right hand side operand of the dynamic binary operation.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the binary dynamic operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic binary operation.</param>
      <param name="arg">The right hand side operand of the dynamic binary operation.</param>
      <param name="errorSuggestion">The binding result if the binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
      <summary>The binary operation kind.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> object representing the kind of binary operation.</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.BindingRestrictions">
      <summary>Represents a set of binding restrictions on the <see cref="T:System.Dynamic.DynamicMetaObject" /> under which the dynamic binding is valid.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
      <summary>Combines binding restrictions from the list of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances into one set of restrictions.</summary>
      <returns>The new set of binding restrictions.</returns>
      <param name="contributingObjects">The list of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances from which to combine restrictions.</param>
    </member>
    <member name="F:System.Dynamic.BindingRestrictions.Empty">
      <summary>Represents an empty set of binding restrictions. This field is read only.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
      <summary>Creates the binding restriction that checks the expression for arbitrary immutable properties.</summary>
      <returns>The new binding restrictions.</returns>
      <param name="expression">The expression representing the restrictions.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
      <summary>Creates the binding restriction that checks the expression for object instance identity.</summary>
      <returns>The new binding restrictions.</returns>
      <param name="expression">The expression to test.</param>
      <param name="instance">The exact object instance to test.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates the binding restriction that check the expression for runtime type identity.</summary>
      <returns>The new binding restrictions.</returns>
      <param name="expression">The expression to test.</param>
      <param name="type">The exact type to test.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
      <summary>Merges the set of binding restrictions with the current binding restrictions.</summary>
      <returns>The new set of binding restrictions.</returns>
      <param name="restrictions">The set of restrictions with which to merge the current binding restrictions.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
      <summary>Creates the <see cref="T:System.Linq.Expressions.Expression" /> representing the binding restrictions.</summary>
      <returns>The expression tree representing the restrictions.</returns>
    </member>
    <member name="T:System.Dynamic.CallInfo">
      <summary>Describes arguments in the dynamic binding process.</summary>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Creates a new CallInfo that represents arguments in the dynamic binding process.</summary>
      <param name="argCount">The number of arguments.</param>
      <param name="argNames">The argument names.</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])">
      <summary>Creates a new PositionalArgumentInfo.</summary>
      <param name="argCount">The number of arguments.</param>
      <param name="argNames">The argument names.</param>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentCount">
      <summary>The number of arguments.</summary>
      <returns>The number of arguments.</returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentNames">
      <summary>The argument names.</summary>
      <returns>The read-only collection of argument names.</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
      <summary>Determines whether the specified CallInfo instance is considered equal to the current.</summary>
      <returns>true if the specified instance is equal to the current one otherwise, false.</returns>
      <param name="obj">The instance of <see cref="T:System.Dynamic.CallInfo" /> to compare with the current instance.</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.GetHashCode">
      <summary>Serves as a hash function for the current <see cref="T:System.Dynamic.CallInfo" />.</summary>
      <returns>A hash code for the current <see cref="T:System.Dynamic.CallInfo" />.</returns>
    </member>
    <member name="T:System.Dynamic.ConvertBinder">
      <summary>Represents the convert dynamic operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.#ctor(System.Type,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.ConvertBinder" />.</summary>
      <param name="type">The type to convert to.</param>
      <param name="explicit">Is true if the conversion should consider explicit conversions; otherwise, false.</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic convert operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic convert operation.</param>
      <param name="args">An array of arguments of the dynamic convert operation.</param>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Explicit">
      <summary>Gets the value indicating if the conversion should consider explicit conversions.</summary>
      <returns>True if there is an explicit conversion, otherwise false.</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic convert operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic convert operation.</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic convert operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic convert operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Type">
      <summary>The type to convert to.</summary>
      <returns>The <see cref="T:System.Type" /> object that represents the type to convert to.</returns>
    </member>
    <member name="T:System.Dynamic.CreateInstanceBinder">
      <summary>Represents the dynamic create operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initializes a new intsance of the <see cref="T:System.Dynamic.CreateInstanceBinder" />.</summary>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic create operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic create operation.</param>
      <param name="args">An array of arguments of the dynamic create operation.</param>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic create operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic create operation.</param>
      <param name="args">The arguments of the dynamic create operation.</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic create operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic create operation.</param>
      <param name="args">The arguments of the dynamic create operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteIndexBinder">
      <summary>Represents the dynamic delete index operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.DeleteIndexBinder" />.</summary>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic delete index operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic delete index operation.</param>
      <param name="args">An array of arguments of the dynamic delete index operation.</param>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic delete index operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic delete index operation.</param>
      <param name="indexes">The arguments of the dynamic delete index operation.</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic delete index operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic delete index operation.</param>
      <param name="indexes">The arguments of the dynamic delete index operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteMemberBinder">
      <summary>Represents the dynamic delete member operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.DeleteIndexBinder" />.</summary>
      <param name="name">The name of the member to delete.</param>
      <param name="ignoreCase">Is true if the name should be matched ignoring case; false otherwise.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic delete member operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic delete member operation.</param>
      <param name="args">An array of arguments of the dynamic delete member operation.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic delete member operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic delete member operation.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic delete member operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic delete member operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
      <summary>Gets the value indicating if the string comparison should ignore the case of the member name.</summary>
      <returns>True if the string comparison should ignore the case, otherwise false.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.Name">
      <summary>Gets the name of the member to delete.</summary>
      <returns>The name of the member to delete.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObject">
      <summary>Represents the dynamic binding and a binding logic of an object participating in the dynamic binding.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.DynamicMetaObject" /> class.</summary>
      <param name="expression">The expression representing this <see cref="T:System.Dynamic.DynamicMetaObject" /> during the dynamic binding process.</param>
      <param name="restrictions">The set of binding restrictions under which the binding is valid.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.DynamicMetaObject" /> class.</summary>
      <param name="expression">The expression representing this <see cref="T:System.Dynamic.DynamicMetaObject" /> during the dynamic binding process.</param>
      <param name="restrictions">The set of binding restrictions under which the binding is valid.</param>
      <param name="value">The runtime value represented by the <see cref="T:System.Dynamic.DynamicMetaObject" />.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic binary operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.BinaryOperationBinder" /> that represents the details of the dynamic operation.</param>
      <param name="arg">An instance of the <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the right hand side of the binary operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
      <summary>Performs the binding of the dynamic conversion operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.ConvertBinder" /> that represents the details of the dynamic operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic create instance operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.CreateInstanceBinder" /> that represents the details of the dynamic operation.</param>
      <param name="args">An array of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances - arguments to the create instance operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic delete index operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.DeleteIndexBinder" /> that represents the details of the dynamic operation.</param>
      <param name="indexes">An array of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances - indexes for the delete index operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>Performs the binding of the dynamic delete member operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.DeleteMemberBinder" /> that represents the details of the dynamic operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic get index operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.GetIndexBinder" /> that represents the details of the dynamic operation.</param>
      <param name="indexes">An array of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances - indexes for the get index operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
      <summary>Performs the binding of the dynamic get member operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.GetMemberBinder" /> that represents the details of the dynamic operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.InvokeBinder" /> that represents the details of the dynamic operation.</param>
      <param name="args">An array of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances - arguments to the invoke operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke member operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.InvokeMemberBinder" /> that represents the details of the dynamic operation.</param>
      <param name="args">An array of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances - arguments to the invoke member operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic set index operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.SetIndexBinder" /> that represents the details of the dynamic operation.</param>
      <param name="indexes">An array of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances - indexes for the set index operation.</param>
      <param name="value">The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the value for the set index operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic set member operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.SetMemberBinder" /> that represents the details of the dynamic operation.</param>
      <param name="value">The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the value for the set member operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
      <summary>Performs the binding of the dynamic unary operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.UnaryOperationBinder" /> that represents the details of the dynamic operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
      <summary>Creates a meta-object for the specified object.</summary>
      <returns>If the given object implements <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" /> and is not a remote object from outside the current AppDomain, returns the object's specific meta-object returned by <see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)" />. Otherwise a plain new meta-object with no restrictions is created and returned.</returns>
      <param name="value">The object to get a meta-object for.</param>
      <param name="expression">The expression representing this <see cref="T:System.Dynamic.DynamicMetaObject" /> during the dynamic binding process.</param>
    </member>
    <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
      <summary>Represents an empty array of type <see cref="T:System.Dynamic.DynamicMetaObject" />. This field is read only.</summary>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Expression">
      <summary>The expression representing the <see cref="T:System.Dynamic.DynamicMetaObject" /> during the dynamic binding process.</summary>
      <returns>The expression representing the <see cref="T:System.Dynamic.DynamicMetaObject" /> during the dynamic binding process.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
      <summary>Returns the enumeration of all dynamic member names.</summary>
      <returns>The list of dynamic member names.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
      <summary>Gets a value indicating whether the <see cref="T:System.Dynamic.DynamicMetaObject" /> has the runtime value.</summary>
      <returns>True if the <see cref="T:System.Dynamic.DynamicMetaObject" /> has the runtime value, otherwise false.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
      <summary>Gets the limit type of the <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
      <returns>
        <see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType" /> if runtime value is available, a type of the <see cref="P:System.Dynamic.DynamicMetaObject.Expression" /> otherwise.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
      <summary>The set of binding restrictions under which the binding is valid.</summary>
      <returns>The set of binding restrictions.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
      <summary>Gets the <see cref="T:System.Type" /> of the runtime value or null if the <see cref="T:System.Dynamic.DynamicMetaObject" /> has no value associated with it.</summary>
      <returns>The <see cref="T:System.Type" /> of the runtime value or null.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Value">
      <summary>The runtime value represented by this <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
      <returns>The runtime value represented by this <see cref="T:System.Dynamic.DynamicMetaObject" />.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObjectBinder">
      <summary>The dynamic call site binder that participates in the <see cref="T:System.Dynamic.DynamicMetaObject" /> binding protocol.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.DynamicMetaObjectBinder" /> class.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>When overridden in the derived class, performs the binding of the dynamic operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic operation.</param>
      <param name="args">An array of arguments of the dynamic operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>Performs the runtime binding of the dynamic operation on a set of arguments.</summary>
      <returns>An Expression that performs tests on the dynamic operation arguments, and performs the dynamic operation if the tests are valid. If the tests fail on subsequent occurrences of the dynamic operation, Bind will be called again to produce a new <see cref="T:System.Linq.Expressions.Expression" /> for the new argument types.</returns>
      <param name="args">An array of arguments to the dynamic operation.</param>
      <param name="parameters">The array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> instances that represent the parameters of the call site in the binding process.</param>
      <param name="returnLabel">A LabelTarget used to return the result of the dynamic binding.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Defers the binding of the operation until later time when the runtime values of all dynamic operation arguments have been computed.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic operation.</param>
      <param name="args">An array of arguments of the dynamic operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
      <summary>Defers the binding of the operation until later time when the runtime values of all dynamic operation arguments have been computed.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="args">An array of arguments of the dynamic operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
      <summary>Gets an expression that will cause the binding to be updated. It indicates that the expression's binding is no longer valid. This is typically used when the "version" of a dynamic object has changed.</summary>
      <returns>The update expression.</returns>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the resulting expression; any type is allowed.</param>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicObject">
      <summary>Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.#ctor">
      <summary>Enables derived types to initialize a new instance of the <see cref="T:System.Dynamic.DynamicObject" /> type.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
      <summary>Returns the enumeration of all dynamic member names. </summary>
      <returns>A sequence that contains dynamic member names.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Provides a <see cref="T:System.Dynamic.DynamicMetaObject" /> that dispatches to the dynamic virtual methods. The object can be encapsulated inside another <see cref="T:System.Dynamic.DynamicMetaObject" /> to provide custom behavior for individual actions. This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.</summary>
      <returns>An object of the <see cref="T:System.Dynamic.DynamicMetaObject" /> type.</returns>
      <param name="parameter">The expression that represents <see cref="T:System.Dynamic.DynamicMetaObject" /> to dispatch to the dynamic virtual methods.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
      <summary>Provides implementation for binary operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as addition and multiplication.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
      <param name="binder">Provides information about the binary operation. The binder.Operation property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object. For example, for the sum = first + second statement, where first and second are derived from the DynamicObject class, binder.Operation returns ExpressionType.Add.</param>
      <param name="arg">The right operand for the binary operation. For example, for the sum = first + second statement, where first and second are derived from the DynamicObject class, <paramref name="arg" /> is equal to second.</param>
      <param name="result">The result of the binary operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary>Provides implementation for type conversion operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
      <param name="binder">Provides information about the conversion operation. The binder.Type property provides the type to which the object must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Type returns the <see cref="T:System.String" /> type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns true for explicit conversion and false for implicit conversion.</param>
      <param name="result">The result of the type conversion operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
      <summary>Provides the implementation for operations that initialize a new instance of a dynamic object. This method is not intended for use in C# or Visual Basic.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
      <param name="binder">Provides information about the initialization operation.</param>
      <param name="args">The arguments that are passed to the object during initialization. For example, for the new SampleType(100) operation, where SampleType is the type derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="args[0]" /> is equal to 100.</param>
      <param name="result">The result of the initialization.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
      <summary>Provides the implementation for operations that delete an object by index. This method is not intended for use in C# or Visual Basic.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
      <param name="binder">Provides information about the deletion.</param>
      <param name="indexes">The indexes to be deleted.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
      <param name="binder">Provides information about the deletion.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for indexing operations.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
      <param name="binder">Provides information about the operation. </param>
      <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] operation in C# (sampleObject(3) in Visual Basic), where sampleObject is derived from the DynamicObject class, <paramref name="indexes[0]" /> is equal to 3.</param>
      <param name="result">The result of the index operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
      <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
      <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
      <summary>Provides the implementation for operations that invoke an object. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.</returns>
      <param name="binder">Provides information about the invoke operation.</param>
      <param name="args">The arguments that are passed to the object during the invoke operation. For example, for the sampleObject(100) operation, where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="args[0]" /> is equal to 100.</param>
      <param name="result">The result of the object invocation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>Provides the implementation for operations that invoke a member. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as calling a method.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
      <param name="binder">Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleMethod". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
      <param name="args">The arguments that are passed to the object member during the invoke operation. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="args[0]" /> is equal to 100.</param>
      <param name="result">The result of the member invocation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary>Provides the implementation for operations that set a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.</returns>
      <param name="binder">Provides information about the operation. </param>
      <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="indexes[0]" /> is equal to 3.</param>
      <param name="value">The value to set to the object that has the specified index. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="value" /> is equal to 10.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
      <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
      <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
      <summary>Provides implementation for unary operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
      <param name="binder">Provides information about the unary operation. The binder.Operation property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object. For example, for the negativeNumber = -number statement, where number is derived from the DynamicObject class, binder.Operation returns "Negate".</param>
      <param name="result">The result of the unary operation.</param>
    </member>
    <member name="T:System.Dynamic.ExpandoObject">
      <summary>Represents an object whose members can be dynamically added and removed at run time.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.#ctor">
      <summary>Initializes a new ExpandoObject that does not have members.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Adds the specified value to the <see cref="T:System.Collections.Generic.ICollection`1" /> that has the specified key.</summary>
      <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure that represents the key and value to add to the collection.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Removes all items from the collection.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific key and value.</summary>
      <returns>true if the collection contains a specific key and value; otherwise, false.</returns>
      <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an array of type <see cref="T:System.Collections.Generic.KeyValuePair`2" />, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array of type <see cref="T:System.Collections.Generic.KeyValuePair`2" /> that is the destination of the <see cref="T:System.Collections.Generic.KeyValuePair`2" /> elements copied from the <see cref="T:System.Collections.Generic.ICollection`1" />. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying starts.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Count">
      <summary>Gets the number of elements in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>The number of elements in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Removes a key and value from the collection.</summary>
      <returns>true if the key and value are successfully found and removed; otherwise, false. This method returns false if the key and value are not found in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure that represents the key and value to remove from the collection.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Add(System.String,System.Object)">
      <summary>Adds the specified key and value to the dictionary.</summary>
      <param name="key">The object to use as the key.</param>
      <param name="value">The object to use as the value.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#ContainsKey(System.String)">
      <summary>Determines whether the dictionary contains the specified key.</summary>
      <returns>true if the dictionary contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key to locate in the dictionary.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Item(System.String)">
      <summary>Gets or sets the element that has the specified key.</summary>
      <returns>The element that has the specified key.</returns>
      <param name="key">The key of the element to get or set.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> that contains the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> that contains the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(System.String)">
      <summary>Removes the element that has the specified key from the <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>true if the element is successfully removed; otherwise, false. This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
      <param name="key">The key of the element to remove.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#TryGetValue(System.String,System.Object@)">
      <summary>Gets the value associated with the specified key.</summary>
      <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> that contains the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> that contains the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="E:System.Dynamic.ExpandoObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>The provided MetaObject will dispatch to the dynamic virtual methods. The object can be encapsulated inside another MetaObject to provide custom behavior for individual actions.</summary>
      <returns>The object of the <see cref="T:System.Dynamic.DynamicMetaObject" /> type.</returns>
      <param name="parameter">The expression that represents the MetaObject to dispatch to the Dynamic virtual methods.</param>
    </member>
    <member name="T:System.Dynamic.GetIndexBinder">
      <summary>Represents the dynamic get index operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.GetIndexBinder" />.</summary>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic get index operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic get index operation.</param>
      <param name="args">An array of arguments of the dynamic get index operation.</param>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic get index operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic get index operation.</param>
      <param name="indexes">The arguments of the dynamic get index operation.</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic get index operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic get index operation.</param>
      <param name="indexes">The arguments of the dynamic get index operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.GetMemberBinder">
      <summary>Represents the dynamic get member operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.GetMemberBinder" />.</summary>
      <param name="name">The name of the member to obtain.</param>
      <param name="ignoreCase">Is true if the name should be matched ignoring case; false otherwise.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic get member operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic get member operation.</param>
      <param name="args">An array of arguments of the dynamic get member operation.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic get member operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic get member operation.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic get member operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic get member operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
      <summary>Gets the value indicating if the string comparison should ignore the case of the member name.</summary>
      <returns>True if the case is ignored, otherwise false.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.Name">
      <summary>Gets the name of the member to obtain.</summary>
      <returns>The name of the member to obtain.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
      <summary>Represents a dynamic object, that can have its operations bound at runtime.</summary>
    </member>
    <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.</returns>
      <param name="parameter">The expression tree representation of the runtime value.</param>
    </member>
    <member name="T:System.Dynamic.IInvokeOnGetBinder">
      <summary>Represents information about a dynamic get member operation that indicates if the get member should invoke properties when they perform the get operation.</summary>
    </member>
    <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
      <summary>Gets the value indicating if this get member operation should invoke properties when they perform the get operation. The default value when this interface is not present is true.</summary>
      <returns>True if this get member operation should invoke properties when they perform the get operation; otherwise false.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeBinder">
      <summary>Represents the invoke dynamic operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.InvokeBinder" />.</summary>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic invoke operation.</param>
      <param name="args">An array of arguments of the dynamic invoke operation.</param>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic invoke operation.</param>
      <param name="args">The arguments of the dynamic invoke operation.</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic invoke operation.</param>
      <param name="args">The arguments of the dynamic invoke operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeMemberBinder">
      <summary>Represents the invoke member dynamic operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.#ctor(System.String,System.Boolean,System.Dynamic.CallInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.InvokeMemberBinder" />.</summary>
      <param name="name">The name of the member to invoke.</param>
      <param name="ignoreCase">true if the name should be matched ignoring case; false otherwise.</param>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke member operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic invoke member operation.</param>
      <param name="args">An array of arguments of the dynamic invoke member operation.</param>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic invoke operation.</param>
      <param name="args">The arguments of the dynamic invoke operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke member operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic invoke member operation.</param>
      <param name="args">The arguments of the dynamic invoke member operation.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic invoke member operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic invoke member operation.</param>
      <param name="args">The arguments of the dynamic invoke member operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
      <summary>Gets the value indicating if the string comparison should ignore the case of the member name.</summary>
      <returns>True if the case is ignored, otherwise false.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.Name">
      <summary>Gets the name of the member to invoke.</summary>
      <returns>The name of the member to invoke.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.SetIndexBinder">
      <summary>Represents the dynamic set index operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.SetIndexBinder" />.</summary>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic set index operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic set index operation.</param>
      <param name="args">An array of arguments of the dynamic set index operation.</param>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic set index operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic set index operation.</param>
      <param name="indexes">The arguments of the dynamic set index operation.</param>
      <param name="value">The value to set to the collection.</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic set index operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic set index operation.</param>
      <param name="indexes">The arguments of the dynamic set index operation.</param>
      <param name="value">The value to set to the collection.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.SetMemberBinder">
      <summary>Represents the dynamic set member operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.SetMemberBinder" />.</summary>
      <param name="name">The name of the member to obtain.</param>
      <param name="ignoreCase">Is true if the name should be matched ignoring case; false otherwise.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic set member operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic set member operation.</param>
      <param name="args">An array of arguments of the dynamic set member operation.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic set member operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic set member operation.</param>
      <param name="value">The value to set to the member.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic set member operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic set member operation.</param>
      <param name="value">The value to set to the member.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
      <summary>Gets the value indicating if the string comparison should ignore the case of the member name.</summary>
      <returns>True if the case is ignored, otherwise false.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.Name">
      <summary>Gets the name of the member to obtain.</summary>
      <returns>The name of the member to obtain.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.UnaryOperationBinder">
      <summary>Represents the unary dynamic operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.BinaryOperationBinder" /> class.</summary>
      <param name="operation">The unary operation kind.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic unary operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic operation.</param>
      <param name="args">An array of arguments of the dynamic operation.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the unary dynamic operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic unary operation.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the unary dynamic operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic unary operation.</param>
      <param name="errorSuggestion">The binding result in case the binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
      <summary>The unary operation kind.</summary>
      <returns>The object of the <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents the unary operation kind.</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.IO.HandleInheritability">
      <summary>Specifies whether the underlying handle is inheritable by child processes.</summary>
    </member>
    <member name="F:System.IO.HandleInheritability.None">
      <summary>Specifies that the handle is not inheritable by child processes.</summary>
    </member>
    <member name="F:System.IO.HandleInheritability.Inheritable">
      <summary>Specifies that the handle is inheritable by child processes.</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFile">
      <summary>Represents a memory-mapped file. </summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability,System.Boolean)">
      <summary>Creates a memory-mapped file that has the specified name, capacity, access type, security permissions, inheritability, and disposal requirement from an existing file. </summary>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <param name="fileStream">The <paramref name="fileStream" /> to the file to map.</param>
      <param name="mapName">A name to assign to the memory-mapped file.</param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file.</param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />. </param>
      <param name="memoryMappedFileSecurity">The permissions that can be granted for file access and operations on memory-mapped files.This parameter can be null.</param>
      <param name="inheritability">One of the enumeration values that specifies whether a handle to the memory-mapped file can be inherited by a child process. The default is <see cref="F:System.IO.HandleInheritability.None" />.</param>
      <param name="leaveOpen">true to not dispose <paramref name="fileStream" /> after the <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" /> is closed; false to dispose <paramref name="fileStream" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileStream" /> is an empty string, contains only white space, or has one or more invalid characters, as defined by the <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> method. -or-<paramref name="fileStream" /> refers to an invalid device.-or-<paramref name="mapName" /> is an empty string. (A null reference is valid.)-or-<paramref name="capacity" /> and the length of the file are zero.-or-<paramref name="capacity" /> is greater than the file size.-or-<paramref name="access" /> is set to write-only with the <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> enumeration value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileStream" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than or equal to zero.-or-<paramref name="capacity" /> is less than the file size.-or-<paramref name="access" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> enumeration value.-or-<paramref name="inheritability" /> is not a valid <see cref="T:System.IO.HandleInheritability" /> enumeration value.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The operating system denied the specified <paramref name="access" /> to the file; for example, <paramref name="access" /> is set to <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> or <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />, but the file or directory is read-only. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="fileStream" /> exceeds the maximum length defined by the operating system. In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions for the file.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String)">
      <summary>Creates a memory-mapped file from an existing file.</summary>
      <returns>A memory-mapped file.</returns>
      <param name="path">The path to file to map.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string, contains only white space, or has one or more invalid characters, as defined by the <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> method. -or-<paramref name="path" /> refers to an invalid device. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the maximum length defined by the operating system. In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions for the file.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode)">
      <summary>Creates a memory-mapped file that has the specified access mode from an existing file. </summary>
      <returns>A memory-mapped file that has the specified access mode.</returns>
      <param name="path">The path to file to map.</param>
      <param name="mode">One of the enumeration values that specifies how the source file on disk should be used.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string, contains only white space, or has one or more invalid characters, as defined by the <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> method. -or-<paramref name="path" /> refers to an invalid device.-or-<paramref name="mapName" /> is an empty string. (A null reference is valid.)-or-<paramref name="mode" /> is <see cref="F:System.IO.FileMode.Append" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mode" /> is <see cref="F:System.IO.FileMode.CreateNew" />-or-An I/O error occurred.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the maximum length defined by the operating system. In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions for the file.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String)">
      <summary>Creates a memory-mapped file that has the specified access mode and name from an existing file.</summary>
      <returns>A memory-mapped file that has the specified name and access mode.</returns>
      <param name="path">The path to the file to map.</param>
      <param name="mode">One of the enumeration values that specifies how the source file on disk should be used.</param>
      <param name="mapName">A name to assign to the memory-mapped file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string, contains only white space, or has one or more invalid characters, as defined by the <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> method. -or-<paramref name="path" /> refers to an invalid device.-or-<paramref name="mapName" /> is an empty string. (A null reference is valid.)-or-<paramref name="capacity" /> and the length of the file are zero.-or-<paramref name="capacity" /> is greater than the file size.-or-<paramref name="mode" /> is <see cref="F:System.IO.FileMode.Append" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is greater than the size of the logical address space.-or-<paramref name="capacity" /> is less than or equal to zero.-or-<paramref name="capacity" /> is less than the file size.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mode" /> is <see cref="F:System.IO.FileMode.CreateNew" />-or-An I/O error occurred.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the maximum length defined by the operating system. In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions for the file.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64)">
      <summary>Creates a memory-mapped file that has the specified access mode, name, and capacity from an existing file.</summary>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <param name="path">The path to the file to map.</param>
      <param name="mode">One of the enumeration values that specifies how the source file on disk should be used.</param>
      <param name="mapName">A name to assign to the memory-mapped file. </param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string, contains only white space, or has one or more invalid characters, as defined by the <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> method. -or-<paramref name="path" /> refers to an invalid device.-or-<paramref name="mapName" /> is an empty string. (A null reference is valid.)-or-<paramref name="capacity" /> and the length of the file are zero.-or-<paramref name="capacity" /> is greater than the file size.-or-<paramref name="mode" /> is <see cref="F:System.IO.FileMode.Append" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is greater than the size of the logical address space.-or-<paramref name="capacity" /> is less than or equal to zero.-or-<paramref name="capacity" /> is less than the file size.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mode" /> is <see cref="F:System.IO.FileMode.CreateNew" />-or-An I/O error occurred.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the maximum length defined by the operating system. In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions for the file.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>Creates a memory-mapped file that has the specified access mode, name, capacity, and access type from an existing file.</summary>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <param name="path">The path to the file to map.</param>
      <param name="mode">One of the enumeration values that specifies how the source file on disk should be used.</param>
      <param name="mapName">A name to assign to the memory-mapped file. </param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file. </param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string.-or-<paramref name="mode" /> is not an allowed value.-or-<paramref name="access" /> is not an allowed value.-or-<paramref name="path" /> specifies an empty file.-or-<paramref name="capacity" /> is 0 and the size of the file indicated by <paramref name="path" /> is 0.-or-<paramref name="access" /> is specified as <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read" /> and capacity is greater than the size of the file indicated by <paramref name="path" />.-or-<paramref name="mode" /> is <see cref="F:System.IO.FileMode.Append" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mode" /> is <see cref="F:System.IO.FileMode.CreateNew" />-or-An I/O error occurred.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the maximum length defined by the operating system. In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions for the file.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than 0.-or-<paramref name="access" /> is not a defined <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> value..-or-The size of the file indicated by <paramref name="path" /> is greater than <paramref name="capacity" />.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64)">
      <summary>Creates a memory-mapped file that has the specified capacity in system memory. </summary>
      <returns>A memory-mapped file that has the specified name and capacity.</returns>
      <param name="mapName">A name to assign to the memory-mapped file.</param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string. (A null reference is valid.)</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>Creates a memory-mapped file that has the specified capacity and access type in system memory. </summary>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <param name="mapName">A name to assign to the memory-mapped file.</param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file.</param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string. (A null reference is valid.)-or-<paramref name="access" /> is set to write-only with the <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> enumeration value. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than or equal to zero.-or-<paramref name="access" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> enumeration value.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability)">
      <summary>Creates a memory-mapped file that has the specified capacity, access type, memory allocation, security permissions, and inheritability in system memory.</summary>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <param name="mapName">A name to assign to the memory-mapped file.</param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file.</param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />. </param>
      <param name="options">A bitwise combination of enumeration values that specifies memory allocation options for the memory-mapped file.</param>
      <param name="memoryMappedFileSecurity">The permissions that can be granted for file access and operations on memory-mapped files.This parameter can be null.</param>
      <param name="inheritability">One of the enumeration values that specifies whether a handle to the memory-mapped file can be inherited by a child process. The default is <see cref="F:System.IO.HandleInheritability.None" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string. (A null reference is valid.)-or-<paramref name="access" /> is set to write-only with the <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> enumeration value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than or equal to zero.-or-<paramref name="access" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> enumeration value.-or-<paramref name="inheritability" /> is not a valid <see cref="T:System.IO.HandleInheritability" /> enumeration value.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64)">
      <summary>Creates or opens a memory-mapped file that has the specified capacity in system memory.</summary>
      <returns>A memory-mapped file that has the specified name and size.</returns>
      <param name="mapName">A name to assign to the memory-mapped file.</param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string. (A null reference is valid.)</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is greater than the size of the logical address space.-or-<paramref name="capacity" /> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>Creates or opens a memory-mapped file that has the specified capacity and access type in system memory. </summary>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <param name="mapName">A name to assign to the memory-mapped file.</param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file.</param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string. (A null reference is valid.)-or-<paramref name="access" /> is set to write-only with the <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> enumeration value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is greater than the size of the logical address space.-or-<paramref name="capacity" /> is less than or equal to zero.-or-<paramref name="access" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> enumeration value.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The operating system denied the specified access to the file; for example, access is set to <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> or <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />, but the file or directory is read-only. </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability)">
      <summary>Creates or opens a memory-mapped file that has the specified capacity, access type, memory allocation, security permissions, and inheritability in system memory.</summary>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <param name="mapName">A name to assign to the memory-mapped file.</param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file.</param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />. </param>
      <param name="options">A bitwise combination of enumeration values that specifies memory allocation options for the memory-mapped file.</param>
      <param name="memoryMappedFileSecurity">The permissions that can be granted for file access and operations on memory-mapped files.This parameter can be null.</param>
      <param name="inheritability">One of the enumeration values that specifies whether a handle to the memory-mapped file can be inherited by a child process. The default is <see cref="F:System.IO.HandleInheritability.None" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string. -or-<paramref name="access" /> is set to write-only with the <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> enumeration value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is greater than the size of the logical address space.-or-<paramref name="capacity" /> is less than or equal to zero.-or-<paramref name="access" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> enumeration value.-or-<paramref name="inheritability" /> is not a valid <see cref="T:System.IO.HandleInheritability" /> enumeration value.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The operating system denied the specified <paramref name="access" /> to the file; for example, <paramref name="access" /> is set to <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> or <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />, but the file or directory is read-only. </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor">
      <summary>Creates a <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" /> that maps to a view of the memory-mapped file.</summary>
      <returns>A randomly accessible block of memory.</returns>
      <exception cref="T:System.UnauthorizedAccessException">Access to the memory-mapped file is unauthorized.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64)">
      <summary>Creates a <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" /> that maps to a view of the memory-mapped file, and that has the specified offset and size.</summary>
      <returns>A randomly accessible block of memory.</returns>
      <param name="offset">The byte at which to start the view.</param>
      <param name="size">The size of the view. Specify 0 (zero) to create a view that starts at <paramref name="offset" /> and ends at the end of the memory-mapped file.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="size" /> is a negative value.-or-<paramref name="size" /> is greater than the logical address space.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the memory-mapped file is unauthorized.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>Creates a <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" /> that maps to a view of the memory-mapped file, and that has the specified offset, size, and access restrictions.</summary>
      <returns>A randomly accessible block of memory.</returns>
      <param name="offset">The byte at which to start the view.</param>
      <param name="size">The size of the view. Specify 0 (zero) to create a view that starts at <paramref name="offset" /> and ends at the end of the memory-mapped file.</param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="size" /> is a negative value.-or-<paramref name="size" /> is greater than the logical address space.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="access" /> is invalid for the memory-mapped file.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream">
      <summary>Creates a stream that maps to a view of the memory-mapped file.  </summary>
      <returns>A stream of memory.</returns>
      <exception cref="T:System.UnauthorizedAccessException">Access to the memory-mapped file is unauthorized.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64)">
      <summary>Creates a stream that maps to a view of the memory-mapped file, and that has the specified offset and size.</summary>
      <returns>A stream of memory that has the specified offset and size.</returns>
      <param name="offset">The byte at which to start the view.</param>
      <param name="size">The size of the view. Specify 0 (zero) to create a view that starts at <paramref name="offset" /> and ends at the end of the memory-mapped file.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="size" /> is a negative value.-or-<paramref name="size" /> is greater than the logical address space.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the memory-mapped file is unauthorized.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="size" /> is greater than the total virtual memory.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>Creates a stream that maps to a view of the memory-mapped file, and that has the specified offset, size, and access type.</summary>
      <returns>A stream of memory that has the specified characteristics.</returns>
      <param name="offset">The byte at which to start the view.</param>
      <param name="size">The size of the view. Specify 0 (zero) to create a view that starts at <paramref name="offset" /> and ends at the end of the memory-mapped file.</param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="size" /> is a negative value.-or-<paramref name="size" /> is greater than the logical address space.-or-<paramref name="access " />is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> enumeration value.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="access" /> is invalid for the memory-mapped file.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="size" /> is greater than the total virtual memory.-or-<paramref name="access" /> is invalid for the memory-mapped file.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" />. </summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.GetAccessControl">
      <summary>Gets the access control to the memory-mapped file resource.</summary>
      <returns>The permissions that can be granted for file access and operations on memory-mapped files.</returns>
      <exception cref="T:System.InvalidOperationException">An underlying call to set security information failed.</exception>
      <exception cref="T:System.NotSupportedException">An underlying call to set security information failed.</exception>
      <exception cref="T:System.ObjectDisposedException">The memory-mapped file is closed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current platform is Windows 98 or earlier.</exception>
      <exception cref="T:System.UnauthorizedAccessException">An underlying call to set security information failed.-or-The memory-mapped file was opened as <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> only.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String)">
      <summary>Opens an existing memory-mapped file that has the specified name in system memory.</summary>
      <returns>A memory-mapped file that has the specified name. </returns>
      <param name="mapName">The name of the memory-mapped file to open.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string. (A null reference is valid.)</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified for <paramref name="mapName" /> does not exist.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights)">
      <summary>Opens an existing memory-mapped file that has the specified name and access rights in system memory.</summary>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <param name="mapName">The name of the memory-mapped file to open.</param>
      <param name="desiredAccessRights">One of the enumeration values that specifies the access rights to apply to the memory-mapped file.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string. (A null reference is valid.)</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="desiredAccessRights" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights" /> enumeration value.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified for <paramref name="mapName" /> does not exist.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights,System.IO.HandleInheritability)">
      <summary>Opens an existing memory-mapped file that has the specified name, access rights, and inheritability in system memory.</summary>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <param name="mapName">The name of the memory-mapped file to open.</param>
      <param name="desiredAccessRights">One of the enumeration values that specifies the access rights to apply to the memory-mapped file.</param>
      <param name="inheritability">One of the enumeration values that specifies whether a handle to the memory-mapped file can be inherited by a child process. The default is <see cref="F:System.IO.HandleInheritability.None" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string. (A null reference is valid.)</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="desiredAccessRights" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights" /> enumeration value.-or-<paramref name="inheritability" /> is not a valid <see cref="T:System.IO.HandleInheritability" /> enumeration value.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The requested access is invalid for the memory-mapped file.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified for <paramref name="mapName" /> does not exist.</exception>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle">
      <summary>Gets the file handle of a memory-mapped file.</summary>
      <returns>The handle to the memory-mapped file.</returns>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.SetAccessControl(System.IO.MemoryMappedFiles.MemoryMappedFileSecurity)">
      <summary>Sets the access control to the memory-mapped file resource.</summary>
      <param name="memoryMappedFileSecurity">The permissions that can be granted for file access and operations on memory-mapped files.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="memoryMappedFileSecurity" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">An underlying call to set security information failed.</exception>
      <exception cref="T:System.NotSupportedException">An underlying call to set security information failed.</exception>
      <exception cref="T:System.UnauthorizedAccessException">An underlying call to set security information failed.</exception>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess">
      <summary>Specifies access capabilities and restrictions for a memory-mapped file or view. </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite">
      <summary>Read and write access to the file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read">
      <summary>Read-only access to the file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write">
      <summary>Write-only access to file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.CopyOnWrite">
      <summary>Read and write access to the file, with the restriction that any write operations will not be seen by other processes. </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadExecute">
      <summary>Read access to the file that can store and run executable code.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWriteExecute">
      <summary>Read and write access to the file that can can store and run executable code.</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileOptions">
      <summary>Provides memory allocation options for memory-mapped files.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileOptions.None">
      <summary>No memory allocation options are applied.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileOptions.DelayAllocatePages">
      <summary>Memory allocation is delayed until a view is created with either the <see cref="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor" /> or <see cref="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream" /> method.</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights">
      <summary>Specifies access rights to a memory-mapped file that is not associated with a file on disk.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.CopyOnWrite">
      <summary>The right to read and write to a file with the restriction that write operations will not be seen by other processes.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Write">
      <summary>The right to add data to a file or remove data from a file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Read">
      <summary>The right to open and copy a file as read-only.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Execute">
      <summary>The right to run an application file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Delete">
      <summary>The right to delete a file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadPermissions">
      <summary>The right to open and copy access and audit rules from a file. This does not include the right to read data, file system attributes, or extended file system attributes.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ChangePermissions">
      <summary>The right to change the security and audit rules associated with a file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.TakeOwnership">
      <summary>The right to change the owner of a file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadWrite">
      <summary>The right to open and copy a file, and the right to add data to a file or remove data from a file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadExecute">
      <summary>The right to open and copy a folder or file as read-only, and to run application files. This right includes the <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Read" /> right and the <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Execute" /> right.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadWriteExecute">
      <summary>The right to open and copy a file, the right to add data to a file or remove data from a file, and the right to run an application file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.FullControl">
      <summary>The right to exert full control over a file, and to modify access control and audit rules. This value represents the right to do anything with a file and is the combination of all rights in this enumeration.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.AccessSystemSecurity">
      <summary>The right to get or set permissions on a file.</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileSecurity">
      <summary>Represents the permissions that can be granted for file access and operations on memory-mapped files. </summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFileSecurity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileSecurity" /> class. </summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor">
      <summary>Represents a randomly accessed view of a memory-mapped file.</summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Flush">
      <summary>Clears all buffers for this view and causes any buffered data to be written to the underlying file.</summary>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the accessor was closed.</exception>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle">
      <summary>Gets a handle to the view of a memory-mapped file.</summary>
      <returns>A wrapper for the operating system's handle to the view of the file. </returns>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedViewStream">
      <summary>Represents a view of a memory-mapped file as a sequentially accessed stream.</summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewStream.Flush">
      <summary>Clears all buffers for this stream and causes any buffered data to be written to the underlying file.</summary>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewStream.SafeMemoryMappedViewHandle">
      <summary>Gets a handle to the view of a memory-mapped file.</summary>
      <returns>A wrapper for the operating system's handle to the view of the file. </returns>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewStream.SetLength(System.Int64)">
      <summary>Sets the length of the current stream.</summary>
      <param name="value">The desired length of the current stream in bytes.</param>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="T:System.IO.Pipes.AnonymousPipeClientStream">
      <summary>Exposes the client side of an anonymous pipe stream, which supports both synchronous and asynchronous read and write operations.</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> class from the specified handle.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.Anonymous pipes can only be in one direction, so <paramref name="direction" /> cannot be set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <param name="safePipeHandle">A safe handle for the pipe that this <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object will encapsulate.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="safePipeHandle " />is not a valid handle.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="safePipeHandle" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="direction" /> is set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as a disk error, has occurred.-or-The stream has been closed.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> class with the specified pipe direction and a string representation of the pipe handle.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.Anonymous pipes can only be in one direction, so <paramref name="direction" /> cannot be set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <param name="pipeHandleAsString">A string that represents the pipe handle.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeHandleAsString" /> is an invalid handle.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeHandleAsString" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="direction" /> is set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> class with the specified string representation of the pipe handle.</summary>
      <param name="pipeHandleAsString">A string that represents the pipe handle.</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="pipeHandleAsString" /> is not a valid pipe handle.</exception>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeClientStream.ReadMode">
      <summary>Sets the reading mode for the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object.</summary>
      <returns>Always <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The transmission mode is not valid. For anonymous pipes, only <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" /> is supported.</exception>
      <exception cref="T:System.NotSupportedException">The transmission mode is <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />.</exception>
      <exception cref="T:System.IO.IOException">The connection is broken or another I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode">
      <summary>Gets the pipe transmission mode supported by the current pipe.</summary>
      <returns>Always <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />.</returns>
    </member>
    <member name="T:System.IO.Pipes.AnonymousPipeServerStream">
      <summary>Exposes a stream around an anonymous pipe, which supports both synchronous and asynchronous read and write operations.</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> class.</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> class with the specified pipe direction.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.Anonymous pipes can only be in one direction, so <paramref name="direction" /> cannot be set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="direction" /> is set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> class from the specified pipe handles.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.Anonymous pipes can only be in one direction, so <paramref name="direction" /> cannot be set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <param name="serverSafePipeHandle">A safe handle for the pipe that this <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> object will encapsulate.</param>
      <param name="clientSafePipeHandle">A safe handle for the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="serverSafePipeHandle" /> or <paramref name="clientSafePipeHandle" /> is an invalid handle.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serverSafePipeHandle" /> or <paramref name="clientSafePipeHandle" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="direction" /> is set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as a disk error, has occurred.-or-The stream has been closed.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> class with the specified pipe direction and inheritability mode.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.Anonymous pipes can only be in one direction, so <paramref name="direction" /> cannot be set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <param name="inheritability">One of the enumeration values that determines whether the underlying handle can be inherited by child processes. Must be set to either <see cref="F:System.IO.HandleInheritability.None" /> or <see cref="F:System.IO.HandleInheritability.Inheritable" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inheritability" /> is not set to either <see cref="F:System.IO.HandleInheritability.None" /> or <see cref="F:System.IO.HandleInheritability.Inheritable" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="direction" /> is set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> class with the specified pipe direction, inheritability mode, and buffer size.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.Anonymous pipes can only be in one direction, so <paramref name="direction" /> cannot be set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <param name="inheritability">One of the enumeration values that determines whether the underlying handle can be inherited by child processes. Must be set to either <see cref="F:System.IO.HandleInheritability.None" /> or <see cref="F:System.IO.HandleInheritability.Inheritable" />.</param>
      <param name="bufferSize">The size of the buffer. This value must be greater than or equal to 0. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inheritability" /> is not set to either <see cref="F:System.IO.HandleInheritability.None" /> or <see cref="F:System.IO.HandleInheritability.Inheritable" />.-or-<paramref name="bufferSize" /> is less than 0.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="direction" /> is set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> class with the specified pipe direction, inheritability mode, buffer size, and pipe security.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.Anonymous pipes can only be in one direction, so <paramref name="direction" /> cannot be set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <param name="inheritability">One of the enumeration values that determines whether the underlying handle can be inherited by child processes.</param>
      <param name="bufferSize">The size of the buffer. This value must be greater than or equal to 0. </param>
      <param name="pipeSecurity">An object that determines the access control and audit security for the pipe.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inheritability" /> is not set to either <see cref="F:System.IO.HandleInheritability.None" /> or <see cref="F:System.IO.HandleInheritability.Inheritable" />.-or-<paramref name="bufferSize" /> is less than 0.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="direction" /> is set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle">
      <summary>Gets the safe handle for the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object that is currently connected to the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> object.</summary>
      <returns>A handle for the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object that is currently connected to the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> object.</returns>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle">
      <summary>Closes the local copy of the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object's handle.</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString">
      <summary>Gets the connected <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object's handle as a string.</summary>
      <returns>A string that represents the connected <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object's handle.</returns>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeServerStream.ReadMode">
      <summary>Sets the reading mode for the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> object. For anonymous pipes, transmission mode must be <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />.</summary>
      <returns>Always <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The transmission mode is not valid. For anonymous pipes, only <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" /> is supported. </exception>
      <exception cref="T:System.NotSupportedException">The property is set to <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />, which is not supported for anonymous pipes.</exception>
      <exception cref="T:System.IO.IOException">The connection is broken or another I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode">
      <summary>Gets the pipe transmission mode that is supported by the current pipe.</summary>
      <returns>Always <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />.</returns>
    </member>
    <member name="T:System.IO.Pipes.NamedPipeClientStream">
      <summary>Exposes a <see cref="T:System.IO.Stream" /> around a named pipe, which supports both synchronous and asynchronous read and write operations.</summary>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.Boolean,System.Boolean,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class for the specified pipe handle with the specified pipe direction.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="isAsync">true to indicate that the handle was opened asynchronously; otherwise, false.</param>
      <param name="isConnected">true to indicate that the pipe is connected; otherwise, false.</param>
      <param name="safePipeHandle">A safe handle for the pipe that this <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> object will encapsulate.</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="safePipeHandle" /> is not a valid handle.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="safePipeHandle" /> is not a valid handle.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="safePipeHandle" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.</exception>
      <exception cref="T:System.IO.IOException">The stream has been closed. </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class with the specified pipe name.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class with the specified pipe and server names.</summary>
      <param name="serverName">The name of the remote computer to connect to, or "." to specify the local computer.</param>
      <param name="pipeName">The name of the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeAccessRights,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel,System.IO.HandleInheritability)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class with the specified pipe and server names, and the specified pipe options, security impersonation level, and inheritability mode.</summary>
      <param name="serverName">The name of the remote computer to connect to, or "." to specify the local computer.</param>
      <param name="pipeName">The name of the pipe.</param>
      <param name="desiredAccessRights">One of the enumeration values that specifies the desired access rights of the pipe.</param>
      <param name="options">One of the enumeration values that determines how to open or create the pipe.</param>
      <param name="impersonationLevel">One of the enumeration values that determines the security impersonation level.</param>
      <param name="inheritability">One of the enumeration values that determines whether the underlying handle will be inheritable by child processes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="options" /> is not a valid <see cref="T:System.IO.Pipes.PipeOptions" /> value.-or-<paramref name="impersonationLevel" /> is not a valid <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> value.-or-<paramref name="inheritability" /> is not a valid <see cref="T:System.IO.HandleInheritability" /> value.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class with the specified pipe and server names, and the specified pipe direction.</summary>
      <param name="serverName">The name of the remote computer to connect to, or "." to specify the local computer.</param>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class with the specified pipe and server names, and the specified pipe direction and pipe options.</summary>
      <param name="serverName">The name of the remote computer to connect to, or "." to specify the local computer.</param>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="options">One of the enumeration values that determines how to open or create the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-<paramref name="options" /> is not a valid <see cref="T:System.IO.Pipes.PipeOptions" /> value.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class with the specified pipe and server names, and the specified pipe direction, pipe options, and security impersonation level.</summary>
      <param name="serverName">The name of the remote computer to connect to, or "." to specify the local computer.</param>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="options">One of the enumeration values that determines how to open or create the pipe.</param>
      <param name="impersonationLevel">One of the enumeration values that determines the security impersonation level.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-<paramref name="options" /> is not a valid <see cref="T:System.IO.Pipes.PipeOptions" /> value.-or-<paramref name="impersonationLevel" /> is not a valid <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> value.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel,System.IO.HandleInheritability)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class with the specified pipe and server names, and the specified pipe direction, pipe options, security impersonation level, and inheritability mode.</summary>
      <param name="serverName">The name of the remote computer to connect to, or "." to specify the local computer.</param>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="options">One of the enumeration values that determines how to open or create the pipe.</param>
      <param name="impersonationLevel">One of the enumeration values that determines the security impersonation level.</param>
      <param name="inheritability">One of the enumeration values that determines whether the underlying handle will be inheritable by child processes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-<paramref name="options" /> is not a valid <see cref="T:System.IO.Pipes.PipeOptions" /> value.-or-<paramref name="impersonationLevel" /> is not a valid <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> value.-or-<paramref name="inheritability" /> is not a valid <see cref="T:System.IO.HandleInheritability" /> value.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.Connect">
      <summary>Connects to a waiting server.</summary>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.Connect(System.Int32)">
      <summary>Connects to a waiting server within the specified timeout period.</summary>
      <param name="timeout">The number of milliseconds to wait for the server to respond before the connection times out.</param>
      <exception cref="T:System.TimeoutException">Could not connect to the server within the specified <paramref name="timeout" /> period.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than 0.</exception>
    </member>
    <member name="P:System.IO.Pipes.NamedPipeClientStream.NumberOfServerInstances">
      <summary>Gets the number of server instances that share the same pipe name.</summary>
      <returns>The number of server instances that share the same pipe name.</returns>
      <exception cref="T:System.InvalidOperationException">The pipe handle has not been set.-or-The current <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> object has not yet connected to a <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> object.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or an I/O error occurred.</exception>
      <exception cref="T:System.ObjectDisposedException">The underlying pipe handle is closed.</exception>
    </member>
    <member name="T:System.IO.Pipes.NamedPipeServerStream">
      <summary>Exposes a <see cref="T:System.IO.Stream" /> around a named pipe, supporting both synchronous and asynchronous read and write operations.</summary>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.Boolean,System.Boolean,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class from the specified pipe handle.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="isAsync">true to indicate that the handle was opened asynchronously; otherwise, false.</param>
      <param name="isConnected">true to indicate that the pipe is connected; otherwise, false.</param>
      <param name="safePipeHandle">A safe handle for the pipe that this <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> object will encapsulate.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="safePipeHandle" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="safePipeHandle" /> is an invalid handle.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="safePipeHandle" /> is not a valid pipe handle.-or-The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported. </exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name and pipe direction.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported.</exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name, pipe direction, and maximum number of server instances.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="maxNumberOfServerInstances">The maximum number of server instances that share the same name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-A non-negative number is required. -or-<paramref name="maxNumberofServerInstances" /> is less than one or greater than 254.-or-<see cref="F:System.IO.HandleInheritability.None" />  or <see cref="F:System.IO.HandleInheritability.Inheritable" />  is required.-or-Access rights is limited to the <see cref="F:System.IO.Pipes.PipeAccessRights.ChangePermissions" /> , <see cref="F:System.IO.Pipes.PipeAccessRights.TakeOwnership" /> , and <see cref="F:System.IO.Pipes.PipeAccessRights.AccessSystemSecurity" />  flags.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported.</exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name, pipe direction, maximum number of server instances, and transmission mode.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="maxNumberOfServerInstances">The maximum number of server instances that share the same name.</param>
      <param name="transmissionMode">One of the enumeration values that determines the transmission mode of the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-<paramref name="maxNumberofServerInstances" /> is less than one or greater than 254.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported.</exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name, pipe direction, maximum number of server instances, transmission mode, and pipe options.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="maxNumberOfServerInstances">The maximum number of server instances that share the same name.</param>
      <param name="transmissionMode">One of the enumeration values that determines the transmission mode of the pipe.</param>
      <param name="options">One of the enumeration values that determines how to open or create the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-<paramref name="maxNumberofServerInstances" /> is less than one or greater than 254.-or-<paramref name="options" /> is not a valid <see cref="T:System.IO.Pipes.PipeOptions" /> value.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported.</exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name, pipe direction, maximum number of server instances, transmission mode, pipe options, and recommended in and out buffer sizes.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="maxNumberOfServerInstances">The maximum number of server instances that share the same name.</param>
      <param name="transmissionMode">One of the enumeration values that determines the transmission mode of the pipe.</param>
      <param name="options">One of the enumeration values that determines how to open or create the pipe.</param>
      <param name="inBufferSize">A positive value greater than 0 that indicates the input buffer size.</param>
      <param name="outBufferSize">A positive value greater than 0 that indicates the output buffer size.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-<paramref name="maxNumberofServerInstances" /> is less than one or greater than 254.-or-<paramref name="options" /> is not a valid <see cref="T:System.IO.Pipes.PipeOptions" /> value.-or-<paramref name="inBufferSize" /> is negative.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported.</exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32,System.IO.Pipes.PipeSecurity)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name, pipe direction, maximum number of server instances, transmission mode, pipe options, recommended in and out buffer sizes, and pipe security.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="maxNumberOfServerInstances">The maximum number of server instances that share the same name.</param>
      <param name="transmissionMode">One of the enumeration values that determines the transmission mode of the pipe.</param>
      <param name="options">One of the enumeration values that determines how to open or create the pipe.</param>
      <param name="inBufferSize">A positive value greater than 0 that indicates the input buffer size.</param>
      <param name="outBufferSize">A positive value greater than 0 that indicates the output buffer size.</param>
      <param name="pipeSecurity">An object that determines the access control and audit security for the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-<paramref name="maxNumberofServerInstances" /> is less than one or greater than 254.-or-<paramref name="options" /> is not a valid <see cref="T:System.IO.Pipes.PipeOptions" /> value.-or-<paramref name="inBufferSize" /> is negative.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported.</exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32,System.IO.Pipes.PipeSecurity,System.IO.HandleInheritability)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name, pipe direction, maximum number of server instances, transmission mode, pipe options, recommended in and out buffer sizes, pipe security, and inheritability mode.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="maxNumberOfServerInstances">The maximum number of server instances that share the same name.</param>
      <param name="transmissionMode">One of the enumeration values that determines the transmission mode of the pipe.</param>
      <param name="options">One of the enumeration values that determines how to open or create the pipe.</param>
      <param name="inBufferSize">A positive value greater than 0 that indicates the input buffer size.</param>
      <param name="outBufferSize">A positive value greater than 0 that indicates the output buffer size.</param>
      <param name="pipeSecurity">An object that determines the access control and audit security for the pipe.</param>
      <param name="inheritability">One of the enumeration values that determines whether the underlying handle can be inherited by child processes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-<paramref name="maxNumberofServerInstances" /> is less than one or greater than 254.-or-<paramref name="options" /> is not a valid <see cref="T:System.IO.Pipes.PipeOptions" /> value.-or-<paramref name="inBufferSize" /> is negative.-or-<paramref name="inheritability" /> is not a valid <see cref="T:System.IO.HandleInheritability" /> value.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported.</exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32,System.IO.Pipes.PipeSecurity,System.IO.HandleInheritability,System.IO.Pipes.PipeAccessRights)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name, pipe direction, maximum number of server instances, transmission mode, pipe options, recommended in and out buffer sizes, pipe security, inheritability mode, and pipe access rights.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="maxNumberOfServerInstances">The maximum number of server instances that share the same name.</param>
      <param name="transmissionMode">One of the enumeration values that determines the transmission mode of the pipe.</param>
      <param name="options">One of the enumeration values that determines how to open or create the pipe.</param>
      <param name="inBufferSize">The input buffer size.</param>
      <param name="outBufferSize">The output buffer size.</param>
      <param name="pipeSecurity">An object that determines the access control and audit security for the pipe.</param>
      <param name="inheritability">One of the enumeration values that determines whether the underlying handle can be inherited by child processes.</param>
      <param name="additionalAccessRights">One of the enumeration values that specifies the access rights of the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-<paramref name="maxNumberofServerInstances" /> is less than one or greater than 254.-or-<paramref name="options" /> is not a valid <see cref="T:System.IO.Pipes.PipeOptions" /> value.-or-<paramref name="inBufferSize" /> is negative.-or-<paramref name="inheritability" /> is not a valid <see cref="T:System.IO.HandleInheritability" /> value.-or-<paramref name="additionalAccessRights" /> is not a valid <see cref="T:System.IO.Pipes.PipeAccessRights" /> value.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported.</exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.BeginWaitForConnection(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to wait for a client to connect.</summary>
      <returns>An object that references the asynchronous request.</returns>
      <param name="callback">The method to call when a client connects to the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> object.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous request from other requests.</param>
      <exception cref="T:System.InvalidOperationException">The pipe was not opened asynchronously.-or-A pipe connection has already been established.-or-The pipe handle has not been set.</exception>
      <exception cref="T:System.IO.IOException">The pipe connection has been broken.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.Disconnect">
      <summary>Disconnects the current connection.</summary>
      <exception cref="T:System.InvalidOperationException">No pipe connections have been made yet.-or-The connected pipe has already disconnected.-or-The pipe handle has not been set.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.EndWaitForConnection(System.IAsyncResult)">
      <summary>Ends an asynchronous operation to wait for a client to connect.</summary>
      <param name="asyncResult">The pending asynchronous request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe was not opened asynchronously.-or-The pipe handle has not been set.</exception>
      <exception cref="T:System.IO.IOException">The pipe connection has been broken.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.GetImpersonationUserName">
      <summary>Gets the user name of the client on the other end of the pipe.</summary>
      <returns>The user name of the client on the other end of the pipe.</returns>
      <exception cref="T:System.InvalidOperationException">No pipe connections have been made yet.-or-The connected pipe has already disconnected.-or-The pipe handle has not been set.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.IO.IOException">The pipe connection has been broken.</exception>
    </member>
    <member name="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances">
      <summary>Represents the maximum number of server instances that the system resources allow.</summary>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.RunAsClient(System.IO.Pipes.PipeStreamImpersonationWorker)">
      <summary>Calls a delegate while impersonating the client.</summary>
      <param name="impersonationWorker">The delegate that specifies a method to call.</param>
      <exception cref="T:System.InvalidOperationException">No pipe connections have been made yet.-or-The connected pipe has already disconnected.-or-The pipe handle has not been set.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.IO.IOException">The pipe connection has been broken.-or-An I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.WaitForConnection">
      <summary>Waits for a client to connect to this <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> object.</summary>
      <exception cref="T:System.InvalidOperationException">A pipe connection has already been established.-or-The pipe handle has not been set.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.IO.IOException">The pipe connection has been broken.</exception>
    </member>
    <member name="T:System.IO.Pipes.PipeAccessRights">
      <summary>Defines the access rights to use when you create access and audit rules. This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadData">
      <summary>Specifies the right to read data from the pipe. This does not include the right to read file system attributes, extended file system attributes, or access and audit rules.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.WriteData">
      <summary>Specifies the right to write data to a pipe. This does not include the right to write file system attributes or extended file system attributes.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadAttributes">
      <summary>Specifies the right to read file system attributes from a pipe. This does not include the right to read data, extended file system attributes, or access and audit rules.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.WriteAttributes">
      <summary>Specifies the right to write file system attributes to a pipe. This does not include the right to write data or extended file system attributes.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadExtendedAttributes">
      <summary>Specifies the right to read extended file system attributes from a pipe. This does not include the right to read data, file system attributes, or access and audit rules.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.WriteExtendedAttributes">
      <summary>Specifies the right to write extended file system attributes to a pipe. This does not include the right to write file attributes or data.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.CreateNewInstance">
      <summary>Specifies the right to create a new pipe. Setting this right also sets the <see cref="F:System.IO.Pipes.PipeAccessRights.Synchronize" /> right.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Delete">
      <summary>Specifies the right to delete a pipe.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadPermissions">
      <summary>Specifies the right to read access and audit rules from the pipe. This does not include the right to read data, file system attributes, or extended file system attributes.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ChangePermissions">
      <summary>Specifies the right to change the security and audit rules that are associated with a pipe.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.TakeOwnership">
      <summary>Specifies the right to change the owner of a pipe. Note that owners of a pipe have full access to that resource.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Synchronize">
      <summary>Specifies whether the application can wait for a pipe handle to synchronize with the completion of an I/O operation.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.FullControl">
      <summary>Specifies the right to exert full control over a pipe, and to modify access control and audit rules. This value represents the combination of all rights in this enumeration.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Read">
      <summary>Specifies the right to read from the pipe. This right includes the <see cref="F:System.IO.Pipes.PipeAccessRights.ReadAttributes" />, <see cref="F:System.IO.Pipes.PipeAccessRights.ReadData" />, <see cref="F:System.IO.Pipes.PipeAccessRights.ReadExtendedAttributes" />, and <see cref="F:System.IO.Pipes.PipeAccessRights.ReadPermissions" /> rights.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Write">
      <summary>Specifies the right to write to the pipe. This right includes the <see cref="F:System.IO.Pipes.PipeAccessRights.WriteAttributes" />, <see cref="F:System.IO.Pipes.PipeAccessRights.WriteData" />, and <see cref="F:System.IO.Pipes.PipeAccessRights.WriteExtendedAttributes" /> rights.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadWrite">
      <summary>Specifies the right to read and write from the pipe. This right includes the <see cref="F:System.IO.Pipes.PipeAccessRights.ReadAttributes" />, <see cref="F:System.IO.Pipes.PipeAccessRights.ReadData" />, <see cref="F:System.IO.Pipes.PipeAccessRights.ReadExtendedAttributes" />, <see cref="F:System.IO.Pipes.PipeAccessRights.ReadPermissions" />, <see cref="F:System.IO.Pipes.PipeAccessRights.WriteAttributes" />, <see cref="F:System.IO.Pipes.PipeAccessRights.WriteData" />, and <see cref="F:System.IO.Pipes.PipeAccessRights.WriteExtendedAttributes" /> rights.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.AccessSystemSecurity">
      <summary>Specifies the right to make changes to the system access control list (SACL).</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeAccessRule">
      <summary>Represents an abstraction of an access control entry (ACE) that defines an access rule for a pipe.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeAccessRule.#ctor(System.Security.Principal.IdentityReference,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.PipeAccessRule" /> class with the specified identity, pipe access rights, and access control type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that encapsulates a reference to a user account.</param>
      <param name="rights">One of the <see cref="T:System.IO.Pipes.PipeAccessRights" /> values that specifies the type of operation associated with the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values that specifies whether to allow or deny the operation.</param>
    </member>
    <member name="M:System.IO.Pipes.PipeAccessRule.#ctor(System.String,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.PipeAccessRule" /> class with the specified identity, pipe access rights, and access control type.</summary>
      <param name="identity">The name of the user account.</param>
      <param name="rights">One of the <see cref="T:System.IO.Pipes.PipeAccessRights" /> values that specifies the type of operation associated with the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values that specifies whether to allow or deny the operation.</param>
    </member>
    <member name="P:System.IO.Pipes.PipeAccessRule.PipeAccessRights">
      <summary>Gets the <see cref="T:System.IO.Pipes.PipeAccessRights" /> flags that are associated with the current <see cref="T:System.IO.Pipes.PipeAccessRule" /> object.</summary>
      <returns>A bitwise combination of the <see cref="T:System.IO.Pipes.PipeAccessRights" /> values.</returns>
    </member>
    <member name="T:System.IO.Pipes.PipeAuditRule">
      <summary>Represents an abstraction of an access control entry (ACE) that defines an audit rule for a pipe.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeAuditRule.#ctor(System.Security.Principal.IdentityReference,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AuditFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.PipeAuditRule" /> class for a user account specified in a <see cref="T:System.Security.Principal.IdentityReference" /> object.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that encapsulates a reference to a user account.</param>
      <param name="rights">One of the <see cref="T:System.IO.Pipes.PipeAccessRights" /> values that specifies the type of operation associated with the access rule.</param>
      <param name="flags">One of the <see cref="T:System.Security.AccessControl.AuditFlags" /> values that specifies when to perform auditing.</param>
    </member>
    <member name="M:System.IO.Pipes.PipeAuditRule.#ctor(System.String,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AuditFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.PipeAuditRule" /> class for a named user account.</summary>
      <param name="identity">The name of the user account.</param>
      <param name="rights">One of the <see cref="T:System.IO.Pipes.PipeAccessRights" /> values that specifies the type of operation associated with the access rule.</param>
      <param name="flags">One of the <see cref="T:System.Security.AccessControl.AuditFlags" /> values that specifies when to perform auditing.</param>
    </member>
    <member name="P:System.IO.Pipes.PipeAuditRule.PipeAccessRights">
      <summary>Gets the <see cref="T:System.IO.Pipes.PipeAccessRights" /> flags that are associated with the current <see cref="T:System.IO.Pipes.PipeAuditRule" /> object.</summary>
      <returns>A bitwise combination of the <see cref="T:System.IO.Pipes.PipeAccessRights" /> values. </returns>
    </member>
    <member name="T:System.IO.Pipes.PipeDirection">
      <summary>Specifies the direction of the pipe.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeDirection.In">
      <summary>Specifies that the pipe direction is in.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeDirection.Out">
      <summary>Specifies that the pipe direction is out.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeDirection.InOut">
      <summary>Specifies that the pipe direction is two-way.</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeOptions">
      <summary>Provides options for creating a <see cref="T:System.IO.Pipes.PipeStream" /> object. This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeOptions.None">
      <summary>Indicates that there are no additional parameters.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeOptions.WriteThrough">
      <summary>Indicates that the system should write through any intermediate cache and go directly to the pipe.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeOptions.Asynchronous">
      <summary>Indicates that the pipe can be used for asynchronous reading and writing.</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeSecurity">
      <summary>Represents the access control and audit security for a pipe.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.PipeSecurity" /> class.</summary>
    </member>
    <member name="P:System.IO.Pipes.PipeSecurity.AccessRightType">
      <summary>Gets the <see cref="T:System.Type" /> of the securable object that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <returns>The type of the securable object that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</returns>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.AccessRule" /> class with the specified values.</summary>
      <returns>The <see cref="T:System.Security.AccessControl.AccessRule" /> object that this method creates.</returns>
      <param name="identityReference">The identity that the access rule applies to. It must be an object that can be cast as a <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</param>
      <param name="accessMask">The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators</param>
      <param name="isInherited">true if this rule is inherited from a parent container; otherwise false.</param>
      <param name="inheritanceFlags">One of the <see cref="T:System.Security.AccessControl.InheritanceFlags" /> values that specifies the inheritance properties of the access rule.</param>
      <param name="propagationFlags">One of the <see cref="T:System.Security.AccessControl.PropagationFlags" /> values that specifies whether inherited access rules are automatically propagated. The propagation flags are ignored if <paramref name="inheritanceFlags" /> is set to <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</param>
      <param name="type">Specifies the valid access control type.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, or <paramref name="type" /> specifies an invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identityReference" /> is null. -or-<paramref name="accessMask" /> is zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="identityReference" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" /> nor of a type, such as <see cref="T:System.Security.Principal.NTAccount" />, that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeSecurity.AccessRuleType">
      <summary>Gets the <see cref="T:System.Type" /> of the object that is associated with the access rules of the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <returns>The type of the object that is associated with the access rules of the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</returns>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AddAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>Adds an access rule to the Discretionary Access Control List (DACL) that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <param name="rule">The access rule to add.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AddAuditRule(System.IO.Pipes.PipeAuditRule)">
      <summary>Adds an audit rule to the System Access Control List (SACL)that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <param name="rule">The audit rule to add.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.AuditRule" /> class with the specified values.</summary>
      <returns>The <see cref="T:System.Security.AccessControl.AuditRule" /> object that this method creates.</returns>
      <param name="identityReference">The identity that the access rule applies to. It must be an object that can be cast as a <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</param>
      <param name="accessMask">The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators</param>
      <param name="isInherited">true if this rule is inherited from a parent container; otherwise, false..</param>
      <param name="inheritanceFlags">One of the <see cref="T:System.Security.AccessControl.InheritanceFlags" /> values that specifies the inheritance properties of the access rule.</param>
      <param name="propagationFlags">One of the <see cref="T:System.Security.AccessControl.PropagationFlags" /> values that specifies whether inherited access rules are automatically propagated. The propagation flags are ignored if <paramref name="inheritanceFlags" /> is set to <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</param>
      <param name="flags">One of the <see cref="T:System.Security.AccessControl.AuditFlags" /> values that specifies the valid access control type.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, or <paramref name="flags" /> properties specify an invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="identityReference" /> property is null. -or-The <paramref name="accessMask" /> property is zero.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="identityReference" /> property is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" /> nor of a type, such as <see cref="T:System.Security.Principal.NTAccount" />, that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeSecurity.AuditRuleType">
      <summary>Gets the <see cref="T:System.Type" /> object associated with the audit rules of the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <returns>The type of the object that is associated with the audit rules of the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</returns>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.Persist(System.Runtime.InteropServices.SafeHandle)">
      <summary>Saves the specified sections of the security descriptor that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object to permanent storage.</summary>
      <param name="handle">The handle of the securable object that the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object is associated with.</param>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.Persist(System.String)">
      <summary>Saves the specified sections of the security descriptor that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object to permanent storage.</summary>
      <param name="name">The name of the securable object that the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object is associated with.</param>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>Removes an access rule from the Discretionary Access Control List (DACL) that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <returns>true if the operation is successful; otherwise, false.</returns>
      <param name="rule">The access rule to remove.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAccessRuleSpecific(System.IO.Pipes.PipeAccessRule)">
      <summary>Removes the specified access rule from the Discretionary Access Control List (DACL) that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <param name="rule">The access rule to remove.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAuditRule(System.IO.Pipes.PipeAuditRule)">
      <summary>Removes an audit rule from the System Access Control List (SACL) that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <returns>true if the audit rule was removed; otherwise, false</returns>
      <param name="rule">The audit rule to remove.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAuditRuleAll(System.IO.Pipes.PipeAuditRule)">
      <summary>Removes all audit rules that have the same security identifier as the specified audit rule from the System Access Control List (SACL) that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <param name="rule">The audit rule to remove.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAuditRuleSpecific(System.IO.Pipes.PipeAuditRule)">
      <summary>Removes the specified audit rule from the System Access Control List (SACL) that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <param name="rule">The audit rule to remove.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.ResetAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>Removes all access rules in the Discretionary Access Control List (DACL) that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object and then adds the specified access rule.</summary>
      <param name="rule">The access rule to add.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.SetAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>Sets an access rule in the Discretionary Access Control List (DACL) that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <param name="rule">The rule to set.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.SetAuditRule(System.IO.Pipes.PipeAuditRule)">
      <summary>Sets an audit rule in the System Access Control List (SACL) that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <param name="rule">The rule to set.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
    </member>
    <member name="T:System.IO.Pipes.PipeStream">
      <summary>Exposes a <see cref="T:System.IO.Stream" /> object around a pipe, which supports both anonymous and named pipes.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.PipeStream" /> class using the specified <see cref="T:System.IO.Pipes.PipeDirection" /> value and buffer size.</summary>
      <param name="direction">One of the <see cref="T:System.IO.Pipes.PipeDirection" /> values that indicates the direction of the pipe object.</param>
      <param name="bufferSize">A positive <see cref="T:System.Int32" /> value greater than or equal to 0 that indicates the buffer size.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-<paramref name="bufferSize" /> is less than 0.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.PipeStream" /> class using the specified <see cref="T:System.IO.Pipes.PipeDirection" />, <see cref="T:System.IO.Pipes.PipeTransmissionMode" />, and buffer size.</summary>
      <param name="direction">One of the <see cref="T:System.IO.Pipes.PipeDirection" /> values that indicates the direction of the pipe object.</param>
      <param name="transmissionMode">One of the <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> values that indicates the transmission mode of the pipe object.</param>
      <param name="outBufferSize">A positive <see cref="T:System.Int32" /> value greater than or equal to 0 that indicates the buffer size.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-<paramref name="transmissionMode" /> is not a valid <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> value.-or-<paramref name="bufferSize" /> is less than 0.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous read operation.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous read.</returns>
      <param name="buffer">The buffer to read data into.</param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin reading.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <param name="callback">The method to call when the asynchronous read operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than 0.-or-<paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> is greater than the number of bytes available in <paramref name="buffer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support read operations.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe is disconnected, waiting to connect, or the handle has not been set.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous write operation.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous write operation.</returns>
      <param name="buffer">The buffer that contains the data to write to the current stream.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <param name="callback">The method to call when the asynchronous write operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than 0.-or-<paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> is greater than the number of bytes available in <paramref name="buffer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support write operations.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe is disconnected, waiting to connect, or the handle has not been set.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.CanRead">
      <summary>Gets a value indicating whether the current stream supports read operations.</summary>
      <returns>true if the stream supports read operations; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.CanSeek">
      <summary>Gets a value indicating whether the current stream supports seek operations.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.CanWrite">
      <summary>Gets a value indicating whether the current stream supports write operations.</summary>
      <returns>true if the stream supports write operations; otherwise, false.</returns>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.CheckPipePropertyOperations">
      <summary>Verifies that the pipe is in a proper state for getting or setting properties.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.CheckReadOperations">
      <summary>Verifies that the pipe is in a connected state for read operations.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.CheckWriteOperations">
      <summary>Verifies that the pipe is in a connected state for write operations.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Pipes.PipeStream" /> class and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
      <summary>Ends a pending asynchronous read request.</summary>
      <returns>The number of bytes that were read. A return value of 0 indicates the end of the stream (the pipe has been closed).</returns>
      <param name="asyncResult">The reference to the pending asynchronous request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream. </exception>
      <exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
      <summary>Ends a pending asynchronous write request.</summary>
      <param name="asyncResult">The reference to the pending asynchronous request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream. </exception>
      <exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Flush">
      <summary>Clears the buffer for the current stream and causes any buffered data to be written to the underlying device.</summary>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support write operations.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.GetAccessControl">
      <summary>Gets a <see cref="T:System.IO.Pipes.PipeSecurity" /> object that encapsulates the access control list (ACL) entries for the pipe described by the current <see cref="T:System.IO.Pipes.PipeStream" /> object.</summary>
      <returns>A <see cref="T:System.IO.Pipes.PipeSecurity" /> object that encapsulates the access control list (ACL) entries for the pipe described by the current <see cref="T:System.IO.Pipes.PipeStream" /> object.</returns>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The underlying call to set security information failed.</exception>
      <exception cref="T:System.InvalidOperationException">The underlying call to set security information failed.</exception>
      <exception cref="T:System.NotSupportedException">The underlying call to set security information failed.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.InBufferSize">
      <summary>Gets the size, in bytes, of the inbound buffer for a pipe.</summary>
      <returns>An integer value that represents the inbound buffer size, in bytes.</returns>
      <exception cref="T:System.NotSupportedException">The stream is unreadable.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe is waiting to connect.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)">
      <summary>Initializes a <see cref="T:System.IO.Pipes.PipeStream" /> object from the specified <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> object.</summary>
      <param name="handle">The <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> object of the pipe to initialize.</param>
      <param name="isExposed">true to expose the handle; otherwise, false.</param>
      <param name="isAsync">true to indicate that the handle was opened asynchronously; otherwise, false.</param>
      <exception cref="T:System.IO.IOException">A handle cannot be bound to the pipe.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsAsync">
      <summary>Gets a value indicating whether a <see cref="T:System.IO.Pipes.PipeStream" /> object was opened asynchronously or synchronously.</summary>
      <returns>true if the <see cref="T:System.IO.Pipes.PipeStream" /> object was opened asynchronously; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsConnected">
      <summary>Gets or sets a value indicating whether a <see cref="T:System.IO.Pipes.PipeStream" /> object is connected.</summary>
      <returns>true if the <see cref="T:System.IO.Pipes.PipeStream" /> object is connected; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsHandleExposed">
      <summary>Gets a value indicating whether a handle to a <see cref="T:System.IO.Pipes.PipeStream" /> object is exposed.</summary>
      <returns>true if a handle to the <see cref="T:System.IO.Pipes.PipeStream" /> object is exposed; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsMessageComplete">
      <summary>Gets a value indicating whether there is more data in the message returned from the most recent read operation.</summary>
      <returns>true if there are no more characters to read in the message; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">The pipe is not connected.-or-The pipe handle has not been set.-or-The pipe's <see cref="P:System.IO.Pipes.PipeStream.ReadMode" /> property value is not <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.Length">
      <summary>Gets the length of a stream, in bytes.</summary>
      <returns>0 in all cases.</returns>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.OutBufferSize">
      <summary>Gets the size, in bytes, of the outbound buffer for a pipe.</summary>
      <returns>The outbound buffer size, in bytes.</returns>
      <exception cref="T:System.NotSupportedException">The stream is unwriteable.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe is waiting to connect.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.Position">
      <summary>Gets or sets the current position of the current stream.</summary>
      <returns>0 in all cases.</returns>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a block of bytes from a stream and writes the data to a specified buffer.</summary>
      <returns>The total number of bytes that are read into <paramref name="buffer" />. This might be less than the number of bytes requested if that number of bytes is not currently available, or 0 if the end of the stream is reached.</returns>
      <param name="buffer">When this method returns, contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source.</param>
      <param name="offset">The byte offset in the <paramref name="buffer" /> array at which the bytes that are read will be placed.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than 0.-or-<paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> is greater than the number of bytes available in <paramref name="buffer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support read operations.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe is disconnected, waiting to connect, or the handle has not been set.</exception>
      <exception cref="T:System.IO.IOException">Any I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.ReadByte">
      <summary>Reads a byte from a pipe.</summary>
      <returns>The byte, cast to <see cref="T:System.Int32" />, or -1 indicates the end of the stream (the pipe has been closed).</returns>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support read operations.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe is disconnected, waiting to connect, or the handle has not been set.</exception>
      <exception cref="T:System.IO.IOException">Any I/O error occurred.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.ReadMode">
      <summary>Gets or sets the reading mode for a <see cref="T:System.IO.Pipes.PipeStream" /> object.</summary>
      <returns>One of the <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> values that indicates how the <see cref="T:System.IO.Pipes.PipeStream" /> object reads from the pipe.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The supplied value is not a valid <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> value.</exception>
      <exception cref="T:System.NotSupportedException">The supplied value is not a supported <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> value for this pipe stream.</exception>
      <exception cref="T:System.InvalidOperationException">The handle has not been set.-or-The pipe is waiting to connect with a named client.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or an I/O error occurred with a named client.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.SafePipeHandle">
      <summary>Gets the safe handle for the local end of the pipe that the current <see cref="T:System.IO.Pipes.PipeStream" /> object encapsulates.</summary>
      <returns>A <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> object for the pipe that is encapsulated by the current <see cref="T:System.IO.Pipes.PipeStream" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The pipe handle has not been set.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the current position of the current stream to the specified value.</summary>
      <returns>The new position in the stream.</returns>
      <param name="offset">The point, relative to <paramref name="origin" />, to begin seeking from.</param>
      <param name="origin">Specifies the beginning, the end, or the current position as a reference point for <paramref name="offset" />, using a value of type <see cref="T:System.IO.SeekOrigin" />.</param>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
      <summary>Applies the access control list (ACL) entries specified by a <see cref="T:System.IO.Pipes.PipeSecurity" /> object to the pipe specified by the current <see cref="T:System.IO.Pipes.PipeStream" /> object.</summary>
      <param name="pipeSecurity">A <see cref="T:System.IO.Pipes.PipeSecurity" /> object that specifies an access control list (ACL) entry to apply to the current pipe.</param>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeSecurity" /> is null.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The underlying call to set security information failed.</exception>
      <exception cref="T:System.InvalidOperationException">The underlying call to set security information failed.</exception>
      <exception cref="T:System.NotSupportedException">The underlying call to set security information failed.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.SetLength(System.Int64)">
      <summary>Sets the length of the current stream to the specified value.</summary>
      <param name="value">The new length of the stream.</param>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.TransmissionMode">
      <summary>Gets the pipe transmission mode supported by the current pipe.</summary>
      <returns>One of the <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> values that indicates the transmission mode supported by the current pipe.</returns>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.InvalidOperationException">The handle has not been set.-or-The pipe is waiting to connect in an anonymous client/server operation or with a named client. </exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.WaitForPipeDrain">
      <summary>Waits for the other end of the pipe to read all sent bytes.</summary>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support write operations.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a block of bytes to the current stream using data from a buffer.</summary>
      <param name="buffer">The buffer that contains data to write to the pipe.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param>
      <param name="count">The maximum number of bytes to write to the current stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than 0.-or-<paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> is greater than the number of bytes available in <paramref name="buffer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support write operations.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.WriteByte(System.Byte)">
      <summary>Writes a byte to the current stream.</summary>
      <param name="value">The byte to write to the stream.</param>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support write operations.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe is disconnected, waiting to connect, or the handle has not been set.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="T:System.IO.Pipes.PipeStreamImpersonationWorker">
      <summary>Represents the method to call as the client.</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeTransmissionMode">
      <summary>Specifies the transmission mode of the pipe.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeTransmissionMode.Byte">
      <summary>Indicates that data in the pipe is transmitted and read as a stream of bytes.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeTransmissionMode.Message">
      <summary>Indicates that data in the pipe is transmitted and read as a stream of messages.</summary>
    </member>
    <member name="T:System.Linq.Enumerable">
      <summary>Provides a set of static (Shared in Visual Basic) methods for querying objects that implement <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>Applies an accumulator function over a sequence.</summary>
      <returns>The final accumulator value.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</param>
      <param name="func">An accumulator function to be invoked on each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</summary>
      <returns>The final accumulator value.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">An accumulator function to be invoked on each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</summary>
      <returns>The transformed final accumulator value.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">An accumulator function to be invoked on each element.</param>
      <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <typeparam name="TResult">The type of the resulting value.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Determines whether all elements of a sequence satisfy a condition.</summary>
      <returns>true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to apply the predicate to.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Determines whether a sequence contains any elements.</summary>
      <returns>true if the source sequence contains any elements; otherwise, false.</returns>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to check for emptiness.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Determines whether any element of a sequence satisfies a condition.</summary>
      <returns>true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to apply the predicate to.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the input typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <returns>The input sequence typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <param name="source">The sequence to type as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Computes the average of a sequence of <see cref="T:System.Decimal" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Computes the average of a sequence of <see cref="T:System.Double" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int32" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int64" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Double" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" />values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Single" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Computes the average of a sequence of <see cref="T:System.Single" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Computes the average of a sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Computes the average of a sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of source.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Computes the average of a sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
      <summary>Converts the elements of an <see cref="T:System.Collections.IEnumerable" /> to the specified type.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains each element of the source sequence converted to the specified type.</returns>
      <param name="source">The <see cref="T:System.Collections.IEnumerable" /> that contains the elements to be converted.</param>
      <typeparam name="TResult">The type to convert the elements of <paramref name="source" /> to.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidCastException">An element in the sequence cannot be cast to type <paramref name="TResult" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatenates two sequences.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the concatenated elements of the two input sequences.</returns>
      <param name="first">The first sequence to concatenate.</param>
      <param name="second">The sequence to concatenate to the first sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Determines whether a sequence contains a specified element by using the default equality comparer.</summary>
      <returns>true if the source sequence contains an element that has the specified value; otherwise, false.</returns>
      <param name="source">A sequence in which to locate a value.</param>
      <param name="value">The value to locate in the sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determines whether a sequence contains a specified element by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>true if the source sequence contains an element that has the specified value; otherwise, false.</returns>
      <param name="source">A sequence in which to locate a value.</param>
      <param name="value">The value to locate in the sequence.</param>
      <param name="comparer">An equality comparer to compare values.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the number of elements in a sequence.</summary>
      <returns>The number of elements in the input sequence.</returns>
      <param name="source">A sequence that contains elements to be counted.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns a number that represents how many elements in the specified sequence satisfy a condition.</summary>
      <returns>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</returns>
      <param name="source">A sequence that contains elements to be tested and counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.OverflowException">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that contains the default value for the <paramref name="TSource" /> type if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</returns>
      <param name="source">The sequence to return a default value for if it is empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <paramref name="defaultValue" /> if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</returns>
      <param name="source">The sequence to return the specified value for if it is empty.</param>
      <param name="defaultValue">The value to return if the sequence is empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns distinct elements from a sequence by using the default equality comparer to compare values.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</returns>
      <param name="source">The sequence to remove duplicate elements from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</returns>
      <param name="source">The sequence to remove duplicate elements from.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Returns the element at a specified index in a sequence.</summary>
      <returns>The element at the specified position in the source sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than or equal to the number of elements in <paramref name="source" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Returns the element at a specified index in a sequence or a default value if the index is out of range.</summary>
      <returns>default(<paramref name="TSource" />) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Empty``1">
      <summary>Returns an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has the specified type argument.</summary>
      <returns>An empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose type argument is <paramref name="TResult" />.</returns>
      <typeparam name="TResult">The type to assign to the type parameter of the returned generic <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produces the set difference of two sequences by using the default equality comparer to compare values.</summary>
      <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <paramref name="second" /> will be returned.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set difference of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <paramref name="second" /> will be returned.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the first element of a sequence.</summary>
      <returns>The first element in the specified sequence.</returns>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the first element in a sequence that satisfies a specified condition.</summary>
      <returns>The first element in the sequence that passes the test in the specified predicate function.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate" />.-or-The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.</returns>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function.</summary>
      <returns>An IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a sequence of objects and a key.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</summary>
      <returns>An IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects and a key.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</summary>
      <returns>An IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in the <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.</summary>
      <returns>An IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.</summary>
      <returns>A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</summary>
      <returns>A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</summary>
      <returns>A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.</summary>
      <returns>A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>Correlates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlates the elements of two sequences based on key equality and groups the results. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produces the set intersection of two sequences by using the default equality comparer to compare values.</summary>
      <returns>A sequence that contains the elements that form the set intersection of two sequences.</returns>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <paramref name="second" /> will be returned.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set intersection of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <returns>A sequence that contains the elements that form the set intersection of two sequences.</returns>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <paramref name="second" /> will be returned.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlates the elements of two sequences based on matching keys. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the last element of a sequence.</summary>
      <returns>The value at the last position in the source sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the last element of a sequence that satisfies a specified condition.</summary>
      <returns>The last element in the sequence that passes the test in the specified predicate function.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate" />.-or-The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the last element of a sequence, or a default value if the sequence contains no elements.</summary>
      <returns>default(<paramref name="TSource" />) if the source sequence is empty; otherwise, the last element in the <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</summary>
      <returns>default(<paramref name="TSource" />) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.</summary>
      <returns>The number of elements in the source sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The number of elements exceeds <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns an <see cref="T:System.Int64" /> that represents how many elements in a sequence satisfy a condition.</summary>
      <returns>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.OverflowException">The number of matching elements exceeds <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Returns the maximum value in a sequence of <see cref="T:System.Decimal" /> values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Returns the maximum value in a sequence of <see cref="T:System.Double" /> values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Returns the maximum value in a sequence of <see cref="T:System.Int32" /> values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Returns the maximum value in a sequence of <see cref="T:System.Int64" /> values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
      <returns>A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence. </returns>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Double" /> values.</summary>
      <returns>A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
      <returns>A value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence. </returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
      <returns>A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence. </returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Single" /> values.</summary>
      <returns>A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Returns the maximum value in a sequence of <see cref="T:System.Single" /> values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the maximum value in a generic sequence.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Decimal" /> value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Double" /> value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int32" /> value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int64" /> value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Decimal" /> value.</summary>
      <returns>The value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Double" /> value.</summary>
      <returns>The value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int32" /> value.</summary>
      <returns>The value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int64" /> value.</summary>
      <returns>The value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Single" /> value.</summary>
      <returns>The value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Single" /> value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Returns the minimum value in a sequence of <see cref="T:System.Decimal" /> values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Returns the minimum value in a sequence of <see cref="T:System.Double" /> values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Returns the minimum value in a sequence of <see cref="T:System.Int32" /> values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Returns the minimum value in a sequence of <see cref="T:System.Int64" /> values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
      <returns>A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Double" /> values.</summary>
      <returns>A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
      <returns>A value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
      <returns>A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Single" /> values.</summary>
      <returns>A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Returns the minimum value in a sequence of <see cref="T:System.Single" /> values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the minimum value in a generic sequence.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Decimal" /> value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Double" /> value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int32" /> value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int64" /> value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Decimal" /> value.</summary>
      <returns>The value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Double" /> value.</summary>
      <returns>The value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int32" /> value.</summary>
      <returns>The value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int64" /> value.</summary>
      <returns>The value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Single" /> value.</summary>
      <returns>The value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Single" /> value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
      <summary>Filters the elements of an <see cref="T:System.Collections.IEnumerable" /> based on a specified type.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence of type <paramref name="TResult" />.</returns>
      <param name="source">The <see cref="T:System.Collections.IEnumerable" /> whose elements to filter.</param>
      <typeparam name="TResult">The type to filter the elements of the sequence on.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Sorts the elements of a sequence in ascending order according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Sorts the elements of a sequence in ascending order by using a specified comparer.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Sorts the elements of a sequence in descending order according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Sorts the elements of a sequence in descending order by using a specified comparer.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
      <summary>Generates a sequence of integral numbers within a specified range.</summary>
      <returns>An IEnumerable&lt;Int32&gt; in C# or IEnumerable(Of Int32) in Visual Basic that contains a range of sequential integral numbers.</returns>
      <param name="start">The value of the first integer in the sequence.</param>
      <param name="count">The number of sequential integers to generate.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than 0.-or-<paramref name="start" /> + <paramref name="count" /> -1 is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
      <summary>Generates a sequence that contains one repeated value.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains a repeated value.</returns>
      <param name="element">The value to be repeated.</param>
      <param name="count">The number of times to repeat the value in the generated sequence.</param>
      <typeparam name="TResult">The type of the value to be repeated in the result sequence.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than 0.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Inverts the order of the elements in a sequence.</summary>
      <returns>A sequence whose elements correspond to those of the input sequence in reverse order.</returns>
      <param name="source">A sequence of values to reverse.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Projects each element of a sequence into a new form.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</returns>
      <param name="source">A sequence of values to invoke a transform function on.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
      <summary>Projects each element of a sequence into a new form by incorporating the element's index.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</returns>
      <param name="source">A sequence of values to invoke a transform function on.</param>
      <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="collectionSelector">A transform function to apply to each element of the input sequence.</param>
      <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and flattens the resulting sequences into one sequence.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the sequence returned by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="collectionSelector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the sequence returned by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.</summary>
      <returns>true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.</returns>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <paramref name="second" />.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determines whether two sequences are equal by comparing their elements by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>true if the two source sequences are of equal length and their corresponding elements compare equal according to <paramref name="comparer" />; otherwise, false.</returns>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <paramref name="second" />.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to compare elements.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> has more than one element.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</summary>
      <returns>The single element of the input sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The input sequence contains more than one element.-or-The input sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</summary>
      <returns>The single element of the input sequence that satisfies a condition.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</param>
      <param name="predicate">A function to test an element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate" />.-or-More than one element satisfies the condition in <paramref name="predicate" />.-or-The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</summary>
      <returns>The single element of the input sequence, or default(<paramref name="TSource" />) if the sequence contains no elements.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The input sequence contains more than one element.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</summary>
      <returns>The single element of the input sequence that satisfies the condition, or default(<paramref name="TSource" />) if no such element is found.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</param>
      <param name="predicate">A function to test an element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">More than one element satisfies the condition in <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements that occur after the specified index in the input sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</param>
      <param name="count">The number of elements to skip before returning the remaining elements.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</param>
      <param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Double" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Int32" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Int64" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Single" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Returns a specified number of contiguous elements from the start of a sequence.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the specified number of elements from the start of the input sequence.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="count">The number of elements to return.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns elements from a sequence as long as a specified condition is true.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
      <param name="source">A sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that occur before the element at which the test no longer passes.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates an array from a <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <returns>An array that contains the elements from the input sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create an array from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.-or-<paramref name="keySelector" /> produces a key that is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> produces duplicate keys for two elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the keys returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.-or-<paramref name="keySelector" /> produces a key that is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> produces duplicate keys for two elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.-or-<paramref name="keySelector" /> produces a key that is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> produces duplicate keys for two elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer, and an element selector function.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.-or-<paramref name="keySelector" /> produces a key that is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> produces duplicate keys for two elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.</returns>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.List`1" /> from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</summary>
      <returns>A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</returns>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</summary>
      <returns>A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</returns>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</summary>
      <returns>A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</returns>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer and an element selector function.</summary>
      <returns>A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</returns>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produces the set union of two sequences by using the default equality comparer.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</returns>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</returns>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Filters a sequence of values based on a predicate.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</param>
      <param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>Merges two sequences by using the specified predicate function.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains merged elements of two input sequences.</returns>
      <param name="first">The first sequence to merge.</param>
      <param name="second">The second sequence to merge.</param>
      <param name="resultSelector">A function that specifies how to merge the elements from the two sequences.</param>
      <typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam>
      <typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam>
      <typeparam name="TResult">The type of the elements of the result sequence.</typeparam>
    </member>
    <member name="T:System.Linq.EnumerableExecutor">
      <summary>Represents an expression tree and provides functionality to execute the expression tree after rewriting it.</summary>
    </member>
    <member name="M:System.Linq.EnumerableExecutor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.EnumerableExecutor" /> class.</summary>
    </member>
    <member name="T:System.Linq.EnumerableExecutor`1">
      <summary>Represents an expression tree and provides functionality to execute the expression tree after rewriting it.</summary>
      <typeparam name="T">The data type of the value that results from executing the expression tree.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.EnumerableExecutor`1" /> class.</summary>
      <param name="expression">An expression tree to associate with the new instance.</param>
    </member>
    <member name="T:System.Linq.EnumerableQuery">
      <summary>Represents an <see cref="T:System.Collections.IEnumerable" /> as an <see cref="T:System.Linq.EnumerableQuery" /> data source. </summary>
    </member>
    <member name="M:System.Linq.EnumerableQuery.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.EnumerableQuery" /> class.</summary>
    </member>
    <member name="T:System.Linq.EnumerableQuery`1">
      <summary>Represents an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection as an <see cref="T:System.Linq.IQueryable`1" /> data source.</summary>
      <typeparam name="T">The type of the data in the collection.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.EnumerableQuery`1" /> class and associates it with an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection.</summary>
      <param name="enumerable">A collection to associate with the new instance.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.EnumerableQuery`1" /> class and associates the instance with an expression tree.</summary>
      <param name="expression">An expression tree to associate with the new instance.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that can iterate through the associated <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection, or, if it is null, through the collection that results from rewriting the associated expression tree as a query on an <see cref="T:System.Collections.Generic.IEnumerable`1" /> data source and executing it.</summary>
      <returns>An enumerator that can be used to iterate through the associated data source.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can iterate through the associated <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection, or, if it is null, through the collection that results from rewriting the associated expression tree as a query on an <see cref="T:System.Collections.Generic.IEnumerable`1" /> data source and executing it.</summary>
      <returns>An enumerator that can be used to iterate through the associated data source.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#ElementType">
      <summary>Gets the type of the data in the collection that this instance represents.</summary>
      <returns>The type of the data in the collection that this instance represents.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Expression">
      <summary>Gets the expression tree that is associated with or that represents this instance.</summary>
      <returns>The expression tree that is associated with or that represents this instance.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Provider">
      <summary>Gets the query provider that is associated with this instance.</summary>
      <returns>The query provider that is associated with this instance.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Constructs a new <see cref="T:System.Linq.EnumerableQuery`1" /> object and associates it with a specified expression tree that represents an <see cref="T:System.Linq.IQueryable`1" /> collection of data.</summary>
      <returns>An EnumerableQuery object that is associated with <paramref name="expression" />.</returns>
      <param name="expression">An expression tree to execute.</param>
      <typeparam name="S">The type of the data in the collection that <paramref name="expression" /> represents.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>Constructs a new <see cref="T:System.Linq.EnumerableQuery`1" /> object and associates it with a specified expression tree that represents an <see cref="T:System.Linq.IQueryable" /> collection of data.</summary>
      <returns>An <see cref="T:System.Linq.EnumerableQuery`1" /> object that is associated with <paramref name="expression" />.</returns>
      <param name="expression">An expression tree that represents an <see cref="T:System.Linq.IQueryable" /> collection of data.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>Executes an expression after rewriting it to call <see cref="T:System.Linq.Enumerable" /> methods instead of <see cref="T:System.Linq.Queryable" /> methods on any enumerable data sources that cannot be queried by <see cref="T:System.Linq.Queryable" /> methods.</summary>
      <returns>The value that results from executing <paramref name="expression" />.</returns>
      <param name="expression">An expression tree to execute.</param>
      <typeparam name="S">The type of the data in the collection that <paramref name="expression" /> represents.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>Executes an expression after rewriting it to call <see cref="T:System.Linq.Enumerable" /> methods instead of <see cref="T:System.Linq.Queryable" /> methods on any enumerable data sources that cannot be queried by <see cref="T:System.Linq.Queryable" /> methods.</summary>
      <returns>The value that results from executing <paramref name="expression" />.</returns>
      <param name="expression">An expression tree to execute.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.ToString">
      <summary>Returns a textual representation of the enumerable collection or, if it is null, of the expression tree that is associated with this instance.</summary>
      <returns>A textual representation of the enumerable collection or, if it is null, of the expression tree that is associated with this instance.</returns>
    </member>
    <member name="T:System.Linq.IGrouping`2">
      <summary>Represents a collection of objects that have a common key.</summary>
      <typeparam name="TKey">The type of the key of the <see cref="T:System.Linq.IGrouping`2" />.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="TElement">The type of the values in the <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Linq.IGrouping`2.Key">
      <summary>Gets the key of the <see cref="T:System.Linq.IGrouping`2" />.</summary>
      <returns>The key of the <see cref="T:System.Linq.IGrouping`2" />.</returns>
    </member>
    <member name="T:System.Linq.ILookup`2">
      <summary>Defines an indexer, size property, and Boolean search method for data structures that map keys to <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequences of values.</summary>
      <typeparam name="TKey">The type of the keys in the <see cref="T:System.Linq.ILookup`2" />.</typeparam>
      <typeparam name="TElement">The type of the elements in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequences that make up the values in the <see cref="T:System.Linq.ILookup`2" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Linq.ILookup`2.Contains(`0)">
      <summary>Determines whether a specified key exists in the <see cref="T:System.Linq.ILookup`2" />.</summary>
      <returns>true if <paramref name="key" /> is in the <see cref="T:System.Linq.ILookup`2" />; otherwise, false.</returns>
      <param name="key">The key to search for in the <see cref="T:System.Linq.ILookup`2" />.</param>
    </member>
    <member name="P:System.Linq.ILookup`2.Count">
      <summary>Gets the number of key/value collection pairs in the <see cref="T:System.Linq.ILookup`2" />.</summary>
      <returns>The number of key/value collection pairs in the <see cref="T:System.Linq.ILookup`2" />.</returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Item(`0)">
      <summary>Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequence of values indexed by a specified key.</summary>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequence of values indexed by the specified key.</returns>
      <param name="key">The key of the desired sequence of values.</param>
    </member>
    <member name="T:System.Linq.IOrderedEnumerable`1">
      <summary>Represents a sorted sequence.</summary>
      <typeparam name="TElement">The type of the elements of the sequence.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
      <summary>Performs a subsequent ordering on the elements of an <see cref="T:System.Linq.IOrderedEnumerable`1" /> according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</returns>
      <param name="keySelector">The <see cref="T:System.Func`2" /> used to extract the key for each element.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> used to compare keys for placement in the returned sequence.</param>
      <param name="descending">true to sort the elements in descending order; false to sort the elements in ascending order.</param>
      <typeparam name="TKey">The type of the key produced by <paramref name="keySelector" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>Represents the result of a sorting operation.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>Represents the result of a sorting operation.</summary>
      <typeparam name="T">The type of the content of the data source.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>Provides functionality to evaluate queries against a specific data source wherein the type of the data is not specified.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable" /> is executed.</summary>
      <returns>A <see cref="T:System.Type" /> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>Gets the query provider that is associated with this data source.</summary>
      <returns>The <see cref="T:System.Linq.IQueryProvider" /> that is associated with this data source.</returns>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.</summary>
      <typeparam name="T">The type of the data in the data source.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>Defines methods to create and execute queries that are described by an <see cref="T:System.Linq.IQueryable" /> object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Constructs an <see cref="T:System.Linq.IQueryable`1" /> object that can evaluate the query represented by a specified expression tree.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that can evaluate the query represented by the specified expression tree.</returns>
      <param name="expression">An expression tree that represents a LINQ query.</param>
      <typeparam name="TElement">The type of the elements of the <see cref="T:System.Linq.IQueryable`1" /> that is returned.</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>Constructs an <see cref="T:System.Linq.IQueryable" /> object that can evaluate the query represented by a specified expression tree.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.</returns>
      <param name="expression">An expression tree that represents a LINQ query.</param>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>Executes the strongly-typed query represented by a specified expression tree.</summary>
      <returns>The value that results from executing the specified query.</returns>
      <param name="expression">An expression tree that represents a LINQ query.</param>
      <typeparam name="TResult">The type of the value that results from executing the query.</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>Executes the query represented by a specified expression tree.</summary>
      <returns>The value that results from executing the specified query.</returns>
      <param name="expression">An expression tree that represents a LINQ query.</param>
    </member>
    <member name="T:System.Linq.Lookup`2">
      <summary>Represents a collection of keys each mapped to one or more values.</summary>
      <typeparam name="TKey">The type of the keys in the <see cref="T:System.Linq.Lookup`2" />.</typeparam>
      <typeparam name="TElement">The type of the elements of each <see cref="T:System.Collections.Generic.IEnumerable`1" /> value in the <see cref="T:System.Linq.Lookup`2" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
      <summary>Applies a transform function to each key and its associated values and returns the results.</summary>
      <returns>A collection that contains one value for each key/value collection pair in the <see cref="T:System.Linq.Lookup`2" />.</returns>
      <param name="resultSelector">A function to project a result value from each key and its associated values.</param>
      <typeparam name="TResult">The type of the result values produced by <paramref name="resultSelector" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Linq.Lookup`2.Contains(`0)">
      <summary>Determines whether a specified key is in the <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns>true if <paramref name="key" /> is in the <see cref="T:System.Linq.Lookup`2" />; otherwise, false.</returns>
      <param name="key">The key to find in the <see cref="T:System.Linq.Lookup`2" />.</param>
    </member>
    <member name="P:System.Linq.Lookup`2.Count">
      <summary>Gets the number of key/value collection pairs in the <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns>The number of key/value collection pairs in the <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.GetEnumerator">
      <summary>Returns a generic enumerator that iterates through the <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns>An enumerator for the <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Item(`0)">
      <summary>Gets the collection of values indexed by the specified key.</summary>
      <returns>The collection of values indexed by the specified key.</returns>
      <param name="key">The key of the desired collection of values.</param>
    </member>
    <member name="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Linq.Lookup`2" />. This class cannot be inherited.</summary>
      <returns>An enumerator for the <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="T:System.Linq.OrderedParallelQuery`1">
      <summary>Represents a sorted, parallel sequence.</summary>
      <typeparam name="TSource">The type of elements in the source collection.</typeparam>
    </member>
    <member name="M:System.Linq.OrderedParallelQuery`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the sequence.</summary>
      <returns>An enumerator that iterates through the sequence.</returns>
    </member>
    <member name="T:System.Linq.ParallelEnumerable">
      <summary>Provides a set of methods for querying objects that implement ParallelQuery{TSource}. This is the parallel equivalent of <see cref="T:System.Linq.Enumerable" />.</summary>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>Applies in parallel an accumulator function over a sequence. This overload is not available in the sequential implementation.</summary>
      <returns>The transformed final accumulator value.</returns>
      <param name="source">A sequence to aggregate over.</param>
      <param name="seedFactory">A function that returns the initial accumulator value. </param>
      <param name="updateAccumulatorFunc">An accumulator function to be invoked on each element in a partition. </param>
      <param name="combineAccumulatorsFunc">An accumulator function to be invoked on the yielded element from each partition.  </param>
      <param name="resultSelector">A function to transform the final accumulator value into the result value. </param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <typeparam name="TResult">The type of the resulting value.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="seedFactory" /> or <paramref name="updateAccumulatorFunc" /> or <paramref name="combineAccumulatorsFunc" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})">
      <summary>Applies in parallel an accumulator function over a sequence.</summary>
      <returns>The final accumulator value.</returns>
      <param name="source">A sequence to aggregate over.</param>
      <param name="func">An accumulator function to be invoked on each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})">
      <summary>Applies in parallel an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</summary>
      <returns>The final accumulator value.</returns>
      <param name="source">A sequence to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">An accumulator function to be invoked on each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>Applies in parallel an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</summary>
      <returns>The transformed final accumulator value.</returns>
      <param name="source">A sequence to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">An accumulator function to be invoked on each element.</param>
      <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <typeparam name="TResult">The type of the resulting value.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>Applies in parallel an accumulator function over a sequence. This overload is not available in the sequential implementation.</summary>
      <returns>The transformed final accumulator value.</returns>
      <param name="source">A sequence to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="updateAccumulatorFunc">An accumulator function to be invoked on each element in a partition. </param>
      <param name="combineAccumulatorsFunc">An accumulator function to be invoked on the yielded element from each partition. </param>
      <param name="resultSelector">A function to transform the final accumulator value into the result value. </param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <typeparam name="TResult">The type of the resulting value.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="updateAccumulatorFunc" /> or <paramref name="combineAccumulatorsFunc" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Determines in parallel whether all elements of a sequence satisfy a condition.</summary>
      <returns>true if all elements in the source sequence pass the test in the specified predicate; otherwise, false.</returns>
      <param name="source">A sequence whose elements to apply the predicate to.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})">
      <summary>Determines whether a parallel sequence contains any elements.</summary>
      <returns>true if the source sequence contains any elements; otherwise, false.</returns>
      <param name="source">The IEnumerable to check for emptiness.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Determines in parallel whether any element of a sequence satisfies a condition.</summary>
      <returns>true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.</returns>
      <param name="source">An IEnumerable whose elements to apply the predicate to.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})">
      <summary>Converts a <see cref="T:System.Linq.ParallelQuery`1" /> into an <see cref="T:System.Collections.Generic.IEnumerable`1" /> to force sequential evaluation of the query.</summary>
      <returns>The input sequence types as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <param name="source">The sequence to type as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)">
      <summary>Enables treatment of a data source as if it was ordered, overriding the default of unordered. AsOrdered may only be invoked on sequences returned by AsParallel, ParallelEnumerable.Range, and ParallelEnumerable.Repeat.</summary>
      <returns>The source sequence which will maintain ordering in the query.</returns>
      <param name="source">The input sequence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if the <paramref name="source" /> is not one of AsParallel, ParallelEnumerable.Range, or ParallelEnumerable.Repeat.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})">
      <summary>Enables treatment of a data source as if it was ordered, overriding the default of unordered. AsOrdered may only be invoked on sequences returned by AsParallel, ParallelEnumerable.Range, and ParallelEnumerable.Repeat.</summary>
      <returns>The source sequence which will maintain ordering in the query.</returns>
      <param name="source">The input sequence.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="source" /> is not one of AsParallel, ParallelEnumerable.Range, or ParallelEnumerable.Repeat.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})">
      <summary>Enables parallelization of a query, as sourced by a partitioner responsible for splitting the input sequence into partitions.</summary>
      <returns>The <paramref name="source" /> as a ParallelQuery to bind to ParallelEnumerable extension methods.</returns>
      <param name="source">A partitioner over the input sequence.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Enables parallelization of a query.</summary>
      <returns>The source as a <see cref="T:System.Linq.ParallelQuery`1" /> to bind to ParallelEnumerable extension methods.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to convert to a <see cref="T:System.Linq.ParallelQuery`1" />.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)">
      <summary>Enables parallelization of a query.</summary>
      <returns>The source as a ParallelQuery to bind to ParallelEnumerable extension methods.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to convert to a <see cref="T:System.Linq.ParallelQuery`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})">
      <summary>Converts a <see cref="T:System.Linq.ParallelQuery`1" /> into an <see cref="T:System.Collections.Generic.IEnumerable`1" /> to force sequential evaluation of the query.</summary>
      <returns>The source as an <see cref="T:System.Collections.Generic.IEnumerable`1" /> to bind to sequential extension methods.</returns>
      <param name="source">A <see cref="T:System.Linq.ParallelQuery`1" /> to convert to an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})">
      <summary>Allows an intermediate query to be treated as if no ordering is implied among the elements.</summary>
      <returns>The source sequence with arbitrary order.</returns>
      <param name="source">The input sequence.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <returns>Returns the average of the sequence of values.</returns>
      <param name="source">The source sequence.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">A sequence of values that are used to calculate an average.The average of the sequence of values.<paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOper