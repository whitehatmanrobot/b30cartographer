   </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Appointment.AllDayEventChanged">
            <summary>
            Occurs when an Appointment's AllDayEvent property changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Appointment.SensitivityChanged">
            <summary>
            Occurs when an Appointment's Sensitivity changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Appointment.BusyStatusChanged">
            <summary>
            Occurs when an Appointment's BusyStatus property changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Appointment.BodyChanged">
            <summary>
            Occurs when an Appointment's Notes change.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Appointment.DurationChanged">
            <summary>
            Occurs when an Appointment's Duration changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Appointment.ReminderSetChanged">
            <summary>
            Occurs when an Appointment's ReminderSet property changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Appointment.ReminderLedChanged">
            <summary>
            Occurs when an Appointment's ReminderLed property changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Appointment.ReminderVibrateChanged">
            <summary>
            Occurs when an Appointment's ReminderVibrate property changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Appointment.ReminderDialogChanged">
            <summary>
            Occurs when an Appointment's ReminderDialog property changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Appointment.ReminderSoundChanged">
            <summary>
            Occurs when an Appointment's ReminderSound property changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Appointment.ReminderRepeatChanged">
            <summary>
            Occurs when an Appointment's ReminderRepeat property changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Appointment.ReminderSoundFileChanged">
            <summary>
            Occurs when an Appointment's ReminderSoundFile property changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Appointment.ReminderMinutesBeforeStartChanged">
            <summary>
            Occurs when an Appointment's ReminderMinutesBeforeStart property changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Appointment.StartChanged">
            <summary>
            Occurs when an Appointment's Start changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Appointment.EndChanged">
            <summary>
            Occurs when an Appointment's End changes.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Appointment.Subject">
            <summary>
            Gets or sets an Appointment's subject line. This string is limited to 4096 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Appointment.Body">
            <summary>
            Gets or sets an Appointment's text Notes. The maximum size is 20 KB.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Appointment.Location">
            <summary>
            Gets or sets an Appointment's location. This string is limited to 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Appointment.Categories">
            <summary>
            Gets or sets an Appointment's categories. This string is limited to 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Appointment.AllDayEvent">
            <summary>
            Gets or sets a value indicating whether an Appointment occurs as an all day event.  By default, Appointments occur at a particular point in the day.
            <remarks>
            An all day event Appointment cannot be a Meeting.
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Appointment.IsRecurring">
            <summary>
            Gets a value indicating whether an Appointment is recurring.
            <remarks>
            <seealso cref="M:Microsoft.WindowsMobile.PocketOutlook.AppointmentCollection.Restrict(System.String)"/>
            This information can be useful in building a restriction string. For more information, see <see cref="M:Microsoft.WindowsMobile.PocketOutlook.AppointmentCollection.Restrict(System.String)"/>.
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Appointment.ReminderSet">
            <summary>
            Gets or sets a value indicating whether a reminder dialog box appears to remind the user of an upcoming Appointment.
            <remarks>
            The default value is set by the user in the Calendar and Task options.
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Appointment.MeetingStatus">
            <summary>
            Gets a value indicating whether an Appointment is a Meeting. The MeetingStatus enumeration defines the possible values. The default value is NotMeeting.
            </summary>
            <remarks>
            The <see cref="T:Microsoft.WindowsMobile.PocketOutlook.MeetingStatus"/> enumeration defines the possible values.
            The default value is <b>NotMeeting</b>.
            <p><b>MeetingStatus</b> is a read-only property. Some operations change its value internally. For example,
            adding a <see cref="T:Microsoft.WindowsMobile.PocketOutlook.Recipient"/> changes an Appointment's <b>MeetingStatus</b> from <b>NotMeeting</b> to <b>Meeting</b>; 
            however, canceling a meeting does not change the <b>MeetingStatus</b> to <b>MeetingCanceled</b>.</p>
            <p>A user can still change an Appointment's <b>MeetingStatus</b> property manually, 
            using the techniques in the following code example.</p>
            </remarks>
            <example> This sample demonstrates two ways to change an Appointment's <b>MeetingStatus</b> property.
            <code>
            appt.Properties[AppointmentProperty.MeetingStatus] = (UInt32)MeetingStatus.MeetingAccepted;
            appt.Properties["MeetingStatus"] = (UInt32)MeetingStatus.MeetingAccepted;
            </code>
            </example>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Appointment.Sensitivity">
            <summary>
            Gets or sets an Appointment's sensitivity. The Sensitivity enumeration defines the possible values. The default value is Normal.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Appointment.BusyStatus">
            <summary>
            Gets or sets a Contact's availability in the time period spanned by an Appointment or Meeting. The BusyStatus enumeration defines the possible values. The default value is Busy.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Appointment.ReminderSoundFile">
            <summary>
            Gets or sets the fully qualified path name of the audio file that Pocket Outlook plays as the Appointment reminder. This property is valid only if the ReminderSet property is TRUE, and if the ReminderOptions property includes Sound. This property defaults to the current setting in Calendar options, but if no audio file is specified, then it defaults to Alarm1.wav. The maximum length of the the fully qualified path name is 255 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Appointment.ReminderMinutesBeforeStart">
            <summary>
            Gets or sets the number of minutes a reminder alarm occurs before the start of an Appointment. This property defaults to the current setting in Calendar options.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Appointment.Start">
            <summary>
            Gets or sets the Appointment's start time. This System.DateTime value must be less than or equal to the Appointment's end time.
            <remarks>
            Time values must be between 1/1/1900 and 12/31/2999 inclusive. The default start time is always the top of the next hour. For example, if the current time was 10:37 AM, then the default start time would be 11:00 AM.
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Appointment.End">
            <summary>
            Gets or sets the Appointment's end time. This System.DateTime value must be greater than or equal to the Appointment's start time.
            <remarks>
            Time values must be between 1/1/1900 and 12/31/2999 inclusive.
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Appointment.ReminderLed">
            <summary>
            Gets or sets a value indicating whether Pocket Outlook uses the mobile device's notification light-emitting diode (LED) to remind the user of an upcoming Appointment.
            <remarks>
            The LED flashes green once every second to remind the user of an upcoming Appointment.
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Appointment.ReminderVibrate">
            <summary>
            Gets or sets a value indicating whether Pocket Outlook uses the mobile device's built-in vibrator to remind the user of an upcoming Appointment.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Appointment.ReminderDialog">
            <summary>
            Gets or sets a value indicating whether a reminder dialog box appears to remind the user of an upcoming Appointment.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Appointment.ReminderSound">
            <summary>
            Gets or sets a value indicating whether Pocket Outlook plays the Appointment reminder audio file to remind the user of an upcoming Appointment.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Appointment.ReminderRepeat">
            <summary>
            Gets or sets a value indicating whether the Appointment reminder sound file repeats until the user dismisses the reminder.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Appointment.Duration">
            <summary>
            Gets or sets the length of an Appointment. This is a System.TimeSpan object.
            <remarks>
            The maximum duration is 31 days. The default duration is one hour.
            </remarks>
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Appointment.Recipients">
            <summary>
            Gets the collection of Recipients for a Meeting. The RecipientCollection object is available only if IsMeeting is TRUE.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Appointment.RecurrencePattern">
            <summary>
            Gets an Appointment's recurrence pattern. A recurrence pattern defines when and how often an Appointment repeats (for example, every Monday at 9:00 AM).
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.AppointmentCollection">
            <summary>
            Represents the collection of Appointment items in an Appointment (Calendar) folder.
            <seealso cref="T:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection"/>
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection">
            <summary>
            Defines container operations (for example, adding, removing, and sorting items), along with state information (for example, references to the containing folder, whether the collection is sorted, etc.) about generic PIM item collections.
            </summary>
            <remarks>
            This is the base class for Appointment, Task, and Contact collections.
            <para>The PimItemCollection class provides methods for adding and removing PimItem objects to or from a collection, searching for items within a collection, and sorting collection items. It contains methods for indexing into a collection, information about the number of items in a collection, and whether or not you can add or remove items to or from a collection.</para>
            <para>The Pocket Outlook object model parallels the desktop Outlook object model by grouping PimItem objects into folders, but folders are actually implemented as collections. For example, the ContactFolder object has an Item property, and the accessor for this property returns a ContactCollection object, not a PimItem object.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.SealCollection">
            <summary>
            Seals the collection, this is needed when a custom Collection is returned. (i.e. Restricted collection)
            Natively it is not possible to just add to an ICollection.
            All that can be done is Saving and Filtering.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.AddNew">
            <summary>
            Adds a new PIM item to the collection.
            </summary>
            <returns>The item added to the list.</returns>
            <exception cref="T:System.NotSupportedException">This property is not supported.</exception>
            <remarks>This method is supported only if AllowNew is true; otherwise, a NotSupportedException is thrown.
            Implementing this method means that the IBindingList list must understand the type of objects 
            to add to the list and must understand how to create a new instance of that type. 
            For example, if you have a collection of myCustomer objects, the AddNew method should add 
            a new myCustomer object to the list.
            The base is used to throw a generic message when AllowNew is false.
            </remarks>        
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.Finalize">
            <summary>
            The PimItemCollection class destructor.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.Restrict(System.String)">
            <summary>
            Creates a new PIM item collection that contains only PIM items that match a set of filter criteria. This provides a filtered view of a collection of PIM items.
            </summary>
            <param name="restriction">
            A string that defines which items to find. 
            This string must contain a Boolean expression that evaluates to either TRUE or FALSE for any item. 
                   - Enclose property names between brackets. 
                   - You can combine expressions with AND and OR. 
                   - Comparison operators are the following &quot;&lt;, &lt;=, &gt;, &gt;=, =, &lt;&gt;&quot;
            </param>
            <remarks>
            A restriction match requires that the item include a value for the property. For example, if you do not set the e-mail address for a contact, the contact will not be found using the restriction string [Email1Address]&lt;&gt;me@microsoft.com, even though the value of Email1Address is not &quot; me@microsoft.com.&quot;
            </remarks>
            <example>
            In this example, myRestrictedCollection contains Appointments that occur only on 8/22/2001.
            <code>
               AppointmentCollection c = myOutlookSession.Appointments.Items;
               AppointmentCollection myRestrictedCollection = c.Restrict("[StartDate] &gt;= 8/22/2001 0:0 AND [StartDate] &lt;= 8/23/2001 0:0");
            </code>
            </example>
            <returns>The collection of PIM items matching the restriction.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.Sort(System.String,System.Boolean)">
            <summary>
            Sorts the PIM items in a collection based on one of the PimItem properties. You can specify either an ascending or a descending sort order.
            </summary>
            <param name="propertyName">The name of the property to sort on. For example:
            <code>myItemCollection.Sort("Subject", true);</code>
            </param>
            <param name="descending">true to sort in descending order, false otherwise.</param>
            <returns>true if the sort was successful; otherwise false.</returns>
            <remarks>
            The Sort method is supported if SupportsSorting is true; otherwise, this method throws a NotSupportedException.
            </remarks>
            <exception cref="T:System.NotSupportedException">Sort is not supported.</exception>
            <exception cref="T:System.ArgumentNullException">propertyName is null.</exception>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the PIM item from the collection, at the specified index position.
            </summary>
            <remarks>
            Both <b>RemoveAt</b> and <see cref="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.Remove(Microsoft.WindowsMobile.PocketOutlook.PimItem)"/> throw a <b>NotSupportedException</b> exception 
            if <see cref="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.AllowRemove"/> is <i>false</i>.
            </remarks>
            <param name="index">Index in which the item is removed.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.Insert(System.Int32,Microsoft.WindowsMobile.PocketOutlook.PimItem)">
            <summary>
            Not supported.
            </summary>
            <param name="index">Where in the collection to insert the PimItem.</param>
            <param name="value">The PimItem to be inserted.</param>
            <remarks>This method is Not Supported</remarks>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.Remove(Microsoft.WindowsMobile.PocketOutlook.PimItem)">
            <summary>
            Removes a PIM item from the collection, based on the current sort order.
            </summary>
            <remarks>
            Both <b>Remove</b> and <see cref="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.RemoveAt(System.Int32)"/> throw a <b>NotSupportedException</b> exception 
            if <see cref="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.AllowRemove"/> is <i>false</i>.
            </remarks>
            <param name="value">The PIM item to be removed from the collection.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.Contains(Microsoft.WindowsMobile.PocketOutlook.PimItem)">
            <summary>
            Gets a value indicating whether a specific PIM item exists in the collection.
            </summary>
            <param name="value">The PimItem to be found.</param>
            <returns>True if the item is found in the collection. False if the item is not found in the collection.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.Clear">
            <summary>
            Deletes all PIM items from the collection.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.IndexOf(Microsoft.WindowsMobile.PocketOutlook.PimItem)">
            <summary>
            Gets a PIM item’s position in the collection.
            </summary>
            <remarks>
            Strongly typed.
            </remarks>
            <param name="value">The PimItem to find the index of.</param>        
            <returns>The index of the PimItem if found in the list; otherwise, -1.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.Add(Microsoft.WindowsMobile.PocketOutlook.PimItem)">
            <summary>
            Creates and inserts a new PIM item into the collection.
            </summary>
            <param name="value">The item to be added.</param>
            <returns>The position into which the new item was inserted</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.Add(Microsoft.WindowsMobile.PocketOutlook.PimItem,Microsoft.WindowsMobile.PocketOutlook.FolderType)">
            <summary>
            Creates a new item for a folder in the Items collection. The item type depends on the folder type.
            </summary>
            <returns>The position into which the new item was inserted</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.CopyTo(Microsoft.WindowsMobile.PocketOutlook.PimItem[],System.Int32)">
            <summary>
            Copies all PIM items in the collection into a PimItem array, beginning at the specified array index.
            </summary>
            <param name="array">The array of items to fill</param>
            <param name="index">The starting position.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The index parameter is less than zero. </exception>
            <exception cref="T:System.ArgumentException">The index parameter is greater than or equal to the length of the array parameter. Can also be thrown if the number of elements in the source array is greater than the available space from index to the end of the destination array.</exception>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies all PIM items in the collection into a generic array, beginning at the specified array index.
            </summary>
            <param name="array">The array of items to fill</param>
            <param name="index">The starting position.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The index parameter is less than zero. </exception>
            <exception cref="T:System.ArgumentException">The index parameter is greater than or equal to the length of the array parameter. Can also be thrown if the number of elements in the source array is greater than the available space from index to the end of the destination array.</exception>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the PIM item collection.
            </summary>
            <returns>The enumerator that can iterate through a collection.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the PIM item collection.
            </summary>
            <returns>A new PimItemCollectionEnumerator.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.Dispose">
            <summary>
            Disposes the collection.
            </summary>
            <remarks>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Disables finalization by the garbage collector by a calling GC.SuppressFinalize(this).
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.Dispose(System.Boolean)">
            <summary>
            Dispose the collection.
            </summary>
            <param name="disposing">true if called from Dispose(), otherwise false.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.AddIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Adds the sorting property descriptor to the indexes used for a search.
            </summary>
            <param name="property">The PropertyDescriptor to add to the indexes used for searching.</param>
            <remarks>The list must support this method. However, support for this method can be a nonoperation.</remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
            <summary>
            Sorts the list based on a property descriptor and a sort direction.
            </summary>
            <param name="property">The PropertyDescriptor to sort by. </param>
            <param name="direction">One of the ListSortDirection values. </param>
            <exception cref="T:System.NotSupportedException">Thrown when SupportsSearching is false.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the property descriptor is null.</exception>
            <remarks>
            If items are added or removed, these items are placed in the order of the sort.
            When you call this method, you should raise a ListChanged event with the Reset enumeration.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Finds the PIM item with the matching property description value.
            </summary>
            <param name="property">The PropertyDescriptor to search on.</param>
            <param name="key">The value of the property parameter to search for.</param>
            <returns>The index of the row that has the given PropertyDescriptor.</returns>
            <remarks>This method will select the first row where the value of the property parameter 
            equals the value of the key parameter.</remarks>
            <exception cref="T:System.NotSupportedException">Thrown when SupportSearching is false.</exception>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.System#ComponentModel#IBindingList#AddNew">
            <summary>
            Adds a new PIM item to the collection.
            </summary>
            <returns>The new object that just got added.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Removes the property descriptor from the search indexes.
            </summary>
            <param name="property">The PropertyDescriptor to remove from the indexes used for searching. </param>
            <remarks>The list must support this method. However, support for this method can be a nonoperation.</remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.RemoveSort">
            <summary>
            Removes a sort applied with ApplySort.
            </summary>
            <exception cref="T:System.NotSupportedException">This property is not supported.</exception>
            <remarks>This property is supported if SupportsSorting is true; otherwise, this property throws a NotSupportedException.
            It is recommended that when you call RemoveSort, that you raise a ListChanged event with the Reset enumeration.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.Add(System.Object)">
            <summary>
            Creates a new PIM item and adds it to the collection. 
            </summary>
            <param name="value">The item to be added.</param>
            <returns>The position into which the new item was inserted</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.Contains(System.Object)">
            <summary>
            Gets a value indicating whether the collection contains the supplied PIM item.
            </summary>
            <param name="item">The item to search for.</param>
            <returns> true if the collection contains the item; false otherwise.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.IndexOf(System.Object)">
            <summary>
            Gets the position of the PIM item in the collection.
            </summary>
            <param name="item">The PimItem to find the index of.</param>
            <exception cref="T:Microsoft.WindowsMobile.PocketOutlook.PocketOutlookException">Thrown when there is any error getting the index of the PimItem.</exception>
            <returns>Returns the index of the PimItem.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.Insert(System.Int32,System.Object)">
            <summary>
            Adds a generic object to the PIM item collection, at specific position.
            </summary>
            <remarks>
            <b>Note</b>: Not supported.
            </remarks>
            <param name="index">Where in the collection to insert the PimItem.</param>
            <param name="item">The PimItem to be inserted.</param>
            <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.Remove(System.Object)">
            <summary>
            Removes a generic object from the PIM item collection, based on the current sort order.
            </summary>
            <remarks>
            Both <b>Remove</b> and <see cref="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.RemoveAt(System.Int32)"/> throw a <b>NotSupportedException</b> exception 
            if <see cref="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.AllowRemove"/> is <i>false</i>.
            </remarks>
            <param name="item">The PimItem to be removed from the collection.</param>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.ListChanged">
            <summary>
            Occurs when either the collection changes, or when an individual PIM item in the collection changes.
            </summary>
            <remarks>
            Occurs only if the SupportsChangeNotification property is TRUE.
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.Count">
            <summary>
            Gets the number of PIM Items in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.System#Collections#ICollection#Count">
            <summary>
            Gets the number of elements contained in the ICollection.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the ICollection is thread-safe.
            </summary>
            <remarks>
            <b>Note</b>: <b>SyncRoot</b> is supported, but <b>IsSynchronized</b> always returns a value of <b>false</b>.
            </remarks>
            <returns>
            <b>false</b>
            </returns>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the ICollection.
            </summary>
            <remarks>
            Not supported.
            </remarks>
            <returns>
            <b>null</b>
            </returns>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.AllowEdit">
            <summary>
            Gets a value indicating whether it is possible to update PIM items in the collection.
            </summary>
            <value>True if it is possible to update the items in the list, otherwise false.</value>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.AllowNew">
            <summary>
            Gets a value indicating whether it is possible to use AddNew to add PIM items to the collection.
            </summary>
            <remarks>
            True if it is possible to add items, otherwise false.
            <para>
            If IList.IsFixedSize or IList.IsReadOnly is true, then AllowNew returns false.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.AllowRemove">
            <summary>
            Gets a value indicating whether it is possible to use either Remove or RemoveAt to remove PIM items from the collection.
            </summary>
            <remarks>
            Returns <i>false</i> if either <see cref="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.IsFixedSize"/> or <see cref="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.IsReadOnly"/> is true.
            If <b>AllowRemove</b> returns <i>false</i>, then <see cref="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.Remove(Microsoft.WindowsMobile.PocketOutlook.PimItem)"/> and <see cref="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.RemoveAt(System.Int32)"/> 
            will throw the exception <b>NotSupportedException</b>.
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.IsSorted">
            <summary>
            Gets a value indicating whether the items in the collection are sorted.
            </summary>
            <remarks>This property is supported if SupportsSorting is true; otherwise, this property throws a NotSupportedException.
            If IsSorted returns true, items are added or removed in the order of the sort.
            </remarks>
            <exception cref="T:System.NotSupportedException">This property is not supported.</exception>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.SortDirection">
            <summary>
            Gets the direction of the sort.
            </summary>
            <remarks>This property is supported if SupportsSorting is true; otherwise, this property throws a NotSupportedException.</remarks>
            <exception cref="T:System.NotSupportedException">This property is not supported.</exception>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.SortProperty">
            <summary>
            Gets the sorting property descriptor.
            </summary>
            <remarks>This property is supported if SupportsSorting is true; otherwise, this property throws a NotSupportedException.</remarks>
            <exception cref="T:System.NotSupportedException">This property is not supported.</exception>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.SupportsChangeNotification">
            <summary>
            Gets a value indicating whether a ListChanged event is raised when either the list changes, or a PIM item in the list changes.
            </summary>
            <value>true if a ListChanged event is raised when the list changes, or when an item in the list changes; otherwise false.</value>
            <remarks>Objects in the list must notify the list when they change, so the list can raise a ListChanged event.</remarks>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.SupportsSearching">
            <summary>
            Gets a value indicating whether the collection supports searching using the Find method.
            </summary>
            <remarks>true if the list supports searching using the Find method; otherwise, false.</remarks>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.SupportsSorting">
            <summary>
            Gets a value indicating whether the collection supports sorting (that is, whether it is possible to use the Sort and ApplySort methods).
            </summary>
            <remarks>true if the list supports sorting using the Sort and ApplySort methods; otherwise, false.</remarks>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection has a fixed size.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets a PIM item from the collection at the specified index into the collection.
            </summary>
            <exception cref="T:System.NotSupportedException">Thrown when an item is set through the indexer.</exception>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.Item(System.Int32)">
            <summary>
            Gets a PIM item at the specified index in the collection.
            </summary>
            <remarks>
            Each time you retrieve a PIM item with the indexer, you get a newly instantiated PIM item.
            </remarks>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.PimItemCollectionEnumerator">
            <summary>
            Defines an enumerator for iterating through PIM item collections.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.PimItemCollectionEnumerator.#ctor(Microsoft.WindowsMobile.PocketOutlook.PimItemCollection)">
            <summary>
            The constructor for the PimItemCollectionEnumerator class.
            </summary>
            <param name="collection">Collection that will be enumerated.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.PimItemCollectionEnumerator.Reset">
            <summary>
            Resets the enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.PimItemCollectionEnumerator.MoveNext">
            <summary>
            Increments the enumerator to the next PIM item in the collection.
            </summary>
            <returns>TRUE if able to move to the next item. FALSE if it doesn't move to the next item.</returns>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.PimItemCollectionEnumerator.Current">
            <summary>
            Gets the current PIM item from the enumerator.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection.PimItemCollectionEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current generic object from the enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AppointmentCollection.Restrict(System.String)">
            <summary>
            Returns a new AppointmentCollection object that contains only Appointment objects that match a set of criteria, providing a filtered view of a collection of appointments.
            </summary>
            <param name="restriction">
            A string that defines which items to find. 
            The string must contain a Boolean expression that evaluates to TRUE or FALSE for any item. 
                   - Enclose property names between brackets. 
                   - You can combine expressions with AND and OR. 
                   - Comparison operators are the following &quot;&lt;, &lt;=, &gt;, &gt;=, =, &lt;&gt;&quot;
            </param>
            <remarks>
            A restriction match requires that the item include a value for the property.
            For example, if you do not set the e-mail address for a contact, the contact will
            not be found using the restriction string [Email1Address]&lt;&gt;me@microsoft.com, 
            even though the value of Email1Address is not &quot;not me@microsoft.com.&quot;
            </remarks>
            <returns>The Collection of Items matching the Restriction.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AppointmentCollection.Contains(Microsoft.WindowsMobile.PocketOutlook.Appointment)">
            <summary>
            Checks to see whether a specific Appointment object exists in the AppointmentCollection object.
            </summary>
            <param name="item">The PimItem to be found.</param>
            <returns>True if the item is found in the collection. False if the item is not found in the collection.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AppointmentCollection.Add(Microsoft.WindowsMobile.PocketOutlook.PimItem)">
            <summary>
            Adds an Appointment object to the AppointmentCollection object.
            </summary>        
            <exception cref="T:System.NotSupportedException">Thrown when AllowNew is false.</exception>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AppointmentCollection.Remove(Microsoft.WindowsMobile.PocketOutlook.Appointment)">
            <summary>
            Removes a specific Appointment object from the AppointmentCollection object.
            </summary>
            <param name="item">The PimItem to be removed from the collection.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AppointmentCollection.CopyTo(Microsoft.WindowsMobile.PocketOutlook.Appointment[],System.Int32)">
            <summary>
            Copies an AppointmentCollection object to an array of Appointment objects, beginning at a specific array index.
            </summary>
            <param name="array">The array of items to fill</param>
            <param name="index">The starting position.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The index parameter is less than zero. </exception>
            <exception cref="T:System.ArgumentException">The index parameter is greater than or equal to the length of the array parameter. Can also be thrown if the number of elements in the source array is greater than the available space from index to the end of the destination array.</exception>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AppointmentCollection.AddNew">
            <summary>
            Creates and adds a new Appointment to the AppointmentCollection object.
            </summary>
            <returns>The new PimItem</returns>        
            <exception cref="T:System.NotSupportedException">Thrown when AllowNew is false.</exception>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AppointmentCollection.GetEnumerator">
            <summary>
            Initializes an instance of a new AppointmentCollectionEnumerator enumerator for iterating through the AppointmentCollection object.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.AppointmentCollection.Item(System.Int32)">
            <summary>
            Gets the Appointment from the Appointment collection, with the specified index.
            </summary>
            <remarks>
            Each time you retrieve a Appointment item with the indexer, you get a newly instantiated Appointment item.
            </remarks>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.AppointmentCollection.AppointmentCollectionEnumerator">
            <summary>
            An enumerator for iterating through the AppointmentCollection object.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AppointmentCollection.AppointmentCollectionEnumerator.#ctor(Microsoft.WindowsMobile.PocketOutlook.AppointmentCollection)">
            <summary>
            Initializes an instance of an Appointment collection enumerator.
            </summary>
            <param name="appointmentCollection">Base collection for the enumerator. </param>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.AppointmentCollection.AppointmentCollectionEnumerator.Current">
            <summary>
            Gets the current Appointment.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.AppointmentFolder">
            <summary>
            Defines a folder (the Calendar Folder) for storing the collection of Appointment objects.
            <seealso cref="T:Microsoft.WindowsMobile.PocketOutlook.Folder"/>
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.Folder">
            <summary>
            Defines the generic base class for specialized folders containing item collections based on the PimItemCollection class.
            </summary>
            <remarks>Most of the Folder Class is not implemented in v1 because we aren't handling multiple folders</remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Folder.Finalize">
            <summary>
            Overridden. Allows you to free resources and perform other cleanup operations before the folder is reclaimed by the garbage collector.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Folder.Dispose">
            <summary>
            Disposes a folder. Disables finalization by the garbage collector by a calling GC.SuppressFinalize(this). Releases the COM pointer to this folder.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.AppointmentFolder.Items">
            <summary>
            Gets the Appointment Items in the AppointmentCollection.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.AppointmentRecurrence">
            <summary>
            Defines a recurrence pattern and applies it to an Appointment.
            </summary>
            <remarks>
            When you create a recurring Appointment, the Recurrence object gets the StartTime, Duration, and EndTime from the Appointment, so you do not need to set them. 
            If you do set these values, your settings override the Appointment settings. If you set all three properties, StartTime, Duration, EndTime — Pocket Outlook ignores the Duration setting and defines the appointment with the StartTime and EndTime settings. If you set any two of these properties and leave the third undefined, Pocket Outlook calculates the undefined setting from the two properties you set.
            </remarks>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.Recurrence">
            <summary>
            Defines a recurrence pattern that can be applied to Tasks, Appointments, Events, and Meetings.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Recurrence.Clear">
            <summary>
            Removes a recurrence pattern.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Recurrence.RecurrenceTypeChanged">
            <summary>
            Occurs when the recurrence type changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Recurrence.OccurrencesChanged">
            <summary>
            Occurs when the the number of occurences changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Recurrence.IntervalChanged">
            <summary>
            Occurs when the occurrence interval changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Recurrence.DaysOfWeekMaskChanged">
            <summary>
            Occurs when the <b>DayOfWeek</b> property changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Recurrence.DayOfMonthChanged">
            <summary>
            Occurs when the <b>DayOfMonth</b> property changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Recurrence.MonthOfYearChanged">
            <summary>
            Occurs when the <b>MonthOfYear</b> property changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Recurrence.InstanceChanged">
            <summary>
            Occurs when the <b>WeekOfMonth</b> property changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Recurrence.PatternStartDateChanged">
            <summary>
            Occurs when the recurrence pattern’s start date changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Recurrence.PatternEndDateChanged">
            <summary>
            Occurs when the recurrence pattern’s end date changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Recurrence.NoEndDateChanged">
            <summary>
            Occurs when the <b>NoEndDate</b> property changes.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Recurrence.RecurrenceType">
            <summary>
            Gets or sets the type of recurrence pattern applied to a Task, Appointment, Event, or Meeting.
            </summary>
            <remarks>
            <b>Note</b>: This property must be set before any of the other <b>Recurrence</b> properties.
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Recurrence.Occurrences">
            <summary>
            Gets or sets the number of occurrences in the recurrence pattern.
            </summary>
            <remarks>
            Not used if <b>NoEndDate</b> is <b>true</b>.
            <para>To use <b>Occurrences</b>, set <b>NoEndDate</b> to <b>false</b>. After you set <b>Occurrences</b>, <b>PatternEndDate</b> is set automatically when you save the PIM item.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Recurrence.Interval">
            <summary>
            Gets or sets the length of time between occurrences.
            </summary>
            <remarks>
            The integer value is in the context of the <b>RecurrenceType</b> enumeration value, which is either days, weeks, months, or month by number. Use the <b>Recurrence.RecurrenceType</b> property to find out. Valid interval values lie between 1 and 999.
            </remarks>
            <exception cref="T:System.NotSupportedException">Thrown when <b>Interval</b> is used with something other than <b>Daily</b>, <b>Monthly</b>, <b>MonthlyByNumber</b>, and <b>Weekly</b>.</exception>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Recurrence.DaysOfWeekMask">
            <summary>
            Gets or sets the days of the week of the recurrence.
            </summary>
            <remarks>
            Used with <b>RecurrenceType</b> = <b>MonthlyByNumber</b>, <b>YearlyByNumber</b> and <b>Weekly</b>.
            </remarks>
            <exception cref="T:System.NotSupportedException">DayOfWeek can only be read on MonthNth, YearNth, and Weekly recurrence patterns. Change the RecurrencePattern.RecurrenceType property first.</exception>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Recurrence.DayOfMonth">
            <summary>
            Gets or sets the day in a month on which an item occurs, from 1 to 31.
            </summary>
            <remarks>
            Used with <b>RecurrenceType</b> = <b>Monthly</b> or <b>Yearly</b>.<para>If there are fewer days in a given month than <b>DayOfMonth</b>, the recurrence occurs on the last day of that month.</para>
            </remarks>
            <exception cref="T:System.NotSupportedException">Thrown when DayOfMonth is not on Monthly and Yearly recurrence patterns. Change the <b>RecurrencePattern.RecurrenceType</b> property first.</exception>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Recurrence.Instance">
            <summary>
            Gets or sets the week of the month (the <b>WeekOfMonth</b> enumeration value) in which an item occurs, from one to five. 
            </summary>
            <remarks>
            Used with <b>RecurrenceType</b> = <b>MonthByNumber</b> or <b>YearByNumber</b>.<para>The value five is always the last week of the month, regardless of whether the calculated date actually exists.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Recurrence.MonthOfYear">
            <summary>
            Gets or sets the month of the year (the <b>Month</b> enumeration value) in which an item occurs, from one to twelve.
            </summary>
            <remarks>
            Used with <b>RecurrenceType</b> = <b>Yearly</b> or <b>YearlyByNumber</b>.
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Recurrence.PatternStartDate">
            <summary>
            Gets or sets the starting date of the recurrence pattern.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Recurrence.PatternEndDate">
            <summary>
            Gets or sets the ending date of the recurrence pattern. 
            </summary>
            <remarks>
            Not used if <b>NoEndDate</b> is <b>true</b>.
            <para>To use <b>PatternEndDate</b>, set <b>NoEndDate</b> to <b>false</b>.
            After you set this property, <b>NumberOfOccurrences</b> is set automatically when you save the PIM item.</para>
            <para>Recurrence duration applies to Appointment items only.</para>
            <para>The time returned is in the time zone of the appointment.</para>
            <para>You must set the date values for PatternStartDate and PatternEndDate. The recurrence pattern's PatternStartDate and PatternEndDate must be equal to the time and date of one of the appointments in the recurrence series. If the appointment is less than a day, then the recurrence pattern PatternStartDate and PatternEndDate must be equal.</para>
            <para>The start and end times for recurring Appointments are set in terms of the Timezone property (PIMPR_TIMEZONE), but the Start and End times for individual Appointments are set and read in terms of the local (device's) Timezone. For example, a recurring Appointment set to recur at noon London time, would occur at 4:00 AM Pacific time.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Recurrence.NoEndDate">
            <summary>
            Gets or sets whether the recurrence pattern has an end date. <b>true</b> if the recurrence has no end date; otherwise <b>false</b>. 
            </summary>
            <remarks>
            If you set <b>NoEndDate</b> to <b>true</b>, then <b>PatternEndDate</b> and <b>Occurrences</b> are not used.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AppointmentRecurrence.GetOccurrence(System.DateTime)">
            <summary>
            Gets one specific occurence of the recurring Appointment.
            </summary>
            <param name="dateOfOccurrence">The Date where the user wants to find an occurrence.</param>
            <returns>Appointment matching that occurence, 
            or null if there are no occurrences in the specified date.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AppointmentRecurrence.Clear">
            <summary>
            Removes the recurrence pattern from an Appointment.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.AppointmentRecurrence.DurationChanged">
            <summary>
            Occurs when a recurrence pattern's duration changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.AppointmentRecurrence.PatternStartTimeChanged">
            <summary>
            Occurs when a recurrence pattern's start time changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.AppointmentRecurrence.PatternEndTimeChanged">
            <summary>
            Occurs when a recurrence pattern's end time changes.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.AppointmentRecurrence.Duration">
            <summary>
            Gets or sets the length of time that the recurrence pattern lasts.
            Duration is supported for Appointments only.
            </summary>
            <remarks>
            If you do not specify the duration, Pocket Outlook calculates it. Duration is ignored if you set both StartTime and EndTime. Duration is used to calculate StartTime or EndTime if one is omitted. Duration cannot be set longer than 31 days.
            </remarks>        
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.AppointmentRecurrence.PatternStartTime">
            <summary>
            Gets or sets the start time for a recurring Appointment.
            Pocket Outlook ignores the date and uses only the time. 
            Supported only for Appointments.
            <para>You must set the date values for <b>PatternStartDate</b> and <b>PatternEndDate</b>. 
            The recurrence pattern's <b>PatternStartDate</b> and <b>PatternEndDate</b> must be equal to 
            the time and date of one of the appointments in the recurrence series. 
            If the appointment is less than one day, 
            then the recurrence pattern <b>PatternStartDate</b> and <b>PatternEndDate</b> must be equal.</para>
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.AppointmentRecurrence.PatternEndTime">
            <summary>
            Gets or sets the end time for a recurring <b>Appointment</b>.
            <para>Supported only for <b>Appointments</b></para>.
            <para>You must set the date values for <b>PatternStartDate</b> and <b>PatternEndDate</b>. 
            The recurrence pattern's <b>PatternStartDate</b> and <b>PatternEndDate</b> must be equal to 
            the time and date of one of the appointments in the recurrence series. 
            If the appointment is less than one day, 
            then the recurrence pattern <b>PatternStartDate</b> and <b>PatternEndDate</b> must be equal.</para>
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.Attachment">
            <summary>
            an individual attachment
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Attachment.#ctor(System.String)">
            <summary>
            This default constructor creates an attachment based on the specified fileName.
            The file should exist until the message has been sent or saved.
            </summary>
            <param name="fileName">The fileName should be the complete filename to the file
            that will be attached, including the path to the file.</param>
            <exception cref="T:System.ArgumentException">Will be thrown when the specified name does not
            correspond to a filename on the device.</exception>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Attachment.Name">
             <summary>
             Gets or sets the name of the attachment.
             </summary>
            <value>The complete filename to the file that will be attached, 
            including the path to the file.</value>
             <exception cref="T:System.ArgumentException">
             Thrown when the file name is invalid.
             </exception>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection">
            <summary>
            attachments collection for email or mms messages
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Will copy the collection of attachments to an array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection.CopyTo(Microsoft.WindowsMobile.PocketOutlook.Attachment[],System.Int32)">
            <summary>
            Will copy the collection of attachments to an array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins. </param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection.Add(Microsoft.WindowsMobile.PocketOutlook.Attachment)">
            <summary>
            Adds the specified atachment to the collection.
            </summary>
            <param name="attachment">the attachment to add</param>        
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection.Remove(Microsoft.WindowsMobile.PocketOutlook.Attachment)">
            <summary>
            Finds and removes the specified attachment from the collection.
            </summary>
            <param name="attachment">attachment to remove</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
             Gets an enumerator to the attachment collection.
            </summary>
            <returns>returns null if an error occurs, otherwise an enumerator.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through a collection.
            </summary>
            <returns>The enumerator that can iterate through a collection.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the attachment at the given index on the attachment collection.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an attachment at a given index in the attachment collection.
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes an attachment from the collection.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection.Contains(System.Object)">
            <summary>
            Ckecks if the attachment is contained in the collection.
            </summary>
            <param name="value">The attachment to check</param>
            <returns>true if the attachment is contained in the collection, or false otherwise.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection.Clear">
            <summary>
            Clears the attachment collection.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection.IndexOf(System.Object)">
            <summary>
            Returns the index of the specified attachment.
            </summary>
            <param name="value">The object to locate.</param>
            <returns>The position of the element passed in.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an attachement to the collection.
            </summary>
            <param name="value">The attachment to add to the attacment collection.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection.IndexOf(Microsoft.WindowsMobile.PocketOutlook.Attachment)">
            <summary>
            Returns the index of a given attachment.
            </summary>
            <param name="value">The attachment to locate.</param>
            <returns>The index of the attachment in the attachment collection.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection.Insert(System.Int32,Microsoft.WindowsMobile.PocketOutlook.Attachment)">
            <summary>
            Inserts an attachment at a given index in the attachment collection.
            </summary>
            <param name="index">Position where the attachment will be inserted.</param>
            <param name="value">The attachment to insert.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection.Contains(Microsoft.WindowsMobile.PocketOutlook.Attachment)">
            <summary>
            Returns true if the attachment is contained in the collection.
            </summary>
            <param name="value">The attachment to search for.</param>
            <returns>true if the attachment exists in the attachment collection.</returns>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection.IsSynchronized">
            <summary>
            Will return false. This is not a synchronized collection.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection.Count">
            <summary>
            Gets the number of attachments in the attachment collection.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection.SyncRoot">
            <summary>
             Gets the object that can be used to synchronize access to the collection when IsSynchronized is true.
             Since this is not a synchronized collection, it will return null.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection.Item(System.Int32)">
            <summary>
            Gets or sets the attachment at a given index.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the List is read-only or not.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection.System#Collections#IList#Item(System.Int32)">
            <summary>
            Returns the attachment in the List at a specified index.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection.IsFixedSize">
            <summary>
            Returns whether the list has a fixed size or not.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollectionEnumerator">
            <summary>
            The enumerator class for the Recipient Collection.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollectionEnumerator.#ctor(Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection)">
            <summary>
            RecipientCollectionEnumerator constructor
            </summary>
            <param name="collection">The collection to enumerate</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollectionEnumerator.Reset">
            <summary>
            Resets the enumeration
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollectionEnumerator.MoveNext">
            <summary>
            Moves to the next Recipient in the collection.
            </summary>
            <returns>true if the enumerator was successfully advanced to the next element; 
            false if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollectionEnumerator.Current">
            <summary>
            The current recipient in the enumeration
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.AttachmentCollectionEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            The current recipient in the enumeration
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.Contact">
            <summary>
            Represents a Contact item in the Contact collection. Contacts represent information records on friends, colleagues, acquaintances, or even a company. They can be used for a variety of purposes (for example, addressing mail, e-mail, and text messages). A sizable Contact collection containing richly populated Contact items, is an enormously powerful database.
            </summary>
            <remarks>
            A <b>Contact</b> is a specialized <b>PimItem</b>. Use the <b>ContactCollection</b> to add and retrieve Contacts to and from the Contact folder.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Contact.SetPicture(System.String)">
            <summary>
            Sets the Contact's picture.
            </summary>
            <param name="fileName">File name to of the picture.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Contact.#ctor">
            <summary>
            Initializes a new instance of the Contact class.
            </summary>
            <overload>
            Initializes a new instance of the Contact class.
            </overload>
            <remarks> The Contact must later be added to a collection by using the ContactCollection.Add() method</remarks>
            <example>Contact c = new Contact();</example>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Contact.#ctor(Microsoft.WindowsMobile.PocketOutlook.ItemId)">
            <summary>
            Initializes a new instance of the Contact class, that references the item ID of an existing Contact.
            </summary>
            <remark>
            An exception is thrown if the item ID does not belong to a Contact.
            </remark >
            <param name="itemId">Identifier of the item to be retrieved</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Contact.DoBulkRead">
            <summary>
            Does a bulk fetch from the native side of the most used properties.
            It then stores the values in a cache.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Contact.Update">
            <summary>
            Saves the changes made to a Contact item by updating its enty in the Contact collection.
            </summary>
            <remarks>
            To update a Contact, you must specify at least one of the following properties: FirstName, LastName, CompanyName, or FileAs.
            </remarks>
            <exception cref="T:Microsoft.WindowsMobile.PocketOutlook.PocketOutlookException">The contact has not been added to a folder.</exception>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Contact.Delete">
             <summary>
             Deletes a Contact item by removing it from the Contact collection.
             </summary>
            
             <remarks>
             <b>Delete</b> throws a <b>Win32Exception</b> exception if the delete operation is not successful.
             For example, this can happen when deleting a <b>Contact</b> item that has not been 
             added to the <see cref="T:Microsoft.WindowsMobile.PocketOutlook.ContactCollection"/>.
             </remarks>
            
             <overload>
             Deletes the Contact from the Contact collection.
             </overload>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Contact.Copy">
            <summary>
            Creates a copy of a Contact item.
            </summary>
            <exception cref="T:Microsoft.WindowsMobile.PocketOutlook.PocketOutlookException">Thrown when the Contact has not been added to the collection before calling the Copy method.</exception>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Contact.ToString">
            <summary>
            Gets the Contact's display name.
            </summary>
            <returns>The Display Name as a string.</returns>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.FirstNameChanged">
            <summary>
            Occurs when the Contact's first name changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.GovernmentIdChanged">
            <summary>
            Occurs when the Contact's government ID changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.ManagerChanged">
            <summary>
            Occurs when the Contact's manager's name changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.MiddleNameChanged">
            <summary>
            Occurs when the Contact's middle name changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.LastNameChanged">
            <summary>
            Occurs when the Contact's last name changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.RingToneChanged">
            <summary>
            Occurs when the Contact's ring tone changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.SuffixChanged">
            <summary>
             Occurs when the Contact's suffix changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.TitleChanged">
            <summary>
             Occurs when the Contact's title changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.YomiFirstNameChanged">
            <summary>
            Occurs when the Contact's Japanese phonetic Yomigana rendering of the first name changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.YomiLastNameChanged">
            <summary>
            Occurs when the Contact's Japanese phonetic Yomigana rendering of the last name changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.FileAsChanged">
            <summary>
            Occurs when the Contact's FileAs name changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.NicknameChanged">
             <summary>
            Occurs when the Contact's nick name changes.
             </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.JobTitleChanged">
            <summary>
            Occurs when the Contact's job title changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.CompanyNameChanged">
            <summary>
            Occurs when the Contact's company name changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.CustomerIdChanged">
            <summary>
            Occurs when the Contact's customer ID changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.YomiCompanyNameChanged">
            <summary>
            Occurs when the Contact's Japanese phonetic Yomigana rendering of the company name changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.DepartmentChanged">
            <summary>
            Occurs when the Contact's department changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.SpouseChanged">
            <summary>
            Occurs when the Contact's spouse's name changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.ChildrenChanged">
            <summary>
            Occurs when the Contact's children's names change.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.BusinessTelephoneNumberChanged">
            <summary>
            Occurs when the Contact's business telephone number changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.Business2TelephoneNumberChanged">
            <summary>
            Occurs when the Contact's second business telepone number changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.BusinessFaxNumberChanged">
            <summary>
            Occurs when the Contact's business fax number changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.CarTelephoneNumberChanged">
            <summary>
            Occurs when the Contact's car telephone number changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.CompanyTelephoneNumberChanged">
            <summary>
            Occurs when the Contact's company phone number changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.HomeTelephoneNumberChanged">
            <summary>
            Occurs when the Contact's home telephone number changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.HomeFaxNumberChanged">
            <summary>
            Occurs when the Contact's home fax number changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.Home2TelephoneNumberChanged">
            <summary>
            Occurs when the Contact's second home telephone number changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.MobileTelephoneNumberChanged">
            <summary>
            Occurs when the Contact's mobile telephone number changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.PagerNumberChanged">
            <summary>
            Occurs when the Contact's pager number changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.AssistantTelephoneNumberChanged">
            <summary>
            Occurs when the Contact's assistant telephone number changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.RadioTelephoneNumberChanged">
            <summary>
            Occurs when the Contact's radio telephone number changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.AssistantNameChanged">
            <summary>
            Occurs when the Contact's assistant's name changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.BodyChanged">
            <summary>
            Occurs when the Contact's note text changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.CategoriesChanged">
            <summary>
            Occurs when the Contact's categories change. 
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.Email1AddressChanged">
            <summary>
            Occurs when the Contact's e-mail address changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.Email2AddressChanged">
            <summary>
            Occurs when the Contact's second e-mail address changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.Email3AddressChanged">
            <summary>
            Occurs when the Contact's third e-mail address changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.IM1AddressChanged">
            <summary>
            Occurs when the Contact's IM address changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.IM2AddressChanged">
            <summary>
            Occurs when the Contact's second IM address changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.IM3AddressChanged">
            <summary>
            Occurs when the Contact's third IM address changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.OfficeLocationChanged">
            <summary>
            Occurs when the Contact's office location changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.WebPageChanged">
            <summary>
            Occurs when the Contact's web page address changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.AccountNameChanged">
            <summary>
            Occurs when the Contact's account name changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.AnniversaryChanged">
            <summary>
            Occurs when the Contact's anniversary changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.BirthdayChanged">
            <summary>
            Occurs when the Contact's birthday changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.PictureChanged">
            <summary>
            Occurs when the Contact's picture changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.HomeAddressStreetChanged">
            <summary>
             Occurs when the Contact's home address street name changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.HomeAddressCityChanged">
            <summary>
             Occurs when the Contact's home address city name changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.HomeAddressStateChanged">
            <summary>
             Occurs when the Contact's home address state name changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.HomeAddressPostalCodeChanged">
            <summary>
            Occurs when the Contact's home address postal code changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.HomeAddressCountryChanged">
            <summary>
             Occurs when the Contact's home address country name changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.BusinessAddressStreetChanged">
            <summary>
             Occurs when the Contact's business address street name changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.BusinessAddressCityChanged">
            <summary>
             Occurs when the Contact's business address city name changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.BusinessAddressStateChanged">
            <summary>
             Occurs when the Contact's business address state name changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.BusinessAddressPostalCodeChanged">
            <summary>
            Occurs when the Contact's business address postal code changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.BusinessAddressCountryChanged">
            <summary>
             Occurs when the Contact's business address country name changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.OtherAddressStreetChanged">
            <summary>
             Occurs when the Contact's other address street name changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.OtherAddressCityChanged">
            <summary>
             Occurs when the Contact's other address city name changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.OtherAddressStateChanged">
            <summary>
             Occurs when the Contact's other address state name changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.OtherAddressPostalCodeChanged">
            <summary>
            Occurs when the Contact's other address postal code changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Contact.OtherAddressCountryChanged">
            <summary>
             Occurs when the Contact's other address country name changes.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.FirstName">
            <summary>
            Gets or sets the Contact's first name. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.MiddleName">
            <summary>
            Gets or sets the Contact's middle name. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.LastName">
            <summary>
            Gets or sets the Contact's last name. Maximum length is 1023 characters..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.Suffix">
            <summary>
            Gets or sets the Contact's name suffix. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.Title">
            <summary>
            Gets or sets the Contact's title. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.YomiFirstName">
            <summary>
            Gets or sets the Contact's first name rendered in the Japanese Yomigana phonetic system. Maximum length is 1023 characters. Attempting to get or set this property on non-Japanese products causes an exception. 
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.YomiLastName">
            <summary>
            Gets or sets the Contact's last name rendered in the Japanese Yomigana phonetic system. Maximum length is 1023 characters. Attempting to get or set this property on non-Japanese products causes an exception. 
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.FileAs">
            <summary>
            Gets or sets the filing string for the Contact. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.Nickname">
             <summary>
            gets or sets the Contact's nickname. Maximum length is 1023 characters.
             </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.CustomerId">
            <summary>
            Gets or sets the Contact's customer ID. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.GovernmentId">
            <summary>
            Gets or sets the Contact's government ID. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.Manager">
            <summary>
            Gets or sets the Contact's manager's name. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.AccountName">
            <summary>
            Gets or sets the Contact's account name. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.IM1Address">
            <summary>
            Gets or sets the Contact's first IM address. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.IM2Address">
            <summary>
            Gets or sets the Contact's second IM address. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.IM3Address">
            <summary>
            Gets or sets the Contact's third IM address. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.JobTitle">
            <summary>
            Gets or sets the Contact's job title. Maximum length is 1023 characters. 
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.CompanyName">
            <summary>
            Gets or sets the Contact's company name. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.YomiCompanyName">
            <summary>
            Gets or sets the Contact's company name rendered in the Japanese Yomigana phonetic system. Maximum length is 1023 characters. Attempting to get or set this property on non-Japanese products causes an exception. 
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.Department">
            <summary>
            Gets or sets the Contact's department name. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.OfficeLocation">
            <summary>
            Gets or sets the Contact's office location. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.Spouse">
            <summary>
            Gets or sets the Contact's spouse's name. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.Children">
            <summary>
            Gets or sets the names of Contact's children. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.BusinessTelephoneNumber">
            <summary>
            Gets or sets the Contact's business telephone. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.Business2TelephoneNumber">
            <summary>
            Gets or sets the Contact's second business telephone number. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.BusinessFaxNumber">
            <summary>
            Gets or sets the Contact's business fax number. Maximum length is 1023 characters..
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.CarTelephoneNumber">
            <summary>
            Gets or sets the Contact's car telephone number. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.CompanyTelephoneNumber">
            <summary>
            Gets or sets the Contact's company telephone number. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.HomeTelephoneNumber">
            <summary>
            Gets or sets the Contact's home telephone number. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.Home2TelephoneNumber">
            <summary>
            Gets or sets the Contact's second home telephone number. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.HomeFaxNumber">
            <summary>
            Gets or sets the Contact's home fax number. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.PagerNumber">
            <summary>
            Gets or sets the Contact's pager number. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.AssistantTelephoneNumber">
            <summary>
            Gets or sets the Contact's assistant's telephone number. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.RadioTelephoneNumber">
            <summary>
            Gets or sets the Contact's radio telephone number. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.AssistantName">
            <summary>
            Gets or sets the name of Contact's assistant. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.Body">
            <summary>
            Gets or sets the text notes for the Contact. Maximum size is 60 KB. 
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.Categories">
            <summary>
            Gets or sets the categories for Contact. Maximum length is 1023 characters.
            Categories are comma delimenated. 
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.Email1Address">
            <summary>
            Gets or sets the Contact's e-mail address. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.Email2Address">
            <summary>
            Gets or sets the Contact's second e-mail address. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.Email3Address">
            <summary>
            Gets or sets the Contact's third e-mail address. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.RingTone">
            <summary>
            Gets or sets the custom ring tone for the Contact. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.HomeAddressStreet">
            <summary>
            Gets or sets the street name in the Contact's home address.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.HomeAddressCity">
            <summary>
            Gets or sets the city name in the Contact's home address.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.HomeAddressState">
            <summary>
            Gets or sets the state name in the Contact's home address.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.HomeAddressPostalCode">
            <summary>
            Gets or sets the postal code in the Contact's home address.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.HomeAddressCountry">
            <summary>
            Gets or sets the country name in the Contact's home address.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.BusinessAddressStreet">
            <summary>
            Gets or sets the street name in the Contact's business address.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.BusinessAddressCity">
            <summary>
            Gets or sets the city name in the Contact's business address.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.BusinessAddressState">
            <summary>
            Gets or sets the state name in the Contact's business address.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.BusinessAddressPostalCode">
            <summary>
            Gets or sets the postal code in the Contact's business address.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.BusinessAddressCountry">
            <summary>
            Gets or sets the country name in the Contact's business address.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.OtherAddressStreet">
            <summary>
            Gets or sets the street name in the Contact's other address.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.OtherAddressCity">
            <summary>
            Gets or sets the city name in the Contact's other address.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.OtherAddressState">
            <summary>
            Gets or sets the state name in the Contact's other address.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.OtherAddressPostalCode">
            <summary>
            Gets or sets the postal code in the Contact's other address.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.OtherAddressCountry">
            <summary>
            Gets or sets the country name in the Contact's other address.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.Anniversary">
            <summary>
            Gets or sets the Contact's wedding anniversary date.
            The date must fall between 1/1/1900 and 12/31/2999 inclusive.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.Birthday">
            <summary>
            Gets or sets the Contact's birthdate. The birthdate must fall between 1/1/1900 and 12/31/2999 inclusive.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.MobileTelephoneNumber">
            <summary>
            Gets or sets the Contact's mobile telephone number. Maximum length is 1023 characters.
            This property also represents the SMS address.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.WebPage">
            <summary>
            Gets or sets the address of the Contact's web page. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Contact.Picture">
            <summary>
            Gets the Contact's picture. 
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.ContactCollection">
            <summary>
            Represents the collection of Contact items in a Contact folder.
            <seealso cref="T:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection"/>
            </summary>
            <example>
            The code below shows how to data bind a combo box to the list of contacts.
            In this case, the "FileAs" property will be displayed on the combo box,
            the "ItemId" property will be the property used for comboBox1.SelectedValue.
            <code>
            OutlookSession mySession = new OutlookSession();
            this.comboBox1.DataSource = this.mySession.Contacts.Items;
            this.comboBox1.DisplayMember = "FileAs";
            this.comboBox1.ValueMember = "ItemId";
            </code>
            </example>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ContactCollection.Restrict(System.String)">
            <summary>
            Creates a new ContactCollection object that contains only those Contact items that match a set of filter criteria.
            </summary>
            <param name="query">
            A string that defines which items to match.
            This string must contain a Boolean expression that evaluates to either TRUE or FALSE for any item. 
            You must enclose all property names in brackets.
            You can combine expressions with AND and OR. 
            You can use the following comparison operators &quot;&lt;, &lt;=, &gt;, &gt;=, =, &lt;&gt;&quot;
            </param>
            <remarks>
            A restriction match requires that the item include a value for the property.
            For example, if you do not set the e-mail address for a contact, the contact will
            not be found using the restriction string [Email1Address]&lt;&gt;me@microsoft.com, 
            even though the value of Email1Address is not &quot;not me@microsoft.com.&quot;
            </remarks>
            <returns>The Collection of Items matching the Restriction.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ContactCollection.Contains(Microsoft.WindowsMobile.PocketOutlook.Contact)">
            <summary>
            Gets a value indicating whether a Contact item exists in the Contact collection.
            </summary>
            <param name="value"> The Contact to be found.</param>
            <returns>True if the item is found in the Contact collection. False if not Contact.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ContactCollection.Remove(Microsoft.WindowsMobile.PocketOutlook.Contact)">
            <summary>
            Removes the specified Contact item from the Contact collection. Based on the current sort order.
            </summary>
            <param name="item">The Contact item to remove from the Contact collection.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ContactCollection.Add(Microsoft.WindowsMobile.PocketOutlook.PimItem)">
            <summary>
            Inserts a new Contact item into the Contact collection.
            </summary>
            <returns>The index position of the new Contact item in the Contact collection.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ContactCollection.CopyTo(Microsoft.WindowsMobile.PocketOutlook.Contact[],System.Int32)">
            <summary>
            Copies a ContactCollection object to an array of Contact objects, beginning at a specific array index.
            </summary>
            <param name="array">The one-dimensional destination array for the Contact items copied from the Contact collection. The array has zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">The index parameter is less than zero. </exception>
            <exception cref="T:System.ArgumentException">The index parameter is greater than or equal to the 
            length of the array parameter. Can also be thrown if the number of elements in the source 
            array is greater than the available space from index to the end of the destination array.</exception>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ContactCollection.AddNew">
            <summary>
            Creates a new Contact item, and adds it to the Contact collection.
            </summary>
            <returns>The new Contact item.</returns>
            <remarks>A NotSupportedException will be thrown by the base class if AllowNew is false.</remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ContactCollection.GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the Contact collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.ContactCollection.Item(System.Int32)">
            <summary>
            Gets the Contact from the Contact collection, with the specified index.
            </summary>
            <remarks>
            Each time you retrieve a Contact item with the indexer, you get a newly instantiated Contact item.
            </remarks>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.ContactCollection.ContactCollectionEnumerator">
            <summary>
            Represents the Contact collection enumerator. Used to iterate through the Contact collection.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ContactCollection.ContactCollectionEnumerator.#ctor(Microsoft.WindowsMobile.PocketOutlook.ContactCollection)">
            <summary>
            Initializes a new instance of the ContactCollectionEnumerator class.
            </summary>
            <param name="collection">Base collection for the enumerator.</param>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.ContactCollection.ContactCollectionEnumerator.Current">
            <summary>
            Gets the current Contact item from the Contact collection.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.ContactFolder">
            <summary>
            Defines the Contact folder. This is the container for the Contact collection.
            <seealso cref="T:Microsoft.WindowsMobile.PocketOutlook.Folder"/>
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.ContactFolder.Items">
            <summary>
            Gets the Contact collection.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.TaskProperty">
            <summary>     
            This enumeration defines the set of Task object properties.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.Body">
            <summary>         
            The text Notes of the PIM item  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.BodyInk">
            <summary>         
            The ink Notes of the PIM item  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.Categories">
            <summary>         
            A comma-separated list of the categories that apply to this item  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.Complete">
            <summary>         
            A value indicating whether the task has been completed.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.DateCompleted">
            <summary>         
            The date the task was completed.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.DoNotSynchronize">
            <summary>         
            Do not sync the item to Exchange/Outlook  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.DueDate">
            <summary>         
            The due date of the task.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.FolderCategories">
            <summary>         
            A comma-separated list of all the categories that are used in this folder  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.Importance">
            <summary>         
            The importance of the meeting. (Low=0, Normal=1, High=2)  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.IsRecurring">
            <summary>         
            A value indicating whether the appointment or task is recurring.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.Recent">
            <summary>         
            A value indicating whether this PIM item is in the "recently viewed" list  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.RecurringDayOfMonth">
            <summary>         
            The day in a month on which an item occurs, from 1 to 31.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.RecurringDayOfWeekMask">
            <summary>         
            The days of the week of the recurrence. (Sunday=1, Monday=2, Tuesday=4, etc.)  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.RecurringDuration">
            <summary>         
            The duration of the recurrence pattern.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.RecurringEndTime">
            <summary>         
            The ending date of the recurrence pattern.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.RecurringInstance">
            <summary>         
            The week of the month in which an item occurs, from one to five.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.RecurringInterval">
            <summary>         
            The length of time between occurrences.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.RecurringMonthOfYear">
            <summary>         
            The month of the year on which an item occurs, from one to twelve.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.RecurringNoEnd">
            <summary>         
            A value indicating whether the recurrence pattern has an end.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.RecurringOccurrences">
            <summary>         
            The number of occurences  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.RecurringPatternEndDate">
            <summary>         
            The ending date of the recurrence pattern.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.RecurringPatternStartDate">
            <summary>         
            The starting date of the recurrence pattern.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.RecurringRegenerating">
            <summary>         
            A value indicating whether the task recurs after it has been marked as completed.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.RecurringStartTime">
            <summary>         
            The starting time of the recurrence pattern.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.RecurringType">
            <summary>         
            The type (frequency) of recurrence:  NoRecurrence = -1, Daily = 0, Weekly = 1, Monthly = 2, MonthByNumber = 3, Yearly = 5, Every Nth Year = 6  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.ReminderOptions">
            <summary>         
            What actions to take when the reminder occurs. (LED=1, Vibrate=2, Dialog=4, Sound=8, Repeat=16)  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.ReminderSet">
            <summary>         
            A value indicating whether the user wants to be reminded of an appointment or task.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.ReminderSoundFile">
            <summary>         
            The path and file name of the sound file to play when the reminder occurs.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.ReminderTime">
            <summary>         
            When a reminder for the task will occur.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.Sensitivity">
            <summary>         
            The sensitivity (Normal = 0, Personal = 1, Private = 2,  Confidential = 3)  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.SourceId">
            <summary>         
            An integer indicating the source, or owning application, of the PIM item.  Zero is the default.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.StartDate">
            <summary>         
            The start date of the task.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.Subject">
            <summary>         
            The subject  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.TaskProperty.TeamTask">
            <summary>         
            A value indicating whether this task is a team task.  
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.ContactProperty">
            <summary>     
            This enumeration defines the set of Contact object properties.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.AccountName">
            <summary>         
            The contact's account name.   
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.AllCommunicationMethods">
            <summary>         
            All communication methods.  This property is used with the contact chooser dialog, and the WindowsMobile.Forms.ChooseContactDialog.RequiredProperties array.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.AllEmail">
            <summary>         
            All email addresses.  This property is used with the contact chooser dialog, and the WindowsMobile.Forms.ChooseContactDialog.RequiredProperties array.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.AllInstantMessaging">
            <summary>         
            All instant messaging addresses.  This property is used with the contact chooser dialog, and the WindowsMobile.Forms.ChooseContactDialog.RequiredProperties array.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.AllPhone">
            <summary>         
            All telephone numbers.  This property is used with the contact chooser dialog, and the WindowsMobile.Forms.ChooseContactDialog.RequiredProperties array.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.AllPhoneAndSIM">
            <summary>         
            All telephone and SIM numbers.  This property is used with the contact chooser dialog, and the WindowsMobile.Forms.ChooseContactDialog.RequiredProperties array.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.AllTextMessaging">
            <summary>         
            All text messaging addresses.  This property is used with the contact chooser dialog, and the WindowsMobile.Forms.ChooseContactDialog.RequiredProperties array.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.AllVoice">
            <summary>         
            All voice numbers.  This property is used with the contact chooser dialog, and the WindowsMobile.Forms.ChooseContactDialog.RequiredProperties array.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.Anniversary">
            <summary>         
            The contact's wedding anniversary date.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.AssistantName">
            <summary>         
            The name of the contact's assistant.   
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.AssistantTelephoneNumber">
            <summary>         
            The contact's assistant's telephone number.   
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.Birthday">
            <summary>         
            The contact's birthdate.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.Body">
            <summary>         
            The text Notes of the PIM item  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.BodyInk">
            <summary>         
            The ink Notes of the PIM item  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.Business2TelephoneNumber">
            <summary>         
            The contact's second business telephone number.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.BusinessAddress">
            <summary>         
            The contact's business address.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.BusinessAddressCity">
            <summary>         
            The city name in the contact's business address.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.BusinessAddressCountry">
            <summary>         
            The country name in the contact's business address.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.BusinessAddressPostalCode">
            <summary>         
            The postal code in the contact's business address.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.BusinessAddressState">
            <summary>         
            The state name in the contact's business address.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.BusinessAddressStreet">
            <summary>         
            The street name in the contact's business address.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.BusinessFaxNumber">
            <summary>         
            The contact's business fax number.   
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.BusinessTelephoneNumber">
            <summary>         
            The contact's business telephone number.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.CarTelephoneNumber">
            <summary>         
            The contact's car telephone number.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.Categories">
            <summary>         
            A comma-separated list of the categories that apply to this item  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.Children">
            <summary>         
            The names of the contact's children.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.CompanyName">
            <summary>         
            The contact's company name.   
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.CompanyTelephoneNumber">
            <summary>         
            The contact's company telephone number.   
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.ContactType">
            <summary>         
            The type of the contact (Device or SIM contact).  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.CustomerId">
            <summary>         
            The contact's customer ID.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.Department">
            <summary>         
            The contact's department name.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.DisplayName">
            <summary>         
            The contact's name as it should appear in the user interface  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.DoNotSynchronize">
            <summary>         
            Do not sync the item to Exchange/Outlook  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.Email1Address">
            <summary>         
            The contact's e-mail address.   
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.Email2Address">
            <summary>         
            The contact's second e-mail address.   
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.Email3Address">
            <summary>         
            The contact's third e-mail address.   
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.FileAs">
            <summary>         
            The filing string for the contact.   
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.FirstName">
            <summary>         
            The contact's first name.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.FolderCategories">
            <summary>         
            A comma-separated list of all the categories that are used in this folder  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.GovernmentId">
            <summary>         
            The contact's government ID.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.Home2TelephoneNumber">
            <summary>         
            The contact's second home telephone number.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.HomeAddress">
            <summary>         
            The contact's home address.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.HomeAddressCity">
            <summary>         
            The city name in the contact's home address.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.HomeAddressCountry">
            <summary>         
            The country name in the contact's home address.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.HomeAddressPostalCode">
            <summary>         
            The postal code in the contact's home address  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.HomeAddressState">
            <summary>         
            The state name in the contact's home address.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.HomeAddressStreet">
            <summary>         
            The street name in the contact's home address.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.HomeFaxNumber">
            <summary>         
            The contact's home fax number.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.HomeTelephoneNumber">
            <summary>         
            The contact's home telephone number.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.IM1Address">
            <summary>         
            The contact's Instant Messaging address.   
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.IM2Address">
            <summary>         
            The contact's second Instant Messaging address.   
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.IM3Address">
            <summary>         
            The contact's third Instant Messaging address.   
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.JobTitle">
            <summary>         
            The contact's job title.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.LastName">
            <summary>         
            The contact's last name.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.Manager">
            <summary>         
            The contact's manager's name.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.MiddleName">
            <summary>         
            The contact's middle name.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.Mms">
            <summary>         
            The contact's MMS address.   
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.MobileTelephoneNumber">
            <summary>         
            The contact's mobile telephone number.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.Nickname">
            <summary>         
            The contact's nickname.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.OfficeLocation">
            <summary>         
            The contact's office location.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.OtherAddress">
            <summary>         
            The contact's other address.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.OtherAddressCity">
            <summary>         
            The city name in the contact's other address.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.OtherAddressCountry">
            <summary>         
            The country name in the contact's other address.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.OtherAddressPostalCode">
            <summary>         
            The postal code in the contact's other address  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.OtherAddressState">
            <summary>         
            The state name in the contact's other address.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.OtherAddressStreet">
            <summary>         
            The street name in the contact's other address.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.PagerNumber">
            <summary>         
            The contact's pager number.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.Picture">
            <summary>         
            The contact's picture.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.RadioTelephoneNumber">
            <summary>         
            The contact's radio telephone number.   
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.Recent">
            <summary>         
            A value indicating whether this PIM item is in the "recently viewed" list  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.RingTone">
            <summary>         
            The custom ring tone for the contact.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.SIMPhone">
            <summary>         
            The contact's telephone number stored on the telephone's SIM card.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.SmartProperty">
            <summary>         
            The property id of the property that is used as the primary communication method for the contact.   
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.Sms">
            <summary>         
            The contact's SMS address.   
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.SourceId">
            <summary>         
            An integer indicating the source, or owning application, of the PIM item.  Zero is the default.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.Spouse">
            <summary>         
            The contact's spouse's name.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.Suffix">
            <summary>         
            The contact's name suffix.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.Title">
            <summary>         
            The contact's title.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.WebPage">
            <summary>         
            The address of the contact's web page.   
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.YomiCompanyName">
            <summary>         
            The contact's company name rendered in the Japanese Yomigana phonetic system.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.YomiFileAs">
            <summary>         
            The contact's filing string rendered in the Japanese Yomigana phonetic system.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.YomiFirstName">
            <summary>         
            The contact's first name rendered in the Japanese Yomigana phonetic system.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.ContactProperty.YomiLastName">
            <summary>         
            The contact's last name rendered in the Japanese Yomigana phonetic system.  
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty">
            <summary>     
            This enumeration defines the set of Appointment object properties.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.AllDayEvent">
            <summary>         
            A value indicating whether an appointment occurs as an all day event.    
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.AttendeesCriticalChange">
            <summary>         
            A timestamp indicating that a meeting attendee wants to update the meeting request. Required when sending an updated meeting request back to the meeting owner.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.Body">
            <summary>         
            The text Notes of the PIM item  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.BodyInk">
            <summary>         
            The ink Notes of the PIM item  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.BusyStatus">
            <summary>         
            A contact's availability in the time period spanned by an appointment (Free = 0, Tentative = 1, Busy = 2, OutOfOffice = 3)  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.Categories">
            <summary>         
            A comma-separated list of the categories that apply to this item  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.DoNotSynchronize">
            <summary>         
            Do not sync the item to Exchange/Outlook  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.Duration">
            <summary>         
            The length of an appointment in minutes.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.End">
            <summary>         
            The end time of an appointment.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.FolderCategories">
            <summary>         
            A comma-separated list of all the categories that are used in this folder  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.GlobalObjectId">
            <summary>         
            A unique identifier for the appointment  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.IsRecurring">
            <summary>         
            A value indicating whether the appointment or task is recurring.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.Location">
            <summary>         
            The location of an appointment.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.MeetingOrganizerName">
            <summary>         
            The name of the person who organized the meeting.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.MeetingOwnerCriticalChange">
            <summary>         
            A timestamp indicating that the meeting owner wants to update the meeting request. Required when sending an updated meeting request to attendees. Call Appointment.Update on the appointment before setting either MeetingOwnerCriticalChange or AttendeesCriticalChange.   
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.MeetingStatus">
            <summary>         
            A value indicating whether an appointment is a meeting. (NotMeeting = 0, Meeting = 1, MeetingAccepted=3, MeetingCanceled=7)  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.Recent">
            <summary>         
            A value indicating whether this PIM item is in the "recently viewed" list  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.RecurringDayOfMonth">
            <summary>         
            The day in a month on which an item occurs, from 1 to 31.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.RecurringDayOfWeekMask">
            <summary>         
            The days of the week of the recurrence. (Sunday=1, Monday=2, Tuesday=4, etc.)  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.RecurringDuration">
            <summary>         
            The duration of the recurrence pattern.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.RecurringEndTime">
            <summary>         
            The ending date of the recurrence pattern.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.RecurringInstance">
            <summary>         
            The week of the month in which an item occurs, from one to five.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.RecurringInterval">
            <summary>         
            The length of time between occurrences.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.RecurringMonthOfYear">
            <summary>         
            The month of the year on which an item occurs, from one to twelve.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.RecurringNoEnd">
            <summary>         
            A value indicating whether the recurrence pattern has an end.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.RecurringOccurrences">
            <summary>         
            The number of occurences  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.RecurringPatternEndDate">
            <summary>         
            The ending date of the recurrence pattern.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.RecurringPatternStartDate">
            <summary>         
            The starting date of the recurrence pattern.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.RecurringStartTime">
            <summary>         
            The starting time of the recurrence pattern.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.RecurringTimeZone">
            <summary>         
            The timezone of the appointment as a TIME_ZONE_INFORMATION structure  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.RecurringType">
            <summary>         
            The type (frequency) of recurrence:  NoRecurrence = -1, Daily = 0, Weekly = 1, Monthly = 2, MonthByNumber = 3, Yearly = 5, Every Nth Year = 6  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.ReminderMinutesBeforeStart">
            <summary>         
            The number of minutes a reminder alarm occurs before the start of an appointment.   
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.ReminderOptions">
            <summary>         
            What actions to take when the reminder occurs. (LED=1, Vibrate=2, Dialog=4, Sound=8, Repeat=16)  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.ReminderSet">
            <summary>         
            A value indicating whether the user wants to be reminded of an appointment or task.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.ReminderSoundFile">
            <summary>         
            The path and file name of the sound file to play when the reminder occurs.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.Sensitivity">
            <summary>         
            The sensitivity (Normal = 0, Personal = 1, Private = 2,  Confidential = 3)  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.SourceId">
            <summary>         
            An integer indicating the source, or owning application, of the PIM item.  Zero is the default.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.Start">
            <summary>         
            The start time of an appointment.  
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty.Subject">
            <summary>         
            The subject  
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.EmailAccount">
            <summary>
            Represents a Pocket Outlook e-mail account.
            </summary>
            <remarks>
            One EMailAccount object is instantiated for each e-mail account on the mobile device. An EMailAccount object has a Name property and an associated Transport property. You can use an EMailAccount object's Send method to send e-mail messages.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.EmailAccount.Send(Microsoft.WindowsMobile.PocketOutlook.EmailMessage)">
            <summary>
            Sends a message using the e-mail account.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.EmailAccount.#ctor(System.IntPtr,Microsoft.WindowsMobile.PocketOutlook.ItemId,Microsoft.WindowsMobile.PocketOutlook.MailStore)">
            <summary>
            Constructor for an email message.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.EmailAccount.ThrowExceptionIfNotValid">
            <summary>
            Throws an exception if the COM object that represents the Email account is not valid anymore.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.EmailAccount.Dispose(System.Boolean)">
            <summary>
            Disposes the Email Account.
            </summary>
            <overload>
            Disposes the Email Account.
            </overload>
            <param name="disposing">true if called from Dispose(), otherwise false.</param>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.EmailAccount.Transport">
            <summary>
            Gets the name of the transport used for this account ("IMAP", "POP", "ActiveSync", etc.)
            </summary>
            <exception cref="T:System.NullReferenceException">Thrown if the transport name does not exist.</exception>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.EmailAccount.Drafts">
            <summary>
            Gets the Drafts folder.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.EmailAccountCollection">
            <summary>
            Defines the set of all e-mail accounts that are currently configured on the mobile device.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.EmailAccountCollection.Finalize">
            <summary>
            Finalizer for the EmailAccountCollection class.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.EmailAccountCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the e-mail account objects to an array, beginning at a specific array index.
            </summary>
            <param name="array">Array to copy accounts to.</param>
            <param name="index">The array index of the first account.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.EmailAccountCollection.CopyTo(Microsoft.WindowsMobile.PocketOutlook.EmailAccount[],System.Int32)">
            <summary>
            Copies an EMailAccountCollection object to an array of EMailAccount objects, beginning at a specific array index.
            </summary>
            <param name="array">The one-dimensional destination Array. 
            The Array must have zero-based indexing.</param>
            <param name="index">The array index of the first account.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.EmailAccountCollection.GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the account collection.
            </summary>
            <returns>An enumerator for the account collection.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.EmailAccountCollection.Dispose">
            <summary>
            Disposes the account collection.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.EmailAccountCollection.Dispose(System.Boolean)">
            <summary>
            Disposes the Email Account Collection.
            </summary>
            <param name="disposing">true if called from Dispose(), otherwise false.</param>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.EmailAccountCollection.Item(System.String)">
            <summary>
            Gets an email account that matches the specified name.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.EmailAccountCollection.Item(System.Int32)">
            <summary>
            Gets an email account at the specified index into the e-mail account collection.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.EmailAccountCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the e-mail account collection is thread-safe.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.EmailAccountCollection.Count">
            <summary>
            Gets the number of accounts in the e-mail account collection.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.EmailAccountCollection.SyncRoot">
            <summary>
            Not supported.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.EmailAccountCollectionEnumerator">
            <summary>
            Initializes a new instance of the EmailAccountCollectionEnumerator class.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.EmailAccountCollectionEnumerator.Reset">
            <summary>
            Resets the e-mail account collection enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.EmailAccountCollectionEnumerator.MoveNext">
            <summary>
            Moves the enumerator's index pointer to the next position.
            </summary>
            <returns>True if the collection does not need to be Reset; otherwise false.</returns>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.EmailAccountCollectionEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current e-mail account from the enumerator.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.EmailAccountCollectionEnumerator.Current">
            <summary>
            Gets the current e-mail account from the enumerator 
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.EmailMessage">
            <summary>
            Represents an e-mail message. The EMailMessage class inherits from the Message class.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.Message">
            <summary>
            Defines the Item ID and the Recipient, as well as the opening and creation methods for e-mail and text messages.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Message.#ctor">
            <summary>
             This constructs a message that has no native object and has not been sent yet.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Message.#ctor(Microsoft.WindowsMobile.PocketOutlook.ItemId)">
            <summary>
            Creates a managed message object based on an ItemId.
            </summary>
            <param name="itemId"></param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Message.CreateNativeMessage(System.IntPtr)">
            <summary>
            This function will associate a new Id with a message.
            </summary>
            <param name="mapiFolderPointer">A pointer to the folder that contains this message.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Message.OpenNativeMessage">
            <summary>
            Opens the native message. (that has the Id assigned by CreateNativeMessage).
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Message.CacheProperties">
            <summary>
            Caches the general message properties.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Message.SavePropertiesToNativeObject">
            <summary>
            Saves the properties to the native object.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Message.CloseNativeMessage">
            <summary>
            Close the native message.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Message.RemoveId">
            <summary>
            Removes the id 
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Message.Finalize">
            <summary>
            Overridden. Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. 
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Message.ItemId">
            <summary>
            Gets the the message’s Item ID.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Message.From">
            <summary>
            Gets the Recipient who sent the message.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Message.Read">
            <summary>
            Gets or sets the read state of the message.
            </summary>
            <value>True if the message has been read.</value>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Message.Received">
            <summary>
            Gets the date that the message was received.
            </summary>
            <remarks>
            Returns a DateTime object if the message was received, and NULL if it was not (that is, if it was just created).
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Message.LastModified">
            <summary>
            Gets the date the message was sent.
            </summary>
            <remarks>
            Returns NULL if the message has just been created, but neither sent nor saved.
            </remarks>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.Message.CreationType">
            <summary>
            Enumeration that will be used if we want to place restrictions on the operations
            that can be made according to the way a message was intercepted.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.Message.CreationType.New">
            <summary>
            Created using Message()
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.Message.CreationType.FromItemId">
            <summary>
            Created using Message(ItemId id)
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.EmailMessage.#ctor">
            <summary>
            Initializes a new instance of the EmailMessage class. 
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.EmailMessage.#ctor(Microsoft.WindowsMobile.PocketOutlook.ItemId)">
            <summary>
            Constructs a managed sms message object based on an existing native object.
            This function is used only for debugging purposes.
            </summary>        
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.EmailMessage.Send(Microsoft.WindowsMobile.PocketOutlook.EmailAccount)">
            <summary>
            Sends an email message for the specified e-mail account. 
            </summary>
            <remarks>
            The message will be ready to be sent the next time the device sends messages.
            Depending on the account configuration, the message might not be sent immediately.
            </remarks>
            <param name="account">The account object to use when sending the message</param>
            <exception cref="T:Microsoft.WindowsMobile.PocketOutlook.PocketOutlookException">Thrown when the message was not constructed through the new EmailMessage() constructor.</exception>
            <exception cref="T:Microsoft.WindowsMobile.PocketOutlook.PocketOutlookException">Thrown when there is an error attaching files to the message to be sent.</exception>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.EmailMessage.Send(System.String)">
            <summary>
            Sends an email message for the specified e-mail account, using the name of the account.
            </summary>
            <remarks>
            The message will be ready to be sent the next time the device sends messages.
            Depending on the account configuration, the message might not be sent immediately. 
            </remarks>
            <param name="accountName">The name of the account to use when sending the message</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.EmailMessage.SyncRecipients">
            <summary>
            This function will copy the managed cached recipients to the native IMessage object. 
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.EmailMessage.DefaultInitializer">
            <summary>
            Sets properties that are common to all email messages and sets the message to be valid.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.EmailMessage.To">
            <summary>
            Gets the collection of primary recipients (those addressed in the To: line) for the e-mail message.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.EmailMessage.CC">
            <summary>
            Gets the collection of carbon-copied recipients for the e-mail message.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.EmailMessage.Bcc">
            <summary>
            Gets the collection of blind carbon-copied recipients for the e-mail message.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.EmailMessage.Subject">
            <summary>
            Gets the message subject.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.EmailMessage.BodyText">
            <summary>
            Gets the message text body.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.EmailMessage.Attachments">
            <summary>
            Gets the message's collection of attachments.
            </summary>        
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.EmailMessage.Importance">
            <summary>
            Gets or sets the importance level for the message.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.EmailMessage.Sensitivity">
            <summary>
            Gets or sets the sensitivity level assigned to the message. The default value is Normal. 
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.EmailMessageFolder">
            <summary>
            Message folder is a folder containing email messages (message collection) and
            sub folders (messagefoldercollection) 
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.EmailMessageFolder.ThrowExceptionIfNotValid">
            <summary>
            Throws an exception if the COM object that represents the message folder is not valid anymore.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.EmailMessageFolder.IsValid">
            <summary>
            IsValid will return true if the current account can be used.
            It will return false if the account has beed deleted or is no longer valid.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.ItemId">
            <summary>
            Defines the Item ID, which is used to uniquely identify PIM and Messaging items.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ItemId.#ctor">
            <summary>
            The default ItemId Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ItemId.#ctor(System.IntPtr)">
            <summary>
            The ItemId constructor.
            </summary>
            <param name="itemPointer"> a pointer to the natively allocated POOM Entry ID.</param>        
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ItemId.#ctor(System.IntPtr,System.UInt32)">
            <summary>
            The ItemId constructor.
            </summary>
            <param name="structPointer"> a pointer to the natively allocated MAPI CEENTRYID.</param>
            <param name="size">The size of the structure.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ItemId.Finalize">
            <summary>
            Overridden. Allows an ItemID object to attempt to free resources and perform other cleanup operations before being reclaimed by garbage collection.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ItemId.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the ItemId class that references the specified Item ID.
            </summary>
            <param name="id">Object ID</param>
            <remarks>If a user passes in an invalid OID, they will receive an ArgumentException.</remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ItemId.op_Equality(Microsoft.WindowsMobile.PocketOutlook.ItemId,Microsoft.WindowsMobile.PocketOutlook.ItemId)">
            <summary>
            Defines the comparison operator overload for the ItemId class.
            </summary>
            <param name="x">The first ItemId to be compared.</param>
            <param name="y">The second ItemId to be compared.</param>
            <returns>TRUE if the two ItemIds are equal. FALSE if the ItemIds are not equal.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ItemId.op_Inequality(Microsoft.WindowsMobile.PocketOutlook.ItemId,Microsoft.WindowsMobile.PocketOutlook.ItemId)">
            <summary>
            Defines the inverse comparison operator overload for the ItemId class. 
            </summary>
            <param name="x">The first ItemId to be compared.</param>
            <param name="y">The second ItemId to be compared.</param>
            <returns>TRUE if the two ItemIds are not equal. TRUE if the ItemIds are equal.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ItemId.ToString">
            <summary>
            Returns the item’s object identifier (OID) as a string.
            </summary>
            <returns>
            The string form of the item’s object identifier (OID).
            </returns>
            <remarks>
            Defines the ToString method override for the ItemId class. 
            The value returned by <b>ItemId::ToString</b> is the string equivalent 
            of the value returned by the native Pocket Outlook Object Model API method <b>IItem::get_Oid</b>.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ItemId.Equals(System.Object)">
            <summary>
            Defines the equals operator overload for the ItemId class.
            </summary>
            <returns>TRUE if the ItemId equals. FALSE if the ItemId doesn't equal</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ItemId.CompareTo(System.Object)">
            <summary>
            Compares this Item Id with another one.
            </summary>.
            <param name="obj">The object to compare</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ItemId.GetHashCode">
            <summary>
            Gets the Item ID’s hash code.        
            </summary>
            <returns>Returns a hash code.</returns>
            <remarks>This method can be used to hash algorithms and data structures like a hash table.</remarks>        
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ItemId.Dispose">
            <summary>
            Disposes the Item ID.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ItemId.Copy">
            <summary>
            Creates a copy of the Item ID.
            </summary>
            <returns>A copy of the Item ID.</returns>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.ItemId.IDType">
            <summary>
            Needed to identify the type of entry id. NativelyItemIds will refer to both POOM IDs and Managed MAPI IDs.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.PimItemPtrCache">
            <summary>
            This object will be used by the PoomStore object to cache the IItem COM pointers
            that have been used most recently. This is a fixed size cache. When a given pointer
            gets removed from the cache it is also Released on the native side.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemPtrCache.#ctor">
            <summary>
            Constructor of the PimItem pointer Cache.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemPtrCache.GetItemPtrFromCache(Microsoft.WindowsMobile.PocketOutlook.ItemId)">
            <summary>
            Returns a pointer to the the native Item object.
            This function checks if the pointer is cached before requesting for it
            on the native side.
            </summary>
            <param name="itemId">id of PimItem object.</param>
            <returns>The native pointer to the PimItem.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemPtrCache.GetItemPtrFromNativeSide(Microsoft.WindowsMobile.PocketOutlook.ItemId)">
            <summary>
            Returns a pointer to the the native Item object.
            This function P-Invokes through the DoGetItemFromOid function.
            </summary>
            <param name="itemId">id of PimItem object.</param>
            <returns>The native pointer to the PimItem.</returns>
            <exception cref="T:Microsoft.WindowsMobile.PocketOutlook.PocketOutlookException">Thrown when there is an error getting the PimItem type.</exception>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemPtrCache.AddItemPtrToCache(Microsoft.WindowsMobile.PocketOutlook.ItemId,System.IntPtr)">
            <summary>
            Adds a native pointer to the cache based on the objects id.
            </summary>
            <param name="itemId">id of PimItem object.</param>
            <param name="newItemPtr">The native pointer to the PimItem.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemPtrCache.CleanCache">
            <summary>
            Releases the COM pointers that have been cached.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimItemPtrCache.ComputeHashPosition(Microsoft.WindowsMobile.PocketOutlook.ItemId)">
            <summary>
            Computes the position in the cache where the item's information should be stored.
            </summary>
            <param name="itemId">PimItems Id</param>
            <returns> Returns the position in the cache where the items have been stored.</returns>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.PimItemPtrCache.CacheEntry">
            <summary>
            CacheEntry structure. A row of information in the cache.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.PoomStore">
            <summary>
            This object represents the main POOM object.
            </summary>
            <remarks>
            As the root object to POOM data, it provides access to all other objects in the Pocket Outlook hierarchy.
            It provides direct access to newly created items through CreateItem, without having to traverse the object hierarchy
               Provides direct access to existing items through GetItem
               </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PoomStore.#ctor">
            <summary>
            Creates an PoomStore Obect
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PoomStore.Finalize">
            <summary>
            PoomStore deconstructor
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PoomStore.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PoomStore.Contacts">
            <summary>
            gets the Contact Folder object 
            </summary>
            <returns>The Contact Folder Object</returns>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PoomStore.Appointments">
            <summary>
            gets the Calendar Folder object 
            </summary>
            <returns>The Calendar Folder Object</returns>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PoomStore.Tasks">
            <summary>
            gets the Tasks Folder object
            </summary>
            <returns>The Tasks Folder Object</returns>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.MailStore">
            <summary>
            This is the main entry point for anything that has to do with MAPI.
            It contains a list email accounts, an sms account and an mms account.    
            </summary>    
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MailStore.#ctor">
            <summary>
            Constructor for a mail store
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.MailStore.EmailAccounts">
            <summary>
            A collection of email accounts.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.MailStore.SmsAccount">
            <summary>
            The SMS account.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.MapiChangeEventArgs">
            <summary>
            Event Args used for MAPI Notifications.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.ChangedEventHandler">
            <summary>
            Event Handler delegate used for MAPI notifications.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MAPIUtilities.ConcatenateRecipients(Microsoft.WindowsMobile.PocketOutlook.RecipientCollection,System.String@,System.String@)">
            <summary>
            Concatenates the names and addresses of recipients on semicolon separated strings. This is the way we pass the data to the native side.
            </summary>
            <param name="recipientCollection">The recipient collection where the values are cached.</param>
            <param name="recipientNames">Returns the string of semicolon separated names.</param>
            <param name="recipientAddresses">Returns the string of semicolon separated addresses.</param>
            <returns>number of recipients of the returned strings.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MAPIUtilities.OpenMessage(Microsoft.WindowsMobile.PocketOutlook.ItemId)">
            <summary>
            Opens a message given the entry Id.
            </summary>
            <param name="id">Item ID of message</param>
            <returns>The Message that corresponds to the id.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MAPIUtilities.DisposeObject(System.IDisposable)">
            <summary>
            This function checks if the pointer is null before calling Dispose on it.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MAPIUtilities.ThrowCorrectSmsException(System.Int32)">
            <summary>
            Throws the correct type of SmsException based on the error code passed in.
            </summary>
            <param name="errorCode">The returned error code.</param>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.MAPIUtilities.ReferenceCount">
            <summary>
            Checks the number of references that use the MailStore. The MailStore will not do a LogOff unless the ReferenceCount is 0.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.SmsException">
             <summary>
             The exception that is thrown after a failed attempt to send an SMS message (that is, whenever the function <b>SmsMessage.Send</b> fails).
             </summary>
            <remarks>
             An <b>SmsException</b> exception object contains two pieces of information: an error code and an associated error string. The following list contains all of the possible sets of values:
             <list type="bullet">
             <item><description><b>SMS_E_TOOMUCHDATA</b>: This message contains too much text.</description></item>
             <item><description><b>SMS_E_INVALIDDATA</b>: The body of this SMS message contains the wrong type of information.</description></item>
             <item><description><b>SMS_E_PROVIDERSPECIFICBUFFERWRONGSIZE</b>: The provider-specific buffer is the wrong size.</description></item>
             <item><description><b>SMS_E_MSGBARREDBYOPERATOR</b>: Message call barring has been configured by the mobile operator.</description></item>
             <item><description><b>SMS_E_MSGCALLBARRED</b>: Message call barring has been configured on this mobile device.</description></item>
             <item><description><b>SMS_E_SVCNOTSUBSCRIBED</b>: You do not have a subscription to this messaging service.</description></item>
             <item><description><b>SMS_E_UNIDENTIFIEDSUBCRIBER</b>: Your mobile device ID (telephone number) is not registered with this messaging service.</description></item>
             </list>
             </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.SmsException.#ctor(System.Int32,System.String)">
            <summary>
             Initializes a new instance of the SmsException class, using an error code and an error message.
            </summary>
            <param name="errorCode">A win32 exception error code.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.SmsException.#ctor">
            <summary>
             Initializes a new instance of the SmsException class. This is the default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.SmsException.#ctor(System.String)">
            <summary>
             Initializes a new instance of the SmsException class, using an error message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.SmsException.#ctor(System.String,System.Exception)">
            <summary>
             Initializes a new instance of the SmsException class, using an error message and an inner exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.InvalidSmsRecipientException">
            <summary>
            The exception that is thrown when the Recipient address for the SMS message is invalid.
            </summary>
            <remarks>
            This type of exception is thrown with the following error codes and strings:
            <list type="bullet">
            <item><description><b>SMS_E_INVALIDADDRESS</b>: The destination address is invalid.</description></item>
            <item><description><b>SMS_E_UNASSIGNEDNUMBER</b>: The destination address is currently an unassigned phone number.</description></item>
            <item><description><b>SMS_E_DESTINATIONOUTOFSVC</b>: The message could not be delievered because the destination equipment is out of service.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.InvalidSmsRecipientException.#ctor(System.Int32,System.String)">
            <summary>
             Initializes a new instance of the InvalidSmsRecipientException class, using an error code and an error message.
            </summary>
            <param name="errorCode">A win32 exception error code.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.InvalidSmsRecipientException.#ctor">
            <summary>
            Initializes a new instance of the InvalidSmsRecipientException class. This is the default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.InvalidSmsRecipientException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the InvalidSmsRecipientException class, using an error message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.InvalidSmsRecipientException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the InvalidSmsRecipientException class, using an error message and an inner exception.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.ServiceCenterException">
            <summary>
            The exception that is thrown when an SMSC error occurs while sending the SMS message.
            </summary>
            <remarks>
            This exception is thrown with the following error codes and strings:
            <list type="bullet">
            <item><description><b>SMS_E_UNKNOWNSCADDRESS</b>: The SMSC address is unknown. Verify that the SMSC address is correct, then try again.</description></item>
            <item><description><b>SMS_E_NOSCSUBSCRIPTION</b>: There is no message service center subscription.</description></item>
            <item><description><b>SMS_E_SCBUSY</b>: The message service center is busy.</description></item>
            <item><description><b>SMS_E_TIMEUNAVAILABLE</b>: The SMSC time stamp is currently unavailable.</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ServiceCenterException.#ctor(System.Int32,System.String)">
            <summary>
             Initializes a new instance of the ServiceCenterException class, using an error code and an error message.
            </summary>
            <param name="errorCode">A win32 exception error code</param>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ServiceCenterException.#ctor">
            <summary>
             Initializes a new instance of the ServiceCenterException class. This is the default constructor.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ServiceCenterException.#ctor(System.String)">
            <summary>
             Initializes a new instance of the ServiceCenterException class, using an error message.
            </summary>
            <param name="message">The message of the exception.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.ServiceCenterException.#ctor(System.String,System.Exception)">
            <summary>
             Initializes a new instance of the ServiceCenterException class, using an error message and an inner exception.
            </summary>
            <param name="message">The message of the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageProperty">
            <summary>
            Specifies a Message property.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageProperty.Body">
            <summary>
            The Message’s text notes.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageProperty.MessageClass">
            <summary>
            The Message’s transport type (for example, SMS). 
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageProperty.Sender">
            <summary>
            The person who sent the message.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageProperty.Subject">
            <summary>
            The Message’s subject.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageCondition">
            <summary>
            A condition statement on a message
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageCondition.#ctor">
            <summary>
            Initializes a new instance of the <b>MessageCondition</b> class.
            </summary>
            <remarks>
            The default constructor. The message property to test is <b>Body</b>, the comparison type is <b>Equal</b>, and is search is case sensitive.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageCondition.#ctor(Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageProperty,System.String)">
            <summary>
            Initializes a new instance of the <b>MessageCondition</b> class; using the specified message property and comparison value. The comparison type is <b>Equal</b>, and the match is case sensitive.
            </summary>
            <param name="property">The message property to test.</param>
            <param name="comparisonValue">The search string containing the match criteria.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageCondition.#ctor(Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageProperty,Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessagePropertyComparisonType,System.String)">
            <summary>
            Initializes a new instance of the <b>MessageCondition</b> class; using the specified message property, comparison value, and comparison type. The match is case sensitive.
            </summary>
            <param name="property">The message property to match.</param>
            <param name="comparisonValue">The search string containing the match criteria.</param>
            <param name="comparisonType">The kind of comparison (e.g., equals, contains, etc.).</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageCondition.#ctor(Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageProperty,Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessagePropertyComparisonType,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <b>MessageCondition</b> class; using the specified message property, comparison value, comparison type, and <b>CaseSensitive</b> value.
            </summary>
            <param name="property">The message property to match.</param>
            <param name="comparisonValue">The search string containing the match criteria.</param>
            <param name="comparisonType">The kind of comparison (e.g., equals, contains, etc.).</param>
            <param name="caseSensitive">Whether the comparison uses a case sensitive match.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageCondition.Register(System.IntPtr)">
            <summary>
            This method does the actual registration for this object
            </summary>
            <param name="key">key to register under</param>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageCondition.Property">
            <summary>
            Gets and sets the message property to match with the filter criteria (the comparison value and comparison type).
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessagePropertyComparisonType">
            <summary>
            Specifies the ways that you can match message property values with filter criteria used for SMS message interception.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessagePropertyComparisonType.Equal">
            <summary>
            The property value is an exact match.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessagePropertyComparisonType.NotEqual">
            <summary>
            The property value does not match.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessagePropertyComparisonType.Contains">
            <summary>
            Part of the property value contains the filter criteria.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessagePropertyComparisonType.StartsWith">
            <summary>
            The property value not only contains the filter criteria, it begins with it. 
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessagePropertyComparisonType.EndsWith">
            <summary>
            The property value not only contains the filter criteria, it finishes with it. 
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.InterceptionAction">
            <summary>
            Specifies how Pocket Outlook notifies the interception application that an intercepted message has arrived.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.InterceptionAction.Notify">
            <summary>
            Notifies the interception application that an intercepted message has arrived, creates a copy of that message for it to process, then immediately notifies the next interception application that the original intercepted messages has arrived.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.InterceptionAction.NotifyAndDelete">
            <summary>
            Notifies the interception application that an intercepted message has arrived. When this application has finished processing the message, Pocket Outlook deletes the original message.<para><b>Note</b>: Any other interception application that has not already intercepted this message, will not.</para>
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptorEventHandler">
            <summary>
            Represents the method that will handle the <b>MessageReceived</b> event.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptorEventArgs">
            <summary>
            Defines the message data for the <b>MessageReceived</b> event. 
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptorEventArgs.Message">
            <summary>
            Gets the Message that caused the event.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor">
            <summary>
            Raises an event when an arriving SMS message satisfies the interception rule condition. 
            </summary>
            <remarks>
            When defining an instance of MessageInterceptor that is going to handle the MessageReceived
            event, make sure that the instance is defined globally in the class where the event will be handled.
            If it is defined in a method, it will be up for garbage collection after it goes out of scope. 
            <code>
            public class InterceptorClass
            {
                MessageInterceptor interceptor; // defined globally to class
                private void Form1_Load(object sender, EventArgs e)
                {
                    // MessageInterceptor interceptor;  // This instance will go out of scope if defined here
                    
                    interceptor = new MessageInterceptor(ruleName);
                    interceptor.MessageReceived += new MessageInterceptorEventHandler(interceptor_MessageReceived);
                }
            }
            </code>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.VerifyRuleNotRegistered">
            <summary>
            Throws a PocketOutlookException if VerifyRuleNotRegistered is called after 
            calling EnableApplicationLauncher or after
            registering an event handler with the MessageReceived event.
            </summary>
            <exception cref="T:Microsoft.WindowsMobile.PocketOutlook.PocketOutlookException">
            Thrown if VerifyRuleNotRegistered is called after calling EnableApplicationLauncher or after
            registering an event handler with the MessageReceived event.
            </exception>        
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.#ctor">
            <summary>
            Initializes an instance of the <b>MessageInterceptor</b> class.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.#ctor(System.String)">
            <summary>
            Initializes an instance of the <b>MessageInterceptor</b> class, using the specified <b>applicationLaunchId</b>.
            </summary>
            <remarks>
            Loads an existing <b>MessageInterceptor</b>. If there is no MessageInterceptor by that name, then an <b>ApplicationLauncherEnableException</b> exception is raised.
            </remarks>
            <param name="applicationLaunchId">Unique identifier for the <b>MessageInterceptor</b>.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes an instance of the <b>MessageInterceptor</b> class, using the specified <b>applicationLaunchId</b>, and a value indicating whether to use the application's form thread to process events.
            </summary>
            <remarks>
            Loads an existing <b>MessageInterceptor</b>. If there is no MessageInterceptor by that name, then an <b>ApplicationLauncherEnableException</b> exception is raised.
            </remarks>
            <param name="applicationLaunchId">Unique identifier for the <b>MessageInterceptor</b>.</param>
            <param name="useFormThread">Use the application's form thread to process events. You need to use this to manipulate UI from within an event. If your application does not contain a form, then this should be set to <b>false</b>.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.#ctor(Microsoft.WindowsMobile.PocketOutlook.MessageInterception.InterceptionAction)">
            <summary>
            Initializes an instance of the <b>MessageInterceptor</b> class, using the specified interception action.
            </summary>
            
            <remarks>
            When you use this constructor overload to create a new instance of the <b>MessageInterceptor</b> class, 
            the associated <see cref="T:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageCondition"/> will be null.
            To work around this, create a new <b>MessageCondition</b> object in a second step.
            See the the following code example for clarification.
            </remarks>
            
            <example>
            <code>
            MessageInterceptor mi = new MessageInterceptor(InterceptionAction.Notify);
            mi.MessageCondition = new MessageCondition();
            mi.MessageCondition.ComparisonValue = "review";
            </code>
            </example>
            
            <param name="interceptionAction">What to do with the intercepted message after successful interception</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.#ctor(Microsoft.WindowsMobile.PocketOutlook.MessageInterception.InterceptionAction,System.Boolean)">
            <summary>
            Initializes an instance of the <b>MessageInterceptor</b> class, using the specified interception action, and a value indicating whether to use the application's form thread to process events.
            </summary>
            <param name="interceptionAction">What to do with the intercepted message after successful interception</param>
            <param name="useFormThread">Use the application's Form thread to process events.  You need to use 
            the application's Form thread to be able to manipulate UI from within an event.  If your application
            does not contain a form, then this should be set to false.  </param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.Finalize">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources, and performs other cleanup operations before garbage collection is performed. 
            </summary>
            <remarks>
            The <b>MessageInterceptor</b> class destructor. Disables finalization by the garbage collector by a calling <b>GC.SuppressFinalize(this)</b>. This should be called before <b>Dispose</b>, but if the client forgets to call <b>Dispose</b>, this will finalize the object. If <b>Dispose</b> was already called, then this finalizer has no effect.
            <p><b>Note</b>: For console applications, you must call <b>Dispose</b> if you do not use the form’s window thread to process events.</p>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.IsApplicationLauncherEnabled(System.String)">
            <summary>
            Get a value indicating if a message interceptor application launcher with the given identifier has already been enabled.
            </summary>
            <param name="applicationLaunchId">The ID of the message interceptor.</param>
            <returns><b>true</b> if the application launcher is enabled; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.RefreshRules">
            <summary>
            Causes Pocket Outlook to reload all of the registered interception rules.
            </summary>
            <remarks>
            When an interceptor rule is registered, it will not take affect until you call <b>RefreshRules</b>.
            <p><b>Note</b>: <b>RefreshRules</b> only needs to be called if you create a custom Boolean rule.</p>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.Unregister(System.String)">
            <summary>
            Unregisters the MessageInterceptor with the given identifier name
            </summary>
            <param name="applicationLaunchId">identifier of the MessageInterceptor to unregister</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.Register(System.IntPtr,System.String,System.String)">
            <summary>
            Rules registry looks like this
            HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Inbox\Rules\
            HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Inbox\Rules\(rule identifier)
            Command: (string) Application to launch when rule is satisfied
            Params: (string) Parameters to pass to application
            InterceptionAction: (0,1) 0: Pass message on to next listener, 1: delete message after done. 
            
            HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Inbox\Rules\(rule identifier)\AccountCondition
            @: (string) Category to match on
            CaseSensitive:(0,1) 0: case insensitive, 1: case sensitive
            Value: (string) Value to filter on
            MatchType: (0-7): Category of the match (Equal, NotEqual, Contains, StatsWith, EndsWith)
            
            HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Inbox\Rules\(rule identifier)\MessageCondition
            @: (string) Category to match on
            CaseSensitive:(0,1) 0: case insensitive, 1: case sensitive
            Value: (string) Value to filter on
            MatchType: (0-7): Category of the match (Equal, NotEqual, Contains, StatsWith, EndsWith)
            </summary>
            <param name="root">Pointer to the key that will contain the properties for this interceptor</param>
            <param name="applicationFileName">path to the application exe to launch</param>
            <param name="arguments">arguments to pass to the given application exe</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.Load(System.String)">
            <summary>
            Loads the properties for an existing Message Interceptor.
            </summary>
            <remarks>
            The application that is enabled is for the particular Application Launcher with the associated <b>applicationLaunchId</b>.
            </remarks>
            <param name="applicationLaunchId">The string value of the <b>ApplicationLaunchId</b>.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.Dispose">
            <summary>
            Disposes a <b>MessageInterceptor</b>.
            </summary>
            <remarks>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Disables finalization by the garbage collector by a calling <b>GC.SuppressFinalize(this)</b>.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.UnregisterTransient">
            <summary>
            If the Interceptor is a transient notification, it unregisters it.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.DisableApplicationLauncher">
            <summary>
            Disables an already enabled application from launching if an arriving SMS message satisfies the interception rule condition.
            <remarks>
            If your application is still running and consuming the <b>MessageReceived</b> event, then you will still receive the event. 
            </remarks>
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.EnableApplicationLauncher(System.String)">
            <summary>
            Enables your current application to be launched if it is not already running when a <b>MessageReceived</b> event is raised, using the string equivalent of the application identifier.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.EnableApplicationLauncher(System.String,System.String)">
            <summary>
            Enables the application specified in <b>applicationFileName</b> to be launched when a <b>MessageReceived</b> event is raised, using the string equivalent of the application identifier and its file name.
            </summary>
            <param name="applicationLaunchId">The string name that identifies the message interceptor.</param>
            <param name="applicationFileName">The string name of the application to launch.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.EnableApplicationLauncher(System.String,System.String,System.String)">
            <summary>
            Enables the application specified in <b>applicationFileName</b> to be launched when a <b>MessageReceived</b> event is raised, using the string equivalent of the application identifier, its file name, and any agruments it might need.
            </summary>
            <param name="applicationLaunchId">The string name that identifies the message interceptor.</param>
            <param name="applicationFileName">The string name of the application to launch.</param>
            <param name="arguments">The string arguments to pass to the application being launched.</param>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.MessageReceived">
            <summary>
            Occurs when an arriving SMS message satisfies the interception rule condition.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.ApplicationLaunchId">
            <summary>
            Gets the identifier of the intercepting application.
            </summary>
            <remarks>
            <b>Note</b>: <b>ApplicationLaunchId</b> can return <b>null</b>. When it does, it means the <b>MessageInterceptor</b> has not been setup for events yet. If so, when <b>EnableApplicationLauncher</b> is called, the value that <b>ApplicationLaunchId</b> returns will be the value set by the user.
            </remarks>        
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.ApplicationToLaunch">
            <summary>
            Gets the name of the intercepting application.
            </summary>
            <remarks>
            The application will be launched if it is not already running. If it is running, although it will not be launched, the event will still be sent to it.
            </remarks>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.ApplicationArguments">
            <summary>
            Gets any optional parameters to pass to the intercepting application.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.InterceptionAction">
            <summary>
            Gets or sets the action performed on the intercepted SMS message.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.MessageCondition">
            <summary>
            Gets or sets a value indicating the condition an arriving SMS message must satisfy to be intercepted.
            </summary>
            <exception cref="T:Microsoft.WindowsMobile.PocketOutlook.PocketOutlookException">
            Thrown if <b>MessageCondition</b> is modified after calling <b>EnableApplicationLauncher</b>, or after
            registering an event handler with the <b>MessageReceived</b> event.
            </exception>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessageInterceptor.AccountCondition">
            <summary>
            Condition on the account that needs to be satisfied for a message to be intercepted
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.MessagingApplication">
            <summary>
            Provides automation of the messaging application’s user interface.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessagingApplication.#ctor">
            <summary>
            Private empty constructor.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessagingApplication.DisplayComposeForm(Microsoft.WindowsMobile.PocketOutlook.EmailMessage)">
            <summary>
            Displays a compose form for the specified e-mail message, using the default Account.
            </summary>
            <param name="message">The message that will be displayed.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessagingApplication.DisplayComposeForm(Microsoft.WindowsMobile.PocketOutlook.SmsMessage)">
            <summary>
            Displays a compose form for the specified SMS message.
            </summary>
            <param name="message">The message that will be displayed.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessagingApplication.DisplayComposeForm(Microsoft.WindowsMobile.PocketOutlook.Account)">
            <summary>
            Displays a compose form for the specified Account.
            </summary>
            <param name="account">The account that will be used to send the message.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessagingApplication.DisplayComposeForm(Microsoft.WindowsMobile.PocketOutlook.Account,Microsoft.WindowsMobile.PocketOutlook.EmailMessage)">
            <summary>
            Displays a compose form for the specified e-mail message, using the specified Account.
            </summary>
            <param name="account">The account in which to display the message.</param>
            <param name="message">The message that will be displayed.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessagingApplication.DisplayComposeForm(System.String)">
            <summary>
            Displays a compose form for the specified Account name.
            </summary>
            <param name="accountName">The name of the account that will be used to send the message.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessagingApplication.DisplayComposeForm(System.String,System.String)">
            <summary>
            Displays a compose form for the specified Account name, along with the names of the primary Recipients.
            </summary>
            <remark>
            Unrecognized parameters are ignored.
            </remark>
            <param name="accountName">The name of the account that will be used to send the message.</param>
            <param name="toAddresses">A semi-colon separated list of the addresses to send the message to.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessagingApplication.DisplayComposeForm(System.String,System.String,System.String)">
            <summary>
            Displays a compose form for the specified Account name, along with the names of the primary Recipients, and the subject.
            </summary>
            <remark>
            Unrecognized parameters are ignored.
            </remark>
            <param name="accountName">The name of the account that will be used to send the message.</param>
            <param name="toAddresses">A semi-colon separated list of the addresses to send the message to.</param>
            <param name="subject">The subject for the message.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessagingApplication.DisplayComposeForm(System.String,System.String,System.String,System.String)">
            <summary>
            Displays a compose form for the specified Account name, along with the names of the primary Recipients, the subject, and the message body (text note).
            </summary>
            <remark>
            Unrecognized parameters are ignored.
            </remark>
            <param name="accountName">The name of the account that will be used to send the message.</param>
            <param name="toAddresses">A semi-colon separated list of the addresses to send the message to.</param>
            <param name="subject">The subject for the message.</param>
            <param name="body">The body of the message.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessagingApplication.DisplayComposeForm(System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Displays a compose form for the specified Account name, along with the names of the primary Recipients, the subject, the message body (text note), and the file names of the attachments, contained in a string Array.
            </summary>
            <remark>
            Unrecognized parameters are ignored.
            </remark>
            <param name="accountName">The name of the account that will be used to send the message.</param>
            <param name="toAddresses">A semi-colon separated list of the addresses to send the message to.</param>
            <param name="subject">The subject for the message.</param>
            <param name="body">The body of the message.</param>
            <param name="attachments">An array of filenames to attach to the message.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessagingApplication.DisplayComposeForm(System.String,System.String,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            Displays a compose form for the specified account name, along with the names of the primary Recipients, the names of the carbon-copied Recipients, the names of the blind carbon-copied Recipients, the subject, the message body (text note), and the file names of the attachments, contained in a string Array.
            </summary>
            <remark>
            Unrecognized parameters are ignored.
            </remark>
            <param name="accountName">The name of the account that will be used to send the message.</param>
            <param name="toAddresses">A semi-colon separated list of the addresses to send the message to.</param>
            <param name="ccAddresses">A semi-colon separated list of the addresses to cc the message to.</param>
            <param name="bccAddresses">A semi-colon separated list of the addresses to bcc the message to.</param>
            <param name="subject">The subject for the message.</param>
            <param name="body">The body of the message.</param>
            <param name="attachments">An array of filenames to attach to the message.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessagingApplication.SwitchToAccount(System.String)">
            <summary>
            Gives the focus to the messaging application, then switches to the Account with the supplied name.
            </summary>
            <param name="accountName">The name of the account to display.</param>
            <exception cref="T:System.ArgumentException">Thrown when the accountName could not be matched to an account in the store.</exception>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessagingApplication.SwitchToAccount(Microsoft.WindowsMobile.PocketOutlook.Account)">
            <summary>
            Gives the focus to the messaging application, then switches to the Account.
            </summary>
            <param name="account">The account to switch to.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessagingApplication.Synchronize">
            <summary>
            Synchronizes messages for the current Account.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessagingApplication.Synchronize(System.String)">
            <summary>
            Synchronizes messages for the Account with the supplied name.
            </summary>
            <param name="accountName">The name of the account to synchronize.</param>
            <exception cref="T:System.ArgumentException">Thrown when the account name could not be matched to an account in the store.</exception>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessagingApplication.Synchronize(Microsoft.WindowsMobile.PocketOutlook.Account)">
            <summary>
            Synchronizes messages for the specified Account.
            </summary>
            <param name="account">The account to synchronize.</param>
            <exception cref="T:System.ArgumentException">Thrown when the account could not be matched to an account in the store.</exception>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessagingApplication.ConcatenateAttachments(Microsoft.WindowsMobile.PocketOutlook.AttachmentCollection)">
            <summary>
            Concatenates the names and addresses of attachments into semi-colon separated strings. This is how we pass the data over to the native side.
            </summary>
            <param name="attachments">Attachment collection</param>
            <returns>string containing semicolon separated attachment names.</returns>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessagingMessageWindow">
            <summary>
            Summary description for MessagingMessageWindow.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessagingMessageWindow.Create(System.Boolean)">
            <summary>
            This will be called as a separate thread, creating a message window and setting
            up a message pump for that window
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.MessageInterception.MessagingMessageWindow.MessagePump">
            <summary>
            This will be called as a separate thread, creating a message windows and setting
            up a message pump for those windows
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.OutlookSession">
            <summary>
            Represents the Pocket Outlook application object.
            </summary>
            <remarks>
            As the root object, OutlookSession serves as the entry point into the Pocket Outlook object model.
            <para>The Pocket Outlook object model is the hierarchical set of classes that define PIM and messaging objects and their associated folders. You can access existing PIM and messaging (MAPI) objects by using the function <see>OutlookSession.GetItemByItemID</see>.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.OutlookSession.#ctor">
            <summary>
            Initializes a new instance of the OutlookSession class.
            </summary>
            <remarks>
            Creates an OutlookSession object.
            <para><b>Note</b></para>
            <para>
            The managed Pocket Outlook Object Model (POOM) does not pump window messages on its own, 
            the one exception being when the <b>OutlookSession</b> object is being disposed. 
            Therefore, it is recommended that the <b>OutlookSession</b> object be created on the form's main thread, 
            which does pump window messages.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.OutlookSession.Finalize">
            <summary>
            The OutlookSession class destructor.
            </summary>
            <remarks>
            Disposes an OutlookSession object by calling this.Dispose(false). This method overrides System.Object.Finalize.
            <para>Application code should not call this method; an object's Finalize method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the GC.SuppressFinalize method.</para>
            <para>For more information, see <see>cpconFinalizeMethodscDestructors</see>, <see>cpconCleaningUpUnmanagedResources</see>, and <see>cpconOverridingFinalizeMethod</see>.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.OutlookSession.Dispose">
            <summary>
            Disposes an OutlookSession.
            </summary>
            <overload>
            Disposes an OutlookSession.
            </overload>
            <remarks>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Disables finalization by the garbage collector by a calling GC.SuppressFinalize(this). 
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.OutlookSession.Dispose(System.Boolean)">
            <summary>
            .Net Design Guidelines Dispose Pattern.
            </summary>
            <param name="disposing">True if called from Dispose().</param>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.OutlookSession.Contacts">
            <summary>
            Gets the Contact folder, which provides access to the Contact item collection.
            </summary>
            <returns>The Contact folder object.</returns>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.OutlookSession.Appointments">
            <summary>
            Gets the Appointment (Calendar) folder, which provides access to the Appointment item collection.
            </summary>
            <returns>The Calendar folder object.</returns>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.OutlookSession.Tasks">
            <summary>
            Gets the Tasks folder, which provides access to the Task item collection.
            </summary>
            <returns>The Task folder object.</returns>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.OutlookSession.SmsAccount">
            <summary>
            Gets the SMS Account.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.OutlookSession.EmailAccounts">
            <summary>
            Gets the collection of e-mail Accounts.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.PimPropertyFlags">
            <summary>
            Specifies constants that define custom properties flags.
            </summary>
            <remarks>
            This enumeration allows a bitwise combination of its member values.
            </remarks>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.PimPropertyFlags.Indexed">
            <summary>
            A flag used to index the custom property, which enables faster searching.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.PimPropertyFlags.DoNotReplicate">
            <summary>
            A flag used to prevent the custom property from being copied when the PIM item is copied.
            </summary>
            <remarks>
            If set, prevents the custom property from being copied during a sync operation.
            </remarks>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.PimPropertySet">
            <summary>
            Defines a set of custom PIM properties.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimPropertySet.#ctor(Microsoft.WindowsMobile.PocketOutlook.PimItem)">
            <summary>
            Constructor - Only PimItem uses this constructor.
            </summary>
            <param name="parent"> PimItem sends this when creating an 
            instance of PimPropertySet</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimPropertySet.GetPropertyType(System.Type)">
            <summary>
            This is a helper method that maps the given System.Type
            to the corresponding value in the private PropertyType enum.
            </summary>
            <param name="type">Type to be mapped</param>
            <returns>The PropertyType value of the input</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimPropertySet.Contains(System.String)">
            <summary>
            Gets a value indicating whether a property with the specified name exists.
            </summary>
            <param name="propertyName">Name of the property</param>
            <returns>True if it exists, false if it does not exist</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimPropertySet.Add(System.String)">
            <summary>
            Creates a custom string property, assigning it the default PIM property flags.
            </summary>
            <remarks>
            The type of the custom property is a String.
            <para>The custom property is not indexed, and it will not be copied when the PIM item is synchronized.</para>
            </remarks>
            <param name="propertyName">Name of the custom property to create.</param>
            <returns><b>true</b> if the custom property was created; <b>false</b> if it already exists.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimPropertySet.Add(System.String,System.Type)">
            <summary>
            Creates a custom property, assigning it the default PIM property flags (property is not indexed, and is replicated on the UI).
            </summary>
            <param name="propertyName">Name of the custom property.</param>
            <param name="type">System.Type type of data.</param>
            <returns>False if the property already exists, true if it is created.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PimPropertySet.Add(System.String,System.Type,Microsoft.WindowsMobile.PocketOutlook.PimPropertyFlags)">
            <summary>
            Creates a custom property with the specified flags.
            </summary>
            <param name="propertyName">Name of the custom property.</param>
            <param name="type">Type of data of type System.Type</param>
            <param name="flags">Set one or more flags from the PimPropertyFlags enum</param>
            <returns>False if the property already exists, true if it is created</returns>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PimPropertySet.Item(Microsoft.WindowsMobile.PocketOutlook.ContactProperty)">
            <summary>
            Gets or sets a Contact property value.
            </summary>
            <remarks>
            When setting a property value, an ArgumentException will be thrown if the argument type is not supported, or if the property name exists but is of a different type than that of the argument.
            <para>
            When getting a property value, the property with the specified name is retrieved. 
            You must cast the returned object to the appropriate property type.
            If the returned object is to be casted into a value type, you must verify that the 
            returned object is not null before the casting.
            </para>
            </remarks>
            <param name="propertyName">A propertyName from the ContactProperty enumeration.</param>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PimPropertySet.Item(System.String)">
            <summary>
            Gets or sets a generic property value using the string value of the property name.
            </summary>
            <remarks>
            When setting a property value, an ArgumentException will be thrown if the argument type is not supported, or if the property name exists but is of a different type than that of the argument.
            <para>
            When getting a property value, the property with the specified name is retrieved. 
            You must cast the returned object to the appropriate property type.
            If the returned object is to be casted into a value type, you must verify that the 
            returned object is not null before the casting.
            </para>
            </remarks>
            <param name="propertyName">The String name of the property.</param>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PimPropertySet.Item(Microsoft.WindowsMobile.PocketOutlook.TaskProperty)">
            <summary>
            Gets or sets a Task property value.
            </summary>
            <remarks>
            When setting a property value, an ArgumentException will be thrown if the argument type is not supported, or if the property name exists but is of a different type than that of the argument.
            <para>
            When getting a property value, the property with the specified name is retrieved. 
            You must cast the returned object to the appropriate property type.
            If the returned object is to be casted into a value type, you must verify that the 
            returned object is not null before the casting.
            </para>
            </remarks>
            <param name="propertyName">A propertyName from the TaskProperty enumeration.</param>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.PimPropertySet.Item(Microsoft.WindowsMobile.PocketOutlook.AppointmentProperty)">
            <summary>
            Gets or sets a Appointment property value.
            </summary>
            <remarks>
            When setting a property value, an ArgumentException will be thrown if the argument type is not supported, or if the property name exists but is of a different type than that of the argument.
            <para>
            When getting a property value, the property with the specified name is retrieved. 
            You must cast the returned object to the appropriate property type.
            If the returned object is to be casted into a value type, you must verify that the 
            returned object is not null before the casting.
            </para>
            <para>
            You must call <see cref="M:Microsoft.WindowsMobile.PocketOutlook.Appointment.Update"/> on the appointment 
            before setting either 
            <b>MeetingOwnerCriticalChange</b> or <b>AttendeesCriticalChange</b>.
            </para>
            </remarks>
            <param name="propertyName">A propertyName from the AppointmentProperty Enum</param>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.PimPropertySet.PropertyType">
            <summary>
            Specifies the list of types used on the native side, along with their values.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.PimPropertySet.PropertyType.DateTime">
            <summary>
            Time values as a System.DateTime object.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.PimPropertySet.PropertyType.Blob">
            <summary>
            A Byte array.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.Recipient">
            <summary>
            Defines a Recipient for Meeting requests and MAPI messages.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Recipient.#ctor(Microsoft.WindowsMobile.PocketOutlook.RecipientCollection,System.String,System.String)">
            <summary>
            Recipient Constructor
            </summary>
            <param name="collection">The collection the recipient should be added to.</param>
            <param name="name">The name of the recipient</param>
            <param name="address">The email address of the recipient.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Recipient.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the Recipient class, using the Recipient’s name and address.
            </summary>
            
            <remarks>
            For e-mail and Meetings, the string address is a valid e-mail address.
            
            <p>For SMS, the string address is a valid SMS address.</p>
            
            <p>If the <i>name</i> parameter is either null or an empty string, 
            then a <b>Win32Exception</b> exception will be thrown when the <b>Recipient</b> object is 
            added to the Recipient Collection.</p>
            </remarks>
            
            <param name="name">The Recipient’s name.</param>
            <param name="address">The Recipient’s address.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Recipient.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Recipient class, using the Recipient’s address.
            </summary>
            
            <remarks>
            For e-mail and Meetings, the string address is a valid e-mail address.
            
            <p>For SMS, the string address is a valid SMS address.</p>
            
            <p>Do not use this constructor overload to create a Recipient for adding to an Appointment's <see cref="T:Microsoft.WindowsMobile.PocketOutlook.RecipientCollection"/>.
            Doing so will throw a <b>Win32Exception</b> exception.</p>
            </remarks>
            
            <param name="address">The address of the recipient.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Recipient.Dispose">
            <summary>
            Disposes the Recipient.
            </summary>
            <remarks>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Disables finalization by the garbage collector by a calling GC.SuppressFinalize(this).
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Recipient.Dispose(System.Boolean)">
            <summary>
            Disposes the Recipient.
            </summary>
            <param name="disposing">true if called from Dispose(), otherwise false.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Recipient.Finalize">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources, and performs other cleanup operations before garbage collection is performed.
            </summary>
            <remarks>
            Overridden.
            <para>
            Disables finalization by the garbage collector by a calling GC.SuppressFinalize(this). Should be called before the Dispose method.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Recipient.ToString">
            <summary>
            Gets the Recipient’s name and address. 
            </summary>
            <returns>The string formated 'Name Address'.</returns>
            <remarks>This is the ToString override for the Recipient class. It returns a string consisting of the Recipient’s address appended to the Recipient’s name. For example: "Steve Masters &lt;smasters@tailspintoys.com&gt;".
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Recipient.RemoveInvalidChars(System.String)">
            <summary>
            This function returns a string with no invalid characters from a string.
            </summary>
            <param name="s">String to remove characters from.</param>
            <remarks>For now we just remove semicolons.</remarks>
            <remarks>StringBuilder has better performance than using a string when a string 
            is created character by character.</remarks>
            <returns>String with no invalid characters.</returns>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Recipient.Name">
            <summary>
            Gets the Recipient’s name.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Recipient.Address">
            <summary>
            Gets the Recipient’s e-mail address (in the case of Meeting requests and e-mail messages), and the Recipient’s SMS address in the case of SMS messages.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.RecipientCollection">
            <summary>
            The collection of Recipients for Meeting requests and MAPI messages.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.RecipientCollection.Add(Microsoft.WindowsMobile.PocketOutlook.Recipient)">
            <summary>
            Adds the specified Recipient to the collection.
            </summary>
            <param name="recipient">The Recipient to add to the collection.</param>
            <returns>The Recipient added to the collection.</returns>
            <remarks>The Recipient returned is a new Recipient that is part of the collection 
            and has the same name and address as the recipient passed to <b>Add</b>.</remarks>
            <exception cref="T:System.ComponentModel.Win32Exception">
            Thrown when the collection is an appointment recipient collection
            and the recipient to add has an empty or null name.
            </exception>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.RecipientCollection.Remove(System.Int32)">
            <summary>
            Removes the Recipient from the collection, with the specified index.
            </summary>
            <param name="index">Index where to remove the recipient</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.RecipientCollection.Dispose">
            <summary>
            Disposes a RecipientCollection.
            </summary>
            <remarks>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Disables finalization by the garbage collector by calling GC.SuppressFinalize(this).
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.RecipientCollection.Finalize">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources, and performs other cleanup operations before garbage collection is performed.
            </summary>
            <remarks>
             Disables finalization by the garbage collector by a calling GC.SuppressFinalize(this). Should be called before the Dispose method.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.RecipientCollection.GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the Recipient collection.
            </summary>
            <returns>An enumerator for the Recipient collection.</returns>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.RecipientCollection.Count">
            <summary>
            Gets the number of Recipient items in the collection
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.RecipientCollection.Item(System.Int32)">
            <summary>
            Gets the Recipient from the Recipient collection, with the specified index.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.RecipientCollectionEnumerator">
            <summary>
            Defines an enumerator for iterating through Recipient collections.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.RecipientCollectionEnumerator.#ctor(Microsoft.WindowsMobile.PocketOutlook.RecipientCollection)">
            <summary>
            Initializes a new instance of the RecipientCollectionEnumerator class.
            </summary>
            <param name="collection">The collection to enumerate</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.RecipientCollectionEnumerator.Reset">
            <summary>
            Resets the enumerator.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.RecipientCollectionEnumerator.MoveNext">
            <summary>
            Indexes to the next position in the Recipient collection.
            </summary>
            <returns><b>true</b> if another Recipient exists in the collection, otherwise <b>false</b>.</returns>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.RecipientCollectionEnumerator.Current">
            <summary>
            Gets the Recipient currently pointed to by the enumerator.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.RecipientCollectionEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the generic Recipient currently pointed to by the enumerator.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.RecurrenceType">
            <summary>
            Specifies the type of recurrence pattern assigned to Tasks, Appointments, Events, and Meetings. This type indicates when and how often the item repeats.
            </summary>
            <remarks>
            When you create a recurrence pattern, you must also set its recurrence type.
            </remarks>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.RecurrenceType.NoRecurrence">
            <summary>
            There is no recurrence.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.RecurrenceType.Daily">
            <summary>
            The item recurs daily.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.RecurrenceType.Weekly">
            <summary>
            The item recurs weekly.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.RecurrenceType.Monthly">
            <summary>
            The item recurs monthly.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.RecurrenceType.MonthByNumber">
            <summary>
            The item recurs every <i>n</i> months (for example, every third month).
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.RecurrenceType.Yearly">
            <summary>
            The item recurs yearly.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.RecurrenceType.YearByNumber">
            <summary>
            The item recurs every <i>n</i> years (for example, every third year).
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.Month">
            <summary>
            Specifies the months (from 1 to 12) used in a recurrence pattern.
            </summary>
            <remarks>
            For use with Yearly recurrences only.
            <para>For example, the <b>MonthOfYear</b> property in a <b>Recurrence</b> object.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.Month.None">
            <summary>
            The item does not recur monthly.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.Month.January">
            <summary>
            The item recurs in Janurary.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.Month.February">
            <summary>
            The item recurs in Feburary.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.Month.March">
            <summary>
            The item recurs in March.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.Month.April">
            <summary>
            The item recurs in April.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.Month.May">
            <summary>
            The item recurs in May.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.Month.June">
            <summary>
            The item recurs in June.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.Month.July">
            <summary>
            The item recurs in July.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.Month.August">
            <summary>
            The item recurs in August.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.Month.September">
            <summary>
            The item recurs in September.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.Month.October">
            <summary>
            The item recurs in October.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.Month.November">
            <summary>
            The item recurs in November.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.Month.December">
            <summary>
            The item recurs in December.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.WeekOfMonth">
            <summary>
            Specifies the weeks of any month (from 1 to 5), used in a recurrence pattern.
            </summary>
            <remarks>
            Used with <b>Month::MonthByNumber</b> and <b>Month::YearByNumber</b>.
            <para><b>Note</b>: The value five is always the last week of the month, regardless of whether the calculated date actually exists.</para>
            </remarks>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.WeekOfMonth.None">
            <summary>
            The item does not recur weekly.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.WeekOfMonth.First">
            <summary>
            The item recurs in the first week of the month.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.WeekOfMonth.Second">
            <summary>
            The item recurs in the second week of the month.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.WeekOfMonth.Third">
            <summary>
            The item recurs in the third week of the month.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.WeekOfMonth.Fourth">
            <summary>
            The item recurs in the fourth week of the month.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.WeekOfMonth.Last">
            <summary>
            The item recurs in the last week of the month.
            </summary>
            <remarks>
            This is always the last week of the month, regardless of whether the calculated date actually exists.
            </remarks>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.DaysOfWeek">
            <summary>
            Specifies the days of the week used in a recurrence pattern.
            </summary>
            <remarks>
            This enumeration has a <b>FlagsAttribute</b> attribute that allows a bitwise combination of its member values.
            </remarks>
            <example> The following code example demonstrates how to set a weekly recurrence occuring every Monday and Tuesday.
            <code>
            recurrence.DaysOfWeekMask = DaysOfWeek.Monday | DaysOfWeek.Tuesday; 
            </code>
            </example>    
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.DaysOfWeek.Sunday">
            <summary>
            The item recurs daily on a Sunday. Value = 1.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.DaysOfWeek.Monday">
            <summary>
            The item recurs daily on a Monday. Value = 2.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.DaysOfWeek.Tuesday">
            <summary>
            The item recurs daily on a Tuesday. Value = 4.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.DaysOfWeek.Wednesday">
            <summary>
            The item recurs daily on a Wednesday. Value = 8.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.DaysOfWeek.Thursday">
            <summary>
            The item recurs daily on a Thursday. Value = 16.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.DaysOfWeek.Friday">
            <summary>
            The item recurs daily on a Friday. Value = 32.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.DaysOfWeek.Saturday">
            <summary>
            The item recurs daily on a Saturday. Value = 64.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.SmsAccount">
            <summary>
            Provides access to a Pocket Outlook Short Message Service (SMS) account, the account's SMS folders, and the SMS messages they contain.
            </summary>
            <remarks>
            A mobile device can have only one object instantiated from this class.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.SmsAccount.#ctor(System.IntPtr,Microsoft.WindowsMobile.PocketOutlook.ItemId,Microsoft.WindowsMobile.PocketOutlook.MailStore)">
            <summary>
            Internal constructor of an account.
            </summary>
            <param name="accountPointer">Pointer received by IMAPISession.OpenMsgStore.</param>
            <param name="accountID">Account ID.</param>
            <param name="parentStore">Reference to the MailStore that created this account.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.SmsAccount.Send(Microsoft.WindowsMobile.PocketOutlook.SmsMessage)">
            <summary>
            Sends an message using the account.
            </summary>
            <param name="message">The message to send.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.SmsAccount.Dispose(System.Boolean)">
            <summary>
            Disposes the SMS Account.
            </summary>
            <param name="disposing">true if called from Dispose(), otherwise false.</param>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.SmsAccount.Drafts">
            <summary>
            Gets the special Drafts folder.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.SmsMessage">
            <summary>
            Represents a Short Message Service (SMS) message.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.SmsMessage.#ctor">
            <summary>
            Initializes a new (empty) instance of the <b>SmsMessage</b> class.
            </summary>
            <overload>
            Initializes a new instance of the <b>SmsMessage</b> class.
            </overload>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.SmsMessage.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <b>SmsMessage</b> class, using the specified account. Creates a Recipient collection with the specified Recipient phone number, and fills-in the SMS message’s text body.
            </summary>        
            <param name="recipientPhoneNumber">The Recipient’s phone number.</param>
            <param name="message">The SMS message’s text body.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.SmsMessage.#ctor(Microsoft.WindowsMobile.PocketOutlook.ItemId)">
            <summary>
            Initializes a new instance of the <b>SmsMessage</b> class, using on an existing native object.
            </summary>        
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.SmsMessage.#ctor(Microsoft.WindowsMobile.PocketOutlook.ItemId,System.Boolean)">
            <summary>
            constructs a managed sms message object based on an existing native object.
            </summary>        
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.SmsMessage.Send">
             <summary>
             Sends the SMS message.
             </summary>
             <example> This sample shows how to send an SMS message to a mobile phone.
             <code>
             public void SmsMessageSend()
             {
                SmsMessage smsMessage = new SmsMessage();
            
                //Set the message body and recipient.
                smsMessage.Body = "Would you like to meet for lunch?";
                smsMessage.To.Add(new Recipient("John Doe", "2065550199"));
                smsMessage.RequestDeliveryReport = true;
            
                //Send the SMS message.
                smsMessage.Send();
            
                return;
             }
             </code>
             </example>
             <remarks>
             Unlike e-mail messages, which are copied to the Sent Items folder when sent, SMS messages are finalized instead.
             </remarks>
             <exception cref="T:Microsoft.WindowsMobile.PocketOutlook.ServiceCenterException">Thrown when there is a service center error sending the SMS message.</exception>
             <exception cref="T:Microsoft.WindowsMobile.PocketOutlook.InvalidSmsRecipientException">Thrown when the SMS recipient is invalid.</exception>        
             <exception cref="T:Microsoft.WindowsMobile.PocketOutlook.PocketOutlookException">Thrown when the message was created through <b>SmsMessage(ItemId id) </b>.</exception>
             <exception cref="T:System.ComponentModel.Win32Exception">Thrown when there is no support for SMS.</exception>
             <exception cref="T:Microsoft.WindowsMobile.PocketOutlook.SmsException">Thrown when there are other errors in sending the SMS message.</exception>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.SmsMessage.To">
            <summary>
            Gets the collection of recipients for the SMS message. 
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.SmsMessage.Body">
            <summary>
             Gets the SMS message’s text body.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.SmsMessage.RequestDeliveryReport">
            <summary>
            Gets and sets a value indicating whether a delivery report is requested. <b>true</b> if requested; otherwise <b>false</b>.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.SmsMessageFolder">
            <summary>
            Message folder is a folder containing sms messages (message collection) and
            sub folders (messagefoldercollection) 
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.SmsMessageFolder.Finalize">
            <summary>
            Overridden. Allows an Object to attempt to free resources and perform other cleanup operations before the Object is reclaimed by garbage collection. 
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.SmsMessageFolder.ThrowExceptionIfNotValid">
            <summary>
            Throws an exception if the COM object that represents the message folder is not valid anymore.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.SmsMessageFolder.Name">
            <summary>
            The name of the folder
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.SmsMessageFolder.IsValid">
            <summary>
            IsValid will return true if the current account can be used.
            It will return false if the account has beed deleted or is no longer valid.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.Importance">
            <summary>
            Specifies importance levels (Low, Normal, and High) for Tasks.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.Importance.Low">
            <summary>
            Marks low priority Tasks.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.Importance.Normal">
            <summary>
            Marks medium (normal) priority Tasks.
            </summary>
        </member>
        <member name="F:Microsoft.WindowsMobile.PocketOutlook.Importance.High">
            <summary>
            Marks high priority Tasks.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.Task">
            <summary>
            Defines a Task item in the Task collection. Tasks represent actionable "ToDo" items that can be prioritized (using Low, Normal, and High), delegated (by creating a Task Request, or using Assign Task), and completed (using % Complete).
            </summary>
            <remarks>
            A <b>Task</b> is a specialized <b>PimItem</b>. Use the <b>TaskCollection</b> to add and retrieve Tasks to and from the Task folder.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Task.#ctor">
            <summary>
            Initializes a new instance of the Task class, in specified Folder
            </summary>
            <remarks>
            The Task must later be added to a collection with <b>TaskCollection.Add</b>.
            </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Task.#ctor(Microsoft.WindowsMobile.PocketOutlook.ItemId)">
            <summary>
            Initializes a new instance of the Task class, using the specified item ID.
            </summary>
            <remarks>
            If the item ID does not belong to an existing Task, an <b>ArgumentException</b> exception is thrown.
            </remarks>
            <param name="itemId">Identifier of the item to be retrieved</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Task.Copy">
            <summary>
            Creates an in-memory copy of the Task.
            </summary>
            <exception cref="T:Microsoft.WindowsMobile.PocketOutlook.PocketOutlookException">Thrown when an item has not been added to the ItemCollection before calling <b>Copy</b>.</exception>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Task.Update">
            <summary>
            Updates the Task by saving its changes to the Task collection.
            </summary>
            <exception cref="T:Microsoft.WindowsMobile.PocketOutlook.PocketOutlookException">The task has not been added to a folder.</exception>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Task.Delete">
             <summary>
             Deletes a Task item by removing it from the Task collection.
             </summary>
            
             <remarks>
             <b>Delete</b> throws a <b>Win32Exception</b> if the  delete operation is not successful.
             For example, this can happen when deleting a <b>Task</b> item that has not been 
             added to the <see cref="T:Microsoft.WindowsMobile.PocketOutlook.TaskCollection"/>.
             </remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Task.ToString">
            <summary>
            Gets the Task's subject line.
            </summary>
            <returns>The subject field as a string.</returns>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Task.SubjectChanged">
            <summary>
            Occurs when the Task's subject changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Task.CategoriesChanged">
            <summary>
            Occurs when the Task's assigned categories change.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Task.SensitivityChanged">
            <summary>
            Occurs when the Task's sensitivity level changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Task.BodyChanged">
            <summary>
            Occurs when the Task's body text changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Task.ReminderSetChanged">
            <summary>
            Occurs when the Reminder Exists flag changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Task.ReminderLedChanged">
            <summary>
            Occurs when the LED reminder flag changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Task.ReminderVibrateChanged">
            <summary>
            Occurs when the Vibrate flag changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Task.ReminderDialogChanged">
            <summary>
            Occurs when the Task's reminder dialog changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Task.ReminderSoundChanged">
            <summary>
            Occurs when the Task's reminder sound flag changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Task.ReminderRepeatChanged">
            <summary>
            Occurs when the Task's reminder repeat flag changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Task.ReminderSoundFileChanged">
            <summary>
            Occurs when the Task's reminder sound file changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Task.ReminderTimeChanged">
            <summary>
            Occurs when the Task's reminder time changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Task.StartDateChanged">
            <summary>
            Occurs when the Task's start date changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Task.DueDateChanged">
            <summary>
            Occurs when the Task's due date changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Task.CompleteChanged">
            <summary>
            Occurs when the Task's complete flag changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Task.ImportanceChanged">
            <summary>
            Occurs when the Task's importance level changes.
            </summary>
        </member>
        <member name="E:Microsoft.WindowsMobile.PocketOutlook.Task.TeamTaskChanged">
            <summary>
            Occurs when the team task flag changes.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Task.Subject">
            <summary>
            Gets or sets the subject for the task. Maximum length is 4095 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Task.Body">
            <summary>
            Gets or sets the text of the notes accompanying a task. The maximum size is 60 KB.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Task.Categories">
            <summary>
            Gets or sets the categories assigned to the task. Maximum length is 1023 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Task.Sensitivity">
            <summary>
            Gets or sets the sensitivity for a task as normal (Normal) or private (Private). The default for a new task is Normal.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Task.ReminderSet">
            <summary>
            Gets or sets whether the user wants to be reminded of a task. The default for this is the user setting in the Calendar and Task Options dialog box.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Task.TeamTask">
            <summary>
            Gets or sets whether the task is a team task. TRUE if a team task.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Task.IsRecurring">
            <summary>
            Returns whether the task is recurring. This is useful to use in a restriction string, to quickly discern whether a task recurs.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Task.Complete">
            <summary>
            Gets or sets whether the task is completed. TRUE if complete, FALSE otherwise. The default is FALSE. 
            TRUE sets the DateCompleted property to the current date on the device.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Task.ReminderSoundFile">
            <summary>
            Gets or sets the path and file name of the sound file to play when the reminder occurs for the Task. This property is valid only if the ReminderSet property is TRUE and the ReminderOptions property includes Sound. The default for this is the current setting for the Calendar application or Alarm1.wav if none. Maximum length is 255 characters.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Task.ReminderLed">
            <summary>
            Gets or sets a value indicating whether the LED (light emitting diode) will activate when the reminder occurs.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Task.ReminderVibrate">
            <summary>
            Gets or sets a value indicating whether the device will vibrate when the reminder occurs.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Task.ReminderDialog">
            <summary>
            Gets or sets a value indicating whether a reminder dialog will appear when the reminder occurs.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Task.ReminderSound">
            <summary>
            Gets or sets a value indicating whether the reminder sound file will play when the reminder occurs.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Task.ReminderRepeat">
            <summary>
            Gets or sets a value indicating whether the reminder sound file will repeat until the reminder is dismissed.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Task.Importance">
            <summary>
            Gets or sets the importance of the meeting. Allowed settings are ImportanceLow, ImportanceNormal (default), or ImportanceHigh.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Task.StartDate">
            <summary>
            Gets or sets when the task starts. StartDate must be less than or equal to DateCompleted. Dates must be set between 1/1/1900 and 12/31/2999 inclusive. The default is DATE_NONE.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Task.DueDate">
            <summary>
            Gets or sets when the task is due. Dates must be set between 1/1/1900 and 12/31/2999 inclusive. The default is DATE_NONE.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Task.DateCompleted">
            <summary>
            Gets when the task is completed. It gets set to the current date on the device when you set the Complete property. Dates must be set between 1/1/1900 and 12/31/2999 inclusive.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Task.ReminderTime">
            <summary>
            Gets or sets the number of minutes a reminder occurs before the start of a task. The default for this is the user setting in the Calendar Options dialog box.
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Task.RecurrencePattern">
            <summary>
            Gets the Recurrence object for the Task.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.TaskCollection">
            <summary>
            Represents the collection of Task items in the Task folder.
            <seealso cref="T:Microsoft.WindowsMobile.PocketOutlook.PimItemCollection"/>
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.TaskCollection.Restrict(System.String)">
            <summary>
            Creates a new TaskCollection object that contains only those Task items that match a set of filter criteria.
            </summary>
            <param name="restriction">
            A string that defines which items to find. 
            The string must contain a Boolean expression that evaluates to <b>true</b> or <b>false</b> for any item. 
                   - Enclose property names between brackets. 
                   - You can combine expressions with AND and OR. 
                   - Comparison operators are the following &quot;&lt;, &lt;=, &gt;, &gt;=, =, &lt;&gt;&quot; 
               </param>
            <remarks>
            A restriction match requires that the item includes a value for the property.
            For example, if you do not set the e-mail address for a contact, the contact will
            not be found using the restriction string [Email1Address]&lt;&gt;me@microsoft.com, 
            even though the value of Email1Address is not &quot;not me@microsoft.com.&quot;
            </remarks>
            <returns>The Collection of Items matching the Restriction.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.TaskCollection.Contains(Microsoft.WindowsMobile.PocketOutlook.Task)">
            <summary>
            Gets a value indicating whether a Task item exists in the Task collection.
            </summary>
            <param name="item">The PimItem to be found.</param>
            <returns>True if the item is found in the collection. False if the item is not found in the collection.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.TaskCollection.Remove(Microsoft.WindowsMobile.PocketOutlook.Task)">
            <summary>
            Removes the specified Task item from the Task collection.
            </summary>
            <remarks>
            Based on the current sort order.
            </remarks>
            <param name="item">The PimItem to be removed from the collection.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.TaskCollection.Add(Microsoft.WindowsMobile.PocketOutlook.PimItem)">
            <summary>
            Inserts a new Task item into the Task collection.
            </summary>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.TaskCollection.CopyTo(Microsoft.WindowsMobile.PocketOutlook.Task[],System.Int32)">
            <summary>
            Copies a TaskCollection object to an array of Task objects, beginning at a specific array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from ICollection. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins. </param>
            <exception cref="T:System.ArgumentOutOfRangeException">The index parameter is less than zero. </exception>
            <exception cref="T:System.ArgumentException">The index parameter is greater than or equal to the length 
            of the array parameter. Can also be thrown if the number of elements in the source array is 
            greater than the available space from index to the end of the destination array.</exception>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.TaskCollection.AddNew">
            <summary>
            Creates a new Task item, and adds it to the Task collection. 
            </summary>        
            <returns>The new PimItem</returns>
            <remarks>A NotSupportedException will be thrown by the base class if AllowNew is false.</remarks>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.TaskCollection.GetEnumerator">
            <summary>
            Gets an enumerator for iterating through the Task collection.
            </summary>
            <returns>The Enumerated collection</returns>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.TaskCollection.Item(System.Int32)">
            <summary>
            Gets the Task from the Task collection, with the specified index.
            </summary>
            <remarks>
            Each time you retrieve a Task item with the indexer, you get a newly instantiated Task item.
            </remarks>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.TaskCollection.TaskCollectionEnumerator">
            <summary>
            Represents the Task collection enumerator. Used to iterate through the Task collection.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.TaskCollection.TaskCollectionEnumerator.#ctor(Microsoft.WindowsMobile.PocketOutlook.TaskCollection)">
            <summary>
            Initializes a new instance of the <b>TaskCollectionEnumerator</b> class.
            </summary>
            <param name="collection">The collection to enumerate on.</param>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.TaskCollection.TaskCollectionEnumerator.Current">
            <summary>
            Gets the current Task item from the Task collection.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.TaskFolder">
            <summary>
            Defines the Task folder. This is container for the Task collection.
            <seealso cref="T:Microsoft.WindowsMobile.PocketOutlook.Folder"/>
            </summary>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.TaskFolder.Items">
            <summary>
            Gets the Task from the Task collection, with the specified index.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.TaskRecurrence">
            <summary>
            Defines a recurrence pattern and applies it to a Task.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.TaskRecurrence.Clear">
            <summary>
            Removes the recurrence pattern from a Task.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.TaskRecurrence.Skip">
            <summary>
            Disregards this occurrence of the Task.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Utilities.UnNullifyString(System.String)">
            <summary>
            UnNullifyString returns an empty string if the specified string is null, otherwise it just
            returns the specified string.
            </summary>
            <param name="tmpString"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Utilities.GetDateTimeTypesAndValues">
            <summary>
            Gets the DateTime types, values and methods required to manipulate the
            Kind of a DateTime. It does not do anything if the values have been cached
            or if the current version of the compact framework does not include the
            Kind property.
            </summary>
            <returns>
            DateTimeVersion.NetCFv1 if we are running on a version of the CF that does not have the 
            "DateTime.Kind" property, DateTimeVersion.NetCFv2 otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.Utilities.SpecifyDateTimeKind(System.DateTime,Microsoft.WindowsMobile.PocketOutlook.Utilities.DateTimeKindv2)">
            <summary>
            Similar to .Net CF v2 DateTime.SpecifyKind, but it does not do
            anything if we're are running on .NetCF v1.
            </summary>
            <param name="dateTime">A DateTime object.</param>
            <param name="dateTimeKind">One of the DateTimeKindEx values.</param>
            <returns>
            A new DateTime object that represents the same time as the specified DateTime, 
            but is designated in either local time, Coordinated Universal Time (UTC), 
            or neither, as indicated by the specified DateTimeKindEx value. 
            </returns>
        </member>
        <member name="P:Microsoft.WindowsMobile.PocketOutlook.Utilities.ReferenceCount">
            <summary>
            Used to check the number of references that use the MailStore.
            The PoomStore will not do a LogOff unless the ReferenceCount is 0.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.Utilities.DateTimeKindv2">
            <summary>
            Used to represent the different kinds of dates that can be
            specified on .Net CF v2. I did not name it DateTimeKind so
            that it does not get confused with DateTime.DateTimeKind.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.Utilities.DateTimeVersion">
            <summary>
            Let's us know what DateTime version we are using.
            </summary>
        </member>
        <member name="T:Microsoft.WindowsMobile.PocketOutlook.PocketOutlookException">
            <summary>
            The generic exception that is thrown by Microsoft.WindowsMobile.PocketOutlook methods.
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PocketOutlookException.#ctor">
            <summary>
            Initializes a new instance of the PocketOutlookException class. 
            <remarks>The default Constructor.</remarks>
            </summary>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PocketOutlookException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PocketOutlookException class, using the specified exception message string.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:Microsoft.WindowsMobile.PocketOutlook.PocketOutlookException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the PocketOutlookException class, using the specified exception message string, and specified inner exception.
            </summary>
            <param name="message">Exception message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Sharepoint\readme.txt ===
@Version 14.0.0.0

Must install Sharepoint, then get bits from:
C:\Program Files\Common Files\Microsoft Shared\Web Server Extensions\14\ISAPI
	(most dlls)
c:\Windows\Microsoft.NET\assembly\GAC_MSIL:
	Microsoft.VisualStudio.Modeling.Sdk.10.0.dll
	Microsoft.VisualStudio.SharePoint.Designers.Models.dll
	Microsoft.VisualStudio.SharePoint.Designers.Models.Features.dll
	Microsoft.VisualStudio.SharePoint.Designers.Models.Packages.dll
	Microsoft.VisualStudio.SharePoint.dll
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\2.0.31005.0\Libraries\Client\System.Runtime.Serialization.Json.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Serialization.Json</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.Serialization.Json.JsonReaderWriterFactory">
      <summary>Produces instances of <see cref="T:System.Xml.XmlDictionaryReader" /> that can read data encoded with JavaScript Object Notation (JSON) from a stream or buffer and map it to an XML Infoset, and produces instances of <see cref="T:System.Xml.XmlDictionaryWriter" /> that can map an XML Infoset to JSON and write JSON-encoded data to a stream. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Int32,System.Int32,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryReader" /> that can map a buffer encoded with JavaScript Object Notation (JSON), of a specified size and offset, to an XML Infoset.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader" /> that can read JSON.</returns>
      <param name="buffer">The input <see cref="T:System.Byte" /> buffer array from which to read.</param>
      <param name="offset">Starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">Number of bytes that can be read from <paramref name="buffer" />.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> must be set to <see cref="P:System.Xml.XmlDictionaryReaderQuotas.Max" /> in Silverlight version 2 applications.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is negative or exceeds the <paramref name="buffer" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is negative or exceeds the <paramref name="buffer" /> length minus the <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.Byte[],System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryReader" /> that can map a specified buffer encoded with JavaScript Object Notation (JSON) to an XML Infoset.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader" /> that can process JavaScript Object Notation (JSON) data from the buffer specified.</returns>
      <param name="buffer">The input <see cref="T:System.Byte" /> buffer array from which to read.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> must be set to <see cref="P:System.Xml.XmlDictionaryReaderQuotas.Max" /> in Silverlight version 2 applications used to prevent Denial of Service (DoS) attacks when reading untrusted data. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonReader(System.IO.Stream,System.Xml.XmlDictionaryReaderQuotas)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryReader" /> that can map a specified stream encoded with JavaScript Object Notation (JSON) to an XML Infoset.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader" /> that can read JSON.</returns>
      <param name="stream">The input <see cref="T:System.IO.Stream" /> from which to read.</param>
      <param name="quotas">The <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> must be set to <see cref="P:System.Xml.XmlDictionaryReaderQuotas.Max" /> in Silverlight version 2 applications. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to a stream using a UTF-8 character encoding.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to the stream from an XML Infoset.</returns>
      <param name="stream">The output <see cref="T:System.IO.Stream" /> for the JSON writer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to a stream with a specified character encoding.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to the stream from an XML Infoset.</returns>
      <param name="stream">The output <see cref="T:System.IO.Stream" /> for the JSON writer.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding" /> that specifies the character encoding used by the writer. The default encoding is UTF-8.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="encoding" /> is null.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.JsonReaderWriterFactory.CreateJsonWriter(System.IO.Stream,System.Text.Encoding,System.Boolean)">
      <summary>Creates an <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to a stream with a specified character encoding and that specifies whether the output stream is closed by the writer when it is done.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryWriter" /> that writes data encoded with JSON to the stream from an XML Infoset.</returns>
      <param name="stream">The output <see cref="T:System.IO.Stream" /> for the JSON writer.</param>
      <param name="encoding">The <see cref="T:System.Text.Encoding" /> that specifies the character encoding used by the writer. The default encoding is UTF-8.</param>
      <param name="ownsStream">If true, the output stream is closed by the writer when done; otherwise, false. The default value is true.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="encoding" /> is null.</exception>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\2.0.31005.0\Libraries\Client\System.ServiceModel.PollingDuplex.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ServiceModel.PollingDuplex</name>
  </assembly>
  <members>
    <member name="T:System.ServiceModel.PollingDuplexHttpBinding">
      <summary>Represents a binding that a Silverlight version 2 client can use to configure endpoints that can communicate with Windows Communication Foundation (WCF) services that are similarly configured for duplex communication with a polling client.</summary>
    </member>
    <member name="M:System.ServiceModel.PollingDuplexHttpBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.PollingDuplexHttpBinding" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.PollingDuplexHttpBinding.#ctor(System.ServiceModel.BasicHttpSecurityMode)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.PollingDuplexHttpBinding" /> class.</summary>
      <param name="securityMode">The value of <see cref="T:System.ServiceModel.BasicHttpSecurityMode" /> that specifies the type of security that is used with the SOAP message and for the client.</param>
    </member>
    <member name="M:System.ServiceModel.PollingDuplexHttpBinding.CreateBindingElements">
      <summary>Returns an ordered collection of binding elements contained in the current binding.</summary>
      <returns>The <see cref="T:System.ServiceModel.Channels.BindingElementCollection" /> that contains the ordered stack of binding elements described by the <see cref="T:System.PollingDuplexHttpBinding.BasicHttpBinding" />.</returns>
    </member>
    <member name="P:System.ServiceModel.PollingDuplexHttpBinding.InactivityTimeout">
      <summary>Gets or sets the maximum interval of time that can pass without activity on a channel before the client or server channel enters a faulted state. The default value is 10 minutes.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> value that specifies the maximum interval of time that can pass without activity on a channel before the channel enters a faulted state.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The value is less than zero or it is larger than the maximum time allowed.</exception>
    </member>
    <member name="T:System.ServiceModel.Channels.PollingDuplexBindingElement">
      <summary>Represents the binding element that enables duplex communication between a Silverlight version 2 client and a service.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.PollingDuplexBindingElement.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.ServiceModel.Channels.PollingDuplexBindingElement" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Channels.PollingDuplexBindingElement.#ctor(System.ServiceModel.Channels.PollingDuplexBindingElement)">
      <summary>Initializes a new instance of <see cref="T:System.ServiceModel.Channels.PollingDuplexBindingElement" /> class.</summary>
      <param name="elementToBeCloned"> The instance of the <see cref="T:System.ServiceModel.Channels.PollingDuplexBindingElement" /> class to be cloned.</param>
    </member>
    <member name="M:System.ServiceModel.Channels.PollingDuplexBindingElement.BuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Creates a channel factory that can be used to create a channel.</summary>
      <returns>A channel factory of the specified type.</returns>
      <param name="context">
        <see cref="T:System.ServiceModel.Channels.BindingContext" /> members that describe bindings, behaviors, contracts and other information required to create the channel factory.</param>
      <typeparam name="TChannel">Type of channel factory.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> cannot be null.</exception>
    </member>
    <member name="M:System.ServiceModel.Channels.PollingDuplexBindingElement.CanBuildChannelFactory``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Determines whether a channel factory of the specified type can be built.</summary>
      <returns>true if a channel factory can be built; otherwise false.</returns>
      <param name="context"> The <see cref="T:System.ServiceModel.Channels.BindingContext" /> for the channel to be built.</param>
      <typeparam name="TChannel">The type of channel to check.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="P:System.ServiceModel.Channels.PollingDuplexBindingElement.ClientPollTimeout"></member>
    <member name="M:System.ServiceModel.Channels.PollingDuplexBindingElement.Clone">
      <summary>Creates a copy of the current binding element.</summary>
      <returns>A copy of the current binding element.</returns>
    </member>
    <member name="M:System.ServiceModel.Channels.PollingDuplexBindingElement.GetProperty``1(System.ServiceModel.Channels.BindingContext)">
      <summary>Gets a property from the specified <see cref="T:System.ServiceModel.Channels.BindingContext" />.</summary>
      <returns>The property from the specified <see cref="T:System.ServiceModel.Channels.BindingContext" />.</returns>
      <param name="context">A <see cref="T:System.ServiceModel.Channels.BindingContext" />.</param>
      <typeparam name="T">The property to get.</typeparam>
    </member>
    <member name="P:System.ServiceModel.Channels.PollingDuplexBindingElement.InactivityTimeout">
      <summary>Specifies the maximum interval of time that can pass without activity on a channel before the client or server channel enters a faulted state.</summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\2.0.31005.0\Libraries\Client\system.servicemodel.syndication.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ServiceModel.Syndication</name>
  </assembly>
  <members>
    <member name="T:System.ServiceModel.Syndication.Atom10FeedFormatter">
      <summary>A class that serializes a <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to and from Atom 1.0 format.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.#ctor(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <param name="feedToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.#ctor(System.Type)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> class.</summary>
      <param name="feedTypeToCreate">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived instance to be serialized.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid Atom 1.0 syndication feed.</summary>
      <returns>A value that specifies whether the <see cref="T:System.Xml.XmlReader" /> contains a valid Atom 1.0 syndication feed.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.CreateFeedInstance">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10FeedFormatter.FeedType">
      <summary>The instance derived from <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> that is associated with the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> instance.</summary>
      <returns>The instance derived from <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> that is associated with the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10FeedFormatter.PreserveAttributeExtensions">
      <summary>Gets and sets a value that specifies whether to preserve attribute extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve attribute extensions during serialization.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10FeedFormatter.PreserveElementExtensions">
      <summary>Gets and sets a value that specifies whether to preserve element extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve element extensions during serialization.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads an Atom 1.0 syndication feed from the specified <see cref="T:System.Xml.XmlReader" /> instance.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.ReadItem(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Reads a syndication item from <see cref="T:System.Xml.XmlReader" /> instance using the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> used to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.ReadItems(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed,System.Boolean@)">
      <summary>Reads in a collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to use to create the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances.</param>
      <param name="areAllItemsRead">A value that specifies whether all of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances have been read from the <see cref="T:System.Xml.XmlReader" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> method.</summary>
      <returns>Null.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10FeedFormatter.Version">
      <summary>Gets the syndication version used by the formatter.</summary>
      <returns>The syndication version used by the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.WriteItem(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.Uri)">
      <summary>Writes the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to write.</param>
      <param name="feedBaseUri">The base URI for the feed.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.WriteItems(System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem},System.Uri)">
      <summary>Writes a collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="items">A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances to write.</param>
      <param name="feedBaseUri">The base URI for the feed.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> associated with the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Atom10FeedFormatter`1">
      <summary>A class that serializes <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived classes to and from Atom 1.0 format.</summary>
      <typeparam name="TSyndicationFeed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived type to serialize.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter`1" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter`1.#ctor(`0)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter`1" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived instance.</summary>
      <param name="feedToWrite">The feed to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10FeedFormatter`1.CreateFeedInstance">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived class.</summary>
      <returns>A new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class.</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.Atom10ItemFormatter">
      <summary>A class that serializes a <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to and from Atom 1.0 format.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.#ctor(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" /> class.</summary>
      <param name="itemTypeToCreate">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> derived instance to associate with the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid Atom 1.0 syndication item.</summary>
      <returns>A value that specifies whether the <see cref="T:System.Xml.XmlReader" /> contains a valid Atom 1.0 syndication item.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.CreateItemInstance">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10ItemFormatter.ItemType">
      <summary>Gets the type of the syndication item associated with the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" />.</summary>
      <returns>The type of the syndication item associated with the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10ItemFormatter.PreserveAttributeExtensions">
      <summary>Gets or sets a value that specifies whether to preserve attribute extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve attribute extensions during serialization.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10ItemFormatter.PreserveElementExtensions">
      <summary>Gets or sets a value that specifies whether to preserve element extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve element extensions during serialization.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads an Atom 1.0 syndication item from the specified <see cref="T:System.Xml.XmlReader" /> instance.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> method.</summary>
      <returns>Null.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Atom10ItemFormatter.Version">
      <summary>Gets the syndication version used by the formatter.</summary>
      <returns>The syndication version used by the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> associated with the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Atom10ItemFormatter`1">
      <summary>A class that serializes <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />-derived classes to and from Atom 1.0 format.</summary>
      <typeparam name="TSyndicationItem">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />-derived class to serialize.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter`1" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter`1.#ctor(`0)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter`1" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />-derived instance.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Atom10ItemFormatter`1.CreateItemInstance">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />-derived class.</summary>
      <returns>A new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.Rss20FeedFormatter">
      <summary>A class that serializes a <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to and from RSS 2.0 format.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.#ctor(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <param name="feedToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.#ctor(System.ServiceModel.Syndication.SyndicationFeed,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <param name="feedToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to serialize.</param>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize elements that are defined in the Atom 1.0 specification but not in the RSS 2.0 specification. The default value is true.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.#ctor(System.Type)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> class.</summary>
      <param name="feedTypeToCreate">The instance derived from <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to be serialized.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid RSS 2.0 syndication feed.</summary>
      <returns>A value that specifies whether the <see cref="T:System.Xml.XmlReader" /> contains a valid RSS 2.0 syndication feed.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.CreateFeedInstance">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.FeedType">
      <summary>The instance derived from <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> that is associated with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</summary>
      <returns>The instance derived from <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> that is associated with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.PreserveAttributeExtensions">
      <summary>Gets and sets a value that specifies whether to preserve attribute extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve attribute extensions during serialization.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.PreserveElementExtensions">
      <summary>Gets and sets a value that specifies whether to preserve element extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve element extensions during serialization.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads an RSS 2.0 syndication feed from the specified <see cref="T:System.Xml.XmlReader" /> instance.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.ReadItem(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Reads a syndication item from an <see cref="T:System.Xml.XmlReader" /> instance using the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> used to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.ReadItems(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed,System.Boolean@)">
      <summary>Reads in a collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to use to create the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances.</param>
      <param name="areAllItemsRead">A value that specifies whether all of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances have been read from the <see cref="T:System.Xml.XmlReader" /> instance.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.SerializeExtensionsAsAtom">
      <summary>Gets and sets a value that specifies whether to serialize extensions within the Atom 1.0 namespace.</summary>
      <returns>A value that specifies whether to serialize extensions within the Atom 1.0 namespace.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.SetFeed(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Sets the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance associated with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" />.</summary>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to associate with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> method.</summary>
      <returns>Null.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20FeedFormatter.Version">
      <summary>Gets the syndication version used by the formatter.</summary>
      <returns>The syndication version used by the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.WriteItem(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.Uri)">
      <summary>Writes the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to write.</param>
      <param name="feedBaseUri">The base URI for the feed.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.WriteItems(System.Xml.XmlWriter,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem},System.Uri)">
      <summary>Writes a collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="items">A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instances to write.</param>
      <param name="feedBaseUri">The base URI for the feed.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> associated with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Rss20FeedFormatter`1">
      <summary>A class that serializes <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived classes to RSS 2.0 format.</summary>
      <typeparam name="TSyndicationFeed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived type to serialize.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter`1" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter`1.#ctor(`0)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter`1" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived instance.</summary>
      <param name="feedToWrite">The feed to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter`1.#ctor(`0,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter`1" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived instance.</summary>
      <param name="feedToWrite">The feed to serialize.</param>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize elements that are defined in the Atom 1.0 specification, but not in the RSS 2.0 specification. The default is true.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20FeedFormatter`1.CreateFeedInstance">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> derived class.</summary>
      <returns>A new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class.</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.Rss20ItemFormatter">
      <summary>A class that serializes a <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to and from RSS 2.0 format.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.#ctor(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> class.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.#ctor(System.ServiceModel.Syndication.SyndicationItem,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> class.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to serialize.</param>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize elements that are defined in the Atom 1.0 specification but not in the RSS 2.0 specification. The default value is true.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.#ctor(System.Type)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" /> class.</summary>
      <param name="itemTypeToCreate">The instance derived from <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to associate with the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid RSS 2.0 syndication item.</summary>
      <returns>A value that specifies whether the <see cref="T:System.Xml.XmlReader" /> contains a valid RSS 2.0 syndication item.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.CreateItemInstance">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.ItemType">
      <summary>Gets the type of the syndication item associated with the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" />.</summary>
      <returns>The type of the syndication item associated with the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.PreserveAttributeExtensions">
      <summary>Gets or sets a value that specifies whether to preserve attribute extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve attribute extensions during serialization.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.PreserveElementExtensions">
      <summary>Gets or sets a value that specifies whether to preserve element extensions during serialization.</summary>
      <returns>A value that specifies whether to preserve element extensions during serialization.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads an RSS 2.0 syndication item from the specified <see cref="T:System.Xml.XmlReader" /> instance.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.SerializeExtensionsAsAtom">
      <summary>Gets and sets a value that specifies whether to serialize extensions within the Atom 1.0 namespace.</summary>
      <returns>A value that specifies whether to serialize extensions within the Atom 1.0 namespace.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" /> method.</summary>
      <returns>Null.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Implements the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.Rss20ItemFormatter.Version">
      <summary>Gets the syndication version used by the formatter.</summary>
      <returns>The syndication version used by the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> associated with the <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.Rss20ItemFormatter`1">
      <summary>A class that serializes <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />-derived classes to and from RSS 2.0 format.</summary>
      <typeparam name="TSyndicationItem">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />-derived type to serialize.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter`1.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter`1" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter`1.#ctor(`0)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter`1" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> derived instance.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to serialize.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter`1.#ctor(`0,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.Rss20ItemFormatter`1" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> derived instance.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to serialize.</param>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize elements that are defined in the Atom 1.0 specification but not in the RSS 2.0 specification. The default value is true.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.Rss20ItemFormatter`1.CreateItemInstance">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> derived class.</summary>
      <returns>A new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</returns>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationCategory">
      <summary>A class that represents the category of a syndication feed. </summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.#ctor(System.ServiceModel.Syndication.SyndicationCategory)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to initialize the new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class with the given name.</summary>
      <param name="name">The name of the category.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class with the specified name, scheme, and label.</summary>
      <param name="name">The name of the category.</param>
      <param name="scheme">A Uniform Resource Identifier (URI) that represents the categorization scheme to which this category belongs.</param>
      <param name="label">A human-readable attribute that describes the category.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.AttributeExtensions">
      <summary>Gets the attribute extensions for this category.</summary>
      <returns>The attribute extensions for this category.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.Clone">
      <summary>Creates a copy of a <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.ElementExtensions">
      <summary>Gets the element extensions for this category.</summary>
      <returns>A collection of element extensions.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.Label">
      <summary>Gets or sets the label of the category.</summary>
      <returns>The label of the category.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.Name">
      <summary>Gets or sets the name of the category.</summary>
      <returns>The name of the category.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationCategory.Scheme">
      <summary>Gets or sets the scheme of the category.</summary>
      <returns>The scheme of the category.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>A value that specifies whether the attribute extension was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>A value that specifies whether the element extension has been parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified writer.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationCategory.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified writer.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationContent">
      <summary>A base class that represents syndication content.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.#ctor(System.ServiceModel.Syndication.SyndicationContent)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance to use to initialize the new instance.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationContent.AttributeExtensions">
      <summary>Gets the attribute extensions for this content.</summary>
      <returns>A dictionary that contains the attribute extensions for this object.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.Clone">
      <summary>Creates a copy of the <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</summary>
      <returns>A copy of the <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateHtmlContent(System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance with the specified HTML content.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance.</returns>
      <param name="content">The text of the content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreatePlaintextContent(System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance with the specified plain text content.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance.</returns>
      <param name="content">The plain text content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateUrlContent(System.Uri,System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance with the specified <see cref="T:System.Uri" /> and media type.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance.</returns>
      <param name="url">The <see cref="T:System.Uri" /> of the content.</param>
      <param name="mediaType">The media type of the content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXhtmlContent(System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance with the specified XHTML content.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance.</returns>
      <param name="content">The XHTML content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXmlContent(System.Object)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance with the specified data contract object.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</returns>
      <param name="dataContractObject">The data contract object.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXmlContent(System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance with the specified data contract object and data contract serializer.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</returns>
      <param name="dataContractObject">The data contract object.</param>
      <param name="dataContractSerializer">The data contract serializer.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXmlContent(System.Object,System.Xml.Serialization.XmlSerializer)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance with the specified object and XML serializer.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</returns>
      <param name="xmlSerializerObject">The object.</param>
      <param name="serializer">The XML serializer.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.CreateXmlContent(System.Xml.XmlReader)">
      <summary>Creates XML syndication content.</summary>
      <returns>An instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> class that contains the new content.</returns>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationContent.Type">
      <summary>Gets the syndication content type.</summary>
      <returns>The name of the type of syndication content.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.WriteContentsTo(System.Xml.XmlWriter)">
      <summary>Writes the contents of this <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> object to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationContent.WriteTo(System.Xml.XmlWriter,System.String,System.String)">
      <summary>Writes the contents of this object to the specified <see cref="T:System.Xml.XmlWriter" /> within the specified element and element namespace.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
      <param name="outerElementName">The name of the element.</param>
      <param name="outerElementNamespace">The namespace of the element.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationElementExtension">
      <summary>A class that represents a syndication element extension.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class with the specified object.</summary>
      <param name="dataContractExtension">The data contract object used to initialize the extension. </param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class with the specified object and data contract serializer.</summary>
      <param name="dataContractExtension">The data contract object used to initialize the extension.</param>
      <param name="dataContractSerializer">The data contract serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.Object,System.Xml.Serialization.XmlSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class with the specified object and XML serializer.</summary>
      <param name="xmlSerializerExtension">The object used to initialize the extension.</param>
      <param name="serializer">The XML serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.String,System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class with the specified outer name, outer namespace, and object.</summary>
      <param name="outerName">The name of the enclosing XML element.</param>
      <param name="outerNamespace">The namespace of the enclosing XML element.</param>
      <param name="dataContractExtension">The object used to initialize the extension.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class with the specified outer name, outer namespace, object, and data contract serializer.</summary>
      <param name="outerName">The name of the enclosing XML element.</param>
      <param name="outerNamespace">The namespace of the enclosing XML element.</param>
      <param name="dataContractExtension">The object used to initialize the extension.</param>
      <param name="dataContractSerializer">The data contract serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.#ctor(System.Xml.XmlReader)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> class.</summary>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> that contains the content of the new <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.GetObject``1">
      <summary>Gets the object that represents the element extension.</summary>
      <returns>An object of the specified type that contains the element extension.</returns>
      <typeparam name="TExtension">The type of the extension to retrieve.</typeparam>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type is not a valid data contract.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.GetObject``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Gets the object that represents the element extension.</summary>
      <returns>An object of the specified type that contains the element extension.</returns>
      <param name="serializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> to use.</param>
      <typeparam name="TExtension">The type of the extension to retrieve.</typeparam>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type is not a valid data contract.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.GetObject``1(System.Xml.Serialization.XmlSerializer)">
      <summary>Gets the object that represents the element extension.</summary>
      <returns>An object of the specified type that contains the element extension.</returns>
      <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer" /> to use.</param>
      <typeparam name="TExtension">The type of the extension to retrieve.</typeparam>
      <exception cref="T:System.InvalidOperationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.GetReader">
      <summary>Gets the <see cref="T:System.Xml.XmlReader" /> associated with the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" />.</summary>
      <returns>The <see cref="T:System.Xml.XmlReader" /> associated with the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationElementExtension.OuterName">
      <summary>Gets the outer name of the element extension.</summary>
      <returns>The outer name of the element extension.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationElementExtension.OuterNamespace">
      <summary>Gets the outer namespace of the element extension.</summary>
      <returns>The outer namespace of the element extension.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtension.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the current extension to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection">
      <summary>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> objects.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.Object)">
      <summary>Adds the specified <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> object to the collection.</summary>
      <param name="extension">The <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> object to add.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.Object,System.Runtime.Serialization.DataContractSerializer)">
      <summary>Adds the specified object to the collection using the specified data contract serializer.</summary>
      <param name="dataContractExtension">The object to add to the collection.</param>
      <param name="serializer">The serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.Object,System.Xml.Serialization.XmlSerializer)">
      <summary>Adds the specified object to the collection using the specified XML serializer.</summary>
      <param name="xmlSerializerExtension">The object to add to the collection.</param>
      <param name="serializer">The XML serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.String,System.String,System.Object)">
      <summary>Adds the specified object to the collection with the specified outer name and outer namespace.</summary>
      <param name="outerName">The outer name.</param>
      <param name="outerNamespace">The outer namespace.</param>
      <param name="dataContractExtension">The object to add to the collection.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.String,System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Adds the specified object to the collection with the specified outer name and outer namespace using the specified data contract serializer.</summary>
      <param name="outerName">The outer name.</param>
      <param name="outerNamespace">The outer namespace.</param>
      <param name="dataContractExtension">The object to add to the collection.</param>
      <param name="dataContractSerializer">The serializer to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.Add(System.Xml.XmlReader)">
      <summary>Adds a new syndication element extension to the collection.</summary>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> to read the syndication element extension from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.GetReaderAtElementExtensions">
      <summary>Gets an <see cref="T:System.Xml.XmlReader" /> with the element extensions.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> that contains the element extensions.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.ReadElementExtensions``1(System.String,System.String)">
      <summary>Reads the element extensions with the specified name and namespace.</summary>
      <returns>A collection of element extension objects.</returns>
      <param name="extensionName">The name of the element extension.</param>
      <param name="extensionNamespace">The namespace of the element extension.</param>
      <typeparam name="TExtension">The type of the extension to read.</typeparam>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type is not a valid data contract.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.ReadElementExtensions``1(System.String,System.String,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Reads the element extensions with the specified name and namespace.</summary>
      <returns>A collection of element extension objects.</returns>
      <param name="extensionName">The name of the element extension.</param>
      <param name="extensionNamespace">The namespace of the element extension.</param>
      <param name="serializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> to use.</param>
      <typeparam name="TExtension">The type of the extension to read.</typeparam>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type is not a valid data contract.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationElementExtensionCollection.ReadElementExtensions``1(System.String,System.String,System.Xml.Serialization.XmlSerializer)">
      <summary>Reads the element extensions with the specified name and namespace.</summary>
      <returns>A collection of element extension objects.</returns>
      <param name="extensionName">The name of the element extension.</param>
      <param name="extensionNamespace">The namespace of the element extension.</param>
      <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer" /> to use.</param>
      <typeparam name="TExtension">The type of the extension to read.</typeparam>
      <exception cref="T:System.InvalidOperationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationFeed">
      <summary>Represents a top-level feed object, &lt;feed&gt; in Atom 1.0 and &lt;rss&gt; in RSS 2.0.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class with the specified collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</summary>
      <param name="items">A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.ServiceModel.Syndication.SyndicationFeed,System.Boolean)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class with the specified feed.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> used to initialize the new instance.</param>
      <param name="cloneItems">A value that specifies whether to clone the items in the source instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.String,System.String,System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class with the specified title, description, and Uniform Resource Identifier (URI).</summary>
      <param name="title">The title of the feed.</param>
      <param name="description">The description of the feed.</param>
      <param name="feedAlternateLink">The URI for the feed.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.String,System.String,System.Uri,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem})">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class with the specified title, description, URI, and collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</summary>
      <param name="title">The title of the feed.</param>
      <param name="description">The description of the feed.</param>
      <param name="feedAlternateLink">The URI for the feed.</param>
      <param name="items">A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.String,System.String,System.Uri,System.String,System.DateTimeOffset)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class.</summary>
      <param name="title">The syndication feed title.</param>
      <param name="description">The syndication feed description.</param>
      <param name="feedAlternateLink">The alternate URI for the syndication feed.</param>
      <param name="id">The ID of the syndication feed.</param>
      <param name="lastUpdatedTime">The <see cref="T:System.DateTimeOffset" /> that contains the last time the syndication feed was updated.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.#ctor(System.String,System.String,System.Uri,System.String,System.DateTimeOffset,System.Collections.Generic.IEnumerable{System.ServiceModel.Syndication.SyndicationItem})">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class.</summary>
      <param name="title">The syndication feed title.</param>
      <param name="description">The syndication feed description.</param>
      <param name="feedAlternateLink">The alternate URI for the syndication feed.</param>
      <param name="id">The ID of the syndication feed.</param>
      <param name="lastUpdatedTime">The <see cref="T:System.DateTimeOffset" /> that contains the last time the syndication feed was updated.</param>
      <param name="items">A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.AttributeExtensions">
      <summary>Gets a collection of attribute extensions.</summary>
      <returns>A dictionary that contains a collection of attribute extensions.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Authors">
      <summary>Gets a collection of authors of the feed.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> objects that represents the authors of the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.BaseUri">
      <summary>Gets or sets the base URI for the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>The base URI for the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Categories">
      <summary>Gets a collection of categories for the feed.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> objects that represent the categories for the feed.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.Clone(System.Boolean)">
      <summary>Creates a copy of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A duplicate <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> object.</returns>
      <param name="cloneItems">A value that specifies whether the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects are cloned.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Contributors">
      <summary>Gets a collection of the contributors to the feed.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> objects that represents the contributors to the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Copyright">
      <summary>Gets or sets copyright information for the feed.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> object that represents copyright information for the feed.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.CreateCategory">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.CreateItem">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.CreateLink">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.CreatePerson">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Description">
      <summary>Gets or sets a description of the feed.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> object that represents the description of the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.ElementExtensions">
      <summary>Gets the element extensions for the feed.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" /> instance that contains the element extensions in the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Generator">
      <summary>Gets or sets the generator of the feed.</summary>
      <returns>The name of the tool that generated the feed.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.GetAtom10Formatter">
      <summary>Gets an <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> instance.</summary>
      <returns>An <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.GetRss20Formatter">
      <summary>Gets an <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</summary>
      <returns>An <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.GetRss20Formatter(System.Boolean)">
      <summary>Gets a new <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</summary>
      <returns>An <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</returns>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize element and attribute extensions with an Atom 1.0 namespace.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Id">
      <summary>Gets or sets the ID of the feed.</summary>
      <returns>The ID of the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.ImageUrl">
      <summary>Gets or sets the image URL for the feed.</summary>
      <returns>The URL for the image for the feed.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Items">
      <summary>Gets a collection of the feed items contained in the feed.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> objects.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Language">
      <summary>Gets or sets the language of the feed.</summary>
      <returns>The name of the language the feed is written in. </returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.LastUpdatedTime">
      <summary>Gets or sets the time the feed was last updated.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> instance set to the time the feed was last updated.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Links">
      <summary>Gets the links associated with the feed.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> objects.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.Load(System.Xml.XmlReader)">
      <summary>Loads a syndication feed from the specified XML reader.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> that contains the loaded contents.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to load the feed from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.Load``1(System.Xml.XmlReader)">
      <summary>Loads a <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />-derived instance from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />-derived instance that contains the feed.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <typeparam name="TSyndicationFeed">The syndication feed type.</typeparam>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.SaveAsAtom10(System.Xml.XmlWriter)">
      <summary>Write the syndication feed to the specified <see cref="T:System.Xml.XmlWriter" /> in Atom 1.0 format.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.SaveAsRss20(System.Xml.XmlWriter)">
      <summary>Write the syndication feed to the specified <see cref="T:System.Xml.XmlWriter" /> in RSS 2.0 format.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeed.Title">
      <summary>Gets or sets the title of the feed.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance that contains the title of the feed.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>A value that specifies whether the attribute extension was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML Encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>A value that specifies whether the element extension was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeed.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationFeedFormatter">
      <summary>An abstract class used as a base class for other formatters, (for example <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" />).</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.#ctor(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <param name="feedToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to write. </param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies that the specified <see cref="T:System.Xml.XmlReader" /> contains a valid syndication feed.</summary>
      <returns>true, if the XML reader contains a valid syndication feed; otherwise, false.</returns>
      <param name="reader">An XML reader to check.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateCategory(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</returns>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> used to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateCategory(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> used to create the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateFeedInstance">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> class.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateItem(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> used to create the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateLink(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" />.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to use to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreateLink(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to use to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreatePerson(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</returns>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance used to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.CreatePerson(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance used to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeedFormatter.Feed">
      <summary>Gets the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> associated with the formatter.</summary>
      <returns>The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> associated with the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationCategory,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> using the specified <see cref="T:System.Xml.XmlReader" /> and the maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> using the specified <see cref="T:System.Xml.XmlReader" /> and the maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> using the specified <see cref="T:System.Xml.XmlReader" /> and the maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationLink,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> using the specified <see cref="T:System.Xml.XmlReader" /> and the maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationPerson,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> using the specified <see cref="T:System.Xml.XmlReader" /> and the maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads in a <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.SetFeed(System.ServiceModel.Syndication.SyndicationFeed)">
      <summary>Associates a <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance with the <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" />.</summary>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to associate with the <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.ToString">
      <summary>Gets a string representation of the <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" /> instance.</summary>
      <returns>The <see cref="T:System.ServiceModel.Syndication.SyndicationFeedFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationFeed,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseContent(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.String,System.String,System.ServiceModel.Syndication.SyndicationContent@)">
      <summary>Attempts to parse syndication item content using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the content was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="contentType">The content type.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <param name="content">The content to parse.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationFeed,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationFeedFormatter.Version">
      <summary>Gets the syndication version of the formatter.</summary>
      <returns>The syndication version of the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationFeed,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the element extensions to.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the element extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationFeed,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the element extensions to.</param>
      <param name="feed">The <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the element extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the element extensions to.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the element extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the element extensions to.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the element extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the element extensions to.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the element extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationFeedFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to the specified <see cref="T:System.Xml.XmlWriter" /> instance.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationItem">
      <summary>Represents a feed item, for example an RSS &lt;item&gt; or an Atom &lt;entry&gt;.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <param name="source">A <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance used to initialize the new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor(System.String,System.ServiceModel.Syndication.SyndicationContent,System.Uri,System.String,System.DateTimeOffset)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</summary>
      <param name="title">The title of the syndication item.</param>
      <param name="content">A <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance that contains the content of the syndication item.</param>
      <param name="itemAlternateLink">The alternate URI for the syndication item.</param>
      <param name="id">The ID of the syndication item.</param>
      <param name="lastUpdatedTime">The <see cref="T:System.DateTimeOffset" /> that contains the last time the syndication item was last updated.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor(System.String,System.String,System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class with the specified title, content, and link.</summary>
      <param name="title">The item title.</param>
      <param name="content">The item content.</param>
      <param name="itemAlternateLink">The item URL.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.#ctor(System.String,System.String,System.Uri,System.String,System.DateTimeOffset)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</summary>
      <param name="title">The title of the syndication item.</param>
      <param name="content">The content of the syndication item.</param>
      <param name="itemAlternateLink">The alternate URI for the syndication item.</param>
      <param name="id">The ID of the syndication item.</param>
      <param name="lastUpdatedTime">The <see cref="T:System.DateTimeOffset" /> that contains the last time the syndication item was last updated.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.AddPermalink(System.Uri)">
      <summary>Adds a permalink to the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />.</summary>
      <param name="permalink">The <see cref="T:System.Uri" /> that points to the content.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.AttributeExtensions">
      <summary>Gets the attribute extensions for the syndication item.</summary>
      <returns>A dictionary that contains a collection of attribute extensions.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Authors">
      <summary>Gets the authors of the syndication item.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> objects that represent the authors of the syndication item.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.BaseUri">
      <summary>Gets and sets the base Uniform Resource Identifier (URI) for the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>The base URI of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Categories">
      <summary>Gets the syndication categories for the syndication item.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> objects that represent the categories of the syndication item.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.Clone">
      <summary>Creates a copy of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Content">
      <summary>Gets and sets the content of the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance that contains the content of the syndication item.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Contributors">
      <summary>Gets the contributors of the syndication item.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> objects that represent the contributors of the syndication item.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Copyright">
      <summary>Gets and sets the copyright information for the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance that represents copyright information.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.CreateCategory">
      <summary>Creates a new category.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> object.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.CreateLink">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.CreatePerson">
      <summary>Creates a new person.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> object.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.ElementExtensions">
      <summary>Gets the element extensions contained in the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" /> that contains the element extensions.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.GetAtom10Formatter">
      <summary>Gets an <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> instance.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.Atom10FeedFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.GetRss20Formatter">
      <summary>Gets an <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</summary>
      <returns>An <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.GetRss20Formatter(System.Boolean)">
      <summary>Gets an <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</summary>
      <returns>An <see cref="T:System.ServiceModel.Syndication.Rss20FeedFormatter" /> instance.</returns>
      <param name="serializeExtensionsAsAtom">A value that specifies whether to serialize element and attribute extensions with an Atom 1.0 namespace.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Id">
      <summary>Gets and sets the ID of the syndication item.</summary>
      <returns>The ID of the syndication item.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.LastUpdatedTime">
      <summary>Gets and sets the last updated time for the syndication item.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> instance that represents the time the syndication item was last updated.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Links">
      <summary>Gets the links contained in the syndication item.</summary>
      <returns>A collection of <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> objects.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.Load``1(System.Xml.XmlReader)">
      <summary>Loads a <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> derived object from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> derived object that contains the syndication item.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <typeparam name="TSyndicationItem">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" />-derived class to load.</typeparam>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.Load(System.Xml.XmlReader)">
      <summary>Loads a <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from. </param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.PublishDate">
      <summary>Gets and sets the publish date for the syndication item.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> object that represents the publish date for the syndication item.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.SaveAsAtom10(System.Xml.XmlWriter)">
      <summary>Write the syndication item to the specified <see cref="T:System.Xml.XmlWriter" /> in Atom 1.0 format.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.SaveAsRss20(System.Xml.XmlWriter)">
      <summary>Write the syndication item to the specified <see cref="T:System.Xml.XmlWriter" /> in RSS 2.0 format.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.SourceFeed">
      <summary>Gets and sets the source feed of the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationFeed" /> instance where the syndication item is located.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Summary">
      <summary>Gets and sets the summary of the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> that contains a summary of the item.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItem.Title">
      <summary>Gets and sets the title of the syndication item.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> object that contains the title of the syndication item.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>A value that specifies whether the attribute extension was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.TryParseContent(System.Xml.XmlReader,System.String,System.String,System.ServiceModel.Syndication.SyndicationContent@)">
      <summary>Attempts to parse content.</summary>
      <returns>A value that specifies whether the content was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="contentType">The content type of the content.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <param name="content">The <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance to load the parsed content into.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>A value that specifies whether the element extension was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItem.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specific syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationItemFormatter">
      <summary>An abstract class used as a base class for other formatters, (for example, <see cref="T:System.ServiceModel.Syndication.Atom10ItemFormatter" />).</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" /> class.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.#ctor(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" /> class with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <param name="itemToWrite">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to write.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CanRead(System.Xml.XmlReader)">
      <summary>Verifies whether the specified <see cref="T:System.Xml.XmlReader" /> contains a valid syndication item.</summary>
      <returns>true if the XML reader contains a valid syndication item; otherwise, false.</returns>
      <param name="reader">An XML reader to check.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CreateCategory(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> class using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> used to create the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CreateItemInstance">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> class.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CreateLink(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to use to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.CreatePerson(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance with the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</returns>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance used to create the new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItemFormatter.Item">
      <summary>Gets the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> associated with the formatter.</summary>
      <returns>The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> associated with the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationCategory,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> using the specified <see cref="T:System.Xml.XmlReader" /> and the maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> using the specified <see cref="T:System.Xml.XmlReader" /> and the maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationLink,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> using the specified <see cref="T:System.Xml.XmlReader" /> and the maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.LoadElementExtensions(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationPerson,System.Int32)">
      <summary>Loads element extensions into the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> using the specified <see cref="T:System.Xml.XmlReader" /> and the maximum extension size.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> to load the element extensions into.</param>
      <param name="maxExtensionSize">The maximum allowable size for an element extension (in bytes).</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.ReadFrom(System.Xml.XmlReader)">
      <summary>Reads in a <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.SetItem(System.ServiceModel.Syndication.SyndicationItem)">
      <summary>Associates a <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance with the <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" />.</summary>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to associate with the <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.ToString">
      <summary>Gets a string representation of the <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" /> instance.</summary>
      <returns>The <see cref="T:System.ServiceModel.Syndication.SyndicationItemFormatter" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseAttribute(System.String,System.String,System.String,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Attempts to parse an attribute extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A value that indicates whether the attribute was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseContent(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.String,System.String,System.ServiceModel.Syndication.SyndicationContent@)">
      <summary>Attempts to parse syndication item content using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the content was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="contentType">The content type.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <param name="content">The content to parse.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.TryParseElement(System.Xml.XmlReader,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Attempts to parse an element extension using the specified <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A value that indicates whether the element was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to use.</param>
      <param name="version">The syndication version to use when parsing.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationItemFormatter.Version">
      <summary>Gets the syndication version of the formatter.</summary>
      <returns>The syndication version of the formatter.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteAttributeExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Writes the attribute extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance that contains the attribute extensions to be written.</param>
      <param name="version">The syndication version to write the attribute extensions in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationCategory,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="category">The <see cref="T:System.ServiceModel.Syndication.SyndicationCategory" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationItem,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="item">The <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationLink,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="link">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteElementExtensions(System.Xml.XmlWriter,System.ServiceModel.Syndication.SyndicationPerson,System.String)">
      <summary>Writes the element extensions in the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to the specified <see cref="T:System.Xml.XmlWriter" /> in the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the extensions to.</param>
      <param name="person">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance that contains the element extensions to be written.</param>
      <param name="version">The syndication version the extensions are written in.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationItemFormatter.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to the specified <see cref="T:System.Xml.XmlWriter" /> instance.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write the <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationLink">
      <summary>Represents a link within a syndication feed or item.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.#ctor(System.ServiceModel.Syndication.SyndicationLink)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class with the specified instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance used to initialize the new instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.#ctor(System.Uri)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class with the specified <see cref="T:System.Uri" />.</summary>
      <param name="uri">The URI to the linked resource.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.#ctor(System.Uri,System.String,System.String,System.String,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> class with the specified <see cref="T:System.Uri" />, relation type, title, media type, and length.</summary>
      <param name="uri">The URI to the linked resource.</param>
      <param name="relationshipType">The relationship type.</param>
      <param name="title">The title of the link.</param>
      <param name="mediaType">The media type of the link.</param>
      <param name="length">The length of the linked content.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.AttributeExtensions">
      <summary>Gets the attribute extensions of the link.</summary>
      <returns>A dictionary that contains a collection of attribute extensions.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.BaseUri">
      <summary>Gets or sets the base URI of the syndication link.</summary>
      <returns>A <see cref="T:System.Uri" /> instance that contains the base URI of the syndication link.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.Clone">
      <summary>Creates a copy of the current <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateAlternateLink(System.Uri)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> object with the specified <see cref="T:System.Uri" />.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="uri">The URI of the linked resource.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateAlternateLink(System.Uri,System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> object with the specified <see cref="T:System.Uri" /> and media type.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="uri">The URI of the linked resource.</param>
      <param name="mediaType">The media type of the link.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateMediaEnclosureLink(System.Uri,System.String,System.Int64)">
      <summary>Creates a media enclosure link with the specified URI, media type, and length.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="uri">The URI of the linked resource.</param>
      <param name="mediaType">The media type of the link.</param>
      <param name="length">The length of the linked content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateSelfLink(System.Uri)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> with the specified URI and relationship type set to self.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="uri">The URI to the linked resource.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.CreateSelfLink(System.Uri,System.String)">
      <summary>Creates a new <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> with the specified URI, media type, and relationship type set to self.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationLink" /> instance.</returns>
      <param name="uri">The URI to the linked resource.</param>
      <param name="mediaType">The media type of the link.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.ElementExtensions">
      <summary>Gets the element extensions for the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" /> that contains the element extensions for the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.GetAbsoluteUri">
      <summary>Gets the absolute URI for the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</summary>
      <returns>A <see cref="T:System.Uri" /> instance that contains the absolute URI of the <see cref="T:System.ServiceModel.Syndication.SyndicationLink" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.Length">
      <summary>Gets or sets the length of the linked resource in bytes.</summary>
      <returns>The length of the linked resource.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.MediaType">
      <summary>Gets or sets the media type of the linked resource.</summary>
      <returns>The media type of the linked resource.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.RelationshipType">
      <summary>Gets or sets the relationship type of the linked resource.</summary>
      <returns>The relationship type of the linked resource.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.Title">
      <summary>Gets or sets the title of the linked resource.</summary>
      <returns>The title of the linked resource.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>A value that specifies whether the attribute extension was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>A value that specifies whether the element extension was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationLink.Uri">
      <summary>Gets or sets the URI for the linked resource.</summary>
      <returns>A <see cref="T:System.Uri" /> instance that contains the URI for the linked resource.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationLink.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use when writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationPerson">
      <summary>Represents an author or contributor of syndication content.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.#ctor">
      <summary>Initializes a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.#ctor(System.ServiceModel.Syndication.SyndicationPerson)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> class with the specified instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance to initialize the new instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.#ctor(System.String)">
      <summary>Initializes a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance with the specified e-mail address.</summary>
      <param name="email">The e-mail address of the person.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance with the specified e-mail address, name, and Uniform Resource Identifier (URI).</summary>
      <param name="email">The e-mail address of the person.</param>
      <param name="name">The name of the person.</param>
      <param name="uri">The URI of the person's Web page.</param>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.AttributeExtensions">
      <summary>Gets the attribute extensions for the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" />.</summary>
      <returns>A dictionary that contains a collection of attribute extensions.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.Clone">
      <summary>Creates a copy of the existing <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.ElementExtensions">
      <summary>Gets the element extensions for the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtensionCollection" /> that contains the element extensions.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.Email">
      <summary>Gets or sets the e-mail address of the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" />.</summary>
      <returns>The e-mail address of the person.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.Name">
      <summary>Gets or sets the name of the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" />.</summary>
      <returns>The name of the person.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.TryParseAttribute(System.String,System.String,System.String,System.String)">
      <summary>Attempts to parse an attribute extension.</summary>
      <returns>A value that specifies whether the attribute extension was parsed successfully.</returns>
      <param name="name">The name of the element.</param>
      <param name="ns">The namespace of the element.</param>
      <param name="value">The attribute to parse.</param>
      <param name="version">The syndication version to use when parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.TryParseElement(System.Xml.XmlReader,System.String)">
      <summary>Attempts to parse an element extension.</summary>
      <returns>A value that specifies whether the element extension was parsed successfully.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
      <param name="version">The syndication version to use while parsing.</param>
      <exception cref="T:System.Xml.XmlException">Invalid XML encountered during read.</exception>
    </member>
    <member name="P:System.ServiceModel.Syndication.SyndicationPerson.Uri">
      <summary>Gets or sets the URI of the <see cref="T:System.ServiceModel.Syndication.SyndicationPerson" />.</summary>
      <returns>The URI of the person's Web site.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.WriteAttributeExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the attribute extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.SyndicationPerson.WriteElementExtensions(System.Xml.XmlWriter,System.String)">
      <summary>Writes the element extensions to the specified <see cref="T:System.Xml.XmlWriter" /> using the specified syndication version.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlReader" /> to write to.</param>
      <param name="version">The syndication version to use while writing.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.SyndicationVersions">
      <summary>A class that represents the syndication versions supported by Silverlight version 2.</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.SyndicationVersions.Atom10">
      <summary>Represents support for the Atom 1.0 specification.</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.SyndicationVersions.Rss20">
      <summary>Represents support for the RSS 2.0 specification.</summary>
    </member>
    <member name="T:System.ServiceModel.Syndication.TextSyndicationContent">
      <summary>Represents any <see cref="T:System.ServiceModel.Syndication.SyndicationItem" /> content intended to be displayed to an end user.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.#ctor(System.ServiceModel.Syndication.TextSyndicationContent)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> with the specified <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> with the specified text.</summary>
      <param name="text">The text of the content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.#ctor(System.String,System.ServiceModel.Syndication.TextSyndicationContentKind)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> with the specified text and <see cref="T:System.ServiceModel.Syndication.TextSyndicationContentKind" />.</summary>
      <param name="text">The text of the content.</param>
      <param name="textKind">The <see cref="T:System.ServiceModel.Syndication.TextSyndicationContentKind" /> that describes the content.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.Clone">
      <summary>Creates a copy of the existing <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.TextSyndicationContent.Text">
      <summary>Gets the text of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" />.</summary>
      <returns>The text of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.TextSyndicationContent.Type">
      <summary>Gets the content type of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" />.</summary>
      <returns>The kind of text syndication content.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.TextSyndicationContent.WriteContentsTo(System.Xml.XmlWriter)">
      <summary>Writes the contents of the <see cref="T:System.ServiceModel.Syndication.TextSyndicationContent" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.TextSyndicationContentKind">
      <summary>An enumeration that represents the supported types of text syndication content.</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.TextSyndicationContentKind.Plaintext">
      <summary>Plain text.</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.TextSyndicationContentKind.Html">
      <summary>HTML (escaped markup).</summary>
    </member>
    <member name="F:System.ServiceModel.Syndication.TextSyndicationContentKind.XHtml">
      <summary>XML (not escaped).</summary>
    </member>
    <member name="T:System.ServiceModel.Syndication.UrlSyndicationContent">
      <summary>Represents syndication content that consists of a URL to another resource.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.UrlSyndicationContent.#ctor(System.ServiceModel.Syndication.UrlSyndicationContent)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> class with the specified <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.UrlSyndicationContent.#ctor(System.Uri,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> class with the specified <see cref="T:System.Uri" /> and media type.</summary>
      <param name="url">The <see cref="T:System.Uri" />.</param>
      <param name="mediaType">The media type of the resource referenced by the <see cref="T:System.Uri" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.UrlSyndicationContent.Clone">
      <summary>Creates a copy of the existing <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance that contains the new copy of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.UrlSyndicationContent.Type">
      <summary>Gets the content type of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" />.</summary>
      <returns>The content type of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" />.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.UrlSyndicationContent.Url">
      <summary>Gets the <see cref="T:System.Uri" /> for the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" />.</summary>
      <returns>A <see cref="T:System.Uri" /> instance that contains the URI for the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.UrlSyndicationContent.WriteContentsTo(System.Xml.XmlWriter)">
      <summary>Writes the contents of the <see cref="T:System.ServiceModel.Syndication.UrlSyndicationContent" /> instance to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
    <member name="T:System.ServiceModel.Syndication.XmlSyndicationContent">
      <summary>Represents XML syndication content that is not intended to be displayed in a browser.</summary>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.ServiceModel.Syndication.XmlSyndicationContent)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> with the specified <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</summary>
      <param name="source">The <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.String,System.Object,System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> with the specified type, object, and <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</summary>
      <param name="type">The type of content.</param>
      <param name="dataContractExtension">The data contract extension.</param>
      <param name="dataContractSerializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.String,System.Object,System.Xml.Serialization.XmlSerializer)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> with the specified type, object and <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <param name="type">The type of content.</param>
      <param name="xmlSerializerExtension">The XML serializer extension.</param>
      <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer" /> to use.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.String,System.ServiceModel.Syndication.SyndicationElementExtension)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> with the specified type and <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" />.</summary>
      <param name="type">The type of the content, typically expressed as a MIME content type, for example application/xml or application/xml+customer.</param>
      <param name="extension">The <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> to place in the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" />.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.#ctor(System.Xml.XmlReader)">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> class.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> to read from.</param>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.Clone">
      <summary>Creates a copy of the existing <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> instance.</summary>
      <returns>A new <see cref="T:System.ServiceModel.Syndication.SyndicationContent" /> instance.</returns>
    </member>
    <member name="P:System.ServiceModel.Syndication.XmlSyndicationContent.Extension">
      <summary>Gets the <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" />.</summary>
      <returns>A <see cref="T:System.ServiceModel.Syndication.SyndicationElementExtension" /> instance.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.GetReaderAtContent">
      <summary>Gets a reader from the content of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryReader" /> from the content of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" />.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.ReadContent``1">
      <summary>Reads the content of the specified type into the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" />.</summary>
      <returns>An object of the specified type.</returns>
      <typeparam name="TContent">The type of content to read.</typeparam>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.ReadContent``1(System.Runtime.Serialization.XmlObjectSerializer)">
      <summary>Reads the content of the specified type into the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> using the specified serializer.</summary>
      <returns>An object of the specified type.</returns>
      <param name="dataContractSerializer">The <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> to use.</param>
      <typeparam name="TContent">The type of content to read.</typeparam>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.ReadContent``1(System.Xml.Serialization.XmlSerializer)">
      <summary>Reads the content of the specified type into the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> using the specified serializer.</summary>
      <returns>An object of the specified type.</returns>
      <param name="serializer">The <see cref="T:System.Xml.Serialization.XmlSerializer" /> to use.</param>
      <typeparam name="TContent">The type of content to read.</typeparam>
      <exception cref="T:System.InvalidOperationException">The input XML cannot be deserialized into the requested type.</exception>
    </member>
    <member name="P:System.ServiceModel.Syndication.XmlSyndicationContent.Type">
      <summary>Gets the type of the XML syndication content.</summary>
      <returns>The XML syndication content type.</returns>
    </member>
    <member name="M:System.ServiceModel.Syndication.XmlSyndicationContent.WriteContentsTo(System.Xml.XmlWriter)">
      <summary>Write the contents of the <see cref="T:System.ServiceModel.Syndication.XmlSyndicationContent" /> to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write to.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\2.0.31005.0\Libraries\Client\system.json.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Json</name>
  </assembly>
  <members>
    <member name="T:System.Json.JsonArray">
      <summary>A <see cref="T:System.Json.JsonArray" /> is an ordered sequence of zero or more <see cref="T:System.Json.JsonValue" /> objects.</summary>
    </member>
    <member name="M:System.Json.JsonArray.#ctor(System.Collections.Generic.IEnumerable{System.Json.JsonValue})">
      <summary>Creates an instance of the <see cref="T:System.Json.JsonArray" /> class initialized by an <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumeration of objects of type <see cref="T:System.Json.JsonValue" />.</summary>
      <param name="items">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> enumeration of objects of type <see cref="T:System.Json.JsonValue" /> used to initialize the JavaScript Object Notation (JSON) array.</param>
    </member>
    <member name="M:System.Json.JsonArray.#ctor(System.Json.JsonValue[])">
      <summary>Creates an instance of the <see cref="T:System.Json.JsonArray" /> class, initialized by an array of type <see cref="T:System.Json.JsonValue" />.</summary>
      <param name="items">The array of type <see cref="T:System.Json.JsonValue" /> used to initialize the JavaScript Object Notation (JSON) array.</param>
    </member>
    <member name="M:System.Json.JsonArray.Add(System.Json.JsonValue)">
      <summary>Adds a <see cref="T:System.Json.JsonValue" /> object to the end of the array.</summary>
      <param name="item">The <see cref="T:System.Json.JsonValue" /> object to add.</param>
    </member>
    <member name="M:System.Json.JsonArray.AddRange(System.Collections.Generic.IEnumerable{System.Json.JsonValue})">
      <summary>Adds the elements from a collection of type <see cref="T:System.Json.JsonValue" /> to the <see cref="T:System.Json.Array" />.</summary>
      <param name="items">Collection of types to add.</param>
    </member>
    <member name="M:System.Json.JsonArray.AddRange(System.Json.JsonValue[])">
      <summary>Adds the elements from an array of type <see cref="T:System.Json.JsonValue" /> to the <see cref="T:System.Json.Array" />.</summary>
      <param name="items">The array of type <see cref="T:System.Json.JsonValue" /> to be added to the <see cref="T:System.Json.Array" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonArray.Clear">
      <summary>Removes all JSON CLR types from the <see cref="T:System.Json.JsonArray" />.</summary>
    </member>
    <member name="M:System.Json.JsonArray.Contains(System.Json.JsonValue)">
      <summary>Checks whether a specified JSON CLR type is in the <see cref="T:System.Json.JsonArray" />.</summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Json.JsonArray" />; otherwise, false.</returns>
      <param name="item">The <see cref="T:System.Json.JsonValue" /> to check for in the array. </param>
    </member>
    <member name="M:System.Json.JsonArray.CopyTo(System.Json.JsonValue[],System.Int32)">
      <summary>Copies the contents of the current JSON CLR array instance into a specified destination array beginning at the specified index.</summary>
      <param name="array">The destination <see cref="T:System.Json.JsonArray" /> to which the elements of the current <see cref="T:System.Json.JsonArray" /> object are copied</param>
      <param name="arrayIndex">The zero-based index in the destination array at which the copying of the elements of the JSON CLR array begins.</param>
    </member>
    <member name="P:System.Json.JsonArray.Count">
      <summary>Returns the number of <see cref="T:System.Json.JsonValue" /> elements in the array.</summary>
      <returns>The number of <see cref="T:System.Json.JsonValue" /> objects in the <see cref="T:System.Json.JsonArray" />.
</returns>
    </member>
    <member name="M:System.Json.JsonArray.IndexOf(System.Json.JsonValue)">
      <summary>Searches for a specified object and returns the zero-based index of its first occurrence within the <see cref="T:System.Json.JsonArray" />.</summary>
      <returns>The zero-based index of the first occurrence of <paramref name="item" /> within the <see cref="T:System.Json.JsonArray" />, if found; otherwise, –1.</returns>
      <param name="item">The <see cref="T:System.Json.JsonValue" /> object to look up. </param>
    </member>
    <member name="M:System.Json.JsonArray.Insert(System.Int32,System.Json.JsonValue)">
      <summary>Insert a JSON CLR type into the array at a specified index.</summary>
      <param name="index">The zero-based index at which the item should be inserted.</param>
      <param name="item">The <see cref="T:System.Json.JsonValue" /> object to insert.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="items" /> is less than zero or larger than the size of the array.</exception>
    </member>
    <member name="P:System.Json.JsonArray.IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Json.JsonArray" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Json.JsonArray" />is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Json.JsonArray.Item(System.Int32)">
      <summary>Gets or sets the JSON value at a specified index.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index for the array.</exception>
      <exception cref="T:System.ArgumentException">The property is set and the <paramref name="value" /> is of a type that is not assignable to the array.</exception>
    </member>
    <member name="P:System.Json.JsonArray.JsonType">
      <summary>Gets the JSON type of the <see cref="T:System.Json.JsonArray" />.</summary>
      <returns>Returns <see cref="F:System.Json.JsonType.Array" />.</returns>
    </member>
    <member name="M:System.Json.JsonArray.Remove(System.Json.JsonValue)">
      <summary>Removes the first occurrence of the specified JSON value from the array.</summary>
      <returns>true if <paramref name="item" /> is successfully removed; otherwise, false. This method also returns false if <paramref name="item" /> was not found in the <see cref="T:System.Json.JsonArray" />.</returns>
      <param name="item">The <see cref="T:System.Json.JsonValue" /> to remove from the <see cref="T:System.Json.JsonArray" />.</param>
    </member>
    <member name="M:System.Json.JsonArray.RemoveAt(System.Int32)">
      <summary>Remove the JSON value at a specified index of <see cref="T:System.Json.JsonArray" />.</summary>
      <param name="index">The zero-based index at which to remove the <see cref="T:System.Json.JsonValue" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero or <paramref name="index" /> is equal or larger than the size of the array.</exception>
    </member>
    <member name="M:System.Json.JsonArray.Save(System.IO.Stream)">
      <summary>Serializes a JSON CLR array type into a stream of text-based JSON.</summary>
      <param name="stream">The stream to which the text-based JSON is written.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonArray.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Json.JsonValue" /> objects in the array.</summary>
      <returns>Returns an <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that iterates through the <see cref="T:System.Json.JsonValue" /> elements in the <see cref="T:System.Json.JsonArray" />.</returns>
    </member>
    <member name="M:System.Json.JsonArray.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Json.JsonValue" /> objects in the array.</summary>
      <returns>Returns an <see cref="T:System.Collections.IEnumerator" /> object that iterates through the <see cref="T:System.Json.JsonValue" /> elements in the <see cref="T:System.Json.JsonArray" />.
</returns>
    </member>
    <member name="T:System.Json.JsonObject">
      <summary>A <see cref="T:System.Json.JsonObject" /> is an unordered collection of zero or more key/value pairs.</summary>
    </member>
    <member name="M:System.Json.JsonObject.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue}})">
      <summary>Creates an instance of the <see cref="T:System.Json.JsonObject" /> class initialized with a <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of key/value pairs.</summary>
      <param name="items">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of <see cref="T:System.Collections.Generic.KeyValuePair`2" /> used to initialize the key/value pairs</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonObject.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue}[])">
      <summary>Creates an instance of the <see cref="T:System.Json.JsonObject" /> class initialized with a collection of key/value pairs.</summary>
      <param name="items">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> object used to initialize the key/value pairs.</param>
    </member>
    <member name="M:System.Json.JsonObject.#ctor(System.DateTimeOffset)">
      <summary>Creates an instance of the <see cref="T:System.Json.JsonObject" /> class initialized with a <see cref="T:System.DateTimeOffset" />.</summary>
      <param name="dto">The <see cref="T:System.DateTimeOffset" /> used to initialize the object.</param>
    </member>
    <member name="M:System.Json.JsonObject.Add(System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue})">
      <summary>Adds a key/value pair to the JSON CLR object.</summary>
      <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to add.</param>
    </member>
    <member name="M:System.Json.JsonObject.Add(System.String,System.Json.JsonValue)">
      <summary>Adds a key/value pair to the JSON CLR object type.</summary>
      <param name="key">The key for the element added.</param>
      <param name="value">The <see cref="T:System.Json.JsonValue" /> for the element added.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonObject.AddRange(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue}})">
      <summary>Adds a specified collection of key/value pairs to the current instance of the <see cref="T:System.Json.JsonObject" />.</summary>
      <param name="items">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of key/value pairs to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="items" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonObject.AddRange(System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue}[])">
      <summary>Adds a specified array of key/value pairs to the current instance of <see cref="T:System.Json.JsonObject" />.</summary>
      <param name="items">Collection of key/value pairs.</param>
    </member>
    <member name="M:System.Json.JsonObject.Clear">
      <summary>Removes all key/value pairs from the JSON CLR object.</summary>
    </member>
    <member name="M:System.Json.JsonObject.ContainsKey(System.String)">
      <summary>Checks whether a key/value pair with a specified key exists in the JSON CLR object type.</summary>
      <returns>true if the JSON CLR object contains the <paramref name="key" />; otherwise, false.
</returns>
      <param name="key">The key to check for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonObject.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue}[],System.Int32)">
      <summary>Copies the contents of the JSON CLR object into a specified key/value destination array beginning at a specified index.</summary>
      <param name="array">The destination array of type <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to which the elements of the <see cref="T:System.Json.JsonObject" /> are copied</param>
      <param name="arrayIndex">The zero-based index at which to begin the insertion of the contents from the JSON CLR object type.</param>
    </member>
    <member name="P:System.Json.JsonObject.Count">
      <summary>Returns the number of key/value pairs in the <see cref="T:System.Json.JsonObject" />.</summary>
      <returns>The number of key/value pairs in the JSON CLR object.</returns>
    </member>
    <member name="M:System.Json.JsonObject.GetEnumerator">
      <summary>Returns an enumerator over the key/value pairs contained in the JSON CLR object type.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" />.</returns>
    </member>
    <member name="P:System.Json.JsonObject.Item(System.String)">
      <summary>Gets or sets an indexer used to look up a key/value pair based on a specified key.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> that contains the key/value pair looked up.</returns>
      <param name="key">The key of the pair to look up.</param>
    </member>
    <member name="P:System.Json.JsonObject.JsonType">
      <summary>Gets the JSON type of the <see cref="T:System.Json.JsonObject" />.</summary>
      <returns>Returns <see cref="F:System.Json.JsonType.Object" />.</returns>
    </member>
    <member name="P:System.Json.JsonObject.Keys">
      <summary>Returns a collection that contains the keys in the <see cref="T:System.Json.JsonObject" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> that contains the keys from the JSON CLR object.</returns>
    </member>
    <member name="M:System.Json.JsonObject.Remove(System.String)">
      <summary>Removes the key/value pair with a specified key from the JSON CLR object type.</summary>
      <returns>true if the element is successfully found and removed; otherwise, false. This method returns false if <paramref name="key" /> is not found in the JSON CLR object.</returns>
      <param name="key">The key of the item to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonObject.Save(System.IO.Stream)">
      <summary>Serializes a JSON CLR object into text-based JSON.</summary>
      <param name="stream">The stream to which the text-based JSON is written.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonObject.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue})">
      <summary>Checks whether the <see cref="T:System.Json.JsonObject" /> contains a specified key/value pair.</summary>
      <returns>true if the <paramref name="item" /> is contained in the instance of the <see cref="T:System.Json.JsonObject" />; otherwise, false.</returns>
      <param name="item">The key/value pair to check for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Json.JsonObject.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value that indicates whether this JSON CLR object is read-only.</summary>
      <returns>true if it is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Json.JsonObject.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Json.JsonValue})">
      <summary>Removes the first occurrence of a specified key/value pair from the <see cref="T:System.Json.JsonObject" />.</summary>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Json.JsonObject" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the <see cref="T:System.Json.JsonObject" />.</returns>
      <param name="item">The key/value pair to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="item" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the key/value pairs in the <see cref="T:System.Json.JsonObject" />.</summary>
      <returns>
an <see cref="T:System.Collections.IEnumerator" /> object that iterates through the key/value pairs in the <see cref="T:System.Json.JsonObject" />.
</returns>
    </member>
    <member name="M:System.Json.JsonObject.TryGetValue(System.String,System.Json.JsonValue@)">
      <summary>Attempts to get the value that corresponds to the specified key.</summary>
      <returns>true if the instance of the <see cref="T:System.Json.JsonObject" /> contains an element with the specified <paramref name="key" />; otherwise, false.</returns>
      <param name="key">The key of the value to retrieve.</param>
      <param name="value">The primitive or structured <see cref="T:System.Json.JsonValue" /> object that has the <paramref name="key" /> specified. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Json.JsonObject.Values">
      <summary>Returns a collection that contains the values in the <see cref="T:System.Json.JsonObject" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> that contains the set of <see cref="T:System.Json.JsonValues" /> from the JSON CLR object.</returns>
    </member>
    <member name="T:System.Json.JsonPrimitive">
      <summary>Represents a JavaScript Object Notation (JSON) primitive type in the Common Language Runtime (CLR).</summary>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Boolean)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Boolean" /> type.</summary>
      <param name="value">The <see cref="T:System.Boolean" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Byte)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Byte" /> type.</summary>
      <param name="value">The <see cref="T:System.Byte" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Char)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Char" /> type.</summary>
      <param name="value">The <see cref="T:System.Char" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.DateTime)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.DateTime" /> type.</summary>
      <param name="value">The <see cref="T:System.DateTime" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Decimal)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Decimal" /> type.</summary>
      <param name="value">The <see cref="T:System.Decimal" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Double)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Double" /> type.</summary>
      <param name="value">The <see cref="T:System.Double" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Guid)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Guid" /> type.</summary>
      <param name="value">The <see cref="T:System.Guid" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Int16)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Int16" /> type.</summary>
      <param name="value">The <see cref="T:System.Int16" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Int32)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Int32" /> type.</summary>
      <param name="value">The <see cref="T:System.Int32" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Int64)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Int64" /> type.</summary>
      <param name="value">The <see cref="T:System.Int64" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.SByte)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.SByte" /> type.</summary>
      <param name="value">The <see cref="T:System.SByte" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Single)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Single" /> type.</summary>
      <param name="value">The <see cref="T:System.Single" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.String)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.String" /> type.</summary>
      <param name="value">The <see cref="T:System.String" /> object that initializes the new instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.TimeSpan)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.TimeSpan" /> type.</summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.UInt16)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.UInt16" /> type.</summary>
      <param name="value">The <see cref="T:System.UInt16" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.UInt32)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.UInt32" /> type.</summary>
      <param name="value">The <see cref="T:System.UInt32" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.UInt64)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.UInt64" /> type.</summary>
      <param name="value">The <see cref="T:System.UInt64" /> object that initializes the new instance.</param>
    </member>
    <member name="M:System.Json.JsonPrimitive.#ctor(System.Uri)">
      <summary>Initializes a new instance of a <see cref="T:System.Json.JsonPrimitive" /> type with a <see cref="T:System.Uri" /> type.</summary>
      <param name="value">The <see cref="T:System.Uri" /> object that initializes the new instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="P:System.Json.JsonPrimitive.JsonType">
      <summary>Gets the <see cref="T:System.JsonType" /> that is associated with this <see cref="T:System.Json.JsonPrimitive" /> object.</summary>
      <returns>Each <see cref="T:System.Json.JsonPrimitive" /> object is associated with a <see cref="T:System.JsonType" /> that is determined by the type of CLR object used to initiate it.
</returns>
    </member>
    <member name="M:System.Json.JsonPrimitive.Save(System.IO.Stream)">
      <summary>Serializes the <see cref="T:System.Json.JsonPrimitive" /> object into text-based JSON.</summary>
      <param name="stream">The stream to which the text-based JSON is written.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="T:System.Json.JsonType">
      <summary>An enumeration that specifies primitive and structured JavaScript Object Notation (JSON) Common Language Runtime (CLR) types.</summary>
    </member>
    <member name="F:System.Json.JsonType.String">
      <summary>Specifies the JSON string CLR type.</summary>
    </member>
    <member name="F:System.Json.JsonType.Number">
      <summary>Specifies the JSON number CLR type.</summary>
    </member>
    <member name="F:System.Json.JsonType.Object">
      <summary>Specifies the JSON object CLR type that consists of an unordered collection of key/value pairs, where the key is of type <see cref="T:System.String" /> and the value is of type <see cref="T:System.Json.JsonValue" />, which can, in turn, be either a primitive or a structured JSON type. </summary>
    </member>
    <member name="F:System.Json.JsonType.Array">
      <summary>Specifies the JSON array CLR type that consists of an ordered collection of <see cref="T:System.Json.JsonValue" /> types, which can, in turn, be either primitive or structured JSON types.</summary>
    </member>
    <member name="F:System.Json.JsonType.Boolean">
      <summary>Specifies the JSON Boolean CLR type.</summary>
    </member>
    <member name="T:System.Json.JsonValue">
      <summary>This is the abstract base class for JavaScript Object Notation (JSON) Common Language Runtime (CLR) types. </summary>
    </member>
    <member name="M:System.Json.JsonValue.ContainsKey(System.String)">
      <summary>Throws an <see cref="T:System.InvalidOperationException" />.</summary>
      <returns>
Returns <see cref="T:System.Boolean" />.
</returns>
      <param name="key">The key to check.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="P:System.Json.JsonValue.Count">
      <summary>This method is not supported and throws an exception when called.</summary>
      <returns>
Returns <see cref="T:System.Int32" />. 
</returns>
    </member>
    <member name="P:System.Json.JsonValue.Item(System.Int32)">
      <summary>This indexer is not supported for this base class and throws an exception.</summary>
      <returns>
A <see cref="T:System.Json.JsonValue" />.
</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
    </member>
    <member name="P:System.Json.JsonValue.Item(System.String)">
      <summary>This indexer is not supported for this base class and throws an exception.</summary>
      <returns>
Returns <see cref="T:System.Json.JsonValue" />.
</returns>
      <param name="key">The key of the element to get or set.</param>
    </member>
    <member name="P:System.Json.JsonValue.JsonType">
      <summary>When implemented in a derived class, indicates the JSON CLR type represented by the derived type.</summary>
      <returns>
Returns <see cref="T:System.Json.JsonType" /> .
</returns>
    </member>
    <member name="M:System.Json.JsonValue.Load(System.IO.Stream)">
      <summary>Deserializes text-based JSON from a stream into a JSON CLR type.</summary>
      <returns>
Returns a class derived from <see cref="T:System.Json.JsonValue" /> that contains the deserialized text-based JSON.</returns>
      <param name="stream">A <see cref="T:System.IO.Stream" /> that contains text-based JSON content.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonValue.Load(System.IO.TextReader)">
      <summary>Deserializes text-based JSON from a text reader into a JSON CLR type.</summary>
      <returns>
Returns a class derived from <see cref="T:System.Json.JsonValue" /> that contains the deserialized text-based JSON.</returns>
      <param name="textReader">A <see cref="T:System.IO.TextReader" /> over text-based JSON content.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Boolean)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Boolean" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Boolean" /> specified.</returns>
      <param name="value">The <see cref="T:System.Boolean" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Byte)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System. Byte" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System. Byte" /> specified.
</returns>
      <param name="value">The <see cref="T:System.Byte" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Char)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Char" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System. Char" /> specified.
</returns>
      <param name="value">The <see cref="T:System.Char" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.DateTime)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.DateTime" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.DateTime" /> specified.</returns>
      <param name="value">The <see cref="T:System.DateTime" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.DateTimeOffset)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.DateTimeOffset" /> to a <see cref="T:System.JsonObject" />.</summary>
      <returns>The <see cref="T:System.Json.JsonObject" /> initialized with the <see cref="T:System.DateTimeOffset" /> specified.</returns>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> instance used to initialize the <see cref="T:System.JsonObject" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Decimal)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Decimal" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Decimal" /> specified.</returns>
      <param name="value">The <see cref="T:System.Decimal" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Double)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Double" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Double" /> specified.</returns>
      <param name="value">The <see cref="T:System.Double" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Guid)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Guid" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Guid" /> specified.</returns>
      <param name="value">The <see cref="T:System.Guid" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Int16)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Int16" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Int16" /> specified.</returns>
      <param name="value">The <see cref="T:System.Int16" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Int32)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Int32" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Int32" /> specified.</returns>
      <param name="value">The <see cref="T:System.Int32" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Int64)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Int64" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Int64" /> specified.</returns>
      <param name="value">The <see cref="T:System.Int64" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.DateTime">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Datetime" /> object.</summary>
      <returns>The <see cref="T:System.DateTime" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.DateTime" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.String" /> and so cannot be cast to <see cref="T:System.DateTime" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.TimeSpan">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.TimeSpan" /> object.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.TimeSpan" /> object.</param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.String" /> and so cannot be cast to <see cref="T:System.TimeSpan" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Boolean">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Boolean" /> object.</summary>
      <returns>The <see cref="T:System.Boolean" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Boolean" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Boolean" /> and so cannot be cast to <see cref="T:System.Boolean" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Char">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Char" /> object.</summary>
      <returns>The <see cref="T:System.Char" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Char" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.String" /> and so cannot be cast to <see cref="T:System.Boolean" />, or there is not exactly one character in the <paramref name="value" /> parameter.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Int64">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Int64" /> object.</summary>
      <returns>The <see cref="T:System.Int64" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Int64" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.Int64" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Decimal">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Decimal" /> object.</summary>
      <returns>The <see cref="T:System.Decimal" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Decimal" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.Decimal" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Int32">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Int32" /> object.</summary>
      <returns>The <see cref="T:System.Int32" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Int32" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.UInt64">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.UInt64" /> object.</summary>
      <returns>The <see cref="T:System.UInt64" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.UInt64" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.UInt64" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.String">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.String" /> object.</summary>
      <returns>The <see cref="T:System.String" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified or null if <paramref name="value" /> is null.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.String" /> object.</param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.String" /> and so cannot be cast to <see cref="T:System.String" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.DateTimeOffset">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.DateTimeOffset" /> object.</summary>
      <returns>The <see cref="T:System.DateTimeOffset" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.DateTimeOffset" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Object" /> and the object does not contain two fields that are called “DateTime” and “OffsetMinutes”. </exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Single">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Single" /> object.</summary>
      <returns>The <see cref="T:System.Single" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Single" /> object.</param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.Single" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Double">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Double" /> object.</summary>
      <returns>The <see cref="T:System.Double" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Double" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.Double" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.SByte">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.SByte" /> object.</summary>
      <returns>The <see cref="T:System.SByte" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.SByte" /> object.</param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.SByte" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Byte">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Byte" /> object.</summary>
      <returns>The <see cref="T:System.Byte" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Byte" /> object.</param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.Byte" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Uri">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Uri" /> object.</summary>
      <returns>The <see cref="T:System.Uri" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified, or null if <paramref name="value" /> is null.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Uri" /> object.</param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.String" /> and so cannot be cast to <see cref="T:System.Uri" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.UInt16">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.UInt16" /> object.</summary>
      <returns>The <see cref="T:System.UInt16" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.UInt16" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.UInt16" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.UInt32">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.UInt32" /> object.</summary>
      <returns>The <see cref="T:System.UInt32" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.UInt32" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.UInt32" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Int16">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Int16" /> object.</summary>
      <returns>The <see cref="T:System.Int16" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Int16" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.Number" /> and so cannot be cast to <see cref="T:System.Int16" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Json.JsonValue)~System.Guid">
      <summary>Enables implicit casts from an instance of type <see cref="T:System.Json.JsonValue" /> to a <see cref="T:System.Guid" /> object.</summary>
      <returns>The <see cref="T:System.Guid" /> initialized with the <see cref="T:System.Json.JsonValue" /> value specified.</returns>
      <param name="value">The instance of <see cref="T:System.Json.JsonValue" /> used to initialize the <see cref="T:System.Guid" /> object. </param>
      <exception cref="T:System.InvalidCastException">The <see cref="P:System.Json.JsonValue.JsonType" /> of <paramref name="value" /> is not a <see cref="F:System.Json.JsonType.String" /> and so cannot be cast to <see cref="T:System.Guid" />.</exception>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.SByte)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.SByte" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.SByte" /> specified.</returns>
      <param name="value">The <see cref="T:System.SByte" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Single)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Single" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Single" /> specified.</returns>
      <param name="value">The <see cref="T:System.Single" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.String)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.String" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.String" /> specified, or null if <paramref name="value" /> is null.</returns>
      <param name="value">The <see cref="T:System.String" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.TimeSpan)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Timespan" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Timespan" /> specified.</returns>
      <param name="value">The <see cref="T:System.Timespan" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.UInt16)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.UInt16" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.UInt16" /> specified.</returns>
      <param name="value">The <see cref="T:System.UInt16" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.UInt32)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.UInt32" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.UInt32" /> specified.</returns>
      <param name="value">The <see cref="T:System.UInt32" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.UInt64)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.UInt64" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.UInt64" /> specified.</returns>
      <param name="value">The <see cref="T:System.UInt64" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.op_Implicit(System.Uri)~System.Json.JsonValue">
      <summary>Enables implicit casts from type <see cref="T:System.Uri" /> to a <see cref="T:System.JsonPrimitive" />.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> initialized with the <see cref="T:System.Uri" /> specified, or null if <paramref name="value" /> is null.</returns>
      <param name="value">The <see cref="T:System.Uri" /> instance used to initialize the <see cref="T:System.JsonPrimitive" />.</param>
    </member>
    <member name="M:System.Json.JsonValue.Parse(System.String)">
      <summary>Deserializes text-based JSON into a JSON CLR type.</summary>
      <returns>The <see cref="T:System.Json.JsonValue" /> object that represents the parsed text-based JSON as a CLR type. </returns>
      <param name="jsonString">The text-based JSON to be parsed into a JSON CLR type.</param>
      <exception cref="T:System.ArgumentException">The length of <paramref name="jsonString" /> is zero.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="jsonString" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonValue.Save(System.IO.Stream)">
      <summary>When implemented in a derived class, serializes the <see cref="T:System.Json.JsonValue" /> CLR type into text-based JSON using a stream.</summary>
      <param name="stream">Stream to which to write text-based JSON.</param>
    </member>
    <member name="M:System.Json.JsonValue.Save(System.IO.TextWriter)">
      <summary>Serializes the <see cref="T:System.Json.JsonValue" /> CLR type into text-based JSON using a text writer.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write text-based JSON.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textWriter" /> is null.</exception>
    </member>
    <member name="M:System.Json.JsonValue.System#Collections#IEnumerable#GetEnumerator">
      <summary>This method is not supported for this base class and throws an exception. </summary>
      <returns>
An <see cref="T:System.Collections.IEnumerator" />.
</returns>
    </member>
    <member name="M:System.Json.JsonValue.ToString">
      <summary>Saves (serializes) this JSON CLR type into text-based JSON.</summary>
      <returns>
Returns <see cref="T:System.String" />, which contains text-based JSON.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\2.0.31005.0\Libraries\Client\system.windows.controls.data.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Windows.Controls.Data</name>
  </assembly>
  <members>
    <member name="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1">
      <summary>
                    Represents a read-only <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.
                </summary>
      <typeparam name="T">
                    The type of objects that the collection holds.
                </typeparam>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.#ctor(System.Collections.ObjectModel.ObservableCollection{`0})">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Collections.ObjectModel.ReadOnlyObservableCollection`1" /> class that serves as a wrapper for the specified <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.
                </summary>
      <param name="list">
                    The collection to wrap.
                </param>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged">
      <summary>
                    Occurs when an item is added or removed.
                </summary>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.CollectionChanged" /> event. 
                </summary>
      <param name="args">
                    The event data.
                </param>
    </member>
    <member name="M:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged" /> event. 
                </summary>
      <param name="args">
                    The event data.
                </param>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.PropertyChanged">
      <summary>
                    Occurs when a property value changes.
                </summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>
                    For a description of this member, see <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.
                </summary>
    </member>
    <member name="E:System.Collections.ObjectModel.ReadOnlyObservableCollection`1.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>
                    For a description of this member, see <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.
                </summary>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event.
                </summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> class and sets the <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" /> property to true.
                </summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor(System.Boolean)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> class and sets the <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" /> property to the specified value.
                </summary>
      <param name="isCancelable">true to disable the ability to cancel a <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> change; false to enable cancellation.
                </param>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.Cancel">
      <summary>
                    Gets or sets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> change should be canceled. 
                </summary>
      <returns>true if the event should be canceled; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable">
      <summary>
                    Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> change can be canceled. 
                </summary>
      <returns>true if the event can be canceled; false if the event cannot be canceled.
                </returns>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventHandler">
      <summary>
                    Represents a method that can handle the <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> event of an <see cref="T:System.ComponentModel.ICollectionView" /> implementation. 
                </summary>
      <param name="sender">
                    The source of the event.
                </param>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="T:System.ComponentModel.GroupDescription">
      <summary>
                    Provides a base class for defining how to divide the items in a collection into groups.
                </summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.GroupDescription" /> class. 
                </summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
      <summary>
                    Returns the group name or names for the specified item.
                </summary>
      <returns>
                    An object that represents the group name or names.
                </returns>
      <param name="item">
                    The item to return the group name for.
                </param>
      <param name="level">
                    The level of the group within the grouping hierarchy.
                </param>
      <param name="culture">
                    The culture information that affects grouping.
                </param>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.GroupNames">
      <summary>
                    Gets the collection of group names.
                </summary>
      <returns>
                    The collection of group names. 
                </returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.NamesMatch(System.Object,System.Object)">
      <summary>
                    Indicates whether the specified item belongs in the specified group.
                </summary>
      <returns>true if the item belongs in the group; otherwise, false.
                </returns>
      <param name="groupName">
                    The name of the group to check.
                </param>
      <param name="itemName">
                    The name of the item to check.
                </param>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
                    Raises the <see cref="E:System.ComponentModel.GroupDescription.PropertyChanged" /> event. 
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.PropertyChanged">
      <summary>
                    Occurs when a property value has changed.
                </summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.ShouldSerializeGroupNames">
      <summary>
                    Indicates whether the group names should be serialized.
                </summary>
      <returns>true if the group names should be serialized; otherwise, false.
                </returns>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>
                    For a description of this member, see <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />.
                </summary>
    </member>
    <member name="T:System.ComponentModel.ICollectionView">
      <summary>
                    Enables collections to have the functionalities of current record management, custom sorting, filtering, and grouping.
                </summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanFilter">
      <summary>
                    Gets a value that indicates whether this view supports filtering by way of the <see cref="P:System.ComponentModel.ICollectionView.Filter" /> property.
                </summary>
      <returns>true if this view supports filtering; otherwise, false.
                </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanGroup">
      <summary>
                    Gets a value that indicates whether this view supports grouping by way of the <see cref="P:System.ComponentModel.ICollectionView.GroupDescriptions" /> property.
                </summary>
      <returns>true if this view supports grouping; otherwise, false.
                </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanSort">
      <summary>
                    Gets a value that indicates whether this view supports sorting by way of the <see cref="P:System.ComponentModel.ICollectionView.SortDescriptions" /> property.
                </summary>
      <returns>true if this view supports sorting; otherwise, false.
                </returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Contains(System.Object)">
      <summary>
                    Indicates whether the specified item belongs to this collection view. 
                </summary>
      <returns>true if the item belongs to this collection view; otherwise, false.
                </returns>
      <param name="item">
                    The object to check. 
                </param>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Culture">
      <summary>
                    Gets or sets the cultural information for any operations of the view that may differ by culture, such as sorting.
                </summary>
      <returns>
                    The culture information to use during culture-sensitive operations. 
                </returns>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanged">
      <summary>
                    Occurs after the current item has been changed.
                </summary>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanging">
      <summary>
                    Occurs before the current item changes.
                </summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentItem">
      <summary>
                    Gets the current item in the view.
                </summary>
      <returns>
                    The current item in the view or null if there is no current item.
                </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentPosition">
      <summary>
                    Gets the ordinal position of the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view.
                </summary>
      <returns>
                    The ordinal position of the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view.
                </returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.DeferRefresh">
      <summary>
                    Enters a defer cycle that you can use to merge changes to the view and delay automatic refresh. 
                </summary>
      <returns>
                    The typical usage is to create a using scope with an implementation of this method and then include multiple view-changing calls within the scope. The implementation should delay automatic refresh until after the using scope exits. 
                </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Filter">
      <summary>
                    Gets or sets a callback that is used to determine whether an item is appropriate for inclusion in the view. 
                </summary>
      <returns>
                    A method that is used to determine whether an item is appropriate for inclusion in the view.
                </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.GroupDescriptions">
      <summary>
                    Gets a collection of <see cref="T:System.ComponentModel.GroupDescription" /> objects that describe how the items in the collection are grouped in the view. 
                </summary>
      <returns>
                    A collection of objects that describe how the items in the collection are grouped in the view. 
                </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Groups">
      <summary>
                    Gets the top-level groups.
                </summary>
      <returns>
                    A read-only collection of the top-level groups or null if there are no groups.
                </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentAfterLast">
      <summary>
                    Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the end of the collection.
                </summary>
      <returns>true if the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the end of the collection; otherwise, false.
                </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentBeforeFirst">
      <summary>
                    Gets a value that indicates whether the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the start of the collection.
                </summary>
      <returns>true if the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> of the view is beyond the start of the collection; otherwise, false.
                </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsEmpty">
      <summary>
                    Gets a value that indicates whether the view is empty.
                </summary>
      <returns>true if the view is empty; otherwise, false.
                </returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentTo(System.Object)">
      <summary>
                    Sets the specified item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.
                </summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.
                </returns>
      <param name="item">
                    The item to set as the current item.
                </param>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToFirst">
      <summary>
                    Sets the first item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.
                </summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.
                </returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToLast">
      <summary>
                    Sets the last item in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.
                </summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.
                </returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToNext">
      <summary>
                    Sets the item after the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view as the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.
                </summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.
                </returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPosition(System.Int32)">
      <summary>
                    Sets the item at the specified index to be the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view.
                </summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.
                </returns>
      <param name="position">
                    The index to set the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> to.
                </param>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPrevious">
      <summary>
                    Sets the item before the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> in the view to the <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />.
                </summary>
      <returns>true if the resulting <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> is an item in the view; otherwise, false.
                </returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Refresh">
      <summary>
                    Recreates the view.
                </summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SortDescriptions">
      <summary>
                    Gets a collection of <see cref="T:System.ComponentModel.SortDescription" /> instances that describe how the items in the collection are sorted in the view.
                </summary>
      <returns>
                    A collection of values that describe how the items in the collection are sorted in the view.
                </returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SourceCollection">
      <summary>
                    Gets the underlying collection.
                </summary>
      <returns>
                    The underlying collection.
                </returns>
    </member>
    <member name="T:System.ComponentModel.InvalidEnumArgumentException">
      <summary>
                    The exception that is thrown when you pass an enumeration value that is not valid as a method argument. 
                </summary>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> class without a message.
                </summary>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> with the specified error message. 
                </summary>
      <param name="message">
                    The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. 
                </param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> class with the specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String,System.Int32,System.Type)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> class with the specified argument name, value, and type. 
                </summary>
      <param name="argumentName">
                    The name of the argument that is not valid.
                </param>
      <param name="invalidValue">
                    The argument value that is not valid.
                </param>
      <param name="enumClass">
                    The expected enumeration type.
                </param>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary>
                    Specifies the direction of a sort operation.
                </summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary>
                    Sorts in ascending order.
                </summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary>
                    Sorts in descending order.
                </summary>
    </member>
    <member name="T:System.ComponentModel.SortDescription">
      <summary>
                    Defines the direction and the property name that will be used as the criteria for sorting a collection.
                </summary>
    </member>
    <member name="M:System.ComponentModel.SortDescription.#ctor(System.String,System.ComponentModel.ListSortDirection)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.SortDescription" /> structure. 
                </summary>
      <param name="propertyName">
                    The name of the property to sort the list by.
                </param>
      <param name="direction">
                    The sort order.
                </param>
    </member>
    <member name="P:System.ComponentModel.SortDescription.Direction">
      <summary>
                    Gets or sets a value that indicates whether to sort in ascending or descending order.
                </summary>
      <returns>
                    A value that indicates the sort direction. 
                </returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.Equals(System.Object)">
      <summary>
                    Compares the specified instance and the current instance of <see cref="T:System.ComponentModel.SortDescription" /> for value equality.
                </summary>
      <returns>true if <paramref name="obj" /> and this <see cref="T:System.ComponentModel.SortDescription" /> instance have the same <see cref="P:System.ComponentModel.SortDescription.PropertyName" /> and <see cref="P:System.ComponentModel.SortDescription.Direction" /> values; otherwise, false.
                </returns>
      <param name="obj">
                    The <see cref="T:System.ComponentModel.SortDescription" /> instance to compare.
                </param>
    </member>
    <member name="M:System.ComponentModel.SortDescription.GetHashCode">
      <summary>
                    Returns the hash code for the current instance.
                </summary>
      <returns>
                    The hash code for the current instance.
                </returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.IsSealed">
      <summary>
                    Gets a value that indicates whether this structure is in an immutable state. 
                </summary>
      <returns>true if this object is being used; otherwise, false.
                </returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Equality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>
                    Compares two <see cref="T:System.ComponentModel.SortDescription" /> instances for value equality. 
                </summary>
      <returns>true if the two <see cref="T:System.ComponentModel.SortDescription" /> instances have the same <see cref="P:System.ComponentModel.SortDescription.PropertyName" /> and <see cref="P:System.ComponentModel.SortDescription.Direction" /> values; otherwise, false.
                </returns>
      <param name="sd1">
                    The first <see cref="T:System.ComponentModel.SortDescription" /> instance to compare.
                </param>
      <param name="sd2">
                    The second <see cref="T:System.ComponentModel.SortDescription" /> instance to compare.
                </param>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Inequality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>
                    Compares two <see cref="T:System.ComponentModel.SortDescription" /> instances for value inequality. 
                </summary>
      <returns>true if the two <see cref="T:System.ComponentModel.SortDescription" /> instances do not have the same <see cref="P:System.ComponentModel.SortDescription.PropertyName" /> and <see cref="P:System.ComponentModel.SortDescription.Direction" /> values; otherwise, false.
                </returns>
      <param name="sd1">
                    The first <see cref="T:System.ComponentModel.SortDescription" /> instance to compare.
                </param>
      <param name="sd2">
                    The second <see cref="T:System.ComponentModel.SortDescription" /> instance to compare.
                </param>
    </member>
    <member name="P:System.ComponentModel.SortDescription.PropertyName">
      <summary>
                    Gets or sets the property name being used as the sorting criteria.
                </summary>
      <returns>
                    The name of the property to sort by.
                </returns>
    </member>
    <member name="T:System.ComponentModel.SortDescriptionCollection">
      <summary>
                    Represents a collection of <see cref="T:System.ComponentModel.SortDescription" /> instances.
                </summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.ComponentModel.SortDescriptionCollection" /> class.
                </summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.ClearItems">
      <summary>
                    Removes all <see cref="T:System.ComponentModel.SortDescription" /> instances from the collection.
                </summary>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.CollectionChanged">
      <summary>
                    Occurs when a <see cref="T:System.ComponentModel.SortDescription" /> is added or removed.
                </summary>
    </member>
    <member name="F:System.ComponentModel.SortDescriptionCollection.Empty">
      <summary>
                    Gets an empty and non-modifiable <see cref="T:System.ComponentModel.SortDescriptionCollection" />.
                </summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.InsertItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>
                    Inserts a <see cref="T:System.ComponentModel.SortDescription" /> into the collection at the specified index.
                </summary>
      <param name="index">
                    The zero-based index where the <see cref="T:System.ComponentModel.SortDescription" /> is inserted.
                </param>
      <param name="item">
                    The <see cref="T:System.ComponentModel.SortDescription" /> to insert.
                </param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.RemoveItem(System.Int32)">
      <summary>
                    Removes the <see cref="T:System.ComponentModel.SortDescription" /> at the specified index in the collection.
                </summary>
      <param name="index">
                    The zero-based index of the <see cref="T:System.ComponentModel.SortDescription" /> to remove. 
                </param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.SetItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>
                    Replaces the <see cref="T:System.ComponentModel.SortDescription" /> at the specified index.
                </summary>
      <param name="index">
                    The zero-based index of the <see cref="T:System.ComponentModel.SortDescription" /> to replace.
                </param>
      <param name="item">
                    The new value for the <see cref="T:System.ComponentModel.SortDescription" /> at the specified index.
                </param>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>
                    For a description of this member, see <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.DataGridAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.DataGrid" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.#ctor(System.Windows.Controls.DataGrid)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DataGridAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.DataGrid" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.DataGridAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets the control pattern interface implementation for this <see cref="T:System.Windows.Automation.Peers.DataGridAutomationPeer" />.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values.
                </param>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#IGridProvider#ColumnCount">
      <summary>
                    Gets the total number of columns in a grid.
                </summary>
      <returns>
                    The total number of columns in a grid.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#IGridProvider#GetItem(System.Int32,System.Int32)">
      <summary>
                    Retrieves the UI Automation provider for the specified cell.
                </summary>
      <returns>
                    The UI Automation provider for the specified cell.
                </returns>
      <param name="row">
                    The ordinal number of the row of interest.
                </param>
      <param name="column">
                    The ordinal number of the column of interest.
                </param>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#IGridProvider#RowCount">
      <summary>
                    Gets the total number of rows in a grid.
                </summary>
      <returns>
                    The total number of rows in a grid.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#HorizontallyScrollable">
      <summary>
                    Gets a value that indicates whether the control can scroll horizontally.
                </summary>
      <returns>true if the control can scroll vertically; otherwise, false. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#HorizontalScrollPercent">
      <summary>
                    Gets the current horizontal scroll position.
                </summary>
      <returns>
                    The horizontal scroll position as a percentage of the total content area within the control.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#HorizontalViewSize">
      <summary>
                    Gets the current horizontal view size.
                </summary>
      <returns>
                    The horizontal size of the viewable region as a percentage of the total content area within the control.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#Scroll(System.Windows.Automation.ScrollAmount,System.Windows.Automation.ScrollAmount)">
      <summary>
                    Scrolls the visible region of the content area horizontally and vertically.
                </summary>
      <param name="horizontalAmount">
                    The horizontal increment specific to the control.
                </param>
      <param name="verticalAmount">
                    The vertical increment specific to the control.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#SetScrollPercent(System.Double,System.Double)">
      <summary>
                    Sets the horizontal and vertical scroll position as a percentage of the total content area within the control.
                </summary>
      <param name="horizontalPercent">
                    The horizontal position as a percentage of the content area's total range.
                </param>
      <param name="verticalPercent">
                    The vertical position as a percentage of the content area's total range.
                </param>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#VerticallyScrollable">
      <summary>
                    Gets a value that indicates whether the control can scroll vertically.
                </summary>
      <returns>true if the control can scroll vertically; otherwise, false. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#VerticalScrollPercent">
      <summary>
                    Gets the current vertical scroll position.
                </summary>
      <returns>
                    The vertical scroll position as a percentage of the total content area within the control.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#IScrollProvider#VerticalViewSize">
      <summary>
                    Gets the vertical view size.
                </summary>
      <returns>
                    The vertical size of the viewable region as a percentage of the total content area within the control. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#CanSelectMultiple">
      <summary>
                    Gets a value that indicates whether the UI Automation provider allows more than one child element to be selected concurrently.
                </summary>
      <returns>true if multiple selection is allowed; otherwise, false. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#GetSelection">
      <summary>
                    Retrieves a UI Automation provider for each child element that is selected.
                </summary>
      <returns>
                    A collection of UI Automation providers. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#IsSelectionRequired">
      <summary>
                    Gets a value that indicates whether the UI Automation provider requires at least one child element to be selected.
                </summary>
      <returns>true if multiple selection is allowed; otherwise, false. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#ITableProvider#GetColumnHeaders">
      <summary>
                    Gets a collection of UI Automation providers that represents all the column headers in a table.
                </summary>
      <returns>
                    A collection of UI Automation providers. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#ITableProvider#GetRowHeaders">
      <summary>
                    Retrieves a collection of UI Automation providers that represents all row headers in the table.
                </summary>
      <returns>
                    A collection of UI Automation providers. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridAutomationPeer.System#Windows#Automation#Provider#ITableProvider#RowOrColumnMajor">
      <summary>
                    Retrieves the primary direction of traversal for the table.
                </summary>
    </member>
    <member name="T:System.Windows.Automation.Peers.DataGridCellAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.DataGridCell" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.#ctor(System.Windows.Controls.DataGridCell)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DataGridCellAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.DataGridCell" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.DataGridCellAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets the control pattern for this <see cref="T:System.Windows.Automation.Peers.DataGridCellAutomationPeer" />.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values.
                </param>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#Column">
      <summary>
                    Gets the ordinal number of the column that contains the cell or item.
                </summary>
      <returns>
                    A zero-based ordinal number that identifies the column containing the cell or item. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#ColumnSpan">
      <summary>
                    Gets the number of columns spanned by a cell or item.
                </summary>
      <returns>
                    The number of columns spanned. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#ContainingGrid">
      <summary>
                    Gets a UI Automation provider that implements <see cref="T:System.Windows.Automation.Provider.IGridProvider" /> and represents the container of the cell or item.
                </summary>
      <returns>
                    A UI Automation provider that implements the GridPattern control pattern and represents the cell or item container. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#Row">
      <summary>
                    Gets the ordinal number of the row that contains the cell or item.
                </summary>
      <returns>
                    A zero-based ordinal number that identifies the row containing the cell or item. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#RowSpan">
      <summary>
                    Gets the number of rows spanned by a cell or item.
                </summary>
      <returns>
                    The number of rows spanned. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#IInvokeProvider#Invoke">
      <summary>
                    Sends a request to activate a control and initiate its single, unambiguous action.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#IScrollItemProvider#ScrollIntoView">
      <summary>
                    Scrolls the content area of a container object in order to display the control within the visible region (viewport) of the container.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
      <summary>
                    Adds the current element to the collection of selected items.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
      <summary>
                    Gets a value that indicates whether an item is selected.
                </summary>
      <returns>true if the element is selected; otherwise, false. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
      <summary>
                    Removes the current element from the collection of selected items. 
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
      <summary>
                    Deselects any selected items and then selects the current element.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
      <summary>
                    Gets the UI Automation provider that implements <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> and acts as the container for the calling object.
                </summary>
      <returns>
                    The provider that supports <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#ITableItemProvider#GetColumnHeaderItems">
      <summary>
                    Retrieves a collection of UI Automation providers representing all the column headers associated with a table item or cell.
                </summary>
      <returns>
                    A collection of UI Automation providers.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridCellAutomationPeer.System#Windows#Automation#Provider#ITableItemProvider#GetRowHeaderItems">
      <summary>
                    Retrieves a collection of UI Automation providers representing all the row headers associated with a table item or cell.
                </summary>
      <returns>
                    A collection of UI Automation providers.
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.Primitives.DataGridColumnHeader" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.#ctor(System.Windows.Controls.Primitives.DataGridColumnHeader)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DataGridAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.Primitives.DataGridColumnHeader" /> instance to associate with this <see cref="T:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets the control pattern for the <see cref="T:System.Windows.Controls.Primitives.DataGridColumnHeader" /> instance that is associated with this <see cref="T:System.Windows.Automation.Peers.DataGridAutomationPeer" />.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values that indicates the control pattern.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.System#Windows#Automation#Provider#IInvokeProvider#Invoke">
      <summary>
                    Sends a request to activate a control and initiate its single, unambiguous action.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.System#Windows#Automation#Provider#IScrollItemProvider#ScrollIntoView">
      <summary>
                    Scrolls the content area of a container object in order to display the control within the visible region (the viewport) of the container.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#CanMove">
      <summary>
                    Gets a value that indicates whether the control can be moved.
                </summary>
      <returns>true if the element can be moved; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#CanResize">
      <summary>
                    Gets a value that indicates whether the UI Automation element can be resized.
                </summary>
      <returns>true if the element can be resized; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#CanRotate">
      <summary>
                    Gets a value that indicates whether the control can be rotated.
                </summary>
      <returns>true if the element can be rotated; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#Move(System.Double,System.Double)">
      <summary>
                    Moves the control.
                </summary>
      <param name="x">
                    Absolute screen coordinates of the left side of the control.
                </param>
      <param name="y">
                    Absolute screen coordinates of the top of the control.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#Resize(System.Double,System.Double)">
      <summary>
                    Resizes the control.
                </summary>
      <param name="width">
                    The new width of the window, in pixels.
                </param>
      <param name="height">
                    The new height of the window, in pixels.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#Rotate(System.Double)">
      <summary>
                    Rotates the control.
                </summary>
      <param name="degrees">
                    The number of degrees to rotate the control. A positive number rotates clockwise; a negative number rotates counterclockwise.
                </param>
    </member>
    <member name="T:System.Windows.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer.#ctor(System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter" /> to associate with the <see cref="T:System.Windows.Automation.Peers.DataGridColumnHeadersPresenterAutomationPeer" />.
                </param>
    </member>
    <member name="T:System.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.Primitives.DataGridDetailsPresenter" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer.#ctor(System.Windows.Controls.Primitives.DataGridDetailsPresenter)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.Primitives.DataGridDetailsPresenter" /> to associate with the <see cref="T:System.Windows.Automation.Peers.DataGridDetailsPresenterAutomationPeer" />.
                </param>
    </member>
    <member name="T:System.Windows.Automation.Peers.DataGridItemAutomationPeer">
      <summary>
                    Exposes the items in <see cref="T:System.Windows.Controls.DataGrid" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.#ctor(System.Object,System.Windows.Controls.DataGrid)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DataGridItemAutomationPeer" /> class.
                </summary>
      <param name="item">
                    The data grid item to associate with this peer.
                </param>
      <param name="dataGrid">
                    The <see cref="T:System.Windows.Controls.DataGrid" /> that contains this item.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets the control pattern for the item of the <see cref="T:System.Windows.Controls.DataGrid" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.DataGridItemAutomationPeer" />.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.System#Windows#Automation#Provider#IInvokeProvider#Invoke">
      <summary>
                    Sends a request to activate a control and initiate its single, unambiguous action.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.System#Windows#Automation#Provider#IScrollItemProvider#ScrollIntoView">
      <summary>
                    Scrolls the content area of a container object in order to display the control within the visible region (viewport) of the container.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
      <summary>
                    Adds the current element to the collection of selected items.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
      <summary>
                    Gets a value that indicates whether an item is selected.
                </summary>
      <returns>true if the element is selected; otherwise, false. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
      <summary>
                    Removes the current element from the collection of selected items.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
      <summary>
                    Deselects any selected items and then selects the current element.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
      <summary>
                    Gets the UI Automation provider that implements <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> and acts as the container for the calling object.
                </summary>
      <returns>
                    The provider that supports <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridItemAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#CanSelectMultiple">
      <summary>
                    Gets a value that specifies whether the UI Automation provider allows more than one child element to be selected concurrently.
                </summary>
      <returns>true if multiple selection is allowed; otherwise, false. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridItemAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#GetSelection">
      <summary>
                    Retrieves a UI Automation provider for each child element that is selected.
                </summary>
      <returns>
                    A collection of UI Automation providers. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DataGridItemAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#IsSelectionRequired">
      <summary>
                    Gets a value that specifies whether the UI Automation provider requires at least one child element to be selected.
                </summary>
      <returns>true if multiple selection is required; otherwise, false. 
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.DataGridRowAutomationPeer">
      <summary>
                    Exposes the <see cref="T:System.Windows.Controls.DataGridRow" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridRowAutomationPeer.#ctor(System.Windows.Controls.DataGridRow)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DataGridRowAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.DataGridRow" /> to associate with the <see cref="T:System.Windows.Automation.Peers.DataGridRowAutomationPeer" />.
                </param>
    </member>
    <member name="T:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.Primitives.DataGridRowHeader" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer.#ctor(System.Windows.Controls.Primitives.DataGridRowHeader)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.Primitives.DataGridRowHeader" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer" />.
                </param>
    </member>
    <member name="T:System.Windows.Automation.Peers.DataGridRowsPresenterAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.Primitives.DataGridRowsPresenter" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DataGridRowsPresenterAutomationPeer.#ctor(System.Windows.Controls.Primitives.DataGridRowsPresenter)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DataGridRowsPresenterAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.Primitives.DataGridRowsPresenter" /> instance to associate with this <see cref="T:System.Windows.Automation.Peers.DataGridRowsPresenterAutomationPeer" />.
                </param>
    </member>
    <member name="T:System.Windows.Controls.DataGrid">
      <summary>
                    Displays data in a customizable grid.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGrid" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.AlternatingRowBackground">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to paint the background of odd-numbered rows.
                </summary>
      <returns>
                    The brush that is used to paint the background of odd-numbered rows. The default is a <see cref="T:System.Windows.Media.SolidColorBrush" /> with a <see cref="P:System.Windows.Media.SolidColorBrush.Color" /> value of white (ARGB value #00FFFFFF).
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.AlternatingRowBackgroundProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.AlternatingRowBackground" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.AlternatingRowBackground" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.AreRowDetailsFrozen">
      <summary>
                    Gets or sets a value that indicates whether the row details sections remain fixed at the width of the display area or can scroll horizontally.
                </summary>
      <returns>true if the row details sections are prevented from scrolling horizontally; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.AreRowDetailsFrozenProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.AreRowDetailsFrozen" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.AreRowDetailsFrozen" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.ArrangeOverride(System.Windows.Size)">
      <summary>
                    Arranges the content of the <see cref="T:System.Windows.Controls.DataGrid" />.
                </summary>
      <returns>
                    The actual size used by the <see cref="T:System.Windows.Controls.DataGrid" />.
                </returns>
      <param name="finalSize">
                    The final area within the parent that this element should use to arrange itself and its children.
                </param>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.AutoGenerateColumns">
      <summary>
                    Gets or sets a value that indicates whether columns are created automatically when the <see cref="P:System.Windows.Controls.DataGrid.ItemsSource" /> property is set.
                </summary>
      <returns>true if columns are generated automatically; otherwise, false. The default is true.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.AutoGenerateColumnsProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.AutoGenerateColumns" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.AutoGenerateColumns" /> dependency property.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.AutoGeneratingColumn">
      <summary>
                    Occurs one time for each public, non-static property in the bound data type when the <see cref="P:System.Windows.Controls.DataGrid.ItemsSource" /> property is changed and the <see cref="P:System.Windows.Controls.DataGrid.AutoGenerateColumns" /> property is true. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.BeginEdit">
      <summary>
                    Causes the data grid to enter editing mode for the current cell and current row, unless the data grid is already in editing mode.
                </summary>
      <returns>true if the data grid enters editing mode; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.BeginEdit(System.Windows.RoutedEventArgs)">
      <summary>
                    Causes the data grid to enter editing mode for the current cell and current row in the specified keyboard and mouse state.
                </summary>
      <returns>true if the data grid enters editing mode; otherwise, false.
                </returns>
      <param name="editingEventArgs">
                    Provides information about the keyboard or mouse gesture that prompted the method call. Can be null.
                </param>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.BeginningEdit">
      <summary>
                    Occurs before a cell or row enters editing mode. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.CancelEdit(System.Windows.Controls.DataGridEditingUnit)">
      <summary>
                    Causes the data grid to cancel the current edit, restore the original value, and exit editing mode.
                </summary>
      <returns>true if the operation was successful; otherwise, false.
                </returns>
      <param name="editingUnit">
                    Specifies whether to cancel editing for a <see cref="F:System.Windows.Controls.DataGridEditingUnit.Row" /> or <see cref="F:System.Windows.Controls.DataGridEditingUnit.Cell" />.
                </param>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.CanUserReorderColumns">
      <summary>
                    Gets or sets a value that indicates whether the user can change the column display order by dragging column headers with the mouse.
                </summary>
      <returns>true if the user can reorder columns; otherwise, false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.CanUserReorderColumnsProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.CanUserReorderColumns" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.CanUserReorderColumns" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.CanUserResizeColumns">
      <summary>
                    Gets or sets a value that indicates whether the user can adjust column widths using the mouse.
                </summary>
      <returns>true if the user can resize columns; otherwise, false. The default is true.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.CanUserResizeColumnsProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.CanUserResizeColumns" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.CanUserResizeColumns" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.CanUserSortColumns">
      <summary>
                    Gets or sets a value that indicates whether the user can sort columns by clicking the column header.
                </summary>
      <returns>true if the user can sort columns; otherwise, false. The default is true.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.CanUserSortColumnsProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.CanUserSortColumns" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.CanUserSortColumns" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.CellStyle">
      <summary>
                    Gets or sets the style that is used when rendering the data grid cells.
                </summary>
      <returns>
                    The style applied to cells. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.CellStyleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.CellStyle" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.CellStyle" /> dependency property.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.ColumnDisplayIndexChanged">
      <summary>
                    Occurs when the <see cref="P:System.Windows.Controls.DataGridColumn.DisplayIndex" /> property of a column changes. 
                </summary>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.ColumnHeaderDragCompleted">
      <summary>
                    Occurs when the user drops a column header that was being dragged using the mouse. 
                </summary>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.ColumnHeaderDragDelta">
      <summary>
                    Occurs one or more times while the user drags a column header using the mouse. 
                </summary>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.ColumnHeaderDragStarted">
      <summary>
                    Occurs when the user begins dragging a column header using the mouse. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.ColumnHeaderHeight">
      <summary>
                    Gets or sets the height of the column headers row.
                </summary>
      <returns>
                    The height of the column headers row in pixels. The default is <see cref="F:System.Double.NaN" />.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    When setting this property, the specified value is less than 4 or greater than 32768.
                </exception>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.ColumnHeaderHeightProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.ColumnHeaderHeight" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.ColumnHeaderHeight" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.ColumnHeaderStyle">
      <summary>
                    Gets or sets the style that is used when rendering the column headers.
                </summary>
      <returns>
                    The style applied to column headers. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.ColumnHeaderStyleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.ColumnHeaderStyle" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.ColumnHeaderStyle" /> dependency property.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.ColumnReordered">
      <summary>
                    Occurs when a <see cref="T:System.Windows.Controls.DataGrid" /> column has moved to a new position in the display order. 
                </summary>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.ColumnReordering">
      <summary>
                    Occurs before a <see cref="T:System.Windows.Controls.DataGrid" /> column moves to a new position in the display order.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.Columns">
      <summary>
                    Gets a collection that contains all the columns in the control.
                </summary>
      <returns>
                    The columns in the control.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.ColumnWidth">
      <summary>
                    Gets or sets the standard width or automatic sizing mode of columns in the control.
                </summary>
      <returns>
                    A structure that represents the standard width or automatic sizing mode of columns in the <see cref="T:System.Windows.Controls.DataGrid" />. The default is <see cref="P:System.Windows.Controls.DataGridLength.Auto" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.ColumnWidthProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.ColumnWidth" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.ColumnWidth" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.CommitEdit(System.Windows.Controls.DataGridEditingUnit,System.Boolean)">
      <summary>
                    Causes the data grid to commit the current edit to the data source, and optionally exit editing mode.
                </summary>
      <returns>true if the operation was successful; otherwise, false.
                </returns>
      <param name="editingUnit">
                    Specifies whether to commit the edit for a <see cref="F:System.Windows.Controls.DataGridEditingUnit.Row" /> or <see cref="F:System.Windows.Controls.DataGridEditingUnit.Cell" />.
                </param>
      <param name="exitEditingMode">true to exit editing mode; otherwise, false.
                </param>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.CurrentCellChanged">
      <summary>
                    Occurs when a different cell becomes the current cell. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.CurrentColumn">
      <summary>
                    Gets or sets the column that contains the current cell.
                </summary>
      <returns>
                    The column that contains the current cell.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    When setting this property, the specified value is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    When setting this property, the specified column is not in this <see cref="T:System.Windows.Controls.DataGrid" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    When setting this property, the specified column has a <see cref="P:System.Windows.Controls.DataGridColumn.Visibility" /> property value of <see cref="F:System.Windows.Visibility.Collapsed" />.
                
                    -or-
                
                    When changing the value of this property while the control is in editing mode, the edit cannot be committed or reverted.
                </exception>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.CurrentItem">
      <summary>
                    Gets the data item bound to the row that contains the current cell.
                </summary>
      <returns>
                    The data item bound to the row that contains the current cell.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.DragIndicatorStyle">
      <summary>
                    Gets or sets the style that is used when rendering the drag indicator that is displayed while dragging column headers.
                </summary>
      <returns>
                    The style applied to column headers.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.DragIndicatorStyleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.DragIndicatorStyle" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.DragIndicatorStyle" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.DropLocationIndicatorStyle">
      <summary>
                    Gets or sets the style that is used when rendering the column headers.
                </summary>
      <returns>
                    The style applied to column headers.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.DropLocationIndicatorStyleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.DropLocationIndicatorStyle" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.DropLocationIndicatorStyle" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.FrozenColumnCount">
      <summary>
                    Gets or sets the number of columns that the user cannot scroll horizontally.
                </summary>
      <returns>
                    The number of non-scrolling columns. 
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.FrozenColumnCountProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.FrozenColumnCount" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.FrozenColumnCount" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.GridLinesVisibility">
      <summary>
                    Gets or sets a value that indicates which grid lines separating inner cells are shown.
                </summary>
      <returns>
                    One of the enumeration values indicating which grid lines are shown. The default is <see cref="F:System.Windows.Controls.DataGridGridLinesVisibility.All" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.GridLinesVisibilityProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.GridLinesVisibility" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.GridLinesVisibility" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.HeadersVisibility">
      <summary>
                    Gets or sets a value that indicates the visibility of row and column headers.
                </summary>
      <returns>
                    One of the enumeration values that indicates the visibility of row and column headers. The default is <see cref="F:System.Windows.Controls.DataGridHeadersVisibility.Column" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.HeadersVisibilityProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.HeadersVisibility" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.HeadersVisibility" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.HorizontalGridLinesBrush">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to paint grid lines separating rows.
                </summary>
      <returns>
                    The brush that is used to paint horizontal grid lines. The default is a <see cref="T:System.Windows.Media.SolidColorBrush" /> with a <see cref="P:System.Windows.Media.SolidColorBrush.Color" /> value of opaque grey (ARGB value #FFDFE3E6).
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.HorizontalGridLinesBrushProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.HorizontalGridLinesBrush" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.HorizontalGridLinesBrush" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.HorizontalScrollBarVisibility">
      <summary>
                    Gets or sets a value that indicates how the horizontal scroll bar is displayed.
                </summary>
      <returns>
                    One of the enumeration values that specifies the horizontal scroll bar visibility. The default is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Auto" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.HorizontalScrollBarVisibilityProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.HorizontalScrollBarVisibility" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.HorizontalScrollBarVisibility" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.IsReadOnly">
      <summary>
                    Gets or sets a value that indicates whether the user can edit the values in the control.
                </summary>
      <returns>true if the control is read-only; otherwise, false. The default is false.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    When setting this property to true while the control is in editing mode, the edit cannot be committed or reverted. 
                </exception>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.IsReadOnlyProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.IsReadOnly" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.IsReadOnly" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.ItemsSource">
      <summary>
                    Gets or sets a collection that is used to generate the content of the control.
                </summary>
      <returns>
                    The collection that is used to generate the content of the control. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.ItemsSourceProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.ItemsSource" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.ItemsSource" /> dependency property.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.LoadingRow">
      <summary>
                    Occurs after a <see cref="T:System.Windows.Controls.DataGridRow" /> is instantiated, so that you can customize it before it is used.
                </summary>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.LoadingRowDetails">
      <summary>
                    Occurs when a new row details template is applied to a row, so that you can customize the details section before it is used.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.MaxColumnWidth">
      <summary>
                    Gets or sets the maximum width of columns in the <see cref="T:System.Windows.Controls.DataGrid" />.
                </summary>
      <returns>
                    The maximum column width in pixels. The default is <see cref="F:System.Double.PositiveInfinity" />.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    When setting this property, the specified value is less than zero or less than <see cref="P:System.Windows.Controls.DataGrid.MinColumnWidth" />.
                </exception>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.MaxColumnWidthProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.MaxColumnWidth" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.MaxColumnWidth" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.MeasureOverride(System.Windows.Size)">
      <summary>
                    Measures the children of a <see cref="T:System.Windows.Controls.DataGrid" /> in preparation of arranging them during the <see cref="M:System.Windows.Controls.DataGrid.ArrangeOverride(System.Windows.Size)" /> pass. 
                </summary>
      <returns>
                    The size that the <see cref="T:System.Windows.Controls.DataGrid" /> determines it needs during layout, based on its calculations of child object allotted sizes.
                </returns>
      <param name="availableSize">
                    The available size that this element can give to child elements. Indicates an upper limit that child elements should not exceed.
                </param>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.MinColumnWidth">
      <summary>
                    Gets or sets the minimum width of columns in the <see cref="T:System.Windows.Controls.DataGrid" />.
                </summary>
      <returns>
                    The minimum column width in pixels. The default is 20.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    When setting this property, the specified value is less than zero or greater than <see cref="P:System.Windows.Controls.DataGrid.MaxColumnWidth" />.
                </exception>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.MinColumnWidthProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.MinColumnWidth" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.MinColumnWidth" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the <see cref="T:System.Windows.Controls.DataGrid" /> control when a new template is applied.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnAutoGeneratingColumn(System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Windows.Controls.DataGrid.AutoGeneratingColumn" /> event.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnBeginningEdit(System.Windows.Controls.DataGridBeginningEditEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Windows.Controls.DataGrid.BeginningEdit" /> event.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnColumnDisplayIndexChanged(System.Windows.Controls.DataGridColumnEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Windows.Controls.DataGrid.ColumnDisplayIndexChanged" /> event. 
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnColumnReordered(System.Windows.Controls.DataGridColumnEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Windows.Controls.DataGrid.ColumnReordered" /> event. 
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnColumnReordering(System.Windows.Controls.DataGridColumnReorderingEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Windows.Controls.DataGrid.ColumnReordering" /> event. 
                </summary>
      <param name="e">
                    The event data. 
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnCreateAutomationPeer">
      <summary>
                    Returns a <see cref="T:System.Windows.Automation.Peers.DataGridAutomationPeer" /> for use by the Silverlight automation infrastructure.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Automation.Peers.DataGridAutomationPeer" /> for the <see cref="T:System.Windows.Controls.DataGrid" /> object.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnCurrentCellChanged(System.EventArgs)">
      <summary>
                    Raises the <see cref="E:System.Windows.Controls.DataGrid.CurrentCellChanged" /> event.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnLoadingRow(System.Windows.Controls.DataGridRowEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Windows.Controls.DataGrid.LoadingRow" /> event.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnLoadingRowDetails(System.Windows.Controls.DataGridRowDetailsEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Windows.Controls.DataGrid.LoadingRow" /> event.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnPreparingCellForEdit(System.Windows.Controls.DataGridPreparingCellForEditEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Windows.Controls.DataGrid.PreparingCellForEdit" /> event.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnRowDetailsVisibilityChanged(System.Windows.Controls.DataGridRowDetailsEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Windows.Controls.DataGrid.RowDetailsVisibilityChanged" /> event.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Windows.Controls.DataGrid.SelectionChanged" /> event.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnUnloadingRow(System.Windows.Controls.DataGridRowEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Windows.Controls.DataGrid.UnloadingRow" /> event.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.OnUnloadingRowDetails(System.Windows.Controls.DataGridRowDetailsEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Windows.Controls.DataGrid.UnloadingRowDetails" /> event.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.PreparingCellForEdit">
      <summary>
                    Occurs when a cell in a <see cref="T:System.Windows.Controls.DataGridTemplateColumn" /> enters editing mode.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.RowBackground">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to paint row backgrounds.
                </summary>
      <returns>
                    The brush that is used to paint row backgrounds. The default is a <see cref="T:System.Windows.Media.SolidColorBrush" /> with a <see cref="P:System.Windows.Media.SolidColorBrush.Color" /> value of semi-opaque light grey (ARGB value #55E9EEF4).
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.RowBackgroundProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.RowBackground" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.RowBackground" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.RowDetailsTemplate">
      <summary>
                    Gets or sets the template that is used to display the content of the details section of rows.
                </summary>
      <returns>
                    The template that is used to display row details. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.RowDetailsTemplateProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.RowDetailsTemplate" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.RowDetailsTemplate" /> dependency property.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.RowDetailsVisibilityChanged">
      <summary>
                    Occurs when the <see cref="P:System.Windows.Controls.DataGrid.RowDetailsVisibilityMode" /> property value changes.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.RowDetailsVisibilityMode">
      <summary>
                    Gets or sets a value that indicates when the details sections of rows are displayed.
                </summary>
      <returns>
                    An enumeration value that specifies the visibility of row details. The default is <see cref="F:System.Windows.Controls.DataGridRowDetailsVisibilityMode.VisibleWhenSelected" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.RowDetailsVisibilityModeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.RowDetailsVisibilityMode" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.RowDetailsVisibilityMode" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.RowHeaderStyle">
      <summary>
                    Gets or sets the style that is used when rendering the row headers.
                </summary>
      <returns>
                    The style applied to row headers. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.RowHeaderStyleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.RowHeaderStyle" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.RowHeaderStyle" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.RowHeaderWidth">
      <summary>
                    Gets or sets the width of the row header column.
                </summary>
      <returns>
                    The width of the row header column in pixels. The default is <see cref="F:System.Double.NaN" />.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    When setting this property, the specified value is less than 4 or greater than 32768.
                </exception>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.RowHeaderWidthProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.RowHeaderWidth" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.RowHeaderWidth" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.RowHeight">
      <summary>
                    Gets or sets the standard height of rows in the control.
                </summary>
      <returns>
                    The standard height of rows in pixels. The default is 22.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    When setting this property, the specified value is greater than 65536.
                </exception>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.RowHeightProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.RowHeight" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.RowHeight" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.RowStyle">
      <summary>
                    Gets or sets the style that is used when rendering the rows.
                </summary>
      <returns>
                    The style applied to rows. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.RowStyleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.RowStyle" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.RowStyle" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.DataGrid.ScrollIntoView(System.Object,System.Windows.Controls.DataGridColumn)">
      <summary>
                    Scrolls the <see cref="T:System.Windows.Controls.DataGrid" /> vertically to display the row for the specified data item and scrolls the <see cref="T:System.Windows.Controls.DataGrid" /> horizontally to display the specified column.
                </summary>
      <param name="item">
                    The data item (row) to scroll to.
                </param>
      <param name="column">
                    The column to scroll to.
                </param>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.SelectedIndex">
      <summary>
                    Gets or sets the index of the current selection.
                </summary>
      <returns>
                    The index of the current selection, or -1 if the selection is empty.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.SelectedIndexProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.SelectedIndex" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.SelectedIndex" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.SelectedItem">
      <summary>
                    Gets or sets the data item corresponding to the selected row.
                </summary>
      <returns>
                    The data item corresponding to the selected row.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    When setting this property to a new value while the control is in editing mode, the edit cannot be committed or reverted. 
                </exception>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.SelectedItemProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.SelectedItem" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.SelectedItem" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.SelectedItems">
      <summary>
                    Gets a list that contains the data items corresponding to the selected rows.
                </summary>
      <returns>
                    A list of the data items corresponding to the selected rows.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.SelectionChanged">
      <summary>
                    Occurs when the <see cref="P:System.Windows.Controls.DataGrid.SelectedItem" /> or <see cref="P:System.Windows.Controls.DataGrid.SelectedItems" /> property value changes.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.SelectionMode">
      <summary>
                    Gets or sets the selection behavior of the data grid.
                </summary>
      <returns>
                    One of the enumeration values specifying the selection behavior. The default is <see cref="F:System.Windows.Controls.DataGridSelectionMode.Extended" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.SelectionModeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.SelectionMode" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.SelectionMode" /> dependency property.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.UnloadingRow">
      <summary>
                    Occurs when a <see cref="T:System.Windows.Controls.DataGridRow" /> object becomes available for reuse.
                </summary>
    </member>
    <member name="E:System.Windows.Controls.DataGrid.UnloadingRowDetails">
      <summary>
                    Occurs when a row details element becomes available for reuse.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.VerticalGridLinesBrush">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that is used to paint grid lines separating columns.
                </summary>
      <returns>
                    The brush that is used to paint vertical grid lines. The default is a <see cref="T:System.Windows.Media.SolidColorBrush" /> with a <see cref="P:System.Windows.Media.SolidColorBrush.Color" /> value of opaque grey (ARGB value #FFDFE3E6).
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.VerticalGridLinesBrushProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.VerticalGridLinesBrush" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.VerticalGridLinesBrush" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGrid.VerticalScrollBarVisibility">
      <summary>
                    Gets or sets a value that indicates how the vertical scroll bar is displayed.
                </summary>
      <returns>
                    One of the enumeration values that specifies the vertical scroll bar visibility. The default is <see cref="F:System.Windows.Controls.ScrollBarVisibility.Auto" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGrid.VerticalScrollBarVisibilityProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGrid.VerticalScrollBarVisibility" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGrid.VerticalScrollBarVisibility" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Windows.Controls.DataGrid.AutoGeneratingColumn" /> event. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs.#ctor(System.String,System.Type,System.Windows.Controls.DataGridColumn)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs" /> class.
                </summary>
      <param name="propertyName">
                    The name of the property bound to the generated column.
                </param>
      <param name="propertyType">
                    The <see cref="T:System.Type" /> of the property bound to the generated column.
                </param>
      <param name="column">
                    The generated column.
                </param>
    </member>
    <member name="P:System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs.Cancel">
      <summary>
                    Gets or sets a value that indicates whether the event should be canceled.
                </summary>
      <returns>true if the event should be canceled; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs.Column">
      <summary>
                    Gets the generated column.
                </summary>
      <returns>
                    The generated column.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs.PropertyName">
      <summary>
                    Gets the name of the property bound to the generated column.
                </summary>
      <returns>
                    The name of the property bound to the generated column.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridAutoGeneratingColumnEventArgs.PropertyType">
      <summary>
                    Gets the <see cref="T:System.Type" /> of the property bound to the generated column.
                </summary>
      <returns>
                    The <see cref="T:System.Type" /> of the property bound to the generated column.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridBeginningEditEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Windows.Controls.DataGrid.BeginningEdit" /> event.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridBeginningEditEventArgs.#ctor(System.Windows.Controls.DataGridColumn,System.Windows.Controls.DataGridRow,System.Windows.RoutedEventArgs)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridBeginningEditEventArgs" /> class.
                </summary>
      <param name="column">
                    The column that contains the cell to be edited.
                </param>
      <param name="row">
                    The row that contains the cell to be edited.
                </param>
      <param name="editingEventArgs">
                    Information about the user gesture that caused the cell to enter edit mode.
                </param>
    </member>
    <member name="P:System.Windows.Controls.DataGridBeginningEditEventArgs.Cancel">
      <summary>
                    Gets or sets a value that indicates whether the event should be canceled.
                </summary>
      <returns>true if the event should be canceled; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridBeginningEditEventArgs.Column">
      <summary>
                    Gets the column that contains the cell to be edited.
                </summary>
      <returns>
                    The column that contains the cell to be edited.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridBeginningEditEventArgs.EditingEventArgs">
      <summary>
                    Gets information about the user gesture that caused the cell to enter edit mode.
                </summary>
      <returns>
                    Information about the user gesture that caused the cell to enter edit mode.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridBeginningEditEventArgs.Row">
      <summary>
                    Gets the row that contains the cell to be edited.
                </summary>
      <returns>
                    The row that contains the cell to be edited.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridBoundColumn">
      <summary>
                    Represents a <see cref="T:System.Windows.Controls.DataGrid" /> column that can bind to a property in the grid's data source.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridBoundColumn.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridBoundColumn" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.DataGridBoundColumn.Binding">
      <summary>
                    Gets or sets the binding that associates the column with a property in the data source.
                </summary>
      <returns>
                    The binding to the column's display property in the data source. The default is null.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    When changing the value of this property, the current cell edit cannot be committed or reverted. 
                </exception>
    </member>
    <member name="P:System.Windows.Controls.DataGridBoundColumn.EditingElementStyle">
      <summary>
                    Gets or sets the style that is used when rendering the element that the column displays for a cell in editing mode.
                </summary>
      <returns>
                    The style that is used when rendering an editing element. The default is null.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridBoundColumn.ElementStyle">
      <summary>
                    Gets or sets the style that is used when rendering the element that the column displays for a cell that is not in editing mode.
                </summary>
      <returns>
                    The style that is used when rendering a display-only element. The default is null.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridCell">
      <summary>
                    Represents an individual <see cref="T:System.Windows.Controls.DataGrid" /> cell.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridCell.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridCell" /> class.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridCell.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the cell control when a new template is applied.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.DataGridCheckBoxColumn">
      <summary>
                    Represents a <see cref="T:System.Windows.Controls.DataGrid" /> column that hosts <see cref="T:System.Windows.Controls.CheckBox" /> controls in its cells.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridCheckBoxColumn.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridCheckBoxColumn" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridCheckBoxColumn.CancelCellEdit(System.Windows.FrameworkElement,System.Object)">
      <summary>
                    Causes the column cell being edited to revert to the specified value.
                </summary>
      <param name="editingElement">
                    The element that the column displays for a cell in editing mode.
                </param>
      <param name="uneditedValue">
                    The previous, unedited value in the cell being edited.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGridCheckBoxColumn.GenerateEditingElement(System.Windows.Controls.DataGridCell,System.Object)">
      <summary>
                    Gets a <see cref="T:System.Windows.Controls.CheckBox" /> control that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
                </summary>
      <returns>
                    A new <see cref="T:System.Windows.Controls.CheckBox" /> control that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
                </returns>
      <param name="cell">
                    The cell that will contain the generated element.
                </param>
      <param name="dataItem">
                    The data item represented by the row that contains the intended cell.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGridCheckBoxColumn.GenerateElement(System.Windows.Controls.DataGridCell,System.Object)">
      <summary>
                    Gets a read-only <see cref="T:System.Windows.Controls.CheckBox" /> control that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
                </summary>
      <returns>
                    A new, read-only <see cref="T:System.Windows.Controls.CheckBox" /> control that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
                </returns>
      <param name="cell">
                    The cell that will contain the generated element.
                </param>
      <param name="dataItem">
                    The data item represented by the row that contains the intended cell.
                </param>
    </member>
    <member name="P:System.Windows.Controls.DataGridCheckBoxColumn.IsThreeState">
      <summary>
                    Gets or sets a value that indicates whether the hosted <see cref="T:System.Windows.Controls.CheckBox" /> controls allow three states or two. 
                </summary>
      <returns>true if the hosted controls support three states; false if they support two states. The default is false. 
                </returns>
    </member>
    <member name="M:System.Windows.Controls.DataGridCheckBoxColumn.PrepareCellForEdit(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs)">
      <summary>
                    Called when a cell in the column enters editing mode.
                </summary>
      <returns>
                    The unedited value. 
                </returns>
      <param name="editingElement">
                    The element that the column displays for a cell in editing mode.
                </param>
      <param name="editingEventArgs">
                    Information about the user gesture that is causing a cell to enter editing mode.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGridCheckBoxColumn.RefreshCellContent(System.Windows.FrameworkElement,System.String)">
      <summary>
                    Refreshes the contents of a cell in the column in response to a column property value change.
                </summary>
      <param name="element">
                    The <see cref="T:System.Windows.Controls.CheckBox" /> returned by the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property of the cell to update.
                </param>
      <param name="propertyName">
                    The name of the column property that has changed.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is not a <see cref="T:System.Windows.Controls.CheckBox" />.
                </exception>
    </member>
    <member name="T:System.Windows.Controls.DataGridColumn">
      <summary>
                    Represents a <see cref="T:System.Windows.Controls.DataGrid" /> column.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridColumn.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridColumn" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.ActualWidth">
      <summary>
                    Gets the current width of the column in pixels.
                </summary>
      <returns>
                    The width of the column in pixels. Returns 0 if the column has not been added to a <see cref="T:System.Windows.Controls.DataGrid" />.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.DataGridColumn.CancelCellEdit(System.Windows.FrameworkElement,System.Object)">
      <summary>
                    When overridden in a derived class, causes the column cell being edited to revert to the unedited value.
                </summary>
      <param name="editingElement">
                    The element that the column displays for a cell in editing mode.
                </param>
      <param name="uneditedValue">
                    The previous, unedited value in the cell being edited.
                </param>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.CanUserReorder">
      <summary>
                    Gets or sets a value that indicates whether the user can change the column display position by dragging the column header.
                </summary>
      <returns>true if the user can drag the column header to a new position; otherwise, false. The default is the current <see cref="P:System.Windows.Controls.DataGrid.CanUserReorderColumns" /> property value.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.CanUserResize">
      <summary>
                    Gets or sets a value that indicates whether the user can adjust the column width using the mouse.
                </summary>
      <returns>true if the user can resize the column; false if the user cannot resize the column. The default is the current <see cref="P:System.Windows.Controls.DataGrid.CanUserResizeColumns" /> property value.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.CanUserSort">
      <summary>
                    Gets or sets a value that indicates whether the user can sort the column by clicking the column header.
                </summary>
      <returns>true if the user can sort the column; false if the user cannot sort the column. The default is the current <see cref="P:System.Windows.Controls.DataGrid.CanUserSortColumns" /> property value.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.CellStyle">
      <summary>
                    Gets or sets the style that is used when rendering cells in the column.
                </summary>
      <returns>
                    The style that is used when rendering cells in the column. The default is null.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.DisplayIndex">
      <summary>
                    Gets or sets the display position of the column relative to the other columns in the <see cref="T:System.Windows.Controls.DataGrid" />.
                </summary>
      <returns>
                    The zero-based position of the column as it is displayed in the associated <see cref="T:System.Windows.Controls.DataGrid" />. The default is the index of the corresponding <see cref="P:System.Collections.ObjectModel.Collection`1.Item(System.Int32)" /> in the <see cref="P:System.Windows.Controls.DataGrid.Columns" /> collection.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    When setting this property, the specified value is less than -1 or equal to <see cref="F:System.Int32.MaxValue" />.
                
                    -or-
                
                    When setting this property on a column in a <see cref="T:System.Windows.Controls.DataGrid" />, the specified value is less than zero or greater than or equal to the number of columns in the <see cref="T:System.Windows.Controls.DataGrid" />.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    When setting this property, the <see cref="T:System.Windows.Controls.DataGrid" /> is already making <see cref="P:System.Windows.Controls.DataGridColumn.DisplayIndex" /> adjustments. For example, this exception is thrown when you attempt to set <see cref="P:System.Windows.Controls.DataGridColumn.DisplayIndex" /> in a <see cref="E:System.Windows.Controls.DataGrid.ColumnDisplayIndexChanged" /> event handler.
                
                    -or-
                
                    When setting this property, the specified value would result in a frozen column being displayed in the range of unfrozen columns, or an unfrozen column being displayed in the range of frozen columns.
                </exception>
    </member>
    <member name="M:System.Windows.Controls.DataGridColumn.GenerateEditingElement(System.Windows.Controls.DataGridCell,System.Object)">
      <summary>
                    When overridden in a derived class, gets an editing element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
                </summary>
      <returns>
                    A new editing element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
                </returns>
      <param name="cell">
                    The cell that will contain the generated element.
                </param>
      <param name="dataItem">
                    The data item represented by the row that contains the intended cell.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGridColumn.GenerateElement(System.Windows.Controls.DataGridCell,System.Object)">
      <summary>
                    When overridden in a derived class, gets a read-only element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
                </summary>
      <returns>
                    A new, read-only element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
                </returns>
      <param name="cell">
                    The cell that will contain the generated element.
                </param>
      <param name="dataItem">
                    The data item represented by the row that contains the intended cell.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGridColumn.GetCellContent(System.Object)">
      <summary>
                    Gets the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property value for the cell at the intersection of this column and the row that represents the specified data item.
                </summary>
      <returns>
                    The cell content. Returns null if the row containing <paramref name="dataItem" /> is not found.
                </returns>
      <param name="dataItem">
                    The data item represented by the row that contains the intended cell.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataItem" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    This column has not been added to a <see cref="T:System.Windows.Controls.DataGrid" />.
                </exception>
    </member>
    <member name="M:System.Windows.Controls.DataGridColumn.GetCellContent(System.Windows.Controls.DataGridRow)">
      <summary>
                    Gets the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property value for the cell at the intersection of this column and the specified row.
                </summary>
      <returns>
                    The cell content.
                </returns>
      <param name="dataGridRow">
                    The row that contains the intended cell.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataGridRow" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    This column has not been added to a <see cref="T:System.Windows.Controls.DataGrid" />.
                </exception>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.Header">
      <summary>
                    Gets or sets the content of the column header.
                </summary>
      <returns>
                    The column header content. The default is null.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.HeaderStyle">
      <summary>
                    Gets or sets the style that is used when rendering the column header.
                </summary>
      <returns>
                    The style that is used when rendering the column header, or null to use the <see cref="P:System.Windows.Controls.DataGrid.ColumnHeaderStyle" /> setting. The default is null.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.IsAutoGenerated">
      <summary>
                    Gets a value that indicates whether the column is auto-generated.
                </summary>
      <returns>true if the column is auto-generated; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.IsFrozen">
      <summary>
                    Gets a value that indicates whether the column is prevented from scrolling horizontally.
                </summary>
      <returns>true if the column cannot be scrolled horizontally; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.IsReadOnly">
      <summary>
                    Gets or sets a value that indicates whether cells in the column can be edited.
                </summary>
      <returns>true if cells in the column cannot be edited; otherwise, false. The default is false.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    When setting this property to false on a column derived from <see cref="T:System.Windows.Controls.DataGridBoundColumn" />, the column <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property indicates a data source that is read-only.
                
                    -or-
                
                    When setting this property to true on a column with a cell that is in edit mode, the cell edit cannot be committed or reverted. 
                </exception>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.MaxWidth">
      <summary>
                    Gets or sets the maximum column width in pixels.
                </summary>
      <returns>
                    The maximum column width in pixels. The default is <see cref="F:System.Double.PositiveInfinity" />.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    When setting this property, the specified value is less than 0.
                
                    -or-
                
                    The specified value is less than the <see cref="P:System.Windows.Controls.DataGridColumn.MinWidth" />.
                
                    -or-
                
                    The specified value is less than the <see cref="P:System.Windows.Controls.DataGrid.MinColumnWidth" /> and the <see cref="P:System.Windows.Controls.DataGridColumn.MinWidth" /> is not set.
                </exception>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.MinWidth">
      <summary>
                    Gets or sets the minimum column width in pixels.
                </summary>
      <returns>
                    The minimum column width in pixels, or 0 if the value is not set. The default is 0.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    When setting this property, the specified value is less than 0.
                
                    -or-
                
                    The specified value is <see cref="F:System.Double.NaN" />.
                
                    -or-
                
                    The specified value is <see cref="F:System.Double.PositiveInfinity" />.
                
                    -or-
                
                    The specified value is greater than the <see cref="P:System.Windows.Controls.DataGridColumn.MaxWidth" />.
                
                    -or-
                
                    The specified value is greater than the <see cref="P:System.Windows.Controls.DataGrid.MaxColumnWidth" /> and the <see cref="P:System.Windows.Controls.DataGridColumn.MaxWidth" /> is not set.
                </exception>
    </member>
    <member name="M:System.Windows.Controls.DataGridColumn.NotifyPropertyChanged(System.String)">
      <summary>
                    Called by a specific column type when one of its properties changes and its current cells need to be updated.
                </summary>
      <param name="propertyName">
                    The name of the column property that has changed.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGridColumn.PrepareCellForEdit(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs)">
      <summary>
                    When overridden in a derived class, called when a cell in the column enters editing mode.
                </summary>
      <returns>
                    The unedited value.
                </returns>
      <param name="editingElement">
                    The element that the column displays for a cell in editing mode.
                </param>
      <param name="editingEventArgs">
                    Information about the user gesture that is causing a cell to enter editing mode.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGridColumn.RefreshCellContent(System.Windows.FrameworkElement,System.String)">
      <summary>
                    Refreshes the contents of a cell in the column in response to a column property value change.
                </summary>
      <param name="element">
                    The element returned by the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property of the cell to refresh.
                </param>
      <param name="propertyName">
                    The name of the column property that has changed.
                </param>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.SortMemberPath">
      <summary>
                    Gets or sets a property name, or a period-delimited hierarchy of property names, that indicates the member to sort by.
                </summary>
      <returns>
                    The path to the data-item member to sort by.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.Visibility">
      <summary>
                    Gets or sets the visibility of the column.
                </summary>
      <returns>
                    An enumeration value that specifies the column visibility. The default is <see cref="F:System.Windows.Visibility.Visible" />.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumn.Width">
      <summary>
                    Gets or sets the column width or automatic sizing mode.
                </summary>
      <returns>
                    A structure that represents the column width or automatic sizing mode. The default is the <see cref="P:System.Windows.Controls.DataGrid.ColumnWidth" /> property value.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridColumnEventArgs">
      <summary>
                    Provides data for <see cref="T:System.Windows.Controls.DataGrid" /> column-related events.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridColumnEventArgs.#ctor(System.Windows.Controls.DataGridColumn)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridColumnEventArgs" /> class.
                </summary>
      <param name="column">
                    The column that the event occurs for.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> is null.
                </exception>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumnEventArgs.Column">
      <summary>
                    Gets the column that the event occurs for.
                </summary>
      <returns>
                    The column that the event occurs for.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridColumnReorderingEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Windows.Controls.DataGrid.ColumnReordering" /> event. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridColumnReorderingEventArgs.#ctor(System.Windows.Controls.DataGridColumn)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridColumnReorderingEventArgs" /> class. 
                </summary>
      <param name="dataGridColumn">
                    The column that is being moved.
                </param>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumnReorderingEventArgs.Cancel">
      <summary>
                    Gets or sets a value that indicates whether the event has been handled, meaning that no additional processing is necessary. 
                </summary>
      <returns>true if the event has been handled; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumnReorderingEventArgs.Column">
      <summary>
                    Gets the column that is being moved.
                </summary>
      <returns>
                    The column that is being moved.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumnReorderingEventArgs.DragIndicator">
      <summary>
                    Gets or sets the template that is used to display the visual indicator of a column header while the user drags it.
                </summary>
      <returns>
                    The template that is used to display a dragged column header. 
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridColumnReorderingEventArgs.DropLocationIndicator">
      <summary>
                    Gets or sets the template that is used to display the visual indicator of the current drop location during a column drag operation.
                </summary>
      <returns>
                    The template that is used to display the drop location indicator during a column drag operation. 
                </returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridEditingUnit">
      <summary>
                    Specifies constants that define whether editing is enabled on a cell level or on a row level.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridEditingUnit.Cell">
      <summary>
                    Cell editing is enabled.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridEditingUnit.Row">
      <summary>
                    Row editing is enabled.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.DataGridEndingEditEventArgs">
      <summary>
                    Provides data for editing events.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridEndingEditEventArgs.#ctor(System.Windows.Controls.DataGridColumn,System.Windows.Controls.DataGridRow,System.Windows.FrameworkElement,System.Windows.Controls.DataGridEditingUnit)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridEndingEditEventArgs" /> class.
                </summary>
      <param name="column">
                    The column that contains the cell to be edited.
                </param>
      <param name="row">
                    The row that contains the cell to be edited.
                </param>
      <param name="editingElement">
                    The element that the column displays for a cell in editing mode.
                </param>
      <param name="editingUnit">
                    A member of the <see cref="T:System.Windows.Controls.DataGridEditingUnit" /> enumeration that indicates whether editing is enabled at the cell-level or row-level.
                </param>
    </member>
    <member name="P:System.Windows.Controls.DataGridEndingEditEventArgs.Cancel">
      <summary>
                    Gets or sets a value that indicates whether the event should be canceled.
                </summary>
      <returns>true if the event should be canceled; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridEndingEditEventArgs.Column">
      <summary>
                    Gets the column that contains the cell to be edited.
                </summary>
      <returns>
                    The column that contains the cell to be edited.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridEndingEditEventArgs.EditingElement">
      <summary>
                    Gets the element that the column displays for a cell in editing mode.
                </summary>
      <returns>
                    The element that the column displays for a cell in editing mode.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridEndingEditEventArgs.EditingUnit">
      <summary>
                    Gets a value that indicates whether editing is enabled at the cell-level or row-level.
                </summary>
      <returns>
        <see cref="F:System.Windows.Controls.DataGridEditingUnit.Cell" /> if editing is enabled at the cell-level; <see cref="F:System.Windows.Controls.DataGridEditingUnit.Row" /> if editing is enabled at the row-level.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridEndingEditEventArgs.Row">
      <summary>
                    Gets the row that contains the cell to be edited.
                </summary>
      <returns>
                    The row that contains the cell to be edited.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridGridLinesVisibility">
      <summary>
                    Specifies constants that define which grid lines separating <see cref="T:System.Windows.Controls.DataGrid" /> inner cells are shown.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridGridLinesVisibility.None">
      <summary>
                    No grid lines are shown.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridGridLinesVisibility.Horizontal">
      <summary>
                    Only horizontal grid lines, which separate rows, are shown.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridGridLinesVisibility.Vertical">
      <summary>
                    Only vertical grid lines, which separate columns, are shown.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridGridLinesVisibility.All">
      <summary>
                    Both horizontal and vertical grid lines are shown.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.DataGridHeadersVisibility">
      <summary>
                    Specifies constants that define which <see cref="T:System.Windows.Controls.DataGrid" /> header cells are displayed. 
                </summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridHeadersVisibility.All">
      <summary>
                    Both column and row header cells are displayed.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridHeadersVisibility.Column">
      <summary>
                    Only column header cells are displayed.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridHeadersVisibility.Row">
      <summary>
                    Only row header cells are displayed.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridHeadersVisibility.None">
      <summary>
                    No header cells are displayed.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.DataGridLength">
      <summary>
                    Represents the lengths of elements within the <see cref="T:System.Windows.Controls.DataGrid" /> control.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridLength.#ctor(System.Double)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridLength" /> class. 
                </summary>
      <param name="value">
                    The absolute pixel value to initialize the length to.
                </param>
    </member>
    <member name="P:System.Windows.Controls.DataGridLength.Auto">
      <summary>
                    Gets a <see cref="T:System.Windows.Controls.DataGridLength" /> structure that represents the standard automatic sizing mode.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Controls.DataGridLength" /> structure that represents the standard automatic sizing mode.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.DataGridLength.Equals(System.Object)">
      <summary>
                    Determines whether the specified object is equal to the current <see cref="T:System.Windows.Controls.DataGridLength" />.
                </summary>
      <returns>true if the specified object is a <see cref="T:System.Windows.Controls.DataGridLength" /> with the same value or sizing mode as the current <see cref="T:System.Windows.Controls.DataGridLength" />; otherwise, false.
                </returns>
      <param name="obj">
                    The object to compare to the current instance.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGridLength.Equals(System.Windows.Controls.DataGridLength)">
      <summary>
                    Determines whether the specified <see cref="T:System.Windows.Controls.DataGridLength" /> is equal to the current <see cref="T:System.Windows.Controls.DataGridLength" />.
                </summary>
      <returns>true if the specified object is a <see cref="T:System.Windows.Controls.DataGridLength" /> with the same value or sizing mode as the current <see cref="T:System.Windows.Controls.DataGridLength" />; otherwise, false.
                </returns>
      <param name="other">
                    The <see cref="T:System.Windows.Controls.DataGridLength" /> to compare to the current instance.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGridLength.GetHashCode">
      <summary>
                    Gets a hash code for the <see cref="T:System.Windows.Controls.DataGridLength" />.
                </summary>
      <returns>
                    A hash code for the current <see cref="T:System.Windows.Controls.DataGridLength" />.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.DataGridLength.op_Equality(System.Windows.Controls.DataGridLength,System.Windows.Controls.DataGridLength)">
      <summary>
                    Compares two <see cref="T:System.Windows.Controls.DataGridLength" /> structures for equality.
                </summary>
      <returns>true if the two <see cref="T:System.Windows.Controls.DataGridLength" /> instances have the same value or sizing mode; otherwise, false.
                </returns>
      <param name="gl1">
                    The first <see cref="T:System.Windows.Controls.DataGridLength" /> instance to compare.
                </param>
      <param name="gl2">
                    The second <see cref="T:System.Windows.Controls.DataGridLength" /> instance to compare.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGridLength.op_Inequality(System.Windows.Controls.DataGridLength,System.Windows.Controls.DataGridLength)">
      <summary>
                    Compares two <see cref="T:System.Windows.Controls.DataGridLength" /> structures to determine whether they are not equal.
                </summary>
      <returns>true if the two <see cref="T:System.Windows.Controls.DataGridLength" /> instances do not have the same value or sizing mode; otherwise, false.
                </returns>
      <param name="gl1">
                    The first <see cref="T:System.Windows.Controls.DataGridLength" /> instance to compare.
                </param>
      <param name="gl2">
                    The second <see cref="T:System.Windows.Controls.DataGridLength" /> instance to compare.
                </param>
    </member>
    <member name="P:System.Windows.Controls.DataGridLength.SizeToCells">
      <summary>
                    Gets a <see cref="T:System.Windows.Controls.DataGridLength" /> structure that represents the cell-based automatic sizing mode.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Controls.DataGridLength" /> structure that represents the cell-based automatic sizing mode.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridLength.SizeToHeader">
      <summary>
                    Gets a <see cref="T:System.Windows.Controls.DataGridLength" /> structure that represents the header-based automatic sizing mode.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Controls.DataGridLength" /> structure that represents the header-based automatic sizing mode.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridLength.Value">
      <summary>
                    Gets the absolute value of the <see cref="T:System.Windows.Controls.DataGridLength" /> in pixels.
                </summary>
      <returns>
                    The absolute value of the <see cref="T:System.Windows.Controls.DataGridLength" /> in pixels.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridLengthConverter">
      <summary>
                    Converts instances of other types to and from <see cref="T:System.Windows.Controls.DataGridLength" /> instances.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridLengthConverter.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridLengthConverter" /> class.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridLengthConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Determines whether conversion is possible from the specified type to a <see cref="T:System.Windows.Controls.DataGridLength" />.
                </summary>
      <returns>true if this converter can perform the conversion; otherwise, false.
                </returns>
      <param name="context">
                    An object that provides a format context.
                </param>
      <param name="sourceType">
                    The type to convert from.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGridLengthConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Determines whether conversion is possible to the specified type from a <see cref="T:System.Windows.Controls.DataGridLength" />.
                </summary>
      <returns>true if <paramref name="destinationType" /> is a <see cref="T:System.String" /> type; otherwise, false.
                </returns>
      <param name="context">
                    An object that provides a format context.
                </param>
      <param name="destinationType">
                    The type to convert to.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGridLengthConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
                    Converts the specified value to a <see cref="T:System.Windows.Controls.DataGridLength" /> instance.
                </summary>
      <returns>
                    The converted value.
                </returns>
      <param name="context">
                    An object that provides a format context.
                </param>
      <param name="culture">
                    The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.
                </param>
      <param name="value">
                    The value to convert.
                </param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Controls.DataGridLengthConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
                    Converts the specified <see cref="T:System.Windows.Controls.DataGridLength" /> instance to an instance of the specified type.
                </summary>
      <returns>
                    The converted value.
                </returns>
      <param name="context">
                    An object that provides a format context.
                </param>
      <param name="culture">
                    The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.
                </param>
      <param name="value">
                    The <see cref="T:System.Windows.Controls.DataGridLength" /> to convert.
                </param>
      <param name="destinationType">
                    The type to convert the value to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" /> is null.
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="destinationType" /> is not a <see cref="T:System.String" />.
                
                    - or -
                <paramref name="value" /> is not a <see cref="T:System.Windows.Controls.DataGridLength" />.
                </exception>
    </member>
    <member name="T:System.Windows.Controls.DataGridPreparingCellForEditEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Windows.Controls.DataGrid.PreparingCellForEdit" /> event.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridPreparingCellForEditEventArgs.#ctor(System.Windows.Controls.DataGridColumn,System.Windows.Controls.DataGridRow,System.Windows.RoutedEventArgs,System.Windows.FrameworkElement)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridPreparingCellForEditEventArgs" /> class.
                </summary>
      <param name="column">
                    The column that contains the cell to be edited.
                </param>
      <param name="row">
                    The row that contains the cell to be edited.
                </param>
      <param name="editingEventArgs">
                    Information about the user gesture that caused the cell to enter edit mode.
                </param>
      <param name="editingElement">
                    The element that the column displays for a cell in editing mode.
                </param>
    </member>
    <member name="P:System.Windows.Controls.DataGridPreparingCellForEditEventArgs.Column">
      <summary>
                    Gets the column that contains the cell to be edited.
                </summary>
      <returns>
                    The column that contains the cell to be edited.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridPreparingCellForEditEventArgs.EditingElement">
      <summary>
                    Gets the element that the column displays for a cell in editing mode.
                </summary>
      <returns>
                    The element that the column displays for a cell in editing mode.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridPreparingCellForEditEventArgs.EditingEventArgs">
      <summary>
                    Gets information about the user gesture that caused the cell to enter edit mode.
                </summary>
      <returns>
                    Information about the user gesture that caused the cell to enter edit mode.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridPreparingCellForEditEventArgs.Row">
      <summary>
                    Gets the row that contains the cell to be edited.
                </summary>
      <returns>
                    The row that contains the cell to be edited.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridRow">
      <summary>
                    Represents a <see cref="T:System.Windows.Controls.DataGrid" /> row.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridRow.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridRow" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridRow.ArrangeOverride(System.Windows.Size)">
      <summary>
                    Arranges the content of the <see cref="T:System.Windows.Controls.DataGridRow" />.
                </summary>
      <returns>
                    The actual size used by the <see cref="T:System.Windows.Controls.DataGridRow" />.
                </returns>
      <param name="finalSize">
                    The final area within the parent that this element should use to arrange itself and its children.
                </param>
    </member>
    <member name="P:System.Windows.Controls.DataGridRow.DetailsTemplate">
      <summary>
                    Gets or sets the template that is used to display the details section of the row. 
                </summary>
      <returns>
                    The template that is used to display the row details section or null to use the <see cref="P:System.Windows.Controls.DataGrid.RowDetailsTemplate" /> setting. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGridRow.DetailsTemplateProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGridRow.DetailsTemplate" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGridRow.DetailsTemplate" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridRow.DetailsVisibility">
      <summary>
                    Gets or sets a value that indicates when the details section of the row is displayed.
                </summary>
      <returns>
                    An enumeration value that specifies the visibility of row details. The default is <see cref="F:System.Windows.Visibility.Collapsed" />.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The row has not been added to a <see cref="T:System.Windows.Controls.DataGrid" />.
                </exception>
    </member>
    <member name="F:System.Windows.Controls.DataGridRow.DetailsVisibilityProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGridRow.DetailsVisibility" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGridRow.DetailsVisibility" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.DataGridRow.GetIndex">
      <summary>
                    Returns the index of the current row.
                </summary>
      <returns>
                    The index of the current row.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.DataGridRow.GetRowContainingElement(System.Windows.FrameworkElement)">
      <summary>
                    Returns the <see cref="T:System.Windows.Controls.DataGridRow" /> that contains the specified element.
                </summary>
      <returns>
                    The <see cref="T:System.Windows.Controls.DataGridRow" /> that contains the specified element.
                </returns>
      <param name="element">
                    An element contained in a row to be found.
                </param>
    </member>
    <member name="P:System.Windows.Controls.DataGridRow.Header">
      <summary>
                    Gets or sets the row header.
                </summary>
      <returns>
                    The row header. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGridRow.HeaderProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGridRow.Header" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGridRow.Header" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridRow.HeaderStyle">
      <summary>
                    Gets or sets the style that is used when rendering the row header.
                </summary>
      <returns>
                    The style that is used when rendering the row header. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DataGridRow.HeaderStyleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGridRow.HeaderStyle" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DataGridRow.HeaderStyle" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.DataGridRow.MeasureOverride(System.Windows.Size)">
      <summary>
                    Measures the children of a <see cref="T:System.Windows.Controls.DataGridRow" /> to prepare for arranging them during the <see cref="M:System.Windows.Controls.DataGridRow.ArrangeOverride(System.Windows.Size)" /> pass. 
                </summary>
      <returns>
                    The size that the <see cref="T:System.Windows.Controls.DataGridRow" /> determines it needs during layout, based on its calculations of child object allocated sizes.
                </returns>
      <param name="availableSize">
                    The available size that this element can give to child elements. Indicates an upper limit that child elements should not exceed.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGridRow.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the column header when a new template is applied.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridRow.OnCreateAutomationPeer">
      <summary>
                    Returns a <see cref="T:System.Windows.Automation.Peers.DataGridRowAutomationPeer" /> for use by the Silverlight automation infrastructure.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Automation.Peers.DataGridRowAutomationPeer" /> for the <see cref="T:System.Windows.Controls.DataGridRow" /> object.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridRowDetailsEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Windows.Controls.DataGrid.LoadingRowDetails" />, <see cref="E:System.Windows.Controls.DataGrid.UnloadingRowDetails" />, and <see cref="E:System.Windows.Controls.DataGrid.RowDetailsVisibilityChanged" /> events.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridRowDetailsEventArgs.#ctor(System.Windows.Controls.DataGridRow,System.Windows.FrameworkElement)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridRowDetailsEventArgs" /> class. 
                </summary>
      <param name="row">
                    The row that the event occurs for.
                </param>
      <param name="detailsElement">
                    The row details section as a framework element.
                </param>
    </member>
    <member name="P:System.Windows.Controls.DataGridRowDetailsEventArgs.DetailsElement">
      <summary>
                    Gets the row details section as a framework element.
                </summary>
      <returns>
                    The row details section.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridRowDetailsEventArgs.Row">
      <summary>
                    Gets the row that the event occurs for.
                </summary>
      <returns>
                    The row that the event occurs for.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridRowDetailsVisibilityMode">
      <summary>
                    Specifies constants that define when <see cref="T:System.Windows.Controls.DataGrid" /> row details are displayed.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridRowDetailsVisibilityMode.Collapsed">
      <summary>
                    The row details section is not displayed for any rows.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridRowDetailsVisibilityMode.Visible">
      <summary>
                    The row details section is displayed for all rows.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridRowDetailsVisibilityMode.VisibleWhenSelected">
      <summary>
                    The row details section is displayed only for selected rows.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.DataGridRowEventArgs">
      <summary>
                    Provides data for <see cref="T:System.Windows.Controls.DataGrid" /> row-related events.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridRowEventArgs.#ctor(System.Windows.Controls.DataGridRow)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridRowEventArgs" /> class.
                </summary>
      <param name="dataGridRow">
                    The row that the event occurs for.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataGridRow" /> is null.
                </exception>
    </member>
    <member name="P:System.Windows.Controls.DataGridRowEventArgs.Row">
      <summary>
                    Gets the row that the event occurs for.
                </summary>
      <returns>
                    The row that the event occurs for.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.DataGridSelectionMode">
      <summary>
                    Specifies constants that define the <see cref="T:System.Windows.Controls.DataGrid" /> selection modes.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridSelectionMode.Extended">
      <summary>
                    The user can select multiple items while holding down the SHIFT or CTRL keys.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.DataGridSelectionMode.Single">
      <summary>
                    The user can select only one item at a time.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.DataGridTemplateColumn">
      <summary>
                    Represents a <see cref="T:System.Windows.Controls.DataGrid" /> column that hosts template-specified content in its cells.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridTemplateColumn.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridTemplateColumn" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.DataGridTemplateColumn.CellEditingTemplate">
      <summary>
                    Gets or sets the template that is used to display the contents of a cell that is in editing mode.
                </summary>
      <returns>
                    The template that is used to display the contents of a cell that is in editing mode. The default is null.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridTemplateColumn.CellTemplate">
      <summary>
                    Gets or sets the template that is used to display the contents of a cell that is not in editing mode. 
                </summary>
      <returns>
                    The template that is used to display the contents of a cell that is not in editing mode. The default is null.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.DataGridTemplateColumn.GenerateEditingElement(System.Windows.Controls.DataGridCell,System.Object)">
      <summary>
                    Gets an element defined by the <see cref="P:System.Windows.Controls.DataGridTemplateColumn.CellEditingTemplate" /> that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
                </summary>
      <returns>
                    A new editing element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
                </returns>
      <param name="cell">
                    The cell that will contain the generated element.
                </param>
      <param name="dataItem">
                    The data item represented by the row that contains the intended cell.
                </param>
      <exception cref="T:System.TypeInitializationException">
                    The <see cref="P:System.Windows.Controls.DataGridTemplateColumn.CellEditingTemplate" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Controls.DataGridTemplateColumn.GenerateElement(System.Windows.Controls.DataGridCell,System.Object)">
      <summary>
                    Gets an element defined by the <see cref="P:System.Windows.Controls.DataGridTemplateColumn.CellTemplate" /> that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
                </summary>
      <returns>
                    A new, read-only element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
                </returns>
      <param name="cell">
                    The cell that will contain the generated element.
                </param>
      <param name="dataItem">
                    The data item represented by the row that contains the intended cell.
                </param>
      <exception cref="T:System.TypeInitializationException">
                    The <see cref="P:System.Windows.Controls.DataGridTemplateColumn.CellTemplate" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Controls.DataGridTemplateColumn.PrepareCellForEdit(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs)">
      <summary>
                    Called when a cell in the column enters editing mode.
                </summary>
      <returns>null in all cases.
                </returns>
      <param name="editingElement">
                    The element that the column displays for a cell in editing mode.
                </param>
      <param name="editingEventArgs">
                    Information about the user gesture that is causing a cell to enter editing mode.
                </param>
    </member>
    <member name="T:System.Windows.Controls.DataGridTextColumn">
      <summary>
                    Represents a <see cref="T:System.Windows.Controls.DataGrid" /> column that hosts textual content in its cells.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridTextColumn.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.DataGridTextColumn" /> class.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DataGridTextColumn.CancelCellEdit(System.Windows.FrameworkElement,System.Object)">
      <summary>
                    Causes the column cell being edited to revert to the specified value.
                </summary>
      <param name="editingElement">
                    The element that the column displays for a cell in editing mode.
                </param>
      <param name="uneditedValue">
                    The previous, unedited value in the cell being edited.
                </param>
    </member>
    <member name="P:System.Windows.Controls.DataGridTextColumn.FontFamily">
      <summary>
                    Gets or sets the font family of the content of cells in the column.
                </summary>
      <returns>
                    The font family of the content of cells in the column. The default is null.
                </returns>
      <exception cref="T:System.NullReferenceException">
                    The <see cref="P:System.Windows.Controls.DataGridTextColumn.FontFamily" /> value has not been set.
                </exception>
    </member>
    <member name="P:System.Windows.Controls.DataGridTextColumn.FontSize">
      <summary>
                    Gets or sets the font size of the content of cells in the column.
                </summary>
      <returns>
                    The font size of the content of cells in the column. The default is <see cref="F:System.Double.NaN" />.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridTextColumn.FontStyle">
      <summary>
                    Gets or sets the font style of the content of cells in the column.
                </summary>
      <returns>
                    The font style of the content of cells in the column. The default is <see cref="P:System.Windows.FontStyles.Normal" />.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridTextColumn.FontWeight">
      <summary>
                    Gets or sets the font weight of the contents of cells in the column.
                </summary>
      <returns>
                    The font weight of the contents of cells in the column. The default is <see cref="P:System.Windows.FontWeights.Normal" />.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DataGridTextColumn.Foreground">
      <summary>
                    Gets or sets the brush that is used to paint the text contents of cells in the column.
                </summary>
      <returns>
                    The brush that is used to paint the contents of cells in the column. The default is null.
                </returns>
      <exception cref="T:System.NullReferenceException">
                    The <see cref="P:System.Windows.Controls.DataGridTextColumn.Foreground" /> value has not been set.
                </exception>
    </member>
    <member name="M:System.Windows.Controls.DataGridTextColumn.GenerateEditingElement(System.Windows.Controls.DataGridCell,System.Object)">
      <summary>
                    Gets a <see cref="T:System.Windows.Controls.TextBox" /> control that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
                </summary>
      <returns>
                    A new <see cref="T:System.Windows.Controls.TextBox" /> control that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
                </returns>
      <param name="cell">
                    The cell that will contain the generated element.
                </param>
      <param name="dataItem">
                    The data item represented by the row that contains the intended cell.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGridTextColumn.GenerateElement(System.Windows.Controls.DataGridCell,System.Object)">
      <summary>
                    Gets a read-only <see cref="T:System.Windows.Controls.TextBlock" /> element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
                </summary>
      <returns>
                    A new, read-only <see cref="T:System.Windows.Controls.TextBlock" /> element that is bound to the column's <see cref="P:System.Windows.Controls.DataGridBoundColumn.Binding" /> property value.
                </returns>
      <param name="cell">
                    The cell that will contain the generated element.
                </param>
      <param name="dataItem">
                    The data item represented by the row that contains the intended cell.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGridTextColumn.PrepareCellForEdit(System.Windows.FrameworkElement,System.Windows.RoutedEventArgs)">
      <summary>
                    Called when a cell in the column enters editing mode.
                </summary>
      <returns>
                    The unedited value. 
                </returns>
      <param name="editingElement">
                    The element that the column displays for a cell in editing mode.
                </param>
      <param name="editingEventArgs">
                    Information about the user gesture that is causing a cell to enter editing mode.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DataGridTextColumn.RefreshCellContent(System.Windows.FrameworkElement,System.String)">
      <summary>
                    Refreshes the contents of a cell in the column in response to a column property value change.
                </summary>
      <param name="element">
                    The <see cref="T:System.Windows.Controls.TextBlock" /> or <see cref="T:System.Windows.Controls.TextBox" /> returned by the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property of the cell to refresh.
                </param>
      <param name="propertyName">
                    The name of the column property that has changed.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is not a <see cref="T:System.Windows.Controls.TextBlock" /> or <see cref="T:System.Windows.Controls.TextBox" />.
                </exception>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DataGridCellsPresenter">
      <summary>
                    Used within the template of a <see cref="T:System.Windows.Controls.DataGrid" /> to specify the location in the control's visual tree where the cells are to be added.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridCellsPresenter.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DataGridCellsPresenter" /> class. 
                </summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DataGridColumnHeader">
      <summary>
                    Represents an individual <see cref="T:System.Windows.Controls.DataGrid" /> column header.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeader.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DataGridColumnHeader" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeader.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the column header when a new template is applied. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeader.OnContentChanged(System.Object,System.Object)">
      <summary>
                    Called when the value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property changes.
                </summary>
      <param name="oldContent">
                    The old value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.
                </param>
      <param name="newContent">
                    The new value of the <see cref="P:System.Windows.Controls.ContentControl.Content" /> property.
                </param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="newContent" /> is not null and is not a primitive data type.
                </exception>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeader.OnCreateAutomationPeer">
      <summary>
                    Returns a <see cref="T:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer" /> for use by the Silverlight automation infrastructure.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Automation.Peers.DataGridColumnHeaderAutomationPeer" /> for the <see cref="T:System.Windows.Controls.Primitives.DataGridColumnHeader" /> object.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorBrush">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint the column header separator lines.
                </summary>
      <returns>
                    The brush used to paint column header separator lines.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorBrushProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorBrush" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorBrush" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorVisibility">
      <summary>
                    Gets or sets a value indicating whether the column header separator lines are visible.
                </summary>
      <returns>
                    One of the enumeration values that specifies the visibility of the column header separator lines. The default is <see cref="F:System.Windows.Visibility.Visible" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorVisibilityProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorVisibility" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.DataGridColumnHeader.SeparatorVisibility" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter">
      <summary>
                    Used within the template of a <see cref="T:System.Windows.Controls.DataGrid" /> to specify the location in the control's visual tree where the column headers are to be added.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DataGridColumnHeadersPresenter" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DataGridDetailsPresenter">
      <summary>
                    Used within the template of a <see cref="T:System.Windows.Controls.DataGrid" /> to specify the location in the control's visual tree where the row details are to be added.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridDetailsPresenter.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DataGridDetailsPresenter" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DataGridDetailsPresenter.ContentHeight">
      <summary>
                    Gets or sets the height of the content.
                </summary>
      <returns>
                    The height of the content.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.DataGridDetailsPresenter.ContentHeightProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Primitives.DataGridDetailsPresenter.ContentHeight" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.DataGridDetailsPresenter.ContentHeight" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DataGridFrozenGrid">
      <summary>
                    Represents a non-scrollable grid that contains <see cref="T:System.Windows.Controls.DataGrid" /> row headers.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridFrozenGrid.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DataGridFrozenGrid" /> class.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridFrozenGrid.GetIsFrozen(System.Windows.DependencyObject)">
      <summary>
                    Gets a value that indicates whether the grid is frozen.
                </summary>
      <returns>true if the grid is frozen; otherwise, false. The default is true.
                </returns>
      <param name="element">
                    The object to get the <see cref="P:System.Windows.Controls.Primitives.DataGridFrozenGrid.IsFrozen" /> value from.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.
                </exception>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DataGridFrozenGrid.IsFrozen">
      <summary>
                    Gets or sets a values that indicates whether the grid is frozen.
                </summary>
      <returns>true if the grid is frozen; otherwise, false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.DataGridFrozenGrid.IsFrozenProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DataGridFrozenGrid.IsFrozen" /> dependency property.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridFrozenGrid.SetIsFrozen(System.Windows.DependencyObject,System.Boolean)">
      <summary>
                    Sets a value that indicates whether the grid is frozen.
                </summary>
      <param name="element">
                    The object to set the <see cref="P:System.Windows.Controls.Primitives.DataGridFrozenGrid.IsFrozen" /> value on.
                </param>
      <param name="value">true if <paramref name="element" /> is frozen; otherwise, false.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.
                </exception>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DataGridRowHeader">
      <summary>
                    Represents an individual <see cref="T:System.Windows.Controls.DataGrid" /> row header.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridRowHeader.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DataGridRowHeader" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridRowHeader.MeasureOverride(System.Windows.Size)">
      <summary>
                    Measures the children of a <see cref="T:System.Windows.Controls.Primitives.DataGridRowHeader" /> to prepare for arranging them during the <see cref="M:System.Windows.FrameworkElement.ArrangeOverride(System.Windows.Size)" /> pass.
                </summary>
      <returns>
                    The size that the <see cref="T:System.Windows.Controls.Primitives.DataGridRowHeader" /> determines it needs during layout, based on its calculations of child object allocated sizes.
                </returns>
      <param name="availableSize">
                    The available size that this element can give to child elements. Indicates an upper limit that child elements should not exceed.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridRowHeader.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the row header when a new template is applied. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridRowHeader.OnCreateAutomationPeer">
      <summary>
                    Returns a <see cref="T:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer" /> for use by the Silverlight automation infrastructure.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Automation.Peers.DataGridRowHeaderAutomationPeer" /> for the <see cref="T:System.Windows.Controls.Primitives.DataGridRowHeader" /> object.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorBrush">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Media.Brush" /> used to paint the row header separator lines.
                </summary>
      <returns>
                    The brush used to paint row header separator lines.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorBrushProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorBrush" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorBrush" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorVisibility">
      <summary>
                    Gets or sets a value indicating whether the row header separator lines are visible.
                </summary>
      <returns>
                    One of the enumeration values that specifies the visibility of the row header separator lines. The default is <see cref="F:System.Windows.Visibility.Visible" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorVisibilityProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorVisibility" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Primitives.DataGridRowHeader.SeparatorVisibility" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DataGridRowsPresenter">
      <summary>
                    Used within the template of a <see cref="T:System.Windows.Controls.DataGrid" /> to specify the location in the control's visual tree where the rows are to be added.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DataGridRowsPresenter.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DataGridRowsPresenter" /> class.
                </summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\2.0.31005.0\Libraries\Client\system.windows.controls.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Windows.Controls</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Automation.Peers.CalendarAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.Calendar" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarAutomationPeer.#ctor(System.Windows.Controls.Calendar)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.CalendarAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.Calendar" /> instance to associate with the <see cref="T:System.Windows.Automation.Peers.CalendarAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets the control pattern for this <see cref="T:System.Windows.Automation.Peers.CalendarAutomationPeer" />.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values.
                </param>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#IGridProvider#ColumnCount">
      <summary>
                    Gets the total number of columns in a grid.
                </summary>
      <returns>
                    The total number of columns in a grid. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#IGridProvider#GetItem(System.Int32,System.Int32)">
      <summary>
                    Retrieves the UI Automation provider for the specified cell.
                </summary>
      <returns>
                    The UI Automation provider for the specified cell. 
                </returns>
      <param name="row">
                    The ordinal number of the row.
                </param>
      <param name="column">
                    The ordinal number of the column.
                </param>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#IGridProvider#RowCount">
      <summary>
                    Gets the total number of rows in a grid.
                </summary>
      <returns>
                    The total number of rows in a grid. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#IMultipleViewProvider#CurrentView">
      <summary>
                    Gets the current control-specific view.
                </summary>
      <returns>
                    The value for the current view of the UI Automation element. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#IMultipleViewProvider#GetSupportedViews">
      <summary>
                    Retrieves a collection of control-specific view identifiers.
                </summary>
      <returns>
                    A collection of values that identifies the views that are available for a UI Automation element.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#IMultipleViewProvider#GetViewName(System.Int32)">
      <summary>
                    Retrieves the name of a control-specific view. 
                </summary>
      <returns>
                    A localized name for the view. 
                </returns>
      <param name="viewId">
                    The view identifier.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#IMultipleViewProvider#SetCurrentView(System.Int32)">
      <summary>
                    Sets the current control-specific view.
                </summary>
      <param name="viewId">
                    A view identifier.
                </param>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#CanSelectMultiple">
      <summary>
                    Gets a value that specifies whether the UI Automation provider allows more than one child element to be selected at the same time.
                </summary>
      <returns>true if multiple selection is allowed; otherwise, false. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#GetSelection">
      <summary>
                    Retrieves a UI Automation provider for each child element that is selected.
                </summary>
      <returns>
                    A collection of UI Automation providers. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#IsSelectionRequired">
      <summary>
                    Gets a value that specifies whether the UI Automation provider requires at least one child element to be selected.
                </summary>
      <returns>true if selection is required; otherwise, false. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#ITableProvider#GetColumnHeaders">
      <summary>
                    Gets a collection of UI Automation providers that represents all the column headers in a table.
                </summary>
      <returns>
                    A collection of UI Automation providers. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#ITableProvider#GetRowHeaders">
      <summary>
                    Retrieves a collection of UI Automation providers that represents all row headers in the table.
                </summary>
      <returns>
                    A collection of UI Automation providers. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarAutomationPeer.System#Windows#Automation#Provider#ITableProvider#RowOrColumnMajor">
      <summary>
                    Retrieves the primary direction of traversal for the table.
                </summary>
      <returns>
                    The primary direction of traversal. 
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.CalendarButtonAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.Primitives.CalendarButton" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.#ctor(System.Windows.Controls.Primitives.CalendarButton)">
      <param name="owner"></param>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <param name="patternInterface"></param>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#Column">
      <summary>
                    Gets the ordinal number of the column that contains the cell or item.
                </summary>
      <returns>
                    A zero-based ordinal number that identifies the column that contains the cell or item.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#ColumnSpan">
      <summary>
                    Gets the number of columns that are spanned by a cell or item.
                </summary>
      <returns>
                    The number of columns spanned.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#ContainingGrid">
      <summary>
                    Gets a UI Automation provider that implements <see cref="T:System.Windows.Automation.Provider.IGridProvider" /> and that represents the container of the cell or item.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#Row">
      <summary>
                    Gets the ordinal number of the row that contains the cell or item.
                </summary>
      <returns>
                    A zero-based ordinal number that identifies the row that contains the cell or item.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#RowSpan">
      <summary>
                    Gets the number of rows that are spanned by a cell or item.
                </summary>
      <returns>
                    The number of rows that are spanned. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.System#Windows#Automation#Provider#IInvokeProvider#Invoke">
      <summary>
                    Sends a request to activate the control and initiate its single, unambiguous action.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
      <summary>
                    Adds the current element to the collection of selected items.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
      <summary>
                    Gets a value that indicates whether an item is selected.
                </summary>
      <returns>true if the element is selected; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
      <summary>
                    Removes the current element from the collection of selected items.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
      <summary>
                    Clears any existing selection and then selects the current element.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
      <summary>
                    Gets the UI Automation provider that implements <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> and that acts as the container for the calling object.
                </summary>
      <returns>
                    The provider that supports <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />.
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.Primitives.CalendarDayButton" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.#ctor(System.Windows.Controls.Primitives.CalendarDayButton)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.Primitives.CalendarDayButton" /> instance that is associated with this <see cref="T:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets the control pattern implementation for this <see cref="T:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer" />.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values.
                </param>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#Column">
      <summary>
                    Gets the ordinal number of the column that contains the cell or item.
                </summary>
      <returns>
                    A zero-based ordinal number that identifies the column that contains the cell or item. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#ColumnSpan">
      <summary>
                    Gets the number of columns that are spanned by a cell or item.
                </summary>
      <returns>
                    The number of columns. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#ContainingGrid">
      <summary>
                    Gets a UI Automation provider that implements <see cref="T:System.Windows.Automation.Provider.IGridProvider" /> and that represents the container of the cell or item. 
                </summary>
      <returns>
                    The UI Automation provider.
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#Row">
      <summary>
                    Gets the ordinal number of the row that contains the cell or item.
                </summary>
      <returns>
                    A zero-based ordinal number that identifies the row that contains the cell or item. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#IGridItemProvider#RowSpan">
      <summary>
                    Gets the number of rows that are spanned by a cell or item. 
                </summary>
      <returns>
                    The number of rows. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#IInvokeProvider#Invoke">
      <summary>
                    Sends a request to activate the control and to initiate its single, unambiguous action.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
      <summary>
                    Adds the current element to the collection of selected items.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
      <summary>
                    Gets a value that indicates whether an item is selected.
                </summary>
      <returns>true if the element is selected; otherwise, false. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
      <summary>
                    Removes the current element from the collection of selected items.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
      <summary>
                    Clear any existing selection and then selects the current element.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
      <summary>
                    Gets the UI Automation provider that implements <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> and that acts as the container for the calling object.
                </summary>
      <returns>
                    The UI Automation provider.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#ITableItemProvider#GetColumnHeaderItems">
      <summary>
                    Retrieves a collection of UI Automation providers that represent all the column headers that are associated with a table item or cell.
                </summary>
      <returns>
                    A collection of UI Automation providers.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.CalendarDayButtonAutomationPeer.System#Windows#Automation#Provider#ITableItemProvider#GetRowHeaderItems">
      <summary>
                    Retrieves a collection of UI Automation providers that represent all the row headers that are associated with a table item or cell.
                </summary>
      <returns>
                    A collection of UI Automation providers.
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.DatePickerAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.DatePicker" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DatePickerAutomationPeer.#ctor(System.Windows.Controls.DatePicker)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.DatePickerAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.DatePicker" /> to associate with the <see cref="T:System.Windows.Automation.Peers.DatePickerAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DatePickerAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets the control pattern for the <see cref="T:System.Windows.Controls.DatePicker" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.DatePickerAutomationPeer" />.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.DatePickerAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
      <summary>
                    Hides all nodes, controls, or content that are descendants of the control.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.DatePickerAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
      <summary>
                    Displays all child nodes, controls, or content of the control.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.DatePickerAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
      <summary>
                    Gets the state, expanded or collapsed, of the control.
                </summary>
      <returns>
                    The state, expanded or collapsed, of the control. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.DatePickerAutomationPeer.System#Windows#Automation#Provider#IValueProvider#IsReadOnly">
      <summary>
                    Gets a value that specifies whether the value of a control is read-only.
                </summary>
      <returns>
                    Returns false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.DatePickerAutomationPeer.System#Windows#Automation#Provider#IValueProvider#SetValue(System.String)">
      <summary>
                    Sets the value of a control.
                </summary>
      <param name="value">
                    The value to set. The provider is responsible for converting the value to the appropriate data type. 
                </param>
    </member>
    <member name="P:System.Windows.Automation.Peers.DatePickerAutomationPeer.System#Windows#Automation#Provider#IValueProvider#Value">
      <summary>
                    Gets the value of the control.
                </summary>
      <returns>
                    The value of the control as a string. 
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.GridSplitterAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.GridSplitter" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.GridSplitterAutomationPeer.#ctor(System.Windows.Controls.GridSplitter)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.GridSplitterAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.GridSplitter" /> to associate with the <see cref="T:System.Windows.Automation.Peers.GridSplitterAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.GridSplitterAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets the control pattern for the <see cref="T:System.Windows.Controls.GridSplitter" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.GridSplitterAutomationPeer" />.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values.
                </param>
    </member>
    <member name="P:System.Windows.Automation.Peers.GridSplitterAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#CanMove">
      <summary>
                    Gets a value that specifies whether the control can be moved.
                </summary>
      <returns>true if the element can be moved; otherwise, false. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.GridSplitterAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#CanResize">
      <summary>
                    Gets a value that specifies whether the UI Automation element can be resized.
                </summary>
      <returns>true if the element can be resized; otherwise, false. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.GridSplitterAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#CanRotate">
      <summary>
                    Gets a value that specifies whether the control can be rotated.
                </summary>
      <returns>true if the element can be rotated; otherwise, false. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.GridSplitterAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#Move(System.Double,System.Double)">
      <summary>
                    Moves the control.
                </summary>
      <param name="x">
                    Absolute screen coordinates of the left side of the control.
                </param>
      <param name="y">
                    Absolute screen coordinates of the top of the control.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.GridSplitterAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#Resize(System.Double,System.Double)">
      <summary>
                    Resizes the control.
                </summary>
      <param name="width">
                    The new width of the window, in pixels. 
                </param>
      <param name="height">
                    The new height of the window, in pixels. 
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.GridSplitterAutomationPeer.System#Windows#Automation#Provider#ITransformProvider#Rotate(System.Double)">
      <summary>
                    Rotates the control.
                </summary>
      <param name="degrees">
                    The number of degrees to rotate the control. A positive number rotates clockwise; a negative number rotates counterclockwise. 
                </param>
    </member>
    <member name="T:System.Windows.Automation.Peers.TabControlAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.TabControl" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.TabControlAutomationPeer.#ctor(System.Windows.Controls.TabControl)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.TabControlAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.TabControl" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TabControlAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.TabControlAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets the control pattern for the <see cref="T:System.Windows.Controls.TabControl" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TabControlAutomationPeer" />.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values.
                </param>
    </member>
    <member name="P:System.Windows.Automation.Peers.TabControlAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#CanSelectMultiple">
      <summary>
                    Gets a value that indicates whether the UI Automation provider allows more than one child element to be selected concurrently.
                </summary>
      <returns>true if multiple selection is allowed; otherwise, false. 
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TabControlAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#GetSelection">
      <summary>
                    Retrieves a UI Automation provider for each child element that is selected.
                </summary>
      <returns>
                    A collection of UI Automation providers. 
                </returns>
    </member>
    <member name="P:System.Windows.Automation.Peers.TabControlAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#IsSelectionRequired">
      <summary>
                    Gets a value that indicates whether the UI Automation provider requires at least one child element to be selected.
                </summary>
      <returns>true if selection is required; otherwise, false. 
                </returns>
    </member>
    <member name="T:System.Windows.Automation.Peers.TabItemAutomationPeer">
      <summary>
                    Exposes <see cref="T:System.Windows.Controls.TabItem" /> types to UI Automation.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.TabItemAutomationPeer.#ctor(System.Object)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Automation.Peers.TabItemAutomationPeer" /> class.
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.TabItem" /> to associate with the <see cref="T:System.Windows.Automation.Peers.TabItemAutomationPeer" />.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.TabItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
      <summary>
                    Gets the control pattern for the <see cref="T:System.Windows.Controls.TabItem" /> that is associated with this <see cref="T:System.Windows.Automation.Peers.TabItemAutomationPeer" />.
                </summary>
      <returns>
                    The object that implements the pattern interface, or null if the specified pattern interface is not implemented by this peer.
                </returns>
      <param name="patternInterface">
                    One of the enumeration values.
                </param>
    </member>
    <member name="M:System.Windows.Automation.Peers.TabItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
      <summary>
                    Adds the current element to the collection of selected items.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.TabItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
      <summary>
                    Gets a value that indicates whether an item is selected.
                </summary>
      <returns>true if the element is selected; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Windows.Automation.Peers.TabItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
      <summary>
                    Removes the current element from the collection of selected items.
                </summary>
    </member>
    <member name="M:System.Windows.Automation.Peers.TabItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
      <summary>
                    Deselects any selected items and then selects the current element.
                </summary>
    </member>
    <member name="P:System.Windows.Automation.Peers.TabItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
      <summary>
                    Gets the UI Automation provider that implements <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> and acts as the container for the calling object.
                </summary>
      <returns>
                    The provider that supports <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.Calendar">
      <summary>
                    Represents a control that enables a user to select a date by using a visual calendar display. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Calendar.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Calendar" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.Calendar.BlackoutDates">
      <summary>
                    Gets or sets a collection of dates that are marked as not selectable.
                </summary>
      <returns>
                    A collection of dates that cannot be selected. The default value is an empty collection.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Calendar.CalendarButtonStyle">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Style" /> associated with the control's internal <see cref="T:System.Windows.Controls.Primitives.CalendarButton" /> object.
                </summary>
      <returns>
                    The current style of the <see cref="T:System.Windows.Controls.Primitives.CalendarButton" /> object.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Calendar.CalendarButtonStyleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Calendar.CalendarButtonStyle" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Calendar.CalendarButtonStyle" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Calendar.CalendarDayButtonStyle">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Style" /> associated with the control's internal <see cref="T:System.Windows.Controls.Primitives.CalendarDayButton" /> object.
                </summary>
      <returns>
                    The current style of the <see cref="T:System.Windows.Controls.Primitives.CalendarDayButton" /> object.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Calendar.CalendarDayButtonStyleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Calendar.CalendarDayButtonStyle" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Calendar.CalendarDayButtonStyle" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Calendar.CalendarItemStyle">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Style" /> associated with the control's internal <see cref="T:System.Windows.Controls.Primitives.CalendarItem" /> object.
                </summary>
      <returns>
                    The current style of the <see cref="T:System.Windows.Controls.Primitives.CalendarItem" /> object.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Calendar.CalendarItemStyleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Calendar.CalendarItemStyle" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Calendar.CalendarItemStyle" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Calendar.DisplayDate">
      <summary>
                    Gets or sets the date to display.
                </summary>
      <returns>
                    The date to display.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The given date is not in the range specified by <see cref="P:System.Windows.Controls.Calendar.DisplayDateStart" /> and <see cref="P:System.Windows.Controls.Calendar.DisplayDateEnd" />.
                </exception>
    </member>
    <member name="E:System.Windows.Controls.Calendar.DisplayDateChanged">
      <summary>
                    Occurs when the <see cref="P:System.Windows.Controls.Calendar.DisplayDate" /> property is changed.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.Calendar.DisplayDateEnd">
      <summary>
                    Gets or sets the last date to be displayed.
                </summary>
      <returns>
                    The last date to display.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Calendar.DisplayDateEndProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Calendar.DisplayDateEnd" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Calendar.DisplayDateEnd" /> dependency property.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Calendar.DisplayDateProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Calendar.DisplayDate" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Calendar.DisplayDate" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Calendar.DisplayDateStart">
      <summary>
                    Gets or sets the first date to be displayed.
                </summary>
      <returns>
                    The first date to display.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Calendar.DisplayDateStartProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Calendar.DisplayDateStart" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Calendar.DisplayDateStart" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Calendar.DisplayMode">
      <summary>
                    Gets or sets a value indicating whether the calendar is displayed in months, years, or decades.
                </summary>
      <returns>
                    A value indicating what length of time the <see cref="T:System.Windows.Controls.Calendar" /> should display.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.Calendar.DisplayModeChanged">
      <summary>
                    Occurs when the <see cref="P:System.Windows.Controls.Calendar.DisplayMode" /> property is changed. 
                </summary>
    </member>
    <member name="F:System.Windows.Controls.Calendar.DisplayModeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Calendar.DisplayMode" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Calendar.DisplayMode" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Calendar.FirstDayOfWeek">
      <summary>
                    Gets or sets the day that is considered the beginning of the week.
                </summary>
      <returns>
                    A <see cref="T:System.DayOfWeek" /> representing the beginning of the week. The default is <see cref="F:System.DayOfWeek.Sunday" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Calendar.FirstDayOfWeekProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Calendar.FirstDayOfWeek" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Calendar.FirstDayOfWeek" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Calendar.IsTodayHighlighted">
      <summary>
                    Gets or sets a value indicating whether the current date is highlighted.
                </summary>
      <returns>true if the current date is highlighted; otherwise, false. The default is true. 
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Calendar.IsTodayHighlightedProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Calendar.IsTodayHighlighted" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Calendar.IsTodayHighlighted" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.Calendar.OnApplyTemplate">
      <summary>
                    Invoked whenever application code or an internal process, such as a rebuilding layout pass, calls the <see cref="M:System.Windows.Controls.Control.ApplyTemplate" /> method.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Calendar.OnCreateAutomationPeer">
      <summary>
                    Returns a <see cref="T:System.Windows.Automation.Peers.CalendarAutomationPeer" />for use by the Silverlight automation infrastructure.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Automation.Peers.CalendarAutomationPeer" /> for the <see cref="T:System.Windows.Controls.Calendar" /> object.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Calendar.SelectedDate">
      <summary>
                    Gets or sets the currently selected date.
                </summary>
      <returns>
                    The date currently selected. The default is null.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The given date is outside the range specified by <see cref="P:System.Windows.Controls.Calendar.DisplayDateStart" /> and <see cref="P:System.Windows.Controls.Calendar.DisplayDateEnd" />
                    -or-
                
                    The given date is in the <see cref="P:System.Windows.Controls.Calendar.BlackoutDates" /> collection.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    If set to anything other than null when <see cref="P:System.Windows.Controls.Calendar.SelectionMode" /> is set to <see cref="F:System.Windows.Controls.CalendarSelectionMode.None" />.
                </exception>
    </member>
    <member name="F:System.Windows.Controls.Calendar.SelectedDateProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Calendar.SelectedDate" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Calendar.SelectedDate" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.Calendar.SelectedDates">
      <summary>
                    Gets a collection of selected dates.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Controls.SelectedDatesCollection" /> object that contains the currently selected dates. The default is an empty collection.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.Calendar.SelectedDatesChanged">
      <summary>
                    Occurs when the collection returned by the <see cref="P:System.Windows.Controls.Calendar.SelectedDates" /> property is changed. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.Calendar.SelectionMode">
      <summary>
                    Gets or sets a value that indicates what kind of selections are allowed.
                </summary>
      <returns>
                    A value that indicates the current selection mode. The default is <see cref="F:System.Windows.Controls.CalendarSelectionMode.SingleDate" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.Calendar.SelectionModeProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.Calendar.SelectionMode" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.Calendar.SelectionMode" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.Calendar.ToString">
      <summary>
                    Provides a text representation of the selected date.
                </summary>
      <returns>
                    A text representation of the selected date, or an empty string if <see cref="P:System.Windows.Controls.Calendar.SelectedDate" /> is null.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.CalendarBlackoutDatesCollection">
      <summary>
                    Represents a collection of non-selectable dates in a <see cref="T:System.Windows.Controls.Calendar" />.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.CalendarBlackoutDatesCollection.#ctor(System.Windows.Controls.Calendar)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.CalendarBlackoutDatesCollection" /> class. 
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.Calendar" /> whose dates this object represents.
                </param>
    </member>
    <member name="M:System.Windows.Controls.CalendarBlackoutDatesCollection.AddDatesInPast">
      <summary>
                    Adds all dates before <see cref="P:System.DateTime.Today" /> to the collection.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.CalendarBlackoutDatesCollection.Contains(System.DateTime)">
      <summary>
                    Returns a value that represents whether this collection contains the specified date.
                </summary>
      <returns>true if the collection contains the specified date; otherwise, false.
                </returns>
      <param name="date">
                    The date to search for.
                </param>
    </member>
    <member name="M:System.Windows.Controls.CalendarBlackoutDatesCollection.Contains(System.DateTime,System.DateTime)">
      <summary>
                    Returns a value that represents whether this collection contains the specified range of dates.
                </summary>
      <returns>true if all dates in the range are contained in the collection; otherwise, false.
                </returns>
      <param name="start">
                    The start of the date range.
                </param>
      <param name="end">
                    The end of the date range.
                </param>
    </member>
    <member name="M:System.Windows.Controls.CalendarBlackoutDatesCollection.ContainsAny(System.Windows.Controls.CalendarDateRange)">
      <summary>
                    Returns a value that represents whether this collection contains any date in the specified range.
                </summary>
      <returns>true if any date in the range is contained in the collection; otherwise, false.
                </returns>
      <param name="range">
                    The range of dates to search for.
                </param>
    </member>
    <member name="T:System.Windows.Controls.CalendarDateChangedEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Windows.Controls.Calendar.DisplayDateChanged" /> event. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.CalendarDateChangedEventArgs.AddedDate">
      <summary>
                    Gets or sets the date to be newly displayed.
                </summary>
      <returns>
                    The new date to display.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.CalendarDateChangedEventArgs.RemovedDate">
      <summary>
                    Getsor sets the date that was previously displayed.
                </summary>
      <returns>
                    The date previously displayed. 
                </returns>
    </member>
    <member name="T:System.Windows.Controls.CalendarDateRange">
      <summary>
                    Represents a range of dates in a <see cref="T:System.Windows.Controls.Calendar" />.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.CalendarDateRange.#ctor(System.DateTime)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.CalendarDateRange" /> class with a single date.
                </summary>
      <param name="day">
                    The date to be represented by the range.
                </param>
    </member>
    <member name="M:System.Windows.Controls.CalendarDateRange.#ctor(System.DateTime,System.DateTime)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.CalendarDateRange" /> class with a range of dates.
                </summary>
      <param name="start">
                    The start of the range to be represented.
                </param>
      <param name="end">
                    The end of the range to be represented.
                </param>
    </member>
    <member name="P:System.Windows.Controls.CalendarDateRange.End">
      <summary>
                    Gets the last date in the represented range.
                </summary>
      <returns>
                    The last date in the represented range.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.CalendarDateRange.Start">
      <summary>
                    Gets the first date in the represented range.
                </summary>
      <returns>
                    The first date in the represented range.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.CalendarMode">
      <summary>
                    Specifies values for the different modes of operation of a <see cref="T:System.Windows.Controls.Calendar" />. 
                </summary>
    </member>
    <member name="F:System.Windows.Controls.CalendarMode.Month">
      <summary>
                    The <see cref="T:System.Windows.Controls.Calendar" /> displays a month at a time.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.CalendarMode.Year">
      <summary>
                    The <see cref="T:System.Windows.Controls.Calendar" /> displays a year at a time.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.CalendarMode.Decade">
      <summary>
                    The <see cref="T:System.Windows.Controls.Calendar" /> displays a decade at a time.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.CalendarModeChangedEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Windows.Controls.Calendar.DisplayModeChanged" /> event. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.CalendarModeChangedEventArgs.#ctor(System.Windows.Controls.CalendarMode,System.Windows.Controls.CalendarMode)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.CalendarModeChangedEventArgs" /> class. 
                </summary>
      <param name="oldMode">
                    The previous mode.
                </param>
      <param name="newMode">
                    The new mode.
                </param>
    </member>
    <member name="P:System.Windows.Controls.CalendarModeChangedEventArgs.NewMode">
      <summary>
                    Gets the new mode of the <see cref="T:System.Windows.Controls.Calendar" />.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Controls.CalendarMode" /> representing the new mode. 
                </returns>
    </member>
    <member name="P:System.Windows.Controls.CalendarModeChangedEventArgs.OldMode">
      <summary>
                    Gets the previous mode of the <see cref="T:System.Windows.Controls.Calendar" />.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Controls.CalendarMode" /> representing the previous mode. 
                </returns>
    </member>
    <member name="T:System.Windows.Controls.CalendarSelectionMode">
      <summary>
                    Specifies values that describe the available selection modes for a <see cref="T:System.Windows.Controls.Calendar" />.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.CalendarSelectionMode.SingleDate">
      <summary>
                    Only a single date can be selected. Use the <see cref="P:System.Windows.Controls.Calendar.SelectedDate" /> property to retrieve the selected date.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.CalendarSelectionMode.SingleRange">
      <summary>
                    A single range of dates can be selected. Use the <see cref="P:System.Windows.Controls.Calendar.SelectedDates" /> property to retrieve the selected dates.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.CalendarSelectionMode.MultipleRange">
      <summary>
                    Multiple non-contiguous ranges of dates can be selected. Use the <see cref="P:System.Windows.Controls.Calendar.SelectedDates" /> property to retrieve the selected dates.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.CalendarSelectionMode.None">
      <summary>
                    No selections are allowed.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.DatePicker">
      <summary>
                    Represents a control that allows the user to select a date.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DatePicker.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.DatePicker" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.BlackoutDates">
      <summary>
                    Gets or sets a collection of dates that are marked as not selectable.
                </summary>
      <returns>
                    A collection of dates that cannot be selected. The default value is an empty collection.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.DatePicker.CalendarClosed">
      <summary>
                    Occurs when the drop-down <see cref="T:System.Windows.Controls.Calendar" /> is closed.
                </summary>
    </member>
    <member name="E:System.Windows.Controls.DatePicker.CalendarOpened">
      <summary>
                    Occurs when the drop-down <see cref="T:System.Windows.Controls.Calendar" /> is opened.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.CalendarStyle">
      <summary>
                    Gets or sets the style that is used when rendering the calendar.
                </summary>
      <returns>
                    The style that is used when rendering the calendar.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DatePicker.CalendarStyleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DatePicker.CalendarStyle" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DatePicker.CalendarStyle" /> dependency property.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.DatePicker.DateValidationError">
      <summary>
                    Occurs when <see cref="P:System.Windows.Controls.DatePicker.Text" /> is assigned a value that cannot be interpreted as a date.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.DisplayDate">
      <summary>
                    Gets or sets the date to display.
                </summary>
      <returns>
                    The date to display. The default is <see cref="P:System.DateTime.Today" />.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The specified date is not in the range defined by <see cref="P:System.Windows.Controls.DatePicker.DisplayDateStart" />. and <see cref="P:System.Windows.Controls.DatePicker.DisplayDateEnd" />.
                </exception>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.DisplayDateEnd">
      <summary>
                    Gets or sets the last date to be displayed.
                </summary>
      <returns>
                    The last date to display.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DatePicker.DisplayDateEndProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DatePicker.DisplayDateEnd" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DatePicker.DisplayDateEnd" /> dependency property.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DatePicker.DisplayDateProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DatePicker.DisplayDate" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DatePicker.DisplayDate" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.DisplayDateStart">
      <summary>
                    Gets or sets the first date to be displayed.
                </summary>
      <returns>
                    The first date to display.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DatePicker.DisplayDateStartProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DatePicker.DisplayDateStart" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DatePicker.DisplayDateStart" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.FirstDayOfWeek">
      <summary>
                    Gets or sets the day that is considered the beginning of the week.
                </summary>
      <returns>
                    A <see cref="T:System.DayOfWeek" /> representing the beginning of the week. The default is <see cref="F:System.DayOfWeek.Sunday" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DatePicker.FirstDayOfWeekProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DatePicker.FirstDayOfWeek" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DatePicker.FirstDayOfWeek" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.IsDropDownOpen">
      <summary>
                    Gets or sets a value that indicates whether the drop-down <see cref="T:System.Windows.Controls.Calendar" /> is open or closed.
                </summary>
      <returns>true if the <see cref="T:System.Windows.Controls.Calendar" /> is open; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DatePicker.IsDropDownOpenProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DatePicker.IsDropDownOpen" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DatePicker.IsDropDownOpen" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.IsTodayHighlighted">
      <summary>
                    Gets or sets a value that indicates whether the current date will be highlighted.
                </summary>
      <returns>true if the current date is highlighted; otherwise, false. The default is true. 
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DatePicker.IsTodayHighlightedProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DatePicker.IsTodayHighlighted" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DatePicker.IsTodayHighlighted" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.DatePicker.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the <see cref="T:System.Windows.Controls.DatePicker" /> control when a new template is applied.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DatePicker.OnCreateAutomationPeer">
      <summary>
                    Returns a <see cref="T:System.Windows.Automation.Peers.DatePickerAutomationPeer" /> for use by the Silverlight automation infrastructure.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Automation.Peers.DatePickerAutomationPeer" /> for this control.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.DatePicker.OnDateValidationError(System.Windows.Controls.DatePickerDateValidationErrorEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Windows.Controls.DatePicker.DateValidationError" /> event.
                </summary>
      <param name="e">
                    A <see cref="T:System.Windows.Controls.DatePickerDateValidationErrorEventArgs" /> that contains the event data.
                </param>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.SelectedDate">
      <summary>
                    Gets or sets the currently selected date.
                </summary>
      <returns>
                    The date currently selected. The default is null.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The specified date is not in the range defined by <see cref="P:System.Windows.Controls.DatePicker.DisplayDateStart" /> and <see cref="P:System.Windows.Controls.DatePicker.DisplayDateEnd" />, or the specified date is in the <see cref="P:System.Windows.Controls.DatePicker.BlackoutDates" /> collection. 
                </exception>
    </member>
    <member name="E:System.Windows.Controls.DatePicker.SelectedDateChanged">
      <summary>
                    Occurs when the <see cref="P:System.Windows.Controls.DatePicker.SelectedDate" /> property is changed.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.SelectedDateFormat">
      <summary>
                    Gets or sets the format that is used to display the selected date.
                </summary>
      <returns>
                    The format that is used to display the selected date. The default is <see cref="F:System.Windows.Controls.DatePickerFormat.Short" />.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    An specified format is not valid.
                </exception>
    </member>
    <member name="F:System.Windows.Controls.DatePicker.SelectedDateFormatProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DatePicker.SelectedDateFormat" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DatePicker.SelectedDateFormat" /> dependency property.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DatePicker.SelectedDateProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DatePicker.SelectedDate" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DatePicker.SelectedDate" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.SelectionBackground">
      <summary>
                    Gets or sets the background used for selected dates.
                </summary>
      <returns>
                    The background used for selected dates.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.DatePicker.SelectionBackgroundProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DatePicker.SelectionBackground" /> dependency property. 
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DatePicker.SelectionBackground" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DatePicker.Text">
      <summary>
                    Gets or sets the text that is displayed by the <see cref="T:System.Windows.Controls.DatePicker" />.
                </summary>
      <returns>
                    The text displayed by the <see cref="T:System.Windows.Controls.DatePicker" />.
                </returns>
      <exception cref="T:System.FormatException">
                    The text entered cannot be parsed to a valid date, and the exception is not suppressed.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The text entered parses to a date that is not selectable.
                </exception>
    </member>
    <member name="F:System.Windows.Controls.DatePicker.TextProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.DatePicker.Text" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.DatePicker.Text" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.DatePicker.ToString"></member>
    <member name="T:System.Windows.Controls.DatePickerDateValidationErrorEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Windows.Controls.DatePicker.DateValidationError" /> event.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DatePickerDateValidationErrorEventArgs.#ctor(System.Exception,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.DatePickerDateValidationErrorEventArgs" /> class. 
                </summary>
      <param name="exception">
                    The initial exception from the <see cref="E:System.Windows.Controls.DatePicker.DateValidationError" /> event.
                </param>
      <param name="text">
                    The text that caused the <see cref="E:System.Windows.Controls.DatePicker.DateValidationError" /> event.
                </param>
    </member>
    <member name="P:System.Windows.Controls.DatePickerDateValidationErrorEventArgs.Exception">
      <summary>
                    Gets or sets the initial exception associated with the <see cref="E:System.Windows.Controls.DatePicker.DateValidationError" /> event.
                </summary>
      <returns>
                    The exception associated with the validation failure.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DatePickerDateValidationErrorEventArgs.Text">
      <summary>
                    Gets or sets the text that caused the <see cref="E:System.Windows.Controls.DatePicker.DateValidationError" /> event.
                </summary>
      <returns>
                    The text that caused the validation failure.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.DatePickerDateValidationErrorEventArgs.ThrowException">
      <summary>
                    Gets or sets a value that indicates whether <see cref="P:System.Windows.Controls.DatePickerDateValidationErrorEventArgs.Exception" /> should be thrown.
                </summary>
      <returns>true if the exception should be thrown; otherwise, false.
                </returns>
      <exception cref="T:System.ArgumentException">
                    If set to true and <see cref="P:System.Windows.Controls.DatePickerDateValidationErrorEventArgs.Exception" /> is null.
                </exception>
    </member>
    <member name="T:System.Windows.Controls.DatePickerFormat">
      <summary>
                    Specifies date formats for a <see cref="T:System.Windows.Controls.DatePicker" />.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.DatePickerFormat.Long">
      <summary>
                    Specifies that the date should be displayed using unabbreviated days of the week and month names.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.DatePickerFormat.Short">
      <summary>
                    Specifies that the date should be displayed using abbreviated days of the week and month names.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.DateTimeTypeConverter">
      <summary>
                    Provides a converter to convert <see cref="T:System.DateTime" /> objects to and from other representations.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DateTimeTypeConverter.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.DateTimeTypeConverter" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.DateTimeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Gets a value that indicates whether it is possible to convert the specified type to a <see cref="T:System.DateTime" /> with the specified format context.
                </summary>
      <returns>true if the conversion is possible; otherwise, false.
                </returns>
      <param name="context">
                    The format context that is used to convert the specified type.
                </param>
      <param name="sourceType">
                    The type to convert.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DateTimeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
                    Gets a value that indicates whether it is possible to convert a <see cref="T:System.DateTime" /> to the specified type within the specified format context.
                </summary>
      <returns>true if the conversion is possible; otherwise, false.
                </returns>
      <param name="context">
                    The format context that is used to convert.
                </param>
      <param name="destinationType">
                    The type to convert to.
                </param>
    </member>
    <member name="M:System.Windows.Controls.DateTimeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
                    Converts the specified object to a <see cref="T:System.DateTime" /> with the specified culture with the specified format context.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> object that represents <paramref name="value" />.
                </returns>
      <param name="context">
                    The format context that is used to convert the specified type.
                </param>
      <param name="culture">
                    The culture to use for the result.
                </param>
      <param name="value">
                    The value to convert.
                </param>
      <exception cref="T:System.FormatException">
                    The conversion cannot be performed.
                </exception>
    </member>
    <member name="M:System.Windows.Controls.DateTimeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
                    Converts a <see cref="T:System.DateTime" /> with the specified culture to the specified object with the specified format context.
                </summary>
      <returns>
                    An object of the specified type that represents <paramref name="value" />.
                </returns>
      <param name="context">
                    The format context that is used to convert to the specified type.
                </param>
      <param name="culture">
                    The culture to use for the converting date.
                </param>
      <param name="value">
                    The date to convert.
                </param>
      <param name="destinationType">
                    The type to convert to.
                </param>
    </member>
    <member name="T:System.Windows.Controls.Dock">
      <summary>
                    Specifies values that control the behavior of a <see cref="T:System.Windows.Controls.TabControl" /> through the <see cref="P:System.Windows.Controls.TabControl.TabStripPlacement" /> property.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.Dock.Left">
      <summary>
                    Specifies that the tab strip should be positioned on the left of the control.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.Dock.Top">
      <summary>
                    Specifies that the tab strip should be positioned on top of the control.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.Dock.Right">
      <summary>
                    Specifies that the tab strip should be positioned on the right of the control.
                </summary>
    </member>
    <member name="F:System.Windows.Controls.Dock.Bottom">
      <summary>
                    Specifies that the tab strip should be positioned at the bottom of the control.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.GridSplitter">
      <summary>
                    Represents a control that redistributes space between the rows of columns of a <see cref="T:System.Windows.Controls.Grid" /> control.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.GridSplitter.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.GridSplitter" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.GridSplitter.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the <see cref="T:System.Windows.Controls.GridSplitter" /> control when a new template is applied.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.GridSplitter.OnCreateAutomationPeer">
      <summary>
                    Returns a <see cref="T:System.Windows.Automation.Peers.GridSplitterAutomationPeer" /> for use by the Silverlight automation infrastructure.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Automation.Peers.GridSplitterAutomationPeer" /> for the <see cref="T:System.Windows.Controls.GridSplitter" /> object.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.GridSplitter.PreviewStyle">
      <summary>
                    Gets or sets the <see cref="T:System.Windows.Style" /> that is used for previewing changes.
                </summary>
      <returns>
                    The style that is used to preview changes.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.GridSplitter.PreviewStyleProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.GridSplitter.PreviewStyle" /> dependency property.
                </summary>
      <returns>
                    An identifier for the <see cref="P:System.Windows.Controls.GridSplitter.PreviewStyle" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.GridSplitter.ShowsPreview">
      <summary>
                    Gets or sets a value that indicates whether the <see cref="T:System.Windows.Controls.GridSplitter" /> displays a preview.
                </summary>
      <returns>true if a preview is displayed; otherwise, false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.GridSplitter.ShowsPreviewProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.GridSplitter.ShowsPreview" /> dependency property.
                </summary>
      <returns>
                    An identifier for the <see cref="P:System.Windows.Controls.GridSplitter.ShowsPreview" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.SelectedDatesCollection">
      <summary>
                    Represents a set of selected dates in a <see cref="T:System.Windows.Controls.Calendar" />.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.SelectedDatesCollection.#ctor(System.Windows.Controls.Calendar)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.SelectedDatesCollection" /> class. 
                </summary>
      <param name="owner">
                    The <see cref="T:System.Windows.Controls.Calendar" /> associated with this object.
                </param>
    </member>
    <member name="M:System.Windows.Controls.SelectedDatesCollection.AddRange(System.DateTime,System.DateTime)">
      <summary>
                    Adds all the dates in the specified range, which includes the first and last dates, to the collection.
                </summary>
      <param name="start">
                    The first date to add to the collection.
                </param>
      <param name="end">
                    The last date to add to the collection.
                </param>
    </member>
    <member name="T:System.Windows.Controls.TabControl">
      <summary>
                    Represents a control that contains multiple items that share the same space on the screen.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.TabControl.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.TabControl" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.TabControl.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the <see cref="T:System.Windows.Controls.TabControl" /> when a new template is applied.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.TabControl.OnCreateAutomationPeer">
      <summary>
                    Returns a <see cref="T:System.Windows.Automation.Peers.TabControlAutomationPeer" /> for use by the Silverlight automation infrastructure.
                </summary>
      <returns>
                    A <see cref="T:System.Windows.Automation.Peers.TabControlAutomationPeer" /> for the <see cref="T:System.Windows.Controls.TabControl" /> object.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.TabControl.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <param name="e">
                    Data used by the event.
                </param>
    </member>
    <member name="M:System.Windows.Controls.TabControl.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <param name="e">
                    Data used by the event.
                </param>
    </member>
    <member name="M:System.Windows.Controls.TabControl.OnSelectionChanged(System.Windows.Controls.SelectionChangedEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Windows.Controls.TabControl.SelectionChanged" /> event.
                </summary>
      <param name="args">
                    Provides data for the <see cref="E:System.Windows.Controls.TabControl.SelectionChanged" /> event.
                </param>
    </member>
    <member name="P:System.Windows.Controls.TabControl.SelectedContent">
      <summary>
                    Gets the content of the currently selected <see cref="T:System.Windows.Controls.TabItem" />.
                </summary>
      <returns>
                    The content of the currently selected <see cref="T:System.Windows.Controls.TabItem" />. The default is null.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TabControl.SelectedContentProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TabControl.SelectedContent" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TabControl.SelectedContent" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TabControl.SelectedIndex">
      <summary>
                    Gets or sets the index of the currently selected <see cref="T:System.Windows.Controls.TabItem" />.
                </summary>
      <returns>
                    The index of the currently selected <see cref="T:System.Windows.Controls.TabItem" />, or -1 if a <see cref="T:System.Windows.Controls.TabItem" /> is not selected.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TabControl.SelectedIndexProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TabControl.SelectedIndex" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TabControl.SelectedIndex" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TabControl.SelectedItem">
      <summary>
                    Gets or sets the currently selected <see cref="T:System.Windows.Controls.TabItem" />.
                </summary>
      <returns>
                    The currently selected <see cref="T:System.Windows.Controls.TabItem" />, or null if a <see cref="T:System.Windows.Controls.TabItem" /> is not selected.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TabControl.SelectedItemProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TabControl.SelectedItem" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TabControl.SelectedItem" /> dependency property.
                </returns>
    </member>
    <member name="E:System.Windows.Controls.TabControl.SelectionChanged">
      <summary>
                    Occurs when the selected <see cref="T:System.Windows.Controls.TabItem" /> changes.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.TabControl.TabStripPlacement">
      <summary>
                    Gets or sets how <see cref="T:System.Windows.Controls.TabItem" /> headers align relative to the <see cref="T:System.Windows.Controls.TabItem" /> content.
                </summary>
      <returns>
                    The alignment of <see cref="T:System.Windows.Controls.TabItem" /> headers relative to the <see cref="T:System.Windows.Controls.TabItem" /> content. The default is <see cref="F:System.Windows.Controls.Dock.Top" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TabControl.TabStripPlacementProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TabControl.TabStripPlacement" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TabControl.TabStripPlacement" /> dependency property.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.TabItem">
      <summary>
                    Represents a selectable item in a <see cref="T:System.Windows.Controls.TabControl" />.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.TabItem.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.TabItem" /> class. 
                </summary>
    </member>
    <member name="P:System.Windows.Controls.TabItem.HasHeader">
      <summary>
                    Gets a value that indicates whether the <see cref="T:System.Windows.Controls.TabItem" /> has a header.
                </summary>
      <returns>true if <see cref="P:System.Windows.Controls.TabItem.Header" /> is not null; otherwise, false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TabItem.HasHeaderProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TabItem.HasHeader" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TabItem.HasHeader" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TabItem.Header">
      <summary>
                    Gets or sets the header of the <see cref="T:System.Windows.Controls.TabItem" />.
                </summary>
      <returns>
                    The current header of the <see cref="T:System.Windows.Controls.TabItem" />.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TabItem.HeaderProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TabItem.Header" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TabItem.Header" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TabItem.HeaderTemplate">
      <summary>
                    Gets or sets the template that is used to display the content of the <see cref="T:System.Windows.Controls.TabItem" /> header.
                </summary>
      <returns>
                    The current template that is used to display <see cref="T:System.Windows.Controls.TabItem" /> header content.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TabItem.HeaderTemplateProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TabItem.HeaderTemplate" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TabItem.HeaderTemplate" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TabItem.IsFocused"></member>
    <member name="F:System.Windows.Controls.TabItem.IsFocusedProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TabItem.IsFocused" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TabItem.IsFocused" /> dependency property.
                </returns>
    </member>
    <member name="P:System.Windows.Controls.TabItem.IsSelected">
      <summary>
                    Gets or sets a value that indicates whether the <see cref="T:System.Windows.Controls.TabItem" /> is currently selected.
                </summary>
      <returns>true if the <see cref="T:System.Windows.Controls.TabItem" /> is selected; otherwise, false.
                </returns>
    </member>
    <member name="F:System.Windows.Controls.TabItem.IsSelectedProperty">
      <summary>
                    Identifies the <see cref="P:System.Windows.Controls.TabItem.IsSelected" /> dependency property.
                </summary>
      <returns>
                    The identifier for the <see cref="P:System.Windows.Controls.TabItem.IsSelected" /> dependency property.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.TabItem.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the <see cref="T:System.Windows.Controls.TabItem" /> when a new template is applied.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.TabItem.OnContentChanged(System.Object,System.Object)">
      <param name="oldContent">
                    The previous <see cref="T:System.Windows.Controls.TabItem" /> content.
                </param>
      <param name="newContent">
                    The new <see cref="T:System.Windows.Controls.TabItem" /> content.
                </param>
    </member>
    <member name="M:System.Windows.Controls.TabItem.OnCreateAutomationPeer">
      <summary>
                    Creates and returns an <see cref="T:System.Windows.Automation.Peers.AutomationPeer" /> for this <see cref="T:System.Windows.Controls.TabItem" />.
                </summary>
      <returns>
                    An automation peer for this <see cref="T:System.Windows.Controls.TabItem" />.
                </returns>
    </member>
    <member name="M:System.Windows.Controls.TabItem.OnHeaderChanged(System.Object,System.Object)">
      <summary>
                    Called when the <see cref="P:System.Windows.Controls.TabItem.Header" /> property changes.
                </summary>
      <param name="oldHeader">
                    The previous value of the <see cref="P:System.Windows.Controls.TabItem.Header" /> property.
                </param>
      <param name="newHeader">
                    The new value of the <see cref="P:System.Windows.Controls.TabItem.Header" /> property.
                </param>
    </member>
    <member name="M:System.Windows.Controls.TabItem.OnHeaderTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)">
      <summary>
                    Called when the <see cref="P:System.Windows.Controls.TabItem.HeaderTemplate" /> property changes.
                </summary>
      <param name="oldHeaderTemplate">
                    The previous value of the <see cref="P:System.Windows.Controls.TabItem.HeaderTemplate" /> property.
                </param>
      <param name="newHeaderTemplate">
                    The new value of the <see cref="P:System.Windows.Controls.TabItem.HeaderTemplate" /> property.
                </param>
    </member>
    <member name="M:System.Windows.Controls.TabItem.OnIsFocusChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <param name="e">
                    A <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> that contains the event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.TabItem.OnKeyDown(System.Windows.Input.KeyEventArgs)">
      <param name="e">
                    A <see cref="T:System.Windows.Input.KeyEventArgs" /> that contains the event data.
                </param>
    </member>
    <member name="M:System.Windows.Controls.TabItem.OnSelected(System.Windows.RoutedEventArgs)">
      <summary>
                    Called to indicate that the <see cref="P:System.Windows.Controls.TabItem.IsSelected" /> property has changed to true.
                </summary>
      <param name="e">
                    A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data. 
                </param>
    </member>
    <member name="M:System.Windows.Controls.TabItem.OnUnselected(System.Windows.RoutedEventArgs)">
      <summary>
                    Called to indicate that the <see cref="P:System.Windows.Controls.TabItem.IsSelected" /> property has changed to false.
                </summary>
      <param name="e">
                    A <see cref="T:System.Windows.RoutedEventArgs" /> that contains the event data. 
                </param>
    </member>
    <member name="P:System.Windows.Controls.TabItem.TabStripPlacement">
      <summary>
                    Gets the location of the tab strip relative to the <see cref="T:System.Windows.Controls.TabItem" /> content.
                </summary>
      <returns>
                    The location of the tab strip relative to the <see cref="T:System.Windows.Controls.TabItem" /> content.
                </returns>
    </member>
    <member name="T:System.Windows.Controls.Primitives.CalendarButton">
      <summary>
                    Represents a button on a <see cref="T:System.Windows.Controls.Calendar" />.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.CalendarButton.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.CalendarButton" /> class. 
                </summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.CalendarButton.CalendarButtonMouseDown"></member>
    <member name="E:System.Windows.Controls.Primitives.CalendarButton.CalendarButtonMouseUp"></member>
    <member name="M:System.Windows.Controls.Primitives.CalendarButton.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the <see cref="T:System.Windows.Controls.Primitives.CalendarButton" /> when a new template is applied.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.CalendarDayButton">
      <summary>
                    Represents a day on a <see cref="T:System.Windows.Controls.Calendar" />.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.CalendarDayButton.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.CalendarDayButton" /> class. 
                </summary>
    </member>
    <member name="E:System.Windows.Controls.Primitives.CalendarDayButton.CalendarDayButtonMouseDown"></member>
    <member name="E:System.Windows.Controls.Primitives.CalendarDayButton.CalendarDayButtonMouseUp"></member>
    <member name="M:System.Windows.Controls.Primitives.CalendarDayButton.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the <see cref="T:System.Windows.Controls.Primitives.CalendarDayButton" /> when a new template is applied.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.CalendarItem">
      <summary>
                    Represents the currently displayed month or year on a <see cref="T:System.Windows.Controls.Calendar" />.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.CalendarItem.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.CalendarItem" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.CalendarItem.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the <see cref="T:System.Windows.Controls.Primitives.CalendarItem" /> when a new template is applied.
                </summary>
    </member>
    <member name="T:System.Windows.Controls.Primitives.DatePickerTextBox">
      <summary>
                    Represents the text input of a <see cref="T:System.Windows.Controls.DatePicker" />. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DatePickerTextBox.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.DatePickerTextBox" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.DatePickerTextBox.OnApplyTemplate">
      <summary>
                    Builds the visual tree for the <see cref="T:System.Windows.Controls.Primitives.DatePickerTextBox" /> when a new template is applied.
                </summary>
    </member>
    <member name="P:System.Windows.Controls.Primitives.DatePickerTextBox.Watermark"></member>
    <member name="F:System.Windows.Controls.Primitives.DatePickerTextBox.WatermarkProperty"></member>
    <member name="T:System.Windows.Controls.Primitives.TabPanel">
      <summary>
                    Handles the layout of <see cref="T:System.Windows.Controls.TabItem" /> objects on a <see cref="T:System.Windows.Controls.TabControl" />.
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.TabPanel.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Controls.Primitives.TabPanel" /> class. 
                </summary>
    </member>
    <member name="M:System.Windows.Controls.Primitives.TabPanel.ArrangeOverride(System.Windows.Size)">
      <summary>
                    Arranges and sizes the content of a <see cref="T:System.Windows.Controls.Primitives.TabPanel" /> object.
                </summary>
      <returns>
                    The size of the arranged control.
                </returns>
      <param name="finalSize">
                    The size that a tab panel uses to position child elements.
                </param>
    </member>
    <member name="M:System.Windows.Controls.Primitives.TabPanel.MeasureOverride(System.Windows.Size)">
      <summary>
                    Called when remeasuring the control is required.
                </summary>
      <returns>
                    The measured size of the control.
                </returns>
      <param name="availableSize">
                    Constraint size as an upper limit. The return value should not exceed this size.
                </param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\2.0.31005.0\Libraries\Client\System.Xml.Linq.Xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xml.Linq</name>
  </assembly>
  <members>
    <member name="T:System.Xml.Linq.Extensions">
      <summary>
                    Contains the LINQ to XML extension methods.
                </summary>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Returns a collection of elements that contains the ancestors of every node in the source collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the ancestors of every node in the source collection.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.
                </param>
      <typeparam name="T">
                    The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XNode" />.
                </typeparam>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)">
      <summary>
                    Returns a filtered collection of elements that contains the ancestors of every node in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the ancestors of every node in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.
                </param>
      <param name="name">
                    The <see cref="T:System.Xml.Linq.XName" /> to match.
                </param>
      <typeparam name="T">
                    The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XNode" />.
                </typeparam>
    </member>
    <member name="M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
      <summary>
                    Returns a collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains every element in the source collection, and the ancestors of every element in the source collection.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.
                </param>
    </member>
    <member name="M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)">
      <summary>
                    Returns a filtered collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains every element in the source collection, and the ancestors of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.
                </param>
      <param name="name">
                    The <see cref="T:System.Xml.Linq.XName" /> to match.
                </param>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
      <summary>
                    Returns a collection of the attributes of every element in the source collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains the attributes of every element in the source collection.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.
                </param>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)">
      <summary>
                    Returns a filtered collection of the attributes of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains a filtered collection of the attributes of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.
                </param>
      <param name="name">
                    The <see cref="T:System.Xml.Linq.XName" /> to match.
                </param>
    </member>
    <member name="M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Returns a collection of the descendant nodes of every document and element in the source collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the descendant nodes of every document and element in the source collection.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XContainer" /> that contains the source collection.
                </param>
      <typeparam name="T">
                    The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.
                </typeparam>
    </member>
    <member name="M:System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
      <summary>
                    Returns a collection of nodes that contains every element in the source collection, and the descendant nodes of every element in the source collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains every element in the source collection, and the descendant nodes of every element in the source collection.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.
                </param>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Returns a collection of elements that contains the descendant elements of every element and document in the source collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the descendant elements of every element and document in the source collection.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XContainer" /> that contains the source collection.
                </param>
      <typeparam name="T">
                    The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.
                </typeparam>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)">
      <summary>
                    Returns a filtered collection of elements that contains the descendant elements of every element and document in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the descendant elements of every element and document in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XContainer" /> that contains the source collection.
                </param>
      <param name="name">
                    The <see cref="T:System.Xml.Linq.XName" /> to match.
                </param>
      <typeparam name="T">
                    The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.
                </typeparam>
    </member>
    <member name="M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
      <summary>
                    Returns a collection of elements that contains every element in the source collection, and the descendent elements of every element in the source collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains every element in the source collection, and the descendent elements of every element in the source collection.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.
                </param>
    </member>
    <member name="M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)">
      <summary>
                    Returns a filtered collection of elements that contains every element in the source collection, and the descendents of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains every element in the source collection, and the descendents of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.
                </param>
      <param name="name">
                    The <see cref="T:System.Xml.Linq.XName" /> to match.
                </param>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Returns a collection of the child elements of every element and document in the source collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the child elements of every element or document in the source collection.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.
                </param>
      <typeparam name="T">
                    The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.
                </typeparam>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)">
      <summary>
                    Returns a filtered collection of the child elements of every element and document in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the child elements of every element and document in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.
                </param>
      <param name="name">
                    The <see cref="T:System.Xml.Linq.XName" /> to match.
                </param>
      <typeparam name="T">
                    The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.
                </typeparam>
    </member>
    <member name="M:System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Returns a collection of nodes that contains all nodes in the source collection, sorted in document order.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains all nodes in the source collection, sorted in document order.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.
                </param>
      <typeparam name="T">
                    The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XNode" />.
                </typeparam>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Returns a collection of the child nodes of every document and element in the source collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the child nodes of every document and element in the source collection.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.
                </param>
      <typeparam name="T">
                    The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.
                </typeparam>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})">
      <summary>
                    Removes every attribute in the source collection from its parent element.
                </summary>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains the source collection.
                </param>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Removes every node in the source collection from its parent node.
                </summary>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.
                </param>
      <typeparam name="T">
                    The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XNode" />.
                </typeparam>
    </member>
    <member name="T:System.Xml.Linq.LoadOptions">
      <summary>
                    Specifies load options when parsing XML.  
                </summary>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.None">
      <summary>
                    Does not preserve insignificant white space or load base URI and line information.
                </summary>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.PreserveWhitespace">
      <summary>
                    Preserves insignificant white space while parsing.
                </summary>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.SetBaseUri">
      <summary>
                    Requests the base URI information from the <see cref="T:System.Xml.XmlReader" />, and makes it available via the <see cref="P:System.Xml.Linq.XObject.BaseUri" /> property.
                </summary>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.SetLineInfo">
      <summary>
                    Requests the line information from the <see cref="T:System.Xml.XmlReader" /> and makes it available via properties on <see cref="T:System.Xml.Linq.XObject" />.
                </summary>
    </member>
    <member name="T:System.Xml.Linq.SaveOptions">
      <summary>
                    Specifies serialization options. 
                </summary>
    </member>
    <member name="F:System.Xml.Linq.SaveOptions.None">
      <summary>
                    Formats (indent) the XML while serializing.
                </summary>
    </member>
    <member name="F:System.Xml.Linq.SaveOptions.DisableFormatting">
      <summary>
                    Preserves all insignificant white space while serializing.
                </summary>
    </member>
    <member name="F:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces">
      <summary>
                    Removes duplicate namespace declarations. For the duplicate namespace declarations to be removed, both the prefix and the namespace have to match.
                </summary>
    </member>
    <member name="T:System.Xml.Linq.XAttribute">
      <summary>
                    Represents an XML attribute.
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XAttribute)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XAttribute" /> class from another <see cref="T:System.Xml.Linq.XAttribute" /> object. 
                </summary>
      <param name="other">
                    An <see cref="T:System.Xml.Linq.XAttribute" /> object to copy from.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="other" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XName,System.Object)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XAttribute" /> class from the specified name and value. 
                </summary>
      <param name="name">
                    The <see cref="T:System.Xml.Linq.XName" /> of the attribute.
                </param>
      <param name="value">
                    An <see cref="T:System.Object" /> containing the value of the attribute.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="name" /> or <paramref name="value" /> parameter is null.
                </exception>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.EmptySequence">
      <summary>
                    Gets an empty collection of attributes.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> containing an empty collection.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.IsNamespaceDeclaration">
      <summary>
                    Determines if this attribute is a namespace declaration.
                </summary>
      <returns>true if this attribute is a namespace declaration; otherwise false.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.Name">
      <summary>
                    Gets the expanded name of this attribute.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XName" /> containing the name of this attribute.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.NextAttribute">
      <summary>
                    Gets the next attribute of the parent element.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XAttribute" /> containing the next attribute of the parent element.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.NodeType">
      <summary>
                    Gets the node type for this node.
                </summary>
      <returns>
                    The node type. For <see cref="T:System.Xml.Linq.XAttribute" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Attribute" />.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTime">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.DateTime" />.
                </param>
      <exception cref="T:System.FormatException">
                    The attribute does not contain a valid <see cref="T:System.DateTime" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="attribute" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTime}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
                </param>
      <exception cref="T:System.FormatException">
                    The attribute does not contain a valid <see cref="T:System.DateTime" /> value.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Decimal}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.
                </param>
      <exception cref="T:System.FormatException">
                    The attribute does not contain a valid <see cref="T:System.Decimal" /> value.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Double}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.
                </param>
      <exception cref="T:System.FormatException">
                    The attribute does not contain a valid <see cref="T:System.Double" /> value.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Decimal">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Decimal" />.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Decimal" />.
                </param>
      <exception cref="T:System.FormatException">
                    The attribute does not contain a valid <see cref="T:System.Decimal" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="attribute" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTimeOffset">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.DateTimeOffset" />.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.DateTimeOffset" />.
                </param>
      <exception cref="T:System.FormatException">
                    The attribute does not contain a valid <see cref="T:System.DateTimeOffset" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="attribute" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Guid">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Guid" />.
                </summary>
      <returns>
                    A <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Guid" />.
                </param>
      <exception cref="T:System.FormatException">
                    The attribute does not contain a valid <see cref="T:System.Guid" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="attribute" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Guid}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.
                </param>
      <exception cref="T:System.FormatException">
                    The attribute does not contain a valid <see cref="T:System.Guid" /> value.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.TimeSpan}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.
                </param>
      <exception cref="T:System.FormatException">
                    The attribute does not contain a valid <see cref="T:System.TimeSpan" /> value.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTimeOffset}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.
                </param>
      <exception cref="T:System.FormatException">
                    The attribute does not contain a valid <see cref="T:System.DateTimeOffset" /> value.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.TimeSpan">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.TimeSpan" />.
                </summary>
      <returns>
                    A <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.TimeSpan" />.
                </param>
      <exception cref="T:System.FormatException">
                    The attribute does not contain a valid <see cref="T:System.TimeSpan" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="attribute" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Double">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Double" />.
                </summary>
      <returns>
                    A <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Double" />.
                </param>
      <exception cref="T:System.FormatException">
                    The attribute does not contain a valid <see cref="T:System.Double" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="attribute" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int32">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to an <see cref="T:System.Int32" />.
                </summary>
      <returns>
                    A <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Int32" />.
                </param>
      <exception cref="T:System.FormatException">
                    The attribute does not contain a valid <see cref="T:System.Int32" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="attribute" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int32}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt32">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.UInt32" />.
                </summary>
      <returns>
                    A <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.UInt32" />.
                </param>
      <exception cref="T:System.FormatException">
                    The attribute does not contain a valid <see cref="T:System.UInt32" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="attribute" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.String">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.String" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.String" />.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Boolean">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Boolean" />.
                </summary>
      <returns>
                    A <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Boolean" />.
                </param>
      <exception cref="T:System.FormatException">
                    The attribute does not contain a valid <see cref="T:System.Boolean" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="attribute" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Boolean}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.
                </param>
      <exception cref="T:System.FormatException">
                    The attribute does not contain a valid <see cref="T:System.Boolean" /> value.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt32}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.
                </param>
      <exception cref="T:System.FormatException">
                    The attribute does not contain a valid <see cref="T:System.UInt32" /> value.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt64}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.
                </param>
      <exception cref="T:System.FormatException">
                    The attribute does not contain a valid <see cref="T:System.UInt64" /> value.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Single">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Single" />.
                </summary>
      <returns>
                    A <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Single" />.
                </param>
      <exception cref="T:System.FormatException">
                    The attribute does not contain a valid <see cref="T:System.Single" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="attribute" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Single}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.
                </param>
      <exception cref="T:System.FormatException">
                    The attribute does not contain a valid <see cref="T:System.Single" /> value.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int64">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to an <see cref="T:System.Int64" />.
                </summary>
      <returns>
                    A <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Int64" />.
                </param>
      <exception cref="T:System.FormatException">
                    The attribute does not contain a valid <see cref="T:System.Int64" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="attribute" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int64}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.
                </param>
      <exception cref="T:System.FormatException">
                    The attribute does not contain a valid <see cref="T:System.Int64" /> value.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt64">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.UInt64" />.
                </summary>
      <returns>
                    A <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.
                </returns>
      <param name="attribute">
                    The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.UInt64" />.
                </param>
      <exception cref="T:System.FormatException">
                    The attribute does not contain a valid <see cref="T:System.UInt64" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="attribute" /> parameter is null.
                </exception>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.PreviousAttribute">
      <summary>
                    Gets the previous attribute of the parent element.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XAttribute" /> containing the previous attribute of the parent element.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.Remove">
      <summary>
                    Removes this attribute from its parent element.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    The parent element is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.SetValue(System.Object)">
      <summary>
                    Sets the value of this attribute.
                </summary>
      <param name="value">
                    The value to assign to this attribute.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="value" /> parameter is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The <paramref name="value" /> is an <see cref="T:System.Xml.Linq.XObject" />.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.ToString">
      <summary>
                    Converts the current <see cref="T:System.Xml.Linq.XAttribute" /> object to a string representation.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing the XML text representation of an attribute and its value.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.Value">
      <summary>
                    Gets or sets the value of this attribute.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing the value of this attribute.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    When setting, the <paramref name="value" /> is null.
                </exception>
    </member>
    <member name="T:System.Xml.Linq.XCData">
      <summary>
                    Represents a text node that contains CDATA.  
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XCData.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XCData" /> class. 
                </summary>
      <param name="value">
                    A string that contains the value of the <see cref="T:System.Xml.Linq.XCData" /> node.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XCData.#ctor(System.Xml.Linq.XCData)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XCData" /> class. 
                </summary>
      <param name="other">
                    The <see cref="T:System.Xml.Linq.XCData" /> node to copy from.
                </param>
    </member>
    <member name="P:System.Xml.Linq.XCData.NodeType">
      <summary>
                    Gets the node type for this node.
                </summary>
      <returns>
                    The node type. For <see cref="T:System.Xml.Linq.XCData" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.CDATA" />.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XCData.WriteTo(System.Xml.XmlWriter)">
      <summary>
                    Writes this CDATA object to an <see cref="T:System.Xml.XmlWriter" />.
                </summary>
      <param name="writer">
                    An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.
                </param>
    </member>
    <member name="T:System.Xml.Linq.XComment">
      <summary>
                    Represents an XML comment. 
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XComment.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XComment" /> class with the specified string content. 
                </summary>
      <param name="value">
                    A string that contains the contents of the new <see cref="T:System.Xml.Linq.XComment" /> object.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="value" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XComment.#ctor(System.Xml.Linq.XComment)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XComment" /> class from an existing comment node. 
                </summary>
      <param name="other">
                    The <see cref="T:System.Xml.Linq.XComment" /> node to copy from.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="other" /> parameter is null.
                </exception>
    </member>
    <member name="P:System.Xml.Linq.XComment.NodeType">
      <summary>
                    Gets the node type for this node.
                </summary>
      <returns>
                    The node type. For <see cref="T:System.Xml.Linq.XComment" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Comment" />.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XComment.Value">
      <summary>
                    Gets or sets the string value of this comment.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the string value of this comment.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="value" /> is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XComment.WriteTo(System.Xml.XmlWriter)">
      <summary>
                    Write this comment to an <see cref="T:System.Xml.XmlWriter" />.
                </summary>
      <param name="writer">
                    An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.
                </param>
    </member>
    <member name="T:System.Xml.Linq.XContainer">
      <summary>
                    Represents a node that can contain other nodes.
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Add(System.Object)">
      <summary>
                    Adds the specified content as children of this <see cref="T:System.Xml.Linq.XContainer" />.
                </summary>
      <param name="content">
                    A content object containing simple content or a collection of content objects to be added.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Add(System.Object[])">
      <summary>
                    Adds the specified content as children of this <see cref="T:System.Xml.Linq.XContainer" />.
                </summary>
      <param name="content">
                    A parameter list of content objects.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.AddFirst(System.Object)">
      <summary>
                    Adds the specified content as the first children of this document or element.
                </summary>
      <param name="content">
                    A content object containing simple content or a collection of content objects to be added.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.AddFirst(System.Object[])">
      <summary>
                    Adds the specified content as the first children of this document or element.
                </summary>
      <param name="content">
                    A parameter list of content objects.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The parent is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XContainer.CreateWriter">
      <summary>
                    Creates an <see cref="T:System.Xml.XmlWriter" /> that can be used to add nodes to the <see cref="T:System.Xml.Linq.XContainer" />.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlWriter" /> that is ready to have content written to it.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.DescendantNodes">
      <summary>
                    Returns a collection of the descendant nodes for this document or element, in document order.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> containing the descendant nodes of the <see cref="T:System.Xml.Linq.XContainer" />, in document order.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Descendants">
      <summary>
                    Returns a collection of the descendant elements for this document or element, in document order.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the descendant elements of the <see cref="T:System.Xml.Linq.XContainer" />.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)">
      <summary>
                    Returns a filtered collection of the descendant elements for this document or element, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the descendant elements of the <see cref="T:System.Xml.Linq.XContainer" /> that match the specified <see cref="T:System.Xml.Linq.XName" />.
                </returns>
      <param name="name">
                    The <see cref="T:System.Xml.Linq.XName" /> to match.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)">
      <summary>
                    Gets the first (in document order) child element with the specified <see cref="T:System.Xml.Linq.XName" />.
                </summary>
      <returns>
                    A <see cref="T:System.Xml.Linq.XElement" /> that matches the specified <see cref="T:System.Xml.Linq.XName" />, or null.
                </returns>
      <param name="name">
                    The <see cref="T:System.Xml.Linq.XName" /> to match.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Elements">
      <summary>
                    Returns a collection of the child elements of this element or document, in document order.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the child elements of this <see cref="T:System.Xml.Linq.XContainer" />, in document order.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)">
      <summary>
                    Returns a filtered collection of the child elements of this element or document, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the children of the <see cref="T:System.Xml.Linq.XContainer" /> that have a matching <see cref="T:System.Xml.Linq.XName" />, in document order.
                </returns>
      <param name="name">
                    The <see cref="T:System.Xml.Linq.XName" /> to match.
                </param>
    </member>
    <member name="P:System.Xml.Linq.XContainer.FirstNode">
      <summary>
                    Get the first child node of this node.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XNode" /> containing the first child node of the <see cref="T:System.Xml.Linq.XContainer" />.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XContainer.LastNode">
      <summary>
                    Get the last child node of this node.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XNode" /> containing the last child node of the <see cref="T:System.Xml.Linq.XContainer" />.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Nodes">
      <summary>
                    Returns a collection of the child nodes of this element or document, in document order.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> containing the contents of this <see cref="T:System.Xml.Linq.XContainer" />, in document order.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.RemoveNodes">
      <summary>
                    Removes the child nodes from this document or element.
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object)">
      <summary>
                    Replaces the children nodes of this document or element with the specified content.
                </summary>
      <param name="content">
                    A content object containing simple content or a collection of content objects that replace the children nodes.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])">
      <summary>
                    Replaces the children nodes of this document or element with the specified content.
                </summary>
      <param name="content">
                    A parameter list of content objects.
                </param>
    </member>
    <member name="T:System.Xml.Linq.XDeclaration">
      <summary>
                    Represents an XML declaration. 
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XDeclaration.#ctor(System.String,System.String,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XDeclaration" /> class with the specified version, encoding, and standalone status.
                </summary>
      <param name="version">
                    The version of the XML, usually "1.0".
                </param>
      <param name="encoding">
                    The encoding for the XML document.
                </param>
      <param name="standalone">
                    A string containing "yes" or "no" that specifies whether the XML is standalone or requires external entities to be resolved.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XDeclaration.#ctor(System.Xml.Linq.XDeclaration)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XDeclaration" /> class from another <see cref="T:System.Xml.Linq.XDeclaration" /> object. 
                </summary>
      <param name="other">
                    The <see cref="T:System.Xml.Linq.XDeclaration" /> used to initialize this <see cref="T:System.Xml.Linq.XDeclaration" /> object.
                </param>
    </member>
    <member name="P:System.Xml.Linq.XDeclaration.Encoding">
      <summary>
                    Gets or sets the encoding for this document.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing the code page name for this document.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XDeclaration.Standalone">
      <summary>
                    Gets or sets the standalone property for this document.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing the standalone property for this document.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XDeclaration.ToString">
      <summary>
                    Provides the declaration as a formatted string.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the formatted XML string.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XDeclaration.Version">
      <summary>
                    Gets or sets the version property for this document.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing the version property for this document.
                </returns>
    </member>
    <member name="T:System.Xml.Linq.XDocument">
      <summary>
                    Represents an XML document. 
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class. 
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class with the specified content.
                </summary>
      <param name="content">
                    A parameter list of content objects to add to this document.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class with the specified <see cref="T:System.Xml.Linq.XDeclaration" /> and content.
                </summary>
      <param name="declaration">
                    An <see cref="T:System.Xml.Linq.XDeclaration" /> for the document.
                </param>
      <param name="content">
                    The content of the document.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class from an existing <see cref="T:System.Xml.Linq.XDocument" /> object.
                </summary>
      <param name="other">
                    The <see cref="T:System.Xml.Linq.XDocument" /> object that will be copied.
                </param>
    </member>
    <member name="P:System.Xml.Linq.XDocument.Declaration">
      <summary>
                    Gets or sets the XML declaration for this document.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XDeclaration" /> that contains the XML declaration for this document.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XDocument.DocumentType">
      <summary>
                    Gets the Document Type Definition (DTD) for this document.
                </summary>
      <returns>
                    A <see cref="T:System.Xml.Linq.XDocumentType" /> that contains the DTD for this document.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
      <summary>
                    Creates a new <see cref="T:System.Xml.Linq.XDocument" /> instance using the specified stream.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XDocument" /> object used to read the data contained in the stream. 
                </returns>
      <param name="stream">
                    The stream containing the XML data.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
      <summary>
                    Creates a new <see cref="T:System.Xml.Linq.XDocument" /> instance using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XDocument" /> object used to read the data contained in the stream.
                </returns>
      <param name="stream">
                    The stream containing the XML data.
                </param>
      <param name="options">
                    A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies whether to load base URI and line information.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)">
      <summary>
                    Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a <see cref="T:System.IO.TextReader" />. 
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified <see cref="T:System.IO.TextReader" />.
                </returns>
      <param name="textReader">
                    A <see cref="T:System.IO.TextReader" /> that contains the content for the <see cref="T:System.Xml.Linq.XDocument" />.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
      <summary>
                    Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a <see cref="T:System.IO.TextReader" />, optionally preserving white space, setting the base URI, and retaining line information.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XDocument" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.
                </returns>
      <param name="textReader">
                    A <see cref="T:System.IO.TextReader" /> that contains the content for the <see cref="T:System.Xml.Linq.XDocument" />.
                </param>
      <param name="options">
                    A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.String)">
      <summary>
                    Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a file located in the application's XAP package.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified file.
                </returns>
      <param name="uri">
                    A URI string that references the file to be loaded into a new <see cref="T:System.Xml.Linq.XDocument" />. This file is located in the application's XAP package. If you want to download a file from some other location, follow the steps described in How to: Load an XML File from an Arbitrary URI Location with LINQ to XML.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
      <summary>
                    Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a file located in the application's XAP package, optionally preserving white space, setting the base URI, and retaining line information.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified file.
                </returns>
      <param name="uri">
                    A URI string that references the file to be loaded into a new <see cref="T:System.Xml.Linq.XDocument" />. This file is located in the application's XAP package. If you want to download a file from some other location, follow the steps described in How to: Load an XML File from an Arbitrary URI Location with LINQ to XML.
                </param>
      <param name="options">
                    A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies how white space is handled and whether to load base URI and line information.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
      <summary>
                    Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from an <see cref="T:System.Xml.XmlReader" />. 
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified <see cref="T:System.Xml.XmlReader" />.
                </returns>
      <param name="reader">
                    A <see cref="T:System.Xml.XmlReader" /> that contains the content for the <see cref="T:System.Xml.Linq.XDocument" />.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
      <summary>
                    Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from an <see cref="T:System.Xml.XmlReader" />, optionally setting the base URI, and retaining line information.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XDocument" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.
                </returns>
      <param name="reader">
                    A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XDocument" />.
                </param>
      <param name="options">
                    A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies whether to load base URI and line information.
                </param>
    </member>
    <member name="P:System.Xml.Linq.XDocument.NodeType">
      <summary>
                    Gets the node type for this node.
                </summary>
      <returns>
                    The node type. For <see cref="T:System.Xml.Linq.XDocument" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Document" />.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Parse(System.String)">
      <summary>
                    Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a string.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XDocument" /> populated from the string that contains XML.
                </returns>
      <param name="text">
                    A string that contains XML.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
      <summary>
                    Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a string, optionally preserving white space, setting the base URI, and retaining line information.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XDocument" /> populated from the string that contains XML.
                </returns>
      <param name="text">
                    A string that contains XML.
                </param>
      <param name="options">
                    A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.
                </param>
    </member>
    <member name="P:System.Xml.Linq.XDocument.Root">
      <summary>
                    Gets the root element of the XML Tree for this document.
                </summary>
      <returns>
                    The root <see cref="T:System.Xml.Linq.XElement" /> of the XML tree.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
      <summary>
                    Outputs this <see cref="T:System.Xml.Linq.XDocument" /> to the specified <see cref="T:System.IO.Stream" />.
                </summary>
      <param name="stream">
                    The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
      <summary>
                    Outputs this <see cref="T:System.Xml.Linq.XDocument" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.
                </summary>
      <param name="stream">
                    The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.
                </param>
      <param name="options">
                    A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
      <summary>
                    Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a <see cref="T:System.IO.TextWriter" />.
                </summary>
      <param name="textWriter">
                    A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XDocument" /> will be written to.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
      <summary>
                    Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.
                </summary>
      <param name="textWriter">
                    The <see cref="T:System.IO.TextWriter" /> to output the XML to.
                </param>
      <param name="options">
                    A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)">
      <summary>
                    Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to an <see cref="T:System.Xml.XmlWriter" />.
                </summary>
      <param name="writer">
                    A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XDocument" /> will be written to.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)">
      <summary>
                    Write this document to an <see cref="T:System.Xml.XmlWriter" />.
                </summary>
      <param name="writer">
                    An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.
                </param>
    </member>
    <member name="T:System.Xml.Linq.XDocumentType">
      <summary>
                    Represents an XML Document Type Definition (DTD).  
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XDocumentType.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
                    Initializes an instance of the <see cref="T:System.Xml.Linq.XDocumentType" /> class. 
                </summary>
      <param name="name">
                    A <see cref="T:System.String" /> that contains the qualified name of the DTD, which is the same as the qualified name of the root element of the XML document.
                </param>
      <param name="publicId">
                    A <see cref="T:System.String" /> that contains the public identifier of an external public DTD.
                </param>
      <param name="systemId">
                    A <see cref="T:System.String" /> that contains the system identifier of an external private DTD.
                </param>
      <param name="internalSubset">
                    A <see cref="T:System.String" /> that contains the internal subset for an internal DTD.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XDocumentType.#ctor(System.Xml.Linq.XDocumentType)">
      <summary>
                    Initializes an instance of the <see cref="T:System.Xml.Linq.XDocumentType" /> class from another <see cref="T:System.Xml.Linq.XDocumentType" /> object.
                </summary>
      <param name="other">
                    An <see cref="T:System.Xml.Linq.XDocumentType" /> object to copy from.
                </param>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.InternalSubset">
      <summary>
                    Gets or sets the internal subset for this Document Type Definition (DTD).
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the internal subset for this Document Type Definition (DTD).
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.Name">
      <summary>
                    Gets or sets the name for this Document Type Definition (DTD).
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the name for this Document Type Definition (DTD).
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.NodeType">
      <summary>
                    Gets the node type for this node.
                </summary>
      <returns>
                    The node type. For <see cref="T:System.Xml.Linq.XDocumentType" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.DocumentType" />.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.PublicId">
      <summary>
                    Gets or sets the public identifier for this Document Type Definition (DTD).
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the public identifier for this Document Type Definition (DTD).
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.SystemId">
      <summary>
                    Gets or sets the system identifier for this Document Type Definition (DTD).
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the system identifier for this Document Type Definition (DTD).
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XDocumentType.WriteTo(System.Xml.XmlWriter)">
      <summary>
                    Write this <see cref="T:System.Xml.Linq.XDocumentType" /> to an <see cref="T:System.Xml.XmlWriter" />.
                </summary>
      <param name="writer">
                    An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.
                </param>
    </member>
    <member name="T:System.Xml.Linq.XElement">
      <summary>
                    Represents an XML element.
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from another <see cref="T:System.Xml.Linq.XElement" /> object.
                </summary>
      <param name="other">
                    An <see cref="T:System.Xml.Linq.XElement" /> object to copy from.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name. 
                </summary>
      <param name="name">
                    An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the element.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name and content.
                </summary>
      <param name="name">
                    An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.
                </param>
      <param name="content">
                    The contents of the element.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name and content.
                </summary>
      <param name="name">
                    An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.
                </param>
      <param name="content">
                    The initial content of the element.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from an <see cref="T:System.Xml.Linq.XStreamingElement" /> object.
                </summary>
      <param name="other">
                    An <see cref="T:System.Xml.Linq.XStreamingElement" /> that contains unevaluated queries that will be iterated for the contents of this <see cref="T:System.Xml.Linq.XElement" />.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.AncestorsAndSelf">
      <summary>
                    Returns a collection of elements that contain this element, and the ancestors of this element. 
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and the ancestors of this element. 
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)">
      <summary>
                    Returns a filtered collection of elements that contain this element, and the ancestors of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and the ancestors of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </returns>
      <param name="name">
                    The <see cref="T:System.Xml.Linq.XName" /> to match.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)">
      <summary>
                    Returns the <see cref="T:System.Xml.Linq.XAttribute" /> of this <see cref="T:System.Xml.Linq.XElement" /> that has the specified <see cref="T:System.Xml.Linq.XName" />.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XAttribute" /> that has the specified <see cref="T:System.Xml.Linq.XName" />; null if there is no attribute with the specified name.
                </returns>
      <param name="name">
                    The <see cref="T:System.Xml.Linq.XName" /> of the <see cref="T:System.Xml.Linq.XAttribute" /> to get.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Attributes">
      <summary>
                    Returns a collection of attributes of this element.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> of attributes of this element.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)">
      <summary>
                    Returns a filtered collection of attributes of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains the attributes of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </returns>
      <param name="name">
                    The <see cref="T:System.Xml.Linq.XName" /> to match.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.DescendantNodesAndSelf">
      <summary>
                    Returns a collection of nodes that contain this element, and all descendant nodes of this element, in document order.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contain this element, and all descendant nodes of this element, in document order.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.DescendantsAndSelf">
      <summary>
                    Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and all descendant elements of this element, in document order.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)">
      <summary>
                    Returns a filtered collection of elements that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </returns>
      <param name="name">
                    The <see cref="T:System.Xml.Linq.XName" /> to match.
                </param>
    </member>
    <member name="P:System.Xml.Linq.XElement.EmptySequence">
      <summary>
                    Gets an empty collection of elements.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains an empty collection.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.FirstAttribute">
      <summary>
                    Gets the first attribute of this element.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XAttribute" /> that contains the first attribute of this element.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.GetDefaultNamespace">
      <summary>
                    Gets the default <see cref="T:System.Xml.Linq.XNamespace" /> of this <see cref="T:System.Xml.Linq.XElement" />.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the default namespace of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)">
      <summary>
                    Gets the namespace associated with a particular prefix for this <see cref="T:System.Xml.Linq.XElement" />.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XNamespace" /> for the namespace associated with the prefix for this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="prefix">
                    A string that contains the namespace prefix to look up.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)">
      <summary>
                    Gets the prefix associated with a namespace for this <see cref="T:System.Xml.Linq.XElement" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the namespace prefix.
                </returns>
      <param name="ns">
                    An <see cref="T:System.Xml.Linq.XNamespace" /> to look up.
                </param>
    </member>
    <member name="P:System.Xml.Linq.XElement.HasAttributes">
      <summary>
                    Gets a value indicating whether this element as at least one attribute.
                </summary>
      <returns>true if this element has at least one attribute; otherwise false.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.HasElements">
      <summary>
                    Gets a value indicating whether this element has at least one child element.
                </summary>
      <returns>true if this element has at least one child element; otherwise false.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.IsEmpty">
      <summary>
                    Gets a value indicating whether this element contains no content.
                </summary>
      <returns>true if this element contains no content; otherwise false.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.LastAttribute">
      <summary>
                    Gets the last attribute of this element.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XAttribute" /> that contains the last attribute of this element.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.Stream)">
      <summary>
                    Creates a new <see cref="T:System.Xml.Linq.XElement" /> instance using the specified stream.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XElement" /> object used to read the data contained in the stream.
                </returns>
      <param name="stream">
                    The stream containing the XML data.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
      <summary>
                    Creates a new <see cref="T:System.Xml.Linq.XElement" /> instance using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XElement" /> object used to read the data contained in the stream.
                </returns>
      <param name="stream">
                    The stream containing the XML data.
                </param>
      <param name="options">
                    A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies whether to load base URI and line information.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.TextReader)">
      <summary>
                    Loads an <see cref="T:System.Xml.Linq.XElement" /> from a <see cref="T:System.IO.TextReader" />. 
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.
                </returns>
      <param name="textReader">
                    A <see cref="T:System.IO.TextReader" /> that will be read for the <see cref="T:System.Xml.Linq.XElement" /> content.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
      <summary>
                    Loads an <see cref="T:System.Xml.Linq.XElement" /> from a <see cref="T:System.IO.TextReader" />, optionally preserving white space and retaining line information. 
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.
                </returns>
      <param name="textReader">
                    A <see cref="T:System.IO.TextReader" /> that will be read for the <see cref="T:System.Xml.Linq.XElement" /> content.
                </param>
      <param name="options">
                    A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.String)">
      <summary>
                    Loads an <see cref="T:System.Xml.Linq.XElement" /> from a file located in the applications' XAP package.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XElement" /> that contains the contents of the specified file.
                </returns>
      <param name="uri">
                    A URI string that references the file to be loaded into a new <see cref="T:System.Xml.Linq.XElement" />. This file is located in the application's XAP package. If you want to download a file from some other location, follow the steps described in How to: Load an XML File from an Arbitrary URI Location with LINQ to XML.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
      <summary>
                    Loads an <see cref="T:System.Xml.Linq.XElement" /> from a file located in the application's XAP package, optionally preserving white space, setting the base URI, and retaining line information.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XElement" /> that contains the contents of the specified file.
                </returns>
      <param name="uri">
                    A URI string that references the file to be loaded into a new <see cref="T:System.Xml.Linq.XElement" />. This file is located in the application's XAP package. If you want to download a file from some other location, follow the steps described in How to: Load an XML File from an Arbitrary URI Location with LINQ to XML.
                </param>
      <param name="options">
                    A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)">
      <summary>
                    Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />. 
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.
                </returns>
      <param name="reader">
                    A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement" />.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
      <summary>
                    Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />, optionally preserving white space, setting the base URI, and retaining line information.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.
                </returns>
      <param name="reader">
                    A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement" />.
                </param>
      <param name="options">
                    A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.
                </param>
    </member>
    <member name="P:System.Xml.Linq.XElement.Name">
      <summary>
                    Gets the name of this element.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XName" /> that contains the name of this element.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.NodeType">
      <summary>
                    Gets the node type for this node.
                </summary>
      <returns>
                    The node type. For <see cref="T:System.Xml.Linq.XElement" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Element" />.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.DateTime" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.DateTime" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="element" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Decimal">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Decimal" />.
                </summary>
      <returns>
                    A <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Decimal" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.Decimal" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="element" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Decimal}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.Decimal" /> value.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Single}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.Single" /> value.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.TimeSpan" />.
                </summary>
      <returns>
                    A <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.TimeSpan" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.TimeSpan" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="element" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Double}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.Double" /> value.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Double">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Double" />.
                </summary>
      <returns>
                    A <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Double" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.Double" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="element" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Single">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Single" />.
                </summary>
      <returns>
                    A <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Single" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.Single" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="element" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Guid">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Guid" />.
                </summary>
      <returns>
                    A <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Guid" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.Guid" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="element" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Guid}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.Guid" /> value.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.TimeSpan" /> value.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.DateTime" /> value.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTimeOffset">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.DateTimeOffset" />.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.DateTimeOffset" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.DateTimeOffset" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="element" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTimeOffset}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to an <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.DateTimeOffset" /> value.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int32">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to an <see cref="T:System.Int32" />.
                </summary>
      <returns>
                    A <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Int32" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.Int32" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="element" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int32}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.Int32" /> value.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Boolean}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.Boolean" /> value.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.String">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.String" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.String" />.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Boolean">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Boolean" />.
                </summary>
      <returns>
                    A <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Boolean" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.Boolean" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="element" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt32">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.UInt32" />.
                </summary>
      <returns>
                    A <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.UInt32" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.UInt32" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="element" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt64">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.UInt64" />.
                </summary>
      <returns>
                    A <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.UInt64" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.UInt64" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="element" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt64}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.UInt64" /> value.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int64}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.Int64" /> value.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt32}">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.
                </summary>
      <returns>
                    A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.UInt32" /> value.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int64">
      <summary>
                    Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to an <see cref="T:System.Int64" />.
                </summary>
      <returns>
                    A <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.
                </returns>
      <param name="element">
                    The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Int64" />.
                </param>
      <exception cref="T:System.FormatException">
                    The element does not contain a valid <see cref="T:System.Int64" /> value.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="element" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.Parse(System.String)">
      <summary>
                    Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XElement" /> populated from the string that contains XML.
                </returns>
      <param name="text">
                    A <see cref="T:System.String" /> that contains XML.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
      <summary>
                    Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML, optionally preserving white space and retaining line information.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XElement" /> populated from the string that contains XML.
                </returns>
      <param name="text">
                    A <see cref="T:System.String" /> that contains XML.
                </param>
      <param name="options">
                    A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.RemoveAll">
      <summary>
                    Removes nodes and attributes from this <see cref="T:System.Xml.Linq.XElement" />.
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XElement.RemoveAttributes">
      <summary>
                    Removes the attributes of this <see cref="T:System.Xml.Linq.XElement" />.
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAll(System.Object)">
      <summary>
                    Replaces the child nodes and the attributes of this element with the specified content.
                </summary>
      <param name="content">
                    The content that will replace the child nodes and attributes of this element.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])">
      <summary>
                    Replaces the child nodes and the attributes of this element with the specified content.
                </summary>
      <param name="content">
                    A parameter list of content objects.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)">
      <summary>
                    Replaces the attributes of this element with the specified content.
                </summary>
      <param name="content">
                    The content that will replace the attributes of this element.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])">
      <summary>
                    Replaces the attributes of this element with the specified content.
                </summary>
      <param name="content">
                    A parameter list of content objects.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.Stream)">
      <summary>
                    Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />.
                </summary>
      <param name="stream">
                    The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
      <summary>
                    Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.
                </summary>
      <param name="stream">
                    The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.
                </param>
      <param name="options">
                    A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)">
      <summary>
                    Serialize this element to a <see cref="T:System.IO.TextWriter" />.
                </summary>
      <param name="textWriter">
                    A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
      <summary>
                    Serialize this element to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.
                </summary>
      <param name="textWriter">
                    The <see cref="T:System.IO.TextWriter" /> to output the XML to.
                </param>
      <param name="options">
                    A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)">
      <summary>
                    Serialize this element to an <see cref="T:System.Xml.XmlWriter" />.
                </summary>
      <param name="writer">
                    A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
      <summary>
                    Sets the value of an attribute, adds an attribute, or removes an attribute. 
                </summary>
      <param name="name">
                    An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the attribute to change.
                </param>
      <param name="value">
                    The value to assign to the attribute. The attribute is removed if the value is null. Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XAttribute.Value" /> property of the attribute.
                </param>
      <exception cref="T:System.ArgumentException">
                    The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
      <summary>
                    Sets the value of a child element, adds a child element, or removes a child element.
                </summary>
      <param name="name">
                    An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the child element to change.
                </param>
      <param name="value">
                    The value to assign to the child element. The child element is removed if the value is null. Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property of the child element.
                </param>
      <exception cref="T:System.ArgumentException">
                    The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.SetValue(System.Object)">
      <summary>
                    Sets the value of this element.
                </summary>
      <param name="value">
                    The value to assign to this element. The value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="value" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The <paramref name="value" /> is an <see cref="T:System.Xml.Linq.XObject" />.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>
                    Gets an XML schema definition that describes the XML representation of this object.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
                    Generates an object from its XML representation.
                </summary>
      <param name="reader">
                    The <see cref="T:System.Xml.XmlReader" /> from which the object is deserialized.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
                    Converts an object into its XML representation.
                </summary>
      <param name="writer">
                    The <see cref="T:System.Xml.XmlWriter" /> to which this object is serialized.
                </param>
    </member>
    <member name="P:System.Xml.Linq.XElement.Value">
      <summary>
                    Gets the concatenated text contents of this element.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains all of the text content of this element. If there are multiple text nodes, they will be concatenated.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)">
      <summary>
                    Write this element to an <see cref="T:System.Xml.XmlWriter" />.
                </summary>
      <param name="writer">
                    An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.
                </param>
    </member>
    <member name="T:System.Xml.Linq.XName">
      <summary>
                    Represents a name of an XML element or attribute. 
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XName.Equals(System.Object)">
      <summary>
                    Determines whether the specified <see cref="T:System.Xml.Linq.XName" /> is equal to this <see cref="T:System.Xml.Linq.XName" />.
                </summary>
      <returns>true if the specified <see cref="T:System.Xml.Linq.XName" /> is equal to the current <see cref="T:System.Xml.Linq.XName" />; otherwise false.
                </returns>
      <param name="obj">
                    The <see cref="T:System.Xml.Linq.XName" /> to compare to the current <see cref="T:System.Xml.Linq.XName" />.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XName.Get(System.String)">
      <summary>
                    Gets an <see cref="T:System.Xml.Linq.XName" /> object from an expanded name.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.
                </returns>
      <param name="expandedName">
                    A <see cref="T:System.String" /> that contains an expanded XML name in the format {namespace}localname.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XName.Get(System.String,System.String)">
      <summary>
                    Gets an <see cref="T:System.Xml.Linq.XName" /> object from a local name and a namespace.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XName" /> object created from the specified local name and namespace.
                </returns>
      <param name="localName">
                    A local (unqualified) name.
                </param>
      <param name="namespaceName">
                    An XML namespace.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XName.GetHashCode">
      <summary>
                    Gets a hash code for this <see cref="T:System.Xml.Linq.XName" />.
                </summary>
      <returns>
                    An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XName" />.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XName.LocalName">
      <summary>
                    Gets the local (unqualified) part of the name.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the local (unqualified) part of the name.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XName.Namespace">
      <summary>
                    Gets the namespace part of the fully qualified name.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace part of the name.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XName.NamespaceName">
      <summary>
                    Returns the URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.
                </summary>
      <returns>
                    The URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
      <summary>
                    Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are equal.
                </summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise false.
                </returns>
      <param name="left">
                    The first <see cref="T:System.Xml.Linq.XName" /> to compare.
                </param>
      <param name="right">
                    The second <see cref="T:System.Xml.Linq.XName" /> to compare.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
      <summary>
                    Converts a string formatted as an expanded XML name (that is,{namespace}localname) to an <see cref="T:System.Xml.Linq.XName" /> object.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.
                </returns>
      <param name="expandedName">
                    A string that contains an expanded XML name in the format {namespace}localname.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
      <summary>
                    Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are not equal.
                </summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise false.
                </returns>
      <param name="left">
                    The first <see cref="T:System.Xml.Linq.XName" /> to compare.
                </param>
      <param name="right">
                    The second <see cref="T:System.Xml.Linq.XName" /> to compare.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XName.System#IEquatable{T}#Equals(System.Xml.Linq.XName)">
      <summary>
                    Indicates whether the current <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />.
                </summary>
      <returns>true if this <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />, otherwise false.
                </returns>
      <param name="other">
                    The <see cref="T:System.Xml.Linq.XName" /> to compare with this <see cref="T:System.Xml.Linq.XName" />.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XName.ToString">
      <summary>
                    Returns the expanded XML name in the format {namespace}localname.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the expanded XML name in the format {namespace}localname.
                </returns>
    </member>
    <member name="T:System.Xml.Linq.XNamespace">
      <summary>
                    Represents an XML namespace. This class cannot be inherited. 
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.Equals(System.Object)">
      <summary>
                    Determines whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.
                </summary>
      <returns>
                    A <see cref="T:System.Boolean" /> that indicates whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.
                </returns>
      <param name="obj">
                    The <see cref="T:System.Xml.Linq.XNamespace" /> to compare to the current <see cref="T:System.Xml.Linq.XNamespace" />.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.Get(System.String)">
      <summary>
                    Gets an <see cref="T:System.Xml.Linq.XNamespace" /> for the specified Uniform Resource Identifier (URI).
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XNamespace" /> created from the specified URI.
                </returns>
      <param name="namespaceName">
                    A <see cref="T:System.String" /> that contains a namespace URI.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.GetHashCode">
      <summary>
                    Gets a hash code for this <see cref="T:System.Xml.Linq.XNamespace" />.
                </summary>
      <returns>
                    An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XNamespace" />.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.GetName(System.String)">
      <summary>
                    Returns an <see cref="T:System.Xml.Linq.XName" /> object created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XName" /> created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.
                </returns>
      <param name="localName">
                    A <see cref="T:System.String" /> that contains a local name.
                </param>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.NamespaceName">
      <summary>
                    Gets the Uniform Resource Identifier (URI) of this namespace.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the URI of the namespace.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.None">
      <summary>
                    Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to no namespace.
                </summary>
      <returns>
                    The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to no namespace.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
      <summary>
                    Combines an <see cref="T:System.Xml.Linq.XNamespace" /> object with a local name to create an <see cref="T:System.Xml.Linq.XName" />.
                </summary>
      <returns>
                    The new <see cref="T:System.Xml.Linq.XName" /> constructed from the namespace and local name.
                </returns>
      <param name="ns">
                    An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace.
                </param>
      <param name="localName">
                    A <see cref="T:System.String" /> that contains the local name.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
      <summary>
                    Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are equal.
                </summary>
      <returns>
                    A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are equal.
                </returns>
      <param name="left">
                    The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.
                </param>
      <param name="right">
                    The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace">
      <summary>
                    Converts a string containing a Uniform Resource Identifier (URI) to an <see cref="T:System.Xml.Linq.XNamespace" />.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XNamespace" /> constructed from the URI string.
                </returns>
      <param name="namespaceName">
                    A <see cref="T:System.String" /> that contains the namespace URI.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
      <summary>
                    Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are not equal.
                </summary>
      <returns>
                    A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are not equal.
                </returns>
      <param name="left">
                    The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.
                </param>
      <param name="right">
                    The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.ToString">
      <summary>
                    Returns the URI of this <see cref="T:System.Xml.Linq.XNamespace" />.
                </summary>
      <returns>
                    The URI of this <see cref="T:System.Xml.Linq.XNamespace" />.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.Xml">
      <summary>
                    Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the XML URI (http://www.w3.org/XML/1998/namespace).
                </summary>
      <returns>
                    The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the XML URI (http://www.w3.org/XML/1998/namespace).
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.Xmlns">
      <summary>
                    Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the xmlns URI (http://www.w3.org/2000/xmlns/).
                </summary>
      <returns>
                    The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the xmlns URI (http://www.w3.org/2000/xmlns/).
                </returns>
    </member>
    <member name="T:System.Xml.Linq.XNode">
      <summary>
                    Represents the abstract concept of a node (one of: element, comment, document type, processing instruction, or text node) in the XML tree.  
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddAfterSelf(System.Object)">
      <summary>
                    Adds the specified content immediately after this node.
                </summary>
      <param name="content">
                    A content object that contains simple content or a collection of content objects to be added after this node.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The parent is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddAfterSelf(System.Object[])">
      <summary>
                    Adds the specified content immediately after this node.
                </summary>
      <param name="content">
                    A parameter list of content objects.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The parent is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object)">
      <summary>
                    Adds the specified content immediately before this node.
                </summary>
      <param name="content">
                    A content object that contains simple content or a collection of content objects to be added before this node.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The parent is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])">
      <summary>
                    Adds the specified content immediately before this node.
                </summary>
      <param name="content">
                    A parameter list of content objects.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The parent is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.Ancestors">
      <summary>
                    Returns a collection of the ancestor elements of this node.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the ancestor elements of this node.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)">
      <summary>
                    Returns a filtered collection of the ancestor elements of this node. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the ancestor elements of this node. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                
                    The nodes in the returned collection are in reverse document order.
                
                    This method uses deferred execution.
                </returns>
      <param name="name">
                    The <see cref="T:System.Xml.Linq.XName" /> to match.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>
                    Compares two nodes to determine their relative XML document order.
                </summary>
      <returns>
                    An int containing 0 if the nodes are equal; -1 if <paramref name="n1" /> is before <paramref name="n2" />; 1 if <paramref name="n1" /> is after <paramref name="n2" />.
                </returns>
      <param name="n1">
                    First <see cref="T:System.Xml.Linq.XNode" /> to compare.
                </param>
      <param name="n2">
                    Second <see cref="T:System.Xml.Linq.XNode" /> to compare.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The two nodes do not share a common ancestor.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.CreateReader">
      <summary>
                    Creates an <see cref="T:System.Xml.XmlReader" /> for this node.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.XmlReader" /> that can be used to read this node and its descendants.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>
                    Compares the values of two nodes, including the values of all descendant nodes.
                </summary>
      <returns>true if the nodes are equal; otherwise false.
                </returns>
      <param name="n1">
                    The first <see cref="T:System.Xml.Linq.XNode" /> to compare.
                </param>
      <param name="n2">
                    The second <see cref="T:System.Xml.Linq.XNode" /> to compare.
                </param>
    </member>
    <member name="P:System.Xml.Linq.XNode.DocumentOrderComparer">
      <summary>
                    Gets a comparer that can compare the relative position of two nodes.
                </summary>
      <returns>
                    A <see cref="T:System.Xml.Linq.XNodeDocumentOrderComparer" /> that can compare the relative position of two nodes.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsAfterSelf">
      <summary>
                    Returns a collection of the sibling elements after this node, in document order.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements after this node, in document order.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)">
      <summary>
                    Returns a filtered collection of the sibling elements after this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements after this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </returns>
      <param name="name">
                    The <see cref="T:System.Xml.Linq.XName" /> to match.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsBeforeSelf">
      <summary>
                    Returns a collection of the sibling elements before this node, in document order.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements before this node, in document order.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)">
      <summary>
                    Returns a filtered collection of the sibling elements before this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements before this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.
                </returns>
      <param name="name">
                    The <see cref="T:System.Xml.Linq.XName" /> to match.
                </param>
    </member>
    <member name="P:System.Xml.Linq.XNode.EqualityComparer">
      <summary>
                    Gets a comparer that can compare two nodes for value equality.
                </summary>
      <returns>
                    A <see cref="T:System.Xml.Linq.XNodeEqualityComparer" /> that can compare two nodes for value equality.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)">
      <summary>
                    Determines if the current node appears after a specified node in terms of document order.
                </summary>
      <returns>true if this node appears after the specified node; otherwise false.
                </returns>
      <param name="node">
                    The <see cref="T:System.Xml.Linq.XNode" /> to compare for document order.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)">
      <summary>
                    Determines if the current node appears before a specified node in terms of document order.
                </summary>
      <returns>true if this node appears before the specified node; otherwise false.
                </returns>
      <param name="node">
                    The <see cref="T:System.Xml.Linq.XNode" /> to compare for document order.
                </param>
    </member>
    <member name="P:System.Xml.Linq.XNode.NextNode">
      <summary>
                    Gets the next sibling node of this node.
                </summary>
      <returns>
                    The <see cref="T:System.Xml.Linq.XNode" /> that contains the next sibling node.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.NodesAfterSelf">
      <summary>
                    Returns a collection of the sibling nodes after this node, in document order.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the sibling nodes after this node, in document order.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.NodesBeforeSelf">
      <summary>
                    Returns a collection of the sibling nodes before this node, in document order.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the sibling nodes before this node, in document order.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XNode.PreviousNode">
      <summary>
                    Gets the previous sibling node of this node.
                </summary>
      <returns>
                    The <see cref="T:System.Xml.Linq.XNode" /> that contains the previous sibling node.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)">
      <summary>
                    Creates an <see cref="T:System.Xml.Linq.XNode" /> from an <see cref="T:System.Xml.XmlReader" />.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XNode" /> that contains the node and its descendant nodes that were read from the reader. The runtime type of the node is determined by the node type (<see cref="P:System.Xml.Linq.XObject.NodeType" />) of the first node encountered in the reader.
                </returns>
      <param name="reader">
                    An <see cref="T:System.Xml.XmlReader" /> positioned at the node to read into this <see cref="T:System.Xml.Linq.XNode" />.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Xml.XmlReader" /> is not positioned on a recognized node type.
                </exception>
      <exception cref="T:System.Xml.XmlException">
                    The underlying <see cref="T:System.Xml.XmlReader" /> throws an exception.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.Remove">
      <summary>
                    Removes this node from its parent.
                </summary>
      <exception cref="T:System.InvalidOperationException">
                    The parent is null.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.ReplaceWith(System.Object)">
      <summary>
                    Replaces this node with the specified content.
                </summary>
      <param name="content">
                    Content that replaces this node.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XNode.ReplaceWith(System.Object[])">
      <summary>
                    Replaces this node with the specified content.
                </summary>
      <param name="content">
                    A parameter list of the new content.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XNode.ToString">
      <summary>
                    Returns the indented XML for this node.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing the indented XML.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)">
      <summary>
                    Returns the XML for this node, optionally disabling formatting.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing the XML.
                </returns>
      <param name="options">
                    A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)">
      <summary>
                    Writes this node to an <see cref="T:System.Xml.XmlWriter" />.
                </summary>
      <param name="writer">
                    An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.
                </param>
    </member>
    <member name="T:System.Xml.Linq.XNodeDocumentOrderComparer">
      <summary>
                    Contains functionality to compare nodes for their document order. This class cannot be inherited.  
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeDocumentOrderComparer.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XNodeDocumentOrderComparer" /> class. 
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeDocumentOrderComparer.Compare(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>
                    Compares two nodes to determine their relative document order.
                </summary>
      <returns>
                    An <see cref="T:System.Int32" /> that contains 0 if the nodes are equal; -1 if <paramref name="x" /> is before <paramref name="y" />; 1 if <paramref name="x" /> is after <paramref name="y" />.
                </returns>
      <param name="x">
                    The first <see cref="T:System.Xml.Linq.XNode" /> to compare.
                </param>
      <param name="y">
                    The second <see cref="T:System.Xml.Linq.XNode" /> to compare.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The two nodes do not share a common ancestor.
                </exception>
    </member>
    <member name="T:System.Xml.Linq.XNodeEqualityComparer">
      <summary>
                    Compares nodes to determine whether they are equal. This class cannot be inherited. 
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XNodeEqualityComparer" /> class. 
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.Equals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>
                    Compares the values of two nodes.
                </summary>
      <returns>
                    A <see cref="T:System.Boolean" /> indicating if the nodes are equal.
                </returns>
      <param name="x">
                    The first <see cref="T:System.Xml.Linq.XNode" /> to compare.
                </param>
      <param name="y">
                    The second <see cref="T:System.Xml.Linq.XNode" /> to compare.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.GetHashCode(System.Xml.Linq.XNode)">
      <summary>
                    Returns a hash code based on an <see cref="T:System.Xml.Linq.XNode" />.
                </summary>
      <returns>
                    A <see cref="T:System.Int32" /> that contains a value-based hash code for the node.
                </returns>
      <param name="obj">
                    The <see cref="T:System.Xml.Linq.XNode" /> to hash.
                </param>
    </member>
    <member name="T:System.Xml.Linq.XObject">
      <summary>
                    Represents a node or an attribute in an XML tree. 
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XObject.AddAnnotation(System.Object)">
      <summary>
                    Adds an object to the annotation list of this <see cref="T:System.Xml.Linq.XObject" />.
                </summary>
      <param name="annotation">
                    An <see cref="T:System.Object" /> that contains the annotation to add.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotation``1">
      <summary>
                    Get the first annotation object of the specified type from this <see cref="T:System.Xml.Linq.XObject" />. 
                </summary>
      <returns>
                    The first annotation object that matches the specified type, or null if no annotation is of the specified type.
                </returns>
      <typeparam name="T">
                    The type of the annotation to retrieve.
                </typeparam>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotation(System.Type)">
      <summary>
                    Gets the first annotation object of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.
                </summary>
      <returns>
                    The <see cref="T:System.Object" /> that contains the first annotation object that matches the specified type, or null if no annotation is of the specified type.
                </returns>
      <param name="type">
                    The <see cref="T:System.Type" /> of the annotation to retrieve.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotations``1">
      <summary>
                    Gets a collection of annotations of the specified type for this <see cref="T:System.Xml.Linq.XObject" />.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the annotations for this <see cref="T:System.Xml.Linq.XObject" />.
                </returns>
      <typeparam name="T">
                    The type of the annotations to retrieve.
                </typeparam>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotations(System.Type)">
      <summary>
                    Gets a collection of annotations of the specified type for this <see cref="T:System.Xml.Linq.XObject" />.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Object" /> that contains the annotations that match the specified type for this <see cref="T:System.Xml.Linq.XObject" />.
                </returns>
      <param name="type">
                    The <see cref="T:System.Type" /> of the annotations to retrieve.
                </param>
    </member>
    <member name="P:System.Xml.Linq.XObject.BaseUri">
      <summary>
                    Gets the base URI for this <see cref="T:System.Xml.Linq.XObject" />.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the base URI for this <see cref="T:System.Xml.Linq.XObject" />.
                </returns>
    </member>
    <member name="E:System.Xml.Linq.XObject.Changed">
      <summary>
                    Raised when this <see cref="T:System.Xml.Linq.XObject" /> or any of its descendants have changed.
                </summary>
    </member>
    <member name="E:System.Xml.Linq.XObject.Changing">
      <summary>
                    Raised when this <see cref="T:System.Xml.Linq.XObject" /> or any of its descendants are about to change.
                </summary>
    </member>
    <member name="P:System.Xml.Linq.XObject.Document">
      <summary>
                    Gets the <see cref="T:System.Xml.Linq.XDocument" /> for this <see cref="T:System.Xml.Linq.XObject" />.
                </summary>
      <returns>
                    The <see cref="T:System.Xml.Linq.XDocument" /> for this <see cref="T:System.Xml.Linq.XObject" />. 
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.NodeType">
      <summary>
                    Gets the node type for this <see cref="T:System.Xml.Linq.XObject" />.
                </summary>
      <returns>
                    The node type for this <see cref="T:System.Xml.Linq.XObject" />. 
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.Parent">
      <summary>
                    Gets the parent <see cref="T:System.Xml.Linq.XElement" /> of this <see cref="T:System.Xml.Linq.XObject" />.
                </summary>
      <returns>
                    The parent <see cref="T:System.Xml.Linq.XElement" /> of this <see cref="T:System.Xml.Linq.XObject" />.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XObject.RemoveAnnotations``1">
      <summary>
                    Removes the annotations of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.
                </summary>
      <typeparam name="T">
                    The type of annotations to remove.
                </typeparam>
    </member>
    <member name="M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)">
      <summary>
                    Removes the annotations of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.
                </summary>
      <param name="type">
                    The <see cref="T:System.Type" /> of annotations to remove.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo">
      <summary>
                    Gets a value indicating whether or not this <see cref="T:System.Xml.Linq.XObject" /> has line information.
                </summary>
      <returns>true if the <see cref="T:System.Xml.Linq.XObject" /> has line information, otherwise false.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber">
      <summary>
                    Gets the line number that the underlying <see cref="T:System.Xml.XmlReader" /> reported for this <see cref="T:System.Xml.Linq.XObject" />.
                </summary>
      <returns>
                    An <see cref="T:System.Int32" /> that contains the line number reported by the <see cref="T:System.Xml.XmlReader" /> for this <see cref="T:System.Xml.Linq.XObject" />.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition">
      <summary>
                    Gets the line position that the underlying <see cref="T:System.Xml.XmlReader" /> reported for this <see cref="T:System.Xml.Linq.XObject" />.
                </summary>
      <returns>
                    An <see cref="T:System.Int32" /> that contains the line position reported by the <see cref="T:System.Xml.XmlReader" /> for this <see cref="T:System.Xml.Linq.XObject" />.
                </returns>
    </member>
    <member name="T:System.Xml.Linq.XObjectChange">
      <summary>
                    Specifies the event type when an event is raised for an <see cref="T:System.Xml.Linq.XObject" />.
                </summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Add">
      <summary>
                    An <see cref="T:System.Xml.Linq.XObject" /> has been or will be added to an <see cref="T:System.Xml.Linq.XContainer" />.
                </summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Remove">
      <summary>
                    An <see cref="T:System.Xml.Linq.XObject" /> has been or will be removed from an <see cref="T:System.Xml.Linq.XContainer" />.
                </summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Name">
      <summary>
                    An <see cref="T:System.Xml.Linq.XObject" /> has been or will be renamed.
                </summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Value">
      <summary>
                    The value of an <see cref="T:System.Xml.Linq.XObject" /> has been or will be changed. In addition, a change in the serialization of an empty element (either from an empty tag to start/end tag pair or vice versa) raises this event.
                </summary>
    </member>
    <member name="T:System.Xml.Linq.XObjectChangeEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Xml.Linq.XObject.Changing" /> and <see cref="E:System.Xml.Linq.XObject.Changed" /> events.
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XObjectChangeEventArgs.#ctor(System.Xml.Linq.XObjectChange)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XObjectChangeEventArgs" /> class. 
                </summary>
      <param name="objectChange">
                    An <see cref="T:System.Xml.Linq.XObjectChange" /> that contains the event arguments for LINQ to XML events.
                </param>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Add">
      <summary>
                    Event argument for an <see cref="F:System.Xml.Linq.XObjectChange.Add" /> change event.
                </summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Name">
      <summary>
                    Event argument for a <see cref="F:System.Xml.Linq.XObjectChange.Name" /> change event.
                </summary>
    </member>
    <member name="P:System.Xml.Linq.XObjectChangeEventArgs.ObjectChange">
      <summary>
                    Gets the type of change.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XObjectChange" /> that contains the type of change.
                </returns>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Remove">
      <summary>
                    Event argument for a <see cref="F:System.Xml.Linq.XObjectChange.Remove" /> change event.
                </summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Value">
      <summary>
                    Event argument for a <see cref="F:System.Xml.Linq.XObjectChange.Value" /> change event.
                </summary>
    </member>
    <member name="T:System.Xml.Linq.XProcessingInstruction">
      <summary>
                    Represents an XML processing instruction. 
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XProcessingInstruction.#ctor(System.String,System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XProcessingInstruction" /> class. 
                </summary>
      <param name="target">
                    A <see cref="T:System.String" /> containing the target application for this <see cref="T:System.Xml.Linq.XProcessingInstruction" />.
                </param>
      <param name="data">
                    The string data for this <see cref="T:System.Xml.Linq.XProcessingInstruction" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="target" /> or <paramref name="data" /> parameter is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The <paramref name="target" /> does not follow the constraints of an XML name.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XProcessingInstruction.#ctor(System.Xml.Linq.XProcessingInstruction)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XProcessingInstruction" /> class. 
                </summary>
      <param name="other">
                    The <see cref="T:System.Xml.Linq.XProcessingInstruction" /> node to copy from.
                </param>
    </member>
    <member name="P:System.Xml.Linq.XProcessingInstruction.Data">
      <summary>
                    Gets or sets the string value of this processing instruction.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the string value of this processing instruction.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The string <paramref name="value" /> is null.
                </exception>
    </member>
    <member name="P:System.Xml.Linq.XProcessingInstruction.NodeType">
      <summary>
                    Gets the node type for this node.
                </summary>
      <returns>
                    The node type. For <see cref="T:System.Xml.Linq.XProcessingInstruction" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.ProcessingInstruction" />.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XProcessingInstruction.Target">
      <summary>
                    Gets or sets a string containing the target application for this processing instruction.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing the target application for this processing instruction.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The string <paramref name="value" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    The <paramref name="target" /> does not follow the constraints of an XML name.
                </exception>
    </member>
    <member name="M:System.Xml.Linq.XProcessingInstruction.WriteTo(System.Xml.XmlWriter)">
      <summary>
                    Writes this processing instruction to an <see cref="T:System.Xml.XmlWriter" />.
                </summary>
      <param name="writer">
                    The <see cref="T:System.Xml.XmlWriter" /> to write this processing instruction to.
                </param>
    </member>
    <member name="T:System.Xml.Linq.XStreamingElement">
      <summary>
                    Represents elements in an XML tree that supports deferred streaming output.
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from the specified <see cref="T:System.Xml.Linq.XName" />.
                </summary>
      <param name="name">
                    An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the element.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XStreamingElement" /> class with the specified name and content.
                </summary>
      <param name="name">
                    An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.
                </param>
      <param name="content">
                    The contents of the element.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XStreamingElement" /> class with the specified name and content.
                </summary>
      <param name="name">
                    An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.
                </param>
      <param name="content">
                    The contents of the element.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
      <summary>
                    Adds the specified content as children to this <see cref="T:System.Xml.Linq.XStreamingElement" />.
                </summary>
      <param name="content">
                    Content to be added to the streaming element.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
      <summary>
                    Adds the specified content as children to this <see cref="T:System.Xml.Linq.XStreamingElement" />.
                </summary>
      <param name="content">
                    Content to be added to the streaming element.
                </param>
    </member>
    <member name="P:System.Xml.Linq.XStreamingElement.Name">
      <summary>
                    Gets or sets the name of this streaming element.
                </summary>
      <returns>
                    An <see cref="T:System.Xml.Linq.XName" /> that contains the name of this streaming element.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
      <summary>
                    Outputs this <see cref="T:System.Xml.Linq.XStreamingElement" /> to the specified <see cref="T:System.IO.Stream" />.
                </summary>
      <param name="stream">
                    The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
      <summary>
                    Outputs this <see cref="T:System.Xml.Linq.XStreamingElement" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.
                </summary>
      <param name="stream">
                    The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.
                </param>
      <param name="options">
                    A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
      <summary>
                    Serialize this streaming element to a <see cref="T:System.IO.TextWriter" />.
                </summary>
      <param name="textWriter">
                    A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XStreamingElement" /> will be written to.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
      <summary>
                    Serialize this streaming element to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.
                </summary>
      <param name="textWriter">
                    The <see cref="T:System.IO.TextWriter" /> to output the XML to.
                </param>
      <param name="options">
                    A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)">
      <summary>
                    Serialize this streaming element to an <see cref="T:System.Xml.XmlWriter" />.
                </summary>
      <param name="writer">
                    A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.ToString">
      <summary>
                    Returns the formatted (indented) XML for this streaming element.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing the indented XML.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
      <summary>
                    Returns the XML for this streaming element, optionally disabling formatting.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> containing the XML.
                </returns>
      <param name="options">
                    A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)">
      <summary>
                    Writes this streaming element to an <see cref="T:System.Xml.XmlWriter" />.
                </summary>
      <param name="writer">
                    An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.
                </param>
    </member>
    <member name="T:System.Xml.Linq.XText">
      <summary>
                    Represents a text node.  
                </summary>
    </member>
    <member name="M:System.Xml.Linq.XText.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XText" /> class. 
                </summary>
      <param name="value">
                    The <see cref="T:System.String" /> that contains the value of the <see cref="T:System.Xml.Linq.XText" /> node.
                </param>
    </member>
    <member name="M:System.Xml.Linq.XText.#ctor(System.Xml.Linq.XText)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Linq.XText" /> class from another <see cref="T:System.Xml.Linq.XText" /> object.
                </summary>
      <param name="other">
                    The <see cref="T:System.Xml.Linq.XText" /> node to copy from.
                </param>
    </member>
    <member name="P:System.Xml.Linq.XText.NodeType">
      <summary>
                    Gets the node type for this node.
                </summary>
      <returns>
                    The node type. For <see cref="T:System.Xml.Linq.XText" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Text" />.
                </returns>
    </member>
    <member name="P:System.Xml.Linq.XText.Value">
      <summary>
                    Gets or sets the value of this node.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the value of this node.
                </returns>
    </member>
    <member name="M:System.Xml.Linq.XText.WriteTo(System.Xml.XmlWriter)">
      <summary>
                    Writes this node to an <see cref="T:System.Xml.XmlWriter" />.
                </summary>
      <param name="writer">
                    An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.
                </param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\2.0.31005.0\Libraries\Client\System.Data.Services.Client.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Services.Client</name>
  </assembly>
  <members>
    <member name="T:System.Data.Services.Client.ChangeOperationResponse">
      <summary>
                    Results that are returned after a call to the <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" /> method when enumerating operation responses that are returned by the <see cref="T:System.Data.Services.Client.DataServiceResponse" /> class.
                </summary>
    </member>
    <member name="P:System.Data.Services.Client.ChangeOperationResponse.Descriptor">
      <summary>
                    Gets the <see cref="T:System.Data.Services.Client.EntityDescriptor" /> or <see cref="T:System.Data.Services.Client.LinkDescriptor" /> modified by a change operation.
                </summary>
      <returns>
                    An <see cref="T:System.Data.Services.Client.EntityDescriptor" /> or <see cref="T:System.Data.Services.Client.LinkDescriptor" /> modified by a change operation.
                </returns>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceClientException">
      <summary>
                    Represents errors from ADO.NET Data Services client applications.
                </summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceClientException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceClientException" /> class by using a system-supplied message that describes the error. 
                </summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceClientException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceClientException" /> class by using a specified message that describes the error. 
                </summary>
      <param name="message">
                    The message that describes the exception. The caller of this constructor is required to ensure that this string was localized for the current system culture.
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceClientException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceClientException" /> class by using a specified error message and a reference to the inner exception that is the cause of this exception. 
                </summary>
      <param name="message">
                    The message that describes the exception. The caller of this constructor is required to ensure that this string was localized for the current system culture. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceClientException.#ctor(System.String,System.Exception,System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceClientException" /> class. 
                </summary>
      <param name="message">
                    The string value that contains the error message.
                </param>
      <param name="innerException">
                    The System.Exception object that contains the inner exception.
                </param>
      <param name="statusCode">
                    The integer value that contains the status code.
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceClientException.#ctor(System.String,System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceClientException" /> class. 
                </summary>
      <param name="message">
                    The string value that contains the error message.
                </param>
      <param name="statusCode">
                    The integer value that contains the status code.
                </param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceClientException.StatusCode">
      <summary>
                    Gets the HTTP error status code returned after a <see cref="T:System.Data.Services.Client.DataServiceClientException" />.
                </summary>
      <returns>
                    An integer value that represents the exception.
                </returns>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceContext">
      <summary>
                    The <see cref="T:System.Data.Services.Client.DataServiceContext" /> represents the runtime context of an ADO.NET data service. ADO.NET Data Services are stateless, but the <see cref="T:System.Data.Services.Client.DataServiceContext" /> is not. State on the client is maintained between interactions in order to support features such as update management. This class, and the <see cref="T:System.Data.Services.Client.DataServiceQuery" /> class that represents a particular HTTP request to a data service, are the two main classes in the client library. 
                </summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.#ctor(System.Uri)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceContext" /> class by using the specified <paramref name="baseURI" />.
                </summary>
      <param name="serviceRoot">
                    An absolute URI that identifies the root of a data service.
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.AddLink(System.Object,System.String,System.Object)">
      <summary>
                    Adds the specified link to the set of objects the <see cref="T:System.Data.Services.Client.DataServiceContext" /> is tracking.
                </summary>
      <param name="source">
                    The source object for the new link.
                </param>
      <param name="sourceProperty">
                    The property on the source object that identifies the object to which the source adds a link.
                </param>
      <param name="target">
                    The object in the new link to which the source will be linked. The target object must be of the type identified by the <paramref name="sourceProperty" /> parameter or a subtype of the type.
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.AddObject(System.String,System.Object)">
      <summary>
                    Adds the specified object to the set of objects that the <see cref="T:System.Data.Services.Client.DataServiceContext" /> is tracking.
                </summary>
      <param name="entitySetName">
                    The name of the entity set to which the resource will be added.
                </param>
      <param name="entity">
                    The resource to be tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" /> in the added state.
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.AttachLink(System.Object,System.String,System.Object)">
      <summary>
                    Notifies the <see cref="T:System.Data.Services.Client.DataServiceContext" /> to start tracking the specified link between the source and the specified target entity.
                </summary>
      <param name="source">
                    The source object in the new link.
                </param>
      <param name="sourceProperty">
                    The name of the property on the source object that represents the link between the source and target object.
                </param>
      <param name="target">
                    The target object in the link that is bound to the source object specified in this call. The target object must be of the type identified by the source property or a subtype.
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.AttachTo(System.String,System.Object)">
      <summary>
                    Notifies the <see cref="T:System.Data.Services.Client.DataServiceContext" /> to start tracking the specified resource and supplies the location of the resource within the specified resource set.
                </summary>
      <param name="entitySetName">
                    The name of the set that contains the resource.
                </param>
      <param name="entity">
                    The resource to be tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" />. The resource is attached in the Unchanged state.
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.AttachTo(System.String,System.Object,System.String)">
      <summary>
                    Notifies the <see cref="T:System.Data.Services.Client.DataServiceContext" /> to start tracking the specified resource and supplies the location of the resource within the specified resource set.
                </summary>
      <param name="entitySetName">
                    The string value that contains the name of the entity set to which the entity is attached.
                </param>
      <param name="entity">
                    The entity to add.
                </param>
      <param name="etag">
                    An eTag value that represents the state of the entity the last time that it was retrieved from the data service. This value is treated as an opaque string; no validation is performed on it by the client library.
                </param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.BaseUri">
      <summary>
                    Gets the absolute URI identifying the root of the target data service. 
                </summary>
      <returns>
                    An absolute URI that identifies the root of an ADO.NET data service.
                </returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.BeginExecute``1(System.Uri,System.AsyncCallback,System.Object)">
      <summary>
                    Asynchronously sends the request so that this call does not block processing while waiting for the results from the service.
                </summary>
      <param name="requestUri">
                    The URI to which the query request will be sent. The URI may be any valid data service URI; it can contain $ query parameters.
                </param>
      <param name="callback">
                    Delegate to invoke when results are available for client consumption.
                </param>
      <param name="state">
                    User-defined state object that was passed to the callback.
                </param>
      <typeparam name="TElement">
                    The type returned by the query.
                </typeparam>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.BeginExecuteBatch(System.AsyncCallback,System.Object,System.Data.Services.Client.DataServiceRequest[])">
      <summary>
                    Asynchronously submits a group of queries as a batch to the data service.
                </summary>
      <param name="callback">
                    The delegate that is called when a response to the batch request is received.
                </param>
      <param name="state">
                    User-defined state object that is used to pass context data to the callback method.
                </param>
      <param name="queries">
                    The array of query requests to include in the batch request.
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.BeginLoadProperty(System.Object,System.String,System.AsyncCallback,System.Object)">
      <summary>
                    Begins the operation to load the value of the specified property from the data service.
                </summary>
      <returns>
                    An IAsyncResult that represents the status of the asynchronous operation.
                </returns>
      <param name="entity">
                    The entity that contains the property to load.
                </param>
      <param name="propertyName">
                    The name of the property on the specified entity to load.
                </param>
      <param name="callback">
                    The delegate called when a response to the request is received.
                </param>
      <param name="state">
                    The user-defined state object used to pass context data to the callback method.
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.BeginSaveChanges(System.AsyncCallback,System.Object)">
      <summary>
                    Asynchronously submits the pending changes to the data service collected by the <see cref="T:System.Data.Services.Client.DataServiceContext" /> since the last time changes were saved.
                </summary>
      <returns>
                    An IAsyncResult that represents the status of the asynchronous operation.
                </returns>
      <param name="callback">
                    The delegate to call when the operation finishes.
                </param>
      <param name="state">
                    The user-defined state object used to pass context data to the callback method.
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.BeginSaveChanges(System.Data.Services.Client.SaveChangesOptions,System.AsyncCallback,System.Object)">
      <summary>
                    Asynchronously submits the pending changes to the data service collected by the <see cref="T:System.Data.Services.Client.DataServiceContext" /> since the last time changes were saved.
                </summary>
      <returns>
                    An IAsyncResult that represents the status of the asynchronous operation.
                </returns>
      <param name="options">
                    The options for how the client can save the pending set of changes.
                </param>
      <param name="callback">
                    The delegate to call when the operation finishes.
                </param>
      <param name="state">
                    The user-defined state object used to pass context data to the callback method.
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.CancelRequest(System.IAsyncResult)">
      <summary>
                    Cancels a request to the <see cref="T:System.Data.Services.Client.DataServiceContext" />.
                </summary>
      <param name="asyncResult">
                    The status of the asynchronous operation to be cancelled.
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.CreateQuery``1(System.String)">
      <summary>
                    Creates a data service query for data of a specified generic type.
                </summary>
      <returns>
                    A new <see cref="T:System.Data.Services.Client.DataServiceQuery`1" /> instance that represents a data service query.
                </returns>
      <param name="entitySetName">
                    A string that resolves to a URI.
                </param>
      <typeparam name="T">
                    The type returned by the query
                </typeparam>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.DataNamespace">
      <summary>
                    Gets or sets the XML namespace for data items, not metadata items, of an Atom payload.
                </summary>
      <returns>
                    A string representing the XML namespace for data items of a payload in the ATOM format.
                </returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.DeleteLink(System.Object,System.String,System.Object)">
      <summary>
                    Changes the state of the link to Deleted in the list of links being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" />.
                </summary>
      <param name="source">
                    The source object in the link to be marked for deletion.
                </param>
      <param name="sourceProperty">
                    The name of the property on the source object that represents the source in the link between the source and the target.
                </param>
      <param name="target">
                    The target object involved in the link that is bound to the source object. The target object must be of the type identified by the source property or a subtype.
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.DeleteObject(System.Object)">
      <summary>
                    Changes the state of the specified object to Deleted in the <see cref="T:System.Data.Services.Client.DataServiceContext" />.
                </summary>
      <param name="entity">
                    The tracked entity to be changed to the deleted state.
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.Detach(System.Object)">
      <summary>
                    Removes the entity from the list of entities that the <see cref="T:System.Data.Services.Client.DataServiceContext" /> is tracking.
                </summary>
      <returns>
                    Returns true if the specified entity was detached; otherwise false.
                </returns>
      <param name="entity">
                    The tracked entity to be detached from the <see cref="T:System.Data.Services.Client.DataServiceContext" />.
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.DetachLink(System.Object,System.String,System.Object)">
      <summary>
                    Removes the specified link from the list of links being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" />.
                </summary>
      <returns>
                    Returns true if the specified entity was detached; otherwise false.
                </returns>
      <param name="source">
                    The source object participating in the link to be marked for deletion.
                </param>
      <param name="sourceProperty">
                    The name of the property on the source object that represents the source in the link between the source and the target.
                </param>
      <param name="target">
                    The target object involved in the link that is bound to the source object. The target object must be of the type identified by the source property or a subtype.
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.EndExecute``1(System.IAsyncResult)">
      <summary>
                    Called to complete the <see cref="M:System.Data.Services.Client.DataServiceContext.BeginExecute``1(System.Uri,System.AsyncCallback,System.Object)" />.
                </summary>
      <param name="asyncResult">
        <see cref="T:System.IAsyncResult" /> object.
                </param>
      <typeparam name="TElement">
                    The type returned by the query.
                </typeparam>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.EndExecuteBatch(System.IAsyncResult)">
      <summary>
                    Called to complete the <see cref="M:System.Data.Services.Client.DataServiceContext.BeginExecuteBatch(System.AsyncCallback,System.Object,System.Data.Services.Client.DataServiceRequest[])" />.
                </summary>
      <returns>
                    The <see cref="T:System.Data.Services.Client.DataServiceResponse" /> object that indicates the result of the batch operation.
                </returns>
      <param name="asyncResult">
                    An IAsyncResult that represents the status of the asynchronous operation.
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.EndLoadProperty(System.IAsyncResult)">
      <summary>
                    Called to complete the <see cref="M:System.Data.Services.Client.DataServiceContext.BeginLoadProperty(System.Object,System.String,System.AsyncCallback,System.Object)" /> operation.
                </summary>
      <param name="asyncResult">
                    An IAsyncResult that represents the status of the asynchronous operation.
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.EndSaveChanges(System.IAsyncResult)">
      <summary>
                    Called to complete the <see cref="M:System.Data.Services.Client.DataServiceContext.BeginSaveChanges(System.AsyncCallback,System.Object)" /> operation.
                </summary>
      <returns>
                    A <see cref="T:System.Data.Services.Client.DataServiceResponse" /> object that indicates the result of the batch operation.
                </returns>
      <param name="asyncResult">
                    An IAsyncResult that represents the status of the asynchronous operation.
                </param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.Entities">
      <summary>
                    Gets a list of all the resources currently being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" />.
                </summary>
      <returns>
                    A list of all the resources currently being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" />. 
                </returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.GetMetadataUri">
      <summary>
                    Gets a URI of the location of .edmx metadata.
                </summary>
      <returns>
                    A URI that identifies the location of the metadata description, in .edmx format, for the data service identified by the base URI that is passed to the constructor.
                </returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.IgnoreMissingProperties">
      <summary>
                    Gets or sets whether the properties read from the type must be mapped to properties on the client-side type.
                </summary>
      <returns>
                    A Boolean value that indicates whether the properties read from the type must be mapped to properties on the client-side type.
                </returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.Links">
      <summary>
                    Gets the collection of all associations or links currently being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" /> object.
                </summary>
      <returns>
                    A collection of all associations or links currently being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" /> object.
                </returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.MergeOption">
      <summary>
                    Gets or sets the synchronization option for receiving entities from a data service.
                </summary>
      <returns>
                    One of the members of the <see cref="T:System.Data.Services.Client.MergeOption" /> enumeration.
                </returns>
    </member>
    <member name="E:System.Data.Services.Client.DataServiceContext.ReadingEntity">
      <summary>
                    Occurs after the entity has been completely read into the target entity.
                </summary>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.ResolveName">
      <summary>
                    Gets or sets a function to override the default type resolution strategy used by the client library when sending entities to a data service.
                </summary>
      <returns>
                    Returns a string that contains the name of the <see cref="T:System.Data.Services.Client.DataServiceContext" />.
                </returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.ResolveType">
      <summary>
                    Gets or sets a function that is used to override the default type resolution option that is used by the client library when receiving entities from a data service.
                </summary>
      <returns>
                    A function delegate that identifies an override function that is used to override the default type resolution option that is used by the client library.
                </returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.SaveChangesDefaultOptions">
      <summary>
                    Gets or sets the <see cref="T:System.Data.Services.Client.SaveChangesOptions" /> values used by the <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" /> method.
                </summary>
    </member>
    <member name="E:System.Data.Services.Client.DataServiceContext.SendingRequest">
      <summary>
                    Occurs when a new HttpWebRequest has been created.
                </summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.SetLink(System.Object,System.String,System.Object)">
      <summary>
                    Notifies the <see cref="T:System.Data.Services.Client.DataServiceContext" /> that a new link exists between the objects specified and that the link is represented by the property specified by the <paramref name="sourceProperty" /> parameter.
                </summary>
      <param name="source">
                    The source object for the new link.
                </param>
      <param name="sourceProperty">
                    The property on the source object that identifies the target object of the new link.
                </param>
      <param name="target">
                    The child object involved in the new link that is to be initialized by calling this method. The target object must be a subtype of the type identified by the <paramref name="sourceProperty" /> parameter. If <paramref name="target" /> is set to null, the call represents a delete link operation.
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.TryGetEntity``1(System.Uri,``0@)">
      <summary>
                    Tests retrieval of an entity being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" /> by reference to the URI of the entity.
                </summary>
      <returns>
                    If an entity is found at <paramref name="resourceUri" />, the entity is returned in the out parameter <paramref name="entity" /> and true is returned. If no entity is found, false is returned.
                </returns>
      <param name="identity">
                    The URI of the tracked entity to be retrieved.
                </param>
      <param name="entity">
                    The entity to be retrieved.
                </param>
      <typeparam name="TEntity">
                    The type of the entity.
                </typeparam>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.TryGetUri(System.Object,System.Uri@)">
      <summary>
                    Retrieves the canonical URI associated with the specified entity, if available.
                </summary>
      <returns>
                    Returns true if the canonical URI is returned in the out parameter. If the specified entity is not tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" /> or is in the added state, no URI is available and false is returned.
                </returns>
      <param name="entity">
                    The entity identified by the <paramref name="identity" />.
                </param>
      <param name="identity">
                    The URI of the entity.
                </param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.TypeScheme">
      <summary>
                    Gets or sets the URI that is used to indicate what type scheme is used by the service.
                </summary>
      <returns>
                    A <see cref="T:System.Uri" /> object that contains the type scheme.
                </returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceContext.UpdateObject(System.Object)">
      <summary>
                    Changes the state of the specified object in the <see cref="T:System.Data.Services.Client.DataServiceContext" /> to <see cref="F:System.Data.Services.Client.EntityStates.Modified" />.
                </summary>
      <param name="entity">
                    The tracked entity to be assigned to the <see cref="F:System.Data.Services.Client.EntityStates.Modified" />  state.
                </param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceContext.UsePostTunneling">
      <summary>
                    Gets or sets a Boolean value that indicates whether to use post tunneling.
                </summary>
      <returns>
                    A Boolean value that indicates whether to use post tunneling.
                </returns>
    </member>
    <member name="E:System.Data.Services.Client.DataServiceContext.WritingEntity">
      <summary>
                    Occurs after an entity has been fully serialized into XML (Atom), and allows the developer to change the XML before it is sent.
                </summary>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceQuery">
      <summary>
                    An abstract class that represents a single query request to a data service. 
                </summary>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceQuery.Expression">
      <summary>
                    Represents an expression that contains the query to the data service.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.Expression" /> object that represents the query.
                </returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceQuery.Provider">
      <summary>
                    Represents the query provider instance.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.IQueryProvider" /> that represents the data source provider.
                </returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Gets the <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection returned by the query.
                </summary>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceQuery`1">
      <summary>
                    Represents a single query request to a data service.
                </summary>
      <typeparam name="TElement">
                    Type of results returned by the query.
                </typeparam>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery`1.AddQueryOption(System.String,System.Object)">
      <summary>
                    Creates a new <see cref="T:System.Data.Services.Client.DataServiceQuery`1" /> that includes the query option in the URI that is generated by the returned query.
                </summary>
      <param name="name">
                    The string value that contains the name of the query string option to add.
                </param>
      <param name="value">
                    The object that contains the value of the query string option.
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery`1.BeginExecute(System.AsyncCallback,System.Object)">
      <summary>
                    Starts an asynchronous network operation that executes the query that is represented by this object instance.
                </summary>
      <returns>
                    An IAsyncResult that represents the status of the asynchronous operation.
                </returns>
      <param name="callback">
                    The delegate to invoke when the operation finishes.
                </param>
      <param name="state">
                    User-defined object used to transfer state between the start of the operation and the callback defined by <paramref name="callback" />.
                </param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceQuery`1.ElementType">
      <summary>
                    Returns the type of the object used in the template to create the DataServiceQuery instance.
                </summary>
      <returns>
                    Returns a <see cref="T:System.Type" /> that represents the type that is used in the template when the query is created.
                </returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery`1.EndExecute(System.IAsyncResult)">
      <summary>
                    Ends an asynchronous query request to a data service.
                </summary>
      <returns>
                    Returns IEnumerable that contains the results of the query operation.
                </returns>
      <param name="asyncResult">
                    The pending asynchronous query request.
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery`1.Expand(System.String)">
      <summary>
                    Creates a new <see cref="T:System.Data.Services.Client.DataServiceQuery`1" /> that includes the expand option in the URI that is generated by the returned query.
                </summary>
      <param name="path">
                    A string value that contains the requested URI.
                </param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceQuery`1.Expression">
      <summary>
                    Represents an expression that contains the query to the data service.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.Expressions.Expression" /> object that represents the query.
                </returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceQuery`1.Provider">
      <summary>
                    Represents the query provider instance.
                </summary>
      <returns>
                    A <see cref="T:System.Linq.IQueryProvider" /> representing the data source provider.
                </returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceQuery`1.RequestUri">
      <returns>
                    A <see cref="T:System.Uri" /> object that contains the URI of the request.
                </returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator"></member>
    <member name="M:System.Data.Services.Client.DataServiceQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Executes the query and returns the results as a collection.
                </summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQuery`1.ToString">
      <summary>
                    Represents the URI of the query to the data service.
                </summary>
      <returns>
                    A URI as a string that represents the query to the data service for this DataServiceQuery instance.
                </returns>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceQueryException">
      <summary>
                    Exception that indicates an error occurred while loading the property value from the data service. 
                </summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQueryException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceQueryException" /> class by using a system-supplied message that describes the error. 
                </summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQueryException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceQueryException" /> class by using a specified message that describes the error. 
                </summary>
      <param name="message">
                    The message that describes the exception. The caller of this constructor is required to ensure that this string was localized for the current system culture.
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQueryException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceQueryException" /> class by using a specified error message and a reference to the inner exception that is the cause of this exception. 
                </summary>
      <param name="message">
                    The message that describes the exception. The caller of this constructor is required to ensure that this string was localized for the current system culture. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceQueryException.#ctor(System.String,System.Exception,System.Data.Services.Client.QueryOperationResponse)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceQueryException" /> class. 
                </summary>
      <param name="message">
                    The string value that contains the error message.
                </param>
      <param name="innerException">
                    The inner exception object.
                </param>
      <param name="response">
                    The <see cref="T:System.Data.Services.Client.QueryOperationResponse" /> object.
                </param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceQueryException.Response">
      <summary>
                    Gets the <see cref="T:System.Data.Services.Client.QueryOperationResponse" /> that indicates the exception results.
                </summary>
      <returns>
                    A <see cref="T:System.Data.Services.Client.QueryOperationResponse" /> object that indicates the exception results.
                </returns>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceRequest">
      <summary>
                    Represents request objects that are submitted as a batch to the data service.
                </summary>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceRequest.ElementType">
      <summary>
                    Gets the type of object submitted as a batch to the data service.
                </summary>
      <returns>
                    Type object.
                </returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceRequest.RequestUri">
      <summary>
                    Gets the URI of the request object submitted to a data service.
                </summary>
      <returns>
                    URI of the request object.
                </returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceRequest.ToString">
      <summary>
                    Represents the URI of the query to the data service. 
                </summary>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceRequest`1">
      <summary>
                    Represents request objects submitted as a batch to the data service. For an example that uses <see cref="T:System.Data.Services.Client.DataServiceRequest`1" /> with a Silverlight client, see How to Create New Associations (ADO.NET Data Services/Silverlight).
                </summary>
      <typeparam name="TElement">
                    Represents the type of objects submitted to the data service.
                </typeparam>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceRequest`1.#ctor(System.Uri)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceRequest`1" /> class. 
                </summary>
      <param name="requestUri">
                    The URI object that contains the request string.
                </param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceRequest`1.ElementType">
      <summary>
                    Gets the type of the object used to create the <see cref="T:System.Data.Services.Client.DataServiceRequest`1" /> instance.
                </summary>
      <returns>
                    A <see cref="System.Type" /> value that indicates the type of data returned.
                </returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceRequest`1.RequestUri">
      <summary>
                    Gets the URI object that contains the request string.
                </summary>
      <returns>
                    A <see cref="System.Uri" /> object that contains the request string.
                </returns>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceRequestException">
      <summary>
                    Represents the error thrown if the data service returns a response code less than 200 or greater than 299 or if the top-level element in the response is &lt;error&gt;. This class cannot be inherited.
                </summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceRequestException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceRequestException" /> class by using a system-supplied message that describes the error. 
                </summary>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceRequestException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceRequestException" /> class by using a specified message that describes the error. 
                </summary>
      <param name="message">
                    The message that describes the exception. The caller of this constructor is required to ensure that this string was localized for the current system culture.
                
                    The error message text.
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceRequestException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceRequestException" /> class by using a specified error message and a reference to the inner exception that is the cause of this exception. 
                </summary>
      <param name="message">
                    The message that describes the exception. The caller of this constructor is required to ensure that this string was localized for the current system culture. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceRequestException.#ctor(System.String,System.Exception,System.Data.Services.Client.DataServiceResponse)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Data.Services.Client.DataServiceRequestException" /> class. 
                </summary>
      <param name="message">
                    Error message text.
                </param>
      <param name="innerException">
                    Exception object that contains the inner exception.
                </param>
      <param name="response">
        <see cref="T:System.Data.Services.Client.DataServiceResponse" /> object.
                </param>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceRequestException.Response">
      <summary>
                    Gets the response as a <see cref="T:System.Data.Services.Client.DataServiceResponse" /> object.
                </summary>
      <returns>
                    A <see cref="T:System.Data.Services.Client.DataServiceResponse" /> object.
                </returns>
    </member>
    <member name="T:System.Data.Services.Client.DataServiceResponse">
      <summary>
                    Represents the response to operations that were sent to the data service by calling <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" />.
                </summary>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceResponse.BatchHeaders">
      <summary>
                    The headers from an HTTP response associated with a batch request.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IDictionary" /> object that contains the name-value pairs of an HTTP response.
                </returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceResponse.BatchStatusCode">
      <summary>
                    The status code from an HTTP response associated with a batch request.
                </summary>
      <returns>
                    An integer based on status codes defined in Hypertext Transfer Protocol.
                </returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceResponse.GetEnumerator">
      <summary>
                    Gets an enumerator that enables retrieval of responses to operations being tracked by <see cref="T:System.Data.Services.Client.OperationResponse" /> objects within the <see cref="T:System.Data.Services.Client.DataServiceResponse" />.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> object.
                </returns>
    </member>
    <member name="P:System.Data.Services.Client.DataServiceResponse.IsBatchResponse">
      <summary>
                    Gets a Boolean value that indicates whether the response contains multiple results.
                </summary>
      <returns>
                    A Boolean value that indicates whether the response contains multiple results.
                </returns>
    </member>
    <member name="M:System.Data.Services.Client.DataServiceResponse.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Gets an enumerator that enables retrieval of responses to operations being tracked by <see cref="T:System.Data.Services.Client.OperationResponse" /> objects within the <see cref="T:System.Data.Services.Client.DataServiceResponse" />.
                </summary>
    </member>
    <member name="T:System.Data.Services.Client.Descriptor">
      <summary>
                    Abstract class from which <see cref="T:System.Data.Services.Client.EntityDescriptor" /> is derived.
                </summary>
    </member>
    <member name="P:System.Data.Services.Client.Descriptor.State">
      <summary>
                    When overridden in a derived class, gets the state of the object at the time this instance was constructed.
                </summary>
      <returns>
                    The <see cref="T:System.Data.Services.Client.EntityStates" /> of the object returned at the time this instance was constructed. 
                </returns>
    </member>
    <member name="T:System.Data.Services.Client.EntityDescriptor">
      <summary>
                    Description of modifications done to entities by operations returned in a <see cref="T:System.Data.Services.Client.DataServiceResponse" />.
                </summary>
    </member>
    <member name="P:System.Data.Services.Client.EntityDescriptor.Entity">
      <summary>
                    Gets the entity that contains the update data.
                </summary>
      <returns>
                    An object that contains update data.
                </returns>
    </member>
    <member name="P:System.Data.Services.Client.EntityDescriptor.ETag">
      <summary>
                    Gets an eTag value that indicates the state of data targeted for update since the last call to <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" />.
                </summary>
      <returns>
                    A string value that indicates the state of data.
                </returns>
    </member>
    <member name="T:System.Data.Services.Client.EntityStates">
      <summary>
                    Represents the enumeration that identifies the state of an entity being tracked by the <see cref="T:System.Data.Services.Client.DataServiceContext" />. 
                </summary>
    </member>
    <member name="F:System.Data.Services.Client.EntityStates.Detached">
      <summary>
                    The entity was detached since the last call to <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" />.
                </summary>
    </member>
    <member name="F:System.Data.Services.Client.EntityStates.Unchanged">
      <summary>
                    The entity is unchanged since the last call to <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" />.
                </summary>
    </member>
    <member name="F:System.Data.Services.Client.EntityStates.Added">
      <summary>
                    The entity was added since the last call to <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" />.
                </summary>
    </member>
    <member name="F:System.Data.Services.Client.EntityStates.Deleted">
      <summary>
                    The entity was deleted since the last call to <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" />.
                </summary>
    </member>
    <member name="F:System.Data.Services.Client.EntityStates.Modified">
      <summary>
                    The entity was modified since the last call to <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" />.
                </summary>
    </member>
    <member name="T:System.Data.Services.Client.LinkDescriptor">
      <summary>
                    Provides a description of modifications done to entities by operations returned in a <see cref="T:System.Data.Services.Client.DataServiceResponse" />.
                </summary>
    </member>
    <member name="P:System.Data.Services.Client.LinkDescriptor.Source">
      <summary>
                    A source entity in a link returned by a <see cref="T:System.Data.Services.Client.DataServiceResponse" />.
                </summary>
      <returns>
        <see cref="T:System.Object" />.
                </returns>
    </member>
    <member name="P:System.Data.Services.Client.LinkDescriptor.SourceProperty">
      <summary>
                    The identifier property of the source entity in a link returned by a <see cref="T:System.Data.Services.Client.DataServiceResponse" />.
                </summary>
      <returns>
                    The string identifier of an identity property in a source entity.
                </returns>
    </member>
    <member name="P:System.Data.Services.Client.LinkDescriptor.Target">
      <summary>
                    The source entity in a link returned by a <see cref="T:System.Data.Services.Client.DataServiceResponse" />.
                </summary>
      <returns>
        <see cref="T:System.Object" />.
                </returns>
    </member>
    <member name="T:System.Data.Services.Client.MediaEntryAttribute">
      <summary>
                    Signifies that the specified class is to be treated as a media link entry.
                </summary>
    </member>
    <member name="M:System.Data.Services.Client.MediaEntryAttribute.#ctor(System.String)">
      <summary>
                    Creates a new instance of <see cref="T:System.Data.Services.Client.MediaEntryAttribute" />.
                </summary>
      <param name="mediaMemberName">
                    A string value that identifies the property that holds media data.
                </param>
    </member>
    <member name="P:System.Data.Services.Client.MediaEntryAttribute.MediaMemberName">
      <summary>
                    The name of the property on the class that holds the media, usually binary data.
                </summary>
      <returns>
                    A string value that identifies the property that holds media data.
                </returns>
    </member>
    <member name="T:System.Data.Services.Client.MergeOption">
      <summary>
                    Determines the synchronization option for sending or receiving entities to or from a data service. 
                </summary>
    </member>
    <member name="F:System.Data.Services.Client.MergeOption.AppendOnly">
      <summary>
                    Append new entities only. Existing entities or their original values will not be modified. No client-side changes are lost in this merge. This is the default behavior.
                </summary>
    </member>
    <member name="F:System.Data.Services.Client.MergeOption.OverwriteChanges">
      <summary>
                    All current values on the client are overwritten with current values from the data service regardless of whether they have been changed on the client. 
                </summary>
    </member>
    <member name="F:System.Data.Services.Client.MergeOption.PreserveChanges">
      <summary>
                    Current values that have been changed on the client are not modified, but any unchanged values are updated with current values from the data service. No client-side changes are lost in this merge.
                </summary>
    </member>
    <member name="F:System.Data.Services.Client.MergeOption.NoTracking">
      <summary>
                    Objects are always loaded from the data source. Any property changes made to objects in the object context are overwritten by the data source values.
                </summary>
    </member>
    <member name="T:System.Data.Services.Client.MimeTypePropertyAttribute">
      <summary>
                    Annotates a property on a class that was annotated with the <see cref="T:System.Data.Services.Client.MediaEntryAttribute" />.
                </summary>
    </member>
    <member name="M:System.Data.Services.Client.MimeTypePropertyAttribute.#ctor(System.String,System.String)">
      <summary>
                    Creates a new instance of the MimeTypePropertyAttribute.
                </summary>
      <param name="dataPropertyName">
                    A string that contains the name of the new property attribute.
                </param>
      <param name="mimeTypePropertyName">
                    A string that contains the Mime type of the new property attribute.
                </param>
    </member>
    <member name="P:System.Data.Services.Client.MimeTypePropertyAttribute.DataPropertyName">
      <summary>
                    Gets the name of the MimeTypePropertyAttribute.
                </summary>
      <returns>
                    A string that contains the name of the property attribute. 
                </returns>
    </member>
    <member name="P:System.Data.Services.Client.MimeTypePropertyAttribute.MimeTypePropertyName">
      <summary>
                    Gets the Mime type of the MimeTypePropertyAttribute</summary>
      <returns>
                    A string that contains the Mime type of the property attribute.
                </returns>
    </member>
    <member name="T:System.Data.Services.Client.OperationResponse">
      <summary>
                    Abstract class that represents the response of a single query or create, update, or delete operation. 
                </summary>
    </member>
    <member name="P:System.Data.Services.Client.OperationResponse.Error">
      <summary>
                    Gets error thrown by the operation.
                </summary>
      <returns>
                    An <see cref="T:System.Exception" /> object that contains the error.
                </returns>
    </member>
    <member name="P:System.Data.Services.Client.OperationResponse.Headers">
      <summary>
                    When overridden in a derived class, contains the HTTP response headers associated with a single operation.
                </summary>
      <returns>
        <see cref="T:System.Collections.IDictionary" /> object that contains name value pairs of headers and values.
                </returns>
    </member>
    <member name="P:System.Data.Services.Client.OperationResponse.StatusCode">
      <summary>
                    When overridden in a derived class, gets or sets the HTTP response code associated with a single operation.
                </summary>
      <returns>
                    Integer value that contains response code.
                </returns>
    </member>
    <member name="T:System.Data.Services.Client.QueryOperationResponse">
      <summary>
                    Represents the responses to a <see cref="T:System.Data.Services.Client.DataServiceQuery" />.
                </summary>
    </member>
    <member name="M:System.Data.Services.Client.QueryOperationResponse.GetEnumerator">
      <summary>
                    Executes the <see cref="T:System.Data.Services.Client.DataServiceQuery" /> and gets <see cref="T:System.Data.Services.Client.QueryOperationResponse" /> items. 
                </summary>
      <returns>
                    The enumerator to a collection of <see cref="T:System.Data.Services.Client.QueryOperationResponse" /> items.
                </returns>
    </member>
    <member name="P:System.Data.Services.Client.QueryOperationResponse.Query">
      <summary>
                    Gets the <see cref="T:System.Data.Services.Client.DataServiceQuery" /> that generates the <see cref="T:System.Data.Services.Client.QueryOperationResponse" /> items. 
                </summary>
      <returns>
                    A <see cref="T:System.Data.Services.Client.DataServiceQuery" /> object.
                </returns>
    </member>
    <member name="T:System.Data.Services.Client.QueryOperationResponse`1">
      <summary>
                    Represents the responses to a <see cref="T:System.Data.Services.Client.DataServiceQuery`1" />.
                </summary>
      <typeparam name="T">
                    The type of the response.
                </typeparam>
    </member>
    <member name="M:System.Data.Services.Client.QueryOperationResponse`1.GetEnumerator">
      <summary>
                    Executes the <see cref="T:System.Data.Services.Client.DataServiceQuery`1" /> and gets <see cref="T:System.Data.Services.Client.QueryOperationResponse`1" /> items.
                </summary>
      <returns>
                    An enumerator to a collection of <see cref="T:System.Data.Services.Client.QueryOperationResponse`1" /> items.
                </returns>
    </member>
    <member name="T:System.Data.Services.Client.ReadingWritingEntityEventArgs">
      <summary>
                    Gives access to the entity and an XLinq object that represents an Atom entry. <see cref="T:System.Data.Services.Client.ReadingWritingEntityEventArgs" /> is used with the <see cref="E:System.Data.Services.Client.DataServiceContext.ReadingEntity" /> and <see cref="E:System.Data.Services.Client.DataServiceContext.WritingEntity" /> events. 
                </summary>
    </member>
    <member name="P:System.Data.Services.Client.ReadingWritingEntityEventArgs.Data">
      <summary>
                    Gets an XML Atom entry or feed data represented as <see cref="T:System.Xml.Linq.XElement" />.
                </summary>
      <returns>
        <see cref="T:System.Xml.Linq.XElement" />
      </returns>
    </member>
    <member name="P:System.Data.Services.Client.ReadingWritingEntityEventArgs.Entity">
      <summary>
                    Gets the object representation of data returned from the <see cref="P:System.Data.Services.Client.ReadingWritingEntityEventArgs.Data" /> property. 
                </summary>
      <returns>
        <see cref="T:System.Object" /> representation of <see cref="P:System.Data.Services.Client.ReadingWritingEntityEventArgs.Data" /> property.
                </returns>
    </member>
    <member name="T:System.Data.Services.Client.SaveChangesOptions">
      <summary>
                    Indicates Change options when <see cref="M:System.Data.Services.Client.DataServiceContext.SaveChanges" /> is called. 
                </summary>
    </member>
    <member name="F:System.Data.Services.Client.SaveChangesOptions.None">
      <summary>
                    See Remarks.
                </summary>
    </member>
    <member name="F:System.Data.Services.Client.SaveChangesOptions.Batch">
      <summary>
                    See Remarks.
                </summary>
    </member>
    <member name="F:System.Data.Services.Client.SaveChangesOptions.ContinueOnError">
      <summary>
                    See Remarks.
                </summary>
    </member>
    <member name="F:System.Data.Services.Client.SaveChangesOptions.ReplaceOnUpdate">
      <summary>
                    See Remarks.
                </summary>
    </member>
    <member name="T:System.Data.Services.Client.SendingRequestEventArgs">
      <summary>
                    Used with the <see cref="E:System.Data.Services.Client.DataServiceContext.SendingRequest" /> event to provide access to the <see cref="T:System.Net.HttpWebRequest" /> instance that the client is about to send to the target data service.
                </summary>
    </member>
    <member name="P:System.Data.Services.Client.SendingRequestEventArgs.RequestHeaders">
      <summary>
                    Represents the text of the headers of the <see cref="T:System.Net.HttpWebRequest" /> instance that the client is about to send to the target data service.
                </summary>
      <returns>
                    A string value that contains the headers.
                </returns>
    </member>
    <member name="T:System.Data.Services.Common.DataServiceKeyAttribute">
      <summary>
                    Indicates the key property or properties of an entity.
                </summary>
    </member>
    <member name="M:System.Data.Services.Common.DataServiceKeyAttribute.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Data.Services.Common.DataServiceKeyAttribute" /> class. 
                </summary>
      <param name="keyName">
                    The string that contains the name of the key attribute.
                </param>
    </member>
    <member name="M:System.Data.Services.Common.DataServiceKeyAttribute.#ctor(System.String[])">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Data.Services.Common.DataServiceKeyAttribute" /> class. 
                </summary>
      <param name="keyNames">
                    An array of string values that contain key attribute names.
                </param>
    </member>
    <member name="P:System.Data.Services.Common.DataServiceKeyAttribute.KeyNames">
      <summary>
                    Gets the names of the key attributes.
                </summary>
      <returns>
                    String value that contains names of key attributes.
                </returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\2.0.31005.0\Libraries\Server\en-US\System.Web.Silverlight.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Web.Silverlight</name>
  </assembly>
  <members>
    <member name="T:System.Web.UI.Design.SilverlightControls.CollectionEditorBase">
      <summary>
                    Provides a utility class for Visual Studio property window behavior when editing media chapters.
                </summary>
    </member>
    <member name="M:System.Web.UI.Design.SilverlightControls.CollectionEditorBase.#ctor(System.Type)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Web.UI.Design.SilverlightControls.CollectionEditorBase" /> class by using the specified collection type.
                </summary>
      <param name="type">
                    The type of the collection to be edited.
                </param>
    </member>
    <member name="M:System.Web.UI.Design.SilverlightControls.CollectionEditorBase.CreateCollectionForm">
      <summary>
                    Creates a new form to display and edit the current collection.
                </summary>
      <returns>
                    The object to provide as the user interface for editing the collection.
                </returns>
    </member>
    <member name="T:System.Web.UI.Design.SilverlightControls.ImageSourceEditor">
      <summary>
                    Provides a user interface for selecting a URL that references an image that is supported by Silverlight.
                </summary>
    </member>
    <member name="M:System.Web.UI.Design.SilverlightControls.ImageSourceEditor.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Web.UI.Design.SilverlightControls.ImageSourceEditor" /> class.
                </summary>
    </member>
    <member name="P:System.Web.UI.Design.SilverlightControls.ImageSourceEditor.Filter">
      <summary>
                    Gets the file-name filter string for the editor. This string is used to determine the items that appear in the file list of the dialog box.
                </summary>
      <returns>
                    The filter string that can be used to filter the file list of the dialog box.
                </returns>
    </member>
    <member name="T:System.Web.UI.Design.SilverlightControls.MediaDefinitionEditor">
      <summary>
                    Provides a user interface for selecting a URL that references a media definition file.
                </summary>
    </member>
    <member name="M:System.Web.UI.Design.SilverlightControls.MediaDefinitionEditor.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Web.UI.Design.SilverlightControls.MediaDefinitionEditor" /> class.
                </summary>
    </member>
    <member name="P:System.Web.UI.Design.SilverlightControls.MediaDefinitionEditor.Filter">
      <summary>
                    Gets the file name filter string for the editor. This string is used to determine the items that appear in the file list of the dialog box.
                </summary>
      <returns>
                    The filter string that can be used to filter the file list of the dialog box.
                </returns>
    </member>
    <member name="T:System.Web.UI.Design.SilverlightControls.MediaPlayerDesigner">
      <summary>
                    Provides design-time support in a visual designer for the ASP.NET <see cref="T:System.Web.UI.SilverlightControls.MediaPlayer" /> server control.
                </summary>
    </member>
    <member name="M:System.Web.UI.Design.SilverlightControls.MediaPlayerDesigner.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Web.UI.Design.SilverlightControls.MediaPlayerDesigner" /> class.
                </summary>
    </member>
    <member name="P:System.Web.UI.Design.SilverlightControls.MediaPlayerDesigner.ActionLists">
      <summary>
                    Gets the action-list collection for the control designer.
                </summary>
      <returns>
                    The <see cref="T:System.ComponentModel.Design.DesignerActionList" /> items for the control designer.
                </returns>
    </member>
    <member name="P:System.Web.UI.Design.SilverlightControls.MediaPlayerDesigner.Control">
      <summary>
                    Gets the <see cref="T:System.Web.UI.SilverlightControls.MediaPlayer" /> control that is associated with the control designer.
                </summary>
      <returns>
                    The <see cref="T:System.Web.UI.SilverlightControls.MediaPlayer" /> control that is associated with the control designer.
                </returns>
    </member>
    <member name="M:System.Web.UI.Design.SilverlightControls.MediaPlayerDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>
                    Initializes the control designer and loads the specified component.
                </summary>
      <param name="component">
                    The <see cref="T:System.Web.UI.SilverlightControls.MediaPlayer" /> control that is being designed.
                </param>
    </member>
    <member name="T:System.Web.UI.Design.SilverlightControls.MediaSourceEditor">
      <summary>
                    Provides a user interface for selecting a URL that references a media file.
                </summary>
    </member>
    <member name="M:System.Web.UI.Design.SilverlightControls.MediaSourceEditor.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Web.UI.Design.SilverlightControls.MediaSourceEditor" /> class.
                </summary>
    </member>
    <member name="P:System.Web.UI.Design.SilverlightControls.MediaSourceEditor.Filter">
      <summary>
                    Gets the file-name filter string for the editor. This string is used to specify the items that appear in the file list of the dialog box.
                </summary>
      <returns>
                    The filter string that can be used to filter the file list of the dialog box.
                </returns>
    </member>
    <member name="T:System.Web.UI.Design.SilverlightControls.SilverlightDesigner">
      <summary>
                    Provides design-time support in a visual designer for the ASP.NET <see cref="T:System.Web.UI.SilverlightControls.Silverlight" /> server control.
                </summary>
    </member>
    <member name="M:System.Web.UI.Design.SilverlightControls.SilverlightDesigner.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Web.UI.Design.SilverlightControls.SilverlightDesigner" /> class.
                </summary>
    </member>
    <member name="P:System.Web.UI.Design.SilverlightControls.SilverlightDesigner.Control">
      <summary>
                    Gets the <see cref="T:System.Web.UI.SilverlightControls.Silverlight" /> control that is associated with the control designer.
                </summary>
      <returns>
                    The <see cref="T:System.Web.UI.SilverlightControls.Silverlight" /> control that is associated with the control designer.
                </returns>
    </member>
    <member name="M:System.Web.UI.Design.SilverlightControls.SilverlightDesigner.GetDesignTimeHtml">
      <summary>
                    Gets the markup that is used to render the associated <see cref="T:System.Web.UI.SilverlightControls.Silverlight" /> control at design time.
                </summary>
      <returns>
                    The markup that is used to render the <see cref="T:System.Web.UI.SilverlightControls.Silverlight" /> at design time.
                </returns>
    </member>
    <member name="M:System.Web.UI.Design.SilverlightControls.SilverlightDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary>
                    Initializes the control designer and loads the specified component.
                </summary>
      <param name="component">
                    The <see cref="T:System.Web.UI.SilverlightControls.Silverlight" /> control that is being designed.
                </param>
    </member>
    <member name="T:System.Web.UI.Design.SilverlightControls.SourceEditor">
      <summary>
                    Provides a user interface for selecting a URL that references a Silverlight application.
                </summary>
    </member>
    <member name="M:System.Web.UI.Design.SilverlightControls.SourceEditor.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Web.UI.Design.SilverlightControls.SourceEditor" /> class.
                </summary>
    </member>
    <member name="P:System.Web.UI.Design.SilverlightControls.SourceEditor.Filter">
      <summary>
                    Gets the file name filter string for the editor. This string is used to determine the items that appear in the file list of the dialog box.
                </summary>
      <returns>
                    The filter string that can be used to filter the file list of the dialog box.
                </returns>
    </member>
    <member name="T:System.Web.UI.Design.SilverlightControls.SplashSourceEditor">
      <summary>
                    Provides a user interface for selecting a URL that references an image.
                </summary>
    </member>
    <member name="M:System.Web.UI.Design.SilverlightControls.SplashSourceEditor.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Web.UI.Design.SilverlightControls.SplashSourceEditor" /> class.
                </summary>
    </member>
    <member name="P:System.Web.UI.Design.SilverlightControls.SplashSourceEditor.Filter">
      <summary>
                    Gets the file-name filter string for the editor. This string is used to determine the items that appear in the file list of the dialog box.
                </summary>
      <returns>
                    The filter string that can be used to filter the file list of the dialog box.
                </returns>
    </member>
    <member name="T:System.Web.UI.Design.SilverlightControls.VolumeEditor">
      <summary>
                    Provides a user interface to edit the volume value of a media file played by the <see cref="T:System.Web.UI.SilverlightControls.MediaPlayer" /> control.
                </summary>
    </member>
    <member name="M:System.Web.UI.Design.SilverlightControls.VolumeEditor.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Web.UI.Design.SilverlightControls.VolumeEditor" /> class.
                </summary>
    </member>
    <member name="M:System.Web.UI.Design.SilverlightControls.VolumeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
                    Edits the value of the specified object by using the editor style indicated by the <see cref="M:System.Web.UI.Design.SilverlightControls.VolumeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" /> method of the <see cref="T:System.Web.UI.Design.SilverlightControls.VolumeEditor" /> object.
                </summary>
      <returns>
                    The new value of the object. If the value of the object has not changed, this will return the same object it was passed.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object that can be used to gain additional context information.
                </param>
      <param name="provider">
                    An <see cref="T:System.IServiceProvider" /> object that this editor can use to obtain services.
                </param>
      <param name="value">
                    The object to edit.
                </param>
    </member>
    <member name="M:System.Web.UI.Design.SilverlightControls.VolumeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
                    Gets the editor style that is used by the <see cref="M:System.Web.UI.Design.SilverlightControls.VolumeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> method of the <see cref="T:System.Web.UI.Design.SilverlightControls.VolumeEditor" /> object.
                </summary>
      <returns>
                    A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> object that indicates the style of editor that is used by the <see cref="M:System.Web.UI.Design.SilverlightControls.VolumeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> method of the <see cref="T:System.Web.UI.Design.SilverlightControls.VolumeEditor" /> object.
                </returns>
      <param name="context">
                    An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> object that can be used to gain additional context information.
                </param>
    </member>
    <member name="T:System.Web.UI.SilverlightControls.HtmlAccess">
      <summary>
                    Specifies how the Silverlight-based application has access to the HTML document object model (DOM) on a page.
                </summary>
    </member>
    <member name="F:System.Web.UI.SilverlightControls.HtmlAccess.SameDomain">
      <summary>
                    Specifies that HTML DOM access is allowed for same-domain applications but not for cross-domain applications.
                </summary>
    </member>
    <member name="F:System.Web.UI.SilverlightControls.HtmlAccess.Disabled">
      <summary>
                    Specifies that HTML DOM access is not allowed.
                </summary>
    </member>
    <member name="F:System.Web.UI.SilverlightControls.HtmlAccess.Enabled">
      <summary>
                    Specifies that HTML DOM access is allowed.
                </summary>
    </member>
    <member name="T:System.Web.UI.SilverlightControls.MediaChapter">
      <summary>
                    Represents the position of a chapter in a media source.
                </summary>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapter.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> class.
                </summary>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaChapter.IsTrackingViewState">
      <summary>
                    Gets a value that indicates whether the <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object is tracking its view-state changes.
                </summary>
      <returns>true if the <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> control is marked to save its state; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapter.LoadViewState(System.Object)">
      <summary>
                    Restores view-state information from a previous page request that was saved by the <see cref="M:System.Web.UI.SilverlightControls.MediaChapter.SaveViewState" /> method.
                </summary>
      <param name="state">
                    An object that represents the state to be restored.
                </param>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaChapter.Position">
      <summary>
                    Gets or sets the position of the chapter in seconds.
                </summary>
      <returns>
                    The time in seconds in the media source where the chapter begins.
                </returns>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapter.SaveViewState">
      <summary>
                    Saves any changes to the <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> control's view-state that have occurred since the time the page was posted back to the server.
                </summary>
      <returns>
                    The <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> control's current view state.
                </returns>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapter.SetDirty">
      <summary>
                    Used to track changed information.
                </summary>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaChapter.System#Web#UI#IStateManager#IsTrackingViewState"></member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapter.System#Web#UI#IStateManager#LoadViewState(System.Object)"></member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapter.System#Web#UI#IStateManager#SaveViewState"></member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapter.System#Web#UI#IStateManager#TrackViewState"></member>
    <member name="P:System.Web.UI.SilverlightControls.MediaChapter.ThumbnailSource">
      <summary>
                    Gets or sets the path of the source file for the thumbnail that represents the chapter.
                </summary>
      <returns>
                    The location of the thumbnail.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaChapter.Title">
      <summary>
                    Gets or sets the title of the chapter.
                </summary>
      <returns>
                    The title of the chapter. 
                </returns>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapter.ToString">
      <summary>
                    Returns a string that represents the current <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object.
                </summary>
      <returns>
                    The <see cref="P:System.Web.UI.SilverlightControls.MediaChapter.Title" /> value of the <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object, if it is not null or an empty string (""); otherwise, the type of the object ("System.Web.UI.SilverlightControls.MediaChapter").
                </returns>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapter.TrackViewState">
      <summary>
                    Tracks view-state changes to the <see cref="T:System.Web.UI.StateBag" /> object for the <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> control.
                </summary>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaChapter.ViewState">
      <summary>
                    Gets a dictionary of state information that enables you to save and restore the view state of a <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> across multiple requests for the same page.
                </summary>
      <returns>
                    An instance of the <see cref="T:System.Web.UI.StateBag" /> class that contains the <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> view-state information.
                </returns>
    </member>
    <member name="T:System.Web.UI.SilverlightControls.MediaChapterCollection">
      <summary>
                    Represents a collection of <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> objects.
                </summary>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapterCollection.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Web.UI.SilverlightControls.MediaChapterCollection" /> class.
                </summary>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapterCollection.Add(System.Web.UI.SilverlightControls.MediaChapter)">
      <summary>
                    Adds a <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object to the end of the collection.
                </summary>
      <returns>
                    The position at which the object was inserted.
                </returns>
      <param name="mediaChapter">
                    The <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object to add.
                </param>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapterCollection.Contains(System.Web.UI.SilverlightControls.MediaChapter)">
      <summary>
                    Determines whether the <see cref="T:System.Web.UI.SilverlightControls.MediaChapterCollection" /> instance contains a specific <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object.
                </summary>
      <returns>true if the <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object is found; otherwise, false.
                </returns>
      <param name="chapter">
                    The <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object to locate in the collection.
                </param>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapterCollection.CopyTo(System.Web.UI.SilverlightControls.MediaChapter[],System.Int32)">
      <param name="array">
                    The one-dimensional array to copy to. The array must have zero-based indexing.
                </param>
      <param name="index">
                    The zero-based index in the array at which copying begins.
                </param>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapterCollection.CreateKnownType(System.Int32)">
      <param name="index">
                    The index of the type to create from the ordered list of types returned by <see cref="M:System.Web.UI.SilverlightControls.MediaChapterCollection.GetKnownTypes" />.
                </param>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapterCollection.GetKnownTypes">
      <summary>
                    Gets an array of types that the <see cref="T:System.Web.UI.SilverlightControls.MediaChapterCollection" /> can contain.
                </summary>
      <returns>
                    An ordered array of Type objects that identify the types of objects the collection can contain.
                </returns>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapterCollection.IndexOf(System.Web.UI.SilverlightControls.MediaChapter)">
      <summary>
                    Determines the index of a specific <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object in the <see cref="T:System.Web.UI.SilverlightControls.MediaChapterCollection" /> instance.
                </summary>
      <returns>
                    The index of the <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" />, if found; otherwise, -1.
                </returns>
      <param name="chapter">
                    The <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object to locate.
                </param>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapterCollection.Insert(System.Int32,System.Web.UI.SilverlightControls.MediaChapter)">
      <summary>
                    Inserts a <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object into the <see cref="T:System.Web.UI.SilverlightControls.MediaChapterCollection" /> instance at the specified index
                </summary>
      <param name="index">
                    The <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object to insert.
                </param>
      <param name="mediaChapter">
                    The zero-based index at which to insert the <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object.
                </param>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaChapterCollection.Item(System.Int32)">
      <summary>
                    Returns the <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object at a given index position.
                </summary>
      <returns>
                    The <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object at the specified index.
                </returns>
      <param name="index">
                    The index position of the <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object to return.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.
                
                    -or-
                <paramref name="index" /> is equal to or greater than Count.
                </exception>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapterCollection.OnValidate(System.Object)">
      <param name="value">
                    The object to validate.
                </param>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapterCollection.Remove(System.Web.UI.SilverlightControls.MediaChapter)">
      <summary>
                    Removes the first occurrence of a specific <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object from the <see cref="T:System.Web.UI.SilverlightControls.MediaChapterCollection" /> instance.
                </summary>
      <param name="mediaChapter">
                    The <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object to remove.
                </param>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapterCollection.RemoveAt(System.Int32)">
      <summary>
                    Removes the <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object at the specified index from the <see cref="T:System.Web.UI.SilverlightControls.MediaChapterCollection" /> instance.
                </summary>
      <param name="index">
                    The zero-based index of the <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object to remove.
                </param>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapterCollection.SetDirtyObject(System.Object)">
      <summary>
                    Instructs a <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> contained by the <see cref="T:System.Web.UI.SilverlightControls.MediaChapterCollection" /> to record its entire state to view state, rather than recording only changed information.
                </summary>
      <param name="o">
                    A <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object.
                </param>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapterCollection.System#Collections#Generic#ICollection{T}#Add(System.Web.UI.SilverlightControls.MediaChapter)">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)" />.
                </summary>
      <param name="item">
                    The <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object to add.
                </param>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapterCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Clear" />.
                </summary>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapterCollection.System#Collections#Generic#ICollection{T}#Contains(System.Web.UI.SilverlightControls.MediaChapter)">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)" />.
                </summary>
      <returns>true if <paramref name="item" /> is found in the <see cref="T:System.Web.UI.SilverlightControls.MediaChapterCollection" /> object; otherwise, false.
                </returns>
      <param name="item">
                    The <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object to locate in the <see cref="T:System.Web.UI.SilverlightControls.MediaChapterCollection" /> instance.
                </param>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapterCollection.System#Collections#Generic#ICollection{T}#CopyTo(System.Web.UI.SilverlightControls.MediaChapter[],System.Int32)">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.
                </summary>
      <param name="array">
                    The one-dimensional array to copy to. The array must have zero-based indexing.
                </param>
      <param name="arrayIndex">
                    The zero-based index in the array at which copying begins.
                </param>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaChapterCollection.System#Collections#Generic#ICollection{T}#Count">
      <summary>
                    For a description of this member, see <see cref="P:System.Collections.Generic.ICollection`1.Count" />.
                </summary>
      <returns>
                    The number of elements contained in the <see cref="T:System.Web.UI.SilverlightControls.MediaChapterCollection" />.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaChapterCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>
                    For a description of this member, see <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.
                </summary>
      <returns>true if the <see cref="T:System.Web.UI.SilverlightControls.MediaChapterCollection" /> is read-only; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapterCollection.System#Collections#Generic#ICollection{T}#Remove(System.Web.UI.SilverlightControls.MediaChapter)">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)" />.
                </summary>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" /> object; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" /> object.
                </returns>
      <param name="item">
                    The <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object to remove.
                </param>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapterCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.
                </summary>
      <returns>
                    An enumerator that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapterCollection.System#Collections#Generic#IList{T}#IndexOf(System.Web.UI.SilverlightControls.MediaChapter)">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.Generic.IList`1.IndexOf(`0)" />.
                </summary>
      <returns>
                    The zero-based index of the first occurrence of <paramref name="item" /> within the entire <see cref="T:System.Collections.Generic.List`1" />, if found; otherwise, –1.
                </returns>
      <param name="item">
                    The <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object to locate.
                </param>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapterCollection.System#Collections#Generic#IList{T}#Insert(System.Int32,System.Web.UI.SilverlightControls.MediaChapter)">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)" />.
                </summary>
      <param name="index">
                    The zero-based index at which <paramref name="item" /> should be inserted.
                </param>
      <param name="item">
                    The <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object to insert.
                </param>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaChapterCollection.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>
                    For a description of this member, see <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)" />.
                </summary>
      <returns>
                    The element at the specified index.
                </returns>
      <param name="index">
                    The index position of the <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object to return.
                </param>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaChapterCollection.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)" />.
                </summary>
      <param name="index">
                    The zero-based index of the <see cref="T:System.Web.UI.SilverlightControls.MediaChapter" /> object to remove.
                </param>
    </member>
    <member name="T:System.Web.UI.SilverlightControls.MediaPlayer">
      <summary>
                    Provides a player that runs media (video or audio) using Silverlight in an ASP.NET Web page. 
                </summary>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaPlayer.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Web.UI.SilverlightControls.MediaPlayer" /> class.
                </summary>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaPlayer.AutoLoad">
      <summary>
                    Gets or sets a value that indicates whether the media file is automatically loaded when the <see cref="T:System.Web.UI.SilverlightControls.MediaPlayer" /> control is rendered.
                </summary>
      <returns>true if the media file is loaded immediately; otherwise, false. The default is true.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaPlayer.AutoPlay">
      <summary>
                    Gets or sets a value that indicates whether the media file starts to play immediately after it is opened.
                </summary>
      <returns>true if the media file starts to play immediately after it is opened; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaPlayer.Chapters">
      <summary>
                    Gets the list of chapters in the media file.
                </summary>
      <returns>
                    The chapters in the media file.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaPlayer.DefaultScriptType">
      <summary>
                    Gets a reference to the client type that is created by default if the <see cref="P:System.Web.UI.SilverlightControls.Silverlight.ScriptType" /> property is not specified.
                </summary>
      <returns>
                    Always returns the string "Sys.UI.Silverlight.MediaPlayer".
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaPlayer.EnableCaptions">
      <summary>
                    Gets or sets a value that indicates whether to enable closed captioning.
                </summary>
      <returns>true if captions are displayed; otherwise, false. The default is true.
                </returns>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaPlayer.GetScriptDescriptors">
      <summary>
                    Retrieves properties from a <see cref="T:System.Web.UI.SilverlightControls.MediaPlayer" /> object that are passed to the Sys.UI.Silverlight.MediaPlayer client component that implements media player logic in the browser.
                </summary>
      <returns>
                    An array of type ScriptDescriptor.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="P:System.Web.UI.SilverlightControls.MediaPlayer.MediaDefinition" /> property specifies an invalid location to a media definition file.
                </exception>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaPlayer.GetScriptReferences">
      <summary>
                    Retrieves the client script for the Sys.UI.Silverlight.MediaPlayer client control.
                </summary>
      <returns>
                    An enumerator that contains client script for the Sys.UI.Silverlight.MediaPlayer client control.
                </returns>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaPlayer.LoadViewState(System.Object)">
      <summary>
                    Restores view-state information from a previous page request that was saved by the <see cref="M:System.Web.UI.SilverlightControls.MediaPlayer.SaveViewState" /> method.
                </summary>
      <param name="savedState">
                    An object that represents the <see cref="T:System.Web.UI.SilverlightControls.MediaPlayer" /> state to be restored.
                </param>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaPlayer.MediaDefinition">
      <summary>
                    Gets or sets the path of the media definition file.
                </summary>
      <returns>
                    A virtual path that represents the location of the media definition file in the current project.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaPlayer.MediaSkinSource">
      <summary>
                    Gets or sets a value that identifies the skin used for the <see cref="T:System.Web.UI.SilverlightControls.MediaPlayer" /> control.
                </summary>
      <returns>
                    The skin identifier.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaPlayer.MediaSource">
      <summary>
                    Gets or sets the media file for the <see cref="T:System.Web.UI.SilverlightControls.MediaPlayer" />.
                </summary>
      <returns>
                    A string that specifies the media for the <see cref="T:System.Web.UI.SilverlightControls.MediaPlayer" /> control.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaPlayer.Muted">
      <summary>
                    Gets or sets a value that indicates whether audio should be muted in the player by default.
                </summary>
      <returns>true if the audio is muted; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaPlayer.OnClientChapterSelected">
      <summary>
                    Gets or sets the name of the client JavaScript function (event handler) that is called when the Sys.UI.Silverlight.MediaPlayer.chapterSelected client event is raised.
                </summary>
      <returns>
                    The name of the JavaScript function that is called when a chapter is selected.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaPlayer.OnClientChapterStarted">
      <summary>
                    Gets or sets the name of the client JavaScript function (event handler) that is called when the Sys.UI.Silverlight.MediaPlayer.chapterStarted client event is raised.
                </summary>
      <returns>
                    The name of the JavaScript function that is called when a chapter starts.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaPlayer.OnClientCurrentStateChanged">
      <summary>
                    Gets or sets the name of the client JavaScript function (event handler) that is called when the Sys.UI.Silverlight.MediaPlayer.currentStateChanged client event is raised.
                </summary>
      <returns>
                    The name of the JavaScript function that is called when the state changes.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaPlayer.OnClientMarkerReached">
      <summary>
                    Gets or sets the name of the client JavaScript function (event handler) that is called when the Sys.UI.Silverlight.MediaPlayer.markerReached event occurs.
                </summary>
      <returns>
                    The name of the JavaScript function that is called when the player reaches a marker.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaPlayer.OnClientMediaEnded">
      <summary>
                    Gets or sets the name of the client JavaScript function (event handler) that is called when the Sys.UI.Silverlight.MediaPlayer.mediaEnded client event occurs.
                </summary>
      <returns>
                    The name of the JavaScript function that is called when the media source playback finishes.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaPlayer.OnClientMediaFailed">
      <summary>
                    Gets or sets the name of the client JavaScript function (event handler) that is called when the Sys.UI.Silverlight.MediaPlayer.mediaFailed client event is raised.
                </summary>
      <returns>
                    The name of the JavaScript function that is called when a failure occurs in the media source.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaPlayer.OnClientMediaOpened">
      <summary>
                    Gets or sets the name of the client JavaScript function (event handler) that is called when the Sys.UI.Silverlight.MediaPlayer.mediaOpened event occurs.
                </summary>
      <returns>
                    The name of the JavaScript function that is called when the media source opens.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaPlayer.OnClientVolumeChanged">
      <summary>
                    Gets or sets the name of the client JavaScript function (event handler) that is called when the volume is modified.
                </summary>
      <returns>
                    The name of the JavaScript function that is called when the player volume is changed.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaPlayer.PlaceholderSource">
      <summary>
                    Gets or sets a placeholder to display when the media file is being opened.
                </summary>
      <returns>
                    A virtual path to the placeholder in the current project.
                </returns>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaPlayer.SaveViewState">
      <summary>
                    Saves the view-state changes that have occurred since the time the page was posted back to the server.
                </summary>
      <returns>
                    The control's view state.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaPlayer.ScaleMode">
      <summary>
                    Gets or sets the display mode.
                </summary>
      <returns>
                    One of the enumeration values. A <see cref="T:System.Web.UI.SilverlightControls.ScaleMode" /> enumeration value. The default is <see cref="F:System.Web.UI.SilverlightControls.ScaleMode.Zoom" />.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaPlayer.Source">
      <summary>
                    Gets or sets the source file that is used as the media skin.
                </summary>
      <returns>
                    The XAML file that is used as the skin for the <see cref="T:System.Web.UI.SilverlightControls.MediaPlayer" /> control.
                </returns>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.MediaPlayer.TrackViewState">
      <summary>
                    Tracks view-state changes to the <see cref="T:System.Web.UI.StateBag" /> object for the <see cref="T:System.Web.UI.SilverlightControls.MediaPlayer" /> control.
                </summary>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.MediaPlayer.Volume">
      <summary>
                    Gets or sets the initial volume setting as a value between 0 and 1.
                </summary>
      <returns>
                    The initial setting for the volume of the Sys.UI.Silverlight.MediaPlayer client control in the Web page. The default value is .5.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The <see cref="P:System.Web.UI.SilverlightControls.MediaPlayer.Volume" /> property is set to a value that is less than 0 or greater than 1.
                </exception>
    </member>
    <member name="T:System.Web.UI.SilverlightControls.ScaleMode">
      <summary>
                    Specifies how the Silverlight source should be scaled to fit in the Silverlight host.
                </summary>
    </member>
    <member name="F:System.Web.UI.SilverlightControls.ScaleMode.None">
      <summary>
                    Specifies that no scaling is performed. 
                </summary>
    </member>
    <member name="F:System.Web.UI.SilverlightControls.ScaleMode.Zoom">
      <summary>
                    Specifies that scaling is performed to size the Silverlight content proportionally to fill the host area.
                </summary>
    </member>
    <member name="F:System.Web.UI.SilverlightControls.ScaleMode.Stretch">
      <summary>
                    Specifies that scaling is performed to fill the host area horizontally and vertically.
                </summary>
    </member>
    <member name="T:System.Web.UI.SilverlightControls.Silverlight">
      <summary>
                    Provides a way to integrate Microsoft Silverlight content in an ASP.NET Web page. 
                </summary>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.Silverlight.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Web.UI.SilverlightControls.Silverlight" /> class.
                </summary>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.Silverlight.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
      <summary>
                    Adds HTML attributes and styles to render by using the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> instance. This method is primarily used by control developers.
                </summary>
      <param name="writer">
                    An <see cref="T:System.Web.UI.HtmlTextWriter" /> instance that represents the output stream that is used to render HTML content to the client.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The specified <paramref name="writer" /> is not a valid <see cref="T:System.Web.UI.HtmlTextWriter" /></exception>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.Silverlight.AutoUpgrade">
      <summary>
                    Gets or sets a value indicating whether the Silverlight plug-in should automatically be upgraded.
                </summary>
      <returns>true if the Silverlight plug-in should automatically be upgraded; otherwise, false. The default value is true.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.Silverlight.DefaultScriptType">
      <summary>
                    Gets a reference to the client type that is created by default if the <see cref="P:System.Web.UI.SilverlightControls.Silverlight.ScriptType" /> property is not specified.
                </summary>
      <returns>
                    The string "Sys.UI.Silverlight.Control".
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.Silverlight.EnableFrameRateCounter">
      <summary>
                    Gets or sets a value that determines whether to display the current frame rate in the hosting browser's status bar.
                </summary>
      <returns>true if the frame rate is displayed; otherwise, false. The default value is false.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.Silverlight.EnableRedrawRegions">
      <summary>
                    Gets or sets a value that indicates whether to show the areas of the Silverlight plug-in that are being redrawn for each frame.
                </summary>
      <returns>true if the areas of the Silverlight plug-in that are being redrawn are shown; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.Silverlight.GetScriptDescriptors">
      <summary>
                    Retrieves properties from a <see cref="T:System.Web.UI.SilverlightControls.Silverlight" /> object that are passed to the client component in the browser.
                </summary>
      <returns>
                    An array that contains one ScriptControlDescriptor object.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The ScriptControlDescriptor is null or an empty string.
                </exception>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.Silverlight.GetScriptReferences">
      <summary>
                    Retrieves the client script for the <see cref="T:System.Web.UI.SilverlightControls.Silverlight" /> control.
                </summary>
      <returns>
                    A ScriptReference object that contains the client script for the <see cref="T:System.Web.UI.SilverlightControls.Silverlight" /> control.
                </returns>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.Silverlight.GetSilverlightParameters">
      <summary>
                    Provides values for Silverlight plug-in settings.
                </summary>
      <returns>
                    The Silverlight plug-in parameters.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.Silverlight.HtmlAccess">
      <summary>
                    Gets or sets whether to allow the Silverlight-based application to access the HTML page Document Object Model (DOM).
                </summary>
      <returns>
                    A value that indicates whether the Silverlight-based application can access the HTML DOM.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.Silverlight.InitParameters">
      <summary>
                    Gets or sets an optional set of user-defined initialization parameters.
                </summary>
      <returns>
                    The parameters.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.Silverlight.MaxFrameRate">
      <summary>
                    Gets or sets the maximum number of frames to render per second for the Silverlight document.
                </summary>
      <returns>
                    The maximum number of frames to render per second. 
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The <see cref="P:System.Web.UI.SilverlightControls.Silverlight.MaxFrameRate" /> property is set to a value that is less than 0.
                </exception>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.Silverlight.MinimumVersion">
      <summary>
                    Gets or sets the minimum Silverlight plug-in host version that is required for this Silverlight-based application.
                </summary>
      <returns>
                    The minimum Silverlight plug-in host version.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.Silverlight.OnPluginError">
      <summary>
                    Gets or sets the name of the client JavaScript function (event handler) that is called if a run-time error occurs with the Silverlight plug-in.
                </summary>
      <returns>
                    The name of the JavaScript function that is called if an error occurs in the Silverlight plug-in.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.Silverlight.OnPluginFullScreenChanged">
      <summary>
                    Gets or sets the name of the client JavaScript function (event handler) that is called when full-screen mode is toggled.
                </summary>
      <returns>
                    The name of the JavaScript function that is called when full-screen mode is toggled.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.Silverlight.OnPluginLoaded">
      <summary>
                    Gets or sets the name of the client JavaScript function (event handler) that is called when the Silverlight plug-in is loaded.
                </summary>
      <returns>
                    The name of the JavaScript function that is called when the Silverlight plug-in is loaded.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.Silverlight.OnPluginResized">
      <summary>
                    Gets or sets the name of the client JavaScript function (event handler) that is called when the Silverlight plug-in is resized.
                </summary>
      <returns>
                    The name of the JavaScript function that is called when the Silverlight plug-in is resized.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.Silverlight.OnPluginSourceDownloadComplete">
      <summary>
                    Gets or sets the name of the client JavaScript function (event handler) that is called when the plug-in source has been downloaded.
                </summary>
      <returns>
                    The name of the JavaScript function that is called when the plug-in source has been completely downloaded.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.Silverlight.OnPluginSourceDownloadProgressChanged">
      <summary>
                    Gets or sets the name of the client JavaScript function (event handler) that is called when the plug-in source download progress changes.
                </summary>
      <returns>
                    The name of the JavaScript function that is called when a change occurs in the progress of the plug-in source download.
                </returns>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.Silverlight.OnPreRender(System.EventArgs)">
      <summary>
                    Raises the WebControl.PreRender event.
                </summary>
      <param name="e">
                    The event data.
                </param>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.Silverlight.PluginBackground">
      <summary>
                    Gets or sets the color of the Silverlight plug-in background.
                </summary>
      <returns>
                    The color of the background for the Silverlight plug-in.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.Silverlight.PluginNotInstalledTemplate">
      <summary>
                    Specifies the HTML markup to render in the browser if the Silverlight plug-in is not installed.
                </summary>
      <returns>
                    An object that has HTML markup that the <see cref="T:System.Web.UI.SilverlightControls.Silverlight" /> control will display in the browser if the Silverlight plug-in is not installed.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="P:System.Web.UI.SilverlightControls.Silverlight.PluginNotInstalledTemplate" /> property is set to a value that is not a valid template.
                </exception>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.Silverlight.Render(System.Web.UI.HtmlTextWriter)">
      <summary>
                    Sends server control content to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> object, which writes the content to be rendered to the client.
                </summary>
      <param name="writer">
                    The <see cref="T:System.Web.UI.HtmlTextWriter" /> object that receives the server control content.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The specified <paramref name="writer" /> is not a valid <see cref="T:System.Web.UI.HtmlTextWriter" /></exception>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.Silverlight.RenderContents(System.Web.UI.HtmlTextWriter)">
      <summary>
                    Renders the contents of the control to the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> writer. This method is primarily used by control developers.
                </summary>
      <param name="writer">
                    An <see cref="T:System.Web.UI.HtmlTextWriter" /> instance that represents the output stream that is used to render HTML content to the client.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The specified <paramref name="writer" /> is not a valid <see cref="T:System.Web.UI.HtmlTextWriter" /></exception>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.Silverlight.ScaleMode">
      <summary>
                    Gets or sets how the Silverlight plug-in fills its available space.
                </summary>
      <returns>
                    A <see cref="T:System.Web.UI.SilverlightControls.ScaleMode" /> value. The default is <see cref="F:System.Web.UI.SilverlightControls.ScaleMode.None" />.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.Silverlight.ScriptType">
      <summary>
                    Gets or sets the type name of the client JavaScript object to create and to associate with the Silverlight plug-in.
                </summary>
      <returns>
                    The fully qualified type name.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.Silverlight.Source">
      <summary>
                    Gets or sets the location of the Silverlight content to display.
                </summary>
      <returns>
                    The location of the XAML source file or XAP source package. 
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.Silverlight.SplashScreenSource">
      <summary>
                    Gets or sets the URL of the splash screen document to render when the Silverlight content is loading.
                </summary>
      <returns>
                    The location of the splash screen document.
                </returns>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.Silverlight.System#Web#UI#IScriptControl#GetScriptDescriptors"></member>
    <member name="M:System.Web.UI.SilverlightControls.Silverlight.System#Web#UI#IScriptControl#GetScriptReferences"></member>
    <member name="P:System.Web.UI.SilverlightControls.Silverlight.Windowless">
      <summary>
                    Gets or sets a value that indicates whether the Silverlight plug-in displays in a windowless state.
                </summary>
      <returns>true if the Silverlight plug-in displays in a windowless state; otherwise, false. The default is false.
                </returns>
    </member>
    <member name="T:System.Web.UI.SilverlightControls.SilverlightPlugin">
      <summary>
                    Represents the Silverlight browser plug-in.
                </summary>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.SilverlightPlugin.#ctor">
      <summary>
                    Initializes a new instance of the SilverlightPlugin object.
                </summary>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.SilverlightPlugin.AddAttributesToRender(System.Web.UI.HtmlTextWriter)">
      <summary>
                    Adds HTML attributes and styles to render with the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> instance. This method is primarily used by control developers.
                </summary>
      <param name="writer">
                    An <see cref="T:System.Web.UI.HtmlTextWriter" /> instance that represents the output stream that is used to render HTML content to the client.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The specified <paramref name="writer" /> is not a valid <see cref="T:System.Web.UI.HtmlTextWriter" /></exception>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.SilverlightPlugin.Attributes">
      <summary>
                    Gets the collection of arbitrary attributes (for rendering only) that do not correspond to properties on the control.
                </summary>
      <returns>
                    An AttributeCollection of name and value pairs.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.SilverlightPlugin.AutoUpgrade">
      <summary>
                    Gets or sets a value indicating whether the Silverlight plug-in should automatically be upgraded.
                </summary>
      <returns>true if the Silverlight plug-in should automatically be upgraded; otherwise, false. The default value is true.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.SilverlightPlugin.Background">
      <summary>
                    Gets or sets the background color of the rectangular region that displays the Silverlight content.
                </summary>
      <returns>
                    A Color object.
                </returns>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.SilverlightPlugin.CreateObject(System.Web.UI.Control,System.Web.UI.HtmlTextWriter,System.String)">
      <summary>
                    Writes the object element and parameters for the Silverlight content.
                </summary>
      <param name="control">
                    The control instance.
                </param>
      <param name="writer">
                    An <see cref="T:System.Web.UI.HtmlTextWriter" /> instance.
                </param>
      <param name="parentId">
                    The element where the Silverlight content is inserted.
                </param>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.SilverlightPlugin.CssClass">
      <summary>
                    Gets or sets the name of a CSS class for the Silverlight plug-in.
                </summary>
      <returns>
                    The name of a CSS class. 
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.SilverlightPlugin.EnableFrameRateCounter">
      <summary>
                    Gets or sets a value that indicates whether to display the current frame rate in the hosting browser's status bar. 
                </summary>
      <returns>true if the frames-per-second (fps) of the current rendered Silverlight content will be displayed in the hosting browser's status bar; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.SilverlightPlugin.EnableRedrawRegions">
      <summary>
                    Gets or sets a value that determines whether to show the areas of the plug-in that are being redrawn with each frame.
                </summary>
      <returns>true if the areas of the plug-in that are being redrawn with each frame will be displayed; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.SilverlightPlugin.GetSilverlightParameters">
      <summary>
                    Returns the Silverlight plug-in parameters.
                </summary>
      <returns>
                    The Silverlight plug-in parameters.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.SilverlightPlugin.Height">
      <summary>
                    Gets or sets the height of the area of the Silverlight plug-in.
                </summary>
      <returns>
                    The height of the Silverlight plug-in.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.SilverlightPlugin.HtmlAccess">
      <summary>
                    Gets or sets a value that indicates whether to allow the Silverlight-based application to access the HTML page Document Object Model (DOM).
                </summary>
      <returns>
                    A value that indicates whether the Silverlight-based application can access the HTML DOM.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.SilverlightPlugin.Id">
      <summary>
                    Gets or sets an identifier for the Silverlight plug-in.
                </summary>
      <returns>
                    The identifier for the Silverlight plug-in.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.SilverlightPlugin.InitParameters">
      <summary>
                    Gets or sets an optional set of user-defined initialization parameters.
                </summary>
      <returns>
                    The parameters.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.SilverlightPlugin.MaxFrameRate">
      <summary>
                    Gets or sets the maximum number of frames to render per second.
                </summary>
      <returns>
                    The maximum number of frames to render per second.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The <see cref="P:System.Web.UI.SilverlightControls.SilverlightPlugin.MaxFrameRate" /> property is set to a value that is less than 0.
                </exception>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.SilverlightPlugin.MinimumVersion">
      <summary>
                    Gets or sets a value that indicates the minimum Silverlight plug-in host version that is required for this Silverlight-based application.
                </summary>
      <returns>
                    The minimum Silverlight plug-in host version.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.SilverlightPlugin.OnError">
      <summary>
                    Gets or sets the name of the client JavaScript function (event handler) that is called when the Silverlight plug-in generates a run-time error.
                </summary>
      <returns>
                    The name of the JavaScript function that is called when the Silverlight plug-in generates an error.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.SilverlightPlugin.OnFullScreenChanged">
      <summary>
                    Gets or sets the name of the client JavaScript function (event handler) that is called when full-screen mode is toggled.
                </summary>
      <returns>
                    The name of the JavaScript function that is called when the Silverlight plug-in full-screen mode changes.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.SilverlightPlugin.OnLoad">
      <summary>
                    Gets or sets the name of the client JavaScript function (event handler) that is called when the Silverlight plug-in loads.
                </summary>
      <returns>
                    The name of the JavaScript function that is called when the Silverlight plug-in loads.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.SilverlightPlugin.OnResized">
      <summary>
                    Gets or sets the name of the client JavaScript function (event handler) that is called when the Silverlight plug-in is resized.
                </summary>
      <returns>
                    The name of the JavaScript function that is called when the Silverlight plug-in is resized.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.SilverlightPlugin.OnSourceDownloadCompleted">
      <summary>
                    Gets or sets the name of the client JavaScript function (event handler) that is called when the plug-in source has been completely downloaded.
                </summary>
      <returns>
                    The name of the JavaScript function that is called when the plug-in source has been completely downloaded.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.SilverlightPlugin.OnSourceDownloadProgressChanged">
      <summary>
                    Gets or sets the name of the client JavaScript function (event handler) that is called when the plug-in source download progress changes.
                </summary>
      <returns>
                    The name of the JavaScript function that is called when a change occurs in the progress of the plug-in source download.
                </returns>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.SilverlightPlugin.Render(System.Web.UI.HtmlTextWriter)">
      <summary>
                    Renders the control by using the specified <see cref="T:System.Web.UI.HtmlTextWriter" /> instance.
                </summary>
      <param name="writer">
                    An <see cref="T:System.Web.UI.HtmlTextWriter" /> instance that represents the output stream that is used to render HTML content to the client.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The specified <paramref name="writer" /> is not a valid <see cref="T:System.Web.UI.HtmlTextWriter" /></exception>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.SilverlightPlugin.Source">
      <summary>
                    Gets or sets the URL of the Silverlight source.
                </summary>
      <returns>
                    The location of the Silverlight source.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.SilverlightPlugin.SplashScreenSource">
      <summary>
                    Gets or sets the URL of the splash screen document to render when the <see cref="P:System.Web.UI.SilverlightControls.SilverlightPlugin.Source" /> property document is loading.
                </summary>
      <returns>
                    The location of the splash screen document.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.SilverlightPlugin.Style">
      <summary>
                    Gets the CSS styles that are applied to the Silverlight plug-in.
                </summary>
      <returns>
                    A CssStyleCollection object that contains the CSS styles that are applied to the Silverlight plug-in.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.SilverlightPlugin.Width">
      <summary>
                    Gets or sets the width of the area of the Silverlight plug-in.
                </summary>
      <returns>
                    The width of the Silverlight plug-in.
                </returns>
    </member>
    <member name="P:System.Web.UI.SilverlightControls.SilverlightPlugin.Windowless">
      <summary>
                    Gets (or sets in initialization only) a value that specifies whether the Silverlight plug-in displays as a windowless plug-in. (Applies to Windows versions of Silverlight only.)
                </summary>
      <returns>true if the Silverlight plug-in displays as a windowless plug-in; otherwise, false.
                </returns>
    </member>
    <member name="T:System.Web.UI.SilverlightControls.VersionConverter">
      <summary>
                    Used internally to convert the version of a Silverlight-based application (.xap) file from a string to a <see cref="T:System.Version" /> object.
                </summary>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.VersionConverter.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Web.UI.SilverlightControls.VersionConverter" /> class.
                </summary>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.VersionConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
                    Returns a collection of standard values for the data type that this type converter is designed for when provided with a format context.
                </summary>
      <param name="context">
                    An ITypeDescriptorContext object that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null.
                </param>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.VersionConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
                    Returns a value that indicates whether the collection of standard values that is returned from the <see cref="M:System.Web.UI.SilverlightControls.VersionConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> method is an exclusive list.
                </summary>
      <returns>true if the collection is an exclusive list; otherwise, false.
                </returns>
      <param name="context">
                    An ITypeDescriptorContext object that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null.
                </param>
    </member>
    <member name="M:System.Web.UI.SilverlightControls.VersionConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
                    Returns a value that indicates whether this object supports a standard set of values that can be picked from a list.
                </summary>
      <returns>true if <see cref="M:System.Web.UI.SilverlightControls.VersionConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> can be called to find a common set of values that the object supports; otherwise, false.
                </returns>
      <param name="context">
                    An ITypeDescriptorContext object that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null.
                </param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\2.0.31005.0\Libraries\Client\System.Xml.Serialization.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xml.Serialization</name>
  </assembly>
  <members>
    <member name="T:System.ServiceModel.XmlSerializerFormatAttribute">
      <summary>Instructs the Silverlight version 2 infrastructure to use the <see cref="T:System.Xml.Serialization.XmlSerializer" /> instead of the <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" />.</summary>
    </member>
    <member name="M:System.ServiceModel.XmlSerializerFormatAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.ServiceModel.XmlSerializerFormatAttribute" /> class. </summary>
    </member>
    <member name="P:System.ServiceModel.XmlSerializerFormatAttribute.Style">
      <summary>Gets or sets the SOAP style of the <see cref="T:System.Xml.Serialization.XmlSerializer" />.</summary>
      <returns>One of the <see cref="T:System.ServiceModel.OperationFormatStyle" /> values. The default is <see cref="F:System.ServiceModel.OperationFormatStyle.Document" />.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlAnyElementAttributes">
      <summary>Represents a collection of <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> objects.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttributes" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Add(System.Xml.Serialization.XmlAnyElementAttribute)">
      <returns>The index of the added item.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to add to the collection.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Clear">
      <summary>Removes all objects from the collection.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Contains(System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>Determines whether the collection contains a specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />.</summary>
      <returns>true if the collection contains the specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />; otherwise, false.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to check for.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.CopyTo(System.Xml.Serialization.XmlAnyElementAttribute[],System.Int32)">
      <summary>Copies an <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> array to the collection, starting at a specified target index.</summary>
      <param name="array">The array of <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> objects to copy to the collection.</param>
      <param name="index">The zero-based index in the array at which the copying begins.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttributes.Count">
      <summary>Gets the number of attributes contained in the collection.</summary>
      <returns>The number of attributes contained in the collection.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> that can iterate through the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can iterate through the collection.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.IndexOf(System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>Returns the zero-based index of the first occurrence of a specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> in the collection, or -1 if the attribute is not found in the collection. </summary>
      <returns>The first index of the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> in the collection, or -1 if the attribute is not found in the collection.
</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to locate in the collection.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Insert(System.Int32,System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>Inserts an <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> into the collection at the specified index. 
</summary>
      <param name="index">The zero-based index at which the attribute is inserted.</param>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to insert.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttributes.Item(System.Int32)">
      <summary>Gets or sets the attribute element at the specified index.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> at the specified index.</returns>
      <param name="index">The zero-based index of the attribute element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for the collection; it is either too large or less than zero.</exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.Remove(System.Xml.Serialization.XmlAnyElementAttribute)">
      <summary>Removes a specified <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> from the collection, if it is present.</summary>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> to remove.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.RemoveAt(System.Int32)">
      <summary>Removes an <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> item at a specified index from the collection.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements from the attribute collection to an array, starting at a specified index of the array.</summary>
      <param name="array">The one-dimensional destination <see cref="T:System.Array" /> for the attribute elements copied from the <see cref="T:System.Xml.Serialization.XmlAnyElementAttributes" /> collection. </param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="index" /> is greater than the length of the array, the length of the array is exceeded when the attribute elements are added, or the <paramref name="array" /> is multidimensional.</exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttributes.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value that indicates whether access to the attribute collection is synchronized (thread safe).</summary>
      <returns>true if the collection is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttributes.System#Collections#ICollection#SyncRoot">
      <summary>This method is not supported.</summary>
      <returns>Throws a <see cref="T:System.NotSupportedException" />.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the attribute list.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The object to add to the list.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the attribute list contains a specific value.</summary>
      <returns>true if the object is found in the attribute list; otherwise, false.</returns>
      <param name="value">The object to locate in the attribute list.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specified item in the attribute list.</summary>
      <returns>The index of the <paramref name="value" /> if found in the attribute list; otherwise, -1.</returns>
      <param name="value">The object to locate in the attribute list.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item in the list at a specified index.</summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="value">The object to insert into the list.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for the collection; it is either too large or less than zero.</exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttributes.System#Collections#IList#IsFixedSize">
      <summary>Gets a value that indicates whether the list has a fixed size.</summary>
      <returns>true if the list has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttributes.System#Collections#IList#IsReadOnly">
      <summary>Gets a value that indicates whether the list is read-only.</summary>
      <returns>true if the list is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAnyElementAttributes.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for the collection; it is either too large or less than zero.</exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlAnyElementAttributes.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the list.</summary>
      <param name="value">The object to remove from the list.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlArrayItemAttributes">
      <summary>Represents a collection of <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> objects.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttributes" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.Add(System.Xml.Serialization.XmlArrayItemAttribute)">
      <returns>The index of the added item.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> to add to the collection.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.Clear">
      <summary>Removes all objects from the collection.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.Contains(System.Xml.Serialization.XmlArrayItemAttribute)">
      <summary>Determines whether the collection contains a specified <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />.</summary>
      <returns>true if the collection contains the specified <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />; otherwise, false.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> to check for.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.CopyTo(System.Xml.Serialization.XmlArrayItemAttribute[],System.Int32)">
      <summary>Copies an <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> array to the collection, starting at a specified target index.</summary>
      <param name="array">The array of <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> objects to copy to the collection.</param>
      <param name="index">The zero-based index in the array at which the copying begins.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttributes.Count">
      <summary>Gets the number of attributes contained in the collection.</summary>
      <returns>The number of attributes contained in the collection.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> that can iterate through the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can iterate through the collection.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.IndexOf(System.Xml.Serialization.XmlArrayItemAttribute)">
      <summary>Returns the zero-based index of the first occurrence of a specified <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> in the collection, or -1 if the attribute is not found in the collection. </summary>
      <returns>The first index of the <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> in the collection, or -1 if the attribute is not found in the collection.
</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> to locate in the collection.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.Insert(System.Int32,System.Xml.Serialization.XmlArrayItemAttribute)">
      <summary>Inserts an <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> into the collection at the specified index. 
</summary>
      <param name="index">The zero-based index at which the attribute is inserted.</param>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> to insert.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttributes.Item(System.Int32)">
      <summary>Gets or sets the attribute element at the specified index.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> at the specified index.</returns>
      <param name="index">The zero-based index of the attribute element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for the collection; it is either too large or less than zero.</exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.Remove(System.Xml.Serialization.XmlArrayItemAttribute)">
      <summary>Removes a specified <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> from the collection, if it is present.</summary>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> to remove.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.RemoveAt(System.Int32)">
      <summary>Removes an <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> item at a specified index from the collection.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements from the attribute collection to an array, starting at a specified index of the array.</summary>
      <param name="array">The one-dimensional destination <see cref="T:System.Array" /> for the attribute elements copied from the <see cref="T:System.Xml.Serialization.XmlArrayItemAttributes" /> collection. </param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="index" /> is greater than the length of the array or the length of the array is exceeded when the attribute elements are added or the <paramref name="array" /> is multidimensional.</exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttributes.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value that indicates whether access to the attribute collection is synchronized (thread safe).</summary>
      <returns>true if the collection is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttributes.System#Collections#ICollection#SyncRoot">
      <summary>This method is not supported.</summary>
      <returns>Throws a <see cref="T:System.NotSupportedException" />.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the attribute list.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The object to add to the list.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the attribute list contains a specific value.</summary>
      <returns>true if the object is found in the attribute list; otherwise, false.</returns>
      <param name="value">The object to locate in the attribute list.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specified item in the attribute list.</summary>
      <returns>The index of the <paramref name="value" /> if found in the attribute list; otherwise, -1.</returns>
      <param name="value">The object to locate in the attribute list.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item in the list at a specified index.</summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="value">The object to insert into the list.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for the collection; it is either too large or less than zero.</exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttributes.System#Collections#IList#IsFixedSize">
      <summary>Gets a value that indicates whether the list has a fixed size.</summary>
      <returns>true if the list has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttributes.System#Collections#IList#IsReadOnly">
      <summary>Gets a value that indicates whether the list is read-only.</summary>
      <returns>true if the list is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlArrayItemAttributes.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for the collection; it is either too large or less than zero.</exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlArrayItemAttributes.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the list.</summary>
      <param name="value">The object to remove from the list.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributeOverrides">
      <summary>Allows you to override property, field, and class attributes when you use the <see cref="T:System.Xml.Serialization.XmlSerializer" /> to serialize or deserialize an object.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeOverrides.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeOverrides.Add(System.Type,System.String,System.Xml.Serialization.XmlAttributes)">
      <summary>Adds an <see cref="T:System.Xml.Serialization.XmlAttributes" /> object to the collection of <see cref="T:System.Xml.Serialization.XmlAttributes" /> objects. The <paramref name="type" /> parameter specifies an object to be overridden. The <paramref name="member" /> parameter specifies the name of a member that is overridden.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the object to override. </param>
      <param name="member">The name of the member to override. </param>
      <param name="attributes">An <see cref="T:System.Xml.Serialization.XmlAttributes" /> object that represents the overriding attributes. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributeOverrides.Add(System.Type,System.Xml.Serialization.XmlAttributes)">
      <summary>Adds an <see cref="T:System.Xml.Serialization.XmlAttributes" /> object to the collection of <see cref="T:System.Xml.Serialization.XmlAttributes" /> objects. The <paramref name="type" /> parameter specifies an object to be overridden by the <see cref="T:System.Xml.Serialization.XmlAttributes" /> object.</summary>
      <param name="type">The <see cref="T:System.Type" /> of the object that is overridden. </param>
      <param name="attributes">An <see cref="T:System.Xml.Serialization.XmlAttributes" /> object that represents the overriding attributes. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeOverrides.Item(System.Type)">
      <summary>Gets the object associated with the specified base-class type.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlAttributes" /> that represents the collection of overriding attributes.</returns>
      <param name="type">The base class <see cref="T:System.Type" /> that is associated with the collection of attributes you want to retrieve. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributeOverrides.Item(System.Type,System.String)">
      <summary>Gets the object associated with the specified base-class type. The <paramref name="member" /> parameter specifies the base-class member that is overridden.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlAttributes" /> that represents the collection of overriding attributes.</returns>
      <param name="type">The base class <see cref="T:System.Type" /> that is associated with the collection of attributes you want. </param>
      <param name="member">The name of the overridden member that specifies the <see cref="T:System.Xml.Serialization.XmlAttributes" /> to return. </param>
    </member>
    <member name="T:System.Xml.Serialization.XmlAttributes">
      <summary>Represents a collection of attribute objects that control how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes and deserializes an object.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributes.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributes" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlAttributes.#ctor(System.Reflection.ICustomAttributeProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlAttributes" /> class and customizes how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes and deserializes an object. </summary>
      <param name="provider">A class that can provide alternative implementations of attributes that control XML serialization.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlAnyElements">
      <summary>Gets the collection of <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> objects to override.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlAnyElementAttributes" /> object that represents the collection of <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> objects.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlArray">
      <summary>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a public field or read/write property that returns an array.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlArrayAttribute" /> that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a public field or read/write property that returns an array.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlArrayItems">
      <summary>Gets or sets a collection of objects that specify how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes items inserted into an array returned by a public field or read/write property.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlArrayItemAttributes" /> object that contains a collection of <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" /> objects.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlAttribute">
      <summary>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a public field or public read/write property as an XML attribute.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" /> that controls the serialization of a public field or read/write property as an XML attribute.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlChoiceIdentifier">
      <summary>Gets or sets an object that allows you to distinguish between a set of choices.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" /> that can be applied to a class member that is serialized as an xsi:choice element.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlDefaultValue">
      <summary>Gets or sets the default value of an XML element or attribute.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the default value of an XML element or attribute.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlElements">
      <summary>Gets a collection of objects that specify how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a public field or read/write property as an XML element.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlElementAttributes" /> that contains a collection of <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> objects.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlEnum">
      <summary>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration member.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlEnumAttribute" /> that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes an enumeration member.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlIgnore">
      <summary>Gets or sets a value that specifies whether the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a public field or public read/write property.</summary>
      <returns>true if the <see cref="T:System.Xml.Serialization.XmlSerializer" /> must not serialize the field or property; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.Xmlns">
      <summary>Gets or sets a value that specifies whether to keep all namespace declarations when an object that contains a member that returns an <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> object is overridden.</summary>
      <returns>true if the namespace declarations should be kept; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlRoot">
      <summary>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a class as an XML root element.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that overrides a class attributed as an XML root element.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlText">
      <summary>Gets or sets an object that instructs the <see cref="T:System.Xml.Serialization.XmlSerializer" /> to serialize a public field or public read/write property as XML text.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlTextAttribute" /> that overrides the default serialization of a public property or field.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlAttributes.XmlType">
      <summary>Gets or sets an object that specifies how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> serializes a class to which the <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> has been applied.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> that overrides an <see cref="T:System.Xml.Serialization.XmlTypeAttribute" /> applied to a class declaration.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlElementAttributes">
      <summary>Represents a collection of <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> objects used by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> to override the default way it serializes a class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlElementAttributes" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.Add(System.Xml.Serialization.XmlElementAttribute)">
      <returns>The index of the added item.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> to add to the collection.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.Clear">
      <summary>Removes all objects from the collection.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.Contains(System.Xml.Serialization.XmlElementAttribute)">
      <summary>Determines whether the collection contains a specified <see cref="T:System.Xml.Serialization.XmlElementAttribute" />.</summary>
      <returns>true if the collection contains the specified <see cref="T:System.Xml.Serialization.XmlElementAttribute" />; otherwise, false.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> to check for.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.CopyTo(System.Xml.Serialization.XmlElementAttribute[],System.Int32)">
      <summary>Copies an <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> array to the collection, starting at a specified target index.</summary>
      <param name="array">The array of <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> objects to copy to the collection.</param>
      <param name="index">The zero-based index in the array at which the copying begins.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttributes.Count">
      <summary>Gets the number of attributes contained in the collection.</summary>
      <returns>The number of attributes contained in the collection.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> that can iterate through the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can iterate through the collection.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.IndexOf(System.Xml.Serialization.XmlElementAttribute)">
      <summary>Returns the zero-based index of the first occurrence of a specified <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> in the collection, or -1 if the attribute is not found in the collection. </summary>
      <returns>The first index of the <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> in the collection, or -1 if the attribute is not found in the collection.
</returns>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> to locate in the collection.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.Insert(System.Int32,System.Xml.Serialization.XmlElementAttribute)">
      <summary>Inserts an <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> into the collection at the specified index. 
</summary>
      <param name="index">The zero-based index at which the attribute is inserted.</param>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> to insert.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttributes.Item(System.Int32)">
      <summary>Gets or sets the attribute element at the specified index.</summary>
      <returns>The <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> at the specified index.</returns>
      <param name="index">The zero-based index of the attribute element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for the collection; it is either too large or less than zero.</exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.Remove(System.Xml.Serialization.XmlElementAttribute)">
      <summary>Removes a specified <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> from the collection, if it is present.</summary>
      <param name="attribute">The <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> to remove.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.RemoveAt(System.Int32)">
      <summary>Removes an <see cref="T:System.Xml.Serialization.XmlElementAttribute" /> item at a specified index from the collection.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the elements from the attribute collection to an array, starting at a specified index of the array.</summary>
      <param name="array">The one-dimensional destination <see cref="T:System.Array" /> for the attribute elements copied from the <see cref="T:System.Xml.Serialization.XmlElementAttributes" /> collection. </param>
      <param name="index">The zero-based index in array at which copying begins.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="index" /> is greater than the length of the array, the length of the array is exceeded when the attribute elements are added, or the <paramref name="array" /> is multidimensional.</exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttributes.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value that indicates whether access to the attribute collection is synchronized (thread safe).</summary>
      <returns>true if the collection is synchronized (thread safe); otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttributes.System#Collections#ICollection#SyncRoot">
      <summary>This method is not supported.</summary>
      <returns>Throws a <see cref="T:System.NotSupportedException" />.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.System#Collections#IList#Add(System.Object)">
      <summary>Adds an item to the attribute list.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The object to add to the list.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.System#Collections#IList#Contains(System.Object)">
      <summary>Determines whether the attribute list contains a specific value.</summary>
      <returns>true if the object is found in the attribute list; otherwise, false.</returns>
      <param name="value">The object to locate in the attribute list.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.System#Collections#IList#IndexOf(System.Object)">
      <summary>Determines the index of a specified item in the attribute list.</summary>
      <returns>The index of the <paramref name="value" /> if found in the attribute list; otherwise, -1.</returns>
      <param name="value">The object to locate in the attribute list.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>Inserts an item in the list at a specified index.</summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="value">The object to insert into the list.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for the collection; it is either too large or less than zero.</exception>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttributes.System#Collections#IList#IsFixedSize">
      <summary>Gets a value that indicates whether the list has a fixed size.</summary>
      <returns>true if the list has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttributes.System#Collections#IList#IsReadOnly">
      <summary>Gets a value that indicates whether the list is read-only.</summary>
      <returns>
        <paramref name="true" /> if the list is read-only; otherwise, <paramref name="false" />.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlElementAttributes.System#Collections#IList#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="index" /> is not valid for the collection; it is either too large or less than zero.</exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlElementAttributes.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the list.</summary>
      <param name="value">The object to remove from the list.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlMapping">
      <summary>Supports mappings between .NET Framework types and XML Schema data types. </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMapping.ElementName">
      <summary>Get the name of the mapped element.</summary>
      <returns>The name of the mapped element.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMapping.Namespace">
      <summary>Gets the namespace of the mapped element.</summary>
      <returns>The namespace of the mapped element.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlMapping.SetKey(System.String)">
      <summary>Sets the key used to look up the mapping.</summary>
      <param name="key">The lookup key.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlMapping.XsdElementName">
      <summary>Gets the name of the XSD element of the mapping.</summary>
      <returns>The XSD element name.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlMappingAccess">
      <summary>Specifies whether a mapping is read, write, or both.</summary>
    </member>
    <member name="F:System.Xml.Serialization.XmlMappingAccess.None">
      <summary>Both read and write methods are generated.</summary>
    </member>
    <member name="F:System.Xml.Serialization.XmlMappingAccess.Read">
      <summary>Read methods are generated.</summary>
    </member>
    <member name="F:System.Xml.Serialization.XmlMappingAccess.Write">
      <summary>Write methods are generated.</summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlMemberMapping">
      <summary>Maps a code entity in a .NET Framework Web service method to an element in a Web Services Description Language (WSDL) message.</summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.Any">
      <summary>Gets or sets a value that indicates whether the .NET Framework type maps to an XML element or attribute of any type. </summary>
      <returns>true, if the type maps to an XML any element or attribute; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.CheckSpecified">
      <summary>Gets a value that indicates whether the accompanying field in the .NET Framework type has a value specified.</summary>
      <returns>true, if the accompanying field has a value specified; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.ElementName">
      <summary>Gets the unqualified name of the XML element declaration that applies to this mapping. </summary>
      <returns>The unqualified name of the XML element declaration that applies to this mapping.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.MemberName">
      <summary>Gets the name of the Web service method member that is represented by this mapping. </summary>
      <returns>The name of the Web service method member represented by this mapping.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.Namespace">
      <summary>Gets the XML namespace that applies to this mapping. </summary>
      <returns>The XML namespace that applies to this mapping.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.TypeFullName">
      <summary>Gets the fully qualified type name of the .NET Framework type for this mapping. </summary>
      <returns>The fully qualified type name of the .NET Framework type for this mapping.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.TypeName">
      <summary>Gets the type name of the .NET Framework type for this mapping. </summary>
      <returns>The type name of the .NET Framework type for this mapping.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.TypeNamespace">
      <summary>Gets the namespace of the .NET Framework type for this mapping.</summary>
      <returns>The namespace of the .NET Framework type for this mapping.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMemberMapping.XsdElementName">
      <summary>Gets the XML element name as it appears in the service description document.</summary>
      <returns>The XML element name.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlMembersMapping">
      <summary>Provides mappings between .NET Framework Web service methods and Web Services Description Language (WSDL) messages that are defined for SOAP Web services. </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.Count">
      <summary>Gets the number of .NET Framework code entities that belong to a Web service method to which a SOAP message is being mapped. </summary>
      <returns>The number of mappings in the collection.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.Item(System.Int32)">
      <summary>Gets an item that contains internal type mapping information for a .NET Framework code entity that belongs to a Web service method being mapped to a SOAP message.</summary>
      <returns>The requested <see cref="T:System.Xml.Serialization.XmlMemberMapping" />.</returns>
      <param name="index">The index of the mapping to return.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.TypeName">
      <summary>Gets the name of the .NET Framework type being mapped to the data type of an XML Schema element that represents a SOAP message.</summary>
      <returns>The name of the .NET Framework type.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlMembersMapping.TypeNamespace">
      <summary>Gets the namespace of the .NET Framework type being mapped to the data type of an XML Schema element that represents a SOAP message.</summary>
      <returns>The .NET Framework namespace of the mapping.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlReflectionImporter">
      <summary>Generates mappings to XML schema element declarations, including literal XML Schema Definition (XSD) message parts in a Web Services Description Language (WSDL) document for .NET Framework types or Web service method information. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlReflectionImporter" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlReflectionImporter" /> class using the specified default XML namespace. </summary>
      <param name="defaultNamespace">The default XML namespace to use for imported type mappings.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.Xml.Serialization.XmlAttributeOverrides)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlReflectionImporter" /> class using the specified XML serialization overrides. </summary>
      <param name="attributeOverrides">An object that overrides how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class serializes mapped types.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.#ctor(System.Xml.Serialization.XmlAttributeOverrides,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlReflectionImporter" /> class using the specified XML serialization overrides and default XML namespace. </summary>
      <param name="attributeOverrides">An object that overrides how the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class serializes mapped types.</param>
      <param name="defaultNamespace">The default XML namespace to use for imported type mappings.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean)">
      <summary>Generates internal type mappings for information from a Web service method. </summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlMembersMapping" /> with mappings to the element parts of a WSDL message definition.</returns>
      <param name="elementName">An XML element name produced from the Web service method.</param>
      <param name="ns">An XML element namespace produced from the Web service method.</param>
      <param name="members">An array of <see cref="T:System.Xml.Serialization.XmlReflectionMember" /> objects that contain .NET Framework code entities that belong to a Web service method.</param>
      <param name="hasWrapperElement">true if elements that correspond to Web Services Description Language (WSDL) message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean)">
      <summary>Returns internal type mappings using information from a Web service method and allows you to specify an XML element name, XML namespace, and other options.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlMembersMapping" /> that contains the mappings.</returns>
      <param name="elementName">An XML element name produced from the Web service method.</param>
      <param name="ns">An XML element namespace produced from the Web service method.</param>
      <param name="members">An array of <see cref="T:System.Xml.Serialization.XmlReflectionMember" /> objects that contain .NET Framework code entities that belong to a Web service method.</param>
      <param name="hasWrapperElement">true if elements that correspond to Web Services Description Language (WSDL) message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
      <param name="rpc">true if the method is a remote procedure call; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean)">
      <summary>Returns internal type mappings using information from a Web service method and allows you to specify an XML element name, XML namespace, and other options.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlMembersMapping" /> that contains the mappings.</returns>
      <param name="elementName">An XML element name produced from the Web service method.</param>
      <param name="ns">An XML element namespace produced from the Web service method.</param>
      <param name="members">An array of <see cref="T:System.Xml.Serialization.XmlReflectionMember" /> objects that contain .NET Framework code entities that belong to a Web service method.</param>
      <param name="hasWrapperElement">true if elements that correspond to Web Services Description Language (WSDL) message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
      <param name="rpc">true if the method is a remote procedure call; otherwise, false.</param>
      <param name="openModel">true to specify that the generated schema type is marked with the &lt;xs:anyAttribute&gt; element; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportMembersMapping(System.String,System.String,System.Xml.Serialization.XmlReflectionMember[],System.Boolean,System.Boolean,System.Boolean,System.Xml.Serialization.XmlMappingAccess)">
      <summary>Generates internal type mappings for information from a Web service method.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlMembersMapping" /> that contains the mappings.</returns>
      <param name="elementName">An XML element name produced from the Web service method.</param>
      <param name="ns">An XML element namespace produced from the Web service method.</param>
      <param name="members">An array of <see cref="T:System.Xml.Serialization.XmlReflectionMember" /> objects that contain .NET Framework code entities that belong to a Web service method.</param>
      <param name="hasWrapperElement">true if elements that correspond to Web Services Description Language (WSDL) message parts should be enclosed in an extra wrapper element in a SOAP message; otherwise, false.</param>
      <param name="rpc">true if the method is a remote procedure call; otherwise, false.</param>
      <param name="openModel">true to specify that the generated schema type is marked with the  &lt;xs:anyAttribute&gt; element; otherwise, false.</param>
      <param name="access">One of the <see cref="T:System.Xml.Serialization.XmlMappingAccess" /> values. The default is None.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type)">
      <summary>Generates a mapping to an XML Schema element for a specified .NET Framework type. </summary>
      <returns>Internal .NET Framework mapping of a type to an XML Schema element.</returns>
      <param name="type">The .NET Framework type for which to generate a type mapping.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.String)">
      <summary>Generates a mapping to an XML Schema element for a .NET Framework type, using the specified type and namespace. </summary>
      <returns>Internal .NET Framework mapping of a type to an XML Schema element.</returns>
      <param name="type">The .NET Framework type for which to generate a type mapping.</param>
      <param name="defaultNamespace">The default XML namespace to use.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.Xml.Serialization.XmlRootAttribute)">
      <summary>Generates a mapping to an XML Schema element for a .NET Framework type, using the specified type and attribute. </summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> that represents a mapping of a .NET Framework type to an XML Schema element.</returns>
      <param name="type">The .NET Framework type for which to generate a type mapping.</param>
      <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> attribute that is applied to the type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.ImportTypeMapping(System.Type,System.Xml.Serialization.XmlRootAttribute,System.String)">
      <summary>Generates a mapping to an XML Schema element for a .NET Framework type, using the specified type, attribute, and namespace. </summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> that contains the internal .NET Framework mapping of a type to an XML Schema element.</returns>
      <param name="type">The .NET Framework type for which to generate a type mapping.</param>
      <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> attribute that is applied to the type.</param>
      <param name="defaultNamespace">The default XML namespace to use.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.IncludeType(System.Type)">
      <summary>Includes mappings for a type for later use when import methods are invoked. </summary>
      <param name="type">The .NET Framework type for which to save type mapping information.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionImporter.IncludeTypes(System.Reflection.ICustomAttributeProvider)">
      <summary>Includes mappings for derived types for later use when import methods are invoked. </summary>
      <param name="provider">An instance of the <see cref="T:System.Reflection.ICustomAttributeProvider" /> class that contains custom attributes derived from the <see cref="T:System.Xml.Serialization.XmlIncludeAttribute" /> attribute.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlReflectionMember">
      <summary>Provides mappings between code entities in .NET Framework Web service methods and the content of Web Services Description Language (WSDL) messages that are defined for SOAP Web services. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlReflectionMember.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlReflectionMember" /> class. </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.IsReturnValue">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xml.Serialization.XmlReflectionMember" /> represents a Web service method return value, as opposed to an output parameter. </summary>
      <returns>true, if the member represents a Web service return value; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.MemberName">
      <summary>Gets or sets the name of the Web service method member for this mapping. </summary>
      <returns>The name of the Web service method.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.MemberType">
      <summary>Gets or sets the type of the Web service method member code entity that is represented by this mapping. </summary>
      <returns>The <see cref="T:System.Type" /> of the Web service method member code entity that is represented by this mapping.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.OverrideIsNullable">
      <summary>Gets or sets a value that indicates that the value of the corresponding XML element definition's isNullable attribute is false.</summary>
      <returns>true to override the <see cref="P:System.Xml.Serialization.XmlElementAttribute.IsNullable" /> property; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlReflectionMember.XmlAttributes">
      <summary>Gets or sets an <see cref="T:System.Xml.Serialization.XmlAttributes" /> with the collection of <see cref="T:System.Xml.Serialization.XmlSerializer" />-related attributes that have been applied to the member code entity. </summary>
      <returns>An <see cref="T:System.XML.Serialization.XmlAttributes" /> that represents XML attributes that have been applied to the member code.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationGeneratedCode">
      <summary>An abstract class that is the base class for <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> and <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> and that contains methods common to both of these types.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationGeneratedCode.#ctor">
      <summary>Initializes an instance of the <see cref="T:System.Xml.Serialization.XmlSerializationGeneratedCode" /> class. </summary>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationReader">
      <summary>Controls deserialization by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CheckReaderCount(System.Int32@,System.Int32@)">
      <summary>Checks whether the deserializer has advanced.</summary>
      <param name="whileIterations">The current count in a while loop.</param>
      <param name="readerCount">The current <see cref="P:System.Xml.Serialization.XmlSerializationReader.ReaderCount" />. </param>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Xml.Serialization.XmlSerializationReader.ReaderCount" /> has not advanced. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CollapseWhitespace(System.String)">
      <summary>Removes all occurrences of white space characters from the beginning and end of the specified string.</summary>
      <returns>The trimmed string.</returns>
      <param name="value">The string that has its white space trimmed.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateAbstractTypeException(System.String,System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that an object being deserialized should be abstract. </summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="name">The name of the abstract type.</param>
      <param name="ns">The Silverlight namespace of the abstract type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateBadDerivationException(System.String,System.String,System.String,System.String,System.String,System.String)">
      <summary>Populates an object from its XML representation at the current location of the <see cref="T:System.Xml.XmlReader" />, with an option to read the inner element.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="xsdDerived">The local name of the derived XML Schema data type.</param>
      <param name="nsDerived">The namespace of the derived XML Schema data type.</param>
      <param name="xsdBase">The local name of the base XML Schema data type.</param>
      <param name="nsBase">The namespace of the base XML Schema data type.</param>
      <param name="clrDerived">The namespace of the derived Silverlight type.</param>
      <param name="clrBase">The name of the base Silverlight type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateCtorHasSecurityException(System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that an object being deserialized cannot be instantiated because the constructor throws a security exception.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="typeName">The name of the type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateInaccessibleConstructorException(System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that an object being deserialized cannot be instantiated because there is no constructor available.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="typeName">The name of the type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateInvalidCastException(System.Type,System.Object)">
      <summary>Creates an <see cref="T:System.InvalidCastException" /> that indicates that an explicit reference conversion failed.</summary>
      <returns>An <see cref="T:System.InvalidCastException" /> exception.</returns>
      <param name="type">The <see cref="T:System.Type" /> that an object cannot be cast to. This type is incorporated into the exception message.</param>
      <param name="value">The object that cannot be cast. This object is incorporated into the exception message.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateInvalidCastException(System.Type,System.Object,System.String)">
      <summary>Creates an <see cref="T:System.InvalidCastException" /> that indicates that an explicit reference conversion failed.</summary>
      <returns>An <see cref="T:System.InvalidCastException" /> exception.</returns>
      <param name="type">The <see cref="T:System.Type" /> that an object cannot be cast to. This type is incorporated into the exception message.</param>
      <param name="value">The object that cannot be cast. This object is incorporated into the exception message.</param>
      <param name="id">A string identifier.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateMissingIXmlSerializableType(System.String,System.String,System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that a derived type that is mapped to an XML Schema data type cannot be located.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="name">The local name of the XML Schema data type that is mapped to the unavailable derived type.</param>
      <param name="ns">The namespace of the XML Schema data type that is mapped to the unavailable derived type.</param>
      <param name="clrType">The full name of the Silverlight base type for which a derived type cannot be located.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateReadOnlyCollectionException(System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that a SOAP-encoded collection type cannot be modified and its values cannot be filled in. </summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="name">The fully qualified name of the Silverlight type for which there is a mapping.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateUnknownConstantException(System.String,System.Type)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that an enumeration value is not valid. </summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="value">The enumeration value that is not valid.</param>
      <param name="enumType">The enumeration type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateUnknownNodeException">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that the current position of <see cref="T:System.Xml.XmlReader" /> represents an unknown XML node. </summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.CreateUnknownTypeException(System.Xml.XmlQualifiedName)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that a type is unknown. </summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="type">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the name of the unknown type.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.DecodeName">
      <summary>Gets or sets a value that determines whether XML strings are translated into valid Silverlight type names.</summary>
      <returns>true if XML strings are decoded into valid Silverlight type names; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.EnsureArrayIndex(System.Array,System.Int32,System.Type)">
      <summary>Ensures that a given array, or a copy, is large enough to contain a specified index. </summary>
      <returns>The existing <see cref="T:System.Array" />, if it is already large enough; otherwise, a new, larger array that contains the original array's elements.</returns>
      <param name="a">The <see cref="T:System.Array" /> that is being checked.</param>
      <param name="index">The required index.</param>
      <param name="elementType">The <see cref="T:System.Type" /> of the array's elements.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.GetNullAttr">
      <summary>Determines whether the XML element where the <see cref="T:System.Xml.XmlReader" /> is currently positioned has a null attribute set to the value true.</summary>
      <returns>true if <see cref="T:System.Xml.XmlReader" /> is currently positioned over a null attribute with the value true; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.GetXsiType">
      <summary>Gets the value of the xsi:type attribute for the XML element at the current location of the <see cref="T:System.Xml.XmlReader" />. </summary>
      <returns>An XML qualified name that indicates the data type of an XML element.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.InitCallbacks">
      <summary>Initializes callback methods that populate objects that map to SOAP-encoded XML data. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.InitIDs">
      <summary>Stores element and attribute names in a <see cref="T:System.Xml.NameTable" /> object. </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.IsReturnValue">
      <summary>Gets or sets a value that should be true for a SOAP 1.1 return value.</summary>
      <returns>true, if the value is a return value. </returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.IsXmlnsAttribute(System.String)">
      <summary>Determines whether an XML attribute name indicates an XML namespace. </summary>
      <returns>true if the XML attribute name indicates an XML namespace; otherwise, false.</returns>
      <param name="name">The name of an XML attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadElementQualifiedName">
      <summary>Makes the <see cref="T:System.Xml.XmlReader" /> read the fully qualified name of the element where it is currently positioned. </summary>
      <returns>The fully qualified name of the current XML element.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadEndElement">
      <summary>Makes the <see cref="T:System.Xml.XmlReader" /> read an XML end tag. </summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.Reader">
      <summary>Gets the <see cref="T:System.Xml.XmlReader" /> object that is being used by <see cref="T:System.Xml.Serialization.XmlSerializationReader" />. </summary>
      <returns>The <see cref="T:System.Xml.XmlReader" /> that is being used by the <see cref="T:System.Xml.Serialization.XmlSerializationReader" />.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationReader.ReaderCount">
      <summary>Gets the current count of the <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>The current count of an <see cref="T:System.Xml.XmlReader" />.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadNull">
      <summary>Instructs the <see cref="T:System.Xml.XmlReader" /> to read the current XML element if the element has a null attribute with the value true. </summary>
      <returns>true if the element has a null="true" attribute value and has been read; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadNullableQualifiedName">
      <summary>Instructs the <see cref="T:System.Xml.XmlReader" /> to read the fully-qualified name of the element where it is currently positioned. </summary>
      <returns>A <see cref="T:System.Xml.XmlQualifiedName" /> that represents the fully qualified name of the current XML element; otherwise, null if a null="true" attribute value is present.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadNullableString">
      <summary>Instructs the <see cref="T:System.Xml.XmlReader" /> to read a simple, text-only XML element that could be null. </summary>
      <returns>The string value; otherwise, null.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadSerializable(System.Xml.Serialization.IXmlSerializable)">
      <summary>Populates an object from its XML representation at the current location of the <see cref="T:System.Xml.XmlReader" />. </summary>
      <returns>An object that implements the <see cref="T:System.Xml.Serialization.IXmlSerializable" /> interface with its members populated from the location of the <see cref="T:System.Xml.XmlReader" />.</returns>
      <param name="serializable">An <see cref="T:System.Xml.Serialization.IXmlSerializable" /> that corresponds to the current position of the <see cref="T:System.Xml.XmlReader" />.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadSerializable(System.Xml.Serialization.IXmlSerializable,System.Boolean)">
      <summary>This method supports the .NET Framework infrastructure and is not intended to be used directly from your code. Populates an object from its XML representation at the current location of the <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.IXmlSerializable" /> interface with its members populated from the location of the <see cref="T:System.Xml.XmlReader" />.
</returns>
      <param name="serializable">An <see cref="T:System.Xml.Serialization.IXmlSerializable" /> that corresponds to the current position of the <see cref="T:System.Xml.XmlReader" />.</param>
      <param name="wrappedAny">true if any elements are wrapped; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadString(System.String)">
      <summary>Produces the result of a call to the <see cref="M:System.Xml.XmlReader.ReadString" /> method appended to the input value. </summary>
      <returns>The result of a call to the <see cref="M:System.Xml.XmlReader.ReadString" /> method appended to the input value.</returns>
      <param name="value">A string to prefix to the result of a call to the <see cref="M:System.Xml.XmlReader.ReadString" /> method.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadString(System.String,System.Boolean)">
      <summary>Returns the result of a call to the <see cref="M:System.Xml.XmlReader.ReadString" /> method of the <see cref="T:System.Xml.XmlReader" /> class, trimmed of white space if required, and appended to the input value.</summary>
      <returns>The result of the read operation appended to the input value.</returns>
      <param name="value">A string that is appended to.</param>
      <param name="trim">true if the result of the read operation should be trimmed; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadTypedNull(System.Xml.XmlQualifiedName)">
      <summary>Reads an XML element that allows null values (xsi:nil = 'true') and returns a generic <see cref="T:System.Nullable`1" /> value. </summary>
      <returns>A generic <see cref="T:System.Nullable`1" /> that represents a null XML value.</returns>
      <param name="type">The <see cref="T:System.Xml.XmlQualifiedName" /> that represents the simple data type for the current location of the <see cref="T:System.Xml.XmlReader" />.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ReadTypedPrimitive(System.Xml.XmlQualifiedName)">
      <summary>Gets the value of the XML node at which the <see cref="T:System.Xml.XmlReader" /> is currently positioned. </summary>
      <returns>The value of the node as a Silverlight value type, if the value is a simple XML Schema data type.</returns>
      <param name="type">The <see cref="T:System.Xml.XmlQualifiedName" /> that represents the simple data type for the current location of the <see cref="T:System.Xml.XmlReader" />.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ShrinkArray(System.Array,System.Int32,System.Type,System.Boolean)">
      <summary>Ensures that a given array, or a copy, is no larger than a specified length. </summary>
      <returns>The existing <see cref="T:System.Array" />, if it is already small enough; otherwise, a new, smaller array that contains the original array's elements up to the size of<paramref name=" length" />.</returns>
      <param name="a">The array that is being checked.</param>
      <param name="length">The maximum length of the array.</param>
      <param name="elementType">The <see cref="T:System.Type" /> of the array's elements.</param>
      <param name="isNullable">true if null for the array, if present for the input array, can be returned; otherwise, a new, smaller array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayBase64(System.Boolean)">
      <summary>Instructs the <see cref="T:System.Xml.XmlReader" /> to read the string value at its current position and return it as a base-64 byte array.</summary>
      <returns>A base-64 byte array; otherwise, null if the value of the <paramref name="isNull" /> parameter is true.</returns>
      <param name="isNull">true to return null; false to return a base-64 byte array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayBase64(System.String)">
      <summary>Produces a base-64 byte array from an input string. </summary>
      <returns>A base-64 byte array.</returns>
      <param name="value">A string to translate into a base-64 byte array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayHex(System.Boolean)">
      <summary>Instructs the <see cref="T:System.Xml.XmlReader" /> to read the string value at its current position and return it as a hexadecimal byte array.</summary>
      <returns>A hexadecimal byte array; otherwise, null if the value of the <paramref name="isNull" /> parameter is true. </returns>
      <param name="isNull">true to return null; false to return a hexadecimal byte array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToByteArrayHex(System.String)">
      <summary>Produces a hexadecimal byte array from an input string.</summary>
      <returns>A hexadecimal byte array.</returns>
      <param name="value">A string to translate into a hexadecimal byte array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToChar(System.String)">
      <summary>Produces a <see cref="T:System.Char" /> object from an input string. </summary>
      <returns>A <see cref="T:System.Char" /> object.</returns>
      <param name="value">A string to translate into a <see cref="T:System.Char" /> object.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToDate(System.String)">
      <summary>Produces a <see cref="T:System.DateTime" /> object from an input string. </summary>
      <returns>A <see cref="T:System.DateTime" />object.</returns>
      <param name="value">A string to translate into a <see cref="T:System.DateTime" /> class object.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToDateTime(System.String)">
      <summary>Produces a <see cref="T:System.DateTime" /> object from an input string. </summary>
      <returns>A <see cref="T:System.DateTime" /> object.</returns>
      <param name="value">A string to translate into a <see cref="T:System.DateTime" /> object.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToEnum(System.String,System.Collections.IDictionary,System.String)">
      <summary>This method supports the .NET Framework infrastructure and is not intended to be used directly from your code. Produces a numeric enumeration value from a string that consists of delimited identifiers that represent constants from the enumerator list. </summary>
      <returns>
A long value that consists of the enumeration value as a series of bitwise OR operations.
</returns>
      <param name="value">A string that consists of delimited identifiers where each identifier represents a constant from the set enumerator list.</param>
      <param name="h">A <see cref="T:System.Collections.IDictionary" /> hashtable that consists of the identifiers as keys and the constants as integral numbers.</param>
      <param name="typeName">The name of the enumeration type.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToTime(System.String)">
      <summary>Produces a <see cref="T:System.DateTime" /> object from a string that represents the time. </summary>
      <returns>A <see cref="T:System.DateTime" /> object.</returns>
      <param name="value">A string to translate into a <see cref="T:System.DateTime" /> object.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlName(System.String)">
      <summary>Decodes an XML name.</summary>
      <returns>A decoded string.</returns>
      <param name="value">An XML name to be decoded.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlNCName(System.String)">
      <summary>Decodes an XML name.</summary>
      <returns>A decoded string.</returns>
      <param name="value">An XML name to be decoded.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlNmToken(System.String)">
      <summary>Decodes an XML name.</summary>
      <returns>A decoded string.</returns>
      <param name="value">An XML name to be decoded.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlNmTokens(System.String)">
      <summary>Decodes an XML name.</summary>
      <returns>A decoded string.</returns>
      <param name="value">An XML name to be decoded.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.ToXmlQualifiedName(System.String)">
      <summary>Obtains an <see cref="T:System.Xml.XmlQualifiedName" /> from a name that might contain a prefix. </summary>
      <returns>An <see cref="T:System.Xml.XmlQualifiedName" /> that represents a namespace-qualified XML name.</returns>
      <param name="value">A name that might contain a prefix.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownNode(System.Object)">
      <summary>Raises an <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" /> event for the current position of the <see cref="T:System.Xml.XmlReader" />. </summary>
      <param name="o">The object that is being deserialized.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationReader.UnknownNode(System.Object,System.String)">
      <summary>Raises an <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" /> event for the current position of the <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="o">The object being deserialized.</param>
      <param name="qnames">A comma-delimited list of XML qualified names.</param>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationWriteCallback">
      <summary>Delegate that is used by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class for serialization of types from SOAP-encoded, non-root XML data. </summary>
      <param name="o"></param>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializationWriter">
      <summary>Abstract class used for controlling serialization by the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateChoiceIdentifierValueException(System.String,System.String,System.String,System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates an unexpected name for an element that adheres to an XML Schema choice element declaration.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="value">The name that is not valid.</param>
      <param name="identifier">The choice element declaration that the name belongs to.</param>
      <param name="name">The expected local name of an element.</param>
      <param name="ns">The expected namespace of an element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateInvalidAnyTypeException(System.Object)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> has been invalidly applied to a member; only members that are of type <see cref="T:System.Xml.XmlNode" />, or derived from <see cref="T:System.Xml.XmlNode" />, are valid.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="o">The object that represents the invalid member.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateInvalidAnyTypeException(System.Type)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates the <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" /> has been invalidly applied to a member; only members that are of type <see cref="T:System.Xml.XmlNode" />, or derived from <see cref="T:System.Xml.XmlNode" />, are valid.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="type">The <see cref="T:System.Type" /> that is invalid.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateInvalidChoiceIdentifierValueException(System.String,System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates a failure while writing an array where an XML Schema choice element declaration is applied.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="type">The type being serialized.</param>
      <param name="identifier">A name for the choice element declaration.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateInvalidEnumValueException(System.Object,System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> for an invalid enumeration value.</summary>
      <returns>An <see cref="T:System.ComponentModel.InvalidEnumArgumentException" />.</returns>
      <param name="value">An object that represents the invalid enumeration.</param>
      <param name="typeName">The XML type name.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateMismatchChoiceException(System.String,System.String,System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that a value for an XML element does not match an enumeration type.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="value">The value that is not valid.</param>
      <param name="elementName">The name of the XML element with an invalid value.</param>
      <param name="enumValue">The valid value.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateUnknownAnyElementException(System.String,System.String)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that an XML element that should adhere to the XML Schema any element declaration cannot be processed.</summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="name">The XML element that cannot be processed.</param>
      <param name="ns">The namespace of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateUnknownTypeException(System.Object)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that a type being serialized is not being used in a valid manner or is unexpectedly encountered. </summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="o">The object whose type cannot be serialized.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.CreateUnknownTypeException(System.Type)">
      <summary>Creates an <see cref="T:System.InvalidOperationException" /> that indicates that a type being serialized is not being used in a valid manner or is unexpectedly encountered. </summary>
      <returns>An <see cref="T:System.InvalidOperationException" /> exception.</returns>
      <param name="type">The type that cannot be serialized.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationWriter.EscapeName">
      <summary>Gets or sets a value that indicates whether the <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" /> method is used to write valid XML.</summary>
      <returns>true if the <see cref="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlQualifiedName(System.Xml.XmlQualifiedName)" /> method returns an encoded name; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromByteArrayBase64(System.Byte[])">
      <summary>Processes a base-64 byte array.</summary>
      <returns>The same byte array that was passed in as an argument.</returns>
      <param name="value">A base-64 <see cref="T:System.Byte" /> array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromByteArrayHex(System.Byte[])">
      <summary>Produces a string from an input hexadecimal byte array.</summary>
      <returns>The byte array value converted to a string.</returns>
      <param name="value">A hexadecimal byte array to translate to a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromChar(System.Char)">
      <summary>Produces a string from an input <see cref="T:System.Char" />.</summary>
      <returns>The <see cref="T:System.Char" /> value converted to a string.</returns>
      <param name="value">A <see cref="T:System.Char" /> to translate to a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromDate(System.DateTime)">
      <summary>Produces a string from a <see cref="T:System.DateTime" /> object.</summary>
      <returns>A string representation of the <see cref="T:System.DateTime" /> that shows the date but no time.</returns>
      <param name="value">A <see cref="T:System.DateTime" /> to translate to a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromDateTime(System.DateTime)">
      <summary>Produces a string from an input <see cref="T:System.DateTime" />.</summary>
      <returns>A string representation of the <see cref="T:System.DateTime" /> that shows the date and time.</returns>
      <param name="value">A <see cref="T:System.DateTime" /> to translate to a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromEnum(System.Int64,System.String[],System.Int64[])">
      <summary>Produces a string that consists of delimited identifiers that represent the enumeration members that have been set.</summary>
      <returns>A string that consists of delimited identifiers, where each represents a member from the set enumerator list.</returns>
      <param name="value">The enumeration value as a series of bitwise OR operations.</param>
      <param name="values">The enumeration's name values.</param>
      <param name="ids">The enumeration's constant values.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromEnum(System.Int64,System.String[],System.Int64[],System.String)">
      <summary>Takes a numeric enumeration value and the names and constants from the enumerator list for the enumeration and returns a string that consists of delimited identifiers that represent the enumeration members that have been set.</summary>
      <returns>A string that consists of delimited identifiers, where each item is one of the values set by the bitwise operation.</returns>
      <param name="value">The enumeration value as a series of bitwise OR operations.</param>
      <param name="values">The values of the enumeration.</param>
      <param name="ids">The constants of the enumeration.</param>
      <param name="typeName">The name of the type. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromTime(System.DateTime)">
      <summary>Produces a string from a <see cref="T:System.DateTime" /> object.</summary>
      <returns>The <see cref="T:System.DateTime" /> object that shows the time but no date.</returns>
      <param name="value">A <see cref="T:System.DateTime" /> that is translated to a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlName(System.String)">
      <summary>Encodes a valid XML name by replacing characters that are not valid with escape sequences.</summary>
      <returns>An encoded string.</returns>
      <param name="name">A string to be used as an XML name.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlNCName(System.String)">
      <summary>Encodes a valid XML local name by replacing characters that are not valid with escape sequences.</summary>
      <returns>An encoded string.</returns>
      <param name="ncName">A string to be used as a local (unqualified) XML name.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlNmToken(System.String)">
      <summary>Encodes an XML name.</summary>
      <returns>An encoded string.</returns>
      <param name="nmToken">An XML name to be encoded.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlNmTokens(System.String)">
      <summary>Encodes a space-delimited sequence of XML names into a single XML name.</summary>
      <returns>An encoded string.</returns>
      <param name="nmTokens">A space-delimited sequence of XML names to be encoded.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlQualifiedName(System.Xml.XmlQualifiedName)">
      <summary>Returns an XML qualified name, with invalid characters replaced by escape sequences. </summary>
      <returns>An XML qualified name, with invalid characters replaced by escape sequences.</returns>
      <param name="xmlQualifiedName">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the XML to be written.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.FromXmlQualifiedName(System.Xml.XmlQualifiedName,System.Boolean)">
      <summary>Produces a string that can be written as an XML qualified name, with invalid characters replaced by escape sequences. </summary>
      <returns>An XML qualified name, with invalid characters replaced by escape sequences.</returns>
      <param name="xmlQualifiedName">An <see cref="T:System.Xml.XmlQualifiedName" /> that represents the XML to be written.</param>
      <param name="ignoreEmpty">true to ignore empty spaces in the string; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.InitCallbacks">
      <summary>Initializes instances of the <see cref="T:System.Xml.Serialization.XmlSerializationWriteCallback" /> delegate to serialize SOAP-encoded XML data. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.TopLevelElement">
      <summary>Initializes object references only while serializing a SOAP-encoded SOAP message.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.Byte[])">
      <summary>Instructs an <see cref="T:System.Xml.XmlWriter" /> object to write an XML attribute that has no namespace specified for its name.</summary>
      <param name="localName">The local name of the XML attribute.</param>
      <param name="value">The value of the XML attribute as a byte array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String)">
      <summary>Instructs the <see cref="T:System.Xml.XmlWriter" /> to write an XML attribute that has no namespace specified for its name. </summary>
      <param name="localName">The local name of the XML attribute.</param>
      <param name="value">The value of the XML attribute as a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String,System.Byte[])">
      <summary>Instructs an <see cref="T:System.Xml.XmlWriter" /> object to write an XML attribute.</summary>
      <param name="localName">The local name of the XML attribute.</param>
      <param name="ns">The namespace of the XML attribute.</param>
      <param name="value">The value of the XML attribute as a byte array.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String,System.String)">
      <summary>Writes an XML attribute. </summary>
      <param name="localName">The local name of the XML attribute.</param>
      <param name="ns">The namespace of the XML attribute.</param>
      <param name="value">The value of the XML attribute as a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteAttribute(System.String,System.String,System.String,System.String)">
      <summary>Writes an XML attribute where the namespace prefix is provided manually. </summary>
      <param name="prefix">The namespace prefix to write.</param>
      <param name="localName">The local name of the XML attribute.</param>
      <param name="ns">The namespace represented by the prefix.</param>
      <param name="value">The value of the XML attribute as a string.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified qualified name in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The name to write, using its prefix if namespace-qualified, in the element text.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.String,System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified qualified name in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The name to write, using its prefix if namespace-qualified, in the element text.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified qualified name in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="value">The name to write, using its prefix if namespace-qualified, in the element text.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementQualifiedName(System.String,System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified qualified name in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="value">The name to write, using its prefix if namespace-qualified, in the element text.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String)">
      <summary>Writes an XML element with a specified value in its body. </summary>
      <param name="localName">The local name of the XML element to be written without namespace qualification.</param>
      <param name="value">The text value of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String,System.String)">
      <summary>Writes an XML element with a specified value in its body. </summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementString(System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.Byte[])">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.Byte[],System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.Byte[])">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.Byte[],System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.String)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="ns">The namespace of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteElementStringRaw(System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element with a specified value in its body.</summary>
      <param name="localName">The local name of the XML element.</param>
      <param name="value">The text value of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEmptyTag(System.String)">
      <summary>Writes an XML element whose body is empty. </summary>
      <param name="name">The local name of the XML element to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEmptyTag(System.String,System.String)">
      <summary>Writes an XML element whose body is empty.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEndElement">
      <summary>Writes a &lt;closing&gt; element tag.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteEndElement(System.Object)">
      <summary>Writes a &lt;closing&gt; element tag.</summary>
      <param name="o">The object being serialized.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNamespaceDeclarations(System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>Writes namespace declaration attributes.</summary>
      <param name="xmlns">The XML namespaces to declare.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableQualifiedNameEncoded(System.String,System.String,System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element whose body contains a valid XML qualified name. <see cref="T:System.Xml.XmlWriter" /> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The XML qualified name to write in the body of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableQualifiedNameLiteral(System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element whose body contains a valid XML qualified name. <see cref="T:System.Xml.XmlWriter" /> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The XML qualified name to write in the body of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringEncoded(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element that contains a string as the body. <see cref="T:System.Xml.XmlWriter" /> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The string to write in the body of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringEncodedRaw(System.String,System.String,System.Byte[],System.Xml.XmlQualifiedName)">
      <summary>Writes a byte array as the body of an XML element. <see cref="T:System.Xml.XmlWriter" /> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The byte array to write in the body of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringEncodedRaw(System.String,System.String,System.String,System.Xml.XmlQualifiedName)">
      <summary>Writes an XML element that contains a string as the body. <see cref="T:System.Xml.XmlWriter" /> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The string to write in the body of the XML element.</param>
      <param name="xsiType">The name of the XML Schema data type to be written to the xsi:type attribute.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringLiteral(System.String,System.String,System.String)">
      <summary>Writes an XML element that contains a string as the body. <see cref="T:System.Xml.XmlWriter" /> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The string to write in the body of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringLiteralRaw(System.String,System.String,System.Byte[])">
      <summary>Writes a byte array as the body of an XML element. <see cref="T:System.Xml.XmlWriter" /> inserts an xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The byte array to write in the body of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullableStringLiteralRaw(System.String,System.String,System.String)">
      <summary>Writes an XML element that contains a string as the body. <see cref="T:System.Xml.XmlWriter" /> inserts a xsi:nil='true' attribute if the string's value is null.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="value">The string to write in the body of the XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagEncoded(System.String)">
      <summary>Writes an XML element with an xsi:nil='true' attribute.</summary>
      <param name="name">The local name of the XML element to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagEncoded(System.String,System.String)">
      <summary>Writes an XML element with an xsi:nil='true' attribute.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagLiteral(System.String)">
      <summary>Writes an XML element with an xsi:nil='true' attribute.</summary>
      <param name="name">The local name of the XML element to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteNullTagLiteral(System.String,System.String)">
      <summary>Writes an XML element with an xsi:nil='true' attribute. </summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationWriter.Writer">
      <summary>Gets the <see cref="T:System.Xml.XmlWriter" /> that is being used by the <see cref="T:System.Xml.Serialization.XmlSerializationWriter" />. </summary>
      <returns>The <see cref="T:System.Xml.XmlWriter" /> used by the class instance.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteSerializable(System.Xml.Serialization.IXmlSerializable,System.String,System.String,System.Boolean)">
      <summary>Writes an object that uses custom XML formatting as an XML element. </summary>
      <param name="serializable">An object that implements the <see cref="T:System.Xml.Serialization.IXmlSerializable" /> interface that uses custom XML formatting.</param>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="isNullable">true to write an xsi:nil='true' attribute if the <see cref="T:System.Xml.Serialization.IXmlSerializable" /> class object is null; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteSerializable(System.Xml.Serialization.IXmlSerializable,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>Instructs <see cref="T:System.Xml.XmlNode" /> to write an object that uses custom XML formatting as an XML element. </summary>
      <param name="serializable">An object that implements the <see cref="T:System.Xml.Serialization.IXmlSerializable" /> interface that uses custom XML formatting.</param>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="isNullable">true to write an xsi:nil='true' attribute if the <see cref="T:System.Xml.Serialization.IXmlSerializable" /> object is null; otherwise, false.</param>
      <param name="wrapped">true to ignore writing the opening element tag; otherwise, false to write the opening element tag.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartDocument">
      <summary>Writes the XML declaration if the writer is positioned at the start of an XML document. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String)">
      <summary>Writes an opening element tag, including any attributes. </summary>
      <param name="name">The local name of the XML element to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String)">
      <summary>Writes an opening element tag, including any attributes. </summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Boolean)">
      <summary>Writes an opening element tag, including any attributes.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="writePrefixed">true to write the element name with a prefix if none is available for the specified namespace; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Object)">
      <summary>Writes an opening element tag, including any attributes.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="o">The object being serialized as an XML element.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Object,System.Boolean)">
      <summary>Writes an opening element tag, including any attributes.</summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="o">The object being serialized as an XML element.</param>
      <param name="writePrefixed">true to write the element name with a prefix if none is available for the specified namespace; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteStartElement(System.String,System.String,System.Object,System.Boolean,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>Writes an opening element tag, including any attributes. </summary>
      <param name="name">The local name of the XML element to write.</param>
      <param name="ns">The namespace of the XML element to write.</param>
      <param name="o">The object being serialized as an XML element.</param>
      <param name="writePrefixed">true to write the element name with a prefix if none is available for the specified namespace; otherwise, false.</param>
      <param name="xmlns">An instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> class that contains prefix and namespace pairs to be used in the generated XML.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteTypedPrimitive(System.String,System.String,System.Object,System.Boolean)">
      <summary>Writes an XML element whose text body is a value of a simple XML Schema data type. </summary>
      <param name="name">The local name of the element to write.</param>
      <param name="ns">The namespace of the element to write.</param>
      <param name="o">The object to be serialized in the element body.</param>
      <param name="xsiType">true if the XML element explicitly specifies the text value's type using the xsi:type attribute; otherwise, false.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteValue(System.Byte[])">
      <summary>Writes a base-64 byte array.</summary>
      <param name="value">The byte array to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteValue(System.String)">
      <summary>Writes a specified string.</summary>
      <param name="value">The string to write.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializationWriter.WriteXsiType(System.String,System.String)">
      <summary>Writes an xsi:type attribute for an XML element that is being serialized into a document. </summary>
      <param name="name">The local name of an XML Schema data type.</param>
      <param name="ns">The namespace of an XML Schema data type.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializationWriter.XmlNamespaces"></member>
    <member name="T:System.Xml.Serialization.XmlSerializer">
      <summary>Serializes and deserializes objects into and from XML documents. The <see cref="T:System.Xml.Serialization.XmlSerializer" /> enables you to control how objects are encoded into XML.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents and deserialize XML documents into objects of the specified type.</summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents and deserialize XML documents into objects of the specified type. Specifies the default namespace for all the XML elements.</summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize. </param>
      <param name="defaultNamespace">The default namespace to use for all the XML elements. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Type[])">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents and deserialize XML documents into objects of a specified type. If a property or field returns an array, the <paramref name="extraTypes" /> parameter specifies objects that can be inserted into the array.</summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize. </param>
      <param name="extraTypes">A <see cref="T:System.Type" /> array of additional object types to serialize. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents and deserialize XML documents into objects of the specified type. Each object to be serialized can itself contain instances of classes, which this overload can override with other classes.</summary>
      <param name="type">The type of the object to serialize. </param>
      <param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlAttributeOverrides,System.Type[],System.Xml.Serialization.XmlRootAttribute,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of type <see cref="T:System.Object" /> into XML document instances and deserialize XML document instances into objects of type <see cref="T:System.Object" />. Each object to be serialized can itself contain instances of classes, which this overload overrides with other classes. This overload also specifies the default namespace for all the XML elements and the class to use as the XML root element.</summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize. </param>
      <param name="overrides">An <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" /> that extends or overrides the behavior of the class specified in the <paramref name="type" /> parameter. </param>
      <param name="extraTypes">A <see cref="T:System.Type" /> array of additional object types to serialize. </param>
      <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that defines the XML root element properties. </param>
      <param name="defaultNamespace">The default namespace of all XML elements in the XML document. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Type,System.Xml.Serialization.XmlRootAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class that can serialize objects of the specified type into XML documents and deserialize an XML document into object of the specified type. It also specifies the class to use as the XML root element.</summary>
      <param name="type">The type of the object that this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can serialize. </param>
      <param name="root">An <see cref="T:System.Xml.Serialization.XmlRootAttribute" /> that represents the XML root element. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.#ctor(System.Xml.Serialization.XmlTypeMapping)">
      <summary>Initializes an instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class using an object that maps one type to another.</summary>
      <param name="xmlTypeMapping">An <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> that maps one type to another. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.CanDeserialize(System.Xml.XmlReader)">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can deserialize a specified XML document.</summary>
      <returns>true if this <see cref="T:System.Xml.Serialization.XmlSerializer" /> can deserialize the object that the <see cref="T:System.Xml.XmlReader" /> points to; otherwise, false.</returns>
      <param name="xmlReader">An <see cref="T:System.Xml.XmlReader" /> that points to the document to deserialize. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.CreateReader">
      <summary>Returns an object used to read the XML document to be serialized.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> used to read the XML document.</returns>
      <exception cref="T:System.NotImplementedException">Any attempt is made to access the method when the method is not overridden in a descendant class. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.CreateWriter">
      <summary>When overridden in a derived class, returns a writer used to serialize the object.</summary>
      <returns>An instance that implements the <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> class.</returns>
      <exception cref="T:System.NotImplementedException">Any attempt is made to access the method when the method is not overridden in a descendant class. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)">
      <summary>Deserializes the XML document contained by the specified <see cref="T:System.IO.Stream" />.</summary>
      <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
      <param name="stream">The <see cref="T:System.IO.Stream" /> that contains the XML document to deserialize. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.TextReader)">
      <summary>Deserializes the XML document contained by the specified <see cref="T:System.IO.TextReader" />.</summary>
      <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
      <param name="textReader">The <see cref="T:System.IO.TextReader" /> that contains the XML document to deserialize. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during deserialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.Serialization.XmlSerializationReader)">
      <summary>Deserializes the XML document contained by the specified <see cref="T:System.Xml.Serialization.XmlSerializationReader" />.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">The <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> that contains the XML document to deserialize. </param>
      <exception cref="T:System.NotImplementedException">Any attempt is made to access the method when the method is not overridden in a descendant class. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.Xml.XmlReader)">
      <summary>Deserializes the XML document contained by the specified <see cref="T:System.xml.XmlReader" />.</summary>
      <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
      <param name="xmlReader">The <see cref="T:System.xml.XmlReader" /> that contains the XML document to deserialize. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during deserialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[])">
      <summary>Returns an array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects created from an array of <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> objects.</summary>
      <returns>An array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects.</returns>
      <param name="mappings">An array of <see cref="T:System.Xml.Serialization.XmlTypeMapping" /> that maps one type to another. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.FromMappings(System.Xml.Serialization.XmlMapping[],System.Type)">
      <summary>Returns an instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class from the specified mappings.</summary>
      <returns>An instance of the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class.</returns>
      <param name="mappings">An array of <see cref="T:System.Xml.Serialization.XmlMapping" /> objects.</param>
      <param name="type">The <see cref="T:System.Type" /> of the deserialized object.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.FromTypes(System.Type[])">
      <summary>Returns an array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects created from an array of types.</summary>
      <returns>An array of <see cref="T:System.Xml.Serialization.XmlSerializer" /> objects.</returns>
      <param name="types">An array of <see cref="T:System.Type" /> objects. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object)">
      <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> used to write the XML document. </param>
      <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.Stream,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.IO.Stream" /> that references the specified namespaces.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> used to write the XML document. </param>
      <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
      <param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> referenced by the object. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)">
      <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the XML document. </param>
      <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.IO.TextWriter" /> and references the specified namespaces.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the XML document. </param>
      <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
      <param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> that contains namespaces for the generated XML document. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Object,System.Xml.Serialization.XmlSerializationWriter)">
      <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.Xml.Serialization.XmlSerializationWriter" />.</summary>
      <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
      <param name="writer">The <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> used to write the XML document. </param>
      <exception cref="T:System.NotImplementedException">Any attempt is made to access the method when the method is not overridden in a descendant class. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
      <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="xmlWriter">The <see cref="T:System.xml.XmlWriter" /> used to write the XML document. </param>
      <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializer.Serialize(System.Xml.XmlWriter,System.Object,System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>Serializes the specified <see cref="T:System.Object" /> and writes the XML document to a file using the specified <see cref="T:System.Xml.XmlWriter" /> and references the specified namespaces.</summary>
      <param name="xmlWriter">The <see cref="T:System.xml.XmlWriter" /> used to write the XML document. </param>
      <param name="o">The <see cref="T:System.Object" /> to serialize. </param>
      <param name="namespaces">The <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> referenced by the object. </param>
      <exception cref="T:System.InvalidOperationException">An error occurred during serialization. The original exception is available using the <see cref="P:System.Exception.InnerException" /> property. </exception>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerImplementation">
      <summary>Defines the reader, writer, and methods for pre-generated, typed serializers.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerImplementation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerImplementation" /> class. </summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerImplementation.CanSerialize(System.Type)">
      <summary>Gets a value that determines whether a type can be serialized.</summary>
      <returns>true if the type can be serialized; otherwise, false.</returns>
      <param name="type">The <see cref="T:System.Type" /> to be serialized.</param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerImplementation.GetSerializer(System.Type)">
      <summary>Returns a serializer for the specified type.</summary>
      <returns>An instance of a type derived from the <see cref="T:System.Xml.Serialization.XmlSerializer" /> class. </returns>
      <param name="type">The <see cref="T:System.Type" /> to be serialized.</param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerImplementation.Reader">
      <summary>Gets the XML reader object that is used by the serializer.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlSerializationReader" /> that is used to read an XML document or data stream.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerImplementation.Writer">
      <summary>Gets the XML writer object for the serializer.</summary>
      <returns>An <see cref="T:System.Xml.Serialization.XmlSerializationWriter" /> that is used to write to an XML data stream or document.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerImplementation.XmlReadMethods">
      <summary>Gets the collection of methods that is used to read an XML data stream.</summary>
      <returns>A <see cref="T:System.Collections.Hashtable" /> that contains the methods.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerImplementation.XmlTypedSerializers">
      <summary>Gets the collection of typed XML serializers found in the assembly.</summary>
      <returns>A <see cref="T:System.Collections.Hashtable" /> that contains the typed serializers.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerImplementation.XmlWriteMethods">
      <summary>Get the collection of methods used to write to an XML data stream.</summary>
      <returns>A <see cref="T:System.Collections.Hashtable" /> that contains the methods.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlSerializerNamespaces">
      <summary>Contains the XML namespaces and prefixes that the <see cref="T:System.Xml.Serialization.XmlSerializer" /> uses to generate qualified names in an XML-document instance.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> class.</summary>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.Serialization.XmlSerializerNamespaces)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> class, using the specified instance of XmlSerializerNamespaces that contains the collection of prefix and namespace pairs.</summary>
      <param name="namespaces">An instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> that contains the namespace and prefix pairs. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.#ctor(System.Xml.XmlQualifiedName[])">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> class.</summary>
      <param name="namespaces">An array of <see cref="T:System.Xml.XmlQualifiedName" /> objects. </param>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.Add(System.String,System.String)">
      <summary>Adds a prefix and namespace pair to an <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> object.</summary>
      <param name="prefix">The prefix associated with an XML namespace. </param>
      <param name="ns">An XML namespace. </param>
    </member>
    <member name="P:System.Xml.Serialization.XmlSerializerNamespaces.Count">
      <summary>Gets the number of prefix and namespace pairs in the collection.</summary>
      <returns>The number of prefix and namespace pairs in the collection.</returns>
    </member>
    <member name="M:System.Xml.Serialization.XmlSerializerNamespaces.ToArray">
      <summary>Gets the array of prefix and namespace pairs in an <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" /> object.</summary>
      <returns>An array of <see cref="T:System.Xml.XmlQualifiedName" /> objects that are used as qualified names in an XML document.</returns>
    </member>
    <member name="T:System.Xml.Serialization.XmlTypeMapping">
      <summary>Contains a mapping of one type to another.</summary>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.TypeFullName">
      <summary>The fully qualified type name that includes the namespace (or namespaces) and type.</summary>
      <returns>The fully qualified type name.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.TypeName">
      <summary>Gets the type name of the mapped object.</summary>
      <returns>The type name of the mapped object.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.XsdTypeName">
      <summary>Gets the XML element name of the mapped object.</summary>
      <returns>The XML element name of the mapped object. The default is the class name of the object.</returns>
    </member>
    <member name="P:System.Xml.Serialization.XmlTypeMapping.XsdTypeNamespace">
      <summary>Gets the XML namespace of the mapped object.</summary>
      <returns>The XML namespace of the mapped object. The default is an empty string ("").</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\2.0.31005.0\Libraries\Client\System.Xml.Utils.Xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xml.Utils</name>
  </assembly>
  <members>
    <member name="T:System.Xml.Resolvers.XmlKnownDtds">
      <summary>
                    The <see cref="T:System.Xml.Resolvers.XmlKnownDtds" /> enumeration is used by the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> and defines which well-known DTDs the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> recognizes.
                </summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.None">
      <summary>
                    Specifies that the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> will not recognize any of the predefined DTDs.
                </summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.Xhtml10">
      <summary>
                    Specifies that the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> will recognize DTDs and entities that are defined in XHTML 1.0. 
                </summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.Rss091">
      <summary>
                    Specifies that the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> will recognize DTDs and entities that are defined in RSS 0.91.
                </summary>
    </member>
    <member name="F:System.Xml.Resolvers.XmlKnownDtds.All">
      <summary>
                    Specifies that the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> will recognize all currently supported DTDs. This is the default behavior.
                </summary>
    </member>
    <member name="T:System.Xml.Resolvers.XmlPreloadedResolver">
      <summary>
                    The <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> type is used to prepopulate the cache with DTDs or XML streams. 
                </summary>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> class. 
                </summary>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.Resolvers.XmlKnownDtds)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> class with the specified preloaded well-known DTDs. 
                </summary>
      <param name="preloadedDtds">
                    The well-known DTDs that should be prepopulated into the cache. 
                </param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> class with the specified fallback resolver.
                </summary>
      <param name="fallbackResolver">XmlResolver, XmlXapResolver, or your own resolver.
                </param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver,System.Xml.Resolvers.XmlKnownDtds)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> class with the specified fallback resolver and preloaded well-known DTDs. 
                </summary>
      <param name="fallbackResolver">XmlResolver, XmlXapResolver, or your own resolver.
                </param>
      <param name="preloadedDtds">
                    The well-known DTDs that should be prepopulated into cache. 
                </param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.#ctor(System.Xml.XmlResolver,System.Xml.Resolvers.XmlKnownDtds,System.Collections.Generic.IEqualityComparer{System.Uri})">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> class with the specified fallback resolver, preloaded well-known DTDs and URI equality comparer.
                </summary>
      <param name="fallbackResolver">XmlResolver, XmlXapResolver, or your own resolver.
                </param>
      <param name="preloadedDtds">
                    The well-known DTDs that should be prepopulated into cache.
                </param>
      <param name="uriComparer">
                    The implementation of the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> generic interface to use when comparing URIs.
                </param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.Byte[])">
      <summary>
                    Adds a <see cref="T:System.IO.Stream" />, byte array, or string with preloaded data to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.
                </summary>
      <param name="uri">
                    The URI of the data that is being added to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store.
                </param>
      <param name="value">
                    A byte array with the data corresponding to the provided URI.
                </param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.Byte[],System.Int32,System.Int32)">
      <summary>
                    Adds a <see cref="T:System.IO.Stream" />, byte array, or string with preloaded data to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.
                </summary>
      <param name="uri">
                    The URI of the data that is being added to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store.
                </param>
      <param name="value">
                    A byte array with the data corresponding to the provided URI.
                </param>
      <param name="offset">
                    The offset in the provided byte array where the data starts.
                </param>
      <param name="count">
                    The number of bytes to read from the byte array, starting at the provided offset.
                </param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.IO.Stream)">
      <summary>
                    Adds a <see cref="T:System.IO.Stream" />, byte array, or string with preloaded data to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.
                </summary>
      <param name="uri">
                    The URI of the data that is being added to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store.
                </param>
      <param name="value">
                    A <see cref="T:System.IO.Stream" /> with the data corresponding to the provided URI.
                </param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Add(System.Uri,System.String)">
      <summary>
                    Adds a <see cref="T:System.IO.Stream" />, byte array, or string with preloaded data to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store and maps it to a URI. If the store already contains a mapping for the same URI, the existing mapping is overridden.
                </summary>
      <param name="uri">
                    The URI of the data that is being added to the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store.
                </param>
      <param name="value">
                    A String with the data corresponding to the provided URI.
                </param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.GetEntity(System.Uri,System.String,System.Type)">
      <summary>
                    Maps a URI to an object that contains the actual resource. 
                </summary>
      <returns>
                    A <see cref="T:System.IO.Stream" /> or <see cref="T:System.IO.TextReader" /> object.
                </returns>
      <param name="absoluteUri">
                    The URI returned from <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />.
                </param>
      <param name="role">
                    The current version of the .NET Framework for Silverlight does not use this parameter when resolving URIs. This is provided for future extensibility purposes. For example, this can be mapped to the xlink:role and used as an implementation specific argument in other scenarios.
                </param>
      <param name="ofObjectToReturn">
                    The type of object to return. The <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> supports <see cref="T:System.IO.Stream" /> objects and <see cref="T:System.IO.TextReader" /> objects for URIs that were added as String. If the requested type is not supported by the resolver, an exception will be thrown. Use the SupportsType method to determine if a certain Type is supported by this resolver.
                </param>
    </member>
    <member name="P:System.Xml.Resolvers.XmlPreloadedResolver.PreloadedUris">
      <summary>
                    Gets a collection of preloaded URIs.
                </summary>
      <returns>
                    The collection of preloaded URIs.
                </returns>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.Remove(System.Uri)">
      <summary>
                    Removes the data corresponding to the URI from the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />. 
                </summary>
      <param name="uri">
                    The URI of the data that should be removed from the <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" /> store.
                </param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.ResolveUri(System.Uri,System.String)">
      <summary>
                    Resolves the absolute URI from the base and relative URIs.
                </summary>
      <returns>
                    A <see cref="T:System.Uri" /> representing the absolute URI or null if the relative URI cannot be resolved.
                </returns>
      <param name="baseUri">
                    The base URI used to resolve the relative URI.
                </param>
      <param name="relativeUri">
                    The URI to resolve. The URI can be absolute or relative. If absolute, this value effectively replaces the <paramref name="baseUri" /> value. If relative, it combines with the <paramref name="baseUri" /> to make an absolute URI.
                </param>
    </member>
    <member name="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)">
      <summary>
                    Returns true if the resolver’s GetEntity method can resolve the provided URI into an instance of the provided <see cref="T:System.Type" />.
                </summary>
      <param name="absoluteUri"></param>
      <param name="type">
                    The requested <see cref="T:System.Type" />.
                </param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\2.0.31005.0\ReferenceAssemblies\microsoft.visualbasic.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Microsoft.VisualBasic</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualBasic.CallType">
      <summary>
                    Indicates the type of procedure being invoked when calling the CallByName function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Method">
      <summary>
                    A method is being invoked.  This member is equivalent to the Visual Basic constant vbMethod.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Get">
      <summary>
                    A property value is being retrieved.  This member is equivalent to the Visual Basic constant vbGet.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Let">
      <summary>
                    An Object property value is being determined. This member is equivalent to the Visual Basic constant vbLet.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CallType.Set">
      <summary>
                    A property value is being determined.  This member is equivalent to the Visual Basic constant vbSet.
                </summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Collection">
      <summary>
                    A Visual Basic Collection is an ordered set of items that can be referred to as a unit.
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.#ctor">
      <summary>
                    Creates and returns a new Visual Basic Collection Object (Visual Basic).
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)">
      <summary>
                    Adds an element to a Collection object.
                </summary>
      <param name="Item">
                    Required. An object of any type that specifies the element to add to the collection.
                </param>
      <param name="Key">
                    Optional. A unique String expression that specifies a key string that can be used instead of a positional index to access this new element in the collection.
                </param>
      <param name="Before">
                    Optional. An expression that specifies a relative position in the collection. The element to be added is placed in the collection before the element identified by the <paramref name="Before" /> argument. If <paramref name="Before" /> is a numeric expression, it must be a number from 1 through the value of the collection's Count Property (Collection Object). If <paramref name="Before" /> is a String expression, it must correspond to the key string specified when the element being referred to was added to the collection. You cannot specify both <paramref name="Before" /> and <paramref name="After" />.
                </param>
      <param name="After">
                    Optional. An expression that specifies a relative position in the collection. The element to be added is placed in the collection after the element identified by the <paramref name="After" /> argument. If <paramref name="After" /> is a numeric expression, it must be a number from 1 through the value of the collection's Count property. If <paramref name="After" /> is a String expression, it must correspond to the key string specified when the element referred to was added to the collection. You cannot specify both <paramref name="Before" /> and <paramref name="After" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Clear">
      <summary>
                    Deletes all elements of a Visual Basic Collection object.
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Contains(System.String)">
      <summary>
                    Returns a Boolean value indicating whether a Visual Basic Collection object contains an element with a specific key.
                </summary>
      <returns>
                    Returns a Boolean value indicating whether a Visual Basic Collection object contains an element with a specific key.
                </returns>
      <param name="Key">
                    Required. A String expression that specifies the key for which to search the elements of the collection.
                </param>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Count">
      <summary>
                    Returns an Integer containing the number of elements in a collection. Read-only.
                </summary>
      <returns>
                    Returns an Integer containing the number of elements in a collection. Read-only.
                </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.GetEnumerator">
      <summary>
                    Returns a reference to an enumerator object, which is used to iterate over a Collection Object (Visual Basic).
                </summary>
      <returns>
                    Returns a reference to an enumerator object, which is used to iterate over a Collection Object (Visual Basic).
                </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>
                    Copies the elements of the <see cref="T:Microsoft.VisualBasic.Collection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index. Implements the <see cref="T:System.Collections.ICollection" /> interface.
                </summary>
      <param name="array">
                    The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:Microsoft.VisualBasic.Collection" /> object. The <see cref="T:System.Array" /> must have zero-based indexing. 
                </param>
      <param name="index">
                    The zero-based index in <paramref name="array" /> at which copying begins. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional.
                
                    -or- 
                <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.
                
                    -or- 
                
                    The number of elements in the source <see cref="T:Microsoft.VisualBasic.Collection" /> object is greater than the available space from <paramref name="index" /> to the end of the destination <paramref name="array" />.
                </exception>
      <exception cref="T:System.InvalidCastException">
                    The type of the source <see cref="T:Microsoft.VisualBasic.Collection" /> object cannot be cast automatically to the type of the destination <paramref name="array" />. 
                </exception>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.System#Collections#ICollection#Count">
      <summary>
                    Gets the number of items in this collection. Implements the <see cref="T:System.Collections.ICollection" /> interface.
                </summary>
      <returns>
                    The number of items in this collection.
                </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Returns an enumerator that iterates through the collection. Implements the <see cref="T:System.Collections.ICollection" /> interface.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
                </returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.System#Collections#ICollection#IsSynchronized">
      <summary>
                    Gets a value indicating whether access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object is synchronized (thread safe). Implements the <see cref="T:System.Collections.ICollection" /> interface.
                </summary>
      <returns>
                    Returns True if access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object is synchronized (thread safe); otherwise, False.
                </returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.System#Collections#ICollection#SyncRoot">
      <summary>
                    Gets an object that can be used to synchronize access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object. Implements the <see cref="T:System.Collections.ICollection" /> interface.
                </summary>
      <returns>
                    An object that can be used to synchronize access to the <see cref="T:Microsoft.VisualBasic.Collection" /> object.
                </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.System#Collections#IList#Add(System.Object)">
      <summary>
                    Adds an item to the <see cref="T:Microsoft.VisualBasic.Collection" /> object. Implements the <see cref="T:System.Collections.IList" /> interface.
                </summary>
      <returns>
                    The position into which the new element was inserted.
                </returns>
      <param name="value">
                    The <see cref="T:System.Object" /> to add to the <see cref="T:Microsoft.VisualBasic.Collection" /> object. 
                </param>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.
                
                    -or- 
                
                    The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size. 
                </exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.System#Collections#IList#Clear">
      <summary>
                    Removes all items from the <see cref="T:Microsoft.VisualBasic.Collection" /> object. Implements the <see cref="T:System.Collections.IList" /> interface.
                </summary>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:System.Collections.IList" /> is read-only. 
                </exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.System#Collections#IList#Contains(System.Object)">
      <summary>
                    Determines whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object contains a specific value. Implements the <see cref="T:System.Collections.IList" /> interface.
                </summary>
      <returns>
                    Returns True if the <see cref="T:System.Object" /> is found in the <see cref="T:Microsoft.VisualBasic.Collection" /> object; otherwise, False.
                </returns>
      <param name="value">
                    The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object. 
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.System#Collections#IList#IndexOf(System.Object)">
      <summary>
                    Determines the index of a specific item in the <see cref="T:Microsoft.VisualBasic.Collection" /> object. Implements the <see cref="T:System.Collections.IList" /> interface.
                </summary>
      <returns>
                    The index of <paramref name="value" /> if found in the collection; otherwise, -1.
                </returns>
      <param name="value">
                    The <see cref="T:System.Object" /> to locate in the <see cref="T:Microsoft.VisualBasic.Collection" /> object. 
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>
                    Inserts an item to the <see cref="T:Microsoft.VisualBasic.Collection" /> object at the specified index. Implements the <see cref="T:System.Collections.IList" /> interface.
                </summary>
      <param name="index">
                    The zero-based index at which <paramref name="value" /> should be inserted. 
                </param>
      <param name="value">
                    The <see cref="T:System.Object" /> to insert into the <see cref="T:Microsoft.VisualBasic.Collection" /> object. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.
                
                    -or- 
                
                    The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size. 
                </exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="value" /> is null reference in the <see cref="T:Microsoft.VisualBasic.Collection" /> object.
                </exception>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.System#Collections#IList#IsFixedSize">
      <summary>
                    Gets a value indicating whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size. Implements the <see cref="T:System.Collections.IList" /> interface.
                </summary>
      <returns>
                    Returns True if the <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size; otherwise, False.
                </returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.System#Collections#IList#IsReadOnly">
      <summary>
                    Gets a value indicating whether the <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only. Implements the <see cref="T:System.Collections.IList" /> interface.
                </summary>
      <returns>
                    Returns True if the <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only; otherwise, False.
                </returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.System#Collections#IList#Item(System.Int32)">
      <summary>
                    Gets or sets the element at the specified index. Implements the <see cref="T:System.Collections.IList" /> interface
                </summary>
      <returns>
                    The element at the specified index.
                </returns>
      <param name="index">
                    The zero-based index of the element to get or set. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The property is set and the <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only. 
                </exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.System#Collections#IList#Remove(System.Object)">
      <summary>
                    Removes the first occurrence of a specific object from the <see cref="T:Microsoft.VisualBasic.Collection" /> object. Implements the <see cref="T:System.Collections.IList" /> interface.
                </summary>
      <param name="value">
                    The <see cref="T:System.Object" /> to remove from the <see cref="T:Microsoft.VisualBasic.Collection" /> object. 
                </param>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.
                
                    -or- 
                
                    The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size. 
                </exception>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>
                    Removes the <see cref="T:Microsoft.VisualBasic.Collection" /> object item at the specified index. Implements the <see cref="T:System.Collections.IList" /> interface.
                </summary>
      <param name="index">
                    The zero-based index of the item to remove. 
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:Microsoft.VisualBasic.Collection" /> object. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="T:Microsoft.VisualBasic.Collection" /> object is read-only.
                
                    -or- 
                
                    The <see cref="T:Microsoft.VisualBasic.Collection" /> object has a fixed size. 
                </exception>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Item(System.Int32)">
      <summary>
                    Returns a specific element of a Collection object either by position or by key. Read-only.
                </summary>
      <returns>
                    Returns a specific element of a Collection object either by position or by key. Read-only.
                </returns>
      <param name="Index">
                    (A) A numeric expression that specifies the position of an element of the collection. <paramref name="Index" /> must be a number from 1 through the value of the collection's Count Property (Collection Object). Or (B) An Object expression that specifies the position or key string of an element of the collection.
                </param>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Item(System.Object)">
      <summary>
                    Returns a specific element of a Collection object either by position or by key. Read-only.
                </summary>
      <returns>
                    Returns a specific element of a Collection object either by position or by key. Read-only.
                </returns>
      <param name="Index">
                    (A) A numeric expression that specifies the position of an element of the collection. <paramref name="Index" /> must be a number from 1 through the value of the collection's Count Property (Collection Object). Or (B) An Object expression that specifies the position or key string of an element of the collection.
                </param>
    </member>
    <member name="P:Microsoft.VisualBasic.Collection.Item(System.String)">
      <summary>
                    Returns a specific element of a Collection object either by position or by key. Read-only.
                </summary>
      <returns>
                    Returns a specific element of a Collection object either by position or by key. Read-only.
                </returns>
      <param name="Key">
                    A unique String expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection. <paramref name="Key" /> must correspond to the <paramref name="Key" /> argument specified when the element was added to the collection.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)">
      <summary>
                    Removes an element from a Collection object.
                </summary>
      <param name="Index">
                    A numeric expression that specifies the position of an element of the collection. <paramref name="Index" /> must be a number from 1 through the value of the collection's Count Property (Collection Object).
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Collection.Remove(System.String)">
      <summary>
                    Removes an element from a Collection object.
                </summary>
      <param name="Key">
                    A unique String expression that specifies a key string that can be used, instead of a positional index, to access an element of the collection. <paramref name="Key" /> must correspond to the <paramref name="Key" /> argument specified when the element was added to the collection.
                </param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompareMethod">
      <summary>
                    Indicates how to compare strings when calling comparison functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CompareMethod.Binary">
      <summary>
                    Performs a binary comparison. This member is equivalent to the Visual Basic constant vbBinaryCompare.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CompareMethod.Text">
      <summary>
                    Performs a textual comparison. This member is equivalent to the Visual Basic constant vbTextCompare.
                </summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Constants">
      <summary>
                    The Constants module contains miscellaneous constants. These constants can be used anywhere in your code.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbArray">
      <summary>
                    Indicates the type of a variant object, returned by the VarType function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbBack">
      <summary>
                    Represents a backspace character for print and display functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbBinaryCompare">
      <summary>
                    Indicates how to compare strings when calling comparison functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbBoolean">
      <summary>
                    Indicates the type of a variant object, returned by the VarType function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbByte">
      <summary>
                    Indicates the type of a variant object, returned by the VarType function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCr">
      <summary>
                    Represents a carriage-return character for print and display functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCrLf">
      <summary>
                    Represents a carriage-return character combined with a linefeed character for print and display functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbCurrency">
      <summary>
                    Indicates the type of a variant object, returned by the VarType function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDate">
      <summary>
                    Indicates the type of a variant object, returned by the VarType function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDecimal">
      <summary>
                    Indicates the type of a variant object, returned by the VarType function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbDouble">
      <summary>
                    Indicates the type of a variant object, returned by the VarType function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbEmpty">
      <summary>
                    Indicates the type of a variant object, returned by the VarType function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFalse">
      <summary>
                    Indicates a Boolean value or whether the default should be used when calling number-formatting functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFirstFourDays">
      <summary>
                    Indicates the first week of the year to use when calling date-related functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFirstFullWeek">
      <summary>
                    Indicates the first week of the year to use when calling date-related functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFirstJan1">
      <summary>
                    Indicates the first week of the year to use when calling date-related functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFormFeed">
      <summary>
                    Represents a form-feed character for print functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbFriday">
      <summary>
                    Indicates the first day of the week to use when calling date-related functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbGeneralDate">
      <summary>
                    Indicates how to display dates when calling the FormatDateTime function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbGet">
      <summary>
                    Indicates the type of procedure being invoked when calling the CallByName function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbInteger">
      <summary>
                    Indicates the type of a variant object, returned by the VarType function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLet">
      <summary>
                    Indicates the type of procedure being invoked when calling the CallByName function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLf">
      <summary>
                    Represents a linefeed character for print and display functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLong">
      <summary>
                    Indicates the type of a variant object, returned by the VarType function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLongDate">
      <summary>
                    Indicates how to display dates when calling the FormatDateTime function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbLongTime">
      <summary>
                    Indicates how to display dates when calling the FormatDateTime function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMethod">
      <summary>
                    Indicates the type of procedure being invoked when calling the CallByName function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbMonday">
      <summary>
                    Indicates the first day of the week to use when calling date-related functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNewLine">
      <summary>
                    Represents a newline character for print and display functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNull">
      <summary>
                    Indicates the type of a variant object, returned by the VarType function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNullChar">
      <summary>
                    Represents a null character for print and display functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbNullString">
      <summary>
                    Represents a zero-length string for print and display functions, and for calling external procedures.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbObject">
      <summary>
                    Indicates the type of a variant object, returned by the VarType function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbObjectError">
      <summary>
                    Represents the object error number. User-defined error numbers should be greater than this value.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSaturday">
      <summary>
                    Indicates the first day of the week to use when calling date-related functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSet">
      <summary>
                    Indicates the type of procedure being invoked when calling the CallByName function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbShortDate">
      <summary>
                    Indicates how to display dates when calling the FormatDateTime function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbShortTime">
      <summary>
                    Indicates how to display dates when calling the FormatDateTime function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSingle">
      <summary>
                    Indicates the type of a variant object, returned by the VarType function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbString">
      <summary>
                    Indicates the type of a variant object, returned by the VarType function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbSunday">
      <summary>
                    Indicates the first day of the week to use when calling date-related functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTab">
      <summary>
                    Represents a tab character for print and display functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTextCompare">
      <summary>
                    Indicates how to compare strings when calling comparison functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbThursday">
      <summary>
                    Indicates the first day of the week to use when calling date-related functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTrue">
      <summary>
                    Indicates a Boolean value or whether the default should be used when calling number-formatting functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbTuesday">
      <summary>
                    Indicates the first day of the week to use when calling date-related functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUseDefault">
      <summary>
                    Indicates a Boolean value or whether the default should be used when calling number-formatting functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUserDefinedType">
      <summary>
                    Indicates the type of a variant object, returned by the VarType function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUseSystem">
      <summary>
                    Indicates the first week of the year to use when calling date-related functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbUseSystemDayOfWeek">
      <summary>
                    Indicates the first day of the week to use when calling date-related functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbVariant">
      <summary>
                    Indicates the type of a variant object, returned by the VarType function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbVerticalTab">
      <summary>
                    Represents a carriage-return character for print functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.Constants.vbWednesday">
      <summary>
                    Indicates the first day of the week to use when calling date-related functions.
                </summary>
    </member>
    <member name="T:Microsoft.VisualBasic.ControlChars">
      <summary>
                    The ControlChars module contains constants used as control characters. These constants can be used anywhere in your code.
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.ControlChars.#ctor">
      <summary>
                    Initializes a new instance of the T:Microsoft.VisualBasic.ControlChars class. 
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Back">
      <summary>
                    When you call print and display functions, you can use the following constants in your code in place of the actual values.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Cr">
      <summary>
                    When you call print and display functions, you can use the following constants in your code in place of the actual values.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.CrLf">
      <summary>
                    When you call print and display functions, you can use the following constants in your code in place of the actual values.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.FormFeed">
      <summary>
                    When you call print and display functions, you can use the following constants in your code in place of the actual values.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Lf">
      <summary>
                    When you call print and display functions, you can use the following constants in your code in place of the actual values.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.NewLine">
      <summary>
                    When you call print and display functions, you can use the following constants in your code in place of the actual values.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.NullChar">
      <summary>
                    When you call print and display functions, you can use the following constants in your code in place of the actual values.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Quote">
      <summary>
                    When you call print and display functions, you can use the following constants in your code in place of the actual values.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.Tab">
      <summary>
                    When you call print and display functions, you can use the following constants in your code in place of the actual values.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.ControlChars.VerticalTab">
      <summary>
                    When you call print and display functions, you can use the following constants in your code in place of the actual values.
                </summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Conversion">
      <summary>
                    The Conversion module contains the procedures used to perform various conversion operations.
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.ErrorToString">
      <summary>
                    Returns the error message that corresponds to a given error number.
                </summary>
      <returns>
                    Returns the error message that corresponds to a given error number.
                </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)">
      <summary>
                    Returns the error message that corresponds to a given error number.
                </summary>
      <returns>
                    Returns the error message that corresponds to a given error number.
                </returns>
      <param name="ErrorNumber">
                    Optional. Any valid error number.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)">
      <summary>
                    Return the integer portion of a number.
                </summary>
      <returns>
                    Return the integer portion of a number.
                </returns>
      <param name="Number">
                    Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)">
      <summary>
                    Return the integer portion of a number.
                </summary>
      <returns>
                    Return the integer portion of a number.
                </returns>
      <param name="Number">
                    Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)">
      <summary>
                    Return the integer portion of a number.
                </summary>
      <returns>
                    Return the integer portion of a number.
                </returns>
      <param name="Number">
                    Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)">
      <summary>
                    Return the integer portion of a number.
                </summary>
      <returns>
                    Return the integer portion of a number.
                </returns>
      <param name="Number">
                    Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)">
      <summary>
                    Return the integer portion of a number.
                </summary>
      <returns>
                    Return the integer portion of a number.
                </returns>
      <param name="Number">
                    Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)">
      <summary>
                    Return the integer portion of a number.
                </summary>
      <returns>
                    Return the integer portion of a number.
                </returns>
      <param name="Number">
                    Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)">
      <summary>
                    Return the integer portion of a number.
                </summary>
      <returns>
                    Return the integer portion of a number.
                </returns>
      <param name="Number">
                    Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)">
      <summary>
                    Returns a string representing the hexadecimal value of a number.
                </summary>
      <returns>
                    Returns a string representing the hexadecimal value of a number.
                </returns>
      <param name="Number">
                    Required. Any valid numeric expression or String expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)">
      <summary>
                    Returns a string representing the hexadecimal value of a number.
                </summary>
      <returns>
                    Returns a string representing the hexadecimal value of a number.
                </returns>
      <param name="Number">
                    Required. Any valid numeric expression or String expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)">
      <summary>
                    Returns a string representing the hexadecimal value of a number.
                </summary>
      <returns>
                    Returns a string representing the hexadecimal value of a number.
                </returns>
      <param name="Number">
                    Required. Any valid numeric expression or String expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)">
      <summary>
                    Returns a string representing the hexadecimal value of a number.
                </summary>
      <returns>
                    Returns a string representing the hexadecimal value of a number.
                </returns>
      <param name="Number">
                    Required. Any valid numeric expression or String expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)">
      <summary>
                    Returns a string representing the hexadecimal value of a number.
                </summary>
      <returns>
                    Returns a string representing the hexadecimal value of a number.
                </returns>
      <param name="Number">
                    Required. Any valid numeric expression or String expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)">
      <summary>
                    Returns a string representing the hexadecimal value of a number.
                </summary>
      <returns>
                    Returns a string representing the hexadecimal value of a number.
                </returns>
      <param name="Number">
                    Required. Any valid numeric expression or String expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)">
      <summary>
                    Returns a string representing the hexadecimal value of a number.
                </summary>
      <returns>
                    Returns a string representing the hexadecimal value of a number.
                </returns>
      <param name="Number">
                    Required. Any valid numeric expression or String expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)">
      <summary>
                    Returns a string representing the hexadecimal value of a number.
                </summary>
      <returns>
                    Returns a string representing the hexadecimal value of a number.
                </returns>
      <param name="Number">
                    Required. Any valid numeric expression or String expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)">
      <summary>
                    Returns a string representing the hexadecimal value of a number.
                </summary>
      <returns>
                    Returns a string representing the hexadecimal value of a number.
                </returns>
      <param name="Number">
                    Required. Any valid numeric expression or String expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)">
      <summary>
                    Return the integer portion of a number.
                </summary>
      <returns>
                    Return the integer portion of a number.
                </returns>
      <param name="Number">
                    Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Double)">
      <summary>
                    Return the integer portion of a number.
                </summary>
      <returns>
                    Return the integer portion of a number.
                </returns>
      <param name="Number">
                    Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)">
      <summary>
                    Return the integer portion of a number.
                </summary>
      <returns>
                    Return the integer portion of a number.
                </returns>
      <param name="Number">
                    Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)">
      <summary>
                    Return the integer portion of a number.
                </summary>
      <returns>
                    Return the integer portion of a number.
                </returns>
      <param name="Number">
                    Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)">
      <summary>
                    Return the integer portion of a number.
                </summary>
      <returns>
                    Return the integer portion of a number.
                </returns>
      <param name="Number">
                    Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Object)">
      <summary>
                    Return the integer portion of a number.
                </summary>
      <returns>
                    Return the integer portion of a number.
                </returns>
      <param name="Number">
                    Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Int(System.Single)">
      <summary>
                    Return the integer portion of a number.
                </summary>
      <returns>
                    Return the integer portion of a number.
                </returns>
      <param name="Number">
                    Required. A number of type Double or any valid numeric expression. If <paramref name="Number" /> contains Nothing, Nothing is returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Str(System.Object)">
      <summary>
                    Returns a String representation of a number.
                </summary>
      <returns>
                    Returns a String representation of a number.
                </returns>
      <param name="Number">
                    Required. An Object containing any valid numeric expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Val(System.Char)">
      <summary>
                    Returns the numbers contained in a string as a numeric value of appropriate type.
                </summary>
      <returns>
                    Returns the numbers contained in a string as a numeric value of appropriate type.
                </returns>
      <param name="Expression">
                    Required. Any valid String expression, Object variable, or Char value. If <paramref name="Expression" /> is of type Object, its value must be convertible to String or an <see cref="T:System.ArgumentException" /> error occurs.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Val(System.Object)">
      <summary>
                    Returns the numbers contained in a string as a numeric value of appropriate type.
                </summary>
      <returns>
                    Returns the numbers contained in a string as a numeric value of appropriate type.
                </returns>
      <param name="Expression">
                    Required. Any valid String expression, Object variable, or Char value. If <paramref name="Expression" /> is of type Object, its value must be convertible to String or an <see cref="T:System.ArgumentException" /> error occurs.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Conversion.Val(System.String)">
      <summary>
                    Returns the numbers contained in a string as a numeric value of appropriate type.
                </summary>
      <returns>
                    Returns the numbers contained in a string as a numeric value of appropriate type.
                </returns>
      <param name="InputStr">
                    Required. Any valid String expression, Object variable, or Char value. If <paramref name="Expression" /> is of type Object, its value must be convertible to String or an <see cref="T:System.ArgumentException" /> error occurs.
                </param>
    </member>
    <member name="T:Microsoft.VisualBasic.DateAndTime">
      <summary>
                    The DateAndTime module contains the procedures and properties used in date and time operations. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)">
      <summary>
                    Returns a Date value containing a date and time value to which a specified time interval has been added.
                </summary>
      <returns>
                    Returns a Date value containing a date and time value to which a specified time interval has been added.
                </returns>
      <param name="Interval">
                    Required. DateInterval enumeration value or String expression representing the time interval you want to add.
                </param>
      <param name="Number">
                    Required. Double. Floating-point expression representing the number of intervals you want to add. <paramref name="Number" /> can be positive (to get date/time values in the future) or negative (to get date/time values in the past). It can contain a fractional part when <paramref name="Interval" /> specifies hours, minutes, or seconds. For other values of <paramref name="Interval" />, any fractional part of <paramref name="Number" /> is ignored.
                </param>
      <param name="DateValue">
                    Required. Date. An expression representing the date and time to which the interval is to be added. <paramref name="DateValue" /> itself is not changed in the calling program.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)">
      <summary>
                    Returns a Date value containing a date and time value to which a specified time interval has been added.
                </summary>
      <returns>
                    Returns a Date value containing a date and time value to which a specified time interval has been added.
                </returns>
      <param name="Interval">
                    Required. DateInterval enumeration value or String expression representing the time interval you want to add.
                </param>
      <param name="Number">
                    Required. Double. Floating-point expression representing the number of intervals you want to add. <paramref name="Number" /> can be positive (to get date/time values in the future) or negative (to get date/time values in the past). It can contain a fractional part when <paramref name="Interval" /> specifies hours, minutes, or seconds. For other values of <paramref name="Interval" />, any fractional part of <paramref name="Number" /> is ignored.
                </param>
      <param name="DateValue">
                    Required. Date. An expression representing the date and time to which the interval is to be added. <paramref name="DateValue" /> itself is not changed in the calling program.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>
                    Returns a Long value specifying the number of time intervals between two Date values.
                </summary>
      <returns>
                    Returns a Long value specifying the number of time intervals between two Date values.
                </returns>
      <param name="Interval">
                    Required. DateInterval enumeration value or String expression representing the time interval you want to use as the unit of difference between <paramref name="Date1" /> and <paramref name="Date2" />.
                </param>
      <param name="Date1">
                    Required. Date. The first date/time value you want to use in the calculation. 
                </param>
      <param name="Date2">
                    Required. Date. The second date/time value you want to use in the calculation.
                </param>
      <param name="DayOfWeek">
                    Optional. A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week. If not specified, FirstDayOfWeek.Sunday is used.
                </param>
      <param name="WeekOfYear">
                    Optional. A value chosen from the FirstWeekOfYear enumeration that specifies the first week of the year. If not specified, FirstWeekOfYear.Jan1 is used.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>
                    Returns a Long value specifying the number of time intervals between two Date values.
                </summary>
      <returns>
                    Returns a Long value specifying the number of time intervals between two Date values.
                </returns>
      <param name="Interval">
                    Required. DateInterval enumeration value or String expression representing the time interval you want to use as the unit of difference between <paramref name="Date1" /> and <paramref name="Date2" />.
                </param>
      <param name="Date1">
                    Required. Date. The first date/time value you want to use in the calculation. 
                </param>
      <param name="Date2">
                    Required. Date. The second date/time value you want to use in the calculation.
                </param>
      <param name="DayOfWeek">
                    Optional. A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week. If not specified, FirstDayOfWeek.Sunday is used.
                </param>
      <param name="WeekOfYear">
                    Optional. A value chosen from the FirstWeekOfYear enumeration that specifies the first week of the year. If not specified, FirstWeekOfYear.Jan1 is used.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>
                    Returns an Integer value containing the specified component of a given Date value.
                </summary>
      <returns>
                    Returns an Integer value containing the specified component of a given Date value.
                </returns>
      <param name="Interval">
                    Required. DateInterval enumeration value or String expression representing the part of the date/time value you want to return.
                </param>
      <param name="DateValue">
                    Required. Date value that you want to evaluate.
                </param>
      <param name="FirstDayOfWeekValue">
                    Optional. A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week. If not specified, FirstDayOfWeek.Sunday is used.
                </param>
      <param name="FirstWeekOfYearValue">
                    Optional. A value chosen from the FirstWeekOfYear enumeration that specifies the first week of the year. If not specified, FirstWeekOfYear.Jan1 is used.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)">
      <summary>
                    Returns an Integer value containing the specified component of a given Date value.
                </summary>
      <returns>
                    Returns an Integer value containing the specified component of a given Date value.
                </returns>
      <param name="Interval">
                    Required. DateInterval enumeration value or String expression representing the part of the date/time value you want to return.
                </param>
      <param name="DateValue">
                    Required. Date value that you want to evaluate.
                </param>
      <param name="DayOfWeek">
                    Optional. A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week. If not specified, FirstDayOfWeek.Sunday is used.
                </param>
      <param name="WeekOfYear">
                    Optional. A value chosen from the FirstWeekOfYear enumeration that specifies the first week of the year. If not specified, FirstWeekOfYear.Jan1 is used.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)">
      <summary>
                    Returns a Date value representing a specified year, month, and day, with the time information set to midnight (00:00:00).
                </summary>
      <returns>
                    Returns a Date value representing a specified year, month, and day, with the time information set to midnight (00:00:00).
                </returns>
      <param name="Year">
                    Required. Integer expression from 1 through 9999. However, values below this range are also accepted. If <paramref name="Year" /> is 0 through 99, it is interpreted as being between 1930 and 2029, as explained in the "Remarks" section below. If <paramref name="Year" /> is less than 1, it is subtracted from the current year.
                </param>
      <param name="Month">
                    Required. Integer expression from 1 through 12. However, values outside this range are also accepted. The value of <paramref name="Month" /> is offset by 1 and applied to January of the calculated year. In other words, (<paramref name="Month" /> - 1) is added to January. The year is recalculated if necessary. The following results illustrate this effect:
                
                    If <paramref name="Month" /> is 1, the result is January of the calculated year.
                
                    If <paramref name="Month" /> is 0, the result is December of the previous year.
                
                    If <paramref name="Month" /> is -1, the result is November of the previous year.
                
                    If <paramref name="Month" /> is 13, the result is January of the following year.
                </param>
      <param name="Day">
                    Required. Integer expression from 1 through 31. However, values outside this range are also accepted. The value of <paramref name="Day" /> is offset by 1 and applied to the first day of the calculated month. In other words, (<paramref name="Day" /> - 1) is added to the first of the month. The month and year are recalculated if necessary. The following results illustrate this effect:
                
                    If <paramref name="Day" /> is 1, the result is the first day of the calculated month.
                
                    If <paramref name="Day" /> is 0, the result is the last day of the previous month.
                
                    If <paramref name="Day" /> is -1, the result is the penultimate day of the previous month.
                
                    If <paramref name="Day" /> is past the end of the current month, the result is the appropriate day of the following month. For example, if <paramref name="Month" /> is 4 and <paramref name="Day" /> is 31, the result is May 1.
                </param>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.DateString">
      <summary>
                    Returns or sets a String value representing the current date according to your system.
                </summary>
      <returns>
                    Gets a String value representing the current date according to your system.
                </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)">
      <summary>
                    Returns a Date value containing the date information represented by a string, with the time information set to midnight (00:00:00).
                </summary>
      <returns>
                    Returns a Date value containing the date information represented by a string, with the time information set to midnight (00:00:00).
                </returns>
      <param name="StringDate">
                    Required. String expression representing a date/time value from 00:00:00 on January 1 of the year 1 through 23:59:59 on December 31, 9999.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)">
      <summary>
                    Returns an Integer value from 1 through 31 representing the day of the month.
                </summary>
      <returns>
                    Returns an Integer value from 1 through 31 representing the day of the month.
                </returns>
      <param name="DateValue">
                    Required. Date value from which you want to extract the day.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)">
      <summary>
                    Returns an Integer value from 0 through 23 representing the hour of the day.
                </summary>
      <returns>
                    Returns an Integer value from 0 through 23 representing the hour of the day.
                </returns>
      <param name="TimeValue">
                    Required. Date value from which you want to extract the hour.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)">
      <summary>
                    Returns an Integer value from 0 through 59 representing the minute of the hour.
                </summary>
      <returns>
                    Returns an Integer value from 0 through 59 representing the minute of the hour.
                </returns>
      <param name="TimeValue">
                    Required. Date value from which you want to extract the minute.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)">
      <summary>
                    Returns an Integer value from 1 through 12 representing the month of the year.
                </summary>
      <returns>
                    Returns an Integer value from 1 through 12 representing the month of the year.
                </returns>
      <param name="DateValue">
                    Required. Date value from which you want to extract the month.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)">
      <summary>
                    Returns a String value containing the name of the specified month.
                </summary>
      <returns>
                    Returns a String value containing the name of the specified month.
                </returns>
      <param name="Month">
                    Required. Integer. The numeric designation of the month, from 1 through 13; 1 indicates January and 12 indicates December. You can use the value 13 with a 13-month calendar. If your system is using a 12-month calendar and <paramref name="Month" /> is 13, MonthName returns an empty string.
                </param>
      <param name="Abbreviate">
                    Optional. Boolean value that indicates if the month name is to be abbreviated. If omitted, the default is False, which means the month name is not abbreviated.
                </param>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.Now">
      <summary>
                    Returns a Date value containing the current date and time according to your system.
                </summary>
      <returns>
                    Returns a Date value containing the current date and time according to your system.
                </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)">
      <summary>
                    Returns an Integer value from 0 through 59 representing the second of the minute.
                </summary>
      <returns>
                    Returns an Integer value from 0 through 59 representing the second of the minute.
                </returns>
      <param name="TimeValue">
                    Required. Date value from which you want to extract the second.
                </param>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay">
      <summary>
                    Returns or sets a Date value containing the current time of day according to your system.
                </summary>
      <returns>
                    Gets a Date value containing the current time of day according to your system.
                </returns>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.Timer">
      <summary>
                    Returns a Double value representing the number of seconds elapsed since midnight.
                </summary>
      <returns>
                    Returns a Double value representing the number of seconds elapsed since midnight.
                </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)">
      <summary>
                    Returns a Date value representing a specified hour, minute, and second, with the date information set relative to January 1 of the year 1.
                </summary>
      <returns>
                    Returns a Date value representing a specified hour, minute, and second, with the date information set relative to January 1 of the year 1.
                </returns>
      <param name="Hour">
                    Required. Integer expression from 0 through 23. However, values outside this range are also accepted.
                </param>
      <param name="Minute">
                    Required. Integer expression from 0 through 59. However, values outside this range are also accepted. The value of <paramref name="Minute" /> is added to the calculated hour, so a negative value specifies minutes before that hour.
                </param>
      <param name="Second">
                    Required. Integer expression from 0 through 59. However, values outside this range are also accepted. The value of <paramref name="Second" /> is added to the calculated minute, so a negative value specifies seconds before that minute.
                </param>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.TimeString">
      <summary>
                    Returns or sets a String value representing the current time of day according to your system.
                </summary>
      <returns>
                    Gets a String value representing the current time of day according to your system.
                </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)">
      <summary>
                    Returns a Date value containing the time information represented by a string, with the date information set to January 1 of the year 1.
                </summary>
      <returns>
                    Returns a Date value containing the time information represented by a string, with the date information set to January 1 of the year 1.
                </returns>
      <param name="StringTime">
                    Required. String expression representing a date/time value from 00:00:00 on January 1 of the year 1 through 23:59:59 on December 31, 9999.
                </param>
    </member>
    <member name="P:Microsoft.VisualBasic.DateAndTime.Today">
      <summary>
                    Returns or sets a Date value containing the current date according to your system.
                </summary>
      <returns>
                    Gets a Date value containing the current date according to your system.
                </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)">
      <summary>
                    Returns an Integer value containing a number representing the day of the week.
                </summary>
      <returns>
                    Returns an Integer value containing a number representing the day of the week.
                </returns>
      <param name="DateValue">
                    Required. Date value for which you want to determine the day of the week.
                </param>
      <param name="DayOfWeek">
                    Optional. A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week. If not specified, FirstDayOfWeek.Sunday is used.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)">
      <summary>
                    Returns a String value containing the name of the specified weekday.
                </summary>
      <returns>
                    Returns a String value containing the name of the specified weekday.
                </returns>
      <param name="Weekday">
                    Required. Integer. The numeric designation for the weekday, from 1 through 7; 1 indicates the first day of the week and 7 indicates the last day of the week. The identities of the first and last days depend on the setting of <paramref name="FirstDayOfWeekValue" />.
                </param>
      <param name="Abbreviate">
                    Optional. Boolean value that indicates if the weekday name is to be abbreviated. If omitted, the default is False, which means the weekday name is not abbreviated.
                </param>
      <param name="FirstDayOfWeekValue">
                    Optional. A value chosen from the FirstDayOfWeek enumeration that specifies the first day of the week. If not specified, FirstDayOfWeek.System is used.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)">
      <summary>
                    Returns an Integer value from 1 through 9999 representing the year.
                </summary>
      <returns>
                    Returns an Integer value from 1 through 9999 representing the year.
                </returns>
      <param name="DateValue">
                    Required. Date value from which you want to extract the year.
                </param>
    </member>
    <member name="T:Microsoft.VisualBasic.DateFormat">
      <summary>
                    Indicates how to display dates when calling the FormatDateTime function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.GeneralDate">
      <summary>
                    For real numbers, displays a date and time. If the number has no fractional part, displays only a date. If the number has no integer part, displays time only. Date and time display is determined by your computer's regional settings. This member is equivalent to the Visual Basic constant vbGeneralDate.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.LongDate">
      <summary>
                    Displays a date using the long-date format specified in your computer's regional settings. This member is equivalent to the Visual Basic constant vbLongDate.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.ShortDate">
      <summary>
                    Displays a date using the short-date format specified in your computer's regional settings. This member is equivalent to the Visual Basic constant vbShortDate.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.LongTime">
      <summary>
                    Displays a time using the long-time format specified in your computer's regional settings. This member is equivalent to the Visual Basic constant vbLongTime.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateFormat.ShortTime">
      <summary>
                    Displays a time using the short-time format specified in your computer's regional settings. This member is equivalent to the Visual Basic constant vbShortTime.
                </summary>
    </member>
    <member name="T:Microsoft.VisualBasic.DateInterval">
      <summary>
                    Indicates how to determine and format date intervals when calling date-related functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Year">
      <summary>
                    Year
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Quarter">
      <summary>
                    Quarter of year (1 through 4)
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Month">
      <summary>
                    Month (1 through 12)
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.DayOfYear">
      <summary>
                    Day of year (1 through 366)
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Day">
      <summary>
                    Day of month (1 through 31)
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.WeekOfYear">
      <summary>
                    Week of year (1 through 53)
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Weekday">
      <summary>
                    Day of week (1 through 7)
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Hour">
      <summary>
                    Hour (1 through 24)
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Minute">
      <summary>
                    Minute (1 through 60)
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.DateInterval.Second">
      <summary>
                    Second (1 through 60)
                </summary>
    </member>
    <member name="T:Microsoft.VisualBasic.ErrObject">
      <summary>
                    The ErrObject module contains properties and procedures used to identify and handle run-time errors using the Err object. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.ErrObject.Clear">
      <summary>
                    Clears all property settings of the Err object.
                </summary>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.Description">
      <summary>
                    Returns or sets a String expression containing a descriptive string associated with an error. Read/write.
                </summary>
      <returns>
                    Returns or sets a String expression containing a descriptive string associated with an error. Read/write.
                </returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.Erl">
      <summary>
                    Returns an integer indicating the line number of the last executed statement. Read-only.
                </summary>
      <returns>
                    Returns an integer indicating the line number of the last executed statement. Read-only.
                </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.ErrObject.GetException">
      <summary>
                    Returns the exception representing the error that occurred.
                </summary>
      <returns>
                    Returns the exception representing the error that occurred.
                </returns>
    </member>
    <member name="P:Microsoft.VisualBasic.ErrObject.Number">
      <summary>
                    Returns or sets a numeric value specifying an error. Read/write.
                </summary>
      <returns>
                    Returns or sets a numeric value specifying an error. Read/write.
                </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object)">
      <summary>
                    Generates a run-time error; can be used instead of the Error statement.
                </summary>
      <param name="Number">
                    Required. Long integer that identifies the nature of the error. Visual Basic errors are in the range 0–65535; the range 0–512 is reserved for system errors; the range 513–65535 is available for user-defined errors. When setting the Number property to your own error code in a class module, you add your error code number to the vbObjectError constant. For example, to generate the error number 513, assign vbObjectError + 513 to the Number property.
                </param>
      <param name="Description">
                    Optional. String expression describing the error. If unspecified, the value in the Number property is examined. If it can be mapped to a Visual Basic run-time error code, the string that would be returned by the Error function is used as the Description property. If there is no Visual Basic error corresponding to the Number property, the "Application-defined or object-defined error" message is used.
                </param>
    </member>
    <member name="T:Microsoft.VisualBasic.FirstDayOfWeek">
      <summary>
                    Indicates the first day of the week to use when calling date-related functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.System">
      <summary>
                    The first day of the week as specified in your system settings This member is equivalent to the Visual Basic constant vbUseSystemDayOfWeek.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Sunday">
      <summary>
                    Sunday (default) This member is equivalent to the Visual Basic constant vbSunday.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Monday">
      <summary>
                    Monday This member is equivalent to the Visual Basic constant vbMonday.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Tuesday">
      <summary>
                    Tuesday This member is equivalent to the Visual Basic constant vbTuesday.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Wednesday">
      <summary>
                    Wednesday This member is equivalent to the Visual Basic constant vbWednesday.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Thursday">
      <summary>
                    Thursday This member is equivalent to the Visual Basic constant vbThursday.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Friday">
      <summary>
                    Friday This member is equivalent to the Visual Basic constant vbFriday.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstDayOfWeek.Saturday">
      <summary>
                    Saturday This member is equivalent to the Visual Basic constant vbSaturday.
                </summary>
    </member>
    <member name="T:Microsoft.VisualBasic.FirstWeekOfYear">
      <summary>
                    Indicates the first week of the year to use when calling date-related functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.System">
      <summary>
                    The day of the week specified in your system settings as the first day of the week This member is equivalent to the Visual Basic constant vbUseSystem.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.Jan1">
      <summary>
                    The week in which January 1 occurs (default) This member is equivalent to the Visual Basic constant vbFirstJan1.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.FirstFourDays">
      <summary>
                    The first week that has at least four days in the new year This member is equivalent to the Visual Basic constant vbFirstFourDays.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.FirstWeekOfYear.FirstFullWeek">
      <summary>
                    The first full week of the year This member is equivalent to the Visual Basic constant vbFirstFullWeek.
                </summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Globals">
      <summary>
                    The Globals module contains script engine functions. 
                </summary>
    </member>
    <member name="P:Microsoft.VisualBasic.Globals.ScriptEngine">
      <summary>
                    Returns a String representing the runtime currently in use.
                </summary>
      <returns>
                    Returns a String representing the runtime currently in use.
                </returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Globals.ScriptEngineBuildVersion">
      <summary>
                    Returns an Integer containing the build version number of the runtime currently in use.
                </summary>
      <returns>
                    Returns an Integer containing the build version number of the runtime currently in use.
                </returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Globals.ScriptEngineMajorVersion">
      <summary>
                    Returns an Integer containing the major version number of the runtime currently in use.
                </summary>
      <returns>
                    Returns an Integer containing the major version number of the runtime currently in use.
                </returns>
    </member>
    <member name="P:Microsoft.VisualBasic.Globals.ScriptEngineMinorVersion">
      <summary>
                    Returns an Integer containing the minor version number of the runtime currently in use.
                </summary>
      <returns>
                    Returns an Integer containing the minor version number of the runtime currently in use.
                </returns>
    </member>
    <member name="T:Microsoft.VisualBasic.HideModuleNameAttribute">
      <summary>
                    The HideModuleNameAttribute attribute, when applied to a module, allows the module members to be accessed using only the qualification needed for the module.
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.HideModuleNameAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.HideModuleNameAttribute" /> attribute. 
                </summary>
    </member>
    <member name="T:Microsoft.VisualBasic.Information">
      <summary>
                    The Information module contains the procedures used to return, test for, or verify information. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.Erl">
      <summary>
                    Returns an integer indicating the line number of the last executed statement. Read-only.
                </summary>
      <returns>
                    Returns an integer indicating the line number of the last executed statement. Read-only.
                </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.Err">
      <summary>
                    Contains information about run-time errors.
                </summary>
      <returns>
                    Contains information about run-time errors.
                </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsArray(System.Object)">
      <summary>
                    Returns a Boolean value indicating whether a variable points to an array.
                </summary>
      <returns>
                    Returns a Boolean value indicating whether a variable points to an array.
                </returns>
      <param name="VarName">
                    Required. Object variable.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsDate(System.Object)">
      <summary>
                    Returns a Boolean value indicating whether an expression represents a valid Date value.
                </summary>
      <returns>
                    Returns a Boolean value indicating whether an expression represents a valid Date value.
                </returns>
      <param name="Expression">
                    Required. Object expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)">
      <summary>
                    Returns a Boolean value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.
                </summary>
      <returns>
                    Returns a Boolean value indicating whether an expression evaluates to the <see cref="T:System.DBNull" /> class.
                </returns>
      <param name="Expression">
                    Required. Object expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsError(System.Object)">
      <summary>
                    Returns a Boolean value indicating whether an expression is an exception type.
                </summary>
      <returns>
                    Returns a Boolean value indicating whether an expression is an exception type.
                </returns>
      <param name="Expression">
                    Required. Object expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)">
      <summary>
                    Returns a Boolean value indicating whether an expression has no object assigned to it.
                </summary>
      <returns>
                    Returns a Boolean value indicating whether an expression has no object assigned to it.
                </returns>
      <param name="Expression">
                    Required. Object expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.IsReference(System.Object)">
      <summary>
                    Returns a Boolean value indicating whether an expression evaluates to a reference type.
                </summary>
      <returns>
                    Returns a Boolean value indicating whether an expression evaluates to a reference type.
                </returns>
      <param name="Expression">
                    Required. Object expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)">
      <summary>
                    Returns the lowest available subscript for the indicated dimension of an array.
                </summary>
      <returns>Integer. The lowest value the subscript for the specified dimension can contain. LBound always returns 0 as long as <paramref name="Array" /> has been initialized, even if it has no elements, for example if it is a zero-length string. If <paramref name="Array" /> is Nothing, LBound throws an <see cref="T:System.ArgumentNullException" />.
                </returns>
      <param name="Array">
                    Required. Array of any data type. The array in which you want to find the lowest possible subscript of a dimension.
                </param>
      <param name="Rank">
                    Optional. Integer. The dimension for which the lowest possible subscript is to be returned. Use 1 for the first dimension, 2 for the second, and so on. If <paramref name="Rank" /> is omitted, 1 is assumed.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)">
      <summary>
                    Returns the highest available subscript for the indicated dimension of an array.
                </summary>
      <returns>Integer. The highest value the subscript for the specified dimension can contain. If <paramref name="Array" /> has only one element, UBound returns 0. If <paramref name="Array" /> has no elements, for example if it is a zero-length string, UBound returns -1. 
                </returns>
      <param name="Array">
                    Required. Array of any data type. The array in which you want to find the highest possible subscript of a dimension.
                </param>
      <param name="Rank">
                    Optional. Integer. The dimension for which the highest possible subscript is to be returned. Use 1 for the first dimension, 2 for the second, and so on. If <paramref name="Rank" /> is omitted, 1 is assumed.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Information.VarType(System.Object)">
      <summary>
                    Returns an Integer value containing the data type classification of a variable.
                </summary>
      <returns>
                    Returns an Integer value containing the data type classification of a variable.
                </returns>
      <param name="VarName">
                    Required. Object variable. If Option Strict is Off, you can pass a variable of any data type except a structure.
                </param>
    </member>
    <member name="T:Microsoft.VisualBasic.Interaction">
      <summary>
                    The Interaction module contains procedures used to interact with objects, applications, and systems. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Choose(System.Double,System.Object[])">
      <summary>
                    Selects and returns a value from a list of arguments.
                </summary>
      <returns>
                    Selects and returns a value from a list of arguments.
                </returns>
      <param name="Index">
                    Required. Double. Numeric expression that results in a value between 1 and the number of elements passed in the <paramref name="Choice" /> argument.
                </param>
      <param name="Choice">
                    Required. Object parameter array. You can supply either a single variable or an expression that evaluates to the Object data type, to a list of Object variables or expressions separated by commas, or to a single-dimensional array of Object elements.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.IIf(System.Boolean,System.Object,System.Object)">
      <summary>
                    Returns one of two objects, depending on the evaluation of an expression.
                </summary>
      <returns>
                    Returns one of two objects, depending on the evaluation of an expression.
                </returns>
      <param name="Expression">
                    Required. Boolean. The expression you want to evaluate.
                </param>
      <param name="TruePart">
                    Required. Object. Returned if <paramref name="Expression" /> evaluates to True.
                </param>
      <param name="FalsePart">
                    Required. Object. Returned if <paramref name="Expression" /> evaluates to False.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Partition(System.Int64,System.Int64,System.Int64,System.Int64)">
      <summary>
                    Returns a string representing the calculated range that contains a number.
                </summary>
      <returns>
                    Returns a string representing the calculated range that contains a number.
                </returns>
      <param name="Number">
                    Required. Long. Whole number that you want to locate within one of the calculated ranges.
                </param>
      <param name="Start">
                    Required. Long. Whole number that indicates the start of the set of calculated ranges. <paramref name="Start" /> cannot be less than 0.
                </param>
      <param name="Stop">
                    Required. Long. Whole number that indicates the end of the set of calculated ranges. <paramref name="Stop" /> cannot be less than or equal to <paramref name="Start" />.
                </param>
      <param name="Interval">
                    Required. Long. Whole number that indicates the size of each range calculated between <paramref name="Start" /> and <paramref name="Stop" />. <paramref name="Interval" /> cannot be less than 1.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Interaction.Switch(System.Object[])">
      <summary>
                    Evaluates a list of expressions and returns an Object value corresponding to the first expression in the list that is True.
                </summary>
      <returns>
                    Evaluates a list of expressions and returns an Object value corresponding to the first expression in the list that is True.
                </returns>
      <param name="VarExpr">
                    Required. Object parameter array. Must have an even number of elements. You can supply a list of Object variables or expressions separated by commas, or a single-dimensional array of Object elements.
                </param>
    </member>
    <member name="T:Microsoft.VisualBasic.MyGroupCollectionAttribute">
      <summary>
                    This attribute supports My.Forms and My.WebServices in Visual Basic.
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.MyGroupCollectionAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary>
                    This attribute supports My.Forms and My.WebServices in Visual Basic.
                </summary>
      <param name="typeToCollect">String. Initializes the <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.MyGroupName" /> property. The compiler generates accessor properties for classes that derive from this type.
                </param>
      <param name="createInstanceMethodName">String. Initializes the <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.CreateMethod" /> property. Specifies the method in the class that creates the type's instances.
                </param>
      <param name="disposeInstanceMethodName">String. Initializes the <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DisposeMethod" /> property. Specifies the method in the class that disposes of the type's instances.
                </param>
      <param name="defaultInstanceAlias">String. Initializes the <see cref="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DefaultInstanceAlias" /> property. Specifies the name of the property that returns the default instance of the class.
                </param>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.CreateMethod">
      <summary>
                    This property supports My in Visual Basic.
                </summary>
      <returns>
                    Specifies the method in the class that creates the type's instances.
                </returns>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DefaultInstanceAlias">
      <summary>
                    This property supports My in Visual Basic.
                </summary>
      <returns>
                    Specifies the name of the property that returns the default instance of the class.
                </returns>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.DisposeMethod">
      <summary>
                    This property supports My in Visual Basic.
                </summary>
      <returns>
                    Specifies the method in the class that disposes of the type's instances.
                </returns>
    </member>
    <member name="P:Microsoft.VisualBasic.MyGroupCollectionAttribute.MyGroupName">
      <summary>
                    This property supports My in Visual Basic.
                </summary>
      <returns>
                    Specifies the name of the type for which the compiler generates accessor properties.
                </returns>
    </member>
    <member name="T:Microsoft.VisualBasic.Strings">
      <summary>
                    The Strings module contains procedures used to perform string operations. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.AscW(System.Char)">
      <summary>
                    Returns an Integer value representing the character code corresponding to a character.
                </summary>
      <returns>
                    Returns an Integer value representing the character code corresponding to a character.
                </returns>
      <param name="String">
                    Required. Any valid Char or String expression. If <paramref name="String" /> is a String expression, only the first character of the string is used for input. If <paramref name="String" /> is Nothing or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.AscW(System.String)">
      <summary>
                    Returns an Integer value representing the character code corresponding to a character.
                </summary>
      <returns>
                    Returns an Integer value representing the character code corresponding to a character.
                </returns>
      <param name="String">
                    Required. Any valid Char or String expression. If <paramref name="String" /> is a String expression, only the first character of the string is used for input. If <paramref name="String" /> is Nothing or contains no characters, an <see cref="T:System.ArgumentException" /> error occurs.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)">
      <summary>
                    Returns the character associated with the specified character code.
                </summary>
      <returns>
                    Returns the character associated with the specified character code.
                </returns>
      <param name="CharCode">
                    Required. An Integer expression representing the code point, or character code, for the character. If <paramref name="CharCode" /> is outside the valid range, an <see cref="T:System.ArgumentException" /> error occurs. The valid range for Chr is 0 through 255, and the valid range for ChrW is -32768 through 65535.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
      <summary>
                    Returns a zero-based array containing a subset of a String array based on specified filter criteria.
                </summary>
      <returns>
                    Returns a zero-based array containing a subset of a String array based on specified filter criteria.
                </returns>
      <param name="Source">
                    Required. One-dimensional array of strings to be searched.
                </param>
      <param name="Match">
                    Required. String to search for.
                </param>
      <param name="Include">
                    Optional. Boolean value indicating whether to return substrings that include or exclude <paramref name="Match" />. If <paramref name="Include" /> is True, the Filter function returns the subset of the array that contains <paramref name="Match" /> as a substring. If <paramref name="Include" /> is False, the Filter function returns the subset of the array that does not contain <paramref name="Match" /> as a substring.
                </param>
      <param name="Compare">
                    Optional. Numeric value indicating the kind of string comparison to use. See "Settings" for values.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)">
      <summary>
                    Returns a zero-based array containing a subset of a String array based on specified filter criteria.
                </summary>
      <returns>
                    Returns a zero-based array containing a subset of a String array based on specified filter criteria.
                </returns>
      <param name="Source">
                    Required. One-dimensional array of strings to be searched.
                </param>
      <param name="Match">
                    Required. String to search for.
                </param>
      <param name="Include">
                    Optional. Boolean value indicating whether to return substrings that include or exclude <paramref name="Match" />. If <paramref name="Include" /> is True, the Filter function returns the subset of the array that contains <paramref name="Match" /> as a substring. If <paramref name="Include" /> is False, the Filter function returns the subset of the array that does not contain <paramref name="Match" /> as a substring.
                </param>
      <param name="Compare">
                    Optional. Numeric value indicating the kind of string comparison to use. See "Settings" for values.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)">
      <summary>
                    Returns a string formatted according to instructions contained in a format String expression.
                </summary>
      <returns>
                    Returns a string formatted according to instructions contained in a format String expression.
                </returns>
      <param name="Expression">
                    Required. Any valid expression.
                </param>
      <param name="Style">
                    Optional. A valid named or user-defined format String expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
      <summary>
                    Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.
                </summary>
      <returns>
                    Returns an expression formatted as a currency value using the currency symbol defined in the system control panel.
                </returns>
      <param name="Expression">
                    Required. Expression to be formatted.
                </param>
      <param name="NumDigitsAfterDecimal">
                    Optional. Numeric value indicating how many places are displayed to the right of the decimal. Default value is –1, which indicates that the computer's regional settings are used.
                </param>
      <param name="IncludeLeadingDigit">
                    Optional. TriState enumeration that indicates whether or not a leading zero is displayed for fractional values. See "Settings" for values.
                </param>
      <param name="UseParensForNegativeNumbers">
                    Optional. TriState enumeration that indicates whether or not to place negative values within parentheses. See "Settings" for values.
                </param>
      <param name="GroupDigits">
                    Optional. TriState enumeration that indicates whether or not numbers are grouped using the group delimiter specified in the computer's regional settings. See "Settings" for values.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)">
      <summary>
                    Returns a string expression representing a date/time value.
                </summary>
      <returns>
                    Returns a string expression representing a date/time value.
                </returns>
      <param name="Expression">
                    Required. Date expression to be formatted.
                </param>
      <param name="NamedFormat">
                    Optional. Numeric value that indicates the date/time format used. If omitted, DateFormat.GeneralDate is used.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
      <summary>
                    Returns an expression formatted as a number.
                </summary>
      <returns>
                    Returns an expression formatted as a number.
                </returns>
      <param name="Expression">
                    Required. Expression to be formatted.
                </param>
      <param name="NumDigitsAfterDecimal">
                    Optional. Numeric value indicating how many places are displayed to the right of the decimal. The default value is –1, which indicates that the computer's regional settings are used.
                </param>
      <param name="IncludeLeadingDigit">
                    Optional. TriState constant that indicates whether a leading 0 is displayed for fractional values. See "Settings" for values.
                </param>
      <param name="UseParensForNegativeNumbers">
                    Optional. TriState constant that indicates whether to place negative values within parentheses. See "Settings" for values.
                </param>
      <param name="GroupDigits">
                    Optional. TriState constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See "Settings" for values.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)">
      <summary>
                    Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.
                </summary>
      <returns>
                    Returns an expression formatted as a percentage (that is, multiplied by 100) with a trailing % character.
                </returns>
      <param name="Expression">
                    Required. Expression to be formatted.
                </param>
      <param name="NumDigitsAfterDecimal">
                    Optional. Numeric value indicating how many places to the right of the decimal are displayed. Default value is –1, which indicates that the locale settings are used.
                </param>
      <param name="IncludeLeadingDigit">
                    Optional. TriState constant that indicates whether or not a leading zero displays for fractional values. See "Settings" for values.
                </param>
      <param name="UseParensForNegativeNumbers">
                    Optional. TriState constant that indicates whether or not to place negative values within parentheses. See "Settings" for values.
                </param>
      <param name="GroupDigits">
                    Optional. TriState constant that indicates whether or not numbers are grouped using the group delimiter specified in the locale settings. See "Settings" for values.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)">
      <summary>
                    Returns a Char value representing the character from the specified index in the supplied string.
                </summary>
      <returns>
                    Returns a Char value representing the character from the specified index in the supplied string.
                </returns>
      <param name="str">
                    Required. Any valid String expression.
                </param>
      <param name="Index">
                    Required. Integer expression. The (1-based) index of the character in <paramref name="str" /> to be returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>
                    Returns an integer specifying the start position of the first occurrence of one string within another.
                </summary>
      <returns>
                    If <paramref name="String1" /> is zero length or Nothing, InStr returns 0. If <paramref name="String2" /> is zero length or Nothing, InStr returns <paramref name="start" />. If <paramref name="String2" /> is not found, InStr returns 0. If <paramref name="String2" /> is found within <paramref name="String1" />, InStr returns position where match begins. If <paramref name="Start" /> &gt; <paramref name="String2" />, InStr returns 0. 
                </returns>
      <param name="Start">
                    Optional. Numeric expression that sets the starting position for each search. If omitted, search begins at the first character position. The start index is 1-based.
                </param>
      <param name="String1">
                    Required. String expression being searched.
                </param>
      <param name="String2">
                    Required. String expression sought.
                </param>
      <param name="Compare">
                    Optional. Specifies the type of string comparison. If <paramref name="Compare" /> is omitted, the Option Compare setting determines the type of comparison. 
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>
                    Returns an integer specifying the start position of the first occurrence of one string within another.
                </summary>
      <returns>
                    If <paramref name="String1" /> is zero length or Nothing, InStr returns 0. If <paramref name="String2" /> is zero length or Nothing, InStr returns <paramref name="start" />. If <paramref name="String2" /> is not found, InStr returns 0. If <paramref name="String2" /> is found within <paramref name="String1" />, InStr returns position where match begins. If <paramref name="Start" /> &gt; <paramref name="String2" />, InStr returns 0. 
                </returns>
      <param name="String1">
                    Required. String expression being searched.
                </param>
      <param name="String2">
                    Required. String expression sought.
                </param>
      <param name="Compare">
                    Optional. Specifies the type of string comparison. If <paramref name="Compare" /> is omitted, the Option Compare setting determines the type of comparison. 
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
      <summary>
                    Returns the position of the first occurrence of one string within another, starting from the right side of the string.
                </summary>
      <returns>
                    If <paramref name="StringCheck" /> is zero-length, InStrRev returns 0. If <paramref name="StringMatch" /> is zero-length, InStrRev returns <paramref name="Start" />. If <paramref name="StringMatch" /> is not found, InStrRev returns 0. If <paramref name="StringMatch" /> is found within <paramref name="StringCheck" />, InStrRev returns position at which the first match is found, starting with the right side of the string. If <paramref name="Start" /> is greater than length of <paramref name="StringMatch" />, InStrRev returns 0. 
                </returns>
      <param name="StringCheck">
                    Required. String expression being searched.
                </param>
      <param name="StringMatch">
                    Required. String expression being searched for.
                </param>
      <param name="Start">
                    Optional. Numeric expression setting the one-based starting position for each search, starting from the left side of the string. If <paramref name="Start" /> is omitted then –1 is used, meaning the search begins at the last character position. Search then proceeds from right to left.
                </param>
      <param name="Compare">
                    Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. If omitted, a binary comparison is performed. See Settings for values.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)">
      <summary>
                    Returns a string created by joining a number of substrings contained in an array.
                </summary>
      <returns>
                    Returns a string created by joining a number of substrings contained in an array.
                </returns>
      <param name="SourceArray">
                    Required. One-dimensional array containing substrings to be joined.
                </param>
      <param name="Delimiter">
                    Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (" ") is used. If <paramref name="Delimiter" /> is a zero-length string ("") or Nothing, all items in the list are concatenated with no delimiters.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)">
      <summary>
                    Returns a string created by joining a number of substrings contained in an array.
                </summary>
      <returns>
                    Returns a string created by joining a number of substrings contained in an array.
                </returns>
      <param name="SourceArray">
                    Required. One-dimensional array containing substrings to be joined.
                </param>
      <param name="Delimiter">
                    Optional. Any string, used to separate the substrings in the returned string. If omitted, the space character (" ") is used. If <paramref name="Delimiter" /> is a zero-length string ("") or Nothing, all items in the list are concatenated with no delimiters.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LCase(System.Char)">
      <summary>
                    Returns a string or character converted to lowercase.
                </summary>
      <returns>
                    Returns a string or character converted to lowercase.
                </returns>
      <param name="Value">
                    Required. Any valid String or Char expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LCase(System.String)">
      <summary>
                    Returns a string or character converted to lowercase.
                </summary>
      <returns>
                    Returns a string or character converted to lowercase.
                </returns>
      <param name="Value">
                    Required. Any valid String or Char expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)">
      <summary>
                    Returns a string containing a specified number of characters from the left side of a string.
                </summary>
      <returns>
                    Returns a string containing a specified number of characters from the left side of a string.
                </returns>
      <param name="str">
                    Required. String expression from which the leftmost characters are returned.
                </param>
      <param name="Length">
                    Required. Integer expression. Numeric expression indicating how many characters to return. If 0, a zero-length string ("") is returned. If greater than or equal to the number of characters in <paramref name="str" />, the entire string is returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Len(System.String)">
      <summary>
                    Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
                </summary>
      <returns>
                    Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.
                </returns>
      <param name="Expression">
                    Any valid String expression or variable name. If <paramref name="Expression" /> is of type Object, the Len function returns the size as it will be written to the file by the FilePut function.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)">
      <summary>
                    Returns a left-aligned string containing the specified string adjusted to the specified length.
                </summary>
      <returns>
                    Returns a left-aligned string containing the specified string adjusted to the specified length.
                </returns>
      <param name="Source">
                    Required. String expression. Name of string variable.
                </param>
      <param name="Length">
                    Required. Integer expression. Length of returned string.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.LTrim(System.String)">
      <summary>
                    Returns a string containing a copy of a specified string with no leading spaces (LTrim), no trailing spaces (RTrim), or no leading or trailing spaces (Trim).
                </summary>
      <returns>
                    Returns a string containing a copy of a specified string with no leading spaces (LTrim), no trailing spaces (RTrim), or no leading or trailing spaces (Trim).
                </returns>
      <param name="str">
                    Required. Any valid String expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)">
      <summary>
                    Returns a string containing a specified number of characters from a string.
                </summary>
      <returns>
                    Returns a string containing a specified number of characters from a string.
                </returns>
      <param name="str">
                    Required. String expression from which characters are returned.
                </param>
      <param name="Start">
                    Required. Integer expression. Starting position of the characters to return. If <paramref name="Start" /> is greater than the number of characters in <paramref name="str" />, the Mid function returns a zero-length string (""). <paramref name="Start" /> is one based.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)">
      <summary>
                    Returns a string containing a specified number of characters from a string.
                </summary>
      <returns>
                    Returns a string containing a specified number of characters from a string.
                </returns>
      <param name="str">
                    Required. String expression from which characters are returned.
                </param>
      <param name="Start">
                    Required. Integer expression. Starting position of the characters to return. If <paramref name="Start" /> is greater than the number of characters in <paramref name="str" />, the Mid function returns a zero-length string (""). <paramref name="Start" /> is one based.
                </param>
      <param name="Length">
                    Optional. Integer expression. Number of characters to return. If omitted or if there are fewer than <paramref name="Length" /> characters in the text (including the character at position <paramref name="Start" />), all characters from the start position to the end of the string are returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)">
      <summary>
                    Returns a string in which a specified substring has been replaced with another substring a specified number of times.
                </summary>
      <returns>
                    If <paramref name="Find" /> is zero-length or Nothing, Replace returns copy of <paramref name="Expression" />. If <paramref name="Replace" /> is zero-length, Replace returns copy of <paramref name="Expression" /> with no occurrences of <paramref name="Find" />. If <paramref name="Expression" /> is zero-length or Nothing, or <paramref name="Start" /> is greater than length of <paramref name="Expression" />, Replace returns Nothing. If <paramref name="Count" /> is 0, Replace returns copy of <paramref name="Expression" />. 
                </returns>
      <param name="Expression">
                    Required. String expression containing substring to replace.
                </param>
      <param name="Find">
                    Required. Substring being searched for.
                </param>
      <param name="Replacement">
                    Required. Replacement substring.
                </param>
      <param name="Start">
                    Optional. Position within <paramref name="Expression" /> where substring search is to begin. If omitted, 1 is assumed.
                </param>
      <param name="Count">
                    Optional. Number of substring substitutions to perform. If omitted, the default value is –1, which means "make all possible substitutions."
                </param>
      <param name="Compare">
                    Optional. Numeric value indicating the kind of comparison to use when evaluating substrings. See Settings for values.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)">
      <summary>
                    Returns a string containing a specified number of characters from the right side of a string.
                </summary>
      <returns>
                    Returns a string containing a specified number of characters from the right side of a string.
                </returns>
      <param name="str">
                    Required. String expression from which the rightmost characters are returned.
                </param>
      <param name="Length">
                    Required. Integer. Numeric expression indicating how many characters to return. If 0, a zero-length string ("") is returned. If greater than or equal to the number of characters in <paramref name="str" />, the entire string is returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)">
      <summary>
                    Returns a right-aligned string containing the specified string adjusted to the specified length. 
                </summary>
      <returns>
                    Returns a right-aligned string containing the specified string adjusted to the specified length. 
                </returns>
      <param name="Source">
                    Required. String expression. Name of string variable.
                </param>
      <param name="Length">
                    Required. Integer expression. Length of returned string.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.RTrim(System.String)">
      <summary>
                    Returns a string containing a copy of a specified string with no leading spaces (LTrim), no trailing spaces (RTrim), or no leading or trailing spaces (Trim).
                </summary>
      <returns>
                    Returns a string containing a copy of a specified string with no leading spaces (LTrim), no trailing spaces (RTrim), or no leading or trailing spaces (Trim).
                </returns>
      <param name="str">
                    Required. Any valid String expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Space(System.Int32)">
      <summary>
                    Returns a string consisting of the specified number of spaces.
                </summary>
      <returns>
                    Returns a string consisting of the specified number of spaces.
                </returns>
      <param name="Number">
                    Required. Integer expression. The number of spaces you want in the string.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)">
      <summary>
                    Returns a zero-based, one-dimensional array containing a specified number of substrings.
                </summary>
      <returns>String array. If <paramref name="Expression" /> is a zero-length string (""), Split returns a single-element array containing a zero-length string. If <paramref name="Delimiter" /> is a zero-length string, or if it does not appear anywhere in <paramref name="Expression" />, Split returns a single-element array containing the entire <paramref name="Expression" /> string.
                </returns>
      <param name="Expression">
                    Required. String expression containing substrings and delimiters.
                </param>
      <param name="Delimiter">
                    Optional. Any single character used to identify substring limits. If <paramref name="Delimiter" /> is omitted, the space character (" ") is assumed to be the delimiter.
                </param>
      <param name="Limit">
                    Optional. Maximum number of substrings into which the input string should be split. The default, –1, indicates that the input string should be split at every occurrence of the <paramref name="Delimiter" /> string.
                </param>
      <param name="Compare">
                    Optional. Numeric value indicating the comparison to use when evaluating substrings. See "Settings" for values.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>
                    Returns -1, 0, or 1, based on the result of a string comparison. 
                </summary>
      <returns>
                    If <paramref name="String1" /> sorts ahead of <paramref name="String2" />, StrComp returns -1. If <paramref name="String1" /> is equal to <paramref name="String2" />, StrComp returns  0. If <paramref name="String1" /> sorts after <paramref name="String2" />, StrComp returns  1. 
                </returns>
      <param name="String1">
                    Required. Any valid String expression.
                </param>
      <param name="String2">
                    Required. Any valid String expression.
                </param>
      <param name="Compare">
                    Optional. Specifies the type of string comparison. If <paramref name="Compare" /> is omitted, the Option Compare setting determines the type of comparison.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)">
      <summary>
                    Returns a string or object consisting of the specified character repeated the specified number of times.
                </summary>
      <returns>
                    Returns a string or object consisting of the specified character repeated the specified number of times.
                </returns>
      <param name="Number">
                    Required. Integer expression. The length to the string to be returned.
                </param>
      <param name="Character">
                    Required. Any valid Char, String, or Object expression. Only the first character of the expression will be used. If Character is of type Object, it must contain either a Char or a String value. 
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)">
      <summary>
                    Returns a string or object consisting of the specified character repeated the specified number of times.
                </summary>
      <returns>
                    Returns a string or object consisting of the specified character repeated the specified number of times.
                </returns>
      <param name="Number">
                    Required. Integer expression. The length to the string to be returned.
                </param>
      <param name="Character">
                    Required. Any valid Char, String, or Object expression. Only the first character of the expression will be used. If Character is of type Object, it must contain either a Char or a String value. 
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)">
      <summary>
                    Returns a string or object consisting of the specified character repeated the specified number of times.
                </summary>
      <returns>
                    Returns a string or object consisting of the specified character repeated the specified number of times.
                </returns>
      <param name="Number">
                    Required. Integer expression. The length to the string to be returned.
                </param>
      <param name="Character">
                    Required. Any valid Char, String, or Object expression. Only the first character of the expression will be used. If Character is of type Object, it must contain either a Char or a String value. 
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)">
      <summary>
                    Returns a string in which the character order of a specified string is reversed.
                </summary>
      <returns>
                    Returns a string in which the character order of a specified string is reversed.
                </returns>
      <param name="Expression">
                    Required. String expression whose characters are to be reversed. If <paramref name="Expression" /> is a zero-length string (""), a zero-length string is returned.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.Trim(System.String)">
      <summary>
                    Returns a string containing a copy of a specified string with no leading spaces (LTrim), no trailing spaces (RTrim), or no leading or trailing spaces (Trim).
                </summary>
      <returns>
                    Returns a string containing a copy of a specified string with no leading spaces (LTrim), no trailing spaces (RTrim), or no leading or trailing spaces (Trim).
                </returns>
      <param name="str">
                    Required. Any valid String expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.UCase(System.Char)">
      <summary>
                    Returns a string or character containing the specified string converted to uppercase.
                </summary>
      <returns>
                    Returns a string or character containing the specified string converted to uppercase.
                </returns>
      <param name="Value">
                    Required. Any valid String or Char expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.Strings.UCase(System.String)">
      <summary>
                    Returns a string or character containing the specified string converted to uppercase.
                </summary>
      <returns>
                    Returns a string or character containing the specified string converted to uppercase.
                </returns>
      <param name="Value">
                    Required. Any valid String or Char expression.
                </param>
    </member>
    <member name="T:Microsoft.VisualBasic.TriState">
      <summary>
                    Indicates a Boolean value or whether the default should be used when calling number-formatting functions.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.TriState.False">
      <summary>
                    False. The numeric value of this member is 0.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.TriState.True">
      <summary>
                    True. The numeric value of this member is -1.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.TriState.UseDefault">
      <summary>
                    Default setting. The numeric value of this member is -2.
                </summary>
    </member>
    <member name="T:Microsoft.VisualBasic.VariantType">
      <summary>
                    Indicates the type of a variant object, returned by the VarType function.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Empty">
      <summary>
                    Null reference. This member is equivalent to the Visual Basic constant vbEmpty.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Null">
      <summary>
                    Null object. This member is equivalent to the Visual Basic constant vbNull.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Short">
      <summary>Short. (-32,768 through 32,767.)
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Integer">
      <summary>Integer. (-2,147,483,648 through 2,147,483,647.) This member is equivalent to the Visual Basic constant vbInteger.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Single">
      <summary>Single. (-3.402823E+38 through -1.401298E-45 for negative values; 1.401298E-45 through 3.402823E+38 for positive values.) This member is equivalent to the Visual Basic constant vbSingle.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Double">
      <summary>Double. (-1.79769313486231E+308 through -4.94065645841247E-324 for negative values; 4.94065645841247E-324 through 1.79769313486231E+308 for positive values.) This member is equivalent to the Visual Basic constant vbDouble.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Currency">
      <summary>
                    Currency. This member is equivalent to the Visual Basic constant vbCurrency.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Date">
      <summary>Date. (0:00:00 on January 1, 0001 through 11:59:59 PM on December 31, 9999.) This member is equivalent to the Visual Basic constant vbDate.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.String">
      <summary>String. (0 to approximately 2 billion Unicode characters.) This member is equivalent to the Visual Basic constant vbString.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Object">
      <summary>
                    Any type can be stored in a variable of type Object. This member is equivalent to the Visual Basic constant vbObject.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Error">
      <summary>
        <see cref="T:System.Exception" />
      </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Boolean">
      <summary>Boolean. (True or False.) This member is equivalent to the Visual Basic constant vbBoolean.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Variant">
      <summary>Variant. This member is equivalent to the Visual Basic constant vbVariant.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.DataObject">
      <summary>
                    DataObject.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Decimal">
      <summary>Decimal. (0 through +/-79,228,162,514,264,337,593,543,950,335 with no decimal point; 0 through +/-7.9228162514264337593543950335 with 28 places to the right of the decimal; smallest non-zero number is +/-0.0000000000000000000000000001.) This member is equivalent to the Visual Basic constant vbDecimal.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Byte">
      <summary>Byte. (0 through 255.) This member is equivalent to the Visual Basic constant vbByte.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Char">
      <summary>Char. (0 through 65535.) This member is equivalent to the Visual Basic constant vbChar.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Long">
      <summary>Long. (-9,223,372,036,854,775,808 through 9,223,372,036,854,775,807.) This member is equivalent to the Visual Basic constant vbLong.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.UserDefinedType">
      <summary>
                    User-defined type. Each member of the structure has a range determined by its data type and independent of the ranges of the other members. This member is equivalent to the Visual Basic constant vbUserDefinedType.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.VariantType.Array">
      <summary>
                    Array. This member is equivalent to the Visual Basic constant vbArray.
                </summary>
    </member>
    <member name="T:Microsoft.VisualBasic.VBMath">
      <summary>
                    The VbMath module contains procedures used to perform mathematical operations. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Randomize">
      <summary>
                    Initializes the random-number generator.
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Randomize(System.Double)">
      <summary>
                    Initializes the random-number generator.
                </summary>
      <param name="Number">
                    Optional. An Object or any valid numeric expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Rnd">
      <summary>
                    Returns a random number of type Single.
                </summary>
      <returns>
                    If number is less than zero, Rnd generates the same number every time, using <paramref name="Number" /> as the seed. If number is greater than zero, Rnd generates the next random number in the sequence. If number is equal to zero, Rnd generates the most recently generated number. If number is not supplied, Rnd generates the next random number in the sequence.
                </returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBMath.Rnd(System.Single)">
      <summary>
                    Returns a random number of type Single.
                </summary>
      <returns>
                    If number is less than zero, Rnd generates the same number every time, using <paramref name="Number" /> as the seed. If number is greater than zero, Rnd generates the next random number in the sequence. If number is equal to zero, Rnd generates the most recently generated number. If number is not supplied, Rnd generates the next random number in the sequence.
                </returns>
      <param name="Number">
                    Optional. A Single value or any valid Single expression.
                </param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Conversions">
      <summary>
                    Provides methods that perform various type conversions.
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ChangeType(System.Object,System.Type)">
      <summary>
                    Converts an object to the specified type.
                </summary>
      <returns>
                    An object of the specified target type.
                </returns>
      <param name="Expression">
                    The object to convert.
                </param>
      <param name="TargetType">
                    The type to which to convert the object.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.FromCharAndCount(System.Char,System.Int32)">
      <summary>
                    Converts a <see cref="T:System.Char" /> value to a string, given a byte count.
                </summary>
      <returns>
                    The string representation of the specified value.
                </returns>
      <param name="Value">
                    The Char value to convert.
                </param>
      <param name="Count">
                    The byte count of the Char value.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.FromCharArray(System.Char[])">
      <summary>
                    Converts a <see cref="T:System.Char" /> array to a string.
                </summary>
      <returns>
                    The string representation of the specified array.
                </returns>
      <param name="Value">
                    The Char array to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.FromCharArraySubset(System.Char[],System.Int32,System.Int32)">
      <summary>
                    Converts a subset of a <see cref="T:System.Char" /> array to a string.
                </summary>
      <returns>
                    The string representation of the specified array from the start position to the specified length.
                </returns>
      <param name="Value">
                    The Char array to convert.
                </param>
      <param name="StartIndex">
                    Zero-based index of the start position.
                </param>
      <param name="Length">
                    Length of the subset in bytes.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToBoolean(System.Object)">
      <summary>
                    Converts an object to a <see cref="T:System.Boolean" /> value.
                </summary>
      <returns>
                    A Boolean value. Returns False if the object is null; otherwise, True.
                </returns>
      <param name="Value">
                    The object to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToBoolean(System.String)">
      <summary>
                    Converts a string to a <see cref="T:System.Boolean" /> value.
                </summary>
      <returns>
                    A Boolean value. Returns False if the string is null; otherwise, True.
                </returns>
      <param name="Value">
                    The string to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToByte(System.Object)">
      <summary>
                    Converts an object to a <see cref="T:System.Byte" /> value.
                </summary>
      <returns>
                    The Byte value of the object.
                </returns>
      <param name="Value">
                    The object to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToByte(System.String)">
      <summary>
                    Converts a string to a <see cref="T:System.Byte" /> value.
                </summary>
      <returns>
                    The Byte value of the string.
                </returns>
      <param name="Value">
                    The string to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToChar(System.Object)">
      <summary>
                    Converts an object to a <see cref="T:System.Char" /> value.
                </summary>
      <returns>
                    The Char value of the object.
                </returns>
      <param name="Value">
                    The object to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToChar(System.String)">
      <summary>
                    Converts a string to a <see cref="T:System.Char" /> value.
                </summary>
      <returns>
                    The Char value of the string.
                </returns>
      <param name="Value">
                    The string to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToCharArrayRankOne(System.Object)">
      <summary>
                    Converts an object to a one-dimensional <see cref="T:System.Char" /> array.
                </summary>
      <returns>
                    A one-dimensional Char array.
                </returns>
      <param name="Value">
                    The object to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToCharArrayRankOne(System.String)">
      <summary>
                    Converts a string to a one-dimensional <see cref="T:System.Char" /> array.
                </summary>
      <returns>
                    A one-dimensional Char array.
                </returns>
      <param name="Value">
                    The string to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDate(System.Object)">
      <summary>
                    Converts an object to a <see cref="T:System.DateTime" /> value.
                </summary>
      <returns>
                    The DateTime value of the object.
                </returns>
      <param name="Value">
                    The object to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDate(System.String)">
      <summary>
                    Converts a string to a <see cref="T:System.DateTime" /> value.
                </summary>
      <returns>
                    The DateTime value of the string.
                </returns>
      <param name="Value">
                    The string to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDecimal(System.Boolean)">
      <summary>
                    Converts a <see cref="T:System.Boolean" /> value to a <see cref="T:System.Decimal" /> value.
                </summary>
      <returns>
                    The Decimal value of the Boolean value.
                </returns>
      <param name="Value">
                    A Boolean value to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDecimal(System.Object)">
      <summary>
                    Converts an object to a <see cref="T:System.Decimal" /> value.
                </summary>
      <returns>
                    The Decimal value of the object.
                </returns>
      <param name="Value">
                    The object to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDecimal(System.String)">
      <summary>
                    Converts a string to a <see cref="T:System.Decimal" /> value.
                </summary>
      <returns>
                    The Decimal value of the string.
                </returns>
      <param name="Value">
                    The string to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDouble(System.Object)">
      <summary>
                    Converts an object to a <see cref="T:System.Double" /> value.
                </summary>
      <returns>
                    The Double value of the object.
                </returns>
      <param name="Value">
                    The object to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToDouble(System.String)">
      <summary>
                    Converts a string to a <see cref="T:System.Double" /> value.
                </summary>
      <returns>
                    The Double value of the string.
                </returns>
      <param name="Value">
                    The string to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToGenericParameter``1(System.Object)">
      <summary>
                    Converts an object to a generic type <paramref name="T" />.
                </summary>
      <returns>
                    A structure or object of generic type <paramref name="T" />.
                </returns>
      <param name="Value">
                    The object to convert.
                </param>
      <typeparam name="T">
                    The type to convert <paramref name="Value" /> to.
                </typeparam>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToInteger(System.Object)">
      <summary>
                    Converts an object to an integer value.
                </summary>
      <returns>
                    The int value of the object.
                </returns>
      <param name="Value">
                    The object to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToInteger(System.String)">
      <summary>
                    Converts a string to an integer value.
                </summary>
      <returns>
                    The int value of the string.
                </returns>
      <param name="Value">
                    The string to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToLong(System.Object)">
      <summary>
                    Converts an object to a Long value.
                </summary>
      <returns>
                    The Long value of the object.
                </returns>
      <param name="Value">
                    The object to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToLong(System.String)">
      <summary>
                    Converts a string to a Long value.
                </summary>
      <returns>
                    The Long value of the string.
                </returns>
      <param name="Value">
                    The string to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSByte(System.Object)">
      <summary>
                    Converts an object to an <see cref="T:System.SByte" /> value.
                </summary>
      <returns>
                    The SByte value of the object.
                </returns>
      <param name="Value">
                    The object to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSByte(System.String)">
      <summary>
                    Converts a string to an <see cref="T:System.SByte" /> value.
                </summary>
      <returns>
                    The SByte value of the string.
                </returns>
      <param name="Value">
                    The string to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToShort(System.Object)">
      <summary>
                    Converts an object to a Short value.
                </summary>
      <returns>
                    The Short value of the object.
                </returns>
      <param name="Value">
                    The object to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToShort(System.String)">
      <summary>
                    Converts a string to a Short value.
                </summary>
      <returns>
                    The Short value of the string.
                </returns>
      <param name="Value">
                    The string to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSingle(System.Object)">
      <summary>
                    Converts an object to a <see cref="T:System.Single" /> value.
                </summary>
      <returns>
                    The Single value of the object.
                </returns>
      <param name="Value">
                    The object to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToSingle(System.String)">
      <summary>
                    Converts a <see cref="T:System.String" /> to a <see cref="T:System.Single" /> value.
                </summary>
      <returns>
                    The Single value of the string.
                </returns>
      <param name="Value">
                    The string to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Boolean)">
      <summary>
                    Converts a <see cref="T:System.Boolean" /> value to a <see cref="T:System.String" />.
                </summary>
      <returns>
                    The String representation of the Boolean value.
                </returns>
      <param name="Value">
                    The Boolean value to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Byte)">
      <summary>
                    Converts a <see cref="T:System.Byte" /> value to a <see cref="T:System.String" />.
                </summary>
      <returns>
                    The String representation of the Byte value.
                </returns>
      <param name="Value">
                    The Byte value to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Char)">
      <summary>
                    Converts a <see cref="T:System.Char" /> value to a <see cref="T:System.String" />.
                </summary>
      <returns>
                    The String representation of the Char value.
                </returns>
      <param name="Value">
                    The Char value to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.DateTime)">
      <summary>
                    Converts a <see cref="T:System.DateTime" /> value to a <see cref="T:System.String" /> value.
                </summary>
      <returns>
                    The String representation of the DateTime value.
                </returns>
      <param name="Value">
                    The DateTime value to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Decimal)">
      <summary>
                    Converts a <see cref="T:System.Decimal" /> value to a <see cref="T:System.String" /> value.
                </summary>
      <returns>
                    The String representation of the Decimal value.
                </returns>
      <param name="Value">
                    The Decimal value to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Decimal,System.Globalization.NumberFormatInfo)">
      <summary>
                    Converts a <see cref="T:System.Decimal" /> value to a <see cref="T:System.String" /> value, using the specified number format.
                </summary>
      <returns>
                    The String representation of the Decimal value.
                </returns>
      <param name="Value">
                    The decimal value to convert.
                </param>
      <param name="NumberFormat">
                    The number format to use, according to <see cref="T:System.Globalization.NumberFormatInfo" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Double)">
      <summary>
                    Converts a <see cref="T:System.Double" /> value to a <see cref="T:System.String" /> value.
                </summary>
      <returns>
                    The String representation of the Double value.
                </returns>
      <param name="Value">
                    The Double value to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Double,System.Globalization.NumberFormatInfo)">
      <summary>
                    Converts a <see cref="T:System.Double" /> value to a <see cref="T:System.String" /> value, using the specified number format.
                </summary>
      <returns>
                    The String representation of the Double value.
                </returns>
      <param name="Value">
                    The Double value to convert.
                </param>
      <param name="NumberFormat">
                    The number format to use, according to <see cref="T:System.Globalization.NumberFormatInfo" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Int16)">
      <summary>
                    Converts a Short value to a <see cref="T:System.String" /> value.
                </summary>
      <returns>
                    The String representation of the Short value.
                </returns>
      <param name="Value">
                    The Short value to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Int32)">
      <summary>
                    Converts an integer value to a <see cref="T:System.String" /> value.
                </summary>
      <returns>
                    The String representation of the int value.
                </returns>
      <param name="Value">
                    The int value to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Int64)">
      <summary>
                    Converts a Long value to a <see cref="T:System.String" /> value.
                </summary>
      <returns>
                    The String representation of the Long value.
                </returns>
      <param name="Value">
                    The Long value to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Object)">
      <summary>
                    Converts an object to a <see cref="T:System.String" /> value.
                </summary>
      <returns>
                    The String representation of the object.
                </returns>
      <param name="Value">
                    The object to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Single)">
      <summary>
                    Converts a <see cref="T:System.Single" /> value (a single-precision floating point number) to a <see cref="T:System.String" /> value.
                </summary>
      <returns>
                    The String representation of the Single value.
                </returns>
      <param name="Value">
                    The Single value to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.Single,System.Globalization.NumberFormatInfo)">
      <summary>
                    Converts a <see cref="T:System.Single" /> value to a <see cref="T:System.String" /> value, using the specified number format.
                </summary>
      <returns>
                    The String representation of the Single value.
                </returns>
      <param name="Value">
                    The Single value to convert.
                </param>
      <param name="NumberFormat">
                    The number format to use, according to <see cref="T:System.Globalization.NumberFormatInfo" />.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.UInt32)">
      <summary>
                    Converts a uint value to a <see cref="T:System.String" /> value.
                </summary>
      <returns>
                    The String representation of the Uint value.
                </returns>
      <param name="Value">
                    The Uint value to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToString(System.UInt64)">
      <summary>
                    Converts a Ulong value to a <see cref="T:System.String" /> value.
                </summary>
      <returns>
                    The String representation of the Ulong value.
                </returns>
      <param name="Value">
                    The Ulong value to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUInteger(System.Object)">
      <summary>
                    Converts an object to a Uint value.
                </summary>
      <returns>
                    The Uint value of the object.
                </returns>
      <param name="Value">
                    The object to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUInteger(System.String)">
      <summary>
                    Converts a string to a Uint value.
                </summary>
      <returns>
                    The Uint value of the string.
                </returns>
      <param name="Value">
                    The string to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToULong(System.Object)">
      <summary>
                    Converts an object to a Ulong value.
                </summary>
      <returns>
                    The Ulong value of the object.
                </returns>
      <param name="Value">
                    The object to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToULong(System.String)">
      <summary>
                    Converts a string to a Ulong value.
                </summary>
      <returns>
                    The Ulong value of the string.
                </returns>
      <param name="Value">
                    The string to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUShort(System.Object)">
      <summary>
                    Converts an object to a Ushort value.
                </summary>
      <returns>
                    The Ushort value of the object.
                </returns>
      <param name="Value">
                    The object to convert.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Conversions.ToUShort(System.String)">
      <summary>
                    Converts a string to a Ushort value.
                </summary>
      <returns>
                    The Ushort value of the string.
                </returns>
      <param name="Value">
                    The string to convert.
                </param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute">
      <summary>
                    When applied to a class, the compiler implicitly calls a component-initializing method from the default synthetic constructor.
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.DesignerGeneratedAttribute" /> attribute.
                </summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization">
      <summary>
                    The Visual Basic compiler uses this class during static local initialization; it is not meant to be called directly from your code. An exception of this type is thrown if a static local variable fails to initialize.
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization" /> class.
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization" /> class.
                </summary>
      <param name="message">
                    A string representing the message to be sent.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.IncompleteInitialization" /> class.
                </summary>
      <param name="message">
                    A string representing the message to be sent.
                </param>
      <param name="innerException">
                    An <see cref="T:System.Exception" /> object.
                </param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.InternalErrorException">
      <summary>
                    The exception thrown for internal Visual Basic compiler errors. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.InternalErrorException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.InternalErrorException" /> class. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.InternalErrorException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.InternalErrorException" /> class, specifying an error message. 
                </summary>
      <param name="message">
                    The message that describes the error.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.InternalErrorException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.InternalErrorException" /> class, specifying an error message and an inner exception.
                </summary>
      <param name="message">
                    The message that describes the error.
                </param>
      <param name="innerException">
                    The exception that is the cause of the current internal exception.
                </param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.LikeOperator">
      <summary>
                    This class provides helpers that the Visual Basic compiler uses to do the work for the Like Operator (Visual Basic). It is not meant to be called directly from your code.
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LikeOperator.LikeObject(System.Object,System.Object,Microsoft.VisualBasic.CompareMethod)">
      <summary>
                    Performs binary or text string comparison given two objects. This helper method is not meant to be called directly from your code.
                </summary>
      <returns>
                    A Boolean value indicating whether the strings match. Returns True if the strings match; otherwise False.
                </returns>
      <param name="Source">
                    The string to compare.
                </param>
      <param name="Pattern">
                    The string against which <paramref name="Source" /> is being compared.
                </param>
      <param name="CompareOption">
                    A <see cref="T:Microsoft.VisualBasic.CompareMethod" /> enumeration specifying whether or not to use text comparison. If <see cref="F:Microsoft.VisualBasic.CompareMethod.Text" />, this method uses text comparison; if <see cref="F:Microsoft.VisualBasic.CompareMethod.Binary" />, this method uses binary comparison.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.LikeOperator.LikeString(System.String,System.String,Microsoft.VisualBasic.CompareMethod)">
      <summary>
                    Performs binary or text string comparison given two strings. This helper method is not meant to be called directly from your code.
                </summary>
      <returns>
                    A Boolean value indicating whether the strings match. Returns True if the strings match; otherwise False.
                </returns>
      <param name="Source">
                    The string to compare.
                </param>
      <param name="Pattern">
                    The string against which <paramref name="Source" /> is being compared.
                </param>
      <param name="CompareOption">
                    A <see cref="T:Microsoft.VisualBasic.CompareMethod" /> enumeration specifying whether or not to use text comparison. If <see cref="F:Microsoft.VisualBasic.CompareMethod.Text" />, this method uses text comparison; if <see cref="F:Microsoft.VisualBasic.CompareMethod.Binary" />, this method uses binary comparison.
                </param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.NewLateBinding">
      <summary>
                    This class provides helpers that the Visual Basic compiler uses for late binding calls; it is not meant to be called directly from your code.
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateCall(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean[],System.Boolean)">
      <summary>
                    Executes a late-bound method or function call. This helper method is not meant to be called directly from your code.
                </summary>
      <returns>
                    An instance of the call object.
                </returns>
      <param name="Instance">
                    An instance of the call object exposing the property or method.
                </param>
      <param name="Type">
                    The type of the call object.
                </param>
      <param name="MemberName">
                    The name of the property or method on the call object.
                </param>
      <param name="Arguments">
                    An array containing the arguments to be passed to the property or method being called.
                </param>
      <param name="ArgumentNames">
                    An array of argument names.
                </param>
      <param name="TypeArguments">
                    An array of argument types; used only for generic calls to pass argument types.
                </param>
      <param name="CopyBack">
                    An array of Boolean values that the late binder uses to communicate back to the call site which arguments match ByRef parameters. Each True value indicates that the arguments matched and should be copied out after the call to LateCall is complete.
                </param>
      <param name="IgnoreReturn">
                    A Boolean value indicating whether or not the return value can be ignored.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateCanEvaluate(System.Object,System.Type,System.String,System.Object[],System.Boolean,System.Boolean)">
      <summary>
                    Indicates whether a call requires late-bound evaluation. This helper method is not meant to be called directly from your code.
                </summary>
      <returns>
                    A Boolean value that indicates whether the expression requires late-bound evaluation.
                </returns>
      <param name="instance">
                    An instance of the call object exposing the property or method.
                </param>
      <param name="type">
                    The type of the call object.
                </param>
      <param name="memberName">
                    The name of the property or method on the call object.
                </param>
      <param name="arguments">
                    An array containing the arguments to be passed to the property or method being called.
                </param>
      <param name="allowFunctionEvaluation">
                    A Boolean value that specifies whether to allow function evaluation.
                </param>
      <param name="allowPropertyEvaluation">
                    A Boolean value that specifies whether to allow property evaluation.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateGet(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean[])">
      <summary>
                    Executes a late-bound property get or field access call. This helper method is not meant to be called directly from your code.
                </summary>
      <returns>
                    An instance of the call object.
                </returns>
      <param name="Instance">
                    An instance of the call object exposing the property or method.
                </param>
      <param name="Type">
                    The type of the call object.
                </param>
      <param name="MemberName">
                    The name of the property or method on the call object.
                </param>
      <param name="Arguments">
                    An array containing the arguments to be passed to the property or method being called.
                </param>
      <param name="ArgumentNames">
                    An array of argument names.
                </param>
      <param name="TypeArguments">
                    An array of argument types; used only for generic calls to pass argument types.
                </param>
      <param name="CopyBack">
                    An array of Boolean values that the late binder uses to communicate back to the call site which arguments match ByRef parameters. Each True value indicates that the arguments matched and should be copied out after the call to LateCall is complete.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateIndexGet(System.Object,System.Object[],System.String[])">
      <summary>
                    Executes a late-bound property get or field access call. This helper method is not meant to be called directly from your code.
                </summary>
      <returns>
                    An instance of the call object.
                </returns>
      <param name="Instance">
                    An instance of the call object exposing the property or method.
                </param>
      <param name="Arguments">
                    An array containing the arguments to be passed to the property or method being called.
                </param>
      <param name="ArgumentNames">
                    An array of argument names.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateIndexSet(System.Object,System.Object[],System.String[])">
      <summary>
                    Executes a late-bound property set or field write call. This helper method is not meant to be called directly from your code.
                </summary>
      <param name="Instance">
                    An instance of the call object exposing the property or method.
                </param>
      <param name="Arguments">
                    An array containing the arguments to be passed to the property or method being called.
                </param>
      <param name="ArgumentNames">
                    An array of argument names.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateIndexSetComplex(System.Object,System.Object[],System.String[],System.Boolean,System.Boolean)">
      <summary>
                    Executes a late-bound property set or field write call. This helper method is not meant to be called directly from your code.
                </summary>
      <param name="Instance">
                    An instance of the call object exposing the property or method.
                </param>
      <param name="Arguments">
                    An array containing the arguments to be passed to the property or method being called.
                </param>
      <param name="ArgumentNames">
                    An array of argument names.
                </param>
      <param name="OptimisticSet">
                    A Boolean value used to determine whether the set operation will work. Set to True when you believe that an intermediate value has been set in the property or field; otherwise False.
                </param>
      <param name="RValueBase">
                    A Boolean value that specifies when the base reference of the late reference is an RValue. Set to True when the base reference of the late reference is an RValue; this allows you to generate a run-time exception for late assignments to fields of RValues of value types. Otherwise, set to False.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateSet(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[])">
      <summary>
                    Executes a late-bound property set or field write call. This helper method is not meant to be called directly from your code.
                </summary>
      <param name="Instance">
                    An instance of the call object exposing the property or method.
                </param>
      <param name="Type">
                    The type of the call object.
                </param>
      <param name="MemberName">
                    The name of the property or method on the call object.
                </param>
      <param name="Arguments">
                    An array containing the arguments to be passed to the property or method being called.
                </param>
      <param name="ArgumentNames">
                    An array of argument names.
                </param>
      <param name="TypeArguments">
                    An array of argument types; used only for generic calls to pass argument types.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateSet(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean,System.Boolean,Microsoft.VisualBasic.CallType)">
      <summary>
                    Executes a late-bound property set or field write call. This helper method is not meant to be called directly from your code.
                </summary>
      <param name="Instance">
                    An instance of the call object exposing the property or method.
                </param>
      <param name="Type">
                    The type of the call object.
                </param>
      <param name="MemberName">
                    The name of the property or method on the call object.
                </param>
      <param name="Arguments">
                    An array containing the arguments to be passed to the property or method being called.
                </param>
      <param name="ArgumentNames">
                    An array of argument names.
                </param>
      <param name="TypeArguments">
                    An array of argument types; used only for generic calls to pass argument types.
                </param>
      <param name="OptimisticSet">
                    A Boolean value used to determine whether the set operation will work. Set to True when you believe that an intermediate value has been set in the property or field; otherwise False.
                </param>
      <param name="RValueBase">
                    A Boolean value that specifies when the base reference of the late reference is an RValue. Set to True when the base reference of the late reference is an RValue; this allows you to generate a run-time exception for late assignments to fields of RValues of value types. Otherwise, set to False.
                </param>
      <param name="CallType">
                    An enumeration member of type CallType Enumeration representing the type of procedure being called. The value of CallType can be Method, Get, or Set. Only Set is used.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateSetComplex(System.Object,System.Type,System.String,System.Object[],System.String[],System.Type[],System.Boolean,System.Boolean)">
      <summary>
                    Executes a late-bound property set or field write call. This helper method is not meant to be called directly from your code.
                </summary>
      <param name="Instance">
                    An instance of the call object exposing the property or method.
                </param>
      <param name="Type">
                    The type of the call object.
                </param>
      <param name="MemberName">
                    The name of the property or method on the call object.
                </param>
      <param name="Arguments">
                    An array containing the arguments to be passed to the property or method being called.
                </param>
      <param name="ArgumentNames">
                    An array of argument names.
                </param>
      <param name="TypeArguments">
                    An array of argument types; used only for generic calls to pass argument types.
                </param>
      <param name="OptimisticSet">
                    A Boolean value used to determine whether the set operation will work. Set to True when you believe that an intermediate value has been set in the property or field; otherwise False.
                </param>
      <param name="RValueBase">
                    A Boolean value that specifies when the base reference of the late reference is an RValue. Set to True when the base reference of the late reference is an RValue; this allows you to generate a run-time exception for late assignments to fields of RValues of value types. Otherwise, set to False.
                </param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl">
      <summary>
                    The Visual Basic compiler uses this class for object flow control; it is not meant to be called directly from your code.
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.CheckForSyncLockOnValueType(System.Object)">
      <summary>
                    Checks for a synchronization lock on the specified type.
                </summary>
      <param name="Expression">
                    The data type for which to check for synchronization lock.
                </param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl">
      <summary>
                    Provides services to the Visual Basic compiler for compiling For...Next loops.
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForLoopInitObj(System.Object,System.Object,System.Object,System.Object,System.Object@,System.Object@)">
      <summary>
                    Initializes a For...Next loop.
                </summary>
      <returns>False if the loop has terminated; otherwise, True.
                </returns>
      <param name="Counter">
                    The loop counter variable.
                </param>
      <param name="Start">
                    The initial value of the loop counter.
                </param>
      <param name="Limit">
                    The value of the To option.
                </param>
      <param name="StepValue">
                    The value of the Step option.
                </param>
      <param name="LoopForResult">
                    An object that contains verified values for loop values.
                </param>
      <param name="CounterResult">
                    The counter value for the next loop iteration.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckDec(System.Decimal,System.Decimal,System.Decimal)">
      <summary>
                    Checks for valid values for the loop counter, Step, and To values.
                </summary>
      <returns>True if <paramref name="StepValue" /> is greater than zero and <paramref name="count" /> is less than or equal to <paramref name="limit" /> or <paramref name="StepValue" /> is less than or equal to zero and <paramref name="count" /> is greater than or equal to <paramref name="limit" />; otherwise, False.
                </returns>
      <param name="count">
                    Required. A Decimal value that represents the initial value passed for the loop counter variable.
                </param>
      <param name="limit">
                    Required. A Decimal value that represents the value passed by using the To keyword.
                </param>
      <param name="StepValue">
                    Required. A Decimal value that represents the value passed by using the Step keyword.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckObj(System.Object,System.Object,System.Object@)">
      <summary>
                    Increments a For...Next loop.
                </summary>
      <returns>False if the loop has terminated; otherwise, True.
                </returns>
      <param name="Counter">
                    The loop counter variable.
                </param>
      <param name="LoopObj">
                    An object that contains verified values for loop values.
                </param>
      <param name="CounterResult">
                    The counter value for the next loop iteration.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR4(System.Single,System.Single,System.Single)">
      <summary>
                    Checks for valid values for the loop counter, Step, and To values.
                </summary>
      <returns>True if <paramref name="StepValue" /> is greater than zero and <paramref name="count" /> is less than or equal to <paramref name="limit" />, or if <paramref name="StepValue" /> is less than or equal to zero and <paramref name="count" /> is greater than or equal to <paramref name="limit" />; otherwise, False.
                </returns>
      <param name="count">
                    Required. A Single value that represents the initial value passed for the loop counter variable.
                </param>
      <param name="limit">
                    Required. A Single value that represents the value passed by using the To keyword.
                </param>
      <param name="StepValue">
                    Required. A Single value that represents the value passed by using the Step keyword.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR8(System.Double,System.Double,System.Double)">
      <summary>
                    Checks for valid values for the loop counter, Step, and To values.
                </summary>
      <returns>True if <paramref name="StepValue" /> is greater than zero and <paramref name="count" /> is less than or equal to <paramref name="limit" />, or if <paramref name="StepValue" /> is less than or equal to zero and <paramref name="count" /> is greater than or equal to <paramref name="limit" />; otherwise, False.
                </returns>
      <param name="count">
                    Required. A Double value that represents the initial value passed for the loop counter variable.
                </param>
      <param name="limit">
                    Required. A Double value that represents the value passed by using the To keyword.
                </param>
      <param name="StepValue">
                    Required. A Double value that represents the value passed by using the Step keyword.
                </param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Operators">
      <summary>
                    Provides late-bound math operators, such as <see cref="M:Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)" /> and <see cref="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObject(System.Object,System.Object,System.Boolean)" />, which the Visual Basic compiler uses internally. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.AddObject(System.Object,System.Object)">
      <summary>
                    Represents the Visual Basic addition (+) operator.
                </summary>
      <returns>
                    The sum of <paramref name="Left" /> and <paramref name="Right" />.
                </returns>
      <param name="Left">
                    Required. Any numeric expression.
                </param>
      <param name="Right">
                    Required. Any numeric expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.AndObject(System.Object,System.Object)">
      <summary>
                    Represents the Visual Basic And operator.
                </summary>
      <returns>
                    For Boolean operations, True if both <paramref name="Left" /> and <paramref name="Right" /> evaluate to True; otherwise, False. For bitwise operations, 1 if both <paramref name="Left" /> and <paramref name="Right" /> evaluate to 1; otherwise, 0.
                </returns>
      <param name="Left">
                    Required. Any Boolean or numeric expression.
                </param>
      <param name="Right">
                    Required. Any Boolean or numeric expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObject(System.Object,System.Object,System.Boolean)">
      <summary>
                    Represents Visual Basic comparison operators.
                </summary>
      <returns>
                    Value 
                
                    Condition 
                
                    -1 
                <paramref name="Left" /> is less than <paramref name="Right" />.
                
                    0 
                <paramref name="Left" /> and <paramref name="Right" /> are equal.
                
                    1 
                <paramref name="Left" /> is greater than <paramref name="Right" />.
                </returns>
      <param name="Left">
                    Required. Any expression.
                </param>
      <param name="Right">
                    Required. Any expression.
                </param>
      <param name="TextCompare">
                    Required. True to perform a case-insensitive string comparison; otherwise, False.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectEqual(System.Object,System.Object,System.Boolean)">
      <summary>
                    Represents the Visual Basic equal (=) operator.
                </summary>
      <returns>True if <paramref name="Left" /> and <paramref name="Right" /> are equal; otherwise, False.
                </returns>
      <param name="Left">
                    Required. Any expression.
                </param>
      <param name="Right">
                    Required. Any expression.
                </param>
      <param name="TextCompare">
                    Required. True to perform a case-insensitive string comparison; otherwise, False.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreater(System.Object,System.Object,System.Boolean)">
      <summary>
                    Represents the Visual Basic greater-than (&gt;) operator.
                </summary>
      <returns>True if <paramref name="Left" /> is greater than <paramref name="Right" />; otherwise, False.
                </returns>
      <param name="Left">
                    Required. Any expression.
                </param>
      <param name="Right">
                    Required. Any expression.
                </param>
      <param name="TextCompare">
                    Required. True to perform a case-insensitive string comparison; otherwise, False.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)">
      <summary>
                    Represents the Visual Basic greater-than or equal-to (&gt;=) operator.
                </summary>
      <returns>True if <paramref name="Left" /> is greater than or equal to <paramref name="Right" />; otherwise, False.
                </returns>
      <param name="Left">
                    Required. Any expression.
                </param>
      <param name="Right">
                    Required. Any expression.
                </param>
      <param name="TextCompare">
                    Required. True to perform a case-insensitive string comparison; otherwise, False.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLess(System.Object,System.Object,System.Boolean)">
      <summary>
                    Represents the Visual Basic less-than (&lt;) operator.
                </summary>
      <returns>True if <paramref name="Left" /> is less than <paramref name="Right" />; otherwise, False.
                </returns>
      <param name="Left">
                    Required. Any expression.
                </param>
      <param name="Right">
                    Required. Any expression.
                </param>
      <param name="TextCompare">
                    Required. True to perform a case-insensitive string comparison; otherwise, False.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectLessEqual(System.Object,System.Object,System.Boolean)">
      <summary>
                    Represents the Visual Basic less-than or equal-to (&lt;=) operator.
                </summary>
      <returns>True if <paramref name="Left" /> is less than or equal to <paramref name="Right" />; otherwise, False.
                </returns>
      <param name="Left">
                    Required. Any expression.
                </param>
      <param name="Right">
                    Required. Any expression.
                </param>
      <param name="TextCompare">
                    Required. True to perform a case-insensitive string comparison; otherwise, False.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareObjectNotEqual(System.Object,System.Object,System.Boolean)">
      <summary>
                    Represents the Visual Basic not-equal (&lt;&gt;) operator.
                </summary>
      <returns>True if <paramref name="Left" /> is not equal to <paramref name="Right" />; otherwise, False.
                </returns>
      <param name="Left">
                    Required. Any expression.
                </param>
      <param name="Right">
                    Required. Any expression.
                </param>
      <param name="TextCompare">
                    Required. True to perform a case-insensitive string comparison; otherwise, False.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.CompareString(System.String,System.String,System.Boolean)">
      <summary>
                    Performs binary or text string comparison when given two strings.
                </summary>
      <returns>
                    Value 
                
                    Condition 
                
                    -1 
                <paramref name="Left" /> is less than <paramref name="Right" />. 
                
                    0
                <paramref name="Left" /> is equal to <paramref name="Right" />. 
                
                    1 
                <paramref name="Left" /> is greater than <paramref name="Right" />. 
                </returns>
      <param name="Left">
                    Required. Any String expression.
                </param>
      <param name="Right">
                    Required. Any String expression.
                </param>
      <param name="TextCompare">
                    Required. True to perform a case-insensitive string comparison; otherwise, False.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConcatenateObject(System.Object,System.Object)">
      <summary>
                    Represents the Visual Basic concatenation (&amp;) operator.
                </summary>
      <returns>
                    A string representing the concatenation of <paramref name="Left" /> and <paramref name="Right" />.
                </returns>
      <param name="Left">
                    Required. Any expression.
                </param>
      <param name="Right">
                    Required. Any expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectEqual(System.Object,System.Object,System.Boolean)">
      <summary>
                    Represents the overloaded Visual Basic equals (=) operator.
                </summary>
      <returns>
                    The result of the overloaded equals operator. False if operator overloading is not supported.
                </returns>
      <param name="Left">
                    Required. Any expression.
                </param>
      <param name="Right">
                    Required. Any expression.
                </param>
      <param name="TextCompare">
                    Required. True to perform a case-insensitive string comparison; otherwise, False.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreater(System.Object,System.Object,System.Boolean)">
      <summary>
                    Represents the overloaded Visual Basic greater-than (&gt;) operator.
                </summary>
      <returns>
                    The result of the overloaded greater-than operator. False if operator overloading is not supported.
                </returns>
      <param name="Left">
                    Required. Any expression.
                </param>
      <param name="Right">
                    Required. Any expression.
                </param>
      <param name="TextCompare">
                    Required. True to perform a case-insensitive string comparison; otherwise, False.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectGreaterEqual(System.Object,System.Object,System.Boolean)">
      <summary>
                    Represents the overloaded Visual Basic greater-than or equal-to (&gt;=) operator.
                </summary>
      <returns>
                    The result of the overloaded greater-than or equal-to operator. False if operator overloading is not supported.
                </returns>
      <param name="Left">
                    Required. Any expression.
                </param>
      <param name="Right">
                    Required. Any expression.
                </param>
      <param name="TextCompare">
                    Required. True to perform a case-insensitive string comparison; otherwise, False.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLess(System.Object,System.Object,System.Boolean)">
      <summary>
                    Represents the overloaded Visual Basic less-than (&lt;) operator.
                </summary>
      <returns>
                    The result of the overloaded less-than operator. False if operator overloading is not supported.
                </returns>
      <param name="Left">
                    Required. Any expression.
                </param>
      <param name="Right">
                    Required. Any expression.
                </param>
      <param name="TextCompare">
                    Required. True to perform a case-insensitive string comparison; otherwise, False.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectLessEqual(System.Object,System.Object,System.Boolean)">
      <summary>
                    Represents the overloaded Visual Basic less-than or equal-to (&lt;=) operator.
                </summary>
      <returns>
                    The result of the overloaded less-than or equal-to operator. False if operator overloading is not supported.
                </returns>
      <param name="Left">
                    Required. Any expression.
                </param>
      <param name="Right">
                    Required. Any expression.
                </param>
      <param name="TextCompare">
                    Required. True to perform a case-insensitive string comparison; otherwise, False.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ConditionalCompareObjectNotEqual(System.Object,System.Object,System.Boolean)">
      <summary>
                    Represents the overloaded Visual Basic not-equal (&lt;&gt;) operator.
                </summary>
      <returns>
                    The result of the overloaded not-equal operator. False if operator overloading is not supported.
                </returns>
      <param name="Left">
                    Required. Any expression.
                </param>
      <param name="Right">
                    Required. Any expression.
                </param>
      <param name="TextCompare">
                    Required. True to perform a case-insensitive string comparison; otherwise, False.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.DivideObject(System.Object,System.Object)">
      <summary>
                    Represents the Visual Basic division (/) operator.
                </summary>
      <returns>
                    The full quotient of <paramref name="Left" /> divided by <paramref name="Right" />, including any remainder.
                </returns>
      <param name="Left">
                    Required. Any numeric expression.
                </param>
      <param name="Right">
                    Required. Any numeric expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ExponentObject(System.Object,System.Object)">
      <summary>
                    Represents the Visual Basic exponent (^) operator.
                </summary>
      <returns>
                    The result of <paramref name="Left" /> raised to the power of <paramref name="Right" />.
                </returns>
      <param name="Left">
                    Required. Any numeric expression.
                </param>
      <param name="Right">
                    Required. Any numeric expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.IntDivideObject(System.Object,System.Object)">
      <summary>
                    Represents the Visual Basic integer division (\) operator.
                </summary>
      <returns>
                    The integer quotient of <paramref name="Left" /> divided by <paramref name="Right" />, which discards any remainder and retains only the integer portion.
                </returns>
      <param name="Left">
                    Required. Any numeric expression.
                </param>
      <param name="Right">
                    Required. Any numeric expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.LeftShiftObject(System.Object,System.Object)">
      <summary>
                    Represents the Visual Basic arithmetic left shift (&lt;&lt;) operator.
                </summary>
      <returns>
                    An integral numeric value. The result of shifting the bit pattern. The data type is the same as that of <paramref name="Operand" />.
                </returns>
      <param name="Operand">
                    Required. Integral numeric expression. The bit pattern to be shifted. The data type must be an integral type (SByte, Byte, Short, UShort, Integer, UInteger, Long, or ULong).
                </param>
      <param name="Amount">
                    Required. Numeric expression. The number of bits to shift the bit pattern. The data type must be Integer or widen to Integer.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.ModObject(System.Object,System.Object)">
      <summary>
                    Represents the Visual Basic Mod operator.
                </summary>
      <returns>
                    The remainder after <paramref name="Left" /> is divided by <paramref name="Right" />. 
                </returns>
      <param name="Left">
                    Required. Any numeric expression.
                </param>
      <param name="Right">
                    Required. Any numeric expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.MultiplyObject(System.Object,System.Object)">
      <summary>
                    Represents the Visual Basic multiply (*) operator.
                </summary>
      <returns>
                    The product of <paramref name="Left" /> and <paramref name="Right" />.
                </returns>
      <param name="Left">
                    Required. Any numeric expression.
                </param>
      <param name="Right">
                    Required. Any numeric expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.NegateObject(System.Object)">
      <summary>
                    Represents the Visual Basic unary minus (–) operator.
                </summary>
      <returns>
                    The negative value of <paramref name="Operand" />.
                </returns>
      <param name="Operand">
                    Required. Any numeric expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.NotObject(System.Object)">
      <summary>
                    Represents the Visual Basic Not operator.
                </summary>
      <returns>
                    For Boolean operations, False if <paramref name="Operand" /> is True; otherwise, True. For bitwise operations, 1 if <paramref name="Operand" /> is 0; otherwise, 0.
                </returns>
      <param name="Operand">
                    Required. Any Boolean or numeric expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.OrObject(System.Object,System.Object)">
      <summary>
                    Represents the Visual Basic Or operator.
                </summary>
      <returns>
                    For Boolean operations, False if both <paramref name="Left" /> and <paramref name="Right" /> evaluate to False; otherwise, True. For bitwise operations, 0 if both <paramref name="Left" /> and <paramref name="Right" /> evaluate to 0; otherwise, 1.
                </returns>
      <param name="Left">
                    Required. Any Boolean or numeric expression.
                </param>
      <param name="Right">
                    Required. Any Boolean or numeric expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.PlusObject(System.Object)">
      <summary>
                    Represents the Visual Basic unary plus (+) operator.
                </summary>
      <returns>
                    The value of <paramref name="Operand" />. (The sign of the <paramref name="Operand" /> is unchanged.)
                </returns>
      <param name="Operand">
                    Required. Any numeric expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.RightShiftObject(System.Object,System.Object)">
      <summary>
                    Represents the Visual Basic arithmetic right shift (&gt;&gt;) operator.
                </summary>
      <returns>
                    An integral numeric value. The result of shifting the bit pattern. The data type is the same as that of <paramref name="Operand" />.
                </returns>
      <param name="Operand">
                    Required. Integral numeric expression. The bit pattern to be shifted. The data type must be an integral type (SByte, Byte, Short, UShort, Integer, UInteger, Long, or ULong).
                </param>
      <param name="Amount">
                    Required. Numeric expression. The number of bits to shift the bit pattern. The data type must be Integer or widen to Integer.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.SubtractObject(System.Object,System.Object)">
      <summary>
                    Represents the Visual Basic subtraction (–) operator.
                </summary>
      <returns>
                    The difference between <paramref name="Left" /> and <paramref name="Right" />.
                </returns>
      <param name="Left">
                    Required. Any numeric expression. 
                </param>
      <param name="Right">
                    Required. Any numeric expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Operators.XorObject(System.Object,System.Object)">
      <summary>
                    Represents the Visual Basic Xor operator.
                </summary>
      <returns>
                    A Boolean or numeric value. For a Boolean comparison, the return value is the logical exclusion (exclusive logical disjunction) of two Boolean values. For bitwise (numeric) operations, the return value is a numeric value that represents the bitwise exclusion (exclusive bitwise disjunction) of two numeric bit patterns. For more information, see Xor Operator (Visual Basic).
                </returns>
      <param name="Left">
                    Required. Any Boolean or numeric expression.
                </param>
      <param name="Right">
                    Required. Any Boolean or numeric expression.
                </param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute">
      <summary>
                    Specifies that the current Option Compare setting should be passed as the default value for an argument. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.OptionCompareAttribute" /> class.
                </summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.OptionTextAttribute">
      <summary>
                    The Visual Basic compiler emits this helper class to indicate (for Visual Basic debugging) which comparison option, binary or text, is being used
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.OptionTextAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.OptionTextAttribute" /> class. This is a helper method.
                </summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.ProjectData">
      <summary>
                    Provides helpers for the Visual Basic Err object. 
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.ClearProjectError">
      <summary>
                    Performs the work for the Clear method of the Err object. A helper method.
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.CreateProjectError(System.Int32)">
      <summary>
                    Performs the work for the Raise method of the Err object. A helper method.
                </summary>
      <returns>
                    An <see cref="T:System.Exception" /> object.
                </returns>
      <param name="hr">
                    An integer value that identifies the nature of the error. Visual Basic errors are in the range 0–65535; the range 0–512 is reserved for system errors; the range 513–65535 is available for user-defined errors.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.SetProjectError(System.Exception)">
      <summary>
                    The Visual Basic compiler uses this helper method to capture exceptions in the Err object.
                </summary>
      <param name="ex">
                    The <see cref="T:System.Exception" /> object to be caught.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.ProjectData.SetProjectError(System.Exception,System.Int32)">
      <summary>
                    The Visual Basic compiler uses this helper method to capture exceptions in the Err object.
                </summary>
      <param name="ex">
                    The <see cref="T:System.Exception" /> object to be caught.
                </param>
      <param name="lErl">
                    The line number of the exception.
                </param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute">
      <summary>
                    This class provides attributes that are applied to the standard module construct when it is emitted to Intermediate Language (IL). It is not intended to be called directly from your code.
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.StandardModuleAttribute" /> class.
                </summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag">
      <summary>
                    The Visual Basic compiler uses this class internally when initializing static local members; it is not meant to be called directly from your code.
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag" /> class.
                </summary>
    </member>
    <member name="F:Microsoft.VisualBasic.CompilerServices.StaticLocalInitFlag.State">
      <summary>
                    Returns the state of the static local member's initialization flag (initialized or not).
                </summary>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Utils">
      <summary>
                    Contains utilities that the Visual Basic compiler uses.
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Utils.CopyArray(System.Array,System.Array)">
      <summary>
                    Used by the Visual Basic compiler as a helper for Redim.
                </summary>
      <returns>
                    The copied array.
                </returns>
      <param name="arySrc">
                    The array to be copied.
                </param>
      <param name="aryDest">
                    The destination array.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Utils.GetResourceString(System.String,System.String[])">
      <summary>
                    Retrieves and formats a localized resource string or error message.
                </summary>
      <returns>
                    A formatted resource string or error message.
                </returns>
      <param name="ResourceKey">
                    The identifier of the string or error message to retrieve.
                </param>
      <param name="Args">
                    An array of parameters to replace placeholders in the string or error message.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Utils.MethodToString(System.Reflection.MethodBase)">
      <summary>
                    Returns a Visual Basic method signature.
                </summary>
      <returns>
                    The Visual Basic method signature for the supplied <see cref="T:System.Reflection.MethodBase" /> object.
                </returns>
      <param name="Method">
                    A <see cref="T:System.Reflection.MethodBase" /> object to return a Visual Basic method signature for.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Utils.ThrowException(System.Int32)">
      <summary>
                    Throws a localized Visual Basic exception.
                </summary>
      <param name="hr">
                    The Visual Basic error identifier.
                </param>
    </member>
    <member name="T:Microsoft.VisualBasic.CompilerServices.Versioned">
      <summary>
                    The <see cref="T:Microsoft.VisualBasic.CompilerServices.Versioned" /> module contains procedures used to interact with objects, applications, and systems.
                </summary>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])">
      <summary>
                    Executes a method on an object, or sets or returns a property on an object.
                </summary>
      <returns>
                    Executes a method on an object, or sets or returns a property on an object.
                </returns>
      <param name="Instance">
                    Required. Object. A pointer to the object exposing the property or method.
                </param>
      <param name="MethodName">
                    Required. String. A string expression containing the name of the property or method on the object.
                </param>
      <param name="UseCallType">
                    Required. An enumeration member of type CallType Enumeration representing the type of procedure being called. The value of CallType can be Method, Get, or Set.
                </param>
      <param name="Arguments">
                    Optional. ParamArray. A parameter array containing the arguments to be passed to the property or method being called.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.IsNumeric(System.Object)">
      <summary>
                    Returns a Boolean value indicating whether an expression can be evaluated as a number.
                </summary>
      <returns>
                    Returns a Boolean value indicating whether an expression can be evaluated as a number.
                </returns>
      <param name="Expression">
                    Required. Object expression.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.SystemTypeName(System.String)">
      <summary>
                    Returns a string value containing the system data type name of a variable.
                </summary>
      <returns>
                    Returns a string value containing the system data type name of a variable.
                </returns>
      <param name="VbName">
                    Required. A string variable containing a Visual Basic type name.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.TypeName(System.Object)">
      <summary>
                    Returns a string value containing data type information about a variable.
                </summary>
      <returns>
                    Returns a string value containing data type information about a variable.
                </returns>
      <param name="Expression">
                    Required. Object variable. If Option Strict is Off, you can pass a variable of any data type except a structure.
                </param>
    </member>
    <member name="M:Microsoft.VisualBasic.CompilerServices.Versioned.VbTypeName(System.String)">
      <summary>
                    Returns a string value containing the Visual Basic data type name of a variable.
                </summary>
      <returns>
                    Returns a string value containing the Visual Basic data type name of a variable.
                </returns>
      <param name="SystemName">
                    Required. String variable containing a type name used by the common language runtime.
                </param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\2.0.31005.0\ReferenceAssemblies\System.Net.Xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Net</name>
  </assembly>
  <members>
    <member name="T:System.Net.DnsEndPoint">
      <summary>
                    Represents a network endpoint as a host name or a string representation of an IP address and a port number.
                </summary>
    </member>
    <member name="M:System.Net.DnsEndPoint.#ctor(System.String,System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.DnsEndPoint" /> class with the host name or string representation of an IP address and a port number.
                </summary>
      <param name="host">
                    The host name or a string representation of the IP address.
                </param>
      <param name="port">
                    The port number associated with the <paramref name="address" />, or 0 to specify any available port. <paramref name="port" /> is in host order.
                </param>
      <exception cref="T:System.ArgumentException">
                    The <paramref name="host" /> parameter contains an empty string.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="host" /> parameter is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> is less than 0 
                
                    -or- 
                <paramref name="port" /> is greater than 0xffff. 
                </exception>
    </member>
    <member name="M:System.Net.DnsEndPoint.#ctor(System.String,System.Int32,System.Net.Sockets.AddressFamily)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.DnsEndPoint" /> class with the host name or string representation of an IP address, a port number, and an address family.
                </summary>
      <param name="host">
                    The host name or a string representation of the IP address.
                </param>
      <param name="port">
                    The port number associated with the <paramref name="address" />, or 0 to specify any available port. <paramref name="port" /> is in host order.
                </param>
      <param name="addressFamily">
                    One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values.
                </param>
      <exception cref="T:System.ArgumentException">
                    The <paramref name="host" /> parameter contains an empty string 
                
                    -or- 
                
                    the <paramref name="addressFamily" /> parameter is specified as <see cref="F:System.Net.Sockets.AddressFamily.Unknown" />.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="host" /> parameter is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> is less than 0 
                
                    -or- 
                <paramref name="port" /> is greater than 0xffff. 
                </exception>
    </member>
    <member name="P:System.Net.DnsEndPoint.AddressFamily">
      <summary>
                    Gets the Internet Protocol (IP) address family.
                </summary>
      <returns>
                    One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values.
                </returns>
    </member>
    <member name="M:System.Net.DnsEndPoint.Equals(System.Object)">
      <summary>
                    Compares two <see cref="T:System.Net.DnsEndPoint" /> objects.
                </summary>
      <returns>true if the two <see cref="T:System.Net.DnsEndPoint" /> instances are equal; otherwise, false.
                </returns>
      <param name="comparand">
                    A <see cref="T:System.Net.DnsEndPoint" /> instance to compare to the current instance.
                </param>
    </member>
    <member name="M:System.Net.DnsEndPoint.GetHashCode">
      <summary>
                    Returns a hash value for a <see cref="T:System.Net.DnsEndPoint" />.
                </summary>
      <returns>
                    An integer hash value for the <see cref="T:System.Net.DnsEndPoint" />.
                </returns>
    </member>
    <member name="P:System.Net.DnsEndPoint.Host">
      <summary>
                    Gets the host name or string representation of the Internet Protocol (IP) address of the host.
                </summary>
      <returns>
                    A host name or string representation of an IP address.
                </returns>
    </member>
    <member name="P:System.Net.DnsEndPoint.Port">
      <summary>
                    Gets the port number of the <see cref="T:System.Net.DnsEndPoint" />.
                </summary>
      <returns>
                    An integer value in the range 0 to 0xffff indicating the port number of the <see cref="T:System.Net.DnsEndPoint" />.
                </returns>
    </member>
    <member name="M:System.Net.DnsEndPoint.ToString">
      <summary>
                    Returns the host name or string representation of the IP address and port number of the <see cref="T:System.Net.DnsEndPoint" />.
                </summary>
      <returns>
                    A string containing the address family, host name or IP address string, and the port number of the specified <see cref="T:System.Net.DnsEndPoint" />.
                </returns>
    </member>
    <member name="T:System.Net.DownloadProgressChangedEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Net.WebClient.DownloadProgressChanged" /> event of a <see cref="T:System.Net.WebClient" />.
                </summary>
    </member>
    <member name="P:System.Net.DownloadProgressChangedEventArgs.BytesReceived">
      <summary>
                    Gets the number of bytes received.
                </summary>
      <returns>
                    An <see cref="T:System.Int64" /> value that indicates the number of bytes received.
                </returns>
    </member>
    <member name="P:System.Net.DownloadProgressChangedEventArgs.TotalBytesToReceive">
      <summary>
                    Gets the total number of bytes in a <see cref="T:System.Net.WebClient" /> data download operation.
                </summary>
      <returns>
                    An <see cref="T:System.Int64" /> value that indicates the number of bytes that will be received.
                </returns>
    </member>
    <member name="T:System.Net.DownloadProgressChangedEventHandler">
      <summary>
                    Represents the method that will handle the <see cref="E:System.Net.WebClient.DownloadProgressChanged" /> event of a <see cref="T:System.Net.WebClient" />.
                </summary>
      <param name="sender">
                    The source of the event.
                </param>
      <param name="e">
                    A <see cref="T:System.Net.DownloadProgressChangedEventArgs" /> containing event data.
                </param>
    </member>
    <member name="T:System.Net.DownloadStringCompletedEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Net.WebClient.DownloadStringCompleted" /> event. 
                </summary>
    </member>
    <member name="P:System.Net.DownloadStringCompletedEventArgs.Result">
      <summary>
                    Gets the data that is downloaded by a <see cref="Overload:System.Net.WebClient.DownloadStringAsync" /> method.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> that contains the downloaded data.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The asynchronous request was cancelled. 
                </exception>
    </member>
    <member name="T:System.Net.DownloadStringCompletedEventHandler">
      <summary>
                    Represents the method that will handle the <see cref="E:System.Net.WebClient.DownloadStringCompleted" /> event of a <see cref="T:System.Net.WebClient" />. 
                </summary>
      <param name="sender">
                    The source of the event.
                </param>
      <param name="e">
                    A <see cref="T:System.Net.DownloadStringCompletedEventArgs" /> that contains event data.
                </param>
    </member>
    <member name="T:System.Net.EndPoint">
      <summary>
                    Identifies a network address. This is an abstract class.
                </summary>
    </member>
    <member name="M:System.Net.EndPoint.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.EndPoint" /> class.
                </summary>
    </member>
    <member name="P:System.Net.EndPoint.AddressFamily">
      <summary>
                    Gets the address family to which the endpoint belongs.
                </summary>
      <returns>
                    One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values.
                </returns>
      <exception cref="T:System.NotImplementedException">
                    Any attempt is made to get or set the property when the property is not overridden in a descendant class. 
                </exception>
    </member>
    <member name="M:System.Net.EndPoint.Create(System.Net.SocketAddress)">
      <summary>
                    Creates an <see cref="T:System.Net.EndPoint" /> instance from a <see cref="T:System.Net.SocketAddress" /> instance.
                </summary>
      <returns>
                    A new <see cref="T:System.Net.EndPoint" /> instance that is initialized from the specified <see cref="T:System.Net.SocketAddress" /> instance.
                </returns>
      <param name="socketAddress">
                    The socket address that serves as the endpoint for a connection.
                </param>
      <exception cref="T:System.NotImplementedException">
                    Any attempt is made to access the method when the method is not overridden in a descendant class. 
                </exception>
    </member>
    <member name="M:System.Net.EndPoint.Serialize">
      <summary>
                    Serializes endpoint information into a <see cref="T:System.Net.SocketAddress" /> instance.
                </summary>
      <returns>
                    A <see cref="T:System.Net.SocketAddress" /> instance that contains the endpoint information.
                </returns>
      <exception cref="T:System.NotImplementedException">
                    Any attempt is made to access the method when the method is not overridden in a descendant class. 
                </exception>
    </member>
    <member name="T:System.Net.HttpRequestHeader">
      <summary>
                    The HTTP headers that may be specified in a client request.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.CacheControl">
      <summary>
                    The Cache-Control header, which specifies directives that must be obeyed by all cache control mechanisms along the request/response chain.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Connection">
      <summary>
                    The Connection header, which specifies options that are desired for a particular connection.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Date">
      <summary>
                    The Date header, which specifies the date and time at which the request originated.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.KeepAlive">
      <summary>
                    The Keep-Alive header, which specifies a parameter used into order to maintain a persistent connection.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Pragma">
      <summary>
                    The Pragma header, which specifies implementation-specific directives that might apply to any agent along the request/response chain.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Trailer">
      <summary>
                    The Trailer header, which specifies the header fields present in the trailer of a message encoded with chunked transfer-coding.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.TransferEncoding">
      <summary>
                    The Transfer-Encoding header, which specifies what (if any) type of transformation that has been applied to the message body.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Upgrade">
      <summary>
                    The Upgrade header, which specifies additional communications protocols that the client supports.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Via">
      <summary>
                    The Via header, which specifies intermediate protocols to be used by gateway and proxy agents.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Warning">
      <summary>
                    The Warning header, which specifies additional information about that status or transformation of a message that might not be reflected in the message.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Allow">
      <summary>
                    The Allow header, which specifies the set of HTTP methods supported.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentLength">
      <summary>
                    The Content-Length header, which specifies the length, in bytes, of the accompanying body data.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentType">
      <summary>
                    The Content-Type header, which specifies the MIME type of the accompanying body data.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentEncoding">
      <summary>
                    The Content-Encoding header, which specifies the encodings that have been applied to the accompanying body data.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentLanguage">
      <summary>
                    The Content-Langauge header, which specifies the natural language(s) of the accompanying body data.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentLocation">
      <summary>
                    The Content-Location header, which specifies a URI from which the accompanying body may be obtained.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentMd5">
      <summary>
                    The Content-MD5 header, which specifies the MD5 digest of the accompanying body data, for the purpose of providing an end-to-end message integrity check.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ContentRange">
      <summary>
                    The Content-Range header, which specifies where in the full body the accompanying partial body data should be applied.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Expires">
      <summary>
                    The Expires header, which specifies the date and time after which the accompanying body data should be considered stale.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.LastModified">
      <summary>
                    The Last-Modified header, which specifies the date and time at which the accompanying body data was last modified.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Accept">
      <summary>
                    The Accept header, which specifies the MIME types that are acceptable for the response.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.AcceptCharset">
      <summary>
                    The Accept-Charset header, which specifies the character sets that are acceptable for the response.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.AcceptEncoding">
      <summary>
                    The Accept-Encoding header, which specifies the content encodings that are acceptable for the response.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.AcceptLanguage">
      <summary>
                    The Accept-Langauge header, which specifies that natural languages that are preferred for the response.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Authorization">
      <summary>
                    The Authorization header, which specifies the credentials that the client presents in order to authenticate itself to the server.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Cookie">
      <summary>
                    The Cookie header, which specifies cookie data presented to the server.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Expect">
      <summary>
                    The Expect header, which specifies particular server behaviors that are required by the client.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.From">
      <summary>
                    The From header, which specifies an Internet E-mail address for the human user who controls the requesting user agent.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Host">
      <summary>
                    The Host header, which specifies the host name and port number of the resource being requested.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfMatch">
      <summary>
                    The If-Match header, which specifies that the requested operation should be performed only if the client's cached copy of the indicated resource is current.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfModifiedSince">
      <summary>
                    The If-Modified-Since header, which specifies that the requested operation should be performed only if the requested resource has been modified since the indicated data and time.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfNoneMatch">
      <summary>
                    The If-None-Match header, which specifies that the requested operation should be performed only if none of client's cached copies of the indicated resources are current.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfRange">
      <summary>
                    The If-Range header, which specifies that only the specified range of the requested resource should be sent, if the client's cached copy is current.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.IfUnmodifiedSince">
      <summary>
                    The If-Unmodified-Since header, which specifies that the requested operation should be performed only if the requested resource has not been modified since the indicated date and time.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.MaxForwards">
      <summary>
                    The Max-Forwards header, which specifies an integer indicating the remaining number of times that this request may be forwarded.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.ProxyAuthorization">
      <summary>
                    The Proxy-Authorization header, which specifies the credentials that the client presents in order to authenticate itself to a proxy.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Referer">
      <summary>
                    The Referer header, which specifies the URI of the resource from which the request URI was obtained.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Range">
      <summary>
                    The Range header, which specifies the the sub-range(s) of the response that the client requests be returned in lieu of the entire response.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Te">
      <summary>
                    The TE header, which specifies the transfer encodings that are acceptable for the response.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.Translate">
      <summary>
                    The Translate header, a Microsoft extension to the HTTP specification used in conjunction with WebDAV functionality.
                </summary>
    </member>
    <member name="F:System.Net.HttpRequestHeader.UserAgent">
      <summary>
                    The User-Agent header, which specifies information about the client agent.
                </summary>
    </member>
    <member name="T:System.Net.HttpStatusCode">
      <summary>
                    Contains the values of status codes defined for HTTP.
                </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.OK">
      <summary>
                    Equivalent to HTTP status 200. <see cref="F:System.Net.HttpStatusCode.OK" /> indicates that the request succeeded and that the requested information is in the response. This is the most common status code to receive.
                </summary>
    </member>
    <member name="F:System.Net.HttpStatusCode.NotFound">
      <summary>
                    Equivalent to HTTP status 404. <see cref="F:System.Net.HttpStatusCode.NotFound" /> indicates that the requested resource does not exist on the server.
                </summary>
    </member>
    <member name="T:System.Net.HttpWebRequest">
      <summary>
                    Provides an HTTP-specific implementation of the <see cref="T:System.Net.WebRequest" /> class.
                </summary>
    </member>
    <member name="M:System.Net.HttpWebRequest.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.HttpWebRequest" /> class.
                </summary>
    </member>
    <member name="M:System.Net.HttpWebRequest.Abort">
      <summary>
                    Cancels a request to an Internet resource.
                </summary>
    </member>
    <member name="P:System.Net.HttpWebRequest.Accept">
      <summary>
                    Gets or sets the value of the Accept HTTP header.
                </summary>
      <returns>
                    The value of the Accept HTTP header. The default value is null.
                </returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.AllowReadStreamBuffering">
      <summary>
                    Gets or sets a value that indicates whether to buffer the data read from the Internet resource.
                </summary>
      <returns>true to enable buffering of the data received from the Internet resource; false to disable buffering. The default is true.
                </returns>
    </member>
    <member name="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
      <summary>
                    Begins an asynchronous request for a <see cref="T:System.IO.Stream" /> object to use to write data.
                </summary>
      <returns>
                    An <see cref="T:System.IAsyncResult" /> that references the asynchronous request.
                </returns>
      <param name="callback">
                    The <see cref="T:System.AsyncCallback" /> delegate. 
                </param>
      <param name="state">
                    The state object for this request. 
                </param>
      <exception cref="T:System.Net.ProtocolViolationException">
                    The <see cref="P:System.Net.HttpWebRequest.Method" /> property is GET. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The stream is being used by a previous call to <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />
                    -or- 
                
                    The thread pool is running out of threads. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The request cache validator indicated that the response for this request can be served from the cache; however, requests that write data must not use the cache. This exception can occur if you are using a custom cache validator that is incorrectly implemented. 
                </exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort" /> was previously called. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    In a .NET Framework application, a request stream with zero content length was not obtained and closed correctly.
                </exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
      <summary>
                    Begins an asynchronous request to an Internet resource.
                </summary>
      <returns>
                    An <see cref="T:System.IAsyncResult" /> that references the asynchronous request for a response.
                </returns>
      <param name="callback">
                    The <see cref="T:System.AsyncCallback" /> delegate 
                </param>
      <param name="state">
                    The state object for this request. 
                </param>
      <exception cref="T:System.InvalidOperationException">
                    The stream is already in use by a previous call to <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" />
                    -or- 
                
                    The thread pool is running out of threads. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <paramref name="callback" /> parameter is null. 
                </exception>
      <exception cref="T:System.Net.ProtocolViolationException">
        <see cref="P:System.Net.HttpWebRequest.Method" /> is GET. 
                </exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort" /> was previously called. 
                </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.ContentType">
      <summary>
                    Gets or sets the value of the Content-type HTTP header.
                </summary>
      <returns>
                    The value of the Content-type HTTP header. The default value is null.
                </returns>
    </member>
    <member name="M:System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult)">
      <summary>
                    Ends an asynchronous request for a <see cref="T:System.IO.Stream" /> object to use to write data.
                </summary>
      <returns>
                    A <see cref="T:System.IO.Stream" /> to use to write request data.
                </returns>
      <param name="asyncResult">
                    The pending request for a stream. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null. 
                </exception>
      <exception cref="T:System.IO.IOException">
                    The request did not complete, and no stream is available. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> was not returned by the current instance from a call to <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" />. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    This method was called previously using <paramref name="asyncResult" />. 
                </exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort" /> was previously called.
                
                    -or- 
                
                    An error occurred while processing the request. 
                </exception>
    </member>
    <member name="M:System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)">
      <summary>
                    Ends an asynchronous request to an Internet resource.
                </summary>
      <returns>
                    A <see cref="T:System.Net.WebResponse" /> that contains the response from the Internet resource.
                </returns>
      <param name="asyncResult">
                    The pending request for a response. 
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null. 
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    This method was called previously using <paramref name="asyncResult." /></exception>
      <exception cref="T:System.Net.WebException">
        <see cref="M:System.Net.HttpWebRequest.Abort" /> was previously called.
                
                    -or- 
                
                    An error occurred while processing the request. 
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> was not returned by the current instance from a call to <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" />. 
                </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.HaveResponse">
      <summary>
                    Gets a value that indicates whether a response has been received from an Internet resource.
                </summary>
      <returns>true if a response has been received; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Net.HttpWebRequest.Headers">
      <summary>
                    Specifies a collection of the name/value pairs that make up the HTTP headers.
                </summary>
      <returns>
                    A <see cref="T:System.Net.WebHeaderCollection" /> that contains the name/value pairs that make up the headers for the HTTP request.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The request has been started by calling the <see cref="M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)" /> or <see cref="M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> method. 
                </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.Method">
      <summary>
                    Gets or sets the method for the request.
                </summary>
      <returns>
                    The request method to use to contact the Internet resource. The default value is GET.
                </returns>
      <exception cref="T:System.ArgumentException">
                    No method is supplied.
                
                    -or- 
                
                    The method string contains invalid characters. 
                </exception>
      <exception cref="T:System.NotSupportedException">
                    The <see cref="P:System.Net.HttpWebRequest.Method" /> property is not GET or POST. 
                </exception>
    </member>
    <member name="P:System.Net.HttpWebRequest.RequestUri">
      <summary>
                    Gets the original Uniform Resource Identifier (URI) of the request.
                </summary>
      <returns>
                    A <see cref="T:System.Uri" /> that contains the URI of the Internet resource passed to the <see cref="M:System.Net.WebRequest.Create(System.Uri)" /> method.
                </returns>
    </member>
    <member name="T:System.Net.HttpWebResponse">
      <summary>
                    Provides an HTTP-specific implementation of the <see cref="T:System.Net.WebResponse" /> class.
                </summary>
    </member>
    <member name="M:System.Net.HttpWebResponse.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.WebResponse" /> class.
                </summary>
    </member>
    <member name="P:System.Net.HttpWebResponse.Method">
      <summary>
                    Gets the method that is used to return the response.
                </summary>
      <returns>
                    A string that contains the HTTP method that is used to return the response.
                </returns>
      <exception cref="T:System.ObjectDisposedException">
                    The current instance has been disposed. 
                </exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.StatusCode">
      <summary>
                    Gets the status of the response.
                </summary>
      <returns>
                    One of the <see cref="T:System.Net.HttpStatusCode" /> values.
                </returns>
      <exception cref="T:System.ObjectDisposedException">
                    The current instance has been disposed. 
                </exception>
    </member>
    <member name="P:System.Net.HttpWebResponse.StatusDescription">
      <summary>
                    Gets the status description returned with the response.
                </summary>
      <returns>
                    A string that describes the status of the response.
                </returns>
      <exception cref="T:System.ObjectDisposedException">
                    The current instance has been disposed. 
                </exception>
    </member>
    <member name="T:System.Net.IPAddress">
      <summary>
                    Provides an Internet Protocol (IP) address.
                </summary>
    </member>
    <member name="M:System.Net.IPAddress.#ctor(System.Byte[])">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.IPAddress" /> class with the address specified as a <see cref="T:System.Byte" /> array.
                </summary>
      <param name="address">
                    The byte array that contains the IP address.
                </param>
      <exception cref="T:System.ArgumentException">
                    The length of <paramref name="address" /> parameter is not 4 bytes required for an IPv4 address or 16 bytes required for an IPv6 address.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="address" /> parameter is null. 
                </exception>
    </member>
    <member name="M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.IPAddress" /> class with an IPv6 address specified as a <see cref="T:System.Byte" /> array and the specified scope identifier.
                </summary>
      <param name="address">
                    The byte array value of the IPv6 address.
                </param>
      <param name="scopeid">
                    The long value of the scope identifier.
                </param>
      <exception cref="T:System.ArgumentException">
                    The length of <paramref name="address" /> parameter is not 16 bytes required for an IPv6 address.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="address" /> parameter is null. 
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The <paramref name="scopeid" /> parameter is less than 0 or 
                
                    the <paramref name="scopeid" /> is greater than 0x00000000FFFFFFFF.
                </exception>
    </member>
    <member name="M:System.Net.IPAddress.#ctor(System.Int64)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.IPAddress" /> class with the address specified as an <see cref="T:System.Int64" />.
                </summary>
      <param name="newAddress">
                    The long value of the IP address. For example, the value 0x2414188f in big-endian format would be the IP address "143.24.20.36".
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The <paramref name="newAddress" /> parameter is out of range for an IPv4 address. 
                </exception>
    </member>
    <member name="P:System.Net.IPAddress.Address">
      <summary>
                    Gets or sets an Internet Protocol (IP) address for IPv4.
                </summary>
      <returns>
                    An IPv4 address represented as an integer.
                </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
                    The <see cref="P:System.Net.IPAddress.AddressFamily" /> property is <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.
                </exception>
    </member>
    <member name="P:System.Net.IPAddress.AddressFamily">
      <summary>
                    Gets the address family of the IP address.
                </summary>
      <returns>
                    Returns <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> for IPv4 or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> for IPv6.
                </returns>
    </member>
    <member name="F:System.Net.IPAddress.Any">
      <summary>
                    Provides an IPv4 address that indicates that a server must listen for client activity on all network interfaces for IPv4. This field is read-only.
                </summary>
    </member>
    <member name="F:System.Net.IPAddress.Broadcast">
      <summary>
                    Provides the IPv4 broadcast address. This field is read-only.
                </summary>
    </member>
    <member name="M:System.Net.IPAddress.Equals(System.Object)">
      <summary>
                    Compares two IP addresses.
                </summary>
      <returns>true if the two addresses are equal; otherwise, false.
                </returns>
      <param name="comparand">
                    An <see cref="T:System.Net.IPAddress" /> instance to compare to the current instance.
                </param>
    </member>
    <member name="M:System.Net.IPAddress.GetAddressBytes">
      <summary>
                    Provides a copy of  the <see cref="T:System.Net.IPAddress" /> as an array of bytes.
                </summary>
      <returns>
                    An array of bytes that represents the <see cref="T:System.Net.IPAddress" /> instance.
                </returns>
    </member>
    <member name="M:System.Net.IPAddress.GetHashCode">
      <summary>
                    Returns a hash value for an IP address.
                </summary>
      <returns>
                    An integer hash value for the IP address.
                </returns>
    </member>
    <member name="M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)">
      <summary>
                    Converts a short value from host byte order to network byte order.
                </summary>
      <returns>
                    A short value, expressed in network byte order.
                </returns>
      <param name="host">
                    The number to convert, expressed in host byte order.
                </param>
    </member>
    <member name="M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)">
      <summary>
                    Converts an integer value from host byte order to network byte order.
                </summary>
      <returns>
                    An integer value, expressed in network byte order.
                </returns>
      <param name="host">
                    The number to convert, expressed in host byte order.
                </param>
    </member>
    <member name="M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)">
      <summary>
                    Converts a long value from host byte order to network byte order.
                </summary>
      <returns>
                    A long value, expressed in network byte order.
                </returns>
      <param name="host">
                    The number to convert, expressed in host byte order.
                </param>
    </member>
    <member name="F:System.Net.IPAddress.IPv6Any">
      <summary>
                    Provides an IPv6 address that indicates that a server must listen for client activity on all network interfaces for IPv6. This field is read-only.
                </summary>
    </member>
    <member name="F:System.Net.IPAddress.IPv6Loopback">
      <summary>
                    Provides the IP loopback address. This property is read-only.
                </summary>
    </member>
    <member name="F:System.Net.IPAddress.IPv6None">
      <summary>
                    Provides an IPv6 address that indicates that no network interface should be used. This property is read-only.
                </summary>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv6LinkLocal">
      <summary>
                    Gets whether the address is an IPv6 link local address.
                </summary>
      <returns>true if the IP address is an IPv6 link local address; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv6Multicast">
      <summary>
                    Gets whether the address is an IPv6 multicast global address.
                </summary>
      <returns>true if the IP address is an IPv6 multicast global address; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Net.IPAddress.IsIPv6SiteLocal">
      <summary>
                    Gets whether the address is an IPv6 site local address.
                </summary>
      <returns>true if the IP address is an IPv6 site local address; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)">
      <summary>
                    Indicates whether the specified IP address is the loopback address.
                </summary>
      <returns>true if <paramref name="address" /> is the loopback address; otherwise, false.
                </returns>
      <param name="address">
                    An IP address.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="address" /> parameter is null. 
                </exception>
    </member>
    <member name="F:System.Net.IPAddress.Loopback">
      <summary>
                    Provides the IPv4 loopback address. This field is read-only.
                </summary>
    </member>
    <member name="M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)">
      <summary>
                    Converts a short value from network byte order to host byte order.
                </summary>
      <returns>
                    A short value, expressed in host byte order.
                </returns>
      <param name="network">
                    The number to convert, expressed in network byte order.
                </param>
    </member>
    <member name="M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)">
      <summary>
                    Converts an integer value from network byte order to host byte order.
                </summary>
      <returns>
                    An integer value, expressed in host byte order.
                </returns>
      <param name="network">
                    The number to convert, expressed in network byte order.
                </param>
    </member>
    <member name="M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)">
      <summary>
                    Converts a long value from network byte order to host byte order.
                </summary>
      <returns>
                    A long value, expressed in host byte order.
                </returns>
      <param name="network">
                    The number to convert, expressed in network byte order.
                </param>
    </member>
    <member name="F:System.Net.IPAddress.None">
      <summary>
                    Provides an IP address that indicates that no network interface should be used. This field is read-only.
                </summary>
    </member>
    <member name="M:System.Net.IPAddress.Parse(System.String)">
      <summary>
                    Converts an IP address string to an <see cref="T:System.Net.IPAddress" /> instance.
                </summary>
      <returns>
                    An <see cref="T:System.Net.IPAddress" /> instance.
                </returns>
      <param name="ipString">
                    A string that contains an IP address in dotted-quad notation for IPv4 or an IP address in colon-hexadecimal notation for IPv6.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ipString" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="ipString" /> is not a valid IP address. 
                </exception>
    </member>
    <member name="P:System.Net.IPAddress.ScopeId">
      <summary>
                    Gets or sets the IPv6 address scope identifier.
                </summary>
      <returns>
                    A long integer that specifies the scope of the address.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The value when setting the ScopeId is less than 0 or 
                
                    the value is greater than 0x00000000FFFFFFFF.
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    The <see cref="P:System.Net.IPAddress.AddressFamily" /> property is specified as <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" />. 
                </exception>
    </member>
    <member name="M:System.Net.IPAddress.ToString">
      <summary>
                    Converts an Internet address to its standard notation.
                </summary>
      <returns>
                    A string that contains the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation.
                </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
                    An error prevented the IPv6 address from being converted to a string. 
                </exception>
    </member>
    <member name="M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)">
      <summary>
                    Determines whether a string is a valid IP address.
                </summary>
      <returns>true if <paramref name="ipString" /> is a valid IP address; otherwise, false.
                </returns>
      <param name="ipString">
                    The string to validate.
                </param>
      <param name="address">
                    The <see cref="T:System.Net.IPAddress" /> version of the string.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="ipString" /> could not be parsed as an IP address.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ipString" /> is null. 
                </exception>
      <exception cref="T:System.FormatException">
        <paramref name="ipString" /> is not a valid IP address. 
                </exception>
    </member>
    <member name="T:System.Net.IPEndPoint">
      <summary>
                    Represents a network endpoint as an IP address and a port number.
                </summary>
    </member>
    <member name="M:System.Net.IPEndPoint.#ctor(System.Int64,System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.IPEndPoint" /> class with the specified IP address and port number.
                </summary>
      <param name="address">
                    The long value of the IP address for the internet host. For example, the value 0x2414188f in big-endian format would be the IP address "143.24.20.36".
                </param>
      <param name="port">
                    The port number associated with the <paramref name="address" />, or 0 to specify any available port. <paramref name="port" /> is in host order.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> is less than <see cref="F:System.Net.IPEndPoint.MinPort" />.
                
                    -or- 
                <paramref name="port" /> is greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />.
                
                    -or- 
                <paramref name="address" /> is out of range for an IPv4 address.
                </exception>
    </member>
    <member name="M:System.Net.IPEndPoint.#ctor(System.Net.IPAddress,System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.IPEndPoint" /> class with the specified address and port number.
                </summary>
      <param name="address">
                    The IP address of the Internet host represented as an <see cref="T:System.Net.IPAddress" />.
                </param>
      <param name="port">
                    The port number associated with the <paramref name="address" />, or 0 to specify any available port. <paramref name="port" /> is in host order.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="address" /> parameter is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="port" /> is less than <see cref="F:System.Net.IPEndPoint.MinPort" />.
                
                    -or- 
                <paramref name="port" /> is greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />. 
                </exception>
    </member>
    <member name="P:System.Net.IPEndPoint.Address">
      <summary>
                    Gets or sets the IP address of the endpoint.
                </summary>
      <returns>
                    IP address of the endpoint.
                </returns>
    </member>
    <member name="P:System.Net.IPEndPoint.AddressFamily">
      <summary>
                    Gets the Internet Protocol (IP) address family.
                </summary>
      <returns>
                    One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values.
                </returns>
    </member>
    <member name="M:System.Net.IPEndPoint.Create(System.Net.SocketAddress)">
      <summary>
                    Creates an endpoint from a socket address.
                </summary>
      <returns>
                    An <see cref="T:System.Net.EndPoint" /> instance using the specified socket address.
                </returns>
      <param name="socketAddress">
                    The <see cref="T:System.Net.SocketAddress" /> to use for the endpoint.
                </param>
      <exception cref="T:System.ArgumentException">
                    The AddressFamily of <paramref name="socketAddress" /> is not equal to the AddressFamily of the current instance.
                
                    -or- 
                <paramref name="socketAddress" />.Size &lt; 8. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="socketAddress" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.Net.IPEndPoint.Equals(System.Object)">
      <summary>
                    Compares two IP endpoints.
                </summary>
      <returns>true if the two IP endpoints are equal; otherwise, false.
                </returns>
      <param name="comparand">
                    An <see cref="T:System.Net.IPEndPoint" /> instance to compare to the current instance.
                </param>
    </member>
    <member name="M:System.Net.IPEndPoint.GetHashCode">
      <summary>
                    Returns a hash value for an IP endpoint.
                </summary>
      <returns>
                    An integer hash value for the IP endpoint.
                </returns>
    </member>
    <member name="F:System.Net.IPEndPoint.MaxPort">
      <summary>
                    Specifies the maximum value that can be assigned to the <see cref="P:System.Net.IPEndPoint.Port" /> property. The MaxPort value is set to 0x0000FFFF. This field is read-only.
                </summary>
    </member>
    <member name="F:System.Net.IPEndPoint.MinPort">
      <summary>
                    Specifies the minimum value that can be assigned to the <see cref="P:System.Net.IPEndPoint.Port" /> property. This field is read-only.
                </summary>
    </member>
    <member name="P:System.Net.IPEndPoint.Port">
      <summary>
                    Gets or sets the port number of the endpoint.
                </summary>
      <returns>
                    An integer value in the range <see cref="F:System.Net.IPEndPoint.MinPort" /> to <see cref="F:System.Net.IPEndPoint.MaxPort" /> indicating the port number of the endpoint.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The value that was specified for a set operation is less than <see cref="F:System.Net.IPEndPoint.MinPort" /> or greater than <see cref="F:System.Net.IPEndPoint.MaxPort" />. 
                </exception>
    </member>
    <member name="M:System.Net.IPEndPoint.Serialize">
      <summary>
                    Serializes endpoint information into a <see cref="T:System.Net.SocketAddress" /> instance.
                </summary>
      <returns>
                    A <see cref="T:System.Net.SocketAddress" /> instance containing the socket address for the endpoint.
                </returns>
    </member>
    <member name="M:System.Net.IPEndPoint.ToString">
      <summary>
                    Returns the IP address and port number of the specified endpoint.
                </summary>
      <returns>
                    A string containing the IP address and the port number of the specified endpoint.
                </returns>
    </member>
    <member name="T:System.Net.IWebRequestCreate">
      <summary>
                    Provides the base interface for creating <see cref="T:System.Net.WebRequest" /> instances.
                </summary>
    </member>
    <member name="M:System.Net.IWebRequestCreate.Create(System.Uri)">
      <summary>
                    Creates a <see cref="T:System.Net.WebRequest" /> instance.
                </summary>
      <returns>
                    A <see cref="T:System.Net.WebRequest" /> instance.
                </returns>
      <param name="uri">
                    The uniform resource identifier (URI) of the Web resource.
                </param>
      <exception cref="T:System.NotSupportedException">
                    The request scheme specified in <paramref name="uri" /> is not HTTP or HTTPS. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="uri" /> is null. 
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    The caller does not have permission to connect to the requested URI or a URI that the request is redirected to. 
                </exception>
      <exception cref="T:System.UriFormatException">
                    The URI specified in <paramref name="uri" /> is not a valid URI. 
                </exception>
    </member>
    <member name="T:System.Net.OpenReadCompletedEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Net.WebClient.OpenReadCompleted" /> event. 
                </summary>
    </member>
    <member name="P:System.Net.OpenReadCompletedEventArgs.Result">
      <summary>
                    Gets a readable stream that contains the results of the <see cref="M:System.Net.WebClient.OpenReadAsync(System.Uri,System.Object)" /> method.
                </summary>
      <returns>
                    A <see cref="T:System.IO.Stream" /> that contains the results of the <see cref="M:System.Net.WebClient.OpenReadAsync(System.Uri,System.Object)" /> method.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The asynchronous request was cancelled. 
                </exception>
    </member>
    <member name="T:System.Net.OpenReadCompletedEventHandler">
      <summary>
                    Represents the method that will handle the <see cref="M:System.Net.WebClient.OpenReadAsync(System.Uri)" /> event of a <see cref="T:System.Net.WebClient" />. 
                </summary>
      <param name="sender">
                    The source of the event. 
                </param>
      <param name="e">
                    A <see cref="T:System.Net.OpenReadCompletedEventArgs" />  that contains the event data. 
                </param>
    </member>
    <member name="T:System.Net.OpenWriteCompletedEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Net.WebClient.OpenWriteCompleted" /> event.
                </summary>
    </member>
    <member name="P:System.Net.OpenWriteCompletedEventArgs.Result">
      <summary>
                    Gets a writable stream that is used to send data to a server.
                </summary>
      <returns>
                    A <see cref="T:System.IO.Stream" /> where you can write data to be uploaded.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The asynchronous request was cancelled. 
                </exception>
    </member>
    <member name="T:System.Net.OpenWriteCompletedEventHandler">
      <summary>
                    Represents the method that will handle the <see cref="E:System.Net.WebClient.OpenWriteCompleted" /> event of a <see cref="T:System.Net.WebClient" />.
                </summary>
      <param name="sender">
                    The source of the event.
                </param>
      <param name="e">
                    A <see cref="T:System.Net.OpenWriteCompletedEventArgs" /> containing event data.
                </param>
    </member>
    <member name="T:System.Net.ProtocolViolationException">
      <summary>
                    The exception that is thrown when an error is made while using a network protocol.
                </summary>
    </member>
    <member name="M:System.Net.ProtocolViolationException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.ProtocolViolationException" /> class.
                </summary>
    </member>
    <member name="M:System.Net.ProtocolViolationException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.ProtocolViolationException" /> class with the specified message.
                </summary>
      <param name="message">
                    The error message string.
                </param>
    </member>
    <member name="T:System.Net.SocketAddress">
      <summary>
                    Stores serialized information from <see cref="T:System.Net.EndPoint" /> derived classes.
                </summary>
    </member>
    <member name="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily)">
      <summary>
                    Creates a new instance of the <see cref="T:System.Net.SocketAddress" /> class for the given address family.
                </summary>
      <param name="family">
                    An <see cref="T:System.Net.Sockets.AddressFamily" /> enumerated value.
                </param>
    </member>
    <member name="M:System.Net.SocketAddress.#ctor(System.Net.Sockets.AddressFamily,System.Int32)">
      <summary>
                    Creates a new instance of the <see cref="T:System.Net.SocketAddress" /> class using the specified address family and buffer size.
                </summary>
      <param name="family">
                    An <see cref="T:System.Net.Sockets.AddressFamily" /> enumerated value.
                </param>
      <param name="size">
                    The value to set for the <see cref="P:System.Net.SocketAddress.Size" /> property which affects the number of bytes to allocate for the underlying buffer.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="size" /> is less than 2. These 2 bytes are needed to store <paramref name="family" />. 
                </exception>
    </member>
    <member name="M:System.Net.SocketAddress.Equals(System.Object)">
      <summary>
                    Determines whether two <see cref="T:System.Net.SocketAddress" /> instances are equal.
                </summary>
      <returns>true if the two <see cref="T:System.Net.SocketAddress" /> instances are equal; otherwise, false.
                </returns>
      <param name="comparand">
                    A <see cref="T:System.Net.SocketAddress" /> instance to compare to the current instance.
                </param>
    </member>
    <member name="P:System.Net.SocketAddress.Family">
      <summary>
                    Gets the <see cref="T:System.Net.Sockets.AddressFamily" /> enumerated value of the current <see cref="T:System.Net.SocketAddress" />.
                </summary>
      <returns>
                    One of the <see cref="T:System.Net.Sockets.AddressFamily" /> enumerated values.
                </returns>
    </member>
    <member name="M:System.Net.SocketAddress.GetHashCode">
      <summary>
                    Returns a hash value for the <see cref="T:System.Net.SocketAddress" />. 
                </summary>
      <returns>
                    An integer hash value for the socket address.
                </returns>
    </member>
    <member name="P:System.Net.SocketAddress.Item(System.Int32)">
      <summary>
                    Gets or sets the specified index element in the underlying buffer.
                </summary>
      <returns>
                    The value of the specified index element in the underlying buffer.
                </returns>
      <param name="offset">
                    The array index element of the desired information.
                </param>
      <exception cref="T:System.IndexOutOfRangeException">
                    The specified index does not exist in the buffer (the <paramref name="offset" /> is. less than 0 or greater than or equal to the <see cref="P:System.Net.SocketAddress.Size" /> property).
                </exception>
    </member>
    <member name="P:System.Net.SocketAddress.Size">
      <summary>
                    Gets the available buffer size that can be used for the <see cref="T:System.Net.SocketAddress" />.
                </summary>
      <returns>
                    The buffer size, in bytes, available for the <see cref="T:System.Net.SocketAddress" />.
                </returns>
    </member>
    <member name="M:System.Net.SocketAddress.ToString">
      <summary>
                    Returns a string that represents information about the socket address.
                </summary>
      <returns>
                    A string that contains information about the <see cref="T:System.Net.SocketAddress" />.
                </returns>
    </member>
    <member name="T:System.Net.UploadProgressChangedEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Net.WebClient.UploadProgressChanged" /> event of a <see cref="T:System.Net.WebClient" />.
                </summary>
    </member>
    <member name="P:System.Net.UploadProgressChangedEventArgs.BytesReceived">
      <summary>
                    Gets the number of bytes received
                </summary>
      <returns>
                    An <see cref="T:System.Int64" /> value that indicates the number of bytes received.
                </returns>
    </member>
    <member name="P:System.Net.UploadProgressChangedEventArgs.BytesSent">
      <summary>
                    Gets the number of bytes sent.
                </summary>
      <returns>
                    An <see cref="T:System.Int64" /> value that indicates the number of bytes sent.
                </returns>
    </member>
    <member name="P:System.Net.UploadProgressChangedEventArgs.TotalBytesToReceive">
      <summary>
                    Gets the total number of bytes in a <see cref="T:System.Net.WebClient" /> data upload operation.
                </summary>
      <returns>
                    An <see cref="T:System.Int64" /> value that indicates the number of bytes that will be received.
                </returns>
    </member>
    <member name="P:System.Net.UploadProgressChangedEventArgs.TotalBytesToSend">
      <summary>
                    Gets the total number of bytes to send.
                </summary>
      <returns>
                    An <see cref="T:System.Int64" /> value that indicates the number of bytes that will be sent.
                </returns>
    </member>
    <member name="T:System.Net.UploadProgressChangedEventHandler">
      <summary>
                    Represents the method that will handle the <see cref="E:System.Net.WebClient.UploadProgressChanged" /> event of a <see cref="T:System.Net.WebClient" />.
                </summary>
      <param name="sender">
                    The source of the event.
                </param>
      <param name="e">
                    A <see cref="T:System.Net.UploadProgressChangedEventArgs" /> containing event data.
                </param>
    </member>
    <member name="T:System.Net.UploadStringCompletedEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Net.WebClient.UploadStringCompleted" /> event.
                </summary>
    </member>
    <member name="P:System.Net.UploadStringCompletedEventArgs.Result">
      <summary>
                    Gets the server reply to a string upload operation that is started by calling an <see cref="Overload:System.Net.WebClient.UploadStringAsync" /> method.
                </summary>
      <returns>
                    A <see cref="T:System.Byte" /> array that contains the server reply.
                </returns>
      <exception cref="T:System.InvalidOperationException">
                    The asynchronous request was cancelled. 
                </exception>
    </member>
    <member name="T:System.Net.UploadStringCompletedEventHandler">
      <summary>
                    Represents the method that will handle the <see cref="E:System.Net.WebClient.UploadStringCompleted" /> event of a <see cref="T:System.Net.WebClient" />.
                </summary>
      <param name="sender">
                    The source of the event.
                </param>
      <param name="e">
                    A <see cref="T:System.Net.UploadStringCompletedEventArgs" /> containing event data.
                </param>
    </member>
    <member name="T:System.Net.WebClient">
      <summary>
                    Provides common methods for sending data to and receiving data from a resource identified by a URI.
                </summary>
    </member>
    <member name="M:System.Net.WebClient.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.WebClient" /> class. 
                </summary>
    </member>
    <member name="P:System.Net.WebClient.AllowReadStreamBuffering">
      <summary>
                    Gets or sets a value that indicates whether to buffer the data read from the Internet resource for a <see cref="T:System.Net.WebClient" /> instance.
                </summary>
      <returns>true to enable buffering of the data received from the Internet resource; false to disable buffering. The default is true.
                </returns>
    </member>
    <member name="P:System.Net.WebClient.BaseAddress">
      <summary>
                    Gets or sets the base URI for requests made by a <see cref="T:System.Net.WebClient" />.
                </summary>
      <returns>
                    The base URI for requests made by a <see cref="T:System.Net.WebClient" />. If no base address has been specified, the <see cref="P:System.Net.WebClient.BaseAddress" /> property is initialized to the application origin (the absolute URI of the Silverlight XAP).
                
                    ..
                </returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Net.WebClient.BaseAddress" /> is set to an invalid URI. The inner exception may contain information that will help you locate the error.
                </exception>
    </member>
    <member name="M:System.Net.WebClient.CancelAsync">
      <summary>
                    Cancels a pending asynchronous operation. 
                </summary>
    </member>
    <member name="E:System.Net.WebClient.DownloadProgressChanged">
      <summary>
                    Occurs when an asynchronous download operation successfully transfers some or all of the data.
                </summary>
    </member>
    <member name="M:System.Net.WebClient.DownloadStringAsync(System.Uri)">
      <summary>
                    Downloads the resource at the specified <see cref="T:System.Uri" /> as a string.
                </summary>
      <param name="address">
                    The location of the resource to be downloaded.
                </param>
    </member>
    <member name="M:System.Net.WebClient.DownloadStringAsync(System.Uri,System.Object)">
      <summary>
                    Downloads the resource at the specified <see cref="T:System.Uri" /> as a string.
                </summary>
      <param name="address">
                    The location of the resource to be downloaded.
                </param>
      <param name="userToken">
                    Provides a user-specified identifier for the asynchronous task. 
                </param>
    </member>
    <member name="E:System.Net.WebClient.DownloadStringCompleted">
      <summary>
                    Occurs when an asynchronous resource-download operation is completed. 
                </summary>
    </member>
    <member name="P:System.Net.WebClient.Encoding">
      <summary>
                    Gets and sets the <see cref="T:System.Text.Encoding" /> used to upload and download strings.
                </summary>
      <returns>
                    A <see cref="T:System.Text.Encoding" /> that is used to encode strings. The default value of this property is <see cref="P:System.Text.Encoding.UTF8" />.
                </returns>
    </member>
    <member name="M:System.Net.WebClient.GetWebRequest(System.Uri)">
      <summary>
                    Returns a <see cref="T:System.Net.WebRequest" /> object for the specified resource.
                </summary>
      <returns>
                    A new <see cref="T:System.Net.WebRequest" /> object for the specified resource.
                </returns>
      <param name="address">
                    A <see cref="T:System.Uri" /> that identifies the resource to request.
                </param>
    </member>
    <member name="M:System.Net.WebClient.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)">
      <summary>
                    Returns the <see cref="T:System.Net.WebResponse" /> for the specified <see cref="T:System.Net.WebRequest" /> using the specified <see cref="T:System.IAsyncResult" />.
                </summary>
      <returns>
                    A <see cref="T:System.Net.WebResponse" /> containing the response for the specified <see cref="T:System.Net.WebRequest" />.
                </returns>
      <param name="request">
                    A <see cref="T:System.Net.WebRequest" /> that is used to obtain the response.
                </param>
      <param name="result">
                    An <see cref="T:System.IAsyncResult" /> object obtained from a previous call to <see cref="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" /> .
                </param>
    </member>
    <member name="P:System.Net.WebClient.Headers">
      <summary>
                    Gets or sets a collection of header name/value pairs associated with the request.
                </summary>
      <returns>
                    A <see cref="T:System.Net.WebHeaderCollection" /> containing header name/value pairs associated with this request.
                </returns>
    </member>
    <member name="P:System.Net.WebClient.IsBusy">
      <summary>
                    Gets a value that indicates whether a Web request is in progress.
                </summary>
      <returns>true to indicate a Web request is in progress; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Net.WebClient.OnDownloadProgressChanged(System.Net.DownloadProgressChangedEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Net.WebClient.DownloadProgressChanged" /> event.
                </summary>
      <param name="e">
                    A <see cref="T:System.Net.DownloadProgressChangedEventArgs" /> object containing event data.
                </param>
    </member>
    <member name="M:System.Net.WebClient.OnDownloadStringCompleted(System.Net.DownloadStringCompletedEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Net.WebClient.DownloadStringCompleted" /> event.
                </summary>
      <param name="e">
                    A <see cref="T:System.Net.DownloadStringCompletedEventArgs" /> object containing event data.
                </param>
    </member>
    <member name="M:System.Net.WebClient.OnOpenReadCompleted(System.Net.OpenReadCompletedEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Net.WebClient.OpenReadCompleted" /> event.
                </summary>
      <param name="e">
                    A <see cref="T:System.Net.OpenReadCompletedEventArgs" />  object containing event data.
                </param>
    </member>
    <member name="M:System.Net.WebClient.OnOpenWriteCompleted(System.Net.OpenWriteCompletedEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Net.WebClient.OpenWriteCompleted" /> event.
                </summary>
      <param name="e">
                    A <see cref="T:System.Net.OpenWriteCompletedEventArgs" /> object containing event data.
                </param>
    </member>
    <member name="M:System.Net.WebClient.OnUploadProgressChanged(System.Net.UploadProgressChangedEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Net.WebClient.UploadProgressChanged" /> event.
                </summary>
      <param name="e">
                    An <see cref="T:System.Net.UploadProgressChangedEventArgs" /> object containing event data.
                </param>
    </member>
    <member name="M:System.Net.WebClient.OnUploadStringCompleted(System.Net.UploadStringCompletedEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Net.WebClient.UploadStringCompleted" /> event.
                </summary>
      <param name="e">
                    An <see cref="T:System.Net.UploadStringCompletedEventArgs" />  object containing event data.
                </param>
    </member>
    <member name="M:System.Net.WebClient.OnWriteStreamClosed(System.Net.WriteStreamClosedEventArgs)">
      <summary>
                    Raises the <see cref="E:System.Net.WebClient.WriteStreamClosed" /> event.
                </summary>
      <param name="e">
                    An <see cref="T:System.Net.WriteStreamClosedEventArgs" />  object containing event data.
                </param>
    </member>
    <member name="M:System.Net.WebClient.OpenReadAsync(System.Uri)">
      <summary>
                    Opens a readable stream to the specified resource.
                </summary>
      <param name="address">
                    The location of the resource to be downloaded.
                </param>
    </member>
    <member name="M:System.Net.WebClient.OpenReadAsync(System.Uri,System.Object)">
      <summary>
                    Opens a readable stream to the specified resource.
                </summary>
      <param name="address">
                    The location of the resource to be downloaded.
                </param>
      <param name="userToken">
                    Provides a user-specified identifier for the asynchronous task. 
                </param>
    </member>
    <member name="E:System.Net.WebClient.OpenReadCompleted">
      <summary>
                    Occurs when an asynchronous resource-read operation is completed.
                </summary>
    </member>
    <member name="M:System.Net.WebClient.OpenWriteAsync(System.Uri)">
      <summary>
                    Opens a stream for writing data to the specified resource. This method does not block the calling thread.
                </summary>
      <param name="address">
                    The URI of the resource to receive the data. 
                </param>
    </member>
    <member name="M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String)">
      <summary>
                    Opens a stream for writing data to the specified resource. This method does not block the calling thread.
                </summary>
      <param name="address">
                    The URI of the resource to receive the data. 
                </param>
      <param name="method">
                    The method used to send the data to the resource. If null, the default is POST for HTTP.
                </param>
    </member>
    <member name="M:System.Net.WebClient.OpenWriteAsync(System.Uri,System.String,System.Object)">
      <summary>
                    Opens a stream for writing data to the specified resource, using the specified method. This method does not block the calling thread.
                </summary>
      <param name="address">
                    The URI of the resource to receive the data.
                </param>
      <param name="method">
                    The method used to send the data to the resource. If null, the default is POST for HTTP.
                </param>
      <param name="userToken">
                    A user-defined object that is passed to the method invoked when the asynchronous operation completes
                </param>
      <exception cref="T:System.Net.WebException">
                    The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress" /> and <paramref name="address" /> is invalid.
                
                    -or- 
                
                    An error occurred while opening the stream. 
                </exception>
    </member>
    <member name="E:System.Net.WebClient.OpenWriteCompleted">
      <summary>
                    Occurs when an asynchronous operation to open a stream to write data to a resource completes.
                </summary>
    </member>
    <member name="E:System.Net.WebClient.UploadProgressChanged">
      <summary>
                    Occurs when an asynchronous upload operation successfully transfers some or all of the data.
                </summary>
    </member>
    <member name="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String)">
      <summary>
                    Uploads the specified string to the specified resource. This method does not block the calling thread.
                </summary>
      <param name="address">
                    The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page. 
                </param>
      <param name="data">
                    The string to be uploaded.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.
                </exception>
      <exception cref="T:System.Net.WebException">
                    The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress" /> and <paramref name="address" /> is invalid.
                
                    -or- 
                
                    There was no response from the server hosting the resource.
                </exception>
    </member>
    <member name="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String)">
      <summary>
                    Uploads the specified string to the specified resource. This method does not block the calling thread.
                </summary>
      <param name="address">
                    The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
                </param>
      <param name="method">
                    The HTTP method used to send the file to the resource. If null, the default is POST for HTTP.
                </param>
      <param name="data">
                    The string to be uploaded.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.
                </exception>
      <exception cref="T:System.Net.WebException">
                    The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress" /> and <paramref name="address" /> is invalid.
                
                    -or- 
                
                    There was no response from the server hosting the resource.
                </exception>
    </member>
    <member name="M:System.Net.WebClient.UploadStringAsync(System.Uri,System.String,System.String,System.Object)">
      <summary>
                    Uploads the specified string to the specified resource. This method does not block the calling thread.
                </summary>
      <param name="address">
                    The URI of the resource to receive the file. For HTTP resources, this URI must identify a resource that can accept a request sent with the POST method, such as a script or ASP page.
                </param>
      <param name="method">
                    The HTTP method used to send the file to the resource. If null, the default is POST for HTTP.
                </param>
      <param name="data">
                    The string to be uploaded.
                </param>
      <param name="userToken">
                    A user-defined object that is passed to the method invoked when the asynchronous operation completes.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> is null.
                </exception>
      <exception cref="T:System.Net.WebException">
                    The URI formed by combining <see cref="P:System.Net.WebClient.BaseAddress" /> and <paramref name="address" /> is invalid.
                
                    -or- 
                
                    There was no response from the server hosting the resource.
                </exception>
    </member>
    <member name="E:System.Net.WebClient.UploadStringCompleted">
      <summary>
                    Occurs when an asynchronous string-upload operation completes.
                </summary>
    </member>
    <member name="E:System.Net.WebClient.WriteStreamClosed">
      <summary>
                    Occurs when an asynchronous write stream operation completes.
                </summary>
    </member>
    <member name="T:System.Net.WebException">
      <summary>
                    The exception that is thrown when an error occurs while accessing the network through a pluggable protocol.
                </summary>
    </member>
    <member name="M:System.Net.WebException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.WebException" /> class.
                </summary>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.WebException" /> class with the specified error message.
                </summary>
      <param name="message">
                    The text of the error message. 
                </param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.WebException" /> class with the specified error message and nested exception.
                </summary>
      <param name="message">
                    The text of the error message. 
                </param>
      <param name="innerException">
                    A nested exception. 
                </param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String,System.Exception,System.Net.WebExceptionStatus,System.Net.WebResponse)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.WebException" /> class with the specified error message, nested exception, status, and response.
                </summary>
      <param name="message">
                    The text of the error message.
                </param>
      <param name="innerException">
                    A nested exception.
                </param>
      <param name="status">
                    One of the <see cref="T:System.Net.WebExceptionStatus" /> values.
                </param>
      <param name="response">
                    A <see cref="T:System.Net.WebResponse" /> instance that contains the response from the remote host.
                </param>
    </member>
    <member name="M:System.Net.WebException.#ctor(System.String,System.Net.WebExceptionStatus)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.WebException" /> class with the specified error message and status.
                </summary>
      <param name="message">
                    The text of the error message. 
                </param>
      <param name="status">
                    One of the <see cref="T:System.Net.WebExceptionStatus" /> values. 
                </param>
    </member>
    <member name="P:System.Net.WebException.Response">
      <summary>
                    Gets the response that the remote host returned.
                </summary>
      <returns>
                    If a response is available from the Internet resource, a <see cref="T:System.Net.WebResponse" /> instance that contains the error response from an Internet resource; otherwise, null.
                </returns>
    </member>
    <member name="P:System.Net.WebException.Status">
      <summary>
                    Gets the status of the response.
                </summary>
      <returns>
                    One of the <see cref="T:System.Net.WebExceptionStatus" /> values.
                </returns>
    </member>
    <member name="T:System.Net.WebExceptionStatus">
      <summary>
                    Defines status codes for the <see cref="T:System.Net.WebException" /> class.
                </summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.Success">
      <summary>
                    No error was encountered.
                </summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.ConnectFailure">
      <summary>
                    The remote service point could not be contacted at the transport level.
                </summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.SendFailure">
      <summary>
                    A complete request could not be sent to the remote server.
                </summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.RequestCanceled">
      <summary>
                    The request was canceled, the <see cref="M:System.Net.WebRequest.Abort" /> method was called, or an unclassifiable error occurred. This is the default value for <see cref="P:System.Net.WebException.Status" />.
                </summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.Pending">
      <summary>
                    An internal asynchronous request is pending.
                </summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.UnknownError">
      <summary>
                    An exception of unknown type has occurred.
                </summary>
    </member>
    <member name="F:System.Net.WebExceptionStatus.MessageLengthLimitExceeded">
      <summary>
                    A message was received that exceeded the specified limit when sending a request or receiving a response from the server.
                </summary>
    </member>
    <member name="T:System.Net.WebHeaderCollection">
      <summary>
                    Contains protocol headers associated with a request or response.
                </summary>
    </member>
    <member name="M:System.Net.WebHeaderCollection.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.WebHeaderCollection" /> class.
                </summary>
    </member>
    <member name="P:System.Net.WebHeaderCollection.AllKeys">
      <summary>
                    Gets the collection of header name/value pairs associated with the request.
                </summary>
      <returns>
                    A <see cref="T:System.Net.WebHeaderCollection" /> containing the header name/value pairs associated with this request.
                </returns>
    </member>
    <member name="P:System.Net.WebHeaderCollection.Count">
      <summary>
                    Gets the number of headers in the collection.
                </summary>
      <returns>
                    An <see cref="T:System.Int32" /> indicating the number of headers in the <see cref="T:System.Net.WebHeaderCollection" /> associated with a request.
                </returns>
    </member>
    <member name="P:System.Net.WebHeaderCollection.Item(System.Net.HttpRequestHeader)">
      <summary>
                    Gets or sets the specified request header.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> instance containing the specified header value.
                </returns>
      <param name="header">
                    The request header value.
                </param>
      <exception cref="T:System.InvalidOperationException">
                    On a get or set operation, the request header specified in the <paramref name="header" /> parameter is a restricted header. The <see cref="T:System.Net.WebHeaderCollection" /> class does not allow a user to get or set instances of this restricted header in this <see cref="T:System.Net.WebHeaderCollection" /> instance. 
                </exception>
    </member>
    <member name="P:System.Net.WebHeaderCollection.Item(System.String)">
      <summary>
                    Gets or sets the specified request header.
                </summary>
      <returns>
                    A <see cref="T:System.String" /> instance containing the specified header value.
                </returns>
      <param name="name">
                    The name of the requested header.
                </param>
      <exception cref="T:System.ArgumentException">
                    The <paramref name="name" /> parameter contains illegal characters- or -
                
                    an attempt was made to set a restricted header on the <see cref="T:System.Net.WebHeaderCollection" /> object associated with a <see cref="T:System.Net.HttpWebRequest" /> object
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <paramref name="name" /> parameter was null.
                </exception>
    </member>
    <member name="M:System.Net.WebHeaderCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    Returns an enumerator that can iterate through the <see cref="T:System.Net.WebHeaderCollection" /> instance. 
                </summary>
      <returns>
                    An <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Net.WebHeaderCollection" />.
                </returns>
    </member>
    <member name="T:System.Net.WebRequest">
      <summary>
                    Makes a request to a Uniform Resource Identifier (URI). This is an abstract class.
                </summary>
    </member>
    <member name="M:System.Net.WebRequest.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.WebRequest" /> class.
                </summary>
    </member>
    <member name="M:System.Net.WebRequest.Abort">
      <summary>
                    Aborts the Request.
                </summary>
      <exception cref="T:System.NotImplementedException">
                    Any attempt is made to access the method, when the method is not overridden in a descendant class. 
                </exception>
    </member>
    <member name="M:System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
      <summary>
                    When overridden in a descendant class, provides an asynchronous method to request a stream.
                </summary>
      <returns>
                    An <see cref="T:System.IAsyncResult" /> that references the asynchronous request.
                </returns>
      <param name="callback">
                    The <see cref="T:System.AsyncCallback" /> delegate.
                </param>
      <param name="state">
                    An object containing state information for this asynchronous request.
                </param>
      <exception cref="T:System.NotImplementedException">
                    Any attempt is made to access the method, when the method is not overridden in a descendant class. 
                </exception>
    </member>
    <member name="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
      <summary>
                    When overridden in a descendant class, begins an asynchronous request for an Internet resource.
                </summary>
      <returns>
                    An <see cref="T:System.IAsyncResult" /> that references the asynchronous request.
                </returns>
      <param name="callback">
                    The <see cref="T:System.AsyncCallback" /> delegate.
                </param>
      <param name="state">
                    An object containing state information for this asynchronous request.
                </param>
      <exception cref="T:System.NotImplementedException">
                    Any attempt is made to access the method, when the method is not overridden in a descendant class. 
                </exception>
    </member>
    <member name="P:System.Net.WebRequest.ContentType">
      <summary>
                    When overridden in a descendant class, gets or sets the content type of the request data being sent.
                </summary>
      <returns>
                    The content type of the request data.
                </returns>
      <exception cref="T:System.NotImplementedException">
                    Any attempt is made to get or set the property, when the property is not overridden in a descendant class. 
                </exception>
    </member>
    <member name="M:System.Net.WebRequest.Create(System.Uri)">
      <summary>
                    Initializes a new <see cref="T:System.Net.WebRequest" /> instance for the specified URI scheme.
                </summary>
      <returns>
                    A <see cref="T:System.Net.WebRequest" /> descendant for the specific URI scheme.
                </returns>
      <param name="requestUri">
                    A <see cref="T:System.Uri" /> containing the URI of the requested resource.
                </param>
      <exception cref="T:System.NotSupportedException">
                    The request scheme specified in <paramref name="requestUri" /> has not been registered. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestUri" /> is null. 
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    The caller does not have permission to connect to the requested URI or a URI that the request is redirected to. 
                </exception>
    </member>
    <member name="M:System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)">
      <summary>
                    When overridden in a descendant class, returns a <see cref="T:System.IO.Stream" /> for writing data to the Internet resource.
                </summary>
      <returns>
                    A <see cref="T:System.IO.Stream" /> to write data to.
                </returns>
      <param name="asyncResult">
                    An <see cref="T:System.IAsyncResult" /> that references a pending request for a stream.
                </param>
      <exception cref="T:System.NotImplementedException">
                    Any attempt is made to access the method, when the method is not overridden in a descendant class. 
                </exception>
    </member>
    <member name="M:System.Net.WebRequest.EndGetResponse(System.IAsyncResult)">
      <summary>
                    When overridden in a descendant class, returns a <see cref="T:System.Net.WebResponse" />.
                </summary>
      <returns>
                    A <see cref="T:System.Net.WebResponse" /> that contains a response to the Internet request.
                </returns>
      <param name="asyncResult">
                    An <see cref="T:System.IAsyncResult" /> that references a pending request for a response.
                </param>
      <exception cref="T:System.NotImplementedException">
                    Any attempt is made to access the method, when the method is not overridden in a descendant class. 
                </exception>
    </member>
    <member name="P:System.Net.WebRequest.Headers">
      <summary>
                    When overridden in a descendant class, gets or sets the collection of header name/value pairs associated with the request.
                </summary>
      <returns>
                    A <see cref="T:System.Net.WebHeaderCollection" /> containing the header name/value pairs associated with this request.
                </returns>
      <exception cref="T:System.NotImplementedException">
                    Any attempt is made to get or set the property, when the property is not overridden in a descendant class. 
                </exception>
    </member>
    <member name="P:System.Net.WebRequest.Method">
      <summary>
                    When overridden in a descendant class, gets or sets the protocol method to use in this request.
                </summary>
      <returns>
                    The protocol method to use in this request.
                </returns>
      <exception cref="T:System.NotImplementedException">
                    If the property is not overridden in a descendant class, any attempt is made to get or set the property. 
                </exception>
    </member>
    <member name="M:System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)">
      <summary>
                    Registers a <see cref="T:System.Net.WebRequest" /> descendant for the specified URI.
                </summary>
      <returns>true if registration is successful; otherwise, false.
                </returns>
      <param name="prefix">
                    The complete URI or URI prefix that the <see cref="T:System.Net.WebRequest" /> descendant services.
                </param>
      <param name="creator">
                    The create method that the <see cref="T:System.Net.WebRequest" /> calls to create the <see cref="T:System.Net.WebRequest" /> descendant.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> is null
                    -or- 
                <paramref name="creator" /> is null. 
                </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="prefix" /> is unknown or not supported.
                </exception>
    </member>
    <member name="P:System.Net.WebRequest.RequestUri">
      <summary>
                    When overridden in a descendant class, gets the URI of the Internet resource associated with the request.
                </summary>
      <returns>
                    A <see cref="T:System.Uri" /> representing the resource associated with the request.
                </returns>
      <exception cref="T:System.NotImplementedException">
                    Any attempt is made to get or set the property, when the property is not overridden in a descendant class. 
                </exception>
    </member>
    <member name="T:System.Net.WebResponse">
      <summary>
                    Provides a response from a Uniform Resource Identifier (URI). This is an abstract class.
                </summary>
    </member>
    <member name="M:System.Net.WebResponse.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.WebResponse" /> class.
                </summary>
    </member>
    <member name="M:System.Net.WebResponse.Close">
      <summary>
                    When overridden by a descendant class, closes the response stream.
                </summary>
      <exception cref="T:System.NotSupportedException">
                    Any attempt is made to access the method, when the method is not overridden in a descendant class. 
                </exception>
    </member>
    <member name="P:System.Net.WebResponse.ContentLength">
      <summary>
                    When overridden in a descendant class, gets or sets the content length of data being received.
                </summary>
      <returns>
                    The number of bytes returned from the Internet resource.
                </returns>
      <exception cref="T:System.NotSupportedException">
                    Any attempt is made to get or set the property, when the property is not overridden in a descendant class. 
                </exception>
    </member>
    <member name="P:System.Net.WebResponse.ContentType">
      <summary>
                    When overridden in a derived class, gets or sets the content type of the data being received.
                </summary>
      <returns>
                    A string that contains the content type of the response.
                </returns>
      <exception cref="T:System.NotSupportedException">
                    Any attempt is made to get or set the property, when the property is not overridden in a descendant class. 
                </exception>
    </member>
    <member name="M:System.Net.WebResponse.GetResponseStream">
      <summary>
                    When overridden in a descendant class, returns the data stream from the Internet resource.
                </summary>
      <returns>
                    An instance of the <see cref="T:System.IO.Stream" /> class for reading data from the Internet resource.
                </returns>
      <exception cref="T:System.NotSupportedException">
                    Any attempt is made to access the method, when the method is not overridden in a descendant class. 
                </exception>
    </member>
    <member name="P:System.Net.WebResponse.ResponseUri">
      <summary>
                    When overridden in a derived class, gets the URI of the Internet resource that actually responded to the request.
                </summary>
      <returns>
                    An instance of the <see cref="T:System.Uri" /> class that contains the URI of the Internet resource that actually responded to the request.
                </returns>
      <exception cref="T:System.NotSupportedException">
                    Any attempt is made to get or set the property, when the property is not overridden in a descendant class. 
                </exception>
    </member>
    <member name="M:System.Net.WebResponse.System#IDisposable#Dispose">
      <summary>
                    When overridden in a derived class, releases all resources used by the <see cref="T:System.Net.WebResponse" />.
                </summary>
      <exception cref="T:System.NotSupportedException">
                    Any attempt is made to access the method, when the method is not overridden in a descendant class. 
                </exception>
    </member>
    <member name="T:System.Net.WriteStreamClosedEventArgs">
      <summary>
                    Provides data for the <see cref="E:System.Net.WebClient.WriteStreamClosed" /> event.
                </summary>
    </member>
    <member name="P:System.Net.WriteStreamClosedEventArgs.Error">
      <summary>
                    Gets the error associated with a <see cref="E:System.Net.WebClient.WriteStreamClosed" /> event.
                </summary>
      <returns>
                    The exception associated with a <see cref="E:System.Net.WebClient.WriteStreamClosed" /> event when an error occurs.
                </returns>
    </member>
    <member name="T:System.Net.WriteStreamClosedEventHandler">
      <summary>
                    Represents the method that will handle the <see cref="E:System.Net.WebClient.WriteStreamClosed" /> event of a <see cref="T:System.Net.WebClient" />.
                </summary>
      <param name="sender">
                    The source of the event.
                </param>
      <param name="e">
                    A <see cref="T:System.Net.WriteStreamClosedEventArgs" /> containing event data.
                </param>
    </member>
    <member name="T:System.Net.Sockets.AddressFamily">
      <summary>
                    Specifies the addressing scheme that an instance of the <see cref="T:System.Net.Sockets.Socket" /> class can use.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Unknown">
      <summary>
                    An unknown address family.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.Unspecified">
      <summary>
                    An address family has not been specified.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.InterNetwork">
      <summary>
                    An address for IP version 4. 
                </summary>
    </member>
    <member name="F:System.Net.Sockets.AddressFamily.InterNetworkV6">
      <summary>
                    An address for IP version 6.
                </summary>
    </member>
    <member name="T:System.Net.Sockets.ProtocolType">
      <summary>
                    Specifies the protocol that the <see cref="T:System.Net.Sockets.Socket" /> class supports.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Tcp">
      <summary>
                    The Transmission Control Protocol (TCP).
                </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Unspecified">
      <summary>
                    The protocol type is unspecified.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.ProtocolType.Unknown">
      <summary>
                    An unknown protocol type. 
                </summary>
    </member>
    <member name="T:System.Net.Sockets.Socket">
      <summary>
                    Implements the Berkeley sockets interface.
                </summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.Sockets.Socket" /> class using the specified address family, socket type and protocol.
                </summary>
      <param name="addressFamily">
                    One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values.
                </param>
      <param name="socketType">
                    One of the <see cref="T:System.Net.Sockets.SocketType" /> values.
                </param>
      <param name="protocolType">
                    One of the <see cref="T:System.Net.Sockets.ProtocolType" /> values.
                </param>
      <exception cref="T:System.ArgumentException">
                    A parameter was invalid. 
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    The combination of <paramref name="addressFamily" />, <paramref name="socketType" />, and <paramref name="protocolType" /> results in an invalid socket. 
                </exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.AddressFamily">
      <summary>
                    Gets the address family of the <see cref="T:System.Net.Sockets.Socket" />.
                </summary>
      <returns>
                    One of the <see cref="T:System.Net.Sockets.AddressFamily" /> values.
                </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
                    Cancels an outstanding asynchronous socket operation for a remote host connection.
                </summary>
      <param name="e">
                    The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object for the asynchronous socket operation that should be canceled.
                </param>
    </member>
    <member name="M:System.Net.Sockets.Socket.Close">
      <summary>
                    Closes the <see cref="T:System.Net.Sockets.Socket" /> connection and releases all associated resources.
                </summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.Close(System.Int32)">
      <summary>
                    Closes the <see cref="T:System.Net.Sockets.Socket" /> connection and releases all associated resources with a specified timeout to allow queued data to be sent.
                </summary>
      <param name="timeout">
                    The maximum amount of time, in seconds, to wait in order to send any remaining data, and then close the <see cref="T:System.Net.Sockets.Socket" />.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The <paramref name="timeout" /> is less than 0. 
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
                    Begins an asynchronous request for a remote host connection.
                </summary>
      <returns>
                    Returns true if the I/O operation is pending. The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter will be raised upon completion of the operation. 
                
                    Returns false if the I/O operation completed synchronously. In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter will not be raised. The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter may be examined immediately after the method call returns to retrieve the result of the operation.
                </returns>
      <param name="e">
                    The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.
                </param>
      <exception cref="T:System.ArgumentException">
                    An argument is not valid. This exception occurs if multiple buffers are specified, the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> property is not null. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Net.Sockets.Socket" /> is listening or a socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter.
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    An error occurred when attempting to access the socket. See the Remarks section for more information.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    Windows XP or later is required for this method. This exception also occurs if address family of the <see cref="T:System.Net.Sockets.Socket" /> and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> are not the same address family.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The <see cref="T:System.Net.Sockets.Socket" /> has been closed. 
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    A caller higher in the call stack does not have permission for the requested operation.
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
                    Begins an asynchronous request for a remote host connection.
                </summary>
      <returns>
                    Returns true if the I/O operation is pending. The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter will be raised upon completion of the operation. 
                
                    Returns false if the I/O operation completed synchronously. In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter will not be raised. The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter may be examined immediately after the method call returns to retrieve the result of the operation.
                </returns>
      <param name="socketType">
                    The socket type to use establishing the connection.
                </param>
      <param name="protocolType">
                    The protocol type to use establishing the connection.
                </param>
      <param name="e">
                    The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.
                </param>
      <exception cref="T:System.ArgumentException">
                    An argument is not valid. This exception occurs if multiple buffers are specified, the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> property is not null. 
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> cannot be null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The <see cref="T:System.Net.Sockets.Socket" /> is listening or a socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter.
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    An error occurred when attempting to access the socket. See the Remarks section for more information.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    Windows XP or later is required for this method. This exception also occurs if address family of the <see cref="T:System.Net.Sockets.Socket" /> and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> are not the same address family.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The <see cref="T:System.Net.Sockets.Socket" /> has been closed. 
                </exception>
      <exception cref="T:System.Security.SecurityException">
                    A caller higher in the call stack does not have permission for the requested operation.
                </exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.Connected">
      <summary>
                    Gets a value that indicates whether a <see cref="T:System.Net.Sockets.Socket" /> is connected to a remote host as of the last operation.
                </summary>
      <returns>true if the <see cref="T:System.Net.Sockets.Socket" /> was connected to a remote resource as of the most recent operation; otherwise, false.
                </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.Dispose">
      <summary>
                    Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.Socket" />, and optionally disposes of the managed resources.
                </summary>
    </member>
    <member name="M:System.Net.Sockets.Socket.Dispose(System.Boolean)">
      <summary>
                    Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.Socket" />, and optionally disposes of the managed resources.
                </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to releases only unmanaged resources.
                </param>
    </member>
    <member name="M:System.Net.Sockets.Socket.Finalize">
      <summary>
                    Frees resources used by the <see cref="T:System.Net.Sockets.Socket" /> class.
                </summary>
    </member>
    <member name="P:System.Net.Sockets.Socket.NoDelay">
      <summary>
                    Gets or sets a <see cref="T:System.Boolean" /> value that specifies whether the <see cref="T:System.Net.Sockets.Socket" /> is using the Nagle algorithm.
                </summary>
      <returns>false if the <see cref="T:System.Net.Sockets.Socket" /> uses the Nagle algorithm; otherwise, true. The default is false.
                </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
                    An error occurred when attempting to access the <see cref="T:System.Net.Sockets.Socket" />. See the Remarks section for more information. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The <see cref="T:System.Net.Sockets.Socket" /> has been closed. 
                </exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.OSSupportsIPv4">
      <summary>
                    Gets a value indicating whether IPv4 support is available and enabled on the current host.
                </summary>
      <returns>true if the current host supports the IPv4 protocol; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.OSSupportsIPv6">
      <summary>
                    Gets a value indicating whether IPv6 support is available and enabled on the current host.
                </summary>
      <returns>true if the current host supports the IPv4 protocol; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Net.Sockets.Socket.ProtocolType">
      <summary>
                    Gets the protocol type of the <see cref="T:System.Net.Sockets.Socket" />.
                </summary>
      <returns>
                    One of the <see cref="T:System.Net.Sockets.ProtocolType" /> values.
                </returns>
    </member>
    <member name="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
                    Begins an asynchronous request to receive data from a connected <see cref="T:System.Net.Sockets.Socket" /> object.
                </summary>
      <returns>
                    Returns true if the I/O operation is pending. The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter will be raised upon completion of the operation. 
                
                    Returns false if the I/O operation completed synchronously. In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter will not be raised. The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object in the <paramref name="e" /> parameter may be examined immediately after the method call returns to retrieve the result of the operation.
                </returns>
      <param name="e">
                    The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.
                </param>
      <exception cref="T:System.ArgumentException">
                    An argument was invalid. The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> or <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> properties on the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter must reference valid buffers. One or the other of these properties may be set, but not both at the same time.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    Windows XP or later is required for this method.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The <see cref="T:System.Net.Sockets.Socket" /> has been closed. 
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    An error occurred when attempting to access the socket. See the Remarks section for more information. 
                </exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.ReceiveBufferSize">
      <summary>
                    Gets or sets a value that specifies the size of the receive buffer of the <see cref="T:System.Net.Sockets.Socket" />.
                </summary>
      <returns>
                    An <see cref="T:System.Int32" /> that contains the size, in bytes, of the receive buffer. The default is 8192.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The value specified for a set operation is less than 0.
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    An error occurred when attempting to access the socket.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The <see cref="T:System.Net.Sockets.Socket" /> has been closed. 
                </exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.RemoteEndPoint">
      <summary>
                    Gets the remote endpoint.
                </summary>
      <returns>
                    The <see cref="T:System.Net.EndPoint" /> with which the <see cref="T:System.Net.Sockets.Socket" /> is communicating.
                </returns>
      <exception cref="T:System.Net.Sockets.SocketException">
                    An error occurred when attempting to access the socket. See the Remarks section for more information. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The <see cref="T:System.Net.Sockets.Socket" /> has been closed. 
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
                    Sends data asynchronously to a connected <see cref="T:System.Net.Sockets.Socket" /> object.
                </summary>
      <returns>
                    Returns true if the I/O operation is pending. The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter will be raised upon completion of the operation. 
                
                    Returns false if the I/O operation completed synchronously. In this case, The <see cref="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" /> event on the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter will not be raised. The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter may be examined immediately after the method call returns to retrieve the result of the operation.
                </returns>
      <param name="e">
                    The <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object to use for this asynchronous socket operation.
                </param>
      <exception cref="T:System.ArgumentException">
                    The <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> or <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> properties on the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter must reference valid buffers. One or the other of these properties may be set, but not both at the same time.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    A socket operation was already in progress using the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object passed in the <paramref name="e" /> parameter.
                </exception>
      <exception cref="T:System.NotSupportedException">
                    Windows XP or later is required for this method.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The <see cref="T:System.Net.Sockets.Socket" /> has been closed. 
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    The <see cref="T:System.Net.Sockets.Socket" /> is not yet connected.
                </exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.SendBufferSize">
      <summary>
                    Gets or sets a value that specifies the size of the send buffer of the <see cref="T:System.Net.Sockets.Socket" />.
                </summary>
      <returns>
                    An <see cref="T:System.Int32" /> that contains the size, in bytes, of the send buffer. The default is 8192.
                </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    The value specified for a set operation is less than 0.
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    An error occurred when attempting to access the socket.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The <see cref="T:System.Net.Sockets.Socket" /> has been closed. 
                </exception>
    </member>
    <member name="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)">
      <summary>
                    Disables sends and receives on a <see cref="T:System.Net.Sockets.Socket" />.
                </summary>
      <param name="how">
                    One of the <see cref="T:System.Net.Sockets.SocketShutdown" /> values that specifies the operation that will no longer be allowed.
                </param>
      <exception cref="T:System.Net.Sockets.SocketException">
                    An error occurred when attempting to access the socket. See the Remarks section for more information. 
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The <see cref="T:System.Net.Sockets.Socket" /> has been closed. 
                </exception>
    </member>
    <member name="P:System.Net.Sockets.Socket.Ttl">
      <summary>
                    Gets or sets a value that specifies the Time To Live (TTL) value of Internet Protocol (IP) packets sent by the <see cref="T:System.Net.Sockets.Socket" />.
                </summary>
      <returns>
                    The TTL value.
                </returns>
      <exception cref="T:System.NotSupportedException">
                    This property can be set only for sockets in the <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" /> families.
                </exception>
      <exception cref="T:System.Net.Sockets.SocketException">
                    An error occurred when attempting to access the socket.
                </exception>
      <exception cref="T:System.ObjectDisposedException">
                    The <see cref="T:System.Net.Sockets.Socket" /> has been closed. 
                </exception>
    </member>
    <member name="T:System.Net.Sockets.SocketAsyncEventArgs">
      <summary>
                    Represents an asynchronous socket operation.
                </summary>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.#ctor">
      <summary>
                    Creates an empty <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instance.
                </summary>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer">
      <summary>
                    Gets the data buffer to use with an asynchronous socket method.
                </summary>
      <returns>
                    A <see cref="T:System.Byte" /> array that represents the data buffer to use with an asynchronous socket method.
                </returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList">
      <summary>
                    Gets or sets an array of data buffers to use with an asynchronous socket method.
                </summary>
      <returns>
                    An array of data buffers to use with an asynchronous socket method.
                </returns>
      <exception cref="T:System.ArgumentException">
                    There are ambiguous buffers specified on a set operation. This exception occurs if a value other than null is passed and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> property is also not null.
                </exception>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.BytesTransferred">
      <summary>
                    Gets the number of bytes transferred in the socket operation.
                </summary>
      <returns>
                    The number of bytes transferred in the socket operation.
                </returns>
    </member>
    <member name="E:System.Net.Sockets.SocketAsyncEventArgs.Completed">
      <summary>
                    An event that indicates an asynchronous operation is completed.
                </summary>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.ConnectSocket">
      <summary>
                    The created and connected <see cref="T:System.Net.Sockets.Socket" /> object after successful completion of the <see cref="Overload:System.Net.Sockets.Socket.ConnectAsync" /> method.
                </summary>
      <returns>
                    The connected <see cref="T:System.Net.Sockets.Socket" /> object. 
                </returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.Count">
      <summary>
                    Gets the maximum amount of data, in bytes, to send or receive in an asynchronous operation.
                </summary>
      <returns>
                    The maximum amount of data, in bytes, to send or receive.
                </returns>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.Dispose">
      <summary>
                    Releases the unmanaged resources used by the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> instance and optionally disposes of the managed resources.
                </summary>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.Finalize">
      <summary>
                    Frees resources used by the <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> class.
                </summary>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.LastOperation">
      <summary>
                    Gets the type of socket operation most recently performed with this object.
                </summary>
      <returns>
                    The type of socket operation most recently performed with this <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> object.
                </returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.Offset">
      <summary>
                    Gets the offset, in bytes, into the data buffer referenced by the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> property.
                </summary>
      <returns>
                    The offset, in bytes, into the data buffer referenced by the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> property.
                </returns>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)">
      <summary>
                    Represents a method that is called when an asynchronous operation completes.
                </summary>
      <param name="e">
                    The event that is signaled.
                </param>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint">
      <summary>
                    Gets or sets the remote IP or DNS endpoint for an asynchronous operation.
                </summary>
      <returns>
                    The remote IP endpoint for an asynchronous operation.
                </returns>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)">
      <summary>
                    Sets the data buffer to use with an asynchronous socket method.
                </summary>
      <param name="buffer">
                    The data buffer to use with an asynchronous socket method.
                </param>
      <param name="offset">
                    The offset, in bytes, in the data buffer where the operation starts.
                </param>
      <param name="count">
                    The maximum amount of data, in bytes, to send or receive in the buffer.
                </param>
      <exception cref="T:System.ArgumentException">
                    There are ambiguous buffers specified. This exception occurs if the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> property is also not null and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> property is also not null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    An argument was out of range. This exception occurs if the <paramref name="offset" /> parameter is less than zero or greater than the length of the array in the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> property. This exception also occurs if the <paramref name="count" /> parameter is less than zero or greater than the length of the array in the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> property minus the <paramref name="offset" /> parameter.
                </exception>
    </member>
    <member name="M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Int32,System.Int32)">
      <summary>
                    Sets the data buffer to use with an asynchronous socket method.
                </summary>
      <param name="offset">
                    The offset, in bytes, in the data buffer where the operation starts.
                </param>
      <param name="count">
                    The maximum amount of data, in bytes, to send or receive in the buffer.
                </param>
      <exception cref="T:System.ArgumentException">
                    There are ambiguous buffers specified. This exception occurs if the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> property is also not null and the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> property is also not null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
                    An argument was out of range. This exception occurs if the <paramref name="offset" /> parameter is less than zero or greater than the length of the array in the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> property. This exception also occurs if the <paramref name="count" /> parameter is less than zero or greater than the length of the array in the <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> property minus the <paramref name="offset" /> parameter.
                </exception>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.SocketError">
      <summary>
                    Gets or sets the result of the asynchronous socket operation.
                </summary>
      <returns>
                    The result of the asynchronous socket operation.
                </returns>
    </member>
    <member name="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken">
      <summary>
                    Gets or sets a user or application object associated with this asynchronous socket operation.
                </summary>
      <returns>
                    An object that represents the user or application object associated with this asynchronous socket operation.
                </returns>
    </member>
    <member name="T:System.Net.Sockets.SocketAsyncOperation">
      <summary>
                    The type of asynchronous socket operation most recently performed with this object.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.None">
      <summary>
                    None of the socket operations.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Connect">
      <summary>
                    A socket Connect operation.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Receive">
      <summary>
                    A socket Receive operation.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketAsyncOperation.Send">
      <summary>
                    A socket Send operation.
                </summary>
    </member>
    <member name="T:System.Net.Sockets.SocketError">
      <summary>
                    Defines error codes for the <see cref="T:System.Net.Sockets.Socket" /> class.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Success">
      <summary>
                    The <see cref="T:System.Net.Sockets.Socket" /> operation succeeded.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.SocketError">
      <summary>
                    An unspecified <see cref="T:System.Net.Sockets.Socket" /> error has occurred.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Interrupted">
      <summary>
                    A blocking <see cref="T:System.Net.Sockets.Socket" /> call was canceled.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AccessDenied">
      <summary>
                    An attempt was made to access a <see cref="T:System.Net.Sockets.Socket" /> in a way that is forbidden by its access permissions.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Fault">
      <summary>
                    An invalid pointer address was detected by the underlying socket provider.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.InvalidArgument">
      <summary>
                    An invalid argument was supplied to a <see cref="T:System.Net.Sockets.Socket" /> member.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TooManyOpenSockets">
      <summary>
                    There are too many open sockets in the underlying socket provider.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.WouldBlock">
      <summary>
                    An operation on a nonblocking socket cannot be completed immediately.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.InProgress">
      <summary>
                    A blocking operation is in progress.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AlreadyInProgress">
      <summary>
                    The nonblocking <see cref="T:System.Net.Sockets.Socket" /> already has an operation in progress.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NotSocket">
      <summary>
                    A <see cref="T:System.Net.Sockets.Socket" /> operation was attempted on a non-socket.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.DestinationAddressRequired">
      <summary>
                    A required address was omitted from an operation on a <see cref="T:System.Net.Sockets.Socket" />.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.MessageSize">
      <summary>
                    The datagram is too long.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolType">
      <summary>
                    The protocol type is incorrect for this <see cref="T:System.Net.Sockets.Socket" />.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolOption">
      <summary>
                    An unknown, invalid, or unsupported option or level was used with a <see cref="T:System.Net.Sockets.Socket" />.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolNotSupported">
      <summary>
                    The protocol is not implemented or has not been configured.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.SocketNotSupported">
      <summary>
                    The support for the specified socket type does not exist in this address family.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.OperationNotSupported">
      <summary>
                    The address family is not supported by the protocol family.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProtocolFamilyNotSupported">
      <summary>
                    The protocol family is not implemented or has not been configured.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AddressFamilyNotSupported">
      <summary>
                    The address family specified is not supported. This error is returned if the IPv6 address family was specified and the IPv6 stack is not installed on the local machine. This error is returned if the IPv4 address family was specified and the IPv4 stack is not installed on the local machine.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AddressAlreadyInUse">
      <summary>
                    Only one use of an address is normally permitted.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.AddressNotAvailable">
      <summary>
                    The selected IP address is not valid in this context.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NetworkDown">
      <summary>
                    The network is not available.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NetworkUnreachable">
      <summary>
                    No route to the remote host exists.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NetworkReset">
      <summary>
                    The application tried to set an option on a connection that has already timed out.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ConnectionAborted">
      <summary>
                    The connection was aborted by the .NET Framework or the underlying socket provider.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ConnectionReset">
      <summary>
                    The connection was reset by the remote peer.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NoBufferSpaceAvailable">
      <summary>
                    No free buffer space is available for a <see cref="T:System.Net.Sockets.Socket" /> operation.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.IsConnected">
      <summary>
                    The <see cref="T:System.Net.Sockets.Socket" /> is already connected.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NotConnected">
      <summary>
                    The application tried to send or receive data, and the <see cref="T:System.Net.Sockets.Socket" /> is not connected.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Shutdown">
      <summary>
                    A request to send or receive data was disallowed because the <see cref="T:System.Net.Sockets.Socket" /> has already been closed.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TimedOut">
      <summary>
                    The connection attempt timed out, or the connected host has failed to respond.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ConnectionRefused">
      <summary>
                    The remote host is actively refusing a connection.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.HostDown">
      <summary>
                    The operation failed because the remote host is down.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.HostUnreachable">
      <summary>
                    There is no network route to the specified host.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.ProcessLimit">
      <summary>
                    Too many processes are using the underlying socket provider.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.SystemNotReady">
      <summary>
                    The network subsystem is unavailable.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.VersionNotSupported">
      <summary>
                    The version of the underlying socket provider is out of range.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NotInitialized">
      <summary>
                    The underlying socket provider has not been initialized.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.Disconnecting">
      <summary>
                    A graceful shutdown is in progress.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TypeNotFound">
      <summary>
                    The specified class was not found.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.HostNotFound">
      <summary>
                    No such host is known. The name is not an official host name or alias.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.TryAgain">
      <summary>
                    The name of the host could not be resolved. Try again later.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NoRecovery">
      <summary>
                    The error is unrecoverable or the requested database cannot be located.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.NoData">
      <summary>
                    The requested name or IP address was not found on the name server.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.IOPending">
      <summary>
                    The application has initiated an overlapped operation that cannot be completed immediately.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketError.OperationAborted">
      <summary>
                    The overlapped operation was aborted due to the closure of the <see cref="T:System.Net.Sockets.Socket" />.
                </summary>
    </member>
    <member name="T:System.Net.Sockets.SocketException">
      <summary>
                    The exception that is thrown when a socket error occurs.
                </summary>
    </member>
    <member name="M:System.Net.Sockets.SocketException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.Sockets.SocketException" /> class with the last operating system error code.
                </summary>
    </member>
    <member name="M:System.Net.Sockets.SocketException.#ctor(System.Int32)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Net.Sockets.SocketException" /> class with the specified error code.
                </summary>
      <param name="errorCode">
                    The error code that indicates the error that occurred.
                </param>
    </member>
    <member name="P:System.Net.Sockets.SocketException.ErrorCode">
      <summary>
                    Gets the error code that is associated with this exception.
                </summary>
      <returns>
                    An integer error code that is associated with this exception.
                </returns>
    </member>
    <member name="P:System.Net.Sockets.SocketException.SocketErrorCode">
      <summary>
                    Gets the error code that is associated with this exception.
                </summary>
      <returns>
                    A <see cref="T:System.Net.Sockets.SocketError" /> that is associated with this exception.
                </returns>
    </member>
    <member name="T:System.Net.Sockets.SocketShutdown">
      <summary>
                    Defines constants that are used by the <see cref="M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)" /> method.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketShutdown.Receive">
      <summary>
                    Disables a <see cref="T:System.Net.Sockets.Socket" /> for receiving.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketShutdown.Send">
      <summary>
                    Disables a <see cref="T:System.Net.Sockets.Socket" /> for sending.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketShutdown.Both">
      <summary>
                    Disables a <see cref="T:System.Net.Sockets.Socket" /> for both sending and receiving.
                </summary>
    </member>
    <member name="T:System.Net.Sockets.SocketType">
      <summary>
                    Specifies the type of socket that an instance of the <see cref="T:System.Net.Sockets.Socket" /> class represents.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Stream">
      <summary>
                    A socket type that supports reliable, two-way, connection-based byte streams without the duplication of data and without preservation of boundaries. A <see cref="T:System.Net.Sockets.Socket" /> of this type communicates with a single peer and requires a remote host connection before communication can begin. This socket type uses the Transmission Control Protocol (<see cref="F:System.Net.Sockets.ProtocolType.Tcp" />) and the <see cref="T:System.Net.Sockets.AddressFamily" />.can be either <see cref="F:System.Net.Sockets.AddressFamily.InterNetwork" /> or <see cref="F:System.Net.Sockets.AddressFamily.InterNetworkV6" />.
                </summary>
    </member>
    <member name="F:System.Net.Sockets.SocketType.Unknown">
      <summary>
                    An unknown Socket type.
                </summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\2.0.31005.0\ReferenceAssemblies\system.runtime.serialization.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.Serialization</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.Serialization.CollectionDataContractAttribute">
      <summary>When applied to a collection type, enables custom specification of the collection item elements. This attribute can be applied only to types that are recognized by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> as valid, serializable collections.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.CollectionDataContractAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.CollectionDataContractAttribute" /> class. </summary>
    </member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.IsReference"></member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.ItemName">
      <summary>Gets or sets a custom name for a collection element.</summary>
      <returns>The name to apply to collection elements.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.KeyName">
      <summary>Gets or sets the custom name for a dictionary key name.</summary>
      <returns>The name to use instead of the default dictionary key name.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.Name">
      <summary>Gets or sets the data contract name for the collection type.</summary>
      <returns>The data contract name for the collection type.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.Namespace">
      <summary>Gets or sets the namespace for the data contract.</summary>
      <returns>The namespace of the data contract.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.CollectionDataContractAttribute.ValueName">
      <summary>Gets or sets the custom name for a dictionary value name.</summary>
      <returns>The name to use instead of the default dictionary value name.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.ContractNamespaceAttribute">
      <summary>Specifies the CLR namespace and XML namespace of the data contract. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.ContractNamespaceAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.ContractNamespaceAttribute" /> class using a specified namespace. </summary>
      <param name="contractNamespace">The namespace of the contract.</param>
    </member>
    <member name="P:System.Runtime.Serialization.ContractNamespaceAttribute.ClrNamespace">
      <summary>Gets or sets the CLR namespace of the data contract type. </summary>
      <returns>The CLR-legal namespace of a type. </returns>
    </member>
    <member name="P:System.Runtime.Serialization.ContractNamespaceAttribute.ContractNamespace">
      <summary>Gets the namespace of the data contract members.</summary>
      <returns>The namespace of the data contract members.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.DataContractAttribute">
      <summary>Specifies that the type defines or implements a data contract and can be serialized by a serializer, such as the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> class. </summary>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractAttribute.IsReference"></member>
    <member name="P:System.Runtime.Serialization.DataContractAttribute.Name">
      <summary>Gets or sets the name of the data contract for the type.</summary>
      <returns>The local name of the data contract. The default value is the name of the class that the attribute is applied to. </returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractAttribute.Namespace">
      <summary>Gets or sets the namespace for the data contract for the type.</summary>
      <returns>The namespace of the data contract.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.DataContractSerializer">
      <summary>Serializes and deserializes an instance of a type into an XML stream or document using a supplied data contract. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type, and a collection of known types that may be present in the object graph.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
      <param name="knownTypes">An <see cref="T:System.Collections.Generic.IEnumerable`1" />  of <see cref="T:System.Type" /> that contains the types that may be present in the object graph.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type using the supplied XML root element and namespace.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
      <param name="rootName">The name of the XML element that encloses the content to serialize or deserialize.</param>
      <param name="rootNamespace">The namespace of the XML element that encloses the content to serialize or deserialize.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.String,System.String,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type. This method also specifies the root XML element and namespace in two string parameters as well as a list of known types that may be present in the object graph.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
      <param name="rootName">The root element name of the content.</param>
      <param name="rootNamespace">The namespace of the root element.</param>
      <param name="knownTypes">An <see cref="T:System.Collections.Generic.IEnumerable`1" />  of <see cref="T:System.Type" /> that contains the types that may be present in the object graph.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type using the XML root element and namespace specified through the parameters of type <see cref="T:System.Xml.XmlDictionaryString" />.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
      <param name="rootName">An <see cref="T:System.Xml.XmlDictionaryString" /> that contains the root element name of the content.</param>
      <param name="rootNamespace">An <see cref="T:System.Xml.XmlDictionaryString" /> that contains the namespace of the root element.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.#ctor(System.Type,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> class to serialize or deserialize an object of the specified type. This method also specifies the root XML element and namespace in two <see cref="T:System.Xml.XmlDictionaryString" /> parameters as well as a list of known types that may be present in the object graph.</summary>
      <param name="type">The type of the instances that are serialized or deserialized.</param>
      <param name="rootName">An <see cref="T:System.Xml.XmlDictionaryString" /> that contains the root element name of the content.</param>
      <param name="rootNamespace">An <see cref="T:System.Xml.XmlDictionaryString" /> that contains the namespace of the root element.</param>
      <param name="knownTypes">A <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Type" /> that contains the known types that may be present in the object graph.</param>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.IgnoreExtensionDataObject">
      <summary>Gets a value that specifies whether to ignore data supplied by an extension of the class when the class is being serialized or deserialized.</summary>
      <returns>true to omit the extension data; otherwise, false. The default value is true.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
      <summary>Determines whether the <see cref="T:System.Xml.XmlDictionaryReader" /> is positioned on an object that can be deserialized.</summary>
      <returns>true if the reader is at the start element of the stream to read; otherwise, false.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> used to read the XML stream.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.IsStartObject(System.Xml.XmlReader)">
      <summary>Determines whether the <see cref="T:System.Xml.XmlReader" /> is positioned on an object that can be deserialized.</summary>
      <returns>true if the reader is at the start element of the stream to read; otherwise, false.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> used to read the XML stream.</param>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.KnownTypes">
      <summary>Gets a collection of types that may be present in the object graph serialized using this instance of the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the expected types passed in as known types to the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> constructor.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph">
      <summary>Gets the maximum number of items in an object graph to serialize or deserialize.</summary>
      <returns>The maximum number of items to serialize or deserialize. The default is <see cref="F:System.Int32.MaxValue" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The number of items exceeds the maximum value.</exception>
    </member>
    <member name="P:System.Runtime.Serialization.DataContractSerializer.PreserveObjectReferences">
      <summary>Gets a value that specifies whether to use non-standard XML constructs to preserve object reference data.</summary>
      <returns>true to keep the references; otherwise, false. The default value is false.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>Reads the XML stream with an <see cref="T:System.Xml.XmlDictionaryReader" /> and returns the deserialized object, and also specifies whether a check is made to verify the object name before reading its value. </summary>
      <returns>The deserialized object.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlDictionaryReader" /> used to read the XML stream.</param>
      <param name="verifyObjectName">true to check whether the name of the object corresponds to the root name value supplied in the constructor; otherwise, false. </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <paramref name="verifyObjectName" /> parameter is set to true, and the element name and namespace do not correspond to the values set in the constructor. </exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlReader)">
      <summary>Reads the XML stream with an <see cref="T:System.Xml.XmlReader" /> and returns the deserialized object.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> used to read the XML stream.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)">
      <summary>Reads the XML stream with an <see cref="T:System.Xml.XmlReader" /> and returns the deserialized object, and also specifies whether a check is made to verify the object name before reading its value.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> used to read the XML stream.</param>
      <param name="verifyObjectName">true to check whether the name of the object corresponds to the root name value supplied in the constructor; otherwise, false.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <paramref name="verifyObjectName" /> parameter is set to true, and the element name and namespace do not correspond to the values set in the constructor. </exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
      <summary>Writes the closing XML element using an <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being written.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteEndObject(System.Xml.XmlWriter)">
      <summary>Writes the closing XML element using an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being written.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
      <summary>Writes all the object data (starting XML element, content, and closing element) to an XML document or stream with an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the XML document or stream.</param>
      <param name="graph">The object that contains the data to write to the stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being written.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>Writes the XML content using an <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the stream.</param>
      <param name="graph">The object to write to the stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being written.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)">
      <summary>Writes the XML content using an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the stream.</param>
      <param name="graph">The object to write to the stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being written.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>Writes the opening XML element using an <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the XML start element.</param>
      <param name="graph">The object to write.</param>
    </member>
    <member name="M:System.Runtime.Serialization.DataContractSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)">
      <summary>Writes the opening XML element using an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> used to write the XML start element.</param>
      <param name="graph">The object to write.</param>
    </member>
    <member name="T:System.Runtime.Serialization.DataMemberAttribute">
      <summary>When applied to the member of a type, specifies that the member is part of a data contract and is serializable by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.DataMemberAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.DataMemberAttribute" /> class. </summary>
    </member>
    <member name="P:System.Runtime.Serialization.DataMemberAttribute.EmitDefaultValue">
      <summary>Gets or sets a value that specifies whether to serialize the default value for a field or property being serialized. </summary>
      <returns>true if the default value for a member should be generated in the serialization stream; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataMemberAttribute.IsRequired">
      <summary>Gets or sets a value that instructs the serialization engine whether the member must be present in the serialized data when it is being deserializing.</summary>
      <returns>true, if the member is required; otherwise, false. The default is false.</returns>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The member is not present or the member is present but it has a default value with <see cref="P:System.Runtime.Serialization.DataMemberAttribute.EmitDefaultValue" /> set to true.</exception>
    </member>
    <member name="P:System.Runtime.Serialization.DataMemberAttribute.Name">
      <summary>Gets or sets a data member name. </summary>
      <returns>The name of the data member. The default name of a data contract for a given type of data member is the CLR member name of that type.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.DataMemberAttribute.Order">
      <summary>Gets or sets the order of serialization and deserialization of a member.</summary>
      <returns>The numeric order of serialization or deserialization.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.EnumMemberAttribute">
      <summary>Specifies that the field is an enumeration member and should be serialized.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.EnumMemberAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.EnumMemberAttribute" /> class. </summary>
    </member>
    <member name="P:System.Runtime.Serialization.EnumMemberAttribute.Value">
      <summary>Gets or sets the value associated with the enumeration member the attribute is applied to.</summary>
      <returns>The value associated with the enumeration member.</returns>
    </member>
    <member name="T:System.Runtime.Serialization.IgnoreDataMemberAttribute">
      <summary>When applied to the member of a type, specifies that the member is not part of a data contract and is not serialized.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.IgnoreDataMemberAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.IgnoreDataMemberAttribute" /> class. </summary>
    </member>
    <member name="T:System.Runtime.Serialization.InvalidDataContractException">
      <summary>The exception that is thrown when the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> encounters an invalid data contract during serialization and deserialization. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.InvalidDataContractException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.InvalidDataContractException" /> class. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.InvalidDataContractException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.InvalidDataContractException" /> class with the specified error message. </summary>
      <param name="message">A description of the error. </param>
    </member>
    <member name="M:System.Runtime.Serialization.InvalidDataContractException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.InvalidDataContractException" /> class with the specified error message and inner exception. </summary>
      <param name="message">A description of the error. </param>
      <param name="innerException">The original <see cref="T:System.Exception" />. </param>
    </member>
    <member name="T:System.Runtime.Serialization.KnownTypeAttribute">
      <summary>Specifies types that should be recognized by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" /> when serializing or deserializing a given type. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.KnownTypeAttribute" /> class with the name of a method that returns an <see cref="T:System.Collections.IEnumerable" /> of known types.</summary>
      <param name="methodName">The name of the method that returns an <see cref="T:System.Collections.IEnumerable" /> of types used when serializing or deserializing data.</param>
    </member>
    <member name="M:System.Runtime.Serialization.KnownTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.KnownTypeAttribute" /> class with the specified type. </summary>
      <param name="type">The <see cref="T:System.Type" /> that is included as a known type when serializing or deserializing data.</param>
    </member>
    <member name="P:System.Runtime.Serialization.KnownTypeAttribute.MethodName">
      <summary>Gets the name of a method that returns a list of types that should be recognized during serialization or deserialization. </summary>
      <returns>The name of the method on the type defined by the <see cref="T:System.Runtime.Serialization.KnownTypeAttribute" /> class.</returns>
    </member>
    <member name="P:System.Runtime.Serialization.KnownTypeAttribute.Type">
      <summary>Gets the type that should be recognized during serialization or deserialization by the <see cref="T:System.Runtime.Serialization.DataContractSerializer" />. </summary>
      <returns>The <see cref="T:System.Type" /> that is used during serialization or deserialization. </returns>
    </member>
    <member name="T:System.Runtime.Serialization.XmlObjectSerializer">
      <summary>Provides the base class used to serialize objects as XML streams or documents. This class is abstract.</summary>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being serialized. </exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.XmlObjectSerializer" /> class. </summary>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.IsStartObject(System.Xml.XmlDictionaryReader)">
      <summary>Gets a value that specifies whether the <see cref="T:System.Xml.XmlDictionaryReader" /> is positioned over an XML element that can be read.</summary>
      <returns>true if the reader can read the data; otherwise, false.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> used to read the XML stream or document.</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.IsStartObject(System.Xml.XmlReader)">
      <summary>Gets a value that specifies whether the <see cref="T:System.Xml.XmlReader" /> is positioned over an XML element that can be read.</summary>
      <returns>true if the reader is positioned over the starting element; otherwise, false.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> used to read the XML stream or document.</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.IO.Stream)">
      <summary>Reads the XML stream or document with a <see cref="T:System.IO.Stream" /> and returns the deserialized object.</summary>
      <returns>The deserialized object.</returns>
      <param name="stream">A <see cref="T:System.IO.Stream" /> used to read the XML stream or document.</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlDictionaryReader)">
      <summary>Reads the XML document or stream with an <see cref="T:System.Xml.XmlDictionaryReader" /> and returns the deserialized object.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> used to read the XML document.</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>When implemented in a derived class, reads the XML stream or document with an <see cref="T:System.Xml.XmlDictionaryReader" /> and returns the deserialized object.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlDictionaryReader" /> used to read the XML document.</param>
      <param name="verifyObjectName">true to check whether the enclosing XML element name and namespace correspond to the root name and root namespace; otherwise, false to skip the verification.</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlReader)">
      <summary>Reads the XML document or stream with an <see cref="T:System.Xml.XmlReader" /> and returns the deserialized object.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> used to read the XML stream or document.</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.ReadObject(System.Xml.XmlReader,System.Boolean)">
      <summary>Reads the XML document or stream with an <see cref="T:System.Xml.XmlReader" /> and returns the deserialized object. It also enables you to specify whether the serializer can read the data before attempting to read it.</summary>
      <returns>The deserialized object.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> used to read the XML document or stream.</param>
      <param name="verifyObjectName">true to check whether the enclosing XML element name and namespace correspond to the root name and root namespace; false to skip the verification.</param>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteEndObject(System.Xml.XmlDictionaryWriter)">
      <summary>Writes the end of the object data as a closing XML element to the XML document or stream with an <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the XML document or stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteEndObject(System.Xml.XmlWriter)">
      <summary>Writes the end of the object data as a closing XML element to the XML document or stream with an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> used to write the XML document or stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObject(System.IO.Stream,System.Object)">
      <summary>Writes the complete content (start, content, and end) of the object to the XML document or stream with the specified <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">A <see cref="T:System.IO.Stream" /> used to write the XML document or stream.</param>
      <param name="graph">The object that contains the data to write to the stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>Writes the complete content (start, content, and end) of the object to the XML document or stream with the specified <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the content to the XML document or stream.</param>
      <param name="graph">The object that contains the content to write.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObject(System.Xml.XmlWriter,System.Object)">
      <summary>Writes the complete content (start, content, and end) of the object to the XML document or stream with the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> used to write the XML document or stream.</param>
      <param name="graph">The object that contains the content to write.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObjectContent(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>Writes only the content of the object to the XML document or stream using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the XML document or stream.</param>
      <param name="graph">The object that contains the content to write.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteObjectContent(System.Xml.XmlWriter,System.Object)">
      <summary>Writes only the content of the object to the XML document or stream with the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> used to write the XML document or stream.</param>
      <param name="graph">The object that contains the content to write.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteStartObject(System.Xml.XmlDictionaryWriter,System.Object)">
      <summary>Writes the start of the object's data as an opening XML element using the specified <see cref="T:System.Xml.XmlDictionaryWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlDictionaryWriter" /> used to write the XML document.</param>
      <param name="graph">The object to serialize.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.XmlObjectSerializer.WriteStartObject(System.Xml.XmlWriter,System.Object)">
      <summary>Writes the start of the object's data as an opening XML element using the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> used to write the XML document.</param>
      <param name="graph">The object to serialize.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being serialized.</exception>
      <exception cref="T:System.ServiceModel.QuotaExceededException">The maximum number of objects to serialize has been exceeded. Check the <see cref="P:System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph" /> property.</exception>
    </member>
    <member name="T:System.Xml.IXmlDictionary">
      <summary>An interface that defines the contract that an XML dictionary must implement to be used by <see cref="T:System.Xml.XmlDictionaryReader" /> and <see cref="T:System.Xml.XmlDictionaryWriter" /> implementations.</summary>
    </member>
    <member name="M:System.Xml.IXmlDictionary.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)">
      <summary>Attempts to look up an entry in the dictionary.</summary>
      <returns>true if <paramref name="key" /> is in the dictionary; otherwise, false.</returns>
      <param name="key">The key to check for.</param>
      <param name="result">If <paramref name="key" /> is found in the <see cref="T:System.Xml.IXmlDictionary" />, the <see cref="T:System.Xml.XmlDictionaryString" /> that is mapped to the key; otherwise, null.</param>
    </member>
    <member name="M:System.Xml.IXmlDictionary.TryLookup(System.String,System.Xml.XmlDictionaryString@)">
      <summary>Checks the dictionary for a specified string value.</summary>
      <returns>true if <paramref name="value" /> is in the dictionary; otherwise, false.</returns>
      <param name="value">The string to check for.</param>
      <param name="result">If <paramref name="value" /> is found in the <see cref="T:System.Xml.IXmlDictionary" />, the <see cref="T:System.Xml.XmlDictionaryString" /> that is mapped to the key; otherwise, null.</param>
    </member>
    <member name="M:System.Xml.IXmlDictionary.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)">
      <summary>Checks the dictionary for a specified <see cref="T:System.Xml.XmlDictionaryString" />.</summary>
      <returns>true if <see cref="T:System.Xml.XmlDictionaryString" /> is in the dictionary; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Xml.XmlDictionaryString" /> being checked for.</param>
      <param name="result">If <paramref name="value" /> is found in the <see cref="T:System.Xml.IXmlDictionary" />, the <see cref="T:System.Xml.XmlDictionaryString" /> that is mapped to the key; otherwise, null.</param>
    </member>
    <member name="T:System.Xml.UniqueId">
      <summary>Represents a unique identifier optimized for GUIDs.</summary>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Xml.UniqueId" /> class with a new, unique GUID.</summary>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.Byte[])">
      <summary>Creates a new instance of the <see cref="T:System.Xml.UniqueId" /> class using a byte array that represents a <see cref="T:System.Guid" />.</summary>
      <param name="guid">A byte array that represents a <see cref="T:System.Guid" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="guid" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="guid" /> provides less than 16 valid bytes.</exception>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.Byte[],System.Int32)">
      <summary>Creates a new instance of the <see cref="T:System.Xml.UniqueId" /> class that starts from an offset within a byte array that represents a <see cref="T:System.Guid" />.</summary>
      <param name="guid">A byte array that represents a <see cref="T:System.Guid" />.</param>
      <param name="offset">Offset position within the byte array that represents a <see cref="T:System.Guid" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="guid" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than zero or greater than the length of the array.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="guid " />and<paramref name=" offset" /> provide less than 16 valid bytes.</exception>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.Guid)">
      <summary>Creates a new instance of the <see cref="T:System.Xml.UniqueId" /> class using a <see cref="T:System.Guid" />.</summary>
      <param name="guid">A <see cref="T:System.Guid" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="guid" /> is null.</exception>
    </member>
    <member name="M:System.Xml.UniqueId.#ctor(System.String)">
      <summary>Creates a new instance of the <see cref="T:System.Xml.UniqueId" /> class using a string.</summary>
      <param name="value">A string used to generate the <see cref="T:System.Xml.UniqueId" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.FormatException">Length of<paramref name=" value" /> is zero.</exception>
    </member>
    <member name="P:System.Xml.UniqueId.CharArrayLength">
      <summary>Gets a value that indicates the length of the string representation of the <see cref="T:System.Xml.UniqueId" />.</summary>
      <returns>The length of the string representation of the <see cref="T:System.Xml.UniqueId" />.</returns>
    </member>
    <member name="M:System.Xml.UniqueId.Equals(System.Object)">
      <summary>Tests whether an object equals this <see cref="T:System.Xml.UniqueId" />.</summary>
      <returns>true if the object equals this <see cref="T:System.Xml.UniqueId" />; otherwise, false.</returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Xml.UniqueId.GetHashCode">
      <summary>Creates a hash-code representation of this <see cref="T:System.Xml.UniqueId" />.</summary>
      <returns>An integer hash-code representation of this <see cref="T:System.Xml.UniqueId" />.</returns>
    </member>
    <member name="P:System.Xml.UniqueId.IsGuid">
      <summary>Gets a value that indicates whether the <see cref="T:System.Xml.UniqueId" /> is a <see cref="T:System.Guid" />.</summary>
      <returns>true if the <see cref="T:System.Xml.UniqueId" /> is a <see cref="T:System.Guid" />; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.UniqueId.op_Equality(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>Overrides the equality operator to test for equality of two <see cref="T:System.Xml.UniqueId" /> objects.</summary>
      <returns>true if the two <see cref="T:System.Xml.UniqueId" />s are equal or are both null; false if they are not equal or if only one of them is null.</returns>
      <param name="id1">The first <see cref="T:System.Xml.UniqueId" />.</param>
      <param name="id2">The second <see cref="T:System.Xml.UniqueId" />.</param>
    </member>
    <member name="M:System.Xml.UniqueId.op_Inequality(System.Xml.UniqueId,System.Xml.UniqueId)">
      <summary>Overrides the equality operator to test for inequality of two <see cref="T:System.Xml.UniqueId" />s.</summary>
      <returns>true if the overridden equality operator returns false; otherwise, false.</returns>
      <param name="id1">The first <see cref="T:System.Xml.UniqueId" />.</param>
      <param name="id2">The second <see cref="T:System.Xml.UniqueId" />.</param>
    </member>
    <member name="M:System.Xml.UniqueId.ToCharArray(System.Char[],System.Int32)">
      <summary>Puts the <see cref="T:System.Xml.UniqueId" /> value into a char array.</summary>
      <returns>Number of entries in the char array filled by the <see cref="T:System.Xml.UniqueId" /> value.</returns>
      <param name="chars">The char array.</param>
      <param name="offset">Position in the char array to start inserting the <see cref="T:System.Xml.UniqueId" /> value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="chars" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than zero or greater than the length of the array.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="guid " /> and <paramref name=" offset" /> provide less than 16 valid bytes.</exception>
    </member>
    <member name="M:System.Xml.UniqueId.ToString">
      <summary>Displays the <see cref="T:System.Xml.UniqueId" /> value in string format.</summary>
      <returns>The <see cref="T:System.Xml.UniqueId" /> value.</returns>
    </member>
    <member name="T:System.Xml.XmlDictionary">
      <summary>Implements a dictionary used to optimize Silverlight version 2's XML reader/writer implementations.</summary>
    </member>
    <member name="M:System.Xml.XmlDictionary.#ctor">
      <summary>Creates an empty <see cref="T:System.Xml.XmlDictionary" />.</summary>
    </member>
    <member name="M:System.Xml.XmlDictionary.#ctor(System.Int32)">
      <summary>Creates a <see cref="T:System.Xml.XmlDictionary" /> with an initial capacity.</summary>
      <param name="capacity">The initial size of the dictionary.</param>
    </member>
    <member name="M:System.Xml.XmlDictionary.Add(System.String)">
      <summary>Adds a string to the <see cref="T:System.Xml.XmlDictionary" />.</summary>
      <returns>The <see cref="T:System.Xml.XmlDictionaryString" /> that was added.</returns>
      <param name="value">String to add to the dictionary.</param>
    </member>
    <member name="P:System.Xml.XmlDictionary.Empty">
      <summary>Gets a static empty <see cref="T:System.Xml.IXmlDictionary" />.</summary>
      <returns>A static empty <see cref="T:System.Xml.IXmlDictionary" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionary.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)">
      <summary>Attempts to look up an entry in the dictionary.</summary>
      <returns>true if key is in the XML dictionary; otherwise, false.</returns>
      <param name="key">Key to look up.</param>
      <param name="result">If <paramref name="key" /> is in the <see cref="T:System.Xml.XmlDictionary" />, the <see cref="T:System.Xml.XmlDictionaryString" /> that is mapped to the key; otherwise, null.</param>
    </member>
    <member name="M:System.Xml.XmlDictionary.TryLookup(System.String,System.Xml.XmlDictionaryString@)">
      <summary>Checks the dictionary for a specified string value.</summary>
      <returns>true if value is in the <see cref="T:System.Xml.XmlDictionary" />; otherwise, false.</returns>
      <param name="value">String value being checked for.</param>
      <param name="result">If <paramref name="value" /> is in the <see cref="T:System.Xml.XmlDictionary" />, the <see cref="T:System.Xml.XmlDictionaryString" /> that is mapped to the key; otherwise, null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionary.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)">
      <summary>Checks the dictionary for a specified <see cref="T:System.Xml.XmlDictionaryString" />.</summary>
      <returns>true if <see cref="T:System.Xml.XmlDictionaryString" /> is in the dictionary; otherwise, false.</returns>
      <param name="value">The <see cref="T:System.Xml.XmlDictionaryString" /> being checked for.</param>
      <param name="result">If <paramref name="value" /> is in the <see cref="T:System.Xml.XmlDictionary" />, the <see cref="T:System.Xml.XmlDictionaryString" /> that is mapped to the key; otherwise, null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="T:System.Xml.XmlDictionaryReader">
      <summary>An abstract class that provides some additional functionality to <see cref="T:System.Xml.XmlReader" />.</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.#ctor">
      <summary>Creates an instance of this class. Invoked only by its derived classes.</summary>
    </member>
    <member name="P:System.Xml.XmlDictionaryReader.CanCanonicalize">
      <summary>This property always returns false. Its derived classes can override to return true if they support canonicalization.</summary>
      <returns>Returns false.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.CreateDictionaryReader(System.Xml.XmlReader)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryReader" /> from an existing <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReader" />.</returns>
      <param name="reader">An instance of <see cref="T:System.Xml.XmlReader" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.EndCanonicalization">
      <summary>This method is not supported on this base class and can be implemented on a derived class.</summary>
      <exception cref="T:System.NotSupportedException">This method is not supported on this base class.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.GetAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>When overridden in a derived class, gets the value of an attribute.</summary>
      <returns>The value of the attribute.</returns>
      <param name="localName">An <see cref="T:System.Xml.XmlDictionaryString" /> that represents the local name of the attribute.</param>
      <param name="namespaceUri">An <see cref="T:System.Xml.XmlDictionaryString" /> that represents the namespace of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IndexOfLocalName(System.String[],System.String)">
      <summary>Gets the index of the local name of the current node within an array of names.</summary>
      <returns>The index of the local name of the current node within an array of names.</returns>
      <param name="localNames">The string array of local names to be searched.</param>
      <param name="namespaceUri">The namespace of the current node.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localNames" /> or any of the names in the array is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceUri" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IndexOfLocalName(System.Xml.XmlDictionaryString[],System.Xml.XmlDictionaryString)">
      <summary>Gets the index of the local name of the current node within an array of names.</summary>
      <returns>The index of the local name of the current node within an array of names.</returns>
      <param name="localNames">The <see cref="T:System.Xml.XmlDictionaryString" /> array of local names to be searched.</param>
      <param name="namespaceUri">The namespace of the current node.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localNames" /> or any of the names in the array is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceUri" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsLocalName(System.String)">
      <summary>Checks whether the parameter, <paramref name="localName" />, is the local name of the current node.</summary>
      <returns>true if <paramref name="localName" /> matches the local name of the current node; otherwise, false.</returns>
      <param name="localName">The local name of the current node.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsLocalName(System.Xml.XmlDictionaryString)">
      <summary>Checks whether the parameter, <paramref name="localName" />, is the local name of the current node.</summary>
      <returns>true if <paramref name="localName" /> matches the local name of the current node; otherwise, false.</returns>
      <param name="localName">An <see cref="T:System.Xml.XmlDictionaryString" /> that represents the local name of the current node.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localName" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsNamespaceUri(System.String)">
      <summary>Checks whether the parameter, <paramref name="namespaceUri" />, is the namespace of the current node.</summary>
      <returns>true if <paramref name="namespaceUri" /> matches the namespace of the current node; otherwise, false.</returns>
      <param name="namespaceUri">The namespace of the current node.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceUri" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsNamespaceUri(System.Xml.XmlDictionaryString)">
      <summary>Checks whether the parameter, <paramref name="namespaceUri" />, is the namespace of the current node.</summary>
      <returns>true if <paramref name="namespaceUri" /> matches the namespace of the current node; otherwise, false.</returns>
      <param name="namespaceUri">The namespace of current node.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceUri" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsStartArray(System.Type@)">
      <summary>Checks whether the reader is positioned at the start of an array. This class returns false, but derived classes that have the concept of arrays might return true.</summary>
      <returns>true if the reader is positioned at the start of an array node; otherwise, false.</returns>
      <param name="type">Type of the node, if a valid node; otherwise, null.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Tests whether the first element is a start element or empty element and whether the local name and namespace URI match those of the current node.</summary>
      <returns>true if the first element in the array is a start element or empty element and matches <paramref name="localName" /> and <paramref name="namespaceUri" />; otherwise, false.</returns>
      <param name="localName">An <see cref="T:System.Xml.XmlDictionaryString" /> that represents the local name of the attribute.</param>
      <param name="namespaceUri">An <see cref="T:System.Xml.XmlDictionaryString" /> that represents the namespace of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.IsTextNode(System.Xml.XmlNodeType)">
      <summary>Tests whether the current node is a text node.</summary>
      <returns>true if the node type is <see cref="F:System.Xml.XmlNodetype.Text" />, <see cref="F:System.Xml.XmlNodetype.Whitespace" />, <see cref="F:System.Xml.XmlNodetype.SignificantWhitespace" />, <see cref="F:System.Xml.XmlNodetype.CDATA" />, or <see cref="F:System.Xml.XmlNodetype.Attribute" />; otherwise, false.</returns>
      <param name="nodeType">Type of the node being tested.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement">
      <summary>Tests whether the current content node is a start element.</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.String)">
      <summary>Tests whether the current content node is a start element and if the <see cref="P:System.Xml.XmlReader.Name" /> property of the element matches the given argument.</summary>
      <param name="name">The <see cref="P:System.Xml.XmlReader.Name" /> property of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.String,System.String)">
      <summary>Tests whether the current content node is a start element and whether the <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element match the given arguments.</summary>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.MoveToStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Tests whether the current content node is a start element and whether the <see cref="P:System.Xml.XmlReader.LocalName" /> and <see cref="P:System.Xml.XmlReader.NamespaceURI" /> properties of the element match the given argument.</summary>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="P:System.Xml.XmlDictionaryReader.Quotas">
      <summary>Gets the quota values that apply to the current instance of this reader class.</summary>
      <returns>Returns <see cref="T:System.Xml.XmlDictionaryReaderQuotas" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Boolean[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Boolean" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The local name of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.DateTime[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.DateTime" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Decimal[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Decimal" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Double[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Double" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Guid[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Guid" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int16[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of short integers into a typed array.</summary>
      <returns>The number of integers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the integers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of integers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int32[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of integers into a typed array.</summary>
      <returns>The number of integers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the integers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of integers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Int64[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of long integers into a typed array.</summary>
      <returns>The number of integers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the integers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of integers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.Single[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of float numbers into a typed array.</summary>
      <returns>The number of float numbers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the float numbers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of float numbers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.String,System.String,System.TimeSpan[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.TimeSpan" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Boolean[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Boolean" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.DateTime[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.DateTime" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Decimal[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Decimal" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Double[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Double" /> nodes type into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Guid[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.Guid" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int16[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of short integers into a typed array.</summary>
      <returns>The number of integers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the integers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of integers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int32[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of integers into a typed array.</summary>
      <returns>The number of integers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the integers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of integers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int64[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of long integers into a typed array.</summary>
      <returns>The number of integers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the integers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of integers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Single[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of float numbers into a typed array.</summary>
      <returns>The number of float numbers put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the float numbers are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of float numbers to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.TimeSpan[],System.Int32,System.Int32)">
      <summary>Reads repeated occurrences of <see cref="T:System.TimeSpan" /> nodes into a typed array.</summary>
      <returns>The number of nodes put in the array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array into which the nodes are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to put in the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadBooleanArray(System.String,System.String)">
      <summary>Reads repeated occurrences of <see cref="T:System.Boolean" /> nodes into a typed array.</summary>
      <returns>A <see cref="T:System.Boolean" /> array of the <see cref="T:System.Boolean" /> nodes.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadBooleanArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Reads repeated occurrences of <see cref="T:System.Boolean" /> nodes into a typed array.</summary>
      <returns>A <see cref="T:System.Boolean" /> array of the <see cref="T:System.Boolean" /> nodes.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)">
      <summary>Converts a node's content to a specified type.</summary>
      <returns>The concatenated text content or attribute value converted to the requested type.</returns>
      <param name="type">The <see cref="T:System.Type" /> of the value to be returned.</param>
      <param name="namespaceResolver">An <see cref="T:System.Xml.IXmlNamespaceResolver" /> object that is used to resolve any namespace prefixes related to type conversion. For example, this can be used when converting an <see cref="T:System.Xml.XmlQualifiedName" /> object to an xs:string. This value can be a null reference.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsBase64">
      <summary>Reads the content and returns the Base64 decoded binary bytes.</summary>
      <returns>A <see cref="T:System.Byte" /> array that contains the Base64 decoded binary bytes.</returns>
      <exception cref="T:System.Xml.XmlException">The array size is greater than the MaxArrayLength quota for this reader.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsBinHex">
      <summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
      <returns>A byte array that contains the BinHex decoded binary bytes.</returns>
      <exception cref="T:System.Xml.XmlException">The array size is greater than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsBinHex(System.Int32)">
      <summary>Reads the content and returns the BinHex decoded binary bytes.</summary>
      <returns>A byte array that contains the BinHex decoded binary bytes.</returns>
      <param name="maxByteArrayContentLength">The maximum array length.</param>
      <exception cref="T:System.Xml.XmlException">The array size is greater than <paramref name="maxByteArrayContentLength" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsChars(System.Char[],System.Int32,System.Int32)">
      <summary>Reads the content into a char array.</summary>
      <returns>Number of characters read.</returns>
      <param name="chars">The array into which the characters are put.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of characters to put in the array.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsDecimal">
      <summary>Converts a node's content to decimal.</summary>
      <returns>The decimal representation of the node's content.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsFloat">
      <summary>Converts a node's content to float.</summary>
      <returns>The float representation of the node's content.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsGuid">
      <summary>Converts a node's content to guid.</summary>
      <returns>The guid representation of the node's content.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsQualifiedName(System.String@,System.String@)">
      <summary>Converts a node's content to a qualified name representation.</summary>
      <param name="localName">The <see cref="P:System.Xml.XmlReader.LocalName" /> part of the qualified name (out parameter).</param>
      <param name="namespaceUri">The <see cref="P:System.Xml.XmlReader.NamespaceURI" /> part of the qualified name (out parameter).</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString">
      <summary>Converts a node's content to a string.</summary>
      <returns>The node content in a string representation.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString(System.Int32)">
      <summary>Converts a node's content to a string.</summary>
      <returns>The node content in string representation.</returns>
      <param name="maxStringContentLength">The maximum string length.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString(System.String[],System.Int32@)">
      <summary>Converts a node's content to a string.</summary>
      <returns>The node content in a string representation.</returns>
      <param name="strings">The array of strings to match content against.</param>
      <param name="index">The index of the entry in <paramref name="strings" /> that matches the content.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="strings" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">An entry in <paramref name="strings" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsString(System.Xml.XmlDictionaryString[],System.Int32@)">
      <summary>Converts a node's content to a string.</summary>
      <returns>The node content in a string representation.</returns>
      <param name="strings">The array of <see cref="T:System.Xml.XmlDictionaryString" /> objects to match content against.</param>
      <param name="index">The index of the entry in <paramref name="strings" /> that matches the content.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="strings" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">An entry in <paramref name="strings" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsTimeSpan">
      <summary>Converts a node's content to <see cref="T:System.TimeSpan" />.</summary>
      <returns>
        <see cref="T:System.TimeSpan" /> representation of node's content.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadContentAsUniqueId">
      <summary>Converts a node's content to a unique identifier.</summary>
      <returns>The node's content represented as a unique identifier.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDateTimeArray(System.String,System.String)">
      <summary>Converts a node's content to a <see cref="T:System.DateTime" /> array.</summary>
      <returns>The node's content represented as a <see cref="T:System.DateTime" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDateTimeArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Converts a node's content to a <see cref="T:System.DateTime" /> array.</summary>
      <returns>The node's content represented as a <see cref="T:System.DateTime" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDecimalArray(System.String,System.String)">
      <summary>Converts a node's content to a <see cref="T:System.DateTime" /> array.</summary>
      <returns>The node's content represented as a <see cref="T:System.Decimal" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDecimalArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Converts a node's content to a <see cref="T:System.DateTime" /> array.</summary>
      <returns>The node's content represented as a <see cref="T:System.Decimal" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDoubleArray(System.String,System.String)">
      <summary>Converts a node's content to a <see cref="T:System.DateTime" /> array.</summary>
      <returns>The node's content represented as a <see cref="T:System.Double" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadDoubleArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Converts a node's content to a <see cref="T:System.DateTime" /> array.</summary>
      <returns>The node's content represented as a <see cref="T:System.Double" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsBase64">
      <summary>Converts a node's content to a array of Base64 bytes.</summary>
      <returns>Returns <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsBinHex">
      <summary>Converts a node's content to an array of BinHex bytes.</summary>
      <returns>Returns <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsBoolean">
      <summary>Converts an element's content to a <see cref="T:System.Boolean" />.</summary>
      <returns>The node's content represented as a <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsDateTime">
      <summary>Converts an element's content to a <see cref="T:System.DateTime" />.</summary>
      <returns>The node's content represented as a <see cref="T:System.DateTime" />.</returns>
      <exception cref="T:System.ArgumentException">The element is not in valid format.</exception>
      <exception cref="T:System.FormatException">The element is not in valid format.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsDecimal">
      <summary>Converts an element's content to a <see cref="T:System.Decimal" />.</summary>
      <returns>The node's content represented as a <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsDouble">
      <summary>Converts an element's content to a <see cref="T:System.Double" />.</summary>
      <returns>The node's content represented as a <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsFloat">
      <summary>Converts an element's content to a floating point number (<see cref="T:System.Single" />).</summary>
      <returns>The node's content represented as a floating point number (<see cref="T:System.Single" />).</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsGuid">
      <summary>Converts an element's content to a <see cref="T:System.Guid" />.</summary>
      <returns>The node's content represented as a <see cref="T:System.Guid" />.</returns>
      <exception cref="T:System.ArgumentException">The element is not in valid format.</exception>
      <exception cref="T:System.FormatException">The element is not in valid format.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsInt">
      <summary>Converts an element's content to an integer (<see cref="T:System.Int32" />).</summary>
      <returns>The node's content represented as an integer (<see cref="T:System.Int32" />).</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsLong">
      <summary>Converts an element's content to a long integer (<see cref="T:System.Int64" />).</summary>
      <returns>The node's content represented as a long integer (<see cref="T:System.Int64" />).</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsString">
      <summary>Converts an element's content to a <see cref="T:System.String" />.</summary>
      <returns>The node's content represented as a <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsTimeSpan">
      <summary>Converts an element's content to a <see cref="T:System.TimeSpan" />.</summary>
      <returns>The node's content represented as a <see cref="T:System.TimeSpan" />.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadElementContentAsUniqueId">
      <summary>Converts an element's content to a unique identifier.</summary>
      <returns>The node's content represented as a unique identifier.</returns>
      <exception cref="T:System.ArgumentException">The element is not in valid format.</exception>
      <exception cref="T:System.FormatException">The element is not in valid format.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement">
      <summary>Checks whether the current node is a start element and whether it is a nonempty element, and reads it if these conditions are satisfied, advancing the reader to the next node. Throws an exception if it is not a start element or if it is an empty element.</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.String)">
      <summary>Checks whether the named node is a start element and whether it is a nonempty element, and reads it if these conditions are satisfied, advancing the reader to the next node. Throws an exception if it is not a start element or if it is an empty element.</summary>
      <param name="name">The qualified name of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.String,System.String)">
      <summary>Checks whether the node with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> is a start element and whether it is a nonempty element, and reads it if these conditions are satisfied, advancing the reader to the next node. Throws an exception if it is not a start element or if it is an empty element.</summary>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadFullStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Checks whether the node with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> is a start element and whether it is a nonempty element, and reads it if these conditions are satisfied, advancing the reader to the next node. Throws an exception if it is not a start element or if it is an empty element.</summary>
      <param name="localName">The local <see cref="T:System.Xml.XmlDictionaryString" /> name of the element.</param>
      <param name="namespaceUri">The <see cref="T:System.Xml.XmlDictionaryString" /> namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadGuidArray(System.String,System.String)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of <see cref="T:System.Guid" />.</summary>
      <returns>An array of <see cref="T:System.Guid" />.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadGuidArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of <see cref="T:System.Guid" />.</summary>
      <returns>An array of <see cref="T:System.Guid" />.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt16Array(System.String,System.String)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of short integers (<see cref="T:System.Int16" />).</summary>
      <returns>An array of short integers (<see cref="T:System.Int16" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt16Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of short integers (<see cref="T:System.Int16" />).</summary>
      <returns>An array of short integers (<see cref="T:System.Int16" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt32Array(System.String,System.String)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of integers (<see cref="T:System.Int32" />).</summary>
      <returns>An array of integers (<see cref="T:System.Int32" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt32Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of integers (<see cref="T:System.Int32" />).</summary>
      <returns>An array of integers (<see cref="T:System.Int32" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt64Array(System.String,System.String)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of long integers (<see cref="T:System.Int64" />).</summary>
      <returns>An array of long integers (<see cref="T:System.Int64" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadInt64Array(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of long integers (<see cref="T:System.Int64" />).</summary>
      <returns>An array of long integers (<see cref="T:System.Int64" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadSingleArray(System.String,System.String)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of float numbers (<see cref="T:System.Single" />).</summary>
      <returns>An array of float numbers (<see cref="T:System.Single" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadSingleArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into an array of float numbers (<see cref="T:System.Single" />).</summary>
      <returns>An array of float numbers (<see cref="T:System.Single" />).</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Checks whether the node with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> is a start element and advances the reader to the next node. Throws an exception if the node is not a start element.</summary>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadTimeSpanArray(System.String,System.String)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into a <see cref="T:System.TimeSpan" /> array.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadTimeSpanArray(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Reads the contents of a series of nodes with the given <paramref name="localName" /> and <paramref name="namespaceUri" /> into a <see cref="T:System.TimeSpan" /> array.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> array.</returns>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.ReadValueAsBase64(System.Byte[],System.Int32,System.Int32)">
      <summary>This method is not supported by this class.</summary>
      <returns>A <see cref="T:System.Int32" />. </returns>
      <param name="buffer">The buffer from which to read.</param>
      <param name="offset">The starting position from which to read in <paramref name="buffer" />.</param>
      <param name="count">The number of bytes that can be read from <paramref name="buffer" />.</param>
      <exception cref="T:System.NotSupportedException">Always.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])">
      <summary>This method is not supported in this class. It may be implemented in a derived class.</summary>
      <param name="stream">The stream to read from.</param>
      <param name="includeComments">Determines whether comments are included.</param>
      <param name="inclusivePrefixes">The prefixes to be included.</param>
      <exception cref="T:System.NotSupportedException">Always.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetArrayLength(System.Int32@)">
      <summary>Not implemented in this class (it always returns false). May be overridden in derived classes.</summary>
      <returns>false, unless overridden in a derived class.</returns>
      <param name="count">Returns 0, unless overridden in a derived class.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetBase64ContentLength(System.Int32@)">
      <summary>Not implemented in this class (it always returns false). May be overridden in derived classes.</summary>
      <returns>false, unless overridden in a derived class.</returns>
      <param name="length">Returns 0, unless overridden in a derived class.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetLocalNameAsDictionaryString(System.Xml.XmlDictionaryString@)">
      <summary>Not implemented in this class (it always returns false). May be overridden in derived classes.</summary>
      <returns>false, unless overridden in a derived class.</returns>
      <param name="localName">Returns null, unless overridden in a derived class.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetNamespaceUriAsDictionaryString(System.Xml.XmlDictionaryString@)">
      <summary>Not implemented in this class (it always returns false). May be overridden in derived classes.</summary>
      <returns>false, unless overridden in a derived class.</returns>
      <param name="namespaceUri">Returns null, unless overridden in a derived class.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryReader.TryGetValueAsDictionaryString(System.Xml.XmlDictionaryString@)">
      <summary>Not implemented in this class (it always returns false). May be overridden in derived classes.</summary>
      <returns>false, unless overridden in a derived class.</returns>
      <param name="value">Returns null, unless overridden in a derived class.</param>
    </member>
    <member name="T:System.Xml.XmlDictionaryReaderQuotas">
      <summary>Contains quota values for <see cref="T:System.Xml.XmlDictionaryReader" />.</summary>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.Max">
      <summary>Gets an instance of this class with all properties set to maximum values.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryReaderQuotas" /> with properties set to <see cref="F:System.Int32.MaxValue" />.</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxArrayLength">
      <summary>Gets the maximum allowed array length.</summary>
      <returns>The maximum allowed array length. The default value is <see cref="F:System.Int32.MaxValue" />.</returns>
      <exception cref="T:System.InvalidOperationException">Trying to set the value, but quota values are read-only for this instance.</exception>
      <exception cref="T:System.ArgumentException">Trying to set the value to less than zero.</exception>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxBytesPerRead">
      <summary>Gets the maximum allowed bytes returned for each read.</summary>
      <returns>The maximum allowed bytes returned for each read. The default is 4096.</returns>
      <exception cref="T:System.InvalidOperationException">Trying to set the value, but quota values are read-only for this instance.</exception>
      <exception cref="T:System.ArgumentException">Trying to set the value to less than zero.</exception>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxDepth">
      <summary>Gets the maximum nested node depth.</summary>
      <returns>The maximum nested node depth. The default is 32;</returns>
      <exception cref="T:System.InvalidOperationException">Trying to set the value, but quota values are read-only for this instance.</exception>
      <exception cref="T:System.ArgumentException">Trying to set the value to less than zero.</exception>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxNameTableCharCount">
      <summary>Gets the maximum number of characters allowed in a table name.</summary>
      <returns>The maximum number of characters allowed in a table name. The default is 16384.</returns>
      <exception cref="T:System.InvalidOperationException">Trying to set the value, but quota values are read-only for this instance.</exception>
      <exception cref="T:System.ArgumentException">Trying to set the value to less than zero.</exception>
    </member>
    <member name="P:System.Xml.XmlDictionaryReaderQuotas.MaxStringContentLength">
      <summary>Gets the maximum string length returned by the reader.</summary>
      <returns>The maximum string length returned by the reader. The default is 8192.</returns>
      <exception cref="T:System.InvalidOperationException">Trying to set the value, but quota values are read-only for this instance.</exception>
      <exception cref="T:System.ArgumentException">Trying to set the value to less than zero.</exception>
    </member>
    <member name="T:System.Xml.XmlDictionaryString">
      <summary>Represents an entry stored in a <see cref="T:System.Xml.XmlDictionary" />.</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryString.#ctor(System.Xml.IXmlDictionary,System.String,System.Int32)">
      <summary>Creates an instance of the <see cref="T:System.Xml.XmlDictionaryString" /> class.</summary>
      <param name="dictionary">The <see cref="T:System.Xml.IXmlDictionary" /> that contains this instance.</param>
      <param name="value">The string that is the value of the dictionary entry.</param>
      <param name="key">The integer that is the key of the dictionary entry.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dictionary" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="key" /> is less than 0 or greater than <see cref="F:System.Int32.MaxValue" /> / 4.</exception>
    </member>
    <member name="P:System.Xml.XmlDictionaryString.Dictionary">
      <summary>Represents the <see cref="T:System.Xml.IXmlDictionary" /> passed to the constructor of this instance of <see cref="T:System.Xml.XmlDictionaryString" />.</summary>
      <returns>The <see cref="T:System.Xml.IXmlDictionary" /> for this dictionary entry.</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryString.Empty">
      <summary>Gets an <see cref="T:System.Xml.XmlDictionaryString" /> that represents the empty string.</summary>
      <returns>An <see cref="T:System.Xml.XmlDictionaryString" /> that represents the empty string.</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryString.Key">
      <summary>Gets the integer key for this <see cref="T:System.Xml.XmlDictionaryString" /> dictionary entry.</summary>
      <returns>The integer key for this dictionary entry.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryString.ToString">
      <summary>Returns a text representation for this instance of <see cref="T:System.Xml.XmlDictionaryString" />.</summary>
      <returns>The string value for this instance of the class.</returns>
    </member>
    <member name="P:System.Xml.XmlDictionaryString.Value">
      <summary>Gets the string value for this <see cref="T:System.Xml.XmlDictionaryString" /> dictionary entry.</summary>
      <returns>The string value for this dictionary entry.</returns>
    </member>
    <member name="T:System.Xml.XmlDictionaryWriter">
      <summary>An abstract class that Silverlight version 2 derives from to do serialization and deserialization.</summary>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.#ctor">
      <summary>Creates an instance of this class. Invoked only by its derived classes because this class is abstract.</summary>
    </member>
    <member name="P:System.Xml.XmlDictionaryWriter.CanCanonicalize">
      <summary>This property always returns false. Its derived classes can override to return true if they support canonicalization.</summary>
      <returns>false.</returns>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.CreateDictionaryWriter(System.Xml.XmlWriter)">
      <summary>Creates an instance of <see cref="T:System.Xml.XmlDictionaryWriter" /> from an existing <see cref="T:System.Xml.XmlWriter" />.</summary>
      <returns>An instance of <see cref="T:System.Xml.XmlDictionaryWriter" />.</returns>
      <param name="writer">An instance of <see cref="T:System.Xml.XmlWriter" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.EndCanonicalization">
      <summary>This method is not yet implemented. </summary>
      <exception cref="T:System.NotSupportedException">Method is not implemented yet.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.StartCanonicalization(System.IO.Stream,System.Boolean,System.String[])">
      <summary>This method is not yet implemented. Calling it throws a <see cref="T:System.NotSupportedException" />.</summary>
      <param name="stream">The stream to write to.</param>
      <param name="includeComments">Determines whether comments are included.</param>
      <param name="inclusivePrefixes">The prefixes to be included.</param>
      <exception cref="T:System.NotSupportedException">Method is not implemented yet.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Boolean[],System.Int32,System.Int32)">
      <summary>Writes values from a <see cref="T:System.Boolean" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the data.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of values to write from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.DateTime[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.DateTime" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Decimal[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Decimal" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Double[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Double" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Guid[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Guid" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int16[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Int16" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int32[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Int32" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Int64[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Int64" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.Single[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Single" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.String,System.String,System.TimeSpan[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.TimeSpan" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Boolean[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Boolean" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.DateTime[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.DateTime" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Decimal[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Decimal" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Double[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Double" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Guid[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Guid" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int16[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Int16" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int32[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Int32" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int64[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Int64" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Single[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.Single" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.TimeSpan[],System.Int32,System.Int32)">
      <summary>Writes nodes from a <see cref="T:System.TimeSpan" /> array.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="array">The array that contains the nodes.</param>
      <param name="offset">The starting index in the array.</param>
      <param name="count">The number of nodes to get from the array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is &lt; 0 or &gt; <paramref name="array" /> length.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is &lt; 0 or &gt; <paramref name="array" /> length minus <paramref name="offset" />.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteAttributeString(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
      <summary>Writes an attribute qualified name and value.</summary>
      <param name="prefix">The prefix of the attribute.</param>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceUri">The namespace URI of the attribute.</param>
      <param name="value">The attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteAttributeString(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
      <summary>Writes an attribute qualified name and value.</summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceUri">The namespace URI of the attribute.</param>
      <param name="value">The attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteElementString(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
      <summary>Writes an element with a text content.</summary>
      <param name="prefix">The prefix of the element.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="value">The element content.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteElementString(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.String)">
      <summary>Writes an element with a text content.</summary>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <param name="value">The element content.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteNode(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>Writes the current XML node from an <see cref="T:System.Xml.XmlDictionaryReader" />.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlDictionaryReader" />.</param>
      <param name="defattr">If true, copy the default attributes from the XmlReader; otherwise if true, use default attributes; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteNode(System.Xml.XmlReader,System.Boolean)">
      <summary>Writes the current XML node from an <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" />.</param>
      <param name="defattr">If true, copy the default attributes from the <see cref="T:System.Xml.XmlReader" />; otherwise, false. If true, use default attributes; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteQualifiedName(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Writes the namespace-qualified name. This method looks up the prefix that is in scope for the given namespace.</summary>
      <param name="localName">The local name of the qualified name.</param>
      <param name="namespaceUri">The namespace URI of the qualified name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="localName" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteStartAttribute(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Writes the start of an attribute with the specified prefix, local name, and namespace URI.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceUri">The namespace URI of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteStartAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Writes the start of an attribute with the specified local name and namespace URI.</summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceUri">The namespace URI of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteStartElement(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Writes the specified start element and associates it with the given namespace and prefix.</summary>
      <param name="prefix">The prefix of the element.</param>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteStartElement(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Writes the specified start element and associates it with the given namespace.</summary>
      <param name="localName">The local name of the element.</param>
      <param name="namespaceUri">The namespace URI of the element.</param>
      <exception cref="T:System.InvalidOperationException">The writer is closed. </exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteString(System.Xml.XmlDictionaryString)">
      <summary>Writes the given text content.</summary>
      <param name="value">The text to write.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteTextNode(System.Xml.XmlDictionaryReader,System.Boolean)">
      <summary>Writes the text node that an <see cref="T:System.Xml.XmlDictionaryReader" /> is currently positioned on.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlDictionaryReader" /> to get the text value from.</param>
      <param name="isAttribute">Specifies whether the reader is positioned on an attribute value or element content.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.Guid)">
      <summary>Writes a <see cref="T:System.Guid" /> value.</summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.TimeSpan)">
      <summary>Writes a <see cref="T:System.TimeSpan" /> value.</summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.UniqueId)">
      <summary>Writes a unique Id value.</summary>
      <param name="value">The unique Id value to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteValue(System.Xml.XmlDictionaryString)">
      <summary>Writes a <see cref="T:System.Xml.XmlDictionaryString" /> value.</summary>
      <param name="value">The <see cref="T:System.Xml.XmlDictionaryString" /> value.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteXmlAttribute(System.String,System.String)">
      <summary>Writes a standard XML attribute in the current node.</summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="value">The value of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteXmlAttribute(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString)">
      <summary>Writes an XML attribute in the current node.</summary>
      <param name="localName">The local name of the attribute.</param>
      <param name="value">The value of the attribute.</param>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.String)">
      <summary>Writes a namespace declaration attribute.</summary>
      <param name="prefix">The prefix that is bound to the given namespace.</param>
      <param name="namespaceUri">The namespace to which the prefix is bound.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceUri" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlDictionaryWriter.WriteXmlnsAttribute(System.String,System.Xml.XmlDictionaryString)">
      <summary>Writes a namespace declaration attribute.</summary>
      <param name="prefix">The prefix that is bound to the given namespace.</param>
      <param name="namespaceUri">The namespace to which the prefix is bound.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceUri" /> is null.</exception>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\2.0.31005.0\ReferenceAssemblies\System.ServiceModel.Web.Xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ServiceModel.Web</name>
  </assembly>
  <members>
    <member name="T:System.Runtime.Serialization.Json.DataContractJsonSerializer">
      <summary>Serializes objects to the JavaScript Object Notation (JSON) and deserializes JSON data to objects. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> class to serialize or deserialize an object of the specified type. </summary>
      <param name="type">The type of the instance that is serialized or deserialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Initializes a new instance of the <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> class to serialize or deserialize an object of a specified type with a collection of known types that may be present in the object graph. </summary>
      <param name="type">The type of the instance that is serialized or deserialized.</param>
      <param name="knownTypes">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Type" /> that contains the types that may be present in the object graph.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="P:System.Runtime.Serialization.Json.DataContractJsonSerializer.KnownTypes">
      <summary>Gets a collection of types that may be present in the object graph serialized using this instance of the <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" />.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> that contains the expected types passed in as known types to the <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> constructor.</returns>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.IO.Stream)">
      <summary>Reads a document stream in the JSON (JavaScript Object Notation) format and returns the deserialized object.</summary>
      <returns>The deserialized object.</returns>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to be read.</param>
    </member>
    <member name="M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.IO.Stream,System.Object)">
      <summary>Serializes a specified object to JavaScript Object Notation (JSON) data and writes the resulting JSON to a stream.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> that is written to.</param>
      <param name="graph">The object that contains the data to write to the stream.</param>
      <exception cref="T:System.Runtime.Serialization.InvalidDataContractException">The type being serialized does not conform to data contract rules. For example, the <see cref="T:System.Runtime.Serialization.DataContractAttribute" /> attribute has not been applied to the type.</exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">There is a problem with the instance being written.</exception>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\2.0.31005.0\ReferenceAssemblies\System.Windows.Browser.Xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Windows.Browser</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Browser.BrowserInformation">
      <summary>
                    Provides general information about the browser, such as name, version, and operating system.
                </summary>
    </member>
    <member name="P:System.Windows.Browser.BrowserInformation.BrowserVersion">
      <summary>
                    Gets the browser's version information.
                </summary>
      <returns>
                    The version of the browser.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.BrowserInformation.CookiesEnabled">
      <summary>
                    Gets a value that indicates whether the browser supports cookies.
                </summary>
      <returns>true if the browser supports cookies; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.BrowserInformation.Name">
      <summary>
                    Gets the browser's name.
                </summary>
      <returns>
                    The name of the browser.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.BrowserInformation.Platform">
      <summary>
                    Gets the name of the browser's operating system.
                </summary>
      <returns>
                    The name of the operating system the browser is running on.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.BrowserInformation.UserAgent">
      <summary>
                    Gets the browser's user agent string.
                </summary>
      <returns>
                    The user agent string that identifies the browser.
                </returns>
    </member>
    <member name="T:System.Windows.Browser.HtmlDocument">
      <summary>
                    Represents the HTML document in the browser.
                </summary>
    </member>
    <member name="P:System.Windows.Browser.HtmlDocument.Body">
      <summary>
                    Gets a reference to the BODY element of the HTML document.
                </summary>
      <returns>
                    The HTML document's BODY element.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlDocument.Cookies">
      <summary>
                    Gets or sets the browser's cookie string.
                </summary>
      <returns>
                    The cookie string that is stored by the browser. If the browser does not have a cookie string, the property returns an empty string.
                </returns>
    </member>
    <member name="M:System.Windows.Browser.HtmlDocument.CreateElement(System.String)">
      <summary>
                    Creates a browser element.
                </summary>
      <returns>
                    A reference to a browser element. 
                </returns>
      <param name="tagName">
                    The tag name of the browser element to create.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tagName" /> is an empty string.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tagName" /> is null.
                </exception>
    </member>
    <member name="P:System.Windows.Browser.HtmlDocument.DocumentElement">
      <summary>
                    Gets a reference to the browser's DOCUMENT element. 
                </summary>
      <returns>
                    The browser's DOCUMENT element.
                </returns>
    </member>
    <member name="E:System.Windows.Browser.HtmlDocument.DocumentReady">
      <summary>
                    Occurs when the browser page has completely loaded.
                </summary>
    </member>
    <member name="P:System.Windows.Browser.HtmlDocument.DocumentUri">
      <summary>
                    Gets a Uniform Resource Identifier (URI) object that represents the HTML document on which the Silverlight plug-in is hosted.
                </summary>
      <returns>
                    The URI of the current HTML document.
                </returns>
    </member>
    <member name="M:System.Windows.Browser.HtmlDocument.GetElementById(System.String)">
      <summary>
                    Gets a single browser element.
                </summary>
      <returns>
                    A reference to a browser element.
                </returns>
      <param name="id">
                    A string identifier for a named browser element.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="id" /> is an empty string.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="id" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Browser.HtmlDocument.GetElementsByTagName(System.String)">
      <summary>
                    Gets a collection of browser elements.
                </summary>
      <returns>
                    A collection of references to HTML elements that correspond to the requested tag name.
                </returns>
      <param name="tagName">
                    A browser element's tag name.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tagName" /> is an empty string.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="tagName" /> is null.
                </exception>
    </member>
    <member name="P:System.Windows.Browser.HtmlDocument.IsReady">
      <summary>
                    Gets or sets a value that indicates whether the browser has completely loaded the HTML page.
                </summary>
      <returns>true if the browser has completely loaded the HTML page that contains the Silverlight plug-in, the page has been fully parsed, and all Document Object Model (DOM) objects are available for programming; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlDocument.QueryString">
      <summary>
                    Gets a navigable, read-only collection of name/value pairs that represent the query string parameters on the current page's URL.
                </summary>
      <returns>
                    The query string parameters on the current page's URL.
                </returns>
    </member>
    <member name="M:System.Windows.Browser.HtmlDocument.Submit">
      <summary>
                    Posts user data from the FORM element in the browser's Document Object Model (DOM) to the server.
                </summary>
    </member>
    <member name="M:System.Windows.Browser.HtmlDocument.Submit(System.String)">
      <summary>
                    Posts user data from the specified FORM element to the server.
                </summary>
      <param name="formId">
                    The value of the <paramref name="id" /> attribute for an HTML FORM element.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="formId" /> is an empty string.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formId" /> is null.
                </exception>
    </member>
    <member name="T:System.Windows.Browser.HtmlElement">
      <summary>
                    Represents an HTML element in the Document Object Model (DOM) of a Web page.
                </summary>
    </member>
    <member name="M:System.Windows.Browser.HtmlElement.AppendChild(System.Windows.Browser.HtmlElement)">
      <summary>
                    Adds an element to the end of the child collection for the current HTML element.
                </summary>
      <param name="element">
                    The element to be added.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Browser.HtmlElement.AppendChild(System.Windows.Browser.HtmlElement,System.Windows.Browser.HtmlElement)">
      <summary>
                    Adds an element at a specified location in the child element collection for the current HTML element.
                </summary>
      <param name="element">
                    The element to be added.
                </param>
      <param name="referenceElement">
                    The location to insert the element. The element is added before <paramref name="referenceElement" />.
                </param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="referenceElement" /> is not in the child element collection of the current HTML element.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="element" /> is null.
                </exception>
    </member>
    <member name="P:System.Windows.Browser.HtmlElement.Children">
      <summary>
                    Gets a read-only collection of HTML elements that are immediate descendants of the current HTML element.
                </summary>
      <returns>
                    A collection of HTML elements. If the current HTML element has no children, the returned collection is empty.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlElement.CssClass">
      <summary>
                    Gets or sets the cascading style sheet (CSS) class string for the current HTML element.
                </summary>
      <returns>
                    A CSS class string if the element is associated with a CSS class; otherwise, an empty string.
                </returns>
    </member>
    <member name="M:System.Windows.Browser.HtmlElement.Focus">
      <summary>
                    Sets the browser focus to the current HTML element.
                </summary>
    </member>
    <member name="M:System.Windows.Browser.HtmlElement.GetAttribute(System.String)">
      <summary>
                    Gets the value of the specified attribute on the current HTML element.
                </summary>
      <returns>
                    An attribute on the current HTML element.
                </returns>
      <param name="name">
                    The name of an attribute.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is an empty string.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Browser.HtmlElement.GetStyleAttribute(System.String)">
      <summary>
                    Retrieves the specified style attribute for the current HTML element.
                </summary>
      <returns>
                    The style attribute for the current HTML element.
                </returns>
      <param name="name">
                    The name of the style attribute to retrieve.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is an empty string.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                </exception>
    </member>
    <member name="P:System.Windows.Browser.HtmlElement.Id">
      <summary>
                    Gets the identifier of the current HTML element.
                </summary>
      <returns>
                    An HTML element ID string if the current element has an identifier; otherwise, an empty string.
                </returns>
      <exception cref="T:System.ArgumentException">
                    The property is set to an empty string.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The property is set to null.
                </exception>
    </member>
    <member name="P:System.Windows.Browser.HtmlElement.Parent">
      <summary>
                    Gets a reference to the parent of the current HTML element.
                </summary>
      <returns>
                    An HTML element reference if the element has a parent; otherwise, null.
                </returns>
    </member>
    <member name="M:System.Windows.Browser.HtmlElement.RemoveAttribute(System.String)">
      <summary>
                    Removes an attribute from the current HTML element.
                </summary>
      <param name="name">
                    The name of the attribute to remove.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is an empty string.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Browser.HtmlElement.RemoveChild(System.Windows.Browser.HtmlElement)">
      <summary>
                    Removes the specified element from the child element collection of the current HTML element.
                </summary>
      <param name="element">
                    The element to remove. 
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="element" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Browser.HtmlElement.RemoveStyleAttribute(System.String)">
      <summary>
                    Removes a style attribute on the current HTML element.
                </summary>
      <param name="name">
                    The style attribute to be removed.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is an empty string.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Browser.HtmlElement.SetAttribute(System.String,System.String)">
      <summary>
                    Sets the value of an attribute on the current HTML element.
                </summary>
      <param name="name">
                    The attribute whose value will be set.
                </param>
      <param name="value">
                    The attribute's new value.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is an empty string.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Browser.HtmlElement.SetStyleAttribute(System.String,System.String)">
      <summary>
                    Sets the value of a style attribute on the current HTML element.
                </summary>
      <param name="name">
                    The style attribute whose value will be set.
                </param>
      <param name="value">
                    The style attribute's new value.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is an empty string.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                </exception>
    </member>
    <member name="P:System.Windows.Browser.HtmlElement.TagName">
      <summary>
                    Gets the HTML tag name of the current HTML element.
                </summary>
      <returns>
                    An HTML element tag name, such as div or span.
                </returns>
    </member>
    <member name="T:System.Windows.Browser.HtmlEventArgs">
      <summary>
                    Provides event details to event handlers.
                </summary>
    </member>
    <member name="P:System.Windows.Browser.HtmlEventArgs.AltKey">
      <summary>
                    Gets the state of the ALT key when the event was raised.
                </summary>
      <returns>true if the ALT key was pressed when the event was raised; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlEventArgs.CharacterCode">
      <summary>
                    Gets the integer Unicode value of a key that was pressed.
                </summary>
      <returns>
                    An integer Unicode value of the key that was pressed if the <see cref="P:System.Windows.Browser.HtmlEventArgs.EventType" /> property value is "keypress"; otherwise, 0 (zero).
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlEventArgs.ClientX">
      <summary>
                    Gets the x-coordinate mouse position in pixels relative to the client area of the window.
                </summary>
      <returns>
                    The x-coordinate mouse position in pixels if the Document Object Model (DOM) event includes position information; otherwise, 0 (zero).
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlEventArgs.ClientY">
      <summary>
                    Gets the y-coordinate mouse position in pixels relative to the client area of the window.
                </summary>
      <returns>
                    The y-coordinate mouse position in pixels if the Document Object Model (DOM) event includes position information; otherwise, 0 (zero).
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlEventArgs.CtrlKey">
      <summary>
                    Gets the state of the CTRL key when the event was raised.
                </summary>
      <returns>true if the CTRL key was pressed when the event was raised; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlEventArgs.EventObject">
      <summary>
                    Gets the underlying HTML event object.
                </summary>
      <returns>
                    An HTML event object.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlEventArgs.EventType">
      <summary>
                    Gets the name of the event raised by the browser.
                </summary>
      <returns>
                    An event name.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlEventArgs.KeyCode">
      <summary>
                    Gets the integer Unicode value of a key that is associated with a keyboard event other than "keypress".
                </summary>
      <returns>
                    The integer Unicode value of a key involved in a keyboard event, if the event is not "keypress"; otherwise, 0 (zero).
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlEventArgs.MouseButton">
      <summary>
                    Gets the mouse buttons that were clicked at the time the event was raised.
                </summary>
      <returns>
                    One of the enumeration values that indicates which mouse button was clicked.  
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlEventArgs.OffsetX">
      <summary>
                    Gets the x-coordinate mouse position in pixels relative to the HTML object that raised the event.
                </summary>
      <returns>
                    The x-coordinate mouse position in pixels if the Document Object Model (DOM) event includes position information; otherwise, 0 (zero).
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlEventArgs.OffsetY">
      <summary>
                    Gets the y-coordinate mouse position in pixels relative to the HTML object that raised the event.
                </summary>
      <returns>
                    The y-coordinate mouse position in pixels if the Document Object Model (DOM) event includes position information; otherwise, 0 (zero).
                </returns>
    </member>
    <member name="M:System.Windows.Browser.HtmlEventArgs.PreventDefault">
      <summary>
                    Specifies that the associated Document Object Model (DOM) element should not perform the default action for the current event.
                </summary>
    </member>
    <member name="P:System.Windows.Browser.HtmlEventArgs.ScreenX">
      <summary>
                    Gets the x-coordinate mouse position in pixels relative to the user's screen.
                </summary>
      <returns>
                    The x-coordinate mouse position in pixels if the Document Object Model (DOM) event includes position information; otherwise, 0 (zero).
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlEventArgs.ScreenY">
      <summary>
                    Gets the y-coordinate mouse position in pixels relative to the user's screen.
                </summary>
      <returns>
                    The y-coordinate mouse position in pixels if the Document Object Model (DOM) event includes position information; otherwise, 0 (zero).
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlEventArgs.ShiftKey">
      <summary>
                    Gets the state of the SHIFT key when the event was raised.
                </summary>
      <returns>true if the SHIFT key was pressed when the event was raised; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlEventArgs.Source">
      <summary>
                    Gets a reference to the Document Object Model (DOM) element or object that raised the event.
                </summary>
      <returns>
                    A reference to the DOM element or object that raised the event.
                </returns>
    </member>
    <member name="M:System.Windows.Browser.HtmlEventArgs.StopPropagation">
      <summary>
                    Specifies that the event should not bubble up the Document Object Model (DOM) hierarchy.
                </summary>
    </member>
    <member name="T:System.Windows.Browser.HtmlObject">
      <summary>
                    Provides methods for browser elements that are explicitly supplied by the Silverlight HTML Bridge feature. Because Document Object Model (DOM) objects are inherently scriptable, an <see cref="T:System.Windows.Browser.HtmlObject" /> is also a scriptable object.
                </summary>
    </member>
    <member name="M:System.Windows.Browser.HtmlObject.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Browser.HtmlObject" /> class.
                </summary>
    </member>
    <member name="M:System.Windows.Browser.HtmlObject.AttachEvent(System.String,System.EventHandler)">
      <summary>
                    Attaches the specified .NET Framework event handler (<see cref="T:System.EventHandler" />) to the specified event on the current Document Object Model (DOM) object. 
                </summary>
      <returns>true if the event was successfully attached; otherwise, false.
                </returns>
      <param name="eventName">
                    A named event on the DOM object.
                </param>
      <param name="handler">
                    The method that handles the event.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="eventName" /> is an empty string.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eventName" /> is null.
                
                    -or-
                <paramref name="handler" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Browser.HtmlObject.AttachEvent(System.String,System.EventHandler{System.Windows.Browser.HtmlEventArgs})">
      <summary>
                    Attaches the specified .NET Framework event handler (<see cref="T:System.EventHandler`1" />) to the specified event on the current Document Object Model (DOM) object.
                </summary>
      <returns>true if the event was successfully attached; otherwise, false.
                </returns>
      <param name="eventName">
                    A named event on the DOM object.
                </param>
      <param name="handler">
                    The method that handles the event.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="eventName" /> is an empty string.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eventName" /> is null.
                
                    -or-
                <paramref name="handler" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Browser.HtmlObject.ConvertTo(System.Type,System.Boolean)">
      <summary>
                    Converts the current object to a specified type. This method is not supported. 
                </summary>
      <returns>
                    None.
                </returns>
      <param name="targetType">
                    The conversion type.
                </param>
      <param name="allowSerialization">true to allow JavaScript Object Notation (JSON) serialization; otherwise, false.
                </param>
      <exception cref="T:System.ArgumentException">
                    In all cases.
                </exception>
    </member>
    <member name="M:System.Windows.Browser.HtmlObject.DetachEvent(System.String,System.EventHandler)">
      <summary>
                    Detaches the specified.NET Framework event handler (<see cref="T:System.EventHandler" />) from the specified event on the current Document Object Model (DOM) object.
                </summary>
      <param name="eventName">
                    A named event on the DOM object.
                </param>
      <param name="handler">
                    The method that handles the event.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="eventName" /> is an empty string.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eventName" /> is null.
                
                    -or-
                <paramref name="handler" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Browser.HtmlObject.DetachEvent(System.String,System.EventHandler{System.Windows.Browser.HtmlEventArgs})">
      <summary>
                    Detaches the specified .NET Framework event handler (<see cref="T:System.EventHandler`1" />) from the specified event on the current Document Object Model (DOM) object.
                </summary>
      <param name="eventName">
                    A named event on the DOM object.
                </param>
      <param name="handler">
                    The method that handles the event.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="eventName" /> is an empty string.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eventName" /> is null.
                
                    -or-
                <paramref name="handler" /> is null.
                </exception>
    </member>
    <member name="T:System.Windows.Browser.HtmlPage">
      <summary>
                    Permits access to, and manipulation of, the browser's Document Object Model (DOM).
                </summary>
    </member>
    <member name="P:System.Windows.Browser.HtmlPage.BrowserInformation">
      <summary>
                    Gets general information about the browser, such as name, version, and operating system.
                </summary>
      <returns>
                    An object that represents general information about the hosting browser.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlPage.Document">
      <summary>
                    Gets the browser's document object.
                </summary>
      <returns>
                    A reference to the browser's document object.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlPage.IsEnabled">
      <summary>
                    Gets a value that indicates whether the rest of the public surface area of the HTML Bridge feature is enabled.
                </summary>
      <returns>true if the HTML Bridge feature is enabled; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlPage.IsPopupWindowAllowed">
      <summary>
                    Indicates whether pop-up windows are allowed.
                </summary>
      <returns>true if pop-up windows are allowed; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlPage.Plugin">
      <summary>
                    Gets a reference to the Silverlight plug-in that is defined within an &lt;object&gt; or &lt;embed&gt; tag on the host HTML page.
                </summary>
      <returns>
                    The Silverlight plug-in in the Document Object Model (DOM). 
                </returns>
    </member>
    <member name="M:System.Windows.Browser.HtmlPage.PopupWindow(System.Uri,System.String,System.Windows.Browser.HtmlPopupWindowOptions)">
      <summary>
                    Opens a pop-up window.
                </summary>
      <returns>
                    A handle to the new window; or null (see the Remarks section).
                </returns>
      <param name="navigateToUri">
                    Specifies the Uniform Resource Identifier (URI) for the pop-up window.
                </param>
      <param name="target">
                    Specifies the window that will be opened. (For more information, see the Remarks section.)
                </param>
      <param name="options">
                    Specifies an <see cref="T:System.Windows.Browser.HtmlPopupWindowOptions" /> object that controls the pop-up window. (For more information, see the Remarks section.)
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="navigateToUri" /> specifies a protocol other than http or https, such as file://, or a random URI moniker.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigateToUri" /> is set to null.
                </exception>
    </member>
    <member name="M:System.Windows.Browser.HtmlPage.RegisterCreateableType(System.String,System.Type)">
      <summary>
                    Registers a managed type as available for creation from JavaScript code, through the Content.services.createObject and Content.services.createManagedObject helper methods.
                </summary>
      <param name="scriptAlias">
                    The name used to register the managed type.
                </param>
      <param name="type">
                    A managed type.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scriptAlias" /> or <paramref name="type" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not public.
                
                    -or-
                <paramref name="type" /> does not have a public, parameterless constructor.
                
                    -or-
                <paramref name="type" /> is a string, primitive or value type, managed delegate, or empty string.
                
                    -or-
                <paramref name="type" /> contains an embedded null character (\0).
                
                    -or-
                
                    An attempt is made to reregister <paramref name="type." /></exception>
    </member>
    <member name="M:System.Windows.Browser.HtmlPage.RegisterScriptableObject(System.String,System.Object)">
      <summary>
                    Registers a managed object for scriptable access by JavaScript code.
                </summary>
      <param name="scriptKey">
                    The name used to register the managed object.
                </param>
      <param name="instance">
                    A managed object.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scriptKey" /> or <paramref name="instance" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
                    An attempt is made to register a non-public type.
                
                    -or-
                <paramref name="scriptKey" /> contains an embedded null character (\0).
                
                    -or-
                <paramref name="instance" /> has no scriptable entry points.
                
                    -or-
                
                    A property, method, or event that is marked as scriptable uses one of the following reserved names: addEventListener, removeEventListener, constructor, or createManagedObject.
                </exception>
    </member>
    <member name="M:System.Windows.Browser.HtmlPage.UnregisterCreateableType(System.String)">
      <summary>
                    Explicitly unregisters a managed type that was previously registered by using the <see cref="M:System.Windows.Browser.HtmlPage.RegisterCreateableType(System.String,System.Type)" /> method.
                </summary>
      <param name="scriptAlias">
                    The name of a registered managed type.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="scriptAlias" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="scriptAlias" /> is an empty string.
                </exception>
    </member>
    <member name="P:System.Windows.Browser.HtmlPage.Window">
      <summary>
                    Gets the browser's window object.
                </summary>
      <returns>
                    A reference to the browser's window object.
                </returns>
    </member>
    <member name="T:System.Windows.Browser.HtmlPopupWindowOptions">
      <summary>
                    Provides options to control pop-up windows.
                </summary>
    </member>
    <member name="M:System.Windows.Browser.HtmlPopupWindowOptions.#ctor">
      <summary>
                    Creates a new instance of the <see cref="T:System.Windows.Browser.HtmlPopupWindowOptions" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Browser.HtmlPopupWindowOptions.Directories">
      <summary>
                    Determines whether the Internet Explorer links toolbar or Firefox personal/bookmarks toolbar is shown in the pop-up window.
                </summary>
      <returns>true if Internet Explorer links toolbar or Firefox personal/bookmarks toolbar is shown in the pop-up window; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlPopupWindowOptions.Height">
      <summary>
                    Sets the height of a pop-up window.
                </summary>
      <returns>
                    Height of the pop-up window, in pixels.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlPopupWindowOptions.Left">
      <summary>
                    Sets the position of the left edge of a pop-up window.
                </summary>
      <returns>
                    Horizontal distance from the left edge of the browser's document space to the left edge of the pop-up window.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlPopupWindowOptions.Location">
      <summary>
                    Sets the URL of a pop-up window.
                </summary>
      <returns>
                    The URL of the pop-up window.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlPopupWindowOptions.Menubar">
      <summary>
                    Controls the visibility of the menu bar in a pop-up window.
                </summary>
      <returns>true if the menu bar is visible in the pop-up window; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlPopupWindowOptions.Resizeable">
      <summary>
                    Determines whether a pop-up window can be resized.
                </summary>
      <returns>true if the pop-up window can be resized; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlPopupWindowOptions.Scrollbars">
      <summary>
                    Controls the visibility of scroll bars in a pop-up window.
                </summary>
      <returns>true if scroll bars may appear in the pop-up window; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlPopupWindowOptions.Status">
      <summary>
                    Controls the visibility of the status bar in a pop-up window.
                </summary>
      <returns>true if the status bar is visible in the pop-up window; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlPopupWindowOptions.Toolbar">
      <summary>
                    Controls the visibility of the toolbar in a pop-up window.
                </summary>
      <returns>true if the toolbar is visible in the pop-up window; otherwise, false.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlPopupWindowOptions.Top">
      <summary>
                    Sets the position of the top edge of a pop-up window.
                </summary>
      <returns>
                    Vertical distance from the top edge of the browser's document space to the top edge of the pop-up window.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.HtmlPopupWindowOptions.Width">
      <summary>
                    Sets the width of a pop-up window.
                </summary>
      <returns>
                    Width of the pop-up window, in pixels.
                </returns>
    </member>
    <member name="T:System.Windows.Browser.HtmlWindow">
      <summary>
                    Provides the managed representation of the JavaScript window object.
                </summary>
    </member>
    <member name="M:System.Windows.Browser.HtmlWindow.Alert(System.String)">
      <summary>
                    Displays a dialog box that contains an application-defined message.
                </summary>
      <param name="alertText">
                    The text to display.
                </param>
    </member>
    <member name="M:System.Windows.Browser.HtmlWindow.Confirm(System.String)">
      <summary>
                    Displays a confirmation dialog box that contains an optional message as well as OK and Cancel buttons.
                </summary>
      <returns>true if the user clicked the OK button; otherwise, false.
                </returns>
      <param name="confirmText">
                    The text to display.
                </param>
    </member>
    <member name="M:System.Windows.Browser.HtmlWindow.CreateInstance(System.String,System.Object[])">
      <summary>
                    Creates an instance of the specified JavaScript type.
                </summary>
      <returns>
                    A JavaScript type.
                </returns>
      <param name="typeName">
                    An HTML tag name.
                </param>
      <param name="args">
                    Creation parameters.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="typeName" /> is an empty string or cannot be resolved.
                
                    -or-
                
                    There is a type mismatch between one of the supplied creation parameters and the target parameter(s).
                </exception>
    </member>
    <member name="P:System.Windows.Browser.HtmlWindow.CurrentBookmark">
      <summary>
                    Gets or sets a string that represents the hash value of the current page's URL.
                </summary>
      <returns>
                    The hash value of the current page's URL. If the URL has no hash value, this property returns an empty string.
                </returns>
      <exception cref="T:System.ArgumentNullException">
                    The return value is null.
                </exception>
    </member>
    <member name="M:System.Windows.Browser.HtmlWindow.Eval(System.String)">
      <summary>
                    Evaluates a string that contains arbitrary JavaScript code.
                </summary>
      <returns>
                    The results of the JavaScript engine's evaluation of the string in the <paramref name="code" /> parameter.
                </returns>
      <param name="code">
                    JavaScript code.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="code" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="code" /> is an empty string.
                </exception>
    </member>
    <member name="M:System.Windows.Browser.HtmlWindow.Navigate(System.Uri)">
      <summary>
                    Opens the specified page in the current browser.
                </summary>
      <param name="navigateToUri">
                    The URL of the page to open.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigateToUri" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Browser.HtmlWindow.Navigate(System.Uri,System.String)">
      <summary>
                    Opens the specified page in the specified browser instance.
                </summary>
      <returns>
                    A reference to the underlying window object that represents a new browser instance. 
                </returns>
      <param name="navigateToUri">
                    The URL of the page to open.
                </param>
      <param name="target">
                    The name of the window or tab that <paramref name="navigateToUri" /> should be opened in.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigateToUri" /> is null.
                </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="target" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Browser.HtmlWindow.Navigate(System.Uri,System.String,System.String)">
      <summary>
                    Opens the specified page in the specified browser instance, with the indicated user interface features.
                </summary>
      <returns>
                    A reference to the underlying window object that represents the new browser.
                </returns>
      <param name="navigateToUri">
                    The URL of the page to open.
                </param>
      <param name="target">
                    The name of the window or tab that <paramref name="navigateToUri" /> should be opened in.
                </param>
      <param name="targetFeatures">
                    A comma-delimited list of browser-specific features.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="navigateToUri" /> is null.
                
                    -or-
                <paramref name="target" /> is null.
                
                    -or-
                <paramref name="targetFeatures" /> is null.
                </exception>
    </member>
    <member name="M:System.Windows.Browser.HtmlWindow.NavigateToBookmark(System.String)">
      <summary>
                    Changes the URL of the current page to a location that is specified by a named bookmark.
                </summary>
      <param name="bookmark">
                    The name of a bookmark.
                </param>
    </member>
    <member name="M:System.Windows.Browser.HtmlWindow.Prompt(System.String)">
      <summary>
                    Displays a dialog box that prompts the user with a message and an input field.
                </summary>
      <returns>
                    The user's input.
                </returns>
      <param name="promptText">
                    Message to display in the dialog box.
                </param>
    </member>
    <member name="T:System.Windows.Browser.HttpUtility">
      <summary>
                    Provides methods for encoding and decoding HTML and URL strings.
                </summary>
    </member>
    <member name="M:System.Windows.Browser.HttpUtility.HtmlDecode(System.String)">
      <summary>
                    Converts a string that has been HTML-encoded (for HTTP transmission) into a decoded string.
                </summary>
      <returns>
                    A decoded string.
                </returns>
      <param name="html">
                    An HTML-encoded string to decode.
                </param>
    </member>
    <member name="M:System.Windows.Browser.HttpUtility.HtmlEncode(System.String)">
      <summary>
                    Converts a text string into an HTML-encoded string.
                </summary>
      <returns>
                    An HTML-encoded string.
                </returns>
      <param name="html">
                    The text to HTML-encode.
                </param>
    </member>
    <member name="M:System.Windows.Browser.HttpUtility.UrlDecode(System.String)">
      <summary>
                    Converts a string that has been encoded for transmission in a URL into a decoded string.
                </summary>
      <returns>
                    A decoded string.
                </returns>
      <param name="url">
                    A URL-encoded string to decode.
                </param>
    </member>
    <member name="M:System.Windows.Browser.HttpUtility.UrlEncode(System.String)">
      <summary>
                    Converts a text string into a URL-encoded string.
                </summary>
      <returns>
                    A URL-encoded string.
                </returns>
      <param name="url">
                    The text to URL-encode.
                </param>
    </member>
    <member name="T:System.Windows.Browser.MouseButtons">
      <summary>
                    Specifies constants that indicate which mouse button was clicked.
                </summary>
    </member>
    <member name="F:System.Windows.Browser.MouseButtons.None">
      <summary>
                    No mouse button was clicked.
                </summary>
    </member>
    <member name="F:System.Windows.Browser.MouseButtons.Left">
      <summary>
                    The left mouse button was clicked.
                </summary>
    </member>
    <member name="F:System.Windows.Browser.MouseButtons.Right">
      <summary>
                    The right mouse button was clicked.
                </summary>
    </member>
    <member name="F:System.Windows.Browser.MouseButtons.Middle">
      <summary>
                    The wheel button was clicked.
                </summary>
    </member>
    <member name="T:System.Windows.Browser.ScriptableMemberAttribute">
      <summary>
                    Indicates that a specific property, method, or event is accessible to JavaScript callers.
                </summary>
    </member>
    <member name="M:System.Windows.Browser.ScriptableMemberAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Browser.ScriptableMemberAttribute" /> class.
                </summary>
    </member>
    <member name="P:System.Windows.Browser.ScriptableMemberAttribute.EnableCreateableTypes">
      <summary>
                    Controls the generation of Silverlight plug-in helper methods that can be used to create wrappers around managed objects.
                </summary>
      <returns>true if the HTML bridge feature should automatically generate helper methods in the scope of the registered scriptable type; otherwise, false. The default is true.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.ScriptableMemberAttribute.ScriptAlias">
      <summary>
                    Gets or sets the name of a property, method, or event that is exposed to JavaScript code. By default, the script alias is the same as the name of the managed property, method, or event.
                </summary>
      <returns>
                    The name of a property, method, or event.
                </returns>
      <exception cref="T:System.ArgumentException">
                    The alias is set to an empty string.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The alias is set to null.
                </exception>
    </member>
    <member name="T:System.Windows.Browser.ScriptableTypeAttribute">
      <summary>
                    Indicates that all public properties, methods, and events on a managed type are available to JavaScript code when they are registered by using the <see cref="M:System.Windows.Browser.HtmlPage.RegisterCreateableType(System.String,System.Type)" /> method.
                </summary>
    </member>
    <member name="M:System.Windows.Browser.ScriptableTypeAttribute.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.Windows.Browser.ScriptableTypeAttribute" /> class.
                </summary>
    </member>
    <member name="T:System.Windows.Browser.ScriptEventHandler">
      <summary>
                    Gets a reference to the JavaScript object that raised the event.
                </summary>
      <param name="sender">
                    A reference to the JavaScript object that raised the event.
                </param>
      <param name="args">
                    A reference to the complex type that is passed as an event argument.
                </param>
    </member>
    <member name="T:System.Windows.Browser.ScriptObject">
      <summary>
                    Defines the core behavior for the <see cref="T:System.Windows.Browser.HtmlObject" /> class, and provides a base class for browser Document Object Model (DOM) access types. 
                </summary>
    </member>
    <member name="M:System.Windows.Browser.ScriptObject.CheckAccess">
      <summary>
                    Determines whether the current thread is the browser's UI thread.
                </summary>
      <returns>true if the current thread is the browser's UI thread; false if it is a background thread.
                </returns>
    </member>
    <member name="M:System.Windows.Browser.ScriptObject.ConvertTo``1">
      <summary>
                    Converts the current scriptable object to a specified type. 
                </summary>
      <returns>
                    An object of type <paramref name="T" />.
                </returns>
      <typeparam name="T">
                    The type to convert the current scriptable object to.
                </typeparam>
      <exception cref="T:System.ArgumentException">
                    The conversion failed or is not supported.
                </exception>
    </member>
    <member name="M:System.Windows.Browser.ScriptObject.ConvertTo(System.Type,System.Boolean)">
      <summary>
                    Converts the current scriptable object to a specified type, with serialization support. 
                </summary>
      <returns>
                    An object of type <paramref name="targetType" />.
                </returns>
      <param name="targetType">
                    The type to convert the current scriptable object to.
                </param>
      <param name="allowSerialization">
                    A flag which enables the current scriptable object to be serialized.
                </param>
      <exception cref="T:System.ArgumentException">
                    The conversion failed or is not supported.
                </exception>
    </member>
    <member name="P:System.Windows.Browser.ScriptObject.Dispatcher">
      <summary>
                    Gets an instance of the dispatcher. 
                </summary>
    </member>
    <member name="M:System.Windows.Browser.ScriptObject.Finalize">
      <summary>
                    Frees resources and performs other cleanup operations before the scriptable object is reclaimed by garbage collection.
                </summary>
    </member>
    <member name="M:System.Windows.Browser.ScriptObject.GetProperty(System.Int32)">
      <summary>
                    Gets the value of a property that is identified by ordinal number on the current scriptable object.
                </summary>
      <returns>
                    A null reference (Nothing in Visual Basic) if the property does not exist or if the underlying <see cref="T:System.Windows.Browser.ScriptObject" /> is a managed type.
                </returns>
      <param name="index">
                    The ordinal number of the property.
                </param>
    </member>
    <member name="M:System.Windows.Browser.ScriptObject.GetProperty(System.String)">
      <summary>
                    Gets the value of a property that is identified by name on the current scriptable object.
                </summary>
      <returns>
                    A null reference (Nothing in Visual Basic) if the property does not exist or if the underlying <see cref="T:System.Windows.Browser.ScriptObject" /> is a managed type.
                </returns>
      <param name="name">
                    The name of the property.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is an empty string.
                
                    -or-
                <paramref name="name" /> contains an embedded null character (\0).
                </exception>
    </member>
    <member name="M:System.Windows.Browser.ScriptObject.Initialize(System.IntPtr,System.IntPtr,System.Boolean,System.Boolean)">
      <summary>
                    Initializes a scriptable object.
                </summary>
      <param name="handle">
                    The handle to the object to initialize.
                </param>
      <param name="identity">
                    The identity of the object.
                </param>
      <param name="addReference">true to specify that the HTML Bridge should assign a reference count to this object; otherwise, false.
                </param>
      <param name="releaseReferenceOnDispose">true to release the reference on dispose; otherwise, false.
                </param>
    </member>
    <member name="M:System.Windows.Browser.ScriptObject.Invoke(System.String,System.Object[])">
      <summary>
                    Invokes a method on the current scriptable object, and optionally passes in one or more method parameters.
                </summary>
      <returns>
                    An object that represents the return value from the underlying JavaScript method.
                </returns>
      <param name="name">
                    The method to invoke.
                </param>
      <param name="args">
                    Parameters to be passed to the method.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is an empty string.
                
                    -or-
                <paramref name="name" /> contains an embedded null character (\0).
                
                    -or-
                
                    The method does not exist or is not scriptable.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The underlying method invocation results in an error. The .NET Framework attempts to return the error text that is associated with the error.
                </exception>
    </member>
    <member name="M:System.Windows.Browser.ScriptObject.InvokeSelf(System.Object[])">
      <summary>
                    Invokes the current <see cref="T:System.Windows.Browser.ScriptObject" /> and assumes that it represents a JavaScript method.
                </summary>
      <returns>
                    An object that represents the return value from the underlying JavaScript method.
                </returns>
      <param name="args">
                    Parameters to be passed to the underlying JavaScript method.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is an empty string.
                
                    -or-
                <paramref name="name" /> contains an embedded null character (\0).
                
                    -or-
                
                    The method does not exist or is not scriptable.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The current <see cref="T:System.Windows.Browser.ScriptObject" /> is not a method.
                
                    -or-
                
                    The underlying method invocation results in an error.
                </exception>
    </member>
    <member name="P:System.Windows.Browser.ScriptObject.ManagedObject">
      <summary>
                    Gets the underlying managed object reference of the <see cref="T:System.Windows.Browser.ScriptObject" />.
                </summary>
      <returns>
                    A managed object reference if the current <see cref="T:System.Windows.Browser.ScriptObject" /> wraps a managed type; otherwise, null.
                </returns>
    </member>
    <member name="M:System.Windows.Browser.ScriptObject.SetProperty(System.Int32,System.Object)">
      <summary>
                    Sets the value of a property that is identified by ordinal number on the current scriptable object.
                </summary>
      <param name="index">
                    The ordinal number of the property.
                </param>
      <param name="value">
                    The value to set the property to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="index" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="index" /> identifies an empty string.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    A type mismatch exists between the supplied type and the target property.
                
                    -or-
                
                    The property is not settable.
                
                    -or-
                
                    All other failures.
                </exception>
    </member>
    <member name="M:System.Windows.Browser.ScriptObject.SetProperty(System.String,System.Object)">
      <summary>
                    Sets a property that is identified by name on the current scriptable object.
                </summary>
      <param name="name">
                    The name of the property.
                </param>
      <param name="value">
                    The value to set the property to.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.
                </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> is an empty string.
                
                    -or-
                <paramref name="name" /> contains an embedded null character (\0).
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    A type mismatch exists between the supplied type and the target property.
                
                    -or-
                
                    The property is not settable.
                
                    -or-
                
                    All other failures.
                </exception>
    </member>
    <member name="T:System.Windows.Browser.ScriptObjectCollection">
      <summary>
                    Provides a thread-safe wrapper for obtaining and iterating Document Object Model (DOM) collections.
                </summary>
    </member>
    <member name="P:System.Windows.Browser.ScriptObjectCollection.Count">
      <summary>
                    Gets the number of items in the collection.
                </summary>
      <returns>
                    A count of items in the collection.
                </returns>
    </member>
    <member name="P:System.Windows.Browser.ScriptObjectCollection.Item(System.Int32)">
      <summary>
                    Gets an item from the collection at the specified index.
                </summary>
      <returns>
                    A reference to an HTML element.
                </returns>
      <param name="index">
                    The zero-based index of the item to be retrieved.
                </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is invalid.
                </exception>
    </member>
    <member name="M:System.Windows.Browser.ScriptObjectCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>
                    For a description of this member, see <see cref="T:System.Collections.Generic.IEnumerable`1" />.
                </summary>
      <returns>
                    An enumerator that iterates over a collection of a specified type.
                </returns>
    </member>
    <member name="M:System.Windows.Browser.ScriptObjectCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
                    For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.
                </summary>
      <returns>
                    An enumerator that iterates through a collection.
                </returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\2.0.31005.0\ReferenceAssemblies\system.core.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Core</name>
  </assembly>
  <members>
    <member name="T:System.Action">
      <summary>
                    Encapsulates a method that takes no parameters and does not return a value.
                </summary>
    </member>
    <member name="T:System.Action`2">
      <summary>
                    Encapsulates a method that has two parameters and does not return a value.
                </summary>
      <param name="arg1">
                    The first parameter of the method that this delegate encapsulates.
                </param>
      <param name="arg2">
                    The second parameter of the method that this delegate encapsulates.
                </param>
      <typeparam name="T1">
                    The type of the first parameter of the method that this delegate encapsulates.
                </typeparam>
      <typeparam name="T2">
                    The type of the second parameter of the method that this delegate encapsulates.
                </typeparam>
    </member>
    <member name="T:System.Action`3">
      <summary>
                    Encapsulates a method that takes three parameters and does not return a value.
                </summary>
      <param name="arg1">
                    The first parameter of the method that this delegate encapsulates.
                </param>
      <param name="arg2">
                    The second parameter of the method that this delegate encapsulates.
                </param>
      <param name="arg3">
                    The third parameter of the method that this delegate encapsulates.
                </param>
      <typeparam name="T1">
                    The type of the first parameter of the method that this delegate encapsulates.
                </typeparam>
      <typeparam name="T2">
                    The type of the second parameter of the method that this delegate encapsulates.
                </typeparam>
      <typeparam name="T3">
                    The type of the third parameter of the method that this delegate encapsulates.
                </typeparam>
    </member>
    <member name="T:System.Action`4">
      <summary>
                    Encapsulates a method that has four parameters and does not return a value.
                </summary>
      <param name="arg1">
                    The first parameter of the method that this delegate encapsulates.
                </param>
      <param name="arg2">
                    The second parameter of the method that this delegate encapsulates.
                </param>
      <param name="arg3">
                    The third parameter of the method that this delegate encapsulates.
                </param>
      <param name="arg4">
                    The fourth parameter of the method that this delegate encapsulates.
                </param>
      <typeparam name="T1">
                    The type of the first parameter of the method that this delegate encapsulates.
                </typeparam>
      <typeparam name="T2">
                    The type of the second parameter of the method that this delegate encapsulates.
                </typeparam>
      <typeparam name="T3">
                    The type of the third parameter of the method that this delegate encapsulates.
                </typeparam>
      <typeparam name="T4">
                    The type of the fourth parameter of the method that this delegate encapsulates.
                </typeparam>
    </member>
    <member name="T:System.Func`1">
      <summary>
                    Encapsulates a method that has no parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.
                </summary>
      <returns>
                    The return value of the method that this delegate encapsulates.
                </returns>
      <typeparam name="TResult">
                    The type of the return value of the method that this delegate encapsulates.
                </typeparam>
    </member>
    <member name="T:System.Func`2">
      <summary>
                    Encapsulates a method that has one parameter and returns a value of the type specified by the <paramref name="TResult" /> parameter.
                </summary>
      <returns>
                    The return value of the method that this delegate encapsulates.
                </returns>
      <param name="arg">
                    The parameter of the method that this delegate encapsulates.
                </param>
      <typeparam name="T">
                    The type of the parameter of the method that this delegate encapsulates.
                </typeparam>
      <typeparam name="TResult">
                    The type of the return value of the method that this delegate encapsulates.
                </typeparam>
    </member>
    <member name="T:System.Func`3">
      <summary>
                    Encapsulates a method that has two parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.
                </summary>
      <returns>
                    The return value of the method that this delegate encapsulates.
                </returns>
      <param name="arg1">
                    The first parameter of the method that this delegate encapsulates.
                </param>
      <param name="arg2">
                    The second parameter of the method that this delegate encapsulates.
                </param>
      <typeparam name="T1">
                    The type of the first parameter of the method that this delegate encapsulates.
                </typeparam>
      <typeparam name="T2">
                    The type of the second parameter of the method that this delegate encapsulates.
                </typeparam>
      <typeparam name="TResult">
                    The type of the return value of the method that this delegate encapsulates.
                </typeparam>
    </member>
    <member name="T:System.Func`4">
      <summary>
                    Encapsulates a method that has three parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.
                </summary>
      <returns>
                    The return value of the method that this delegate encapsulates.
                </returns>
      <param name="arg1">
                    The first parameter of the method that this delegate encapsulates.
                </param>
      <param name="arg2">
                    The second parameter of the method that this delegate encapsulates.
                </param>
      <param name="arg3">
                    The third parameter of the method that this delegate encapsulates.
                </param>
      <typeparam name="T1">
                    The type of the first parameter of the method that this delegate encapsulates.
                </typeparam>
      <typeparam name="T2">
                    The type of the second parameter of the method that this delegate encapsulates.
                </typeparam>
      <typeparam name="T3">
                    The type of the third parameter of the method that this delegate encapsulates.
                </typeparam>
      <typeparam name="TResult">
                    The type of the return value of the method that this delegate encapsulates.
                </typeparam>
    </member>
    <member name="T:System.Func`5">
      <summary>
                    Encapsulates a method that has four parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.
                </summary>
      <returns>
                    The return value of the method that this delegate encapsulates.
                </returns>
      <param name="arg1">
                    The first parameter of the method that this delegate encapsulates.
                </param>
      <param name="arg2">
                    The second parameter of the method that this delegate encapsulates.
                </param>
      <param name="arg3">
                    The third parameter of the method that this delegate encapsulates.
                </param>
      <param name="arg4">
                    The fourth parameter of the method that this delegate encapsulates.
                </param>
      <typeparam name="T1">
                    The type of the first parameter of the method that this delegate encapsulates.
                </typeparam>
      <typeparam name="T2">
                    The type of the second parameter of the method that this delegate encapsulates.
                </typeparam>
      <typeparam name="T3">
                    The type of the third parameter of the method that this delegate encapsulates.
                </typeparam>
      <typeparam name="T4">
                    The type of the fourth parameter of the method that this delegate encapsulates.
                </typeparam>
      <typeparam name="TResult">
                    The type of the return value of the method that this delegate encapsulates.
                </typeparam>
    </member>
    <member name="T:System.InvalidTimeZoneException">
      <summary>
                    The exception that is thrown when time zone information is invalid.
                </summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor">
      <summary>
                    Initializes a new instance of the <see cref="T:System.InvalidTimeZoneException" /> class with a system-supplied message.
                </summary>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.InvalidTimeZoneException" /> class with the specified message string.
                </summary>
      <param name="message">
                    A string that describes the exception.
                </param>
    </member>
    <member name="M:System.InvalidTimeZoneException.#ctor(System.String,System.Exception)">
      <summary>
                    Initializes a new instance of the <see cref="T:System.InvalidTimeZoneException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.
                </summary>
      <param name="message">
                    The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. 
                </param>
      <param name="innerException">
                    The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. 
                </param>
    </member>
    <member name="T:System.TimeZoneInfo">
      <summary>
                    Represents a time zone.
                </summary>
    </member>
    <member name="P:System.TimeZoneInfo.BaseUtcOffset">
      <summary>
                    Gets the time difference between the current time zone's standard time and Coordinated Universal Time (UTC).
                </summary>
      <returns>
                    A <see cref="T:System.TimeSpan" /> object that indicates the time difference between the current time zone's standard time and Coordinated Universal Time (UTC).
                </returns>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)">
      <summary>
                    Converts a time to the time in a particular time zone.
                </summary>
      <returns>
                    A <see cref="T:System.DateTime" /> value that represents the date and time in the destination time zone.
                </returns>
      <param name="dateTime">
                    The date and time to convert.   
                </param>
      <param name="destinationTimeZone">
                    The time zone to convert <paramref name="dateTime" /> to. It must be either <see cref="P:System.TimeZoneInfo.Local" /> or <see cref="P:System.TimeZoneInfo.Utc" />.
                </param>
      <exception cref="T:System.ArgumentException">
                    The value of the <paramref name="dateTime" /> parameter represents an invalid time.
                </exception>
      <exception cref="T:System.ArgumentNullException">
                    The value of the <paramref name="destinationTimeZone" /> parameter is null.
                </exception>
    </member>
    <member name="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)">
      <summary>
                    Converts a time to the time in a particular time zone.
                </summary>
      <returns>
                    A <see cref="T:System.DateTimeOffset" /> value that represents the date and time in the destination time zone.
                </returns>
      <param name="dateTimeOffset">
                    The date and time to convert.   
                </param>
      <param name="destinationTimeZone">
                    The time zone to convert <paramref name="dateTime" /> to. It must be either <see cref="P:System.TimeZoneInfo.Local" /> or <see cref="P:System.TimeZoneInfo.Utc" />.
                </param>
      <exception cref="T:System.ArgumentNullException">
                    The value of the <paramref name="destinationTimeZone" /> parameter is null.
                </exception>
    </member>
    <member name="P:System.TimeZoneInfo.DaylightName">
      <summary>
                    Gets the localized display name for the current time zone's daylight saving time.
                </summary>
      <returns>
                    The display name for the time zone's localized daylight saving time.
                </returns>
    </member>
    <member name="P:System.TimeZoneInfo.DisplayName">
      <summary>
                    Gets the localized general display name that represents the time zone.
                </summary>
      <returns>
                    The time zone's localized general display name.
                </returns>
    </member>
    <member name="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)">
      <summary>
                    Determines whether the current <see cref="T:System.TimeZoneInfo" /> object and another <see cref="T:System.TimeZoneInfo" /> object are equal.
                </summary>
      <returns>true if the two <see cref="T:System.TimeZoneInfo" /> objects are equal; otherwise, false.
                </returns>
      <param name="other">
                    A second <see cref="T:System.TimeZoneInfo" /> object to compare with the current <see cref="T:System.TimeZoneInfo" /> object.  
                </param>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)">
      <summary>
                    Returns information about the possible dates and times that an ambiguous date and time can be mapped to.
                </summary>
      <returns>
                    An array of <see cref="T:System.TimeSpan" /> objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.
                </returns>
      <param name="dateTime">
                    A date and time.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> is not an ambiguous time.
                </exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)">
      <summary>
                    Returns information about the possible dates and times that an ambiguous date and time can be mapped to.
                </summary>
      <returns>
                    An array of <see cref="T:System.TimeSpan" /> objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.
                </returns>
      <param name="dateTimeOffset">
                    A date and time.
                </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dateTime" /> is not an ambiguous time.
                </exception>
    </member>
    <member name="M:System.TimeZoneInfo.GetHashCode">
      <summary>
                    Serves as a hash function for hashing algorithms and data structures such as hash tables.
                </summary>
      <returns>
                    A 32-bit signed integer that serves as the hash code for this <see cref="T:System.TimeZoneInfo" /> object.
                </returns>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)">
      <summary>
                    Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.
                </summary>
      <returns>
                    A <see cref="T:System.TimeSpan" /> object that indicates the time difference between the two time zones.
                </returns>
      <param name="dateTime">
                    The date and time to determine the offset for.   
                </param>
    </member>
    <member name="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)">
      <summary>
                    Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.
                </summary>
      <returns>
                    A <see cref="T:System.TimeSpan" /> object that indicates the time difference between Coordinated Universal Time (UTC) and the current time zone.
                </returns>
      <param name="dateTimeOffset">
                    The date and time to determine the offset for.
                </param>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)">
      <summary>
                    Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.
                </summary>
      <returns>true if the <paramref name="dateTime" /> parameter is ambiguous; otherwise, false.
                </returns>
      <param name="dateTime">
                    A date and time value.   
                </param>
      <exception cref="T:System.ArgumentException">
                    The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> value is <see cref="F:System.DateTimeKind.Local" /> and <paramref name="dateTime" /> is an invalid time.
                </exception>
    </member>
    <member name="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)">
      <summary>
                    Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.
                </summary>
      <returns>true if the <paramref name="dateTimeOffset" /> parameter is ambiguous in the current time zone; otherwise, false.
                </returns>
      <param name="dateTimeOffset">
                    A date and time.
                </param>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)">
      <summary>
                    Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current <see cref="T:System.TimeZoneInfo" /> object.
                </summary>
      <returns>true if the <paramref name="dateTime" /> parameter is a daylight saving time; otherwise, false.
                </returns>
      <param name="dateTime">
                    A date and time value.   
                </param>
      <exception cref="T:System.ArgumentException">
                    The <see cref="P:System.DateTime.Kind" /> property of the <paramref name="dateTime" /> value is <see cref="F:System.DateTimeKind.Local" /> and <paramref name="dateTime" /> is an invalid time.
                </exception>
    </member>
    <member name="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)">
      <summary>
                    Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current <see cref="T:System.TimeZoneInfo" /> object.
                </summary>
      <returns>true if the <paramref name="dateTimeOffset" /> parameter is a daylight saving time; otherwise, false.
                </returns>
      <param name="dateTimeOffset">
                    A date and time value.
                </param>
    </member>
    <member name="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)">
      <summary>
                    Indicates whether a particular date and time is invalid.
                </summary>
      <returns>true if <paramref name="dateTime" /> is invalid; otherwise, false.
                </returns>
      <param name="dateTime">
                    A date and time value.   
                </param>
    </member>
    <member name="P:System.TimeZoneInfo.Local">
      <summary>
                    Gets a <see cref="T:System.TimeZoneInfo" /> object that represents the local time zone.
                </summary>
      <returns>
                    A <see cref="T:System.TimeZoneInfo" /> object that represents the local time zone.
                </returns>
    </member>
    <member name="P:System.TimeZoneInfo.StandardName">
      <summary>
                    Gets the localized display name for the time zone's standard time.
                </summary>
      <returns>
                    The localized display name of the time zone's standard time.
                </returns>
    </member>
    <member name="P:System.TimeZoneInfo.SupportsDaylightSavingTime">
      <summary>
                    Gets a value indicating whether the time zone has any daylight saving time rules.
                </summary>
      <returns>true if the time zone supports daylight saving time; otherwise, false.
                </returns>
    </member>
    <member name="M:System.TimeZoneInfo.ToString">
      <summary>
                    Returns the current <see cref="T:System.TimeZoneInfo" /> object's display name.
                </summary>
      <returns>
                    The value of the <see cref="P:System.TimeZoneInfo.DisplayName" /> property of the current <see cref="T:System.TimeZoneInfo" /> object.
                </returns>
    </member>
    <member name="P:System.TimeZoneInfo.Utc">
      <summary>
                    Gets a <see cref="T:System.TimeZoneInfo" /> object that represents the Coordinated Universal Time (UTC) zone.
                </summary>
      <returns>
                    A <see cref="T:System.TimeZoneInfo" /> object that represents the Coordinated Universal Time (UTC) zone.
                </returns>
    </member>
    <member name="T:System.Linq.Enumerable">
      <summary>
                    Provides a set of static (Shared in Visual Basic) methods for querying objects that implement <see cref="T:System.Collections.Generic.IEnumerable`1" />.
                </summary>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>
                    Applies an accumulator function over a sequence.
                </summary>
      <returns>
                    The final accumulator value.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.
                </param>
      <param name="func">
                    An accumulator function to be invoked on each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>
                    Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.
                </summary>
      <returns>
                    The final accumulator value.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.
                </param>
      <param name="seed">
                    The initial accumulator value.
                </param>
      <param name="func">
                    An accumulator function to be invoked on each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TAccumulate">
                    The type of the accumulator value.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>
                    Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.
                </summary>
      <returns>
                    The transformed final accumulator value.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.
                </param>
      <param name="seed">
                    The initial accumulator value.
                </param>
      <param name="func">
                    An accumulator function to be invoked on each element.
                </param>
      <param name="resultSelector">
                    A function to transform the final accumulator value into the result value.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TAccumulate">
                    The type of the accumulator value.
                </typeparam>
      <typeparam name="TResult">
                    The type of the resulting value.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> or <paramref name="resultSelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
                    Determines whether all elements of a sequence satisfy a condition.
                </summary>
      <returns>true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to apply the predicate to.
                </param>
      <param name="predicate">
                    A function to test each element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Determines whether a sequence contains any elements.
                </summary>
      <returns>true if the source sequence contains any elements; otherwise, false.
                </returns>
      <param name="source">
                    The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to check for emptiness.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
                    Determines whether any element of a sequence satisfies a condition.
                </summary>
      <returns>true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to apply the predicate to.
                </param>
      <param name="predicate">
                    A function to test each element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Returns the input typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.
                </summary>
      <returns>
                    The input sequence typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.
                </returns>
      <param name="source">
                    The sequence to type as <see cref="T:System.Collections.Generic.IEnumerable`1" />.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>
                    Computes the average of a sequence of <see cref="T:System.Decimal" /> values.
                </summary>
      <returns>
                    The average of the sequence of values.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
      <exception cref="T:System.OverflowException">
                    The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>
                    Computes the average of a sequence of <see cref="T:System.Double" /> values.
                </summary>
      <returns>
                    The average of the sequence of values.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Double" /> values to calculate the average of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>
                    Computes the average of a sequence of <see cref="T:System.Int32" /> values.
                </summary>
      <returns>
                    The average of the sequence of values.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Int32" /> values to calculate the average of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
      <exception cref="T:System.OverflowException">
                    The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>
                    Computes the average of a sequence of <see cref="T:System.Int64" /> values.
                </summary>
      <returns>
                    The average of the sequence of values.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Int64" /> values to calculate the average of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
      <exception cref="T:System.OverflowException">
                    The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>
                    Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.
                </summary>
      <returns>
                    The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.OverflowException">
                    The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>
                    Computes the average of a sequence of nullable <see cref="T:System.Double" /> values.
                </summary>
      <returns>
                    The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>
                    Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.
                </summary>
      <returns>
                    The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Int32" />values to calculate the average of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.OverflowException">
                    The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>
                    Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.
                </summary>
      <returns>
                    The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.OverflowException">
                    The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>
                    Computes the average of a sequence of nullable <see cref="T:System.Single" /> values.
                </summary>
      <returns>
                    The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
                </returns>
      <param name="source">
                    A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>
                    Computes the average of a sequence of <see cref="T:System.Single" /> values.
                </summary>
      <returns>
                    The average of the sequence of values.
                </returns>
      <param name="source">
                    A sequence of <see cref="T:System.Single" /> values to calculate the average of.
                </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>
                    Computes the average of a sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.
                </summary>
      <returns>
                    The average of the sequence of values.
                </returns>
      <param name="source">
                    A sequence of values that are used to calculate an average.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
      <exception cref="T:System.OverflowException">
                    The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>
                    Computes the average of a sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.
                </summary>
      <returns>
                    The average of the sequence of values.
                </returns>
      <param name="source">
                    A sequence of values to calculate the average of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>
                    Computes the average of a sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.
                </summary>
      <returns>
                    The average of the sequence of values.
                </returns>
      <param name="source">
                    A sequence of values to calculate the average of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
      <exception cref="T:System.OverflowException">
                    The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>
                    Computes the average of a sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.
                </summary>
      <returns>
                    The average of the sequence of values.
                </returns>
      <param name="source">
                    A sequence of values to calculate the average of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of source.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
      <exception cref="T:System.OverflowException">
                    The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>
                    Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.
                </summary>
      <returns>
                    The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
                </returns>
      <param name="source">
                    A sequence of values to calculate the average of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
      <exception cref="T:System.OverflowException">
                    The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>
                    Computes the average of a sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.
                </summary>
      <returns>
                    The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
                </returns>
      <param name="source">
                    A sequence of values to calculate the average of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>
                    Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.
                </summary>
      <returns>
                    The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
                </returns>
      <param name="source">
                    A sequence of values to calculate the average of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
      <exception cref="T:System.OverflowException">
                    The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>
                    Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.
                </summary>
      <returns>
                    The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
                </returns>
      <param name="source">
                    A sequence of values to calculate the average of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>
                    Computes the average of a sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.
                </summary>
      <returns>
                    The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.
                </returns>
      <param name="source">
                    A sequence of values to calculate the average of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>
                    Computes the average of a sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.
                </summary>
      <returns>
                    The average of the sequence of values.
                </returns>
      <param name="source">
                    A sequence of values to calculate the average of.
                </param>
      <param name="selector">
                    A transform function to apply to each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
      <summary>
                    Converts the elements of an <see cref="T:System.Collections.IEnumerable" /> to the specified type.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains each element of the source sequence converted to the specified type.
                </returns>
      <param name="source">
                    The <see cref="T:System.Collections.IEnumerable" /> that contains the elements to be converted.
                </param>
      <typeparam name="TResult">
                    The type to convert the elements of <paramref name="source" /> to.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.InvalidCastException">
                    An element in the sequence cannot be cast to type <paramref name="TResult" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Concatenates two sequences.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the concatenated elements of the two input sequences.
                </returns>
      <param name="first">
                    The first sequence to concatenate.
                </param>
      <param name="second">
                    The sequence to concatenate to the first sequence.
                </param>
      <typeparam name="TSource">
                    The type of the elements of the input sequences.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
                    Determines whether a sequence contains a specified element by using the default equality comparer.
                </summary>
      <returns>true if the source sequence contains an element that has the specified value; otherwise, false.
                </returns>
      <param name="source">
                    A sequence in which to locate a value.
                </param>
      <param name="value">
                    The value to locate in the sequence.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
                    Determines whether a sequence contains a specified element by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.
                </summary>
      <returns>true if the source sequence contains an element that has the specified value; otherwise, false.
                </returns>
      <param name="source">
                    A sequence in which to locate a value.
                </param>
      <param name="value">
                    The value to locate in the sequence.
                </param>
      <param name="comparer">
                    An equality comparer to compare values.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Returns the number of elements in a sequence.
                </summary>
      <returns>
                    The number of elements in the input sequence.
                </returns>
      <param name="source">
                    A sequence that contains elements to be counted.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.OverflowException">
                    The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
                    Returns a number that represents how many elements in the specified sequence satisfy a condition.
                </summary>
      <returns>
                    A number that represents how many elements in the sequence satisfy the condition in the predicate function.
                </returns>
      <param name="source">
                    A sequence that contains elements to be tested and counted.
                </param>
      <param name="predicate">
                    A function to test each element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
      <exception cref="T:System.OverflowException">
                    The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains default(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
                </returns>
      <param name="source">
                    The sequence to return a default value for if it is empty.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
                    Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <paramref name="defaultValue" /> if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.
                </returns>
      <param name="source">
                    The sequence to return the specified value for if it is empty.
                </param>
      <param name="defaultValue">
                    The value to return if the sequence is empty.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Returns distinct elements from a sequence by using the default equality comparer to compare values.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.
                </returns>
      <param name="source">
                    The sequence to remove duplicate elements from.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
                    Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.
                </summary>
      <returns>
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.
                </returns>
      <param name="source">
                    The sequence to remove duplicate elements from.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
                    Returns the element at a specified index in a sequence.
                </summary>
      <returns>
                    The element at the specified position in the source sequence.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.
                </param>
      <param name="index">
                    The zero-based index of the element to retrieve.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than or equal to the number of elements in <paramref name="source" />.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
                    Returns the element at a specified index in a sequence or a default value if the index is out of range.
                </summary>
      <returns>default(<paramref name="TSource" />) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.
                </param>
      <param name="index">
                    The zero-based index of the element to retrieve.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Empty``1">
      <summary>
                    Returns an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has the specified type argument.
                </summary>
      <returns>
                    An empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose type argument is <paramref name="TResult" />.
                </returns>
      <typeparam name="TResult">
                    The type to assign to the type parameter of the returned generic <see cref="T:System.Collections.Generic.IEnumerable`1" />.
                </typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Produces the set difference of two sequences by using the default equality comparer to compare values.
                </summary>
      <returns>
                    A sequence that contains the set difference of the elements of two sequences.
                </returns>
      <param name="first">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <paramref name="second" /> will be returned.
                </param>
      <param name="second">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.
                </param>
      <typeparam name="TSource">
                    The type of the elements of the input sequences.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
                    Produces the set difference of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.
                </summary>
      <returns>
                    A sequence that contains the set difference of the elements of two sequences.
                </returns>
      <param name="first">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <paramref name="second" /> will be returned.
                </param>
      <param name="second">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.
                </param>
      <typeparam name="TSource">
                    The type of the elements of the input sequences.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Returns the first element of a sequence.
                </summary>
      <returns>
                    The first element in the specified sequence.
                </returns>
      <param name="source">
                    The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    The source sequence is empty.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
                    Returns the first element in a sequence that satisfies a specified condition.
                </summary>
      <returns>
                    The first element in the sequence that passes the test in the specified predicate function.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.
                </param>
      <param name="predicate">
                    A function to test each element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
      <exception cref="T:System.InvalidOperationException">
                    No element satisfies the condition in <paramref name="predicate" />.
                
                    -or-
                
                    The source sequence is empty.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
                    Returns the first element of a sequence, or a default value if the sequence contains no elements.
                </summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.
                </returns>
      <param name="source">
                    The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>
                    Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.
                </summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.
                </param>
      <param name="predicate">
                    A function to test each element for a condition.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>
                    Groups the elements of a sequence according to a specified key selector function.
                </summary>
      <returns>
                    An IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a sequence of objects and a key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.
                </param>
      <param name="keySelector">
                    A function to extract the key for each element.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by <paramref name="keySelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
                    Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.
                </summary>
      <returns>
                    An IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects and a key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.
                </param>
      <param name="keySelector">
                    A function to extract the key for each element.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by <paramref name="keySelector" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>
                    Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.
                </summary>
      <returns>
                    An IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.
                </param>
      <param name="keySelector">
                    A function to extract the key for each element.
                </param>
      <param name="elementSelector">
                    A function to map each source element to an element in the <see cref="T:System.Linq.IGrouping`2" />.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by <paramref name="keySelector" />.
                </typeparam>
      <typeparam name="TElement">
                    The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
                    Groups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.
                </summary>
      <returns>
                    An IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.
                </param>
      <param name="keySelector">
                    A function to extract the key for each element.
                </param>
      <param name="elementSelector">
                    A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.
                </param>
      <param name="comparer">
                    An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by <paramref name="keySelector" />.
                </typeparam>
      <typeparam name="TElement">
                    The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.
                </typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.
                </exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>
                    Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.
                </summary>
      <returns>
                    A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.
                </param>
      <param name="keySelector">
                    A function to extract the key for each element.
                </param>
      <param name="elementSelector">
                    A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.
                </param>
      <param name="resultSelector">
                    A function to create a result value from each group.
                </param>
      <typeparam name="TSource">
                    The type of the elements of <paramref name="source" />.
                </typeparam>
      <typeparam name="TKey">
                    The type of the key returned by <paramref name="keySelector" />.
                </typeparam>
      <typeparam name="TElement">
                    The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.
                </typeparam>
      <typeparam name="TResult">
                    The type of the result value returned by <paramref name="resultSelector" />.
                </typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
                    Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.
                </summary>
      <returns>
                    A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.
                </returns>
      <param name="source">
                    An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.
                </param>
      <param name="keySelector">
                    A function to extract the key for each element.
                </param>
      <param name="elementSelector">
                    A function to map each source element to an element in a